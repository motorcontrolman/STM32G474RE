
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b444  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800b61c  0800b61c  0001b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba6c  0800ba6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba74  0800ba74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba78  0800ba78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ba7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000070  0800baec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800baec  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b40c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000329f  00000000  00000000  0003b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0003e750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  0003fe30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b4c  00000000  00000000  000413b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b802  00000000  00000000  0006aefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155b5  00000000  00000000  000866fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bcb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065dc  00000000  00000000  0019bd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b604 	.word	0x0800b604

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800b604 	.word	0x0800b604

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b974 	b.w	8000b84 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468e      	mov	lr, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d14d      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c2:	428a      	cmp	r2, r1
 80008c4:	4694      	mov	ip, r2
 80008c6:	d969      	bls.n	800099c <__udivmoddi4+0xe8>
 80008c8:	fab2 f282 	clz	r2, r2
 80008cc:	b152      	cbz	r2, 80008e4 <__udivmoddi4+0x30>
 80008ce:	fa01 f302 	lsl.w	r3, r1, r2
 80008d2:	f1c2 0120 	rsb	r1, r2, #32
 80008d6:	fa20 f101 	lsr.w	r1, r0, r1
 80008da:	fa0c fc02 	lsl.w	ip, ip, r2
 80008de:	ea41 0e03 	orr.w	lr, r1, r3
 80008e2:	4094      	lsls	r4, r2
 80008e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e8:	0c21      	lsrs	r1, r4, #16
 80008ea:	fbbe f6f8 	udiv	r6, lr, r8
 80008ee:	fa1f f78c 	uxth.w	r7, ip
 80008f2:	fb08 e316 	mls	r3, r8, r6, lr
 80008f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008fa:	fb06 f107 	mul.w	r1, r6, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 30ff 	add.w	r0, r6, #4294967295
 800090a:	f080 811f 	bcs.w	8000b4c <__udivmoddi4+0x298>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 811c 	bls.w	8000b4c <__udivmoddi4+0x298>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a5b      	subs	r3, r3, r1
 800091a:	b2a4      	uxth	r4, r4
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3310 	mls	r3, r8, r0, r3
 8000924:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000928:	fb00 f707 	mul.w	r7, r0, r7
 800092c:	42a7      	cmp	r7, r4
 800092e:	d90a      	bls.n	8000946 <__udivmoddi4+0x92>
 8000930:	eb1c 0404 	adds.w	r4, ip, r4
 8000934:	f100 33ff 	add.w	r3, r0, #4294967295
 8000938:	f080 810a 	bcs.w	8000b50 <__udivmoddi4+0x29c>
 800093c:	42a7      	cmp	r7, r4
 800093e:	f240 8107 	bls.w	8000b50 <__udivmoddi4+0x29c>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094a:	1be4      	subs	r4, r4, r7
 800094c:	2600      	movs	r6, #0
 800094e:	b11d      	cbz	r5, 8000958 <__udivmoddi4+0xa4>
 8000950:	40d4      	lsrs	r4, r2
 8000952:	2300      	movs	r3, #0
 8000954:	e9c5 4300 	strd	r4, r3, [r5]
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d909      	bls.n	8000976 <__udivmoddi4+0xc2>
 8000962:	2d00      	cmp	r5, #0
 8000964:	f000 80ef 	beq.w	8000b46 <__udivmoddi4+0x292>
 8000968:	2600      	movs	r6, #0
 800096a:	e9c5 0100 	strd	r0, r1, [r5]
 800096e:	4630      	mov	r0, r6
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	fab3 f683 	clz	r6, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d14a      	bne.n	8000a14 <__udivmoddi4+0x160>
 800097e:	428b      	cmp	r3, r1
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xd4>
 8000982:	4282      	cmp	r2, r0
 8000984:	f200 80f9 	bhi.w	8000b7a <__udivmoddi4+0x2c6>
 8000988:	1a84      	subs	r4, r0, r2
 800098a:	eb61 0303 	sbc.w	r3, r1, r3
 800098e:	2001      	movs	r0, #1
 8000990:	469e      	mov	lr, r3
 8000992:	2d00      	cmp	r5, #0
 8000994:	d0e0      	beq.n	8000958 <__udivmoddi4+0xa4>
 8000996:	e9c5 4e00 	strd	r4, lr, [r5]
 800099a:	e7dd      	b.n	8000958 <__udivmoddi4+0xa4>
 800099c:	b902      	cbnz	r2, 80009a0 <__udivmoddi4+0xec>
 800099e:	deff      	udf	#255	; 0xff
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	f040 8092 	bne.w	8000ace <__udivmoddi4+0x21a>
 80009aa:	eba1 010c 	sub.w	r1, r1, ip
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2601      	movs	r6, #1
 80009b8:	0c20      	lsrs	r0, r4, #16
 80009ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80009be:	fb07 1113 	mls	r1, r7, r3, r1
 80009c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c6:	fb0e f003 	mul.w	r0, lr, r3
 80009ca:	4288      	cmp	r0, r1
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x12c>
 80009ce:	eb1c 0101 	adds.w	r1, ip, r1
 80009d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x12a>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 80009de:	4643      	mov	r3, r8
 80009e0:	1a09      	subs	r1, r1, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x156>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x154>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2ca>
 8000a08:	4608      	mov	r0, r1
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a12:	e79c      	b.n	800094e <__udivmoddi4+0x9a>
 8000a14:	f1c6 0720 	rsb	r7, r6, #32
 8000a18:	40b3      	lsls	r3, r6
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa20 f407 	lsr.w	r4, r0, r7
 8000a26:	fa01 f306 	lsl.w	r3, r1, r6
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	40f9      	lsrs	r1, r7
 8000a2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a32:	fa00 f306 	lsl.w	r3, r0, r6
 8000a36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a3a:	0c20      	lsrs	r0, r4, #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fb09 1118 	mls	r1, r9, r8, r1
 8000a44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a48:	fb08 f00e 	mul.w	r0, r8, lr
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b8>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2bc>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2bc>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a74:	fb09 1110 	mls	r1, r9, r0, r1
 8000a78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a80:	458e      	cmp	lr, r1
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1e2>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2b4>
 8000a8e:	458e      	cmp	lr, r1
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2b4>
 8000a92:	3802      	subs	r0, #2
 8000a94:	4461      	add	r1, ip
 8000a96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9e:	eba1 010e 	sub.w	r1, r1, lr
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46a6      	mov	lr, r4
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x2a4>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x2a0>
 8000aac:	b15d      	cbz	r5, 8000ac6 <__udivmoddi4+0x212>
 8000aae:	ebb3 0208 	subs.w	r2, r3, r8
 8000ab2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aba:	fa22 f306 	lsr.w	r3, r2, r6
 8000abe:	40f1      	lsrs	r1, r6
 8000ac0:	431f      	orrs	r7, r3
 8000ac2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	40d8      	lsrs	r0, r3
 8000ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad8:	fa21 f303 	lsr.w	r3, r1, r3
 8000adc:	4091      	lsls	r1, r2
 8000ade:	4301      	orrs	r1, r0
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aec:	fb07 3610 	mls	r6, r7, r0, r3
 8000af0:	0c0b      	lsrs	r3, r1, #16
 8000af2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af6:	fb00 f60e 	mul.w	r6, r0, lr
 8000afa:	429e      	cmp	r6, r3
 8000afc:	fa04 f402 	lsl.w	r4, r4, r2
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x260>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b8>
 8000b0c:	429e      	cmp	r6, r3
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b8>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	1b9b      	subs	r3, r3, r6
 8000b16:	b289      	uxth	r1, r1
 8000b18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b24:	fb06 f30e 	mul.w	r3, r6, lr
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x28a>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b3a:	3e02      	subs	r6, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0x104>
 8000b46:	462e      	mov	r6, r5
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e705      	b.n	8000958 <__udivmoddi4+0xa4>
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	e6e3      	b.n	8000918 <__udivmoddi4+0x64>
 8000b50:	4618      	mov	r0, r3
 8000b52:	e6f8      	b.n	8000946 <__udivmoddi4+0x92>
 8000b54:	454b      	cmp	r3, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f8>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b60:	3801      	subs	r0, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f8>
 8000b64:	4646      	mov	r6, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x28a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1e2>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b8>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4461      	add	r1, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x12c>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e709      	b.n	8000992 <__udivmoddi4+0xde>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x156>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b92:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b96:	ed87 1a01 	vstr	s2, [r7, #4]
 8000b9a:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	ed93 7a00 	vldr	s14, [r3]
 8000ba2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ba6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000bb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bce:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	ee07 3a90 	vmov	s15, r3
}
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000be6:	b480      	push	{r7}
 8000be8:	b087      	sub	sp, #28
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bf0:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bf4:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	db0b      	blt.n	8000c1e <gfDivideAvoidZero+0x38>
 8000c06:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c16:	d502      	bpl.n	8000c1e <gfDivideAvoidZero+0x38>
		den = threshold;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	e017      	b.n	8000c4e <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 8000c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2a:	d510      	bpl.n	8000c4e <gfDivideAvoidZero+0x68>
 8000c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c30:	eef1 7a67 	vneg.f32	s15, s15
 8000c34:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c40:	dd05      	ble.n	8000c4e <gfDivideAvoidZero+0x68>
		den = -threshold;
 8000c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c46:	eef1 7a67 	vneg.f32	s15, s15
 8000c4a:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 8000c4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c52:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c5a:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	ee07 3a90 	vmov	s15, r3
}
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000c7e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000ce4 <gfWrapTheta+0x70>
 8000c82:	ed97 0a01 	vldr	s0, [r7, #4]
 8000c86:	f009 fd6f 	bl	800a768 <fmodf>
 8000c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c92:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000ce8 <gfWrapTheta+0x74>
 8000c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	dd08      	ble.n	8000cb2 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000ca0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ca4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ce4 <gfWrapTheta+0x70>
 8000ca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cac:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cb0:	e010      	b.n	8000cd4 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000cec <gfWrapTheta+0x78>
 8000cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	d507      	bpl.n	8000cd4 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ce4 <gfWrapTheta+0x70>
 8000ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cd0:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	ee07 3a90 	vmov	s15, r3
}
 8000cda:	eeb0 0a67 	vmov.f32	s0, s15
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40c90fdb 	.word	0x40c90fdb
 8000ce8:	40490fdb 	.word	0x40490fdb
 8000cec:	c0490fdb 	.word	0xc0490fdb

08000cf0 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8000cfe:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000d02:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	dd01      	ble.n	8000d18 <gUpperLowerLimit+0x28>
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 8000d18:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d28:	d501      	bpl.n	8000d2e <gUpperLowerLimit+0x3e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]
	return input;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	ee07 3a90 	vmov	s15, r3
}
 8000d34:	eeb0 0a67 	vmov.f32	s0, s15
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <readButton1>:
#include "SignalReadWrite.h"


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <readButton1+0x20>)
 8000d50:	f006 f828 	bl	8006da4 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
	return B1;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	48000800 	.word	0x48000800

08000d68 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000d76:	687b      	ldr	r3, [r7, #4]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	085b      	lsrs	r3, r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db6:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc4:	eef1 7a67 	vneg.f32	s15, s15
 8000dc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	d50a      	bpl.n	8000dec <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de8:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000dec:	ed97 7a05 	vldr	s14, [r7, #20]
 8000df0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000e10 <readTimeInterval+0x8c>
 8000df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df8:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	ee07 3a90 	vmov	s15, r3
}
 8000e02:	eeb0 0a67 	vmov.f32	s0, s15
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	4d221fe8 	.word	0x4d221fe8

08000e14 <readVolume>:

float readVolume(void){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <readVolume+0x50>)
 8000e1c:	885b      	ldrh	r3, [r3, #2]
 8000e1e:	807b      	strh	r3, [r7, #2]

	//Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
	Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
 8000e20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e24:	f2a3 33b6 	subw	r3, r3, #950	; 0x3b6
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e30:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000e68 <readVolume+0x54>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	edc7 7a01 	vstr	s15, [r7, #4]
	if( Volume < 0) Volume = 0;
 8000e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e48:	d502      	bpl.n	8000e50 <readVolume+0x3c>
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
	return Volume;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	ee07 3a90 	vmov	s15, r3
}
 8000e56:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	2000008c 	.word	0x2000008c
 8000e68:	3a164fd2 	.word	0x3a164fd2

08000e6c <readVdc>:

float readVdc(void){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <readVdc+0x38>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * AD2VOLTAGE;
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e82:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000ea8 <readVdc+0x3c>
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	ee07 3a90 	vmov	s15, r3
}
 8000e94:	eeb0 0a67 	vmov.f32	s0, s15
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000008c 	.word	0x2000008c
 8000ea8:	3cce8561 	.word	0x3cce8561
 8000eac:	00000000 	.word	0x00000000

08000eb0 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ecc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000edc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	b292      	uxth	r2, r2
 8000ee6:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000fb0 <readCurrent+0x100>
 8000ef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000efc:	ee17 0a90 	vmov	r0, s15
 8000f00:	f7ff fc18 	bl	8000734 <__aeabi_f2d>
 8000f04:	a328      	add	r3, pc, #160	; (adr r3, 8000fa8 <readCurrent+0xf8>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f7ff f985 	bl	8000218 <__aeabi_dmul>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fc65 	bl	80007e4 <__aeabi_d2f>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	601a      	str	r2, [r3, #0]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3302      	adds	r3, #2
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f2e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000fb4 <readCurrent+0x104>
 8000f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f36:	ee17 0a90 	vmov	r0, s15
 8000f3a:	f7ff fbfb 	bl	8000734 <__aeabi_f2d>
 8000f3e:	a31a      	add	r3, pc, #104	; (adr r3, 8000fa8 <readCurrent+0xf8>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff f968 	bl	8000218 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	1d1c      	adds	r4, r3, #4
 8000f54:	f7ff fc46 	bl	80007e4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	6023      	str	r3, [r4, #0]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000fb8 <readCurrent+0x108>
 8000f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f72:	ee17 0a90 	vmov	r0, s15
 8000f76:	f7ff fbdd 	bl	8000734 <__aeabi_f2d>
 8000f7a:	a30b      	add	r3, pc, #44	; (adr r3, 8000fa8 <readCurrent+0xf8>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff f94a 	bl	8000218 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f103 0408 	add.w	r4, r3, #8
 8000f92:	f7ff fc27 	bl	80007e4 <__aeabi_d2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	6023      	str	r3, [r4, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	f83914d2 	.word	0xf83914d2
 8000fac:	bfd6f74d 	.word	0xbfd6f74d
 8000fb0:	44f5c000 	.word	0x44f5c000
 8000fb4:	44f72000 	.word	0x44f72000
 8000fb8:	44f62000 	.word	0x44f62000

08000fbc <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f005 feea 	bl	8006da4 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1c5c      	adds	r4, r3, #1
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <readHallSignal+0x48>)
 8000fe0:	f005 fee0 	bl	8006da4 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	1c9c      	adds	r4, r3, #2
 8000fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <readHallSignal+0x48>)
 8000ff2:	f005 fed7 	bl	8006da4 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	7023      	strb	r3, [r4, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	48000400 	.word	0x48000400

08001008 <writeOutputMode>:

void writeOutputMode(int8_t* outputMode){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f993 3000 	ldrsb.w	r3, [r3]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <writeOutputMode+0x80>)
 8001022:	f005 fed7 	bl	8006dd4 <HAL_GPIO_WritePin>
 8001026:	e005      	b.n	8001034 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <writeOutputMode+0x80>)
 8001030:	f005 fed0 	bl	8006dd4 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	f993 3000 	ldrsb.w	r3, [r3]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d106      	bne.n	800104e <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <writeOutputMode+0x80>)
 8001048:	f005 fec4 	bl	8006dd4 <HAL_GPIO_WritePin>
 800104c:	e005      	b.n	800105a <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <writeOutputMode+0x80>)
 8001056:	f005 febd 	bl	8006dd4 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3302      	adds	r3, #2
 800105e:	f993 3000 	ldrsb.w	r3, [r3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d106      	bne.n	8001074 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <writeOutputMode+0x80>)
 800106e:	f005 feb1 	bl	8006dd4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8001072:	e005      	b.n	8001080 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <writeOutputMode+0x80>)
 800107c:	f005 feaa 	bl	8006dd4 <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	48000800 	.word	0x48000800

0800108c <writeDuty>:

void writeDuty(float* Duty){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <writeDuty+0x80>)
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <writeDuty+0x80>)
 80010ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b0:	ee17 2a90 	vmov	r2, s15
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3304      	adds	r3, #4
 80010ba:	ed93 7a00 	vldr	s14, [r3]
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <writeDuty+0x80>)
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <writeDuty+0x80>)
 80010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d4:	ee17 2a90 	vmov	r2, s15
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3308      	adds	r3, #8
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <writeDuty+0x80>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <writeDuty+0x80>)
 80010f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f8:	ee17 2a90 	vmov	r2, s15
 80010fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40012c00 	.word	0x40012c00

08001110 <sixStepTasks>:
static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode);
static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty);


// input DutyRef minus1-1, output Duty 0-1
void sixStepTasks(float DutyRef, uint8_t leadAngleModeFlg, float leadAngle, float* Theta, float* electAngVelo, float* Duty, int8_t* outputMode){
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	ed87 0a05 	vstr	s0, [r7, #20]
 800111a:	edc7 0a03 	vstr	s1, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	4603      	mov	r3, r0
 8001126:	74fb      	strb	r3, [r7, #19]
	float Ki_PLL;
	float Ts_PLL;
	float timeInterval;

	// Read Hall Signals
	readHallSignal(gHall);
 8001128:	48b3      	ldr	r0, [pc, #716]	; (80013f8 <sixStepTasks+0x2e8>)
 800112a:	f7ff ff47 	bl	8000fbc <readHallSignal>

	// Hold & Read Input Capture Count
	gInputCaptureCnt_pre = gInputCaptureCnt;
 800112e:	4bb3      	ldr	r3, [pc, #716]	; (80013fc <sixStepTasks+0x2ec>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4ab3      	ldr	r2, [pc, #716]	; (8001400 <sixStepTasks+0x2f0>)
 8001134:	6013      	str	r3, [r2, #0]
	gInputCaptureCnt = readInputCaptureCnt();
 8001136:	f7ff fe17 	bl	8000d68 <readInputCaptureCnt>
 800113a:	4603      	mov	r3, r0
 800113c:	4aaf      	ldr	r2, [pc, #700]	; (80013fc <sixStepTasks+0x2ec>)
 800113e:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(gInputCaptureCnt != gInputCaptureCnt_pre){
 8001140:	4bae      	ldr	r3, [pc, #696]	; (80013fc <sixStepTasks+0x2ec>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4bae      	ldr	r3, [pc, #696]	; (8001400 <sixStepTasks+0x2f0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d023      	beq.n	8001194 <sixStepTasks+0x84>
		timeInterval = readTimeInterval(gInputCaptureCnt, gInputCaptureCnt_pre);
 800114c:	4bab      	ldr	r3, [pc, #684]	; (80013fc <sixStepTasks+0x2ec>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4aab      	ldr	r2, [pc, #684]	; (8001400 <sixStepTasks+0x2f0>)
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fe14 	bl	8000d84 <readTimeInterval>
 800115c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		if( timeInterval > 0.0001f)
 8001160:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001164:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001404 <sixStepTasks+0x2f4>
 8001168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	dd0c      	ble.n	800118c <sixStepTasks+0x7c>
			gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8001172:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 8001408 <sixStepTasks+0x2f8>
 8001176:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800117a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800117e:	f7ff fd32 	bl	8000be6 <gfDivideAvoidZero>
 8001182:	eef0 7a40 	vmov.f32	s15, s0
 8001186:	4ba1      	ldr	r3, [pc, #644]	; (800140c <sixStepTasks+0x2fc>)
 8001188:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 800118c:	4ba0      	ldr	r3, [pc, #640]	; (8001410 <sixStepTasks+0x300>)
 800118e:	2200      	movs	r2, #0
 8001190:	801a      	strh	r2, [r3, #0]
 8001192:	e00f      	b.n	80011b4 <sixStepTasks+0xa4>
	}
	else if(sNoInputCaptureCnt < 2000)
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <sixStepTasks+0x300>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800119c:	d206      	bcs.n	80011ac <sixStepTasks+0x9c>
		sNoInputCaptureCnt ++;
 800119e:	4b9c      	ldr	r3, [pc, #624]	; (8001410 <sixStepTasks+0x300>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b9a      	ldr	r3, [pc, #616]	; (8001410 <sixStepTasks+0x300>)
 80011a8:	801a      	strh	r2, [r3, #0]
 80011aa:	e003      	b.n	80011b4 <sixStepTasks+0xa4>
	else
		gElectFreq = 0;
 80011ac:	4b97      	ldr	r3, [pc, #604]	; (800140c <sixStepTasks+0x2fc>)
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]


	// Calculate PLL Gain based on Electrical Frequency
	wc_PLL = sElectAngVeloEstimate * 0.5f;//gElectFreq * 0.5f * TWOPI;
 80011b4:	4b97      	ldr	r3, [pc, #604]	; (8001414 <sixStepTasks+0x304>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	//if (wc_PLL > 6000)
	//	wc_PLL = 6000;
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80011c6:	4b93      	ldr	r3, [pc, #588]	; (8001414 <sixStepTasks+0x304>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001418 <sixStepTasks+0x308>
 80011d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80011d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Kp_PLL = wc_PLL;
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	623b      	str	r3, [r7, #32]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 80011ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f0:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800141c <sixStepTasks+0x30c>
 80011f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc7 7a07 	vstr	s15, [r7, #28]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 800120c:	4b84      	ldr	r3, [pc, #528]	; (8001420 <sixStepTasks+0x310>)
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b84      	ldr	r3, [pc, #528]	; (8001424 <sixStepTasks+0x314>)
 8001212:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(gHall);
 8001214:	4878      	ldr	r0, [pc, #480]	; (80013f8 <sixStepTasks+0x2e8>)
 8001216:	f000 f91f 	bl	8001458 <calcVoltageMode>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b80      	ldr	r3, [pc, #512]	; (8001420 <sixStepTasks+0x310>)
 8001220:	701a      	strb	r2, [r3, #0]

	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8001222:	4b81      	ldr	r3, [pc, #516]	; (8001428 <sixStepTasks+0x318>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a81      	ldr	r2, [pc, #516]	; (800142c <sixStepTasks+0x31c>)
 8001228:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 800122a:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <sixStepTasks+0x314>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4a7c      	ldr	r2, [pc, #496]	; (8001420 <sixStepTasks+0x310>)
 8001230:	7811      	ldrb	r1, [r2, #0]
 8001232:	4a7f      	ldr	r2, [pc, #508]	; (8001430 <sixStepTasks+0x320>)
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f955 	bl	80014e4 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 800123a:	4b79      	ldr	r3, [pc, #484]	; (8001420 <sixStepTasks+0x310>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4a7c      	ldr	r2, [pc, #496]	; (8001430 <sixStepTasks+0x320>)
 8001240:	f992 2000 	ldrsb.w	r2, [r2]
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f978 	bl	800153c <calcElectAngleFromVoltageMode>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	4b75      	ldr	r3, [pc, #468]	; (8001428 <sixStepTasks+0x318>)
 8001252:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8001256:	4b74      	ldr	r3, [pc, #464]	; (8001428 <sixStepTasks+0x318>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	f7ff fd08 	bl	8000c74 <gfWrapTheta>
 8001264:	eef0 7a40 	vmov.f32	s15, s0
 8001268:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <sixStepTasks+0x318>)
 800126a:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sLeadAngleModeFlg_pre = sLeadAngleModeFlg;
 800126e:	4b71      	ldr	r3, [pc, #452]	; (8001434 <sixStepTasks+0x324>)
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	4b71      	ldr	r3, [pc, #452]	; (8001438 <sixStepTasks+0x328>)
 8001274:	701a      	strb	r2, [r3, #0]
	sLeadAngleModeFlg = leadAngleModeFlg;//calcLeadAngleModeFlg();
 8001276:	4a6f      	ldr	r2, [pc, #444]	; (8001434 <sixStepTasks+0x324>)
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	7013      	strb	r3, [r2, #0]

	if(sLeadAngleModeFlg == 1){
 800127c:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <sixStepTasks+0x324>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 8082 	bne.w	800138a <sixStepTasks+0x27a>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sLeadAngleModeFlg_pre == 0 ){
 8001286:	4b6c      	ldr	r3, [pc, #432]	; (8001438 <sixStepTasks+0x328>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <sixStepTasks+0x1a2>
			sElectAngVeloEstimate = gElectFreq * TWOPI;
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <sixStepTasks+0x2fc>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800143c <sixStepTasks+0x32c>
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <sixStepTasks+0x304>)
 800129e:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 80012a2:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <sixStepTasks+0x304>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a66      	ldr	r2, [pc, #408]	; (8001440 <sixStepTasks+0x330>)
 80012a8:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 80012aa:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <sixStepTasks+0x318>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a65      	ldr	r2, [pc, #404]	; (8001444 <sixStepTasks+0x334>)
 80012b0:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <sixStepTasks+0x304>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001448 <sixStepTasks+0x338>
 80012bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012c0:	4b60      	ldr	r3, [pc, #384]	; (8001444 <sixStepTasks+0x334>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <sixStepTasks+0x334>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 80012d0:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <sixStepTasks+0x334>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	f7ff fccb 	bl	8000c74 <gfWrapTheta>
 80012de:	eef0 7a40 	vmov.f32	s15, s0
 80012e2:	4b58      	ldr	r3, [pc, #352]	; (8001444 <sixStepTasks+0x334>)
 80012e4:	edc3 7a00 	vstr	s15, [r3]

		electAnglePrusLeadAngle = sElectAngleEstimate + leadAngle;
 80012e8:	4b56      	ldr	r3, [pc, #344]	; (8001444 <sixStepTasks+0x334>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	edc7 7a06 	vstr	s15, [r7, #24]
		electAnglePrusLeadAngle = gfWrapTheta(electAnglePrusLeadAngle);
 80012fa:	ed97 0a06 	vldr	s0, [r7, #24]
 80012fe:	f7ff fcb9 	bl	8000c74 <gfWrapTheta>
 8001302:	ed87 0a06 	vstr	s0, [r7, #24]

		sVoltageModeModify = calcVoltageModeFromElectAngle(electAnglePrusLeadAngle);
 8001306:	ed97 0a06 	vldr	s0, [r7, #24]
 800130a:	f000 f971 	bl	80015f0 <calcVoltageModeFromElectAngle>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <sixStepTasks+0x33c>)
 8001314:	701a      	strb	r2, [r3, #0]

		if( sElectAngleActual != sElectAngleActual_pre){
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <sixStepTasks+0x318>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <sixStepTasks+0x31c>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	eeb4 7a67 	vcmp.f32	s14, s15
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d027      	beq.n	800137c <sixStepTasks+0x26c>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 800132c:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <sixStepTasks+0x318>)
 800132e:	ed93 7a00 	vldr	s14, [r3]
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <sixStepTasks+0x334>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133c:	4b44      	ldr	r3, [pc, #272]	; (8001450 <sixStepTasks+0x340>)
 800133e:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <sixStepTasks+0x340>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	f7ff fc92 	bl	8000c74 <gfWrapTheta>
 8001350:	eef0 7a40 	vmov.f32	s15, s0
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <sixStepTasks+0x340>)
 8001356:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <sixStepTasks+0x340>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	4837      	ldr	r0, [pc, #220]	; (8001440 <sixStepTasks+0x330>)
 8001362:	ed97 1a07 	vldr	s2, [r7, #28]
 8001366:	edd7 0a08 	vldr	s1, [r7, #32]
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	f7ff fc0b 	bl	8000b88 <cfPhaseLockedLoop>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <sixStepTasks+0x304>)
 8001378:	edc3 7a00 	vstr	s15, [r3]
		}

		calcOutputMode(sVoltageModeModify, sOutputMode);
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <sixStepTasks+0x33c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4934      	ldr	r1, [pc, #208]	; (8001454 <sixStepTasks+0x344>)
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f9e4 	bl	8001750 <calcOutputMode>
 8001388:	e013      	b.n	80013b2 <sixStepTasks+0x2a2>

	}

	else{
		// Control without Electrical Angle ( Use Only Hall Signals )
		calcOutputMode(sVoltageMode, sOutputMode);
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <sixStepTasks+0x310>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4931      	ldr	r1, [pc, #196]	; (8001454 <sixStepTasks+0x344>)
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f9dd 	bl	8001750 <calcOutputMode>
		sElectAngleEstimate = sElectAngleActual;
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <sixStepTasks+0x318>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a2a      	ldr	r2, [pc, #168]	; (8001444 <sixStepTasks+0x334>)
 800139c:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = gElectFreq * TWOPI;
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <sixStepTasks+0x2fc>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800143c <sixStepTasks+0x32c>
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <sixStepTasks+0x304>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
	}

	// Output Voltage
	calcDuty(sOutputMode, DutyRef, Duty);
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80013b8:	4826      	ldr	r0, [pc, #152]	; (8001454 <sixStepTasks+0x344>)
 80013ba:	f000 fa3d 	bl	8001838 <calcDuty>

	// Output Static Signals
	outputMode[0] = sOutputMode[0];
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <sixStepTasks+0x344>)
 80013c0:	f993 2000 	ldrsb.w	r2, [r3]
 80013c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c6:	701a      	strb	r2, [r3, #0]
	outputMode[1] = sOutputMode[1];
 80013c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a21      	ldr	r2, [pc, #132]	; (8001454 <sixStepTasks+0x344>)
 80013ce:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80013d2:	701a      	strb	r2, [r3, #0]
	outputMode[2] = sOutputMode[2];
 80013d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d6:	3302      	adds	r3, #2
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <sixStepTasks+0x344>)
 80013da:	f992 2002 	ldrsb.w	r2, [r2, #2]
 80013de:	701a      	strb	r2, [r3, #0]

	*Theta = sElectAngleEstimate;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <sixStepTasks+0x334>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <sixStepTasks+0x304>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]

}
 80013f0:	bf00      	nop
 80013f2:	3730      	adds	r7, #48	; 0x30
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000090 	.word	0x20000090
 80013fc:	20000094 	.word	0x20000094
 8001400:	20000098 	.word	0x20000098
 8001404:	38d1b717 	.word	0x38d1b717
 8001408:	31ca1db9 	.word	0x31ca1db9
 800140c:	2000009c 	.word	0x2000009c
 8001410:	200000e2 	.word	0x200000e2
 8001414:	200000f8 	.word	0x200000f8
 8001418:	3e22f983 	.word	0x3e22f983
 800141c:	3e4ccccd 	.word	0x3e4ccccd
 8001420:	200000df 	.word	0x200000df
 8001424:	200000e0 	.word	0x200000e0
 8001428:	200000e8 	.word	0x200000e8
 800142c:	200000ec 	.word	0x200000ec
 8001430:	200000e5 	.word	0x200000e5
 8001434:	200000e6 	.word	0x200000e6
 8001438:	200000e7 	.word	0x200000e7
 800143c:	40c90fdb 	.word	0x40c90fdb
 8001440:	200000f4 	.word	0x200000f4
 8001444:	200000f0 	.word	0x200000f0
 8001448:	4684d000 	.word	0x4684d000
 800144c:	200000e4 	.word	0x200000e4
 8001450:	200000fc 	.word	0x200000fc
 8001454:	200000dc 	.word	0x200000dc

08001458 <calcVoltageMode>:
else
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

static uint8_t calcVoltageMode(uint8_t* Hall){
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3302      	adds	r3, #2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3301      	adds	r3, #1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b2da      	uxtb	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	3b01      	subs	r3, #1
 8001488:	2b05      	cmp	r3, #5
 800148a:	d821      	bhi.n	80014d0 <calcVoltageMode+0x78>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <calcVoltageMode+0x3c>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014cb 	.word	0x080014cb
 8001498:	080014b3 	.word	0x080014b3
 800149c:	080014ad 	.word	0x080014ad
 80014a0:	080014bf 	.word	0x080014bf
 80014a4:	080014c5 	.word	0x080014c5
 80014a8:	080014b9 	.word	0x080014b9
	  case 3:
		voltageMode = 3;
 80014ac:	2303      	movs	r3, #3
 80014ae:	73fb      	strb	r3, [r7, #15]
		break;
 80014b0:	e011      	b.n	80014d6 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 80014b2:	2304      	movs	r3, #4
 80014b4:	73fb      	strb	r3, [r7, #15]
		break;
 80014b6:	e00e      	b.n	80014d6 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 80014b8:	2305      	movs	r3, #5
 80014ba:	73fb      	strb	r3, [r7, #15]
		break;
 80014bc:	e00b      	b.n	80014d6 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 80014be:	2306      	movs	r3, #6
 80014c0:	73fb      	strb	r3, [r7, #15]
		break;
 80014c2:	e008      	b.n	80014d6 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
		break;
 80014c8:	e005      	b.n	80014d6 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	73fb      	strb	r3, [r7, #15]
		break;
 80014ce:	e002      	b.n	80014d6 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
	  break;
 80014d4:	bf00      	nop
	}
	return voltageMode;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <calcRotDirFromVoltageMode>:
static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	603a      	str	r2, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	460b      	mov	r3, r1
 80014f2:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 80014f4:	79ba      	ldrb	r2, [r7, #6]
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	2b01      	cmp	r3, #1
 8001504:	dd04      	ble.n	8001510 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	3b06      	subs	r3, #6
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e008      	b.n	8001522 <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8001510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	da03      	bge.n	8001522 <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3306      	adds	r3, #6
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	701a      	strb	r2, [r3, #0]

}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3b01      	subs	r3, #1
 8001550:	2b05      	cmp	r3, #5
 8001552:	d822      	bhi.n	800159a <calcElectAngleFromVoltageMode+0x5e>
 8001554:	a201      	add	r2, pc, #4	; (adr r2, 800155c <calcElectAngleFromVoltageMode+0x20>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800158f 	.word	0x0800158f
 8001560:	08001595 	.word	0x08001595
 8001564:	08001575 	.word	0x08001575
 8001568:	0800157d 	.word	0x0800157d
 800156c:	08001583 	.word	0x08001583
 8001570:	08001589 	.word	0x08001589
		  case 3:
			  electAngle_Center = 0.0f;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
			break;
 800157a:	e012      	b.n	80015a2 <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <calcElectAngleFromVoltageMode+0x9c>)
 800157e:	60fb      	str	r3, [r7, #12]
			break;
 8001580:	e00f      	b.n	80015a2 <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <calcElectAngleFromVoltageMode+0xa0>)
 8001584:	60fb      	str	r3, [r7, #12]
			break;
 8001586:	e00c      	b.n	80015a2 <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <calcElectAngleFromVoltageMode+0xa4>)
 800158a:	60fb      	str	r3, [r7, #12]
			break;
 800158c:	e009      	b.n	80015a2 <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <calcElectAngleFromVoltageMode+0xa8>)
 8001590:	60fb      	str	r3, [r7, #12]
			break;
 8001592:	e006      	b.n	80015a2 <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <calcElectAngleFromVoltageMode+0xac>)
 8001596:	60fb      	str	r3, [r7, #12]
			break;
 8001598:	e003      	b.n	80015a2 <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
		  break;
 80015a0:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 80015a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015ec <calcElectAngleFromVoltageMode+0xb0>
 80015b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015be:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	ee07 3a90 	vmov	s15, r3
}
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	3f860a92 	.word	0x3f860a92
 80015dc:	40060a92 	.word	0x40060a92
 80015e0:	40490fdb 	.word	0x40490fdb
 80015e4:	c0060a92 	.word	0xc0060a92
 80015e8:	bf860a92 	.word	0xbf860a92
 80015ec:	3f060a92 	.word	0x3f060a92

080015f0 <calcVoltageModeFromElectAngle>:
		leadAngleModeFlg = 1;

	return leadAngleModeFlg;
}

static uint8_t calcVoltageModeFromElectAngle(float electAngle){
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t voltageMode = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Angle Limit : minus PI - prus PI
	float voltageMode1_StartAngle = -PI + PIDIV6;
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <calcVoltageModeFromElectAngle+0x148>)
 8001602:	623b      	str	r3, [r7, #32]
	float voltageMode2_StartAngle = -PIDIV3 * 2.0f + PIDIV6;
 8001604:	4b4d      	ldr	r3, [pc, #308]	; (800173c <calcVoltageModeFromElectAngle+0x14c>)
 8001606:	61fb      	str	r3, [r7, #28]
	float voltageMode3_StartAngle = -PIDIV3 + PIDIV6;
 8001608:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <calcVoltageModeFromElectAngle+0x150>)
 800160a:	61bb      	str	r3, [r7, #24]
	float voltageMode4_StartAngle = PIDIV6;
 800160c:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <calcVoltageModeFromElectAngle+0x154>)
 800160e:	617b      	str	r3, [r7, #20]
	float voltageMode5_StartAngle = PIDIV3 + PIDIV6;
 8001610:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <calcVoltageModeFromElectAngle+0x158>)
 8001612:	613b      	str	r3, [r7, #16]
	float voltageMode6_StartAngle = PIDIV3 * 2.0f + PIDIV6;
 8001614:	4b4d      	ldr	r3, [pc, #308]	; (800174c <calcVoltageModeFromElectAngle+0x15c>)
 8001616:	60fb      	str	r3, [r7, #12]

	if(electAngle >= voltageMode6_StartAngle || electAngle < voltageMode1_StartAngle ){
 8001618:	ed97 7a01 	vldr	s14, [r7, #4]
 800161c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	da08      	bge.n	800163c <calcVoltageModeFromElectAngle+0x4c>
 800162a:	ed97 7a01 	vldr	s14, [r7, #4]
 800162e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d503      	bpl.n	8001644 <calcVoltageModeFromElectAngle+0x54>
		voltageMode = 6;
 800163c:	2306      	movs	r3, #6
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001642:	e070      	b.n	8001726 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode1_StartAngle && electAngle < voltageMode2_StartAngle ){
 8001644:	ed97 7a01 	vldr	s14, [r7, #4]
 8001648:	edd7 7a08 	vldr	s15, [r7, #32]
 800164c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	db0c      	blt.n	8001670 <calcVoltageModeFromElectAngle+0x80>
 8001656:	ed97 7a01 	vldr	s14, [r7, #4]
 800165a:	edd7 7a07 	vldr	s15, [r7, #28]
 800165e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	d503      	bpl.n	8001670 <calcVoltageModeFromElectAngle+0x80>
		voltageMode = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800166e:	e05a      	b.n	8001726 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode2_StartAngle && electAngle < voltageMode3_StartAngle ){
 8001670:	ed97 7a01 	vldr	s14, [r7, #4]
 8001674:	edd7 7a07 	vldr	s15, [r7, #28]
 8001678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	db0c      	blt.n	800169c <calcVoltageModeFromElectAngle+0xac>
 8001682:	ed97 7a01 	vldr	s14, [r7, #4]
 8001686:	edd7 7a06 	vldr	s15, [r7, #24]
 800168a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d503      	bpl.n	800169c <calcVoltageModeFromElectAngle+0xac>
		voltageMode = 2;
 8001694:	2302      	movs	r3, #2
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800169a:	e044      	b.n	8001726 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode3_StartAngle && electAngle < voltageMode4_StartAngle ){
 800169c:	ed97 7a01 	vldr	s14, [r7, #4]
 80016a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	db0c      	blt.n	80016c8 <calcVoltageModeFromElectAngle+0xd8>
 80016ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	d503      	bpl.n	80016c8 <calcVoltageModeFromElectAngle+0xd8>
		voltageMode = 3;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016c6:	e02e      	b.n	8001726 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode4_StartAngle && electAngle < voltageMode5_StartAngle ){
 80016c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	db0c      	blt.n	80016f4 <calcVoltageModeFromElectAngle+0x104>
 80016da:	ed97 7a01 	vldr	s14, [r7, #4]
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d503      	bpl.n	80016f4 <calcVoltageModeFromElectAngle+0x104>
		voltageMode = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f2:	e018      	b.n	8001726 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode5_StartAngle && electAngle < voltageMode6_StartAngle ){
 80016f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80016f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	db0c      	blt.n	8001720 <calcVoltageModeFromElectAngle+0x130>
 8001706:	ed97 7a01 	vldr	s14, [r7, #4]
 800170a:	edd7 7a03 	vldr	s15, [r7, #12]
 800170e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	d503      	bpl.n	8001720 <calcVoltageModeFromElectAngle+0x130>
		voltageMode = 5;
 8001718:	2305      	movs	r3, #5
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171e:	e002      	b.n	8001726 <calcVoltageModeFromElectAngle+0x136>
	}
	else
		voltageMode = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return voltageMode;
 8001726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800172a:	4618      	mov	r0, r3
 800172c:	372c      	adds	r7, #44	; 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	c0278d36 	.word	0xc0278d36
 800173c:	bfc90fdb 	.word	0xbfc90fdb
 8001740:	bf060a92 	.word	0xbf060a92
 8001744:	3f060a92 	.word	0x3f060a92
 8001748:	3fc90fdb 	.word	0x3fc90fdb
 800174c:	40278d36 	.word	0x40278d36

08001750 <calcOutputMode>:

static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
		// Decide output mode
		switch(voltageMode){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	3b01      	subs	r3, #1
 8001760:	2b05      	cmp	r3, #5
 8001762:	d857      	bhi.n	8001814 <calcOutputMode+0xc4>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <calcOutputMode+0x1c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	080017e5 	.word	0x080017e5
 8001770:	080017fd 	.word	0x080017fd
 8001774:	08001785 	.word	0x08001785
 8001778:	0800179d 	.word	0x0800179d
 800177c:	080017b5 	.word	0x080017b5
 8001780:	080017cd 	.word	0x080017cd
		  case 3:
			outputMode[0] = OUTPUTMODE_OPEN;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3302      	adds	r3, #2
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	701a      	strb	r2, [r3, #0]
			break;
 800179a:	e047      	b.n	800182c <calcOutputMode+0xdc>
		  case 4:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3302      	adds	r3, #2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
			break;
 80017b2:	e03b      	b.n	800182c <calcOutputMode+0xdc>
		  case 5:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	3302      	adds	r3, #2
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
			break;
 80017ca:	e02f      	b.n	800182c <calcOutputMode+0xdc>
		  case 6:
			outputMode[0] = OUTPUTMODE_OPEN;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3302      	adds	r3, #2
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
			break;
 80017e2:	e023      	b.n	800182c <calcOutputMode+0xdc>
		  case 1:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	22ff      	movs	r2, #255	; 0xff
 80017f0:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	3302      	adds	r3, #2
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
			break;
 80017fa:	e017      	b.n	800182c <calcOutputMode+0xdc>
		  case 2:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3302      	adds	r3, #2
 800180e:	22ff      	movs	r2, #255	; 0xff
 8001810:	701a      	strb	r2, [r3, #0]
			break;
 8001812:	e00b      	b.n	800182c <calcOutputMode+0xdc>
		  default :
			outputMode[0] = OUTPUTMODE_OPEN;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3302      	adds	r3, #2
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		  break;
 800182a:	bf00      	nop
		}
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <calcDuty>:

static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty){
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	ed87 0a02 	vstr	s0, [r7, #8]
 8001844:	6079      	str	r1, [r7, #4]

	// if DutyRef < 0, swap OUTPUTMODE_POSITIVE and OUTPUTMODE_NEGATIVE
	int8_t outputModeMulSwapGain[3];
	int8_t swapGain;

	if (DutyRef > 0)
 8001846:	edd7 7a02 	vldr	s15, [r7, #8]
 800184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dd02      	ble.n	800185a <calcDuty+0x22>
		swapGain = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	75fb      	strb	r3, [r7, #23]
 8001858:	e001      	b.n	800185e <calcDuty+0x26>
	else
		swapGain = -1;
 800185a:	23ff      	movs	r3, #255	; 0xff
 800185c:	75fb      	strb	r3, [r7, #23]


	outputModeMulSwapGain[0]  = outputMode[0] * swapGain;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f993 3000 	ldrsb.w	r3, [r3]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	fb12 f303 	smulbb	r3, r2, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	b25b      	sxtb	r3, r3
 8001870:	753b      	strb	r3, [r7, #20]
	outputModeMulSwapGain[1]  = outputMode[1] * swapGain;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3301      	adds	r3, #1
 8001876:	f993 3000 	ldrsb.w	r3, [r3]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	fb12 f303 	smulbb	r3, r2, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	b25b      	sxtb	r3, r3
 8001886:	757b      	strb	r3, [r7, #21]
	outputModeMulSwapGain[2]  = outputMode[2] * swapGain;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3302      	adds	r3, #2
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	fb12 f303 	smulbb	r3, r2, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	b25b      	sxtb	r3, r3
 800189c:	75bb      	strb	r3, [r7, #22]

	if( outputModeMulSwapGain[0] < 0) outputModeMulSwapGain[0] = 0;
 800189e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da01      	bge.n	80018aa <calcDuty+0x72>
 80018a6:	2300      	movs	r3, #0
 80018a8:	753b      	strb	r3, [r7, #20]
	if( outputModeMulSwapGain[1] < 0) outputModeMulSwapGain[1] = 0;
 80018aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da01      	bge.n	80018b6 <calcDuty+0x7e>
 80018b2:	2300      	movs	r3, #0
 80018b4:	757b      	strb	r3, [r7, #21]
	if( outputModeMulSwapGain[2] < 0) outputModeMulSwapGain[2] = 0;
 80018b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da01      	bge.n	80018c2 <calcDuty+0x8a>
 80018be:	2300      	movs	r3, #0
 80018c0:	75bb      	strb	r3, [r7, #22]


	Duty[0] = (float)(outputModeMulSwapGain[0] * DutyRef * swapGain);
 80018c2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (float)(outputModeMulSwapGain[1] * DutyRef * swapGain);
 80018ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (float)(outputModeMulSwapGain[2] * DutyRef * swapGain);
 8001918:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001924:	edd7 7a02 	vldr	s15, [r7, #8]
 8001928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3308      	adds	r3, #8
 800193c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001940:	edc3 7a00 	vstr	s15, [r3]

}
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <VectorControlTasks>:
static float calcAmpFromVect(float* Vect);
static float calcModFromVamp(float Vamp, float twoDivVdc);
static void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static void CurrentFbControl(float *Igd_ref, float *Igd, float electAngVelo, float Vdc, float *Vgd, float* Vamp);

void VectorControlTasks(float *Idq_ref, float theta, float electAngVelo, float *Iuvw, float Vdc, float twoDivVdc, uint8_t flgFB, float* Duty, int8_t* outputMode){
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	61f8      	str	r0, [r7, #28]
 8001958:	ed87 0a06 	vstr	s0, [r7, #24]
 800195c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001960:	6139      	str	r1, [r7, #16]
 8001962:	ed87 1a03 	vstr	s2, [r7, #12]
 8001966:	edc7 1a02 	vstr	s3, [r7, #8]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	71fb      	strb	r3, [r7, #7]

	if ( flgFB == 0 ){
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d128      	bne.n	80019c8 <VectorControlTasks+0x78>
			OpenLoopTasks(gVolume * 12.24f, theta, Iuvw, twoDivVdc, Duty, outputMode);
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <VectorControlTasks+0x1e8>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001b3c <VectorControlTasks+0x1ec>
 8001980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	ed97 1a02 	vldr	s2, [r7, #8]
 800198c:	6938      	ldr	r0, [r7, #16]
 800198e:	edd7 0a06 	vldr	s1, [r7, #24]
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	f000 f8f5 	bl	8001b84 <OpenLoopTasks>
			sVdq[0] = 0.0f;
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <VectorControlTasks+0x1f0>)
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
			sVdq[1] = gVolume * 12.24f;
 80019a2:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <VectorControlTasks+0x1e8>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001b3c <VectorControlTasks+0x1ec>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <VectorControlTasks+0x1f0>)
 80019b2:	edc3 7a01 	vstr	s15, [r3, #4]
			sVdq_i[0] = 0.0f;
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <VectorControlTasks+0x1f4>)
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
			sVdq_i[1] = 0.0f;
 80019be:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <VectorControlTasks+0x1f4>)
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
		sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
		sIdq_1000[0] = sIdq[0] * 1000.0f;
		sIdq_1000[1] = sIdq[1] * 1000.0f;
	}

}
 80019c6:	e0b3      	b.n	8001b30 <VectorControlTasks+0x1e0>
		outputMode[0] = OUTPUTMODE_POSITIVE;
 80019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
		outputMode[1] = OUTPUTMODE_POSITIVE;
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	3301      	adds	r3, #1
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
		outputMode[2] = OUTPUTMODE_POSITIVE;
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	3302      	adds	r3, #2
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
		uvw2ab(gIuvw, sIab);
 80019de:	495a      	ldr	r1, [pc, #360]	; (8001b48 <VectorControlTasks+0x1f8>)
 80019e0:	485a      	ldr	r0, [pc, #360]	; (8001b4c <VectorControlTasks+0x1fc>)
 80019e2:	f000 f92f 	bl	8001c44 <uvw2ab>
		ab2dq(theta, sIab, sIdq);
 80019e6:	495a      	ldr	r1, [pc, #360]	; (8001b50 <VectorControlTasks+0x200>)
 80019e8:	4857      	ldr	r0, [pc, #348]	; (8001b48 <VectorControlTasks+0x1f8>)
 80019ea:	ed97 0a06 	vldr	s0, [r7, #24]
 80019ee:	f000 f9b3 	bl	8001d58 <ab2dq>
		CurrentFbControl(Idq_ref, sIdq, electAngVelo, Vdc, sVdq, &sVamp);
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <VectorControlTasks+0x204>)
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <VectorControlTasks+0x1f0>)
 80019f6:	edd7 0a03 	vldr	s1, [r7, #12]
 80019fa:	ed97 0a05 	vldr	s0, [r7, #20]
 80019fe:	4954      	ldr	r1, [pc, #336]	; (8001b50 <VectorControlTasks+0x200>)
 8001a00:	69f8      	ldr	r0, [r7, #28]
 8001a02:	f000 fb07 	bl	8002014 <CurrentFbControl>
		sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 8001a06:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <VectorControlTasks+0x204>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <VectorControlTasks+0x208>)
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	eef0 0a47 	vmov.f32	s1, s14
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	f000 fa07 	bl	8001e2c <calcModFromVamp>
 8001a1e:	eef0 7a40 	vmov.f32	s15, s0
 8001a22:	4b4e      	ldr	r3, [pc, #312]	; (8001b5c <VectorControlTasks+0x20c>)
 8001a24:	edc3 7a00 	vstr	s15, [r3]
		sEdq[0] = sVdq[0] - Ra * sIdq[0] + La * electAngVelo * sIdq[1];
 8001a28:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <VectorControlTasks+0x1f0>)
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <VectorControlTasks+0x200>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001b60 <VectorControlTasks+0x210>
 8001a38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a44:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001b64 <VectorControlTasks+0x214>
 8001a48:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <VectorControlTasks+0x200>)
 8001a4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <VectorControlTasks+0x218>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
		sEdq[1] = sVdq[1] - Ra * sIdq[1] - La * electAngVelo * sIdq[0];
 8001a60:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <VectorControlTasks+0x1f0>)
 8001a62:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <VectorControlTasks+0x200>)
 8001a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a6c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001b60 <VectorControlTasks+0x210>
 8001a70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a7c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001b64 <VectorControlTasks+0x214>
 8001a80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <VectorControlTasks+0x200>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <VectorControlTasks+0x218>)
 8001a94:	edc3 7a01 	vstr	s15, [r3, #4]
		sAngleErr = atan2f(-1.0f * sEdq[0], sEdq[1]);
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <VectorControlTasks+0x218>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	eef1 7a67 	vneg.f32	s15, s15
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <VectorControlTasks+0x218>)
 8001aa4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aa8:	eef0 0a47 	vmov.f32	s1, s14
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	f008 fe58 	bl	800a764 <atan2f>
 8001ab4:	eef0 7a40 	vmov.f32	s15, s0
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <VectorControlTasks+0x21c>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]
		dq2ab(theta, sVdq, sVab);
 8001abe:	492c      	ldr	r1, [pc, #176]	; (8001b70 <VectorControlTasks+0x220>)
 8001ac0:	481f      	ldr	r0, [pc, #124]	; (8001b40 <VectorControlTasks+0x1f0>)
 8001ac2:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ac6:	f000 f9d1 	bl	8001e6c <dq2ab>
		ab2uvw(sVab, sVuvw);
 8001aca:	492a      	ldr	r1, [pc, #168]	; (8001b74 <VectorControlTasks+0x224>)
 8001acc:	4828      	ldr	r0, [pc, #160]	; (8001b70 <VectorControlTasks+0x220>)
 8001ace:	f000 f901 	bl	8001cd4 <ab2uvw>
		Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	4827      	ldr	r0, [pc, #156]	; (8001b74 <VectorControlTasks+0x224>)
 8001ad6:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ada:	f000 fa07 	bl	8001eec <Vuvw2Duty>
		sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001b78 <VectorControlTasks+0x228>
 8001ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <VectorControlTasks+0x22c>)
 8001aee:	edc3 7a00 	vstr	s15, [r3]
		sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001b78 <VectorControlTasks+0x228>
 8001afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <VectorControlTasks+0x22c>)
 8001b04:	edc3 7a01 	vstr	s15, [r3, #4]
		sIdq_1000[0] = sIdq[0] * 1000.0f;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <VectorControlTasks+0x200>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001b78 <VectorControlTasks+0x228>
 8001b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <VectorControlTasks+0x230>)
 8001b18:	edc3 7a00 	vstr	s15, [r3]
		sIdq_1000[1] = sIdq[1] * 1000.0f;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <VectorControlTasks+0x200>)
 8001b1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b22:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001b78 <VectorControlTasks+0x228>
 8001b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <VectorControlTasks+0x230>)
 8001b2c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200000b0 	.word	0x200000b0
 8001b3c:	4143d70a 	.word	0x4143d70a
 8001b40:	20000120 	.word	0x20000120
 8001b44:	20000128 	.word	0x20000128
 8001b48:	20000100 	.word	0x20000100
 8001b4c:	200000b4 	.word	0x200000b4
 8001b50:	20000108 	.word	0x20000108
 8001b54:	20000144 	.word	0x20000144
 8001b58:	200000ac 	.word	0x200000ac
 8001b5c:	20000148 	.word	0x20000148
 8001b60:	3cdd2f1b 	.word	0x3cdd2f1b
 8001b64:	3812ccf7 	.word	0x3812ccf7
 8001b68:	2000014c 	.word	0x2000014c
 8001b6c:	20000154 	.word	0x20000154
 8001b70:	20000130 	.word	0x20000130
 8001b74:	20000138 	.word	0x20000138
 8001b78:	447a0000 	.word	0x447a0000
 8001b7c:	20000110 	.word	0x20000110
 8001b80:	20000118 	.word	0x20000118

08001b84 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float twoDivVdc, float* Duty, int8_t* outputMode){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001b8e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	ed87 1a02 	vstr	s2, [r7, #8]
 8001b98:	6079      	str	r1, [r7, #4]
 8001b9a:	603a      	str	r2, [r7, #0]
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3302      	adds	r3, #2
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]

	uvw2ab(gIuvw, sIab);
 8001bb2:	491c      	ldr	r1, [pc, #112]	; (8001c24 <OpenLoopTasks+0xa0>)
 8001bb4:	481c      	ldr	r0, [pc, #112]	; (8001c28 <OpenLoopTasks+0xa4>)
 8001bb6:	f000 f845 	bl	8001c44 <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 8001bba:	491c      	ldr	r1, [pc, #112]	; (8001c2c <OpenLoopTasks+0xa8>)
 8001bbc:	4819      	ldr	r0, [pc, #100]	; (8001c24 <OpenLoopTasks+0xa0>)
 8001bbe:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bc2:	f000 f8c9 	bl	8001d58 <ab2dq>
	sVdq[0] = 0.0f;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <OpenLoopTasks+0xac>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
	sVdq[1] = VamRef;
 8001bce:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <OpenLoopTasks+0xac>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	6053      	str	r3, [r2, #4]
	dq2ab(theta, sVdq, sVab);
 8001bd4:	4917      	ldr	r1, [pc, #92]	; (8001c34 <OpenLoopTasks+0xb0>)
 8001bd6:	4816      	ldr	r0, [pc, #88]	; (8001c30 <OpenLoopTasks+0xac>)
 8001bd8:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bdc:	f000 f946 	bl	8001e6c <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001be0:	4915      	ldr	r1, [pc, #84]	; (8001c38 <OpenLoopTasks+0xb4>)
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <OpenLoopTasks+0xb0>)
 8001be4:	f000 f876 	bl	8001cd4 <ab2uvw>
	Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4813      	ldr	r0, [pc, #76]	; (8001c38 <OpenLoopTasks+0xb4>)
 8001bec:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bf0:	f000 f97c 	bl	8001eec <Vuvw2Duty>

	sIdq_1000[0] = sIdq[0] * 1000.0f;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <OpenLoopTasks+0xa8>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c3c <OpenLoopTasks+0xb8>
 8001bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <OpenLoopTasks+0xbc>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <OpenLoopTasks+0xa8>)
 8001c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c0e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c3c <OpenLoopTasks+0xb8>
 8001c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <OpenLoopTasks+0xbc>)
 8001c18:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000100 	.word	0x20000100
 8001c28:	200000b4 	.word	0x200000b4
 8001c2c:	20000108 	.word	0x20000108
 8001c30:	20000120 	.word	0x20000120
 8001c34:	20000130 	.word	0x20000130
 8001c38:	20000138 	.word	0x20000138
 8001c3c:	447a0000 	.word	0x447a0000
 8001c40:	20000118 	.word	0x20000118

08001c44 <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	ed93 7a00 	vldr	s14, [r3]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001c60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001ccc <uvw2ab+0x88>
 8001c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001cd0 <uvw2ab+0x8c>
 8001c96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001cd0 <uvw2ab+0x8c>
 8001ca6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ccc <uvw2ab+0x88>
 8001cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cba:	edc3 7a00 	vstr	s15, [r3]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	3f5105ec 	.word	0x3f5105ec
 8001cd0:	3f5db3d7 	.word	0x3f5db3d7

08001cd4 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001d50 <ab2uvw+0x7c>
 8001ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001d54 <ab2uvw+0x80>
 8001d0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3304      	adds	r3, #4
 8001d18:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001d50 <ab2uvw+0x7c>
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eeb1 7a67 	vneg.f32	s14, s15
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3304      	adds	r3, #4
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3308      	adds	r3, #8
 8001d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	3f5105ec 	.word	0x3f5105ec
 8001d54:	3f5db3d7 	.word	0x3f5db3d7

08001d58 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d62:	60b8      	str	r0, [r7, #8]
 8001d64:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001d66:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d6a:	f008 fcb5 	bl	800a6d8 <sinf>
 8001d6e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001d72:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d76:	f008 fc6b 	bl	800a650 <cosf>
 8001d7a:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	edd3 6a00 	vldr	s13, [r3]
 8001d94:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	eeb1 7a67 	vneg.f32	s14, s15
 8001db0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	edd3 6a00 	vldr	s13, [r3]
 8001dc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	float amp;
	float amp2;

	amp2 = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	edd3 6a00 	vldr	s13, [r3]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(amp2);
 8001e10:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e14:	f008 fcc8 	bl	800a7a8 <sqrtf>
 8001e18:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	ee07 3a90 	vmov	s15, r3
}
 8001e22:	eeb0 0a67 	vmov.f32	s0, s15
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e36:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001e3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e3e:	edd7 7a00 	vldr	s15, [r7]
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001e68 <calcModFromVamp+0x3c>
 8001e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	ee07 3a90 	vmov	s15, r3
}
 8001e58:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	3f5105ec 	.word	0x3f5105ec

08001e6c <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e76:	60b8      	str	r0, [r7, #8]
 8001e78:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001e7a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e7e:	f008 fc2b 	bl	800a6d8 <sinf>
 8001e82:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001e86:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e8a:	f008 fbe1 	bl	800a650 <cosf>
 8001e8e:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	edd3 6a00 	vldr	s13, [r3]
 8001ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	ed93 7a00 	vldr	s14, [r3]
 8001ec0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	edd3 6a00 	vldr	s13, [r3]
 8001ed0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	edc3 7a00 	vstr	s15, [r3]
}
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ef6:	60b8      	str	r0, [r7, #8]
 8001ef8:	6079      	str	r1, [r7, #4]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	ed93 7a00 	vldr	s14, [r3]
 8001f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3304      	adds	r3, #4
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = -Duty[0] - Duty[1];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	eeb1 7a67 	vneg.f32	s14, s15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f40:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001f4e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f7fe fecb 	bl	8000cf0 <gUpperLowerLimit>
 8001f5a:	eef0 7a40 	vmov.f32	s15, s0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1d1c      	adds	r4, r3, #4
 8001f70:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001f74:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	f7fe feb8 	bl	8000cf0 <gUpperLowerLimit>
 8001f80:	eef0 7a40 	vmov.f32	s15, s0
 8001f84:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0408 	add.w	r4, r3, #8
 8001f96:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001f9a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa2:	f7fe fea5 	bl	8000cf0 <gUpperLowerLimit>
 8001fa6:	eef0 7a40 	vmov.f32	s15, s0
 8001faa:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3308      	adds	r3, #8
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002006:	edc3 7a00 	vstr	s15, [r3]

}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
	...

08002014 <CurrentFbControl>:



static void CurrentFbControl(float* Igd_ref, float* Igd, float electAngVelo, float Vdc, float* Vgd, float* Vamp){
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af00      	add	r7, sp, #0
 800201a:	6178      	str	r0, [r7, #20]
 800201c:	6139      	str	r1, [r7, #16]
 800201e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002022:	edc7 0a02 	vstr	s1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
	float Kid;
	float VampLimit;
	float Vphase;
	float wc;

	wc = 10.0f * TWOPI;
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <CurrentFbControl+0x1ac>)
 800202c:	637b      	str	r3, [r7, #52]	; 0x34

	Kp = La * wc;
 800202e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002032:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80021c4 <CurrentFbControl+0x1b0>
 8002036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800203a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Kig = Ra * wc * CARRIERCYCLE;
 800203e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002042:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80021c8 <CurrentFbControl+0x1b4>
 8002046:	ee27 7a87 	vmul.f32	s14, s15, s14
 800204a:	eddf 6a60 	vldr	s13, [pc, #384]	; 80021cc <CurrentFbControl+0x1b8>
 800204e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002052:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Kid = Kig;
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28

	Ierr[0] = Igd_ref[0] - Igd[0];
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	ed93 7a00 	vldr	s14, [r3]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206a:	edc7 7a06 	vstr	s15, [r7, #24]
	Ierr[1] = Igd_ref[1] - Igd[1];
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3304      	adds	r3, #4
 8002072:	ed93 7a00 	vldr	s14, [r3]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	3304      	adds	r3, #4
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002082:	edc7 7a07 	vstr	s15, [r7, #28]

	sVdq_i[0] += Kig * Ierr[0];
 8002086:	4b52      	ldr	r3, [pc, #328]	; (80021d0 <CurrentFbControl+0x1bc>)
 8002088:	ed93 7a00 	vldr	s14, [r3]
 800208c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002090:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <CurrentFbControl+0x1bc>)
 800209e:	edc3 7a00 	vstr	s15, [r3]
	sVdq_i[1] += Kid * Ierr[1];
 80020a2:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <CurrentFbControl+0x1bc>)
 80020a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80020a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80020ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b8:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <CurrentFbControl+0x1bc>)
 80020ba:	edc3 7a01 	vstr	s15, [r3, #4]

	Vgd[0] = Kp * Ierr[0] + sVdq_i[0];
 80020be:	ed97 7a06 	vldr	s14, [r7, #24]
 80020c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <CurrentFbControl+0x1bc>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	edc3 7a00 	vstr	s15, [r3]
	Vgd[1] = Ke * electAngVelo + Kp * Ierr[1] + sVdq_i[1];// + Vgd[1] + Kid * Ierr[1] + ;
 80020da:	edd7 7a03 	vldr	s15, [r7, #12]
 80020de:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80021d4 <CurrentFbControl+0x1c0>
 80020e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80020ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <CurrentFbControl+0x1bc>)
 80020f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002104:	edc3 7a00 	vstr	s15, [r3]

	Vphase = atan2f(Vgd[1], Vgd[0]);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	eef0 0a47 	vmov.f32	s1, s14
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	f008 fb21 	bl	800a764 <atan2f>
 8002122:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	*Vamp = calcAmpFromVect(Vgd);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fe58 	bl	8001ddc <calcAmpFromVect>
 800212c:	eef0 7a40 	vmov.f32	s15, s0
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = Vdc * SQRT3DIV2_DIV2;
 8002136:	edd7 7a02 	vldr	s15, [r7, #8]
 800213a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80021d8 <CurrentFbControl+0x1c4>
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	edc7 7a08 	vstr	s15, [r7, #32]
	if( *Vamp > VampLimit ){
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	d400      	bmi.n	800215c <CurrentFbControl+0x148>
		sVdq_i[0] = Vgd[0];
		Vgd[1] = VampLimit * sinf(Vphase);
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;

	}
}
 800215a:	e02d      	b.n	80021b8 <CurrentFbControl+0x1a4>
		Vgd[0] = VampLimit * cosf(Vphase);
 800215c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002160:	f008 fa76 	bl	800a650 <cosf>
 8002164:	eeb0 7a40 	vmov.f32	s14, s0
 8002168:	edd7 7a08 	vldr	s15, [r7, #32]
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[0] = Vgd[0];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <CurrentFbControl+0x1bc>)
 800217c:	6013      	str	r3, [r2, #0]
		Vgd[1] = VampLimit * sinf(Vphase);
 800217e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002182:	f008 faa9 	bl	800a6d8 <sinf>
 8002186:	eeb0 7a40 	vmov.f32	s14, s0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	ed93 7a00 	vldr	s14, [r3]
 80021a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80021d4 <CurrentFbControl+0x1c0>
 80021aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <CurrentFbControl+0x1bc>)
 80021b4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80021b8:	bf00      	nop
 80021ba:	3738      	adds	r7, #56	; 0x38
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	427b53d2 	.word	0x427b53d2
 80021c4:	3812ccf7 	.word	0x3812ccf7
 80021c8:	3cdd2f1b 	.word	0x3cdd2f1b
 80021cc:	4684d000 	.word	0x4684d000
 80021d0:	20000128 	.word	0x20000128
 80021d4:	3c195aaf 	.word	0x3c195aaf
 80021d8:	3f1cc471 	.word	0x3f1cc471

080021dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e2:	f001 f882 	bl	80032ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e6:	f000 f885 	bl	80022f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ea:	f000 fbbd 	bl	8002968 <MX_GPIO_Init>
  MX_DMA_Init();
 80021ee:	f000 fb89 	bl	8002904 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80021f2:	f000 f9e1 	bl	80025b8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80021f6:	f000 f8c9 	bl	800238c <MX_ADC1_Init>
  MX_TIM1_Init();
 80021fa:	f000 fa27 	bl	800264c <MX_TIM1_Init>
  MX_TIM2_Init();
 80021fe:	f000 fae1 	bl	80027c4 <MX_TIM2_Init>
  MX_DAC1_Init();
 8002202:	f000 f99f 	bl	8002544 <MX_DAC1_Init>
  MX_TIM7_Init();
 8002206:	f000 fb47 	bl	8002898 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800220a:	4832      	ldr	r0, [pc, #200]	; (80022d4 <main+0xf8>)
 800220c:	f005 ff36 	bl	800807c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002210:	4831      	ldr	r0, [pc, #196]	; (80022d8 <main+0xfc>)
 8002212:	f002 ff13 	bl	800503c <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221c:	482f      	ldr	r0, [pc, #188]	; (80022dc <main+0x100>)
 800221e:	f004 fdd9 	bl	8006dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	482c      	ldr	r0, [pc, #176]	; (80022dc <main+0x100>)
 800222a:	f004 fdd3 	bl	8006dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002234:	4829      	ldr	r0, [pc, #164]	; (80022dc <main+0x100>)
 8002236:	f004 fdcd 	bl	8006dd4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800223a:	2100      	movs	r1, #0
 800223c:	4825      	ldr	r0, [pc, #148]	; (80022d4 <main+0xf8>)
 800223e:	f005 ffed 	bl	800821c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002242:	2100      	movs	r1, #0
 8002244:	4823      	ldr	r0, [pc, #140]	; (80022d4 <main+0xf8>)
 8002246:	f007 f99d 	bl	8009584 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800224a:	2104      	movs	r1, #4
 800224c:	4821      	ldr	r0, [pc, #132]	; (80022d4 <main+0xf8>)
 800224e:	f005 ffe5 	bl	800821c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002252:	2104      	movs	r1, #4
 8002254:	481f      	ldr	r0, [pc, #124]	; (80022d4 <main+0xf8>)
 8002256:	f007 f995 	bl	8009584 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800225a:	2108      	movs	r1, #8
 800225c:	481d      	ldr	r0, [pc, #116]	; (80022d4 <main+0xf8>)
 800225e:	f005 ffdd 	bl	800821c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002262:	2108      	movs	r1, #8
 8002264:	481b      	ldr	r0, [pc, #108]	; (80022d4 <main+0xf8>)
 8002266:	f007 f98d 	bl	8009584 <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <main+0x104>)
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <main+0x104>)
 8002270:	3b28      	subs	r3, #40	; 0x28
 8002272:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8002274:	481b      	ldr	r0, [pc, #108]	; (80022e4 <main+0x108>)
 8002276:	f005 ff01 	bl	800807c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800227a:	2100      	movs	r1, #0
 800227c:	4819      	ldr	r0, [pc, #100]	; (80022e4 <main+0x108>)
 800227e:	f006 f937 	bl	80084f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002282:	2104      	movs	r1, #4
 8002284:	4817      	ldr	r0, [pc, #92]	; (80022e4 <main+0x108>)
 8002286:	f006 f933 	bl	80084f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800228a:	2108      	movs	r1, #8
 800228c:	4815      	ldr	r0, [pc, #84]	; (80022e4 <main+0x108>)
 800228e:	f006 f92f 	bl	80084f0 <HAL_TIM_IC_Start_IT>

  // Start TIM7 for DAC
  HAL_TIM_Base_Start(&htim7);
 8002292:	4815      	ldr	r0, [pc, #84]	; (80022e8 <main+0x10c>)
 8002294:	f005 fe82 	bl	8007f9c <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8002298:	2101      	movs	r1, #1
 800229a:	4813      	ldr	r0, [pc, #76]	; (80022e8 <main+0x10c>)
 800229c:	f006 fc28 	bl	8008af0 <HAL_TIM_GenerateEvent>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 80022a0:	2202      	movs	r2, #2
 80022a2:	4912      	ldr	r1, [pc, #72]	; (80022ec <main+0x110>)
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <main+0xfc>)
 80022a6:	f001 fcb9 	bl	8003c1c <HAL_ADC_Start_DMA>
  uint16_t data = 2048;
 80022aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022ae:	80fb      	strh	r3, [r7, #6]
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80022b0:	2100      	movs	r1, #0
 80022b2:	480f      	ldr	r0, [pc, #60]	; (80022f0 <main+0x114>)
 80022b4:	f003 ff5f 	bl	8006176 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	480c      	ldr	r0, [pc, #48]	; (80022f0 <main+0x114>)
 80022c0:	f003 ffac 	bl	800621c <HAL_DAC_SetValue>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	4809      	ldr	r0, [pc, #36]	; (80022f0 <main+0x114>)
 80022cc:	f003 ffa6 	bl	800621c <HAL_DAC_SetValue>
 80022d0:	e7f8      	b.n	80022c4 <main+0xe8>
 80022d2:	bf00      	nop
 80022d4:	20000328 	.word	0x20000328
 80022d8:	20000158 	.word	0x20000158
 80022dc:	48000800 	.word	0x48000800
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	20000374 	.word	0x20000374
 80022e8:	200003c0 	.word	0x200003c0
 80022ec:	2000008c 	.word	0x2000008c
 80022f0:	20000224 	.word	0x20000224

080022f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b094      	sub	sp, #80	; 0x50
 80022f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	2238      	movs	r2, #56	; 0x38
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f008 f99c 	bl	800a640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002316:	2000      	movs	r0, #0
 8002318:	f004 fdb2 	bl	8006e80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800231c:	2302      	movs	r3, #2
 800231e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232a:	2302      	movs	r3, #2
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800232e:	2302      	movs	r3, #2
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002332:	2304      	movs	r3, #4
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002336:	2355      	movs	r3, #85	; 0x55
 8002338:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800233a:	2302      	movs	r3, #2
 800233c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800233e:	2302      	movs	r3, #2
 8002340:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002342:	2302      	movs	r3, #2
 8002344:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002346:	f107 0318 	add.w	r3, r7, #24
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fe4c 	bl	8006fe8 <HAL_RCC_OscConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002356:	f000 fb8b 	bl	8002a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235a:	230f      	movs	r3, #15
 800235c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800235e:	2303      	movs	r3, #3
 8002360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2104      	movs	r1, #4
 8002372:	4618      	mov	r0, r3
 8002374:	f005 f950 	bl	8007618 <HAL_RCC_ClockConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800237e:	f000 fb77 	bl	8002a70 <Error_Handler>
  }
}
 8002382:	bf00      	nop
 8002384:	3750      	adds	r7, #80	; 0x50
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b09a      	sub	sp, #104	; 0x68
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002392:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800239e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023a2:	2220      	movs	r2, #32
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f008 f94a 	bl	800a640 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80023ac:	463b      	mov	r3, r7
 80023ae:	223c      	movs	r2, #60	; 0x3c
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f008 f944 	bl	800a640 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023b8:	4b5c      	ldr	r3, [pc, #368]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023c0:	4b5a      	ldr	r3, [pc, #360]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023c8:	4b58      	ldr	r3, [pc, #352]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80023d4:	4b55      	ldr	r3, [pc, #340]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023da:	4b54      	ldr	r3, [pc, #336]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023dc:	2201      	movs	r2, #1
 80023de:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023e0:	4b52      	ldr	r3, [pc, #328]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023e2:	2204      	movs	r2, #4
 80023e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <MX_ADC1_Init+0x1a0>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002400:	4b4a      	ldr	r3, [pc, #296]	; (800252c <MX_ADC1_Init+0x1a0>)
 8002402:	2200      	movs	r2, #0
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <MX_ADC1_Init+0x1a0>)
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <MX_ADC1_Init+0x1a0>)
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002414:	4b45      	ldr	r3, [pc, #276]	; (800252c <MX_ADC1_Init+0x1a0>)
 8002416:	2200      	movs	r2, #0
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <MX_ADC1_Init+0x1a0>)
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002422:	4842      	ldr	r0, [pc, #264]	; (800252c <MX_ADC1_Init+0x1a0>)
 8002424:	f001 fa38 	bl	8003898 <HAL_ADC_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800242e:	f000 fb1f 	bl	8002a70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002432:	2300      	movs	r3, #0
 8002434:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002436:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800243a:	4619      	mov	r1, r3
 800243c:	483b      	ldr	r0, [pc, #236]	; (800252c <MX_ADC1_Init+0x1a0>)
 800243e:	f003 fc61 	bl	8005d04 <HAL_ADCEx_MultiModeConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8002448:	f000 fb12 	bl	8002a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <MX_ADC1_Init+0x1a4>)
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002450:	2306      	movs	r3, #6
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002454:	2300      	movs	r3, #0
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002458:	237f      	movs	r3, #127	; 0x7f
 800245a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800245c:	2304      	movs	r3, #4
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002468:	4619      	mov	r1, r3
 800246a:	4830      	ldr	r0, [pc, #192]	; (800252c <MX_ADC1_Init+0x1a0>)
 800246c:	f001 ff32 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8002476:	f000 fafb 	bl	8002a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <MX_ADC1_Init+0x1a8>)
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800247e:	230c      	movs	r3, #12
 8002480:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002482:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002486:	4619      	mov	r1, r3
 8002488:	4828      	ldr	r0, [pc, #160]	; (800252c <MX_ADC1_Init+0x1a0>)
 800248a:	f001 ff23 	bl	80042d4 <HAL_ADC_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002494:	f000 faec 	bl	8002a70 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <MX_ADC1_Init+0x1ac>)
 800249a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800249c:	2309      	movs	r3, #9
 800249e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80024a4:	237f      	movs	r3, #127	; 0x7f
 80024a6:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80024a8:	2304      	movs	r3, #4
 80024aa:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80024b0:	2303      	movs	r3, #3
 80024b2:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80024d4:	463b      	mov	r3, r7
 80024d6:	4619      	mov	r1, r3
 80024d8:	4814      	ldr	r0, [pc, #80]	; (800252c <MX_ADC1_Init+0x1a0>)
 80024da:	f002 fee7 	bl	80052ac <HAL_ADCEx_InjectedConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 80024e4:	f000 fac4 	bl	8002a70 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_ADC1_Init+0x1b0>)
 80024ea:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80024ec:	f240 130f 	movw	r3, #271	; 0x10f
 80024f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <MX_ADC1_Init+0x1a0>)
 80024f8:	f002 fed8 	bl	80052ac <HAL_ADCEx_InjectedConfigChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8002502:	f000 fab5 	bl	8002a70 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_ADC1_Init+0x1b4>)
 8002508:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800250a:	f240 2315 	movw	r3, #533	; 0x215
 800250e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002510:	463b      	mov	r3, r7
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_ADC1_Init+0x1a0>)
 8002516:	f002 fec9 	bl	80052ac <HAL_ADCEx_InjectedConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8002520:	f000 faa6 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3768      	adds	r7, #104	; 0x68
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000158 	.word	0x20000158
 8002530:	08600004 	.word	0x08600004
 8002534:	21800100 	.word	0x21800100
 8002538:	04300002 	.word	0x04300002
 800253c:	1d500080 	.word	0x1d500080
 8002540:	19200040 	.word	0x19200040

08002544 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800254a:	463b      	mov	r3, r7
 800254c:	2230      	movs	r2, #48	; 0x30
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f008 f875 	bl	800a640 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <MX_DAC1_Init+0x6c>)
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <MX_DAC1_Init+0x70>)
 800255a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800255c:	4814      	ldr	r0, [pc, #80]	; (80025b0 <MX_DAC1_Init+0x6c>)
 800255e:	f003 fde8 	bl	8006132 <HAL_DAC_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002568:	f000 fa82 	bl	8002a70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800256c:	2302      	movs	r3, #2
 800256e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800257c:	2302      	movs	r3, #2
 800257e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002588:	2301      	movs	r3, #1
 800258a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <MX_DAC1_Init+0x6c>)
 8002598:	f003 fe68 	bl	800626c <HAL_DAC_ConfigChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80025a2:	f000 fa65 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	3730      	adds	r7, #48	; 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000224 	.word	0x20000224
 80025b4:	50000800 	.word	0x50000800

080025b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <MX_LPUART1_UART_Init+0x90>)
 80025c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80025d0:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025de:	220c      	movs	r2, #12
 80025e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80025fa:	4812      	ldr	r0, [pc, #72]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 80025fc:	f007 f9f1 	bl	80099e2 <HAL_UART_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002606:	f000 fa33 	bl	8002a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800260a:	2100      	movs	r1, #0
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 800260e:	f007 ff23 	bl	800a458 <HAL_UARTEx_SetTxFifoThreshold>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002618:	f000 fa2a 	bl	8002a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800261c:	2100      	movs	r1, #0
 800261e:	4809      	ldr	r0, [pc, #36]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 8002620:	f007 ff58 	bl	800a4d4 <HAL_UARTEx_SetRxFifoThreshold>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800262a:	f000 fa21 	bl	8002a70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_LPUART1_UART_Init+0x8c>)
 8002630:	f007 fed9 	bl	800a3e6 <HAL_UARTEx_DisableFifoMode>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800263a:	f000 fa19 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000298 	.word	0x20000298
 8002648:	40008000 	.word	0x40008000

0800264c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b098      	sub	sp, #96	; 0x60
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002652:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800265e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	615a      	str	r2, [r3, #20]
 8002670:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2234      	movs	r2, #52	; 0x34
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f007 ffe1 	bl	800a640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800267e:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <MX_TIM1_Init+0x170>)
 8002680:	4a4f      	ldr	r2, [pc, #316]	; (80027c0 <MX_TIM1_Init+0x174>)
 8002682:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002684:	4b4d      	ldr	r3, [pc, #308]	; (80027bc <MX_TIM1_Init+0x170>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800268a:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <MX_TIM1_Init+0x170>)
 800268c:	2220      	movs	r2, #32
 800268e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8002690:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <MX_TIM1_Init+0x170>)
 8002692:	f241 3287 	movw	r2, #4999	; 0x1387
 8002696:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b48      	ldr	r3, [pc, #288]	; (80027bc <MX_TIM1_Init+0x170>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <MX_TIM1_Init+0x170>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a4:	4b45      	ldr	r3, [pc, #276]	; (80027bc <MX_TIM1_Init+0x170>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026aa:	4844      	ldr	r0, [pc, #272]	; (80027bc <MX_TIM1_Init+0x170>)
 80026ac:	f005 fd5e 	bl	800816c <HAL_TIM_PWM_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80026b6:	f000 f9db 	bl	8002a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80026ba:	2370      	movs	r3, #112	; 0x70
 80026bc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ca:	4619      	mov	r1, r3
 80026cc:	483b      	ldr	r0, [pc, #236]	; (80027bc <MX_TIM1_Init+0x170>)
 80026ce:	f007 f81b 	bl	8009708 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026d8:	f000 f9ca 	bl	8002a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026dc:	2360      	movs	r3, #96	; 0x60
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e4:	2300      	movs	r3, #0
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80026e8:	2308      	movs	r3, #8
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026fc:	2200      	movs	r2, #0
 80026fe:	4619      	mov	r1, r3
 8002700:	482e      	ldr	r0, [pc, #184]	; (80027bc <MX_TIM1_Init+0x170>)
 8002702:	f006 f8e1 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800270c:	f000 f9b0 	bl	8002a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002710:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002714:	2204      	movs	r2, #4
 8002716:	4619      	mov	r1, r3
 8002718:	4828      	ldr	r0, [pc, #160]	; (80027bc <MX_TIM1_Init+0x170>)
 800271a:	f006 f8d5 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002724:	f000 f9a4 	bl	8002a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800272c:	2208      	movs	r2, #8
 800272e:	4619      	mov	r1, r3
 8002730:	4822      	ldr	r0, [pc, #136]	; (80027bc <MX_TIM1_Init+0x170>)
 8002732:	f006 f8c9 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800273c:	f000 f998 	bl	8002a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002740:	2370      	movs	r3, #112	; 0x70
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002744:	2300      	movs	r3, #0
 8002746:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002748:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800274c:	220c      	movs	r2, #12
 800274e:	4619      	mov	r1, r3
 8002750:	481a      	ldr	r0, [pc, #104]	; (80027bc <MX_TIM1_Init+0x170>)
 8002752:	f006 f8b9 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800275c:	f000 f988 	bl	8002a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800276c:	2364      	movs	r3, #100	; 0x64
 800276e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002778:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4807      	ldr	r0, [pc, #28]	; (80027bc <MX_TIM1_Init+0x170>)
 800279e:	f007 f849 	bl	8009834 <HAL_TIMEx_ConfigBreakDeadTime>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80027a8:	f000 f962 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <MX_TIM1_Init+0x170>)
 80027ae:	f000 fb93 	bl	8002ed8 <HAL_TIM_MspPostInit>

}
 80027b2:	bf00      	nop
 80027b4:	3760      	adds	r7, #96	; 0x60
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000328 	.word	0x20000328
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <MX_TIM2_Init+0xd0>)
 80027e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <MX_TIM2_Init+0xd0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <MX_TIM2_Init+0xd0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <MX_TIM2_Init+0xd0>)
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fe:	4b25      	ldr	r3, [pc, #148]	; (8002894 <MX_TIM2_Init+0xd0>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <MX_TIM2_Init+0xd0>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800280a:	4822      	ldr	r0, [pc, #136]	; (8002894 <MX_TIM2_Init+0xd0>)
 800280c:	f005 fe18 	bl	8008440 <HAL_TIM_IC_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002816:	f000 f92b 	bl	8002a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	481a      	ldr	r0, [pc, #104]	; (8002894 <MX_TIM2_Init+0xd0>)
 800282a:	f006 ff6d 	bl	8009708 <HAL_TIMEx_MasterConfigSynchronization>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002834:	f000 f91c 	bl	8002a70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800283c:	2301      	movs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	4619      	mov	r1, r3
 800284e:	4811      	ldr	r0, [pc, #68]	; (8002894 <MX_TIM2_Init+0xd0>)
 8002850:	f005 ff9e 	bl	8008790 <HAL_TIM_IC_ConfigChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800285a:	f000 f909 	bl	8002a70 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2204      	movs	r2, #4
 8002862:	4619      	mov	r1, r3
 8002864:	480b      	ldr	r0, [pc, #44]	; (8002894 <MX_TIM2_Init+0xd0>)
 8002866:	f005 ff93 	bl	8008790 <HAL_TIM_IC_ConfigChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002870:	f000 f8fe 	bl	8002a70 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	2208      	movs	r2, #8
 8002878:	4619      	mov	r1, r3
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <MX_TIM2_Init+0xd0>)
 800287c:	f005 ff88 	bl	8008790 <HAL_TIM_IC_ConfigChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002886:	f000 f8f3 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000374 	.word	0x20000374

08002898 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <MX_TIM7_Init+0x64>)
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <MX_TIM7_Init+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_TIM7_Init+0x64>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_TIM7_Init+0x64>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_TIM7_Init+0x64>)
 80028bc:	f241 3287 	movw	r2, #4999	; 0x1387
 80028c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_TIM7_Init+0x64>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <MX_TIM7_Init+0x64>)
 80028ca:	f005 fb0f 	bl	8007eec <HAL_TIM_Base_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80028d4:	f000 f8cc 	bl	8002a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028d8:	2320      	movs	r3, #32
 80028da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_TIM7_Init+0x64>)
 80028e6:	f006 ff0f 	bl	8009708 <HAL_TIMEx_MasterConfigSynchronization>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80028f0:	f000 f8be 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	200003c0 	.word	0x200003c0
 8002900:	40001400 	.word	0x40001400

08002904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_DMA_Init+0x60>)
 800290c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <MX_DMA_Init+0x60>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6493      	str	r3, [r2, #72]	; 0x48
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <MX_DMA_Init+0x60>)
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <MX_DMA_Init+0x60>)
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <MX_DMA_Init+0x60>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6493      	str	r3, [r2, #72]	; 0x48
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <MX_DMA_Init+0x60>)
 8002930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	200b      	movs	r0, #11
 8002940:	f003 fbc3 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002944:	200b      	movs	r0, #11
 8002946:	f003 fbda 	bl	80060fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	200c      	movs	r0, #12
 8002950:	f003 fbbb 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002954:	200c      	movs	r0, #12
 8002956:	f003 fbd2 	bl	80060fe <HAL_NVIC_EnableIRQ>

}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <MX_GPIO_Init+0x100>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	4a39      	ldr	r2, [pc, #228]	; (8002a68 <MX_GPIO_Init+0x100>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <MX_GPIO_Init+0x100>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <MX_GPIO_Init+0x100>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <MX_GPIO_Init+0x100>)
 800299c:	f043 0320 	orr.w	r3, r3, #32
 80029a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <MX_GPIO_Init+0x100>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <MX_GPIO_Init+0x100>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a2d      	ldr	r2, [pc, #180]	; (8002a68 <MX_GPIO_Init+0x100>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <MX_GPIO_Init+0x100>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <MX_GPIO_Init+0x100>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <MX_GPIO_Init+0x100>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <MX_GPIO_Init+0x100>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029de:	2200      	movs	r2, #0
 80029e0:	2120      	movs	r1, #32
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e6:	f004 f9f5 	bl	8006dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80029ea:	2200      	movs	r2, #0
 80029ec:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80029f0:	481e      	ldr	r0, [pc, #120]	; (8002a6c <MX_GPIO_Init+0x104>)
 80029f2:	f004 f9ef 	bl	8006dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4817      	ldr	r0, [pc, #92]	; (8002a6c <MX_GPIO_Init+0x104>)
 8002a0e:	f004 f847 	bl	8006aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a12:	2320      	movs	r3, #32
 8002a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2c:	f004 f838 	bl	8006aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8002a30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	4808      	ldr	r0, [pc, #32]	; (8002a6c <MX_GPIO_Init+0x104>)
 8002a4a:	f004 f829 	bl	8006aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2028      	movs	r0, #40	; 0x28
 8002a54:	f003 fb39 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a58:	2028      	movs	r0, #40	; 0x28
 8002a5a:	f003 fb50 	bl	80060fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a5e:	bf00      	nop
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	48000800 	.word	0x48000800

08002a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a74:	b672      	cpsid	i
}
 8002a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <Error_Handler+0x8>
	...

08002a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_MspInit+0x44>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_MspInit+0x44>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ab2:	f004 fa89 	bl	8006fc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0a0      	sub	sp, #128	; 0x80
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	2254      	movs	r2, #84	; 0x54
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f007 fdab 	bl	800a640 <memset>
  if(hadc->Instance==ADC1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af2:	d17f      	bne.n	8002bf4 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002afa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002afe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b00:	f107 0318 	add.w	r3, r7, #24
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 ffa3 	bl	8007a50 <HAL_RCCEx_PeriphCLKConfig>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b10:	f7ff ffae 	bl	8002a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	4a38      	ldr	r2, [pc, #224]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	4a32      	ldr	r2, [pc, #200]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b38:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	4a2c      	ldr	r2, [pc, #176]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b50:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <HAL_ADC_MspInit+0x138>)
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b60:	2303      	movs	r3, #3
 8002b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4824      	ldr	r0, [pc, #144]	; (8002c00 <HAL_ADC_MspInit+0x13c>)
 8002b70:	f003 ff96 	bl	8006aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b74:	2303      	movs	r3, #3
 8002b76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8a:	f003 ff89 	bl	8006aa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_ADC_MspInit+0x144>)
 8002b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002b96:	2205      	movs	r2, #5
 8002b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bc8:	480e      	ldr	r0, [pc, #56]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002bca:	f003 fcf7 	bl	80065bc <HAL_DMA_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002bd4:	f7ff ff4c 	bl	8002a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_ADC_MspInit+0x140>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2012      	movs	r0, #18
 8002bea:	f003 fa6e 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002bee:	2012      	movs	r0, #18
 8002bf0:	f003 fa85 	bl	80060fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3780      	adds	r7, #128	; 0x80
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	48000800 	.word	0x48000800
 8002c04:	200001c4 	.word	0x200001c4
 8002c08:	40020008 	.word	0x40020008

08002c0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_DAC_MspInit+0xcc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d14f      	bne.n	8002cce <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_DAC_MspInit+0xd0>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4a2a      	ldr	r2, [pc, #168]	; (8002cdc <HAL_DAC_MspInit+0xd0>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3a:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_DAC_MspInit+0xd0>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_DAC_MspInit+0xd0>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <HAL_DAC_MspInit+0xd0>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_DAC_MspInit+0xd0>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c5e:	2310      	movs	r3, #16
 8002c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c62:	2303      	movs	r3, #3
 8002c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c74:	f003 ff14 	bl	8006aa0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002c7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ce4 <HAL_DAC_MspInit+0xd8>)
 8002c7c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002c80:	2206      	movs	r2, #6
 8002c82:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002c86:	2210      	movs	r2, #16
 8002c88:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c9c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002ca8:	2220      	movs	r2, #32
 8002caa:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002cb2:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002cb4:	f003 fc82 	bl	80065bc <HAL_DMA_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002cbe:	f7ff fed7 	bl	8002a70 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <HAL_DAC_MspInit+0xd4>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	50000800 	.word	0x50000800
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	20000238 	.word	0x20000238
 8002ce4:	4002001c 	.word	0x4002001c

08002ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b09e      	sub	sp, #120	; 0x78
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	2254      	movs	r2, #84	; 0x54
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f007 fc99 	bl	800a640 <memset>
  if(huart->Instance==LPUART1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_UART_MspInit+0xa8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d136      	bne.n	8002d86 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d20:	f107 0310 	add.w	r3, r7, #16
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 fe93 	bl	8007a50 <HAL_RCCEx_PeriphCLKConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d30:	f7ff fe9e 	bl	8002a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_UART_MspInit+0xac>)
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <HAL_UART_MspInit+0xac>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_UART_MspInit+0xac>)
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_UART_MspInit+0xac>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <HAL_UART_MspInit+0xac>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_UART_MspInit+0xac>)
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002d64:	230c      	movs	r3, #12
 8002d66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002d74:	230c      	movs	r3, #12
 8002d76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d82:	f003 fe8d 	bl	8006aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002d86:	bf00      	nop
 8002d88:	3778      	adds	r7, #120	; 0x78
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40008000 	.word	0x40008000
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_TIM_PWM_MspInit+0x38>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10b      	bne.n	8002dc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002db4:	6613      	str	r3, [r2, #96]	; 0x60
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d146      	bne.n	8002e88 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6593      	str	r3, [r2, #88]	; 0x58
 8002e06:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e12:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_TIM_IC_MspInit+0xb8>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8002e42:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e54:	2301      	movs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	480d      	ldr	r0, [pc, #52]	; (8002e94 <HAL_TIM_IC_MspInit+0xbc>)
 8002e60:	f003 fe1e 	bl	8006aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 8002e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e76:	2301      	movs	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e84:	f003 fe0c 	bl	8006aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e88:	bf00      	nop
 8002e8a:	3728      	adds	r7, #40	; 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	48000400 	.word	0x48000400

08002e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <HAL_TIM_Base_MspInit+0x38>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_TIM_Base_MspInit+0x3c>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_TIM_Base_MspInit+0x3c>)
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_TIM_Base_MspInit+0x3c>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40001400 	.word	0x40001400
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <HAL_TIM_MspPostInit+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d155      	bne.n	8002fa6 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	4a2d      	ldr	r2, [pc, #180]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f36:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <HAL_TIM_MspPostInit+0xdc>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f42:	2308      	movs	r3, #8
 8002f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f52:	2302      	movs	r3, #2
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4816      	ldr	r0, [pc, #88]	; (8002fb8 <HAL_TIM_MspPostInit+0xe0>)
 8002f5e:	f003 fd9f 	bl	8006aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002f62:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f74:	2306      	movs	r3, #6
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f82:	f003 fd8d 	bl	8006aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f86:	2303      	movs	r3, #3
 8002f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f96:	2306      	movs	r3, #6
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4806      	ldr	r0, [pc, #24]	; (8002fbc <HAL_TIM_MspPostInit+0xe4>)
 8002fa2:	f003 fd7d 	bl	8006aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	48000800 	.word	0x48000800
 8002fbc:	48000400 	.word	0x48000400

08002fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <NMI_Handler+0x4>

08002fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fca:	e7fe      	b.n	8002fca <HardFault_Handler+0x4>

08002fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <MemManage_Handler+0x4>

08002fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd6:	e7fe      	b.n	8002fd6 <BusFault_Handler+0x4>

08002fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <UsageFault_Handler+0x4>

08002fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800300c:	f000 f9c0 	bl	8003390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}

08003014 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <DMA1_Channel1_IRQHandler+0x10>)
 800301a:	f003 fbf2 	bl	8006802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200001c4 	.word	0x200001c4

08003028 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <DMA1_Channel2_IRQHandler+0x10>)
 800302e:	f003 fbe8 	bl	8006802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000238 	.word	0x20000238

0800303c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 8003042:	4b77      	ldr	r3, [pc, #476]	; (8003220 <ADC1_2_IRQHandler+0x1e4>)
 8003044:	61bb      	str	r3, [r7, #24]
	float Idq_ref[2];
	uint8_t leadAngleModeFlg;
	uint8_t flgFB;
  int8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003046:	4877      	ldr	r0, [pc, #476]	; (8003224 <ADC1_2_IRQHandler+0x1e8>)
 8003048:	f000 febc 	bl	8003dc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800304c:	2120      	movs	r1, #32
 800304e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003052:	f003 fed7 	bl	8006e04 <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 8003056:	f7fd fe75 	bl	8000d44 <readButton1>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	4b72      	ldr	r3, [pc, #456]	; (8003228 <ADC1_2_IRQHandler+0x1ec>)
 8003060:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 8003062:	f7fd fed7 	bl	8000e14 <readVolume>
 8003066:	eef0 7a40 	vmov.f32	s15, s0
 800306a:	4b70      	ldr	r3, [pc, #448]	; (800322c <ADC1_2_IRQHandler+0x1f0>)
 800306c:	edc3 7a00 	vstr	s15, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 8003070:	496f      	ldr	r1, [pc, #444]	; (8003230 <ADC1_2_IRQHandler+0x1f4>)
 8003072:	4870      	ldr	r0, [pc, #448]	; (8003234 <ADC1_2_IRQHandler+0x1f8>)
 8003074:	f7fd ff1c 	bl	8000eb0 <readCurrent>
	gVdc = readVdc();
 8003078:	f7fd fef8 	bl	8000e6c <readVdc>
 800307c:	eef0 7a40 	vmov.f32	s15, s0
 8003080:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <ADC1_2_IRQHandler+0x1fc>)
 8003082:	edc3 7a00 	vstr	s15, [r3]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 8003086:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <ADC1_2_IRQHandler+0x1fc>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003090:	eef0 0a67 	vmov.f32	s1, s15
 8003094:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003098:	f7fd fda5 	bl	8000be6 <gfDivideAvoidZero>
 800309c:	eef0 7a40 	vmov.f32	s15, s0
 80030a0:	4b66      	ldr	r3, [pc, #408]	; (800323c <ADC1_2_IRQHandler+0x200>)
 80030a2:	edc3 7a00 	vstr	s15, [r3]

	//DutyRef Calculation
	//if ( gButton1 == 1 )
	  rotDir = 1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
	//else
	//  rotDir = -1;


	  Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	607b      	str	r3, [r7, #4]
	  Idq_ref[1] = 10.0f * gVolume;
 80030b0:	4b5e      	ldr	r3, [pc, #376]	; (800322c <ADC1_2_IRQHandler+0x1f0>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030be:	edc7 7a02 	vstr	s15, [r7, #8]
	ErectFreqErr = ErectFreqRef - gElectFreq;
	gDutyRef += ErectFreqErr * 0.0000001f;
	*/

	// Sequence Control
	if(gInitCnt < 500){
 80030c2:	4b5f      	ldr	r3, [pc, #380]	; (8003240 <ADC1_2_IRQHandler+0x204>)
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ca:	d210      	bcs.n	80030ee <ADC1_2_IRQHandler+0xb2>
		gInitCnt++;
 80030cc:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <ADC1_2_IRQHandler+0x204>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b5a      	ldr	r3, [pc, #360]	; (8003240 <ADC1_2_IRQHandler+0x204>)
 80030d6:	801a      	strh	r2, [r3, #0]
		gPosMode = POSMODE_HALL;
 80030d8:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <ADC1_2_IRQHandler+0x208>)
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OFF;
 80030de:	4b5a      	ldr	r3, [pc, #360]	; (8003248 <ADC1_2_IRQHandler+0x20c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	77bb      	strb	r3, [r7, #30]
 80030ec:	e033      	b.n	8003156 <ADC1_2_IRQHandler+0x11a>
	}
	else if (gElectFreq < 10.0f){
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <ADC1_2_IRQHandler+0x210>)
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	d50a      	bpl.n	8003118 <ADC1_2_IRQHandler+0xdc>
		gPosMode = POSMODE_HALL;
 8003102:	4b50      	ldr	r3, [pc, #320]	; (8003244 <ADC1_2_IRQHandler+0x208>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OPENLOOP;
 8003108:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <ADC1_2_IRQHandler+0x20c>)
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	77bb      	strb	r3, [r7, #30]
 8003116:	e01e      	b.n	8003156 <ADC1_2_IRQHandler+0x11a>
	}
	else if(gElectFreq < 20.0f){
 8003118:	4b4c      	ldr	r3, [pc, #304]	; (800324c <ADC1_2_IRQHandler+0x210>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d50a      	bpl.n	8003142 <ADC1_2_IRQHandler+0x106>
		gPosMode = POSMODE_HALL_PLL;
 800312c:	4b45      	ldr	r3, [pc, #276]	; (8003244 <ADC1_2_IRQHandler+0x208>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OPENLOOP;
 8003132:	4b45      	ldr	r3, [pc, #276]	; (8003248 <ADC1_2_IRQHandler+0x20c>)
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 1;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	77bb      	strb	r3, [r7, #30]
 8003140:	e009      	b.n	8003156 <ADC1_2_IRQHandler+0x11a>
	}
	else{
		gPosMode = POSMODE_HALL_PLL;
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <ADC1_2_IRQHandler+0x208>)
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_VECTORCONTROL;
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <ADC1_2_IRQHandler+0x20c>)
 800314a:	2203      	movs	r2, #3
 800314c:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	77fb      	strb	r3, [r7, #31]
		flgFB = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	77bb      	strb	r3, [r7, #30]
	}

	// MotorDrive
	if(gDrvMode == DRVMODE_OFF){
 8003156:	4b3c      	ldr	r3, [pc, #240]	; (8003248 <ADC1_2_IRQHandler+0x20c>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d112      	bne.n	8003184 <ADC1_2_IRQHandler+0x148>
		outputMode[0] = OUTPUTMODE_OPEN;
 800315e:	2300      	movs	r3, #0
 8003160:	703b      	strb	r3, [r7, #0]
		outputMode[1] = OUTPUTMODE_OPEN;
 8003162:	2300      	movs	r3, #0
 8003164:	707b      	strb	r3, [r7, #1]
		outputMode[2] = OUTPUTMODE_OPEN;
 8003166:	2300      	movs	r3, #0
 8003168:	70bb      	strb	r3, [r7, #2]
		gDuty[0] = 0.0f;
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <ADC1_2_IRQHandler+0x214>)
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
		gDuty[1] = 0.0f;
 8003172:	4b37      	ldr	r3, [pc, #220]	; (8003250 <ADC1_2_IRQHandler+0x214>)
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	605a      	str	r2, [r3, #4]
		gDuty[2] = 0.0f;
 800317a:	4b35      	ldr	r3, [pc, #212]	; (8003250 <ADC1_2_IRQHandler+0x214>)
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	e03d      	b.n	8003200 <ADC1_2_IRQHandler+0x1c4>

	}
	else{
		gDutyRef = 0.0f;
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <ADC1_2_IRQHandler+0x218>)
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
		sixStepTasks(gDutyRef, leadAngleModeFlg, 0.0f, &theta_tmp, &electAngVelo_tmp, gDuty, outputMode);
 800318c:	4b31      	ldr	r3, [pc, #196]	; (8003254 <ADC1_2_IRQHandler+0x218>)
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	f107 020c 	add.w	r2, r7, #12
 8003196:	f107 0110 	add.w	r1, r7, #16
 800319a:	7ff8      	ldrb	r0, [r7, #31]
 800319c:	463b      	mov	r3, r7
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <ADC1_2_IRQHandler+0x214>)
 80031a2:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8003258 <ADC1_2_IRQHandler+0x21c>
 80031a6:	eeb0 0a67 	vmov.f32	s0, s15
 80031aa:	f7fd ffb1 	bl	8001110 <sixStepTasks>
		gTheta = theta_tmp - gVolume;
 80031ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <ADC1_2_IRQHandler+0x1f0>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <ADC1_2_IRQHandler+0x220>)
 80031be:	edc3 7a00 	vstr	s15, [r3]
		gElectAngVelo = electAngVelo_tmp;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a26      	ldr	r2, [pc, #152]	; (8003260 <ADC1_2_IRQHandler+0x224>)
 80031c6:	6013      	str	r3, [r2, #0]

		//write IO signals
		//gTheta = gTheta + 2000.0f * gVolume * CARRIERCYCLE;
		//gTheta = gfWrapTheta(gTheta);

		VectorControlTasks(Idq_ref, gTheta, gElectAngVelo, gIuvw, gVdc, gTwoDivVdc, flgFB, gDuty, outputMode);
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <ADC1_2_IRQHandler+0x220>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <ADC1_2_IRQHandler+0x224>)
 80031d0:	ed93 7a00 	vldr	s14, [r3]
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <ADC1_2_IRQHandler+0x1fc>)
 80031d6:	edd3 6a00 	vldr	s13, [r3]
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <ADC1_2_IRQHandler+0x200>)
 80031dc:	ed93 6a00 	vldr	s12, [r3]
 80031e0:	7fba      	ldrb	r2, [r7, #30]
 80031e2:	1d38      	adds	r0, r7, #4
 80031e4:	463b      	mov	r3, r7
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <ADC1_2_IRQHandler+0x214>)
 80031ea:	eef0 1a46 	vmov.f32	s3, s12
 80031ee:	eeb0 1a66 	vmov.f32	s2, s13
 80031f2:	490f      	ldr	r1, [pc, #60]	; (8003230 <ADC1_2_IRQHandler+0x1f4>)
 80031f4:	eef0 0a47 	vmov.f32	s1, s14
 80031f8:	eeb0 0a67 	vmov.f32	s0, s15
 80031fc:	f7fe fba8 	bl	8001950 <VectorControlTasks>
		//OpenLoopTasks(0.75f, gTheta, gIuvw, gTwoDivVdc, gDuty, outputMode);
	}

	writeOutputMode(outputMode);
 8003200:	463b      	mov	r3, r7
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd ff00 	bl	8001008 <writeOutputMode>
	writeDuty(gDuty);
 8003208:	4811      	ldr	r0, [pc, #68]	; (8003250 <ADC1_2_IRQHandler+0x214>)
 800320a:	f7fd ff3f 	bl	800108c <writeDuty>
	//else

//
//VectorControlTasks(Idq_ref, gTheta, gIuvw, gVdc, gDuty);

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800320e:	2120      	movs	r1, #32
 8003210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003214:	f003 fdf6 	bl	8006e04 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	42c80000 	.word	0x42c80000
 8003224:	20000158 	.word	0x20000158
 8003228:	20000093 	.word	0x20000093
 800322c:	200000b0 	.word	0x200000b0
 8003230:	200000b4 	.word	0x200000b4
 8003234:	200000c0 	.word	0x200000c0
 8003238:	200000a8 	.word	0x200000a8
 800323c:	200000ac 	.word	0x200000ac
 8003240:	200000da 	.word	0x200000da
 8003244:	200000d8 	.word	0x200000d8
 8003248:	200000d9 	.word	0x200000d9
 800324c:	2000009c 	.word	0x2000009c
 8003250:	200000cc 	.word	0x200000cc
 8003254:	200000c8 	.word	0x200000c8
 8003258:	00000000 	.word	0x00000000
 800325c:	200000a0 	.word	0x200000a0
 8003260:	200000a4 	.word	0x200000a4

08003264 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003268:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800326c:	f003 fde4 	bl	8006e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}

08003274 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <SystemInit+0x20>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <SystemInit+0x20>)
 8003280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003298:	480d      	ldr	r0, [pc, #52]	; (80032d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800329a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800329c:	480d      	ldr	r0, [pc, #52]	; (80032d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800329e:	490e      	ldr	r1, [pc, #56]	; (80032d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <LoopForever+0xe>)
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032a4:	e002      	b.n	80032ac <LoopCopyDataInit>

080032a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032aa:	3304      	adds	r3, #4

080032ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b0:	d3f9      	bcc.n	80032a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032b4:	4c0b      	ldr	r4, [pc, #44]	; (80032e4 <LoopForever+0x16>)
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b8:	e001      	b.n	80032be <LoopFillZerobss>

080032ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032bc:	3204      	adds	r2, #4

080032be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c0:	d3fb      	bcc.n	80032ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032c2:	f7ff ffd7 	bl	8003274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c6:	f007 f997 	bl	800a5f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ca:	f7fe ff87 	bl	80021dc <main>

080032ce <LoopForever>:

LoopForever:
    b LoopForever
 80032ce:	e7fe      	b.n	80032ce <LoopForever>
  ldr   r0, =_estack
 80032d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80032dc:	0800ba7c 	.word	0x0800ba7c
  ldr r2, =_sbss
 80032e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80032e4:	20000410 	.word	0x20000410

080032e8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032e8:	e7fe      	b.n	80032e8 <ADC3_IRQHandler>

080032ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f002 fedd 	bl	80060b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032fa:	2000      	movs	r0, #0
 80032fc:	f000 f80e 	bl	800331c <HAL_InitTick>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	71fb      	strb	r3, [r7, #7]
 800330a:	e001      	b.n	8003310 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800330c:	f7ff fbb6 	bl	8002a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003310:	79fb      	ldrb	r3, [r7, #7]

}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003328:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_InitTick+0x68>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d022      	beq.n	8003376 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003330:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_InitTick+0x6c>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_InitTick+0x68>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800333c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fee8 	bl	800611a <HAL_SYSTICK_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10f      	bne.n	8003370 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b0f      	cmp	r3, #15
 8003354:	d809      	bhi.n	800336a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003356:	2200      	movs	r2, #0
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	f04f 30ff 	mov.w	r0, #4294967295
 800335e:	f002 feb4 	bl	80060ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_InitTick+0x70>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e007      	b.n	800337a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	e004      	b.n	800337a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e001      	b.n	800337a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000008 	.word	0x20000008
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_IncTick+0x1c>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_IncTick+0x20>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4413      	add	r3, r2
 800339e:	4a03      	ldr	r2, [pc, #12]	; (80033ac <HAL_IncTick+0x1c>)
 80033a0:	6013      	str	r3, [r2, #0]
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	2000040c 	.word	0x2000040c
 80033b0:	20000008 	.word	0x20000008

080033b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return uwTick;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_GetTick+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	2000040c 	.word	0x2000040c

080033cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d4:	f7ff ffee 	bl	80033b4 <HAL_GetTick>
 80033d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d004      	beq.n	80033f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_Delay+0x40>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4413      	add	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033f0:	bf00      	nop
 80033f2:	f7ff ffdf 	bl	80033b4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d8f7      	bhi.n	80033f2 <HAL_Delay+0x26>
  {
  }
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000008 	.word	0x20000008

08003410 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	609a      	str	r2, [r3, #8]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3360      	adds	r3, #96	; 0x60
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <LL_ADC_SetOffset+0x44>)
 800349a:	4013      	ands	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	03fff000 	.word	0x03fff000

080034c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	461a      	mov	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3360      	adds	r3, #96	; 0x60
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	431a      	orrs	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3360      	adds	r3, #96	; 0x60
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	431a      	orrs	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3360      	adds	r3, #96	; 0x60
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	431a      	orrs	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	615a      	str	r2, [r3, #20]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3330      	adds	r3, #48	; 0x30
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	4413      	add	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	211f      	movs	r1, #31
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	f003 011f 	and.w	r1, r3, #31
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3314      	adds	r3, #20
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	0e5b      	lsrs	r3, r3, #25
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	4413      	add	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	0d1b      	lsrs	r3, r3, #20
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2107      	movs	r1, #7
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	401a      	ands	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	0d1b      	lsrs	r3, r3, #20
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	431a      	orrs	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d10a      	bne.n	80036da <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80036d8:	e00a      	b.n	80036f0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e6:	43db      	mvns	r3, r3
 80036e8:	401a      	ands	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	407f0000 	.word	0x407f0000

08003700 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 031f 	and.w	r3, r3, #31
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6093      	str	r3, [r2, #8]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003770:	d101      	bne.n	8003776 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c0:	d101      	bne.n	80037c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <LL_ADC_IsEnabled+0x18>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <LL_ADC_IsEnabled+0x1a>
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003832:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d101      	bne.n	8003862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d101      	bne.n	8003888 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1af      	b.n	8003c12 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff f8ff 	bl	8002ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff3f 	bl	800375c <LL_ADC_IsDeepPowerDownEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff25 	bl	8003738 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff5a 	bl	80037ac <LL_ADC_IsInternalRegulatorEnabled>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d115      	bne.n	800392a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff3e 	bl	8003784 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003908:	4b9f      	ldr	r3, [pc, #636]	; (8003b88 <HAL_ADC_Init+0x2f0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	4a9f      	ldr	r2, [pc, #636]	; (8003b8c <HAL_ADC_Init+0x2f4>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800391c:	e002      	b.n	8003924 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3b01      	subs	r3, #1
 8003922:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f9      	bne.n	800391e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff3c 	bl	80037ac <LL_ADC_IsInternalRegulatorEnabled>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10d      	bne.n	8003956 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff75 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003960:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 8148 	bne.w	8003c00 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f040 8144 	bne.w	8003c00 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003980:	f043 0202 	orr.w	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff35 	bl	80037fc <LL_ADC_IsEnabled>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d141      	bne.n	8003a1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a0:	d004      	beq.n	80039ac <HAL_ADC_Init+0x114>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7a      	ldr	r2, [pc, #488]	; (8003b90 <HAL_ADC_Init+0x2f8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10f      	bne.n	80039cc <HAL_ADC_Init+0x134>
 80039ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039b0:	f7ff ff24 	bl	80037fc <LL_ADC_IsEnabled>
 80039b4:	4604      	mov	r4, r0
 80039b6:	4876      	ldr	r0, [pc, #472]	; (8003b90 <HAL_ADC_Init+0x2f8>)
 80039b8:	f7ff ff20 	bl	80037fc <LL_ADC_IsEnabled>
 80039bc:	4603      	mov	r3, r0
 80039be:	4323      	orrs	r3, r4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e012      	b.n	80039f2 <HAL_ADC_Init+0x15a>
 80039cc:	4871      	ldr	r0, [pc, #452]	; (8003b94 <HAL_ADC_Init+0x2fc>)
 80039ce:	f7ff ff15 	bl	80037fc <LL_ADC_IsEnabled>
 80039d2:	4604      	mov	r4, r0
 80039d4:	4870      	ldr	r0, [pc, #448]	; (8003b98 <HAL_ADC_Init+0x300>)
 80039d6:	f7ff ff11 	bl	80037fc <LL_ADC_IsEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	431c      	orrs	r4, r3
 80039de:	486f      	ldr	r0, [pc, #444]	; (8003b9c <HAL_ADC_Init+0x304>)
 80039e0:	f7ff ff0c 	bl	80037fc <LL_ADC_IsEnabled>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4323      	orrs	r3, r4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039fe:	d004      	beq.n	8003a0a <HAL_ADC_Init+0x172>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a62      	ldr	r2, [pc, #392]	; (8003b90 <HAL_ADC_Init+0x2f8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_Init+0x176>
 8003a0a:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_ADC_Init+0x308>)
 8003a0c:	e000      	b.n	8003a10 <HAL_ADC_Init+0x178>
 8003a0e:	4a65      	ldr	r2, [pc, #404]	; (8003ba4 <HAL_ADC_Init+0x30c>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7ff fcfa 	bl	8003410 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7f5b      	ldrb	r3, [r3, #29]
 8003a20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d106      	bne.n	8003a58 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	045b      	lsls	r3, r3, #17
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_ADC_Init+0x310>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fed1 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003aa8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fede 	bl	8003870 <LL_ADC_INJ_IsConversionOngoing>
 8003ab4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d17f      	bne.n	8003bbc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d17c      	bne.n	8003bbc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ac6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ace:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ade:	f023 0302 	bic.w	r3, r3, #2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	69b9      	ldr	r1, [r7, #24]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6911      	ldr	r1, [r2, #16]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b22:	e013      	b.n	8003b4c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d12a      	bne.n	8003bac <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b6c:	4311      	orrs	r1, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
 8003b86:	e019      	b.n	8003bbc <HAL_ADC_Init+0x324>
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	053e2d63 	.word	0x053e2d63
 8003b90:	50000100 	.word	0x50000100
 8003b94:	50000400 	.word	0x50000400
 8003b98:	50000500 	.word	0x50000500
 8003b9c:	50000600 	.word	0x50000600
 8003ba0:	50000300 	.word	0x50000300
 8003ba4:	50000700 	.word	0x50000700
 8003ba8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10c      	bne.n	8003bde <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f023 010f 	bic.w	r1, r3, #15
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	1e5a      	subs	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
 8003bdc:	e007      	b.n	8003bee <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 020f 	bic.w	r2, r2, #15
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bfe:	e007      	b.n	8003c10 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f043 0210 	orr.w	r2, r3, #16
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3724      	adds	r7, #36	; 0x24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	bf00      	nop

08003c1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c30:	d004      	beq.n	8003c3c <HAL_ADC_Start_DMA+0x20>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a5a      	ldr	r2, [pc, #360]	; (8003da0 <HAL_ADC_Start_DMA+0x184>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADC_Start_DMA+0x24>
 8003c3c:	4b59      	ldr	r3, [pc, #356]	; (8003da4 <HAL_ADC_Start_DMA+0x188>)
 8003c3e:	e000      	b.n	8003c42 <HAL_ADC_Start_DMA+0x26>
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_ADC_Start_DMA+0x18c>)
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fd5c 	bl	8003700 <LL_ADC_GetMultimode>
 8003c48:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fdfb 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 809b 	bne.w	8003d92 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_Start_DMA+0x4e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e096      	b.n	8003d98 <HAL_ADC_Start_DMA+0x17c>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4d      	ldr	r2, [pc, #308]	; (8003dac <HAL_ADC_Start_DMA+0x190>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d008      	beq.n	8003c8e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d002      	beq.n	8003c8e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d17a      	bne.n	8003d84 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 ff60 	bl	8004b54 <ADC_Enable>
 8003c94:	4603      	mov	r3, r0
 8003c96:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d16d      	bne.n	8003d7a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a3a      	ldr	r2, [pc, #232]	; (8003da0 <HAL_ADC_Start_DMA+0x184>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_ADC_Start_DMA+0xb4>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_ADC_Start_DMA+0x194>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d002      	beq.n	8003ccc <HAL_ADC_Start_DMA+0xb0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	e003      	b.n	8003cd4 <HAL_ADC_Start_DMA+0xb8>
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <HAL_ADC_Start_DMA+0x198>)
 8003cce:	e001      	b.n	8003cd4 <HAL_ADC_Start_DMA+0xb8>
 8003cd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d002      	beq.n	8003ce2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	f023 0206 	bic.w	r2, r3, #6
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	661a      	str	r2, [r3, #96]	; 0x60
 8003d06:	e002      	b.n	8003d0e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <HAL_ADC_Start_DMA+0x19c>)
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <HAL_ADC_Start_DMA+0x1a0>)
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <HAL_ADC_Start_DMA+0x1a4>)
 8003d24:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	221c      	movs	r2, #28
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0210 	orr.w	r2, r2, #16
 8003d44:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3340      	adds	r3, #64	; 0x40
 8003d60:	4619      	mov	r1, r3
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f002 fcd1 	bl	800670c <HAL_DMA_Start_IT>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fd55 	bl	8003822 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d78:	e00d      	b.n	8003d96 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003d82:	e008      	b.n	8003d96 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d90:	e001      	b.n	8003d96 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	50000100 	.word	0x50000100
 8003da4:	50000300 	.word	0x50000300
 8003da8:	50000700 	.word	0x50000700
 8003dac:	50000600 	.word	0x50000600
 8003db0:	50000500 	.word	0x50000500
 8003db4:	50000400 	.word	0x50000400
 8003db8:	08004c19 	.word	0x08004c19
 8003dbc:	08004cf1 	.word	0x08004cf1
 8003dc0:	08004d0d 	.word	0x08004d0d

08003dc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de8:	d004      	beq.n	8003df4 <HAL_ADC_IRQHandler+0x30>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a8e      	ldr	r2, [pc, #568]	; (8004028 <HAL_ADC_IRQHandler+0x264>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_IRQHandler+0x34>
 8003df4:	4b8d      	ldr	r3, [pc, #564]	; (800402c <HAL_ADC_IRQHandler+0x268>)
 8003df6:	e000      	b.n	8003dfa <HAL_ADC_IRQHandler+0x36>
 8003df8:	4b8d      	ldr	r3, [pc, #564]	; (8004030 <HAL_ADC_IRQHandler+0x26c>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fc80 	bl	8003700 <LL_ADC_GetMultimode>
 8003e00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d017      	beq.n	8003e3c <HAL_ADC_IRQHandler+0x78>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d012      	beq.n	8003e3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f001 fa32 	bl	8005298 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_ADC_IRQHandler+0x8c>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8094 	beq.w	8003f84 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 808e 	beq.w	8003f84 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fb95 	bl	80035b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d072      	beq.n	8003f76 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a64      	ldr	r2, [pc, #400]	; (8004028 <HAL_ADC_IRQHandler+0x264>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_ADC_IRQHandler+0xea>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a65      	ldr	r2, [pc, #404]	; (8004034 <HAL_ADC_IRQHandler+0x270>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d002      	beq.n	8003eaa <HAL_ADC_IRQHandler+0xe6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	e003      	b.n	8003eb2 <HAL_ADC_IRQHandler+0xee>
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_ADC_IRQHandler+0x274>)
 8003eac:	e001      	b.n	8003eb2 <HAL_ADC_IRQHandler+0xee>
 8003eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d008      	beq.n	8003ecc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d002      	beq.n	8003ecc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d104      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	e014      	b.n	8003f00 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a53      	ldr	r2, [pc, #332]	; (8004028 <HAL_ADC_IRQHandler+0x264>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x130>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a53      	ldr	r2, [pc, #332]	; (8004034 <HAL_ADC_IRQHandler+0x270>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d002      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x12c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	e003      	b.n	8003ef8 <HAL_ADC_IRQHandler+0x134>
 8003ef0:	4b51      	ldr	r3, [pc, #324]	; (8004038 <HAL_ADC_IRQHandler+0x274>)
 8003ef2:	e001      	b.n	8003ef8 <HAL_ADC_IRQHandler+0x134>
 8003ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ef8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d135      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d12e      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fc94 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11a      	bne.n	8003f5e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 020c 	bic.w	r2, r2, #12
 8003f36:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d112      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f5c:	e00b      	b.n	8003f76 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f984 	bl	8004284 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	220c      	movs	r2, #12
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_ADC_IRQHandler+0x1d4>
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80b3 	beq.w	800410a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80ad 	beq.w	800410a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fb30 	bl	8003632 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003fd2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff faeb 	bl	80035b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fde:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_ADC_IRQHandler+0x264>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_ADC_IRQHandler+0x23a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a11      	ldr	r2, [pc, #68]	; (8004034 <HAL_ADC_IRQHandler+0x270>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d002      	beq.n	8003ffa <HAL_ADC_IRQHandler+0x236>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	e003      	b.n	8004002 <HAL_ADC_IRQHandler+0x23e>
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_ADC_IRQHandler+0x274>)
 8003ffc:	e001      	b.n	8004002 <HAL_ADC_IRQHandler+0x23e>
 8003ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	4293      	cmp	r3, r2
 8004008:	d008      	beq.n	800401c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b06      	cmp	r3, #6
 8004014:	d002      	beq.n	800401c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b07      	cmp	r3, #7
 800401a:	d10f      	bne.n	800403c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	e01f      	b.n	8004066 <HAL_ADC_IRQHandler+0x2a2>
 8004026:	bf00      	nop
 8004028:	50000100 	.word	0x50000100
 800402c:	50000300 	.word	0x50000300
 8004030:	50000700 	.word	0x50000700
 8004034:	50000500 	.word	0x50000500
 8004038:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a8b      	ldr	r2, [pc, #556]	; (8004270 <HAL_ADC_IRQHandler+0x4ac>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_ADC_IRQHandler+0x296>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a8a      	ldr	r2, [pc, #552]	; (8004274 <HAL_ADC_IRQHandler+0x4b0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d002      	beq.n	8004056 <HAL_ADC_IRQHandler+0x292>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	e003      	b.n	800405e <HAL_ADC_IRQHandler+0x29a>
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_ADC_IRQHandler+0x4b4>)
 8004058:	e001      	b.n	800405e <HAL_ADC_IRQHandler+0x29a>
 800405a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800405e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d047      	beq.n	80040fc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_ADC_IRQHandler+0x2c2>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d03f      	beq.n	80040fc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004082:	2b00      	cmp	r3, #0
 8004084:	d13a      	bne.n	80040fc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d133      	bne.n	80040fc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d12e      	bne.n	80040fc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fbe4 	bl	8003870 <LL_ADC_INJ_IsConversionOngoing>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11a      	bne.n	80040e4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040bc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d112      	bne.n	80040fc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040da:	f043 0201 	orr.w	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80040e2:	e00b      	b.n	80040fc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e8:	f043 0210 	orr.w	r2, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f001 f8a3 	bl	8005248 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2260      	movs	r2, #96	; 0x60
 8004108:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <HAL_ADC_IRQHandler+0x374>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8be 	bl	80042ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2280      	movs	r2, #128	; 0x80
 8004136:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d012      	beq.n	8004168 <HAL_ADC_IRQHandler+0x3a4>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 f889 	bl	8005270 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d012      	beq.n	8004198 <HAL_ADC_IRQHandler+0x3d4>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f001 f87b 	bl	8005284 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d043      	beq.n	800422a <HAL_ADC_IRQHandler+0x466>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03e      	beq.n	800422a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80041b4:	2301      	movs	r3, #1
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
 80041b8:	e021      	b.n	80041fe <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c8:	d004      	beq.n	80041d4 <HAL_ADC_IRQHandler+0x410>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a28      	ldr	r2, [pc, #160]	; (8004270 <HAL_ADC_IRQHandler+0x4ac>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x414>
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_ADC_IRQHandler+0x4b8>)
 80041d6:	e000      	b.n	80041da <HAL_ADC_IRQHandler+0x416>
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_ADC_IRQHandler+0x4bc>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fa9e 	bl	800371c <LL_ADC_GetMultiDMATransfer>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80041e6:	2301      	movs	r3, #1
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	e008      	b.n	80041fe <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80041fa:	2301      	movs	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10e      	bne.n	8004222 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	f043 0202 	orr.w	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f84f 	bl	80042c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2210      	movs	r2, #16
 8004228:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	2b00      	cmp	r3, #0
 8004232:	d018      	beq.n	8004266 <HAL_ADC_IRQHandler+0x4a2>
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423a:	2b00      	cmp	r3, #0
 800423c:	d013      	beq.n	8004266 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	f043 0208 	orr.w	r2, r3, #8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800425e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fffb 	bl	800525c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004266:	bf00      	nop
 8004268:	3728      	adds	r7, #40	; 0x28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	50000100 	.word	0x50000100
 8004274:	50000500 	.word	0x50000500
 8004278:	50000400 	.word	0x50000400
 800427c:	50000300 	.word	0x50000300
 8004280:	50000700 	.word	0x50000700

08004284 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0b6      	sub	sp, #216	; 0xd8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d102      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x24>
 80042f2:	2302      	movs	r3, #2
 80042f4:	f000 bc13 	b.w	8004b1e <HAL_ADC_ConfigChannel+0x84a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff faa0 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 83f3 	bne.w	8004af8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f7ff f95b 	bl	80035da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fa8e 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 800432e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fa9a 	bl	8003870 <LL_ADC_INJ_IsConversionOngoing>
 800433c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004340:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 81d9 	bne.w	80046fc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800434a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 81d4 	bne.w	80046fc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435c:	d10f      	bne.n	800437e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	4619      	mov	r1, r3
 800436a:	f7ff f975 	bl	8003658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff f909 	bl	800358e <LL_ADC_SetSamplingTimeCommonConfig>
 800437c:	e00e      	b.n	800439c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	461a      	mov	r2, r3
 800438c:	f7ff f964 	bl	8003658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f8f9 	bl	800358e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	08db      	lsrs	r3, r3, #3
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d022      	beq.n	8004404 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6919      	ldr	r1, [r3, #16]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043ce:	f7ff f853 	bl	8003478 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6919      	ldr	r1, [r3, #16]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	461a      	mov	r2, r3
 80043e0:	f7ff f89f 	bl	8003522 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6919      	ldr	r1, [r3, #16]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	7f1b      	ldrb	r3, [r3, #28]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d102      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x126>
 80043f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f8:	e000      	b.n	80043fc <HAL_ADC_ConfigChannel+0x128>
 80043fa:	2300      	movs	r3, #0
 80043fc:	461a      	mov	r2, r3
 80043fe:	f7ff f8ab 	bl	8003558 <LL_ADC_SetOffsetSaturation>
 8004402:	e17b      	b.n	80046fc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f858 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 8004410:	4603      	mov	r3, r0
 8004412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x15c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff f84d 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	f003 021f 	and.w	r2, r3, #31
 800442e:	e01e      	b.n	800446e <HAL_ADC_ConfigChannel+0x19a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff f842 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004446:	fa93 f3a3 	rbit	r3, r3
 800444a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800444e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800445e:	2320      	movs	r3, #32
 8004460:	e004      	b.n	800446c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004466:	fab3 f383 	clz	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x1b2>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	e018      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x1e4>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800449a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800449e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80044a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80044aa:	2320      	movs	r3, #32
 80044ac:	e004      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80044ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d106      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2200      	movs	r2, #0
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff f811 	bl	80034ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe fff5 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x222>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe ffea 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 80044ec:	4603      	mov	r3, r0
 80044ee:	0e9b      	lsrs	r3, r3, #26
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	e01e      	b.n	8004534 <HAL_ADC_ConfigChannel+0x260>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe ffdf 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800450c:	fa93 f3a3 	rbit	r3, r3
 8004510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800451c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004524:	2320      	movs	r3, #32
 8004526:	e004      	b.n	8004532 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453c:	2b00      	cmp	r3, #0
 800453e:	d105      	bne.n	800454c <HAL_ADC_ConfigChannel+0x278>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0e9b      	lsrs	r3, r3, #26
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	e018      	b.n	800457e <HAL_ADC_ConfigChannel+0x2aa>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004560:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004570:	2320      	movs	r3, #32
 8004572:	e004      	b.n	800457e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004578:	fab3 f383 	clz	r3, r3
 800457c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800457e:	429a      	cmp	r2, r3
 8004580:	d106      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe ffae 	bl	80034ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2102      	movs	r1, #2
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe ff92 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 800459c:	4603      	mov	r3, r0
 800459e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x2e8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2102      	movs	r1, #2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe ff87 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 80045b2:	4603      	mov	r3, r0
 80045b4:	0e9b      	lsrs	r3, r3, #26
 80045b6:	f003 021f 	and.w	r2, r3, #31
 80045ba:	e01e      	b.n	80045fa <HAL_ADC_ConfigChannel+0x326>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2102      	movs	r1, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe ff7c 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80045da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80045e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80045ea:	2320      	movs	r3, #32
 80045ec:	e004      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80045ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x33e>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0e9b      	lsrs	r3, r3, #26
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	e016      	b.n	8004640 <HAL_ADC_ConfigChannel+0x36c>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800462a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004632:	2320      	movs	r3, #32
 8004634:	e004      	b.n	8004640 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004640:	429a      	cmp	r2, r3
 8004642:	d106      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2200      	movs	r2, #0
 800464a:	2102      	movs	r1, #2
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe ff4d 	bl	80034ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2103      	movs	r1, #3
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe ff31 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_ADC_ConfigChannel+0x3aa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2103      	movs	r1, #3
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe ff26 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	0e9b      	lsrs	r3, r3, #26
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	e017      	b.n	80046ae <HAL_ADC_ConfigChannel+0x3da>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2103      	movs	r1, #3
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe ff1b 	bl	80034c0 <LL_ADC_GetOffsetChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004698:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800469a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e003      	b.n	80046ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80046a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x3f2>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	0e9b      	lsrs	r3, r3, #26
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	e011      	b.n	80046ea <HAL_ADC_ConfigChannel+0x416>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ce:	fa93 f3a3 	rbit	r3, r3
 80046d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80046d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80046de:	2320      	movs	r3, #32
 80046e0:	e003      	b.n	80046ea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d106      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	2103      	movs	r1, #3
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fef8 	bl	80034ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f87b 	bl	80037fc <LL_ADC_IsEnabled>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 813d 	bne.w	8004988 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	461a      	mov	r2, r3
 800471c:	f7fe ffc8 	bl	80036b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4aa2      	ldr	r2, [pc, #648]	; (80049b0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	f040 812e 	bne.w	8004988 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x480>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	3301      	adds	r3, #1
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2b09      	cmp	r3, #9
 800474a:	bf94      	ite	ls
 800474c:	2301      	movls	r3, #1
 800474e:	2300      	movhi	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	e019      	b.n	8004788 <HAL_ADC_ConfigChannel+0x4b4>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004764:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800476c:	2320      	movs	r3, #32
 800476e:	e003      	b.n	8004778 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2b09      	cmp	r3, #9
 8004780:	bf94      	ite	ls
 8004782:	2301      	movls	r3, #1
 8004784:	2300      	movhi	r3, #0
 8004786:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004788:	2b00      	cmp	r3, #0
 800478a:	d079      	beq.n	8004880 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004794:	2b00      	cmp	r3, #0
 8004796:	d107      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x4d4>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0e9b      	lsrs	r3, r3, #26
 800479e:	3301      	adds	r3, #1
 80047a0:	069b      	lsls	r3, r3, #26
 80047a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047a6:	e015      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x500>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80047ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e003      	b.n	80047cc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80047c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	069b      	lsls	r3, r3, #26
 80047d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x520>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0e9b      	lsrs	r3, r3, #26
 80047e6:	3301      	adds	r3, #1
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	e017      	b.n	8004824 <HAL_ADC_ConfigChannel+0x550>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004804:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e003      	b.n	8004818 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	ea42 0103 	orr.w	r1, r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <HAL_ADC_ConfigChannel+0x576>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	0e9b      	lsrs	r3, r3, #26
 800483a:	3301      	adds	r3, #1
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	051b      	lsls	r3, r3, #20
 8004848:	e018      	b.n	800487c <HAL_ADC_ConfigChannel+0x5a8>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	fa93 f3a3 	rbit	r3, r3
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004862:	2320      	movs	r3, #32
 8004864:	e003      	b.n	800486e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f003 021f 	and.w	r2, r3, #31
 8004874:	4613      	mov	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800487c:	430b      	orrs	r3, r1
 800487e:	e07e      	b.n	800497e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004888:	2b00      	cmp	r3, #0
 800488a:	d107      	bne.n	800489c <HAL_ADC_ConfigChannel+0x5c8>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	3301      	adds	r3, #1
 8004894:	069b      	lsls	r3, r3, #26
 8004896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800489a:	e015      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x5f4>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80048b4:	2320      	movs	r3, #32
 80048b6:	e003      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	069b      	lsls	r3, r3, #26
 80048c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x614>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	0e9b      	lsrs	r3, r3, #26
 80048da:	3301      	adds	r3, #1
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2101      	movs	r1, #1
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	e017      	b.n	8004918 <HAL_ADC_ConfigChannel+0x644>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	61fb      	str	r3, [r7, #28]
  return result;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004900:	2320      	movs	r3, #32
 8004902:	e003      	b.n	800490c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3301      	adds	r3, #1
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	ea42 0103 	orr.w	r1, r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x670>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0e9b      	lsrs	r3, r3, #26
 800492e:	3301      	adds	r3, #1
 8004930:	f003 021f 	and.w	r2, r3, #31
 8004934:	4613      	mov	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4413      	add	r3, r2
 800493a:	3b1e      	subs	r3, #30
 800493c:	051b      	lsls	r3, r3, #20
 800493e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004942:	e01b      	b.n	800497c <HAL_ADC_ConfigChannel+0x6a8>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	613b      	str	r3, [r7, #16]
  return result;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800495c:	2320      	movs	r3, #32
 800495e:	e003      	b.n	8004968 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	3301      	adds	r3, #1
 800496a:	f003 021f 	and.w	r2, r3, #31
 800496e:	4613      	mov	r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	3b1e      	subs	r3, #30
 8004976:	051b      	lsls	r3, r3, #20
 8004978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800497c:	430b      	orrs	r3, r1
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	6892      	ldr	r2, [r2, #8]
 8004982:	4619      	mov	r1, r3
 8004984:	f7fe fe68 	bl	8003658 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <HAL_ADC_ConfigChannel+0x6e0>)
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80be 	beq.w	8004b12 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800499e:	d004      	beq.n	80049aa <HAL_ADC_ConfigChannel+0x6d6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <HAL_ADC_ConfigChannel+0x6e4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10a      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x6ec>
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <HAL_ADC_ConfigChannel+0x6e8>)
 80049ac:	e009      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x6ee>
 80049ae:	bf00      	nop
 80049b0:	407f0000 	.word	0x407f0000
 80049b4:	80080000 	.word	0x80080000
 80049b8:	50000100 	.word	0x50000100
 80049bc:	50000300 	.word	0x50000300
 80049c0:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <HAL_ADC_ConfigChannel+0x854>)
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fd4a 	bl	800345c <LL_ADC_GetCommonPathInternalCh>
 80049c8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a56      	ldr	r2, [pc, #344]	; (8004b2c <HAL_ADC_ConfigChannel+0x858>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x70c>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a55      	ldr	r2, [pc, #340]	; (8004b30 <HAL_ADC_ConfigChannel+0x85c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d13a      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d134      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f4:	d005      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x72e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a4e      	ldr	r2, [pc, #312]	; (8004b34 <HAL_ADC_ConfigChannel+0x860>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	f040 8085 	bne.w	8004b0c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a0a:	d004      	beq.n	8004a16 <HAL_ADC_ConfigChannel+0x742>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a49      	ldr	r2, [pc, #292]	; (8004b38 <HAL_ADC_ConfigChannel+0x864>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x746>
 8004a16:	4a49      	ldr	r2, [pc, #292]	; (8004b3c <HAL_ADC_ConfigChannel+0x868>)
 8004a18:	e000      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x748>
 8004a1a:	4a43      	ldr	r2, [pc, #268]	; (8004b28 <HAL_ADC_ConfigChannel+0x854>)
 8004a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7fe fd05 	bl	8003436 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a2c:	4b44      	ldr	r3, [pc, #272]	; (8004b40 <HAL_ADC_ConfigChannel+0x86c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	099b      	lsrs	r3, r3, #6
 8004a32:	4a44      	ldr	r2, [pc, #272]	; (8004b44 <HAL_ADC_ConfigChannel+0x870>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	099b      	lsrs	r3, r3, #6
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a46:	e002      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f9      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a54:	e05a      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3b      	ldr	r2, [pc, #236]	; (8004b48 <HAL_ADC_ConfigChannel+0x874>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d125      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x7d8>
 8004a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d11f      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a31      	ldr	r2, [pc, #196]	; (8004b38 <HAL_ADC_ConfigChannel+0x864>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d104      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x7ac>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a34      	ldr	r2, [pc, #208]	; (8004b4c <HAL_ADC_ConfigChannel+0x878>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d047      	beq.n	8004b10 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a88:	d004      	beq.n	8004a94 <HAL_ADC_ConfigChannel+0x7c0>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <HAL_ADC_ConfigChannel+0x864>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x7c4>
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <HAL_ADC_ConfigChannel+0x868>)
 8004a96:	e000      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x7c6>
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_ADC_ConfigChannel+0x854>)
 8004a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7fe fcc6 	bl	8003436 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004aaa:	e031      	b.n	8004b10 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <HAL_ADC_ConfigChannel+0x87c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d12d      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d127      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_ADC_ConfigChannel+0x864>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d022      	beq.n	8004b12 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad4:	d004      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x80c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <HAL_ADC_ConfigChannel+0x864>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x810>
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <HAL_ADC_ConfigChannel+0x868>)
 8004ae2:	e000      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x812>
 8004ae4:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <HAL_ADC_ConfigChannel+0x854>)
 8004ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7fe fca0 	bl	8003436 <LL_ADC_SetCommonPathInternalCh>
 8004af6:	e00c      	b.n	8004b12 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004b0a:	e002      	b.n	8004b12 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	37d8      	adds	r7, #216	; 0xd8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	50000700 	.word	0x50000700
 8004b2c:	c3210000 	.word	0xc3210000
 8004b30:	90c00010 	.word	0x90c00010
 8004b34:	50000600 	.word	0x50000600
 8004b38:	50000100 	.word	0x50000100
 8004b3c:	50000300 	.word	0x50000300
 8004b40:	20000000 	.word	0x20000000
 8004b44:	053e2d63 	.word	0x053e2d63
 8004b48:	c7520000 	.word	0xc7520000
 8004b4c:	50000500 	.word	0x50000500
 8004b50:	cb840000 	.word	0xcb840000

08004b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fe4b 	bl	80037fc <LL_ADC_IsEnabled>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d14d      	bne.n	8004c08 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <ADC_Enable+0xc0>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	f043 0210 	orr.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e039      	b.n	8004c0a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fe1a 	bl	80037d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ba0:	f7fe fc08 	bl	80033b4 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ba6:	e028      	b.n	8004bfa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fe25 	bl	80037fc <LL_ADC_IsEnabled>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe fe09 	bl	80037d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bc2:	f7fe fbf7 	bl	80033b4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d914      	bls.n	8004bfa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d00d      	beq.n	8004bfa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	f043 0210 	orr.w	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e007      	b.n	8004c0a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d1cf      	bne.n	8004ba8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	8000003f 	.word	0x8000003f

08004c18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d14b      	bne.n	8004cca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d021      	beq.n	8004c90 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe fcaf 	bl	80035b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d032      	beq.n	8004cc2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d12b      	bne.n	8004cc2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d11f      	bne.n	8004cc2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	f043 0201 	orr.w	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c8e:	e018      	b.n	8004cc2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d105      	bne.n	8004cc2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	f043 0201 	orr.w	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff fade 	bl	8004284 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cc8:	e00e      	b.n	8004ce8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff faf2 	bl	80042c0 <HAL_ADC_ErrorCallback>
}
 8004cdc:	e004      	b.n	8004ce8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff faca 	bl	8004298 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f043 0204 	orr.w	r2, r3, #4
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fac4 	bl	80042c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <LL_ADC_SetCommonPathInternalCh>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_ADC_GetCommonPathInternalCh>:
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <LL_ADC_SetOffset>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3360      	adds	r3, #96	; 0x60
 8004d96:	461a      	mov	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <LL_ADC_SetOffset+0x44>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	03fff000 	.word	0x03fff000

08004dcc <LL_ADC_GetOffsetChannel>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3360      	adds	r3, #96	; 0x60
 8004dda:	461a      	mov	r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <LL_ADC_SetOffsetState>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3360      	adds	r3, #96	; 0x60
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	601a      	str	r2, [r3, #0]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_ADC_SetOffsetSign>:
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3360      	adds	r3, #96	; 0x60
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	601a      	str	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LL_ADC_SetOffsetSaturation>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3360      	adds	r3, #96	; 0x60
 8004e74:	461a      	mov	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	615a      	str	r2, [r3, #20]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_ADC_INJ_GetTrigAuto>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_ADC_SetChannelSamplingTime>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3314      	adds	r3, #20
 8004eec:	461a      	mov	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	0e5b      	lsrs	r3, r3, #25
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	4413      	add	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	0d1b      	lsrs	r3, r3, #20
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2107      	movs	r1, #7
 8004f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	401a      	ands	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	0d1b      	lsrs	r3, r3, #20
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	431a      	orrs	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	601a      	str	r2, [r3, #0]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <LL_ADC_SetChannelSingleDiff>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d10a      	bne.n	8004f5e <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004f5c:	e00a      	b.n	8004f74 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	401a      	ands	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	407f0000 	.word	0x407f0000

08004f84 <LL_ADC_GetMultimode>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 031f 	and.w	r3, r3, #31
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_ADC_IsEnabled>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <LL_ADC_IsEnabled+0x18>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <LL_ADC_IsEnabled+0x1a>
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d101      	bne.n	8004fde <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <LL_ADC_INJ_StartConversion>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005000:	f043 0208 	orr.w	r2, r3, #8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_ADC_INJ_IsConversionOngoing>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d101      	bne.n	800502c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800504c:	d004      	beq.n	8005058 <HAL_ADCEx_InjectedStart_IT+0x1c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a78      	ldr	r2, [pc, #480]	; (8005234 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_ADCEx_InjectedStart_IT+0x20>
 8005058:	4b77      	ldr	r3, [pc, #476]	; (8005238 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 800505a:	e000      	b.n	800505e <HAL_ADCEx_InjectedStart_IT+0x22>
 800505c:	4b77      	ldr	r3, [pc, #476]	; (800523c <HAL_ADCEx_InjectedStart_IT+0x200>)
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ff90 	bl	8004f84 <LL_ADC_GetMultimode>
 8005064:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff ffd2 	bl	8005014 <LL_ADC_INJ_IsConversionOngoing>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
 8005078:	e0d8      	b.n	800522c <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005084:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0c0      	b.n	800522c <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_ADCEx_InjectedStart_IT+0x7c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0b9      	b.n	800522c <HAL_ADCEx_InjectedStart_IT+0x1f0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fd47 	bl	8004b54 <ADC_Enable>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 80a8 	bne.w	8005222 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	f023 0208 	bic.w	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	661a      	str	r2, [r3, #96]	; 0x60
 80050ea:	e002      	b.n	80050f2 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a4a      	ldr	r2, [pc, #296]	; (8005234 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a4a      	ldr	r2, [pc, #296]	; (8005240 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d002      	beq.n	8005120 <HAL_ADCEx_InjectedStart_IT+0xe4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	e003      	b.n	8005128 <HAL_ADCEx_InjectedStart_IT+0xec>
 8005120:	4b48      	ldr	r3, [pc, #288]	; (8005244 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005122:	e001      	b.n	8005128 <HAL_ADCEx_InjectedStart_IT+0xec>
 8005124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	4293      	cmp	r3, r2
 800512e:	d002      	beq.n	8005136 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2260      	movs	r2, #96	; 0x60
 8005148:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800516e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d110      	bne.n	800519a <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0220 	bic.w	r2, r2, #32
 8005186:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005196:	605a      	str	r2, [r3, #4]
          break;
 8005198:	e010      	b.n	80051bc <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0220 	orr.w	r2, r2, #32
 80051b8:	605a      	str	r2, [r3, #4]
          break;
 80051ba:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d009      	beq.n	80051da <HAL_ADCEx_InjectedStart_IT+0x19e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d002      	beq.n	80051d6 <HAL_ADCEx_InjectedStart_IT+0x19a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	e003      	b.n	80051de <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80051d6:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80051d8:	e001      	b.n	80051de <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80051da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d008      	beq.n	80051f8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d002      	beq.n	80051f8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b07      	cmp	r3, #7
 80051f6:	d10d      	bne.n	8005214 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fe5f 	bl	8004ec0 <LL_ADC_INJ_GetTrigAuto>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d110      	bne.n	800522a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff feed 	bl	8004fec <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005212:	e00a      	b.n	800522a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005220:	e003      	b.n	800522a <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	50000100 	.word	0x50000100
 8005238:	50000300 	.word	0x50000300
 800523c:	50000700 	.word	0x50000700
 8005240:	50000500 	.word	0x50000500
 8005244:	50000400 	.word	0x50000400

08005248 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b0b6      	sub	sp, #216	; 0xd8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d102      	bne.n	80052d6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f000 bcfd 	b.w	8005cd0 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d130      	bne.n	8005350 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b09      	cmp	r3, #9
 80052f4:	d179      	bne.n	80053ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	0e9b      	lsrs	r3, r3, #26
 8005304:	025b      	lsls	r3, r3, #9
 8005306:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005312:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800531e:	e007      	b.n	8005330 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	0e9b      	lsrs	r3, r3, #26
 8005326:	025b      	lsls	r3, r3, #9
 8005328:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800532c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005336:	4b84      	ldr	r3, [pc, #528]	; (8005548 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005342:	430b      	orrs	r3, r1
 8005344:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800534c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800534e:	e04c      	b.n	80053ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11d      	bne.n	8005394 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800537c:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005388:	e004      	b.n	8005394 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	3b01      	subs	r3, #1
 8005390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	0e9b      	lsrs	r3, r3, #26
 800539a:	f003 021f 	and.w	r2, r3, #31
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b8:	1e5a      	subs	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053da:	4b5b      	ldr	r3, [pc, #364]	; (8005548 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80053dc:	4013      	ands	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	430b      	orrs	r3, r1
 80053e8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fe10 	bl	8005014 <LL_ADC_INJ_IsConversionOngoing>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d124      	bne.n	8005444 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005400:	2b00      	cmp	r3, #0
 8005402:	d112      	bne.n	800542a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005414:	055a      	lsls	r2, r3, #21
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800541c:	051b      	lsls	r3, r3, #20
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e00c      	b.n	8005444 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800543a:	055a      	lsls	r2, r3, #21
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fdbc 	bl	8004fc6 <LL_ADC_REG_IsConversionOngoing>
 800544e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fddc 	bl	8005014 <LL_ADC_INJ_IsConversionOngoing>
 800545c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005464:	2b00      	cmp	r3, #0
 8005466:	f040 822e 	bne.w	80058c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800546a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 8229 	bne.w	80058c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800548a:	2b01      	cmp	r3, #1
 800548c:	d108      	bne.n	80054a0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800549c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800549e:	e01f      	b.n	80054e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80054ae:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80054b0:	e016      	b.n	80054e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d109      	bne.n	80054d0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80054ce:	e007      	b.n	80054e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80054de:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d110      	bne.n	800550c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	430b      	orrs	r3, r1
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0202 	orr.w	r2, r2, #2
 8005508:	611a      	str	r2, [r3, #16]
 800550a:	e007      	b.n	800551c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0202 	bic.w	r2, r2, #2
 800551a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005524:	d112      	bne.n	800554c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	4619      	mov	r1, r3
 8005532:	f7ff fcd3 	bl	8004edc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fcab 	bl	8004e9a <LL_ADC_SetSamplingTimeCommonConfig>
 8005544:	e011      	b.n	800556a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8005546:	bf00      	nop
 8005548:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	461a      	mov	r2, r3
 800555a:	f7ff fcbf 	bl	8004edc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff fc98 	bl	8004e9a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695a      	ldr	r2, [r3, #20]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d022      	beq.n	80055d2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6919      	ldr	r1, [r3, #16]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800559c:	f7ff fbf2 	bl	8004d84 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6919      	ldr	r1, [r3, #16]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	461a      	mov	r2, r3
 80055ae:	f7ff fc3e 	bl	8004e2e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80055c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055c6:	e000      	b.n	80055ca <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80055c8:	2300      	movs	r3, #0
 80055ca:	461a      	mov	r2, r3
 80055cc:	f7ff fc4a 	bl	8004e64 <LL_ADC_SetOffsetSaturation>
 80055d0:	e179      	b.n	80058c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fbf7 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <HAL_ADCEx_InjectedConfigChannel+0x352>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fbec 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	0e9b      	lsrs	r3, r3, #26
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	e01e      	b.n	800563c <HAL_ADCEx_InjectedConfigChannel+0x390>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fbe1 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 800560a:	4603      	mov	r3, r0
 800560c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005614:	fa93 f3a3 	rbit	r3, r3
 8005618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800561c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005624:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 800562c:	2320      	movs	r3, #32
 800562e:	e004      	b.n	800563a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8005630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005634:	fab3 f383 	clz	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	0e9b      	lsrs	r3, r3, #26
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	e018      	b.n	8005686 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800566c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005670:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8005678:	2320      	movs	r3, #32
 800567a:	e004      	b.n	8005686 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800567c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005686:	429a      	cmp	r2, r3
 8005688:	d106      	bne.n	8005698 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fbb0 	bl	8004df8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fb94 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fb89 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	0e9b      	lsrs	r3, r3, #26
 80056be:	f003 021f 	and.w	r2, r3, #31
 80056c2:	e01e      	b.n	8005702 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fb7e 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056da:	fa93 f3a3 	rbit	r3, r3
 80056de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80056e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80056ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80056f2:	2320      	movs	r3, #32
 80056f4:	e004      	b.n	8005700 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80056f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056fa:	fab3 f383 	clz	r3, r3
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	0e9b      	lsrs	r3, r3, #26
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	e018      	b.n	800574c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005726:	fa93 f3a3 	rbit	r3, r3
 800572a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800572e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005732:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800573e:	2320      	movs	r3, #32
 8005740:	e004      	b.n	800574c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8005742:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800574c:	429a      	cmp	r2, r3
 800574e:	d106      	bne.n	800575e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fb4d 	bl	8004df8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fb31 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 800576a:	4603      	mov	r3, r0
 800576c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2102      	movs	r1, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fb26 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	0e9b      	lsrs	r3, r3, #26
 8005784:	f003 021f 	and.w	r2, r3, #31
 8005788:	e01e      	b.n	80057c8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2102      	movs	r1, #2
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fb1b 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 8005796:	4603      	mov	r3, r0
 8005798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80057a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80057b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80057b8:	2320      	movs	r3, #32
 80057ba:	e004      	b.n	80057c6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80057bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0e9b      	lsrs	r3, r3, #26
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	e014      	b.n	800580a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057e8:	fa93 f3a3 	rbit	r3, r3
 80057ec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80057ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80057f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80057fc:	2320      	movs	r3, #32
 80057fe:	e004      	b.n	800580a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005804:	fab3 f383 	clz	r3, r3
 8005808:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800580a:	429a      	cmp	r2, r3
 800580c:	d106      	bne.n	800581c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	2102      	movs	r1, #2
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff faee 	bl	8004df8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2103      	movs	r1, #3
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fad2 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 8005828:	4603      	mov	r3, r0
 800582a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2103      	movs	r1, #3
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fac7 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 800583e:	4603      	mov	r3, r0
 8005840:	0e9b      	lsrs	r3, r3, #26
 8005842:	f003 021f 	and.w	r2, r3, #31
 8005846:	e017      	b.n	8005878 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2103      	movs	r1, #3
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fabc 	bl	8004dcc <LL_ADC_GetOffsetChannel>
 8005854:	4603      	mov	r3, r0
 8005856:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800585a:	fa93 f3a3 	rbit	r3, r3
 800585e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005862:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800586a:	2320      	movs	r3, #32
 800586c:	e003      	b.n	8005876 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800586e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005870:	fab3 f383 	clz	r3, r3
 8005874:	b2db      	uxtb	r3, r3
 8005876:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	0e9b      	lsrs	r3, r3, #26
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	e011      	b.n	80058b4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005898:	fa93 f3a3 	rbit	r3, r3
 800589c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800589e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80058a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80058a8:	2320      	movs	r3, #32
 80058aa:	e003      	b.n	80058b4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80058ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ae:	fab3 f383 	clz	r3, r3
 80058b2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d106      	bne.n	80058c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2200      	movs	r2, #0
 80058be:	2103      	movs	r1, #3
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fa99 	bl	8004df8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fb68 	bl	8004fa0 <LL_ADC_IsEnabled>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 813d 	bne.w	8005b52 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	461a      	mov	r2, r3
 80058e6:	f7ff fb25 	bl	8004f34 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	4aa2      	ldr	r2, [pc, #648]	; (8005b78 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	f040 812e 	bne.w	8005b52 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	0e9b      	lsrs	r3, r3, #26
 800590c:	3301      	adds	r3, #1
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b09      	cmp	r3, #9
 8005914:	bf94      	ite	ls
 8005916:	2301      	movls	r3, #1
 8005918:	2300      	movhi	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	e019      	b.n	8005952 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800592c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005936:	2320      	movs	r3, #32
 8005938:	e003      	b.n	8005942 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800593a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800593c:	fab3 f383 	clz	r3, r3
 8005940:	b2db      	uxtb	r3, r3
 8005942:	3301      	adds	r3, #1
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2b09      	cmp	r3, #9
 800594a:	bf94      	ite	ls
 800594c:	2301      	movls	r3, #1
 800594e:	2300      	movhi	r3, #0
 8005950:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005952:	2b00      	cmp	r3, #0
 8005954:	d079      	beq.n	8005a4a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	0e9b      	lsrs	r3, r3, #26
 8005968:	3301      	adds	r3, #1
 800596a:	069b      	lsls	r3, r3, #26
 800596c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005970:	e015      	b.n	800599e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005982:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800598a:	2320      	movs	r3, #32
 800598c:	e003      	b.n	8005996 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800598e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	3301      	adds	r3, #1
 8005998:	069b      	lsls	r3, r3, #26
 800599a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <HAL_ADCEx_InjectedConfigChannel+0x712>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	0e9b      	lsrs	r3, r3, #26
 80059b0:	3301      	adds	r3, #1
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2101      	movs	r1, #1
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	e017      	b.n	80059ee <HAL_ADCEx_InjectedConfigChannel+0x742>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80059d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80059d6:	2320      	movs	r3, #32
 80059d8:	e003      	b.n	80059e2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80059da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059dc:	fab3 f383 	clz	r3, r3
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	3301      	adds	r3, #1
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	2101      	movs	r1, #1
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	ea42 0103 	orr.w	r1, r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	0e9b      	lsrs	r3, r3, #26
 8005a04:	3301      	adds	r3, #1
 8005a06:	f003 021f 	and.w	r2, r3, #31
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	051b      	lsls	r3, r3, #20
 8005a12:	e018      	b.n	8005a46 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	e003      	b.n	8005a38 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a32:	fab3 f383 	clz	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f003 021f 	and.w	r2, r3, #31
 8005a3e:	4613      	mov	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4413      	add	r3, r2
 8005a44:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a46:	430b      	orrs	r3, r1
 8005a48:	e07e      	b.n	8005b48 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d107      	bne.n	8005a66 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	0e9b      	lsrs	r3, r3, #26
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	069b      	lsls	r3, r3, #26
 8005a60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a64:	e015      	b.n	8005a92 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8005a7e:	2320      	movs	r3, #32
 8005a80:	e003      	b.n	8005a8a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	fab3 f383 	clz	r3, r3
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	069b      	lsls	r3, r3, #26
 8005a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	0e9b      	lsrs	r3, r3, #26
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	e017      	b.n	8005ae2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	fa93 f3a3 	rbit	r3, r3
 8005abe:	61bb      	str	r3, [r7, #24]
  return result;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8005aca:	2320      	movs	r3, #32
 8005acc:	e003      	b.n	8005ad6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	fab3 f383 	clz	r3, r3
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	2101      	movs	r1, #1
 8005ade:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae2:	ea42 0103 	orr.w	r1, r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10d      	bne.n	8005b0e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	0e9b      	lsrs	r3, r3, #26
 8005af8:	3301      	adds	r3, #1
 8005afa:	f003 021f 	and.w	r2, r3, #31
 8005afe:	4613      	mov	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	3b1e      	subs	r3, #30
 8005b06:	051b      	lsls	r3, r3, #20
 8005b08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b0c:	e01b      	b.n	8005b46 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	fa93 f3a3 	rbit	r3, r3
 8005b1a:	60fb      	str	r3, [r7, #12]
  return result;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8005b26:	2320      	movs	r3, #32
 8005b28:	e003      	b.n	8005b32 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	3301      	adds	r3, #1
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	4613      	mov	r3, r2
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3b1e      	subs	r3, #30
 8005b40:	051b      	lsls	r3, r3, #20
 8005b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b46:	430b      	orrs	r3, r1
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	6892      	ldr	r2, [r2, #8]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	f7ff f9c5 	bl	8004edc <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80b2 	beq.w	8005cc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b68:	d004      	beq.n	8005b74 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d109      	bne.n	8005b88 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8005b76:	e008      	b.n	8005b8a <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8005b78:	407f0000 	.word	0x407f0000
 8005b7c:	80080000 	.word	0x80080000
 8005b80:	50000100 	.word	0x50000100
 8005b84:	50000300 	.word	0x50000300
 8005b88:	4b53      	ldr	r3, [pc, #332]	; (8005cd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff f8eb 	bl	8004d66 <LL_ADC_GetCommonPathInternalCh>
 8005b90:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a50      	ldr	r2, [pc, #320]	; (8005cdc <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a4f      	ldr	r2, [pc, #316]	; (8005ce0 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d139      	bne.n	8005c1c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d133      	bne.n	8005c1c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bbc:	d004      	beq.n	8005bc8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a48      	ldr	r2, [pc, #288]	; (8005ce4 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d17a      	bne.n	8005cbe <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd0:	d004      	beq.n	8005bdc <HAL_ADCEx_InjectedConfigChannel+0x930>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a44      	ldr	r2, [pc, #272]	; (8005ce8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8005bdc:	4a43      	ldr	r2, [pc, #268]	; (8005cec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005bde:	e000      	b.n	8005be2 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8005be0:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005be6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7ff f8a7 	bl	8004d40 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005bf2:	4b3f      	ldr	r3, [pc, #252]	; (8005cf0 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	4a3e      	ldr	r2, [pc, #248]	; (8005cf4 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	099a      	lsrs	r2, r3, #6
 8005c00:	4613      	mov	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	3318      	adds	r3, #24
 8005c0a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005c0c:	e002      	b.n	8005c14 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f9      	bne.n	8005c0e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c1a:	e050      	b.n	8005cbe <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a35      	ldr	r2, [pc, #212]	; (8005cf8 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d125      	bne.n	8005c72 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d11f      	bne.n	8005c72 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d104      	bne.n	8005c46 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2e      	ldr	r2, [pc, #184]	; (8005cfc <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d03d      	beq.n	8005cc2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c4e:	d004      	beq.n	8005c5a <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8005c5a:	4a24      	ldr	r2, [pc, #144]	; (8005cec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005c5c:	e000      	b.n	8005c60 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8005c5e:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f7ff f868 	bl	8004d40 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c70:	e027      	b.n	8005cc2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d123      	bne.n	8005cc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11d      	bne.n	8005cc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c9a:	d004      	beq.n	8005ca6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a11      	ldr	r2, [pc, #68]	; (8005ce8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d101      	bne.n	8005caa <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8005ca6:	4a11      	ldr	r2, [pc, #68]	; (8005cec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005ca8:	e000      	b.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8005caa:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7ff f842 	bl	8004d40 <LL_ADC_SetCommonPathInternalCh>
 8005cbc:	e002      	b.n	8005cc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cc2:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ccc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	37d8      	adds	r7, #216	; 0xd8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	50000700 	.word	0x50000700
 8005cdc:	c3210000 	.word	0xc3210000
 8005ce0:	90c00010 	.word	0x90c00010
 8005ce4:	50000600 	.word	0x50000600
 8005ce8:	50000100 	.word	0x50000100
 8005cec:	50000300 	.word	0x50000300
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	053e2d63 	.word	0x053e2d63
 8005cf8:	c7520000 	.word	0xc7520000
 8005cfc:	50000500 	.word	0x50000500
 8005d00:	cb840000 	.word	0xcb840000

08005d04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b0a1      	sub	sp, #132	; 0x84
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e0e7      	b.n	8005ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d3a:	d102      	bne.n	8005d42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005d3c:	4b6f      	ldr	r3, [pc, #444]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	e009      	b.n	8005d56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a6e      	ldr	r2, [pc, #440]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d102      	bne.n	8005d52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005d4c:	4b6d      	ldr	r3, [pc, #436]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005d4e:	60bb      	str	r3, [r7, #8]
 8005d50:	e001      	b.n	8005d56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0be      	b.n	8005ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff f925 	bl	8004fc6 <LL_ADC_REG_IsConversionOngoing>
 8005d7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff f91f 	bl	8004fc6 <LL_ADC_REG_IsConversionOngoing>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 80a0 	bne.w	8005ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f040 809c 	bne.w	8005ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da0:	d004      	beq.n	8005dac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a55      	ldr	r2, [pc, #340]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d101      	bne.n	8005db0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005dac:	4b56      	ldr	r3, [pc, #344]	; (8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005dae:	e000      	b.n	8005db2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005db0:	4b56      	ldr	r3, [pc, #344]	; (8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005db2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d04b      	beq.n	8005e54 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dce:	035b      	lsls	r3, r3, #13
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005de0:	d004      	beq.n	8005dec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a45      	ldr	r2, [pc, #276]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d10f      	bne.n	8005e0c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005dec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005df0:	f7ff f8d6 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005df4:	4604      	mov	r4, r0
 8005df6:	4841      	ldr	r0, [pc, #260]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005df8:	f7ff f8d2 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4323      	orrs	r3, r4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e012      	b.n	8005e32 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005e0c:	483c      	ldr	r0, [pc, #240]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e0e:	f7ff f8c7 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005e12:	4604      	mov	r4, r0
 8005e14:	483b      	ldr	r0, [pc, #236]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e16:	f7ff f8c3 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	431c      	orrs	r4, r3
 8005e1e:	483c      	ldr	r0, [pc, #240]	; (8005f10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005e20:	f7ff f8be 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005e24:	4603      	mov	r3, r0
 8005e26:	4323      	orrs	r3, r4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d056      	beq.n	8005ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e3e:	f023 030f 	bic.w	r3, r3, #15
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	6811      	ldr	r1, [r2, #0]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	6892      	ldr	r2, [r2, #8]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e52:	e047      	b.n	8005ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e68:	d004      	beq.n	8005e74 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a23      	ldr	r2, [pc, #140]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d10f      	bne.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005e74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005e78:	f7ff f892 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	481f      	ldr	r0, [pc, #124]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e80:	f7ff f88e 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005e84:	4603      	mov	r3, r0
 8005e86:	4323      	orrs	r3, r4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e012      	b.n	8005eba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005e94:	481a      	ldr	r0, [pc, #104]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e96:	f7ff f883 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4819      	ldr	r0, [pc, #100]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e9e:	f7ff f87f 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	431c      	orrs	r4, r3
 8005ea6:	481a      	ldr	r0, [pc, #104]	; (8005f10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ea8:	f7ff f87a 	bl	8004fa0 <LL_ADC_IsEnabled>
 8005eac:	4603      	mov	r3, r0
 8005eae:	4323      	orrs	r3, r4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d012      	beq.n	8005ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ec6:	f023 030f 	bic.w	r3, r3, #15
 8005eca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ecc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ece:	e009      	b.n	8005ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005ee2:	e000      	b.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ee4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005eee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3784      	adds	r7, #132	; 0x84
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd90      	pop	{r4, r7, pc}
 8005efa:	bf00      	nop
 8005efc:	50000100 	.word	0x50000100
 8005f00:	50000400 	.word	0x50000400
 8005f04:	50000500 	.word	0x50000500
 8005f08:	50000300 	.word	0x50000300
 8005f0c:	50000700 	.word	0x50000700
 8005f10:	50000600 	.word	0x50000600

08005f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f30:	4013      	ands	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f46:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	60d3      	str	r3, [r2, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <__NVIC_GetPriorityGrouping+0x18>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f003 0307 	and.w	r3, r3, #7
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db0b      	blt.n	8005fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	f003 021f 	and.w	r2, r3, #31
 8005f90:	4907      	ldr	r1, [pc, #28]	; (8005fb0 <__NVIC_EnableIRQ+0x38>)
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2001      	movs	r0, #1
 8005f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e100 	.word	0xe000e100

08005fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db0a      	blt.n	8005fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	490c      	ldr	r1, [pc, #48]	; (8006000 <__NVIC_SetPriority+0x4c>)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fdc:	e00a      	b.n	8005ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4908      	ldr	r1, [pc, #32]	; (8006004 <__NVIC_SetPriority+0x50>)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	3b04      	subs	r3, #4
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	761a      	strb	r2, [r3, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	e000e100 	.word	0xe000e100
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	; 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf28      	it	cs
 8006026:	2304      	movcs	r3, #4
 8006028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3304      	adds	r3, #4
 800602e:	2b06      	cmp	r3, #6
 8006030:	d902      	bls.n	8006038 <NVIC_EncodePriority+0x30>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3b03      	subs	r3, #3
 8006036:	e000      	b.n	800603a <NVIC_EncodePriority+0x32>
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	401a      	ands	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006050:	f04f 31ff 	mov.w	r1, #4294967295
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	43d9      	mvns	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006060:	4313      	orrs	r3, r2
         );
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	; 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3b01      	subs	r3, #1
 800607c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006080:	d301      	bcc.n	8006086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006082:	2301      	movs	r3, #1
 8006084:	e00f      	b.n	80060a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <SysTick_Config+0x40>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3b01      	subs	r3, #1
 800608c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800608e:	210f      	movs	r1, #15
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	f7ff ff8e 	bl	8005fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <SysTick_Config+0x40>)
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800609e:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <SysTick_Config+0x40>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	e000e010 	.word	0xe000e010

080060b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff29 	bl	8005f14 <__NVIC_SetPriorityGrouping>
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	4603      	mov	r3, r0
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060d8:	f7ff ff40 	bl	8005f5c <__NVIC_GetPriorityGrouping>
 80060dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	6978      	ldr	r0, [r7, #20]
 80060e4:	f7ff ff90 	bl	8006008 <NVIC_EncodePriority>
 80060e8:	4602      	mov	r2, r0
 80060ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff ff5f 	bl	8005fb4 <__NVIC_SetPriority>
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	4603      	mov	r3, r0
 8006106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff33 	bl	8005f78 <__NVIC_EnableIRQ>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ffa4 	bl	8006070 <SysTick_Config>
 8006128:	4603      	mov	r3, r0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e014      	b.n	800616e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	791b      	ldrb	r3, [r3, #4]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fc fd59 	bl	8002c0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	795b      	ldrb	r3, [r3, #5]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_DAC_Start+0x16>
 8006188:	2302      	movs	r3, #2
 800618a:	e043      	b.n	8006214 <HAL_DAC_Start+0x9e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6819      	ldr	r1, [r3, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2201      	movs	r2, #1
 80061a6:	409a      	lsls	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80061b0:	2001      	movs	r0, #1
 80061b2:	f7fd f90b 	bl	80033cc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10f      	bne.n	80061dc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d11d      	bne.n	8006206 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	605a      	str	r2, [r3, #4]
 80061da:	e014      	b.n	8006206 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2102      	movs	r1, #2
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d107      	bne.n	8006206 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0202 	orr.w	r2, r2, #2
 8006204:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	3308      	adds	r3, #8
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e004      	b.n	8006256 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	3314      	adds	r3, #20
 8006254:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	461a      	mov	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	795b      	ldrb	r3, [r3, #5]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_DAC_ConfigChannel+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e192      	b.n	80065aa <HAL_DAC_ConfigChannel+0x33e>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2202      	movs	r2, #2
 800628e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d174      	bne.n	8006382 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006298:	f7fd f88c 	bl	80033b4 <HAL_GetTick>
 800629c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d134      	bne.n	800630e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062a4:	e011      	b.n	80062ca <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062a6:	f7fd f885 	bl	80033b4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d90a      	bls.n	80062ca <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f043 0208 	orr.w	r2, r3, #8
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2203      	movs	r2, #3
 80062c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e16f      	b.n	80065aa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80062d8:	2001      	movs	r0, #1
 80062da:	f7fd f877 	bl	80033cc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
 80062e8:	e01e      	b.n	8006328 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062ea:	f7fd f863 	bl	80033b4 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d90a      	bls.n	800630e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f043 0208 	orr.w	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2203      	movs	r2, #3
 8006308:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e14d      	b.n	80065aa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006314:	2b00      	cmp	r3, #0
 8006316:	dbe8      	blt.n	80062ea <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006318:	2001      	movs	r0, #1
 800631a:	f7fd f857 	bl	80033cc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006326:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	ea02 0103 	and.w	r1, r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	409a      	lsls	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	21ff      	movs	r1, #255	; 0xff
 8006364:	fa01 f303 	lsl.w	r3, r1, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	ea02 0103 	and.w	r1, r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	409a      	lsls	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d11d      	bne.n	80063c6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	221f      	movs	r2, #31
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	43db      	mvns	r3, r3
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	4013      	ands	r3, r2
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	4313      	orrs	r3, r2
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2207      	movs	r2, #7
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43db      	mvns	r3, r3
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	4013      	ands	r3, r2
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d102      	bne.n	80063f0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	e00f      	b.n	8006410 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d102      	bne.n	80063fe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063f8:	2301      	movs	r3, #1
 80063fa:	623b      	str	r3, [r7, #32]
 80063fc:	e008      	b.n	8006410 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006406:	2301      	movs	r3, #1
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	e001      	b.n	8006410 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800640c:	2300      	movs	r3, #0
 800640e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	6a3a      	ldr	r2, [r7, #32]
 800641c:	4313      	orrs	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	4013      	ands	r3, r2
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	791b      	ldrb	r3, [r3, #4]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d102      	bne.n	8006444 <HAL_DAC_ConfigChannel+0x1d8>
 800643e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006442:	e000      	b.n	8006446 <HAL_DAC_ConfigChannel+0x1da>
 8006444:	2300      	movs	r3, #0
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4313      	orrs	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645e:	4013      	ands	r3, r2
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	795b      	ldrb	r3, [r3, #5]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d102      	bne.n	8006470 <HAL_DAC_ConfigChannel+0x204>
 800646a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646e:	e000      	b.n	8006472 <HAL_DAC_ConfigChannel+0x206>
 8006470:	2300      	movs	r3, #0
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4313      	orrs	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d114      	bne.n	80064b2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006488:	f001 fa64 	bl	8007954 <HAL_RCC_GetHCLKFreq>
 800648c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4a48      	ldr	r2, [pc, #288]	; (80065b4 <HAL_DAC_ConfigChannel+0x348>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d904      	bls.n	80064a0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	e00f      	b.n	80064c0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	4a45      	ldr	r2, [pc, #276]	; (80065b8 <HAL_DAC_ConfigChannel+0x34c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d90a      	bls.n	80064be <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
 80064b0:	e006      	b.n	80064c0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b8:	4313      	orrs	r3, r2
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
 80064bc:	e000      	b.n	80064c0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80064be:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	4313      	orrs	r3, r2
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	43da      	mvns	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	400a      	ands	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	f640 72fe 	movw	r2, #4094	; 0xffe
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43db      	mvns	r3, r3
 8006510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006512:	4013      	ands	r3, r2
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	4313      	orrs	r3, r2
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	22c0      	movs	r2, #192	; 0xc0
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43da      	mvns	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	400a      	ands	r2, r1
 8006550:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	089b      	lsrs	r3, r3, #2
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	ea02 0103 	and.w	r1, r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	409a      	lsls	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3728      	adds	r7, #40	; 0x28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	09896800 	.word	0x09896800
 80065b8:	04c4b400 	.word	0x04c4b400

080065bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e08d      	b.n	80066ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <HAL_DMA_Init+0x138>)
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d80f      	bhi.n	80065fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	4b45      	ldr	r3, [pc, #276]	; (80066f8 <HAL_DMA_Init+0x13c>)
 80065e2:	4413      	add	r3, r2
 80065e4:	4a45      	ldr	r2, [pc, #276]	; (80066fc <HAL_DMA_Init+0x140>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	009a      	lsls	r2, r3, #2
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a42      	ldr	r2, [pc, #264]	; (8006700 <HAL_DMA_Init+0x144>)
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40
 80065f8:	e00e      	b.n	8006618 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	4b40      	ldr	r3, [pc, #256]	; (8006704 <HAL_DMA_Init+0x148>)
 8006602:	4413      	add	r3, r2
 8006604:	4a3d      	ldr	r2, [pc, #244]	; (80066fc <HAL_DMA_Init+0x140>)
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	009a      	lsls	r2, r3, #2
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a3c      	ldr	r2, [pc, #240]	; (8006708 <HAL_DMA_Init+0x14c>)
 8006616:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800663c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9b6 	bl	80069dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006678:	d102      	bne.n	8006680 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006694:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d010      	beq.n	80066c0 <HAL_DMA_Init+0x104>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d80c      	bhi.n	80066c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9d6 	bl	8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066bc:	605a      	str	r2, [r3, #4]
 80066be:	e008      	b.n	80066d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40020407 	.word	0x40020407
 80066f8:	bffdfff8 	.word	0xbffdfff8
 80066fc:	cccccccd 	.word	0xcccccccd
 8006700:	40020000 	.word	0x40020000
 8006704:	bffdfbf8 	.word	0xbffdfbf8
 8006708:	40020400 	.word	0x40020400

0800670c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_DMA_Start_IT+0x20>
 8006728:	2302      	movs	r3, #2
 800672a:	e066      	b.n	80067fa <HAL_DMA_Start_IT+0xee>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d155      	bne.n	80067ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f8fb 	bl	8006960 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 020e 	orr.w	r2, r2, #14
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e00f      	b.n	80067a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0204 	bic.w	r2, r2, #4
 8006792:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 020a 	orr.w	r2, r2, #10
 80067a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e005      	b.n	80067f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
 80067f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2204      	movs	r2, #4
 8006824:	409a      	lsls	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d026      	beq.n	800687c <HAL_DMA_IRQHandler+0x7a>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d021      	beq.n	800687c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0204 	bic.w	r2, r2, #4
 8006854:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	f003 021f 	and.w	r2, r3, #31
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2104      	movs	r1, #4
 8006864:	fa01 f202 	lsl.w	r2, r1, r2
 8006868:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	2b00      	cmp	r3, #0
 8006870:	d071      	beq.n	8006956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800687a:	e06c      	b.n	8006956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	2202      	movs	r2, #2
 8006886:	409a      	lsls	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d02e      	beq.n	80068ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d029      	beq.n	80068ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 020a 	bic.w	r2, r2, #10
 80068b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c4:	f003 021f 	and.w	r2, r3, #31
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	2102      	movs	r1, #2
 80068ce:	fa01 f202 	lsl.w	r2, r1, r2
 80068d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d038      	beq.n	8006956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80068ec:	e033      	b.n	8006956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	2208      	movs	r2, #8
 80068f8:	409a      	lsls	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d02a      	beq.n	8006958 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d025      	beq.n	8006958 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 020e 	bic.w	r2, r2, #14
 800691a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006920:	f003 021f 	and.w	r2, r3, #31
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	2101      	movs	r1, #1
 800692a:	fa01 f202 	lsl.w	r2, r1, r2
 800692e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006956:	bf00      	nop
 8006958:	bf00      	nop
}
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006976:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	f003 021f 	and.w	r2, r3, #31
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	2101      	movs	r1, #1
 8006998:	fa01 f202 	lsl.w	r2, r1, r2
 800699c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d108      	bne.n	80069c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069be:	e007      	b.n	80069d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	60da      	str	r2, [r3, #12]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d802      	bhi.n	80069f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80069f0:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e001      	b.n	80069fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80069f6:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80069f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	3b08      	subs	r3, #8
 8006a06:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a14:	089b      	lsrs	r3, r3, #2
 8006a16:	009a      	lsls	r2, r3, #2
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a0b      	ldr	r2, [pc, #44]	; (8006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006a26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	2201      	movs	r2, #1
 8006a30:	409a      	lsls	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40020407 	.word	0x40020407
 8006a48:	40020800 	.word	0x40020800
 8006a4c:	40020820 	.word	0x40020820
 8006a50:	cccccccd 	.word	0xcccccccd
 8006a54:	40020880 	.word	0x40020880

08006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	461a      	mov	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a08      	ldr	r2, [pc, #32]	; (8006a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a7a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2201      	movs	r2, #1
 8006a86:	409a      	lsls	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	1000823f 	.word	0x1000823f
 8006a9c:	40020940 	.word	0x40020940

08006aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006aae:	e15a      	b.n	8006d66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8006abc:	4013      	ands	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 814c 	beq.w	8006d60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d005      	beq.n	8006ae0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d130      	bne.n	8006b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	2203      	movs	r2, #3
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4013      	ands	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b16:	2201      	movs	r2, #1
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4013      	ands	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	091b      	lsrs	r3, r3, #4
 8006b2c:	f003 0201 	and.w	r2, r3, #1
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d017      	beq.n	8006b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	2203      	movs	r2, #3
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4013      	ands	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d123      	bne.n	8006bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	08da      	lsrs	r2, r3, #3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3208      	adds	r2, #8
 8006b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	220f      	movs	r2, #15
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4013      	ands	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	08da      	lsrs	r2, r3, #3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3208      	adds	r2, #8
 8006bcc:	6939      	ldr	r1, [r7, #16]
 8006bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	2203      	movs	r2, #3
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	43db      	mvns	r3, r3
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4013      	ands	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 0203 	and.w	r2, r3, #3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80a6 	beq.w	8006d60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c14:	4b5b      	ldr	r3, [pc, #364]	; (8006d84 <HAL_GPIO_Init+0x2e4>)
 8006c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c18:	4a5a      	ldr	r2, [pc, #360]	; (8006d84 <HAL_GPIO_Init+0x2e4>)
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8006c20:	4b58      	ldr	r3, [pc, #352]	; (8006d84 <HAL_GPIO_Init+0x2e4>)
 8006c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c2c:	4a56      	ldr	r2, [pc, #344]	; (8006d88 <HAL_GPIO_Init+0x2e8>)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	089b      	lsrs	r3, r3, #2
 8006c32:	3302      	adds	r3, #2
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	220f      	movs	r2, #15
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c56:	d01f      	beq.n	8006c98 <HAL_GPIO_Init+0x1f8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a4c      	ldr	r2, [pc, #304]	; (8006d8c <HAL_GPIO_Init+0x2ec>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d019      	beq.n	8006c94 <HAL_GPIO_Init+0x1f4>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a4b      	ldr	r2, [pc, #300]	; (8006d90 <HAL_GPIO_Init+0x2f0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_GPIO_Init+0x1f0>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a4a      	ldr	r2, [pc, #296]	; (8006d94 <HAL_GPIO_Init+0x2f4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00d      	beq.n	8006c8c <HAL_GPIO_Init+0x1ec>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a49      	ldr	r2, [pc, #292]	; (8006d98 <HAL_GPIO_Init+0x2f8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <HAL_GPIO_Init+0x1e8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a48      	ldr	r2, [pc, #288]	; (8006d9c <HAL_GPIO_Init+0x2fc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d101      	bne.n	8006c84 <HAL_GPIO_Init+0x1e4>
 8006c80:	2305      	movs	r3, #5
 8006c82:	e00a      	b.n	8006c9a <HAL_GPIO_Init+0x1fa>
 8006c84:	2306      	movs	r3, #6
 8006c86:	e008      	b.n	8006c9a <HAL_GPIO_Init+0x1fa>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	e006      	b.n	8006c9a <HAL_GPIO_Init+0x1fa>
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e004      	b.n	8006c9a <HAL_GPIO_Init+0x1fa>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e002      	b.n	8006c9a <HAL_GPIO_Init+0x1fa>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <HAL_GPIO_Init+0x1fa>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	f002 0203 	and.w	r2, r2, #3
 8006ca0:	0092      	lsls	r2, r2, #2
 8006ca2:	4093      	lsls	r3, r2
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006caa:	4937      	ldr	r1, [pc, #220]	; (8006d88 <HAL_GPIO_Init+0x2e8>)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cb8:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006cdc:	4a30      	ldr	r2, [pc, #192]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	43db      	mvns	r3, r3
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d06:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006d0c:	4b24      	ldr	r3, [pc, #144]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	43db      	mvns	r3, r3
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d30:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4013      	ands	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d5a:	4a11      	ldr	r2, [pc, #68]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	3301      	adds	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f47f ae9d 	bne.w	8006ab0 <HAL_GPIO_Init+0x10>
  }
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40021000 	.word	0x40021000
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	48000400 	.word	0x48000400
 8006d90:	48000800 	.word	0x48000800
 8006d94:	48000c00 	.word	0x48000c00
 8006d98:	48001000 	.word	0x48001000
 8006d9c:	48001400 	.word	0x48001400
 8006da0:	40010400 	.word	0x40010400

08006da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	887b      	ldrh	r3, [r7, #2]
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	73fb      	strb	r3, [r7, #15]
 8006dc0:	e001      	b.n	8006dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	807b      	strh	r3, [r7, #2]
 8006de0:	4613      	mov	r3, r2
 8006de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006de4:	787b      	ldrb	r3, [r7, #1]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006df0:	e002      	b.n	8006df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e16:	887a      	ldrh	r2, [r7, #2]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	041a      	lsls	r2, r3, #16
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	43d9      	mvns	r1, r3
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	400b      	ands	r3, r1
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	619a      	str	r2, [r3, #24]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e42:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e44:	695a      	ldr	r2, [r3, #20]
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d006      	beq.n	8006e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e4e:	4a05      	ldr	r2, [pc, #20]	; (8006e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f806 	bl	8006e68 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40010400 	.word	0x40010400

08006e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d141      	bne.n	8006f12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e8e:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9a:	d131      	bne.n	8006f00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e9c:	4b47      	ldr	r3, [pc, #284]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea2:	4a46      	ldr	r2, [pc, #280]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006eac:	4b43      	ldr	r3, [pc, #268]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eb4:	4a41      	ldr	r2, [pc, #260]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ebc:	4b40      	ldr	r3, [pc, #256]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2232      	movs	r2, #50	; 0x32
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	4a3f      	ldr	r2, [pc, #252]	; (8006fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ecc:	0c9b      	lsrs	r3, r3, #18
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed2:	e002      	b.n	8006eda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eda:	4b38      	ldr	r3, [pc, #224]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee6:	d102      	bne.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f2      	bne.n	8006ed4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eee:	4b33      	ldr	r3, [pc, #204]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efa:	d158      	bne.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e057      	b.n	8006fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f00:	4b2e      	ldr	r3, [pc, #184]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f06:	4a2d      	ldr	r2, [pc, #180]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f10:	e04d      	b.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f18:	d141      	bne.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f1a:	4b28      	ldr	r3, [pc, #160]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f26:	d131      	bne.n	8006f8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f28:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f2e:	4a23      	ldr	r2, [pc, #140]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f38:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f40:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f48:	4b1d      	ldr	r3, [pc, #116]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2232      	movs	r2, #50	; 0x32
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
 8006f52:	4a1c      	ldr	r2, [pc, #112]	; (8006fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	0c9b      	lsrs	r3, r3, #18
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f5e:	e002      	b.n	8006f66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f66:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f72:	d102      	bne.n	8006f7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f2      	bne.n	8006f60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f7a:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f86:	d112      	bne.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e011      	b.n	8006fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f92:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f9c:	e007      	b.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006fa6:	4a05      	ldr	r2, [pc, #20]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	40007000 	.word	0x40007000
 8006fc0:	20000000 	.word	0x20000000
 8006fc4:	431bde83 	.word	0x431bde83

08006fc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd6:	6093      	str	r3, [r2, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40007000 	.word	0x40007000

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e306      	b.n	8007608 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d075      	beq.n	80070f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007006:	4b97      	ldr	r3, [pc, #604]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007010:	4b94      	ldr	r3, [pc, #592]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b0c      	cmp	r3, #12
 800701e:	d102      	bne.n	8007026 <HAL_RCC_OscConfig+0x3e>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d002      	beq.n	800702c <HAL_RCC_OscConfig+0x44>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b08      	cmp	r3, #8
 800702a:	d10b      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	4b8d      	ldr	r3, [pc, #564]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05b      	beq.n	80070f0 <HAL_RCC_OscConfig+0x108>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d157      	bne.n	80070f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e2e1      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704c:	d106      	bne.n	800705c <HAL_RCC_OscConfig+0x74>
 800704e:	4b85      	ldr	r3, [pc, #532]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a84      	ldr	r2, [pc, #528]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	e01d      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x98>
 8007066:	4b7f      	ldr	r3, [pc, #508]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a7e      	ldr	r2, [pc, #504]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800706c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b7c      	ldr	r3, [pc, #496]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a7b      	ldr	r2, [pc, #492]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e00b      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 8007080:	4b78      	ldr	r3, [pc, #480]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a77      	ldr	r2, [pc, #476]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b75      	ldr	r3, [pc, #468]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a74      	ldr	r2, [pc, #464]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fc f988 	bl	80033b4 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fc f984 	bl	80033b4 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e2a6      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ba:	4b6a      	ldr	r3, [pc, #424]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0xc0>
 80070c6:	e014      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fc f974 	bl	80033b4 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fc f970 	bl	80033b4 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e292      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070e2:	4b60      	ldr	r3, [pc, #384]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0xe8>
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d075      	beq.n	80071ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070fe:	4b59      	ldr	r3, [pc, #356]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007108:	4b56      	ldr	r3, [pc, #344]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d102      	bne.n	800711e <HAL_RCC_OscConfig+0x136>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d002      	beq.n	8007124 <HAL_RCC_OscConfig+0x13c>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b04      	cmp	r3, #4
 8007122:	d11f      	bne.n	8007164 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007124:	4b4f      	ldr	r3, [pc, #316]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCC_OscConfig+0x154>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e265      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713c:	4b49      	ldr	r3, [pc, #292]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	061b      	lsls	r3, r3, #24
 800714a:	4946      	ldr	r1, [pc, #280]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800714c:	4313      	orrs	r3, r2
 800714e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007150:	4b45      	ldr	r3, [pc, #276]	; (8007268 <HAL_RCC_OscConfig+0x280>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f7fc f8e1 	bl	800331c <HAL_InitTick>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d043      	beq.n	80071e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e251      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d023      	beq.n	80071b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800716c:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fc f91c 	bl	80033b4 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007180:	f7fc f918 	bl	80033b4 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e23a      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007192:	4b34      	ldr	r3, [pc, #208]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0f0      	beq.n	8007180 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719e:	4b31      	ldr	r3, [pc, #196]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	492d      	ldr	r1, [pc, #180]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]
 80071b2:	e01a      	b.n	80071ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b4:	4b2b      	ldr	r3, [pc, #172]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c0:	f7fc f8f8 	bl	80033b4 <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c8:	f7fc f8f4 	bl	80033b4 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e216      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071da:	4b22      	ldr	r3, [pc, #136]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <HAL_RCC_OscConfig+0x1e0>
 80071e6:	e000      	b.n	80071ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d041      	beq.n	800727a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01c      	beq.n	8007238 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071fe:	4b19      	ldr	r3, [pc, #100]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007204:	4a17      	ldr	r2, [pc, #92]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720e:	f7fc f8d1 	bl	80033b4 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007216:	f7fc f8cd 	bl	80033b4 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e1ef      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007228:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800722a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0ef      	beq.n	8007216 <HAL_RCC_OscConfig+0x22e>
 8007236:	e020      	b.n	800727a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007238:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800723a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007248:	f7fc f8b4 	bl	80033b4 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800724e:	e00d      	b.n	800726c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007250:	f7fc f8b0 	bl	80033b4 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d906      	bls.n	800726c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e1d2      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
 8007262:	bf00      	nop
 8007264:	40021000 	.word	0x40021000
 8007268:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800726c:	4b8c      	ldr	r3, [pc, #560]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800726e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1ea      	bne.n	8007250 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80a6 	beq.w	80073d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007288:	2300      	movs	r3, #0
 800728a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800728c:	4b84      	ldr	r3, [pc, #528]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_RCC_OscConfig+0x2b4>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <HAL_RCC_OscConfig+0x2b6>
 800729c:	2300      	movs	r3, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072a2:	4b7f      	ldr	r3, [pc, #508]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80072a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a6:	4a7e      	ldr	r2, [pc, #504]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ac:	6593      	str	r3, [r2, #88]	; 0x58
 80072ae:	4b7c      	ldr	r3, [pc, #496]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80072b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072ba:	2301      	movs	r3, #1
 80072bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072be:	4b79      	ldr	r3, [pc, #484]	; (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d118      	bne.n	80072fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ca:	4b76      	ldr	r3, [pc, #472]	; (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a75      	ldr	r2, [pc, #468]	; (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072d6:	f7fc f86d 	bl	80033b4 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072de:	f7fc f869 	bl	80033b4 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e18b      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072f0:	4b6c      	ldr	r3, [pc, #432]	; (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0f0      	beq.n	80072de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d108      	bne.n	8007316 <HAL_RCC_OscConfig+0x32e>
 8007304:	4b66      	ldr	r3, [pc, #408]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730a:	4a65      	ldr	r2, [pc, #404]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007314:	e024      	b.n	8007360 <HAL_RCC_OscConfig+0x378>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d110      	bne.n	8007340 <HAL_RCC_OscConfig+0x358>
 800731e:	4b60      	ldr	r3, [pc, #384]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007324:	4a5e      	ldr	r2, [pc, #376]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007326:	f043 0304 	orr.w	r3, r3, #4
 800732a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800732e:	4b5c      	ldr	r3, [pc, #368]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	4a5a      	ldr	r2, [pc, #360]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800733e:	e00f      	b.n	8007360 <HAL_RCC_OscConfig+0x378>
 8007340:	4b57      	ldr	r3, [pc, #348]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	4a56      	ldr	r2, [pc, #344]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007350:	4b53      	ldr	r3, [pc, #332]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007356:	4a52      	ldr	r2, [pc, #328]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007358:	f023 0304 	bic.w	r3, r3, #4
 800735c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d016      	beq.n	8007396 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fc f824 	bl	80033b4 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800736e:	e00a      	b.n	8007386 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007370:	f7fc f820 	bl	80033b4 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	f241 3288 	movw	r2, #5000	; 0x1388
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e140      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007386:	4b46      	ldr	r3, [pc, #280]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ed      	beq.n	8007370 <HAL_RCC_OscConfig+0x388>
 8007394:	e015      	b.n	80073c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007396:	f7fc f80d 	bl	80033b4 <HAL_GetTick>
 800739a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fc f809 	bl	80033b4 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e129      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073b4:	4b3a      	ldr	r3, [pc, #232]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1ed      	bne.n	800739e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073c2:	7ffb      	ldrb	r3, [r7, #31]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d105      	bne.n	80073d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c8:	4b35      	ldr	r3, [pc, #212]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073cc:	4a34      	ldr	r2, [pc, #208]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d03c      	beq.n	800745a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01c      	beq.n	8007422 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073e8:	4b2d      	ldr	r3, [pc, #180]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ee:	4a2c      	ldr	r2, [pc, #176]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f8:	f7fb ffdc 	bl	80033b4 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007400:	f7fb ffd8 	bl	80033b4 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e0fa      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007412:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0ef      	beq.n	8007400 <HAL_RCC_OscConfig+0x418>
 8007420:	e01b      	b.n	800745a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007422:	4b1f      	ldr	r3, [pc, #124]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007428:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007432:	f7fb ffbf 	bl	80033b4 <HAL_GetTick>
 8007436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007438:	e008      	b.n	800744c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800743a:	f7fb ffbb 	bl	80033b4 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e0dd      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800744c:	4b14      	ldr	r3, [pc, #80]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800744e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ef      	bne.n	800743a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80d1 	beq.w	8007606 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007464:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b0c      	cmp	r3, #12
 800746e:	f000 808b 	beq.w	8007588 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d15e      	bne.n	8007538 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747a:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fb ff95 	bl	80033b4 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800748c:	e00c      	b.n	80074a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748e:	f7fb ff91 	bl	80033b4 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d905      	bls.n	80074a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e0b3      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a8:	4b59      	ldr	r3, [pc, #356]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1ec      	bne.n	800748e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074b4:	4b56      	ldr	r3, [pc, #344]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	4b56      	ldr	r3, [pc, #344]	; (8007614 <HAL_RCC_OscConfig+0x62c>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6a11      	ldr	r1, [r2, #32]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074c4:	3a01      	subs	r2, #1
 80074c6:	0112      	lsls	r2, r2, #4
 80074c8:	4311      	orrs	r1, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80074ce:	0212      	lsls	r2, r2, #8
 80074d0:	4311      	orrs	r1, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074d6:	0852      	lsrs	r2, r2, #1
 80074d8:	3a01      	subs	r2, #1
 80074da:	0552      	lsls	r2, r2, #21
 80074dc:	4311      	orrs	r1, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074e2:	0852      	lsrs	r2, r2, #1
 80074e4:	3a01      	subs	r2, #1
 80074e6:	0652      	lsls	r2, r2, #25
 80074e8:	4311      	orrs	r1, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80074ee:	06d2      	lsls	r2, r2, #27
 80074f0:	430a      	orrs	r2, r1
 80074f2:	4947      	ldr	r1, [pc, #284]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074f8:	4b45      	ldr	r3, [pc, #276]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a44      	ldr	r2, [pc, #272]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 80074fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007502:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007504:	4b42      	ldr	r3, [pc, #264]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a41      	ldr	r2, [pc, #260]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 800750a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800750e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fb ff50 	bl	80033b4 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007518:	f7fb ff4c 	bl	80033b4 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e06e      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800752a:	4b39      	ldr	r3, [pc, #228]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0f0      	beq.n	8007518 <HAL_RCC_OscConfig+0x530>
 8007536:	e066      	b.n	8007606 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007538:	4b35      	ldr	r3, [pc, #212]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a34      	ldr	r2, [pc, #208]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 800753e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007542:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007544:	4b32      	ldr	r3, [pc, #200]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a31      	ldr	r2, [pc, #196]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 800754a:	f023 0303 	bic.w	r3, r3, #3
 800754e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007550:	4b2f      	ldr	r3, [pc, #188]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a2e      	ldr	r2, [pc, #184]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 8007556:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800755a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800755e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007560:	f7fb ff28 	bl	80033b4 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007568:	f7fb ff24 	bl	80033b4 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e046      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800757a:	4b25      	ldr	r3, [pc, #148]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f0      	bne.n	8007568 <HAL_RCC_OscConfig+0x580>
 8007586:	e03e      	b.n	8007606 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e039      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007594:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <HAL_RCC_OscConfig+0x628>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f003 0203 	and.w	r2, r3, #3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d12c      	bne.n	8007602 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	3b01      	subs	r3, #1
 80075b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d123      	bne.n	8007602 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d11b      	bne.n	8007602 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d113      	bne.n	8007602 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	085b      	lsrs	r3, r3, #1
 80075e6:	3b01      	subs	r3, #1
 80075e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d109      	bne.n	8007602 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	3b01      	subs	r3, #1
 80075fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075fe:	429a      	cmp	r2, r3
 8007600:	d001      	beq.n	8007606 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40021000 	.word	0x40021000
 8007614:	019f800c 	.word	0x019f800c

08007618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e11e      	b.n	800786e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007630:	4b91      	ldr	r3, [pc, #580]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d910      	bls.n	8007660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763e:	4b8e      	ldr	r3, [pc, #568]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 020f 	bic.w	r2, r3, #15
 8007646:	498c      	ldr	r1, [pc, #560]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	4313      	orrs	r3, r2
 800764c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800764e:	4b8a      	ldr	r3, [pc, #552]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d001      	beq.n	8007660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e106      	b.n	800786e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d073      	beq.n	8007754 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b03      	cmp	r3, #3
 8007672:	d129      	bne.n	80076c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007674:	4b81      	ldr	r3, [pc, #516]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e0f4      	b.n	800786e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007684:	f000 f99e 	bl	80079c4 <RCC_GetSysClockFreqFromPLLSource>
 8007688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	4a7c      	ldr	r2, [pc, #496]	; (8007880 <HAL_RCC_ClockConfig+0x268>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d93f      	bls.n	8007712 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007692:	4b7a      	ldr	r3, [pc, #488]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d033      	beq.n	8007712 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d12f      	bne.n	8007712 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076b2:	4b72      	ldr	r3, [pc, #456]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076ba:	4a70      	ldr	r2, [pc, #448]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 80076bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076c2:	2380      	movs	r3, #128	; 0x80
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e024      	b.n	8007712 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d107      	bne.n	80076e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076d0:	4b6a      	ldr	r3, [pc, #424]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d109      	bne.n	80076f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e0c6      	b.n	800786e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076e0:	4b66      	ldr	r3, [pc, #408]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0be      	b.n	800786e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80076f0:	f000 f8ce 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 80076f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4a61      	ldr	r2, [pc, #388]	; (8007880 <HAL_RCC_ClockConfig+0x268>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d909      	bls.n	8007712 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076fe:	4b5f      	ldr	r3, [pc, #380]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007706:	4a5d      	ldr	r2, [pc, #372]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800770e:	2380      	movs	r3, #128	; 0x80
 8007710:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007712:	4b5a      	ldr	r3, [pc, #360]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f023 0203 	bic.w	r2, r3, #3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	4957      	ldr	r1, [pc, #348]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007720:	4313      	orrs	r3, r2
 8007722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007724:	f7fb fe46 	bl	80033b4 <HAL_GetTick>
 8007728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800772a:	e00a      	b.n	8007742 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800772c:	f7fb fe42 	bl	80033b4 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f241 3288 	movw	r2, #5000	; 0x1388
 800773a:	4293      	cmp	r3, r2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e095      	b.n	800786e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007742:	4b4e      	ldr	r3, [pc, #312]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 020c 	and.w	r2, r3, #12
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	429a      	cmp	r2, r3
 8007752:	d1eb      	bne.n	800772c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d023      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800776c:	4b43      	ldr	r3, [pc, #268]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	4a42      	ldr	r2, [pc, #264]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007776:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007784:	4b3d      	ldr	r3, [pc, #244]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800778c:	4a3b      	ldr	r2, [pc, #236]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 800778e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007794:	4b39      	ldr	r3, [pc, #228]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	4936      	ldr	r1, [pc, #216]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	608b      	str	r3, [r1, #8]
 80077a6:	e008      	b.n	80077ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2b80      	cmp	r3, #128	; 0x80
 80077ac:	d105      	bne.n	80077ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80077ae:	4b33      	ldr	r3, [pc, #204]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	4a32      	ldr	r2, [pc, #200]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 80077b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d21d      	bcs.n	8007804 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077c8:	4b2b      	ldr	r3, [pc, #172]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f023 020f 	bic.w	r2, r3, #15
 80077d0:	4929      	ldr	r1, [pc, #164]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077d8:	f7fb fdec 	bl	80033b4 <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077de:	e00a      	b.n	80077f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077e0:	f7fb fde8 	bl	80033b4 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e03b      	b.n	800786e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <HAL_RCC_ClockConfig+0x260>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d1ed      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007810:	4b1a      	ldr	r3, [pc, #104]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4917      	ldr	r1, [pc, #92]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	490f      	ldr	r1, [pc, #60]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 800783e:	4313      	orrs	r3, r2
 8007840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007842:	f000 f825 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8007846:	4602      	mov	r2, r0
 8007848:	4b0c      	ldr	r3, [pc, #48]	; (800787c <HAL_RCC_ClockConfig+0x264>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	091b      	lsrs	r3, r3, #4
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	490c      	ldr	r1, [pc, #48]	; (8007884 <HAL_RCC_ClockConfig+0x26c>)
 8007854:	5ccb      	ldrb	r3, [r1, r3]
 8007856:	f003 031f 	and.w	r3, r3, #31
 800785a:	fa22 f303 	lsr.w	r3, r2, r3
 800785e:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <HAL_RCC_ClockConfig+0x270>)
 8007860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <HAL_RCC_ClockConfig+0x274>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f7fb fd58 	bl	800331c <HAL_InitTick>
 800786c:	4603      	mov	r3, r0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40022000 	.word	0x40022000
 800787c:	40021000 	.word	0x40021000
 8007880:	04c4b400 	.word	0x04c4b400
 8007884:	0800b61c 	.word	0x0800b61c
 8007888:	20000000 	.word	0x20000000
 800788c:	20000004 	.word	0x20000004

08007890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007896:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 030c 	and.w	r3, r3, #12
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d102      	bne.n	80078a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078a2:	4b2a      	ldr	r3, [pc, #168]	; (800794c <HAL_RCC_GetSysClockFreq+0xbc>)
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	e047      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80078a8:	4b27      	ldr	r3, [pc, #156]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 030c 	and.w	r3, r3, #12
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d102      	bne.n	80078ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078b4:	4b26      	ldr	r3, [pc, #152]	; (8007950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	e03e      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80078ba:	4b23      	ldr	r3, [pc, #140]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 030c 	and.w	r3, r3, #12
 80078c2:	2b0c      	cmp	r3, #12
 80078c4:	d136      	bne.n	8007934 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078c6:	4b20      	ldr	r3, [pc, #128]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078d0:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	091b      	lsrs	r3, r3, #4
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	3301      	adds	r3, #1
 80078dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d10c      	bne.n	80078fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078e4:	4a1a      	ldr	r2, [pc, #104]	; (8007950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ec:	4a16      	ldr	r2, [pc, #88]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ee:	68d2      	ldr	r2, [r2, #12]
 80078f0:	0a12      	lsrs	r2, r2, #8
 80078f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	617b      	str	r3, [r7, #20]
      break;
 80078fc:	e00c      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078fe:	4a13      	ldr	r2, [pc, #76]	; (800794c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	fbb2 f3f3 	udiv	r3, r2, r3
 8007906:	4a10      	ldr	r2, [pc, #64]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007908:	68d2      	ldr	r2, [r2, #12]
 800790a:	0a12      	lsrs	r2, r2, #8
 800790c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007910:	fb02 f303 	mul.w	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]
      break;
 8007916:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007918:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	0e5b      	lsrs	r3, r3, #25
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	3301      	adds	r3, #1
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	e001      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007938:	693b      	ldr	r3, [r7, #16]
}
 800793a:	4618      	mov	r0, r3
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40021000 	.word	0x40021000
 800794c:	00f42400 	.word	0x00f42400
 8007950:	016e3600 	.word	0x016e3600

08007954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007958:	4b03      	ldr	r3, [pc, #12]	; (8007968 <HAL_RCC_GetHCLKFreq+0x14>)
 800795a:	681b      	ldr	r3, [r3, #0]
}
 800795c:	4618      	mov	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20000000 	.word	0x20000000

0800796c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007970:	f7ff fff0 	bl	8007954 <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b06      	ldr	r3, [pc, #24]	; (8007990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4904      	ldr	r1, [pc, #16]	; (8007994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40021000 	.word	0x40021000
 8007994:	0800b62c 	.word	0x0800b62c

08007998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800799c:	f7ff ffda 	bl	8007954 <HAL_RCC_GetHCLKFreq>
 80079a0:	4602      	mov	r2, r0
 80079a2:	4b06      	ldr	r3, [pc, #24]	; (80079bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	0adb      	lsrs	r3, r3, #11
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079ae:	5ccb      	ldrb	r3, [r1, r3]
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40021000 	.word	0x40021000
 80079c0:	0800b62c 	.word	0x0800b62c

080079c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079ca:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079d4:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	3301      	adds	r3, #1
 80079e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d10c      	bne.n	8007a02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e8:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f0:	4a14      	ldr	r2, [pc, #80]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079f2:	68d2      	ldr	r2, [r2, #12]
 80079f4:	0a12      	lsrs	r2, r2, #8
 80079f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	617b      	str	r3, [r7, #20]
    break;
 8007a00:	e00c      	b.n	8007a1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0a:	4a0e      	ldr	r2, [pc, #56]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a0c:	68d2      	ldr	r2, [r2, #12]
 8007a0e:	0a12      	lsrs	r2, r2, #8
 8007a10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a14:	fb02 f303 	mul.w	r3, r2, r3
 8007a18:	617b      	str	r3, [r7, #20]
    break;
 8007a1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a1c:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	0e5b      	lsrs	r3, r3, #25
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	3301      	adds	r3, #1
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a36:	687b      	ldr	r3, [r7, #4]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	40021000 	.word	0x40021000
 8007a48:	016e3600 	.word	0x016e3600
 8007a4c:	00f42400 	.word	0x00f42400

08007a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a58:	2300      	movs	r3, #0
 8007a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8098 	beq.w	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a72:	4b43      	ldr	r3, [pc, #268]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10d      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a7e:	4b40      	ldr	r3, [pc, #256]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a82:	4a3f      	ldr	r2, [pc, #252]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6593      	str	r3, [r2, #88]	; 0x58
 8007a8a:	4b3d      	ldr	r3, [pc, #244]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a92:	60bb      	str	r3, [r7, #8]
 8007a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a96:	2301      	movs	r3, #1
 8007a98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a9a:	4b3a      	ldr	r3, [pc, #232]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a39      	ldr	r2, [pc, #228]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aa6:	f7fb fc85 	bl	80033b4 <HAL_GetTick>
 8007aaa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aac:	e009      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aae:	f7fb fc81 	bl	80033b4 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d902      	bls.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	74fb      	strb	r3, [r7, #19]
        break;
 8007ac0:	e005      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ac2:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0ef      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ace:	7cfb      	ldrb	r3, [r7, #19]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d159      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ad4:	4b2a      	ldr	r3, [pc, #168]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ade:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01e      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d019      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007afc:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b0c:	4b1c      	ldr	r3, [pc, #112]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b12:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b1c:	4a18      	ldr	r2, [pc, #96]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2e:	f7fb fc41 	bl	80033b4 <HAL_GetTick>
 8007b32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b34:	e00b      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b36:	f7fb fc3d 	bl	80033b4 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d902      	bls.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	74fb      	strb	r3, [r7, #19]
            break;
 8007b4c:	e006      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b4e:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0ec      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b5c:	7cfb      	ldrb	r3, [r7, #19]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b70:	4903      	ldr	r1, [pc, #12]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b78:	e008      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b7a:	7cfb      	ldrb	r3, [r7, #19]
 8007b7c:	74bb      	strb	r3, [r7, #18]
 8007b7e:	e005      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b80:	40021000 	.word	0x40021000
 8007b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	7cfb      	ldrb	r3, [r7, #19]
 8007b8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b8c:	7c7b      	ldrb	r3, [r7, #17]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d105      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b92:	4ba7      	ldr	r3, [pc, #668]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b96:	4aa6      	ldr	r2, [pc, #664]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007baa:	4ba1      	ldr	r3, [pc, #644]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb0:	f023 0203 	bic.w	r2, r3, #3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	499d      	ldr	r1, [pc, #628]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bcc:	4b98      	ldr	r3, [pc, #608]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd2:	f023 020c 	bic.w	r2, r3, #12
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	4995      	ldr	r1, [pc, #596]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bee:	4b90      	ldr	r3, [pc, #576]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	498c      	ldr	r1, [pc, #560]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c10:	4b87      	ldr	r3, [pc, #540]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	4984      	ldr	r1, [pc, #528]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c32:	4b7f      	ldr	r3, [pc, #508]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	497b      	ldr	r1, [pc, #492]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c54:	4b76      	ldr	r3, [pc, #472]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	4973      	ldr	r1, [pc, #460]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c76:	4b6e      	ldr	r3, [pc, #440]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	496a      	ldr	r1, [pc, #424]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c98:	4b65      	ldr	r3, [pc, #404]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	4962      	ldr	r1, [pc, #392]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cba:	4b5d      	ldr	r3, [pc, #372]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	4959      	ldr	r1, [pc, #356]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cdc:	4b54      	ldr	r3, [pc, #336]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ce2:	f023 0203 	bic.w	r2, r3, #3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	4951      	ldr	r1, [pc, #324]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cfe:	4b4c      	ldr	r3, [pc, #304]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4948      	ldr	r1, [pc, #288]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d015      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d20:	4b43      	ldr	r3, [pc, #268]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	4940      	ldr	r1, [pc, #256]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d3e:	d105      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d40:	4b3b      	ldr	r3, [pc, #236]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	4a3a      	ldr	r2, [pc, #232]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d015      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d58:	4b35      	ldr	r3, [pc, #212]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d66:	4932      	ldr	r1, [pc, #200]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d76:	d105      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d78:	4b2d      	ldr	r3, [pc, #180]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	4a2c      	ldr	r2, [pc, #176]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d015      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d90:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	4924      	ldr	r1, [pc, #144]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dae:	d105      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007db0:	4b1f      	ldr	r3, [pc, #124]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d015      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dc8:	4b19      	ldr	r3, [pc, #100]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd6:	4916      	ldr	r1, [pc, #88]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007de6:	d105      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007de8:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	4a10      	ldr	r2, [pc, #64]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007df2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d019      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	4908      	ldr	r1, [pc, #32]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e1e:	d109      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e20:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	4a02      	ldr	r2, [pc, #8]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e2a:	60d3      	str	r3, [r2, #12]
 8007e2c:	e002      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007e2e:	bf00      	nop
 8007e30:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d015      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e40:	4b29      	ldr	r3, [pc, #164]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4e:	4926      	ldr	r1, [pc, #152]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e5e:	d105      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e60:	4b21      	ldr	r3, [pc, #132]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4a20      	ldr	r2, [pc, #128]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e6a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d015      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e78:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e86:	4918      	ldr	r1, [pc, #96]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e96:	d105      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e98:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	4a12      	ldr	r2, [pc, #72]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007eb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ebe:	490a      	ldr	r1, [pc, #40]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ece:	d105      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007edc:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40021000 	.word	0x40021000

08007eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e049      	b.n	8007f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fa ffc0 	bl	8002e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f000 fe08 	bl	8008b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d001      	beq.n	8007fb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e04c      	b.n	800804e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a26      	ldr	r2, [pc, #152]	; (800805c <HAL_TIM_Base_Start+0xc0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d022      	beq.n	800800c <HAL_TIM_Base_Start+0x70>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fce:	d01d      	beq.n	800800c <HAL_TIM_Base_Start+0x70>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a22      	ldr	r2, [pc, #136]	; (8008060 <HAL_TIM_Base_Start+0xc4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d018      	beq.n	800800c <HAL_TIM_Base_Start+0x70>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a21      	ldr	r2, [pc, #132]	; (8008064 <HAL_TIM_Base_Start+0xc8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d013      	beq.n	800800c <HAL_TIM_Base_Start+0x70>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1f      	ldr	r2, [pc, #124]	; (8008068 <HAL_TIM_Base_Start+0xcc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d00e      	beq.n	800800c <HAL_TIM_Base_Start+0x70>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1e      	ldr	r2, [pc, #120]	; (800806c <HAL_TIM_Base_Start+0xd0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d009      	beq.n	800800c <HAL_TIM_Base_Start+0x70>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1c      	ldr	r2, [pc, #112]	; (8008070 <HAL_TIM_Base_Start+0xd4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d004      	beq.n	800800c <HAL_TIM_Base_Start+0x70>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <HAL_TIM_Base_Start+0xd8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d115      	bne.n	8008038 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	4b19      	ldr	r3, [pc, #100]	; (8008078 <HAL_TIM_Base_Start+0xdc>)
 8008014:	4013      	ands	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b06      	cmp	r3, #6
 800801c:	d015      	beq.n	800804a <HAL_TIM_Base_Start+0xae>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008024:	d011      	beq.n	800804a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0201 	orr.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008036:	e008      	b.n	800804a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0201 	orr.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	e000      	b.n	800804c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	40012c00 	.word	0x40012c00
 8008060:	40000400 	.word	0x40000400
 8008064:	40000800 	.word	0x40000800
 8008068:	40000c00 	.word	0x40000c00
 800806c:	40013400 	.word	0x40013400
 8008070:	40014000 	.word	0x40014000
 8008074:	40015000 	.word	0x40015000
 8008078:	00010007 	.word	0x00010007

0800807c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b01      	cmp	r3, #1
 800808e:	d001      	beq.n	8008094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e054      	b.n	800813e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a26      	ldr	r2, [pc, #152]	; (800814c <HAL_TIM_Base_Start_IT+0xd0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d022      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x80>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080be:	d01d      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x80>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a22      	ldr	r2, [pc, #136]	; (8008150 <HAL_TIM_Base_Start_IT+0xd4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d018      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x80>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a21      	ldr	r2, [pc, #132]	; (8008154 <HAL_TIM_Base_Start_IT+0xd8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d013      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x80>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1f      	ldr	r2, [pc, #124]	; (8008158 <HAL_TIM_Base_Start_IT+0xdc>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00e      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x80>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <HAL_TIM_Base_Start_IT+0xe0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d009      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x80>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1c      	ldr	r2, [pc, #112]	; (8008160 <HAL_TIM_Base_Start_IT+0xe4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x80>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1b      	ldr	r2, [pc, #108]	; (8008164 <HAL_TIM_Base_Start_IT+0xe8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d115      	bne.n	8008128 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	4b19      	ldr	r3, [pc, #100]	; (8008168 <HAL_TIM_Base_Start_IT+0xec>)
 8008104:	4013      	ands	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b06      	cmp	r3, #6
 800810c:	d015      	beq.n	800813a <HAL_TIM_Base_Start_IT+0xbe>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008114:	d011      	beq.n	800813a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008126:	e008      	b.n	800813a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	e000      	b.n	800813c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40013400 	.word	0x40013400
 8008160:	40014000 	.word	0x40014000
 8008164:	40015000 	.word	0x40015000
 8008168:	00010007 	.word	0x00010007

0800816c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e049      	b.n	8008212 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7fa fe00 	bl	8002d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f000 fcc8 	bl	8008b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d109      	bne.n	8008240 <HAL_TIM_PWM_Start+0x24>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	bf14      	ite	ne
 8008238:	2301      	movne	r3, #1
 800823a:	2300      	moveq	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	e03c      	b.n	80082ba <HAL_TIM_PWM_Start+0x9e>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b04      	cmp	r3, #4
 8008244:	d109      	bne.n	800825a <HAL_TIM_PWM_Start+0x3e>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	bf14      	ite	ne
 8008252:	2301      	movne	r3, #1
 8008254:	2300      	moveq	r3, #0
 8008256:	b2db      	uxtb	r3, r3
 8008258:	e02f      	b.n	80082ba <HAL_TIM_PWM_Start+0x9e>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b08      	cmp	r3, #8
 800825e:	d109      	bne.n	8008274 <HAL_TIM_PWM_Start+0x58>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	bf14      	ite	ne
 800826c:	2301      	movne	r3, #1
 800826e:	2300      	moveq	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	e022      	b.n	80082ba <HAL_TIM_PWM_Start+0x9e>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b0c      	cmp	r3, #12
 8008278:	d109      	bne.n	800828e <HAL_TIM_PWM_Start+0x72>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b01      	cmp	r3, #1
 8008284:	bf14      	ite	ne
 8008286:	2301      	movne	r3, #1
 8008288:	2300      	moveq	r3, #0
 800828a:	b2db      	uxtb	r3, r3
 800828c:	e015      	b.n	80082ba <HAL_TIM_PWM_Start+0x9e>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b10      	cmp	r3, #16
 8008292:	d109      	bne.n	80082a8 <HAL_TIM_PWM_Start+0x8c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b01      	cmp	r3, #1
 800829e:	bf14      	ite	ne
 80082a0:	2301      	movne	r3, #1
 80082a2:	2300      	moveq	r3, #0
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	e008      	b.n	80082ba <HAL_TIM_PWM_Start+0x9e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	bf14      	ite	ne
 80082b4:	2301      	movne	r3, #1
 80082b6:	2300      	moveq	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e0a6      	b.n	8008410 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <HAL_TIM_PWM_Start+0xb6>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d0:	e023      	b.n	800831a <HAL_TIM_PWM_Start+0xfe>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d104      	bne.n	80082e2 <HAL_TIM_PWM_Start+0xc6>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e0:	e01b      	b.n	800831a <HAL_TIM_PWM_Start+0xfe>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d104      	bne.n	80082f2 <HAL_TIM_PWM_Start+0xd6>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082f0:	e013      	b.n	800831a <HAL_TIM_PWM_Start+0xfe>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b0c      	cmp	r3, #12
 80082f6:	d104      	bne.n	8008302 <HAL_TIM_PWM_Start+0xe6>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008300:	e00b      	b.n	800831a <HAL_TIM_PWM_Start+0xfe>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b10      	cmp	r3, #16
 8008306:	d104      	bne.n	8008312 <HAL_TIM_PWM_Start+0xf6>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008310:	e003      	b.n	800831a <HAL_TIM_PWM_Start+0xfe>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2201      	movs	r2, #1
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f001 f908 	bl	8009538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a3a      	ldr	r2, [pc, #232]	; (8008418 <HAL_TIM_PWM_Start+0x1fc>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d018      	beq.n	8008364 <HAL_TIM_PWM_Start+0x148>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a39      	ldr	r2, [pc, #228]	; (800841c <HAL_TIM_PWM_Start+0x200>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_TIM_PWM_Start+0x148>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a37      	ldr	r2, [pc, #220]	; (8008420 <HAL_TIM_PWM_Start+0x204>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00e      	beq.n	8008364 <HAL_TIM_PWM_Start+0x148>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a36      	ldr	r2, [pc, #216]	; (8008424 <HAL_TIM_PWM_Start+0x208>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d009      	beq.n	8008364 <HAL_TIM_PWM_Start+0x148>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a34      	ldr	r2, [pc, #208]	; (8008428 <HAL_TIM_PWM_Start+0x20c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_TIM_PWM_Start+0x148>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a33      	ldr	r2, [pc, #204]	; (800842c <HAL_TIM_PWM_Start+0x210>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d101      	bne.n	8008368 <HAL_TIM_PWM_Start+0x14c>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <HAL_TIM_PWM_Start+0x14e>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800837c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a25      	ldr	r2, [pc, #148]	; (8008418 <HAL_TIM_PWM_Start+0x1fc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d022      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1b2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008390:	d01d      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1b2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a26      	ldr	r2, [pc, #152]	; (8008430 <HAL_TIM_PWM_Start+0x214>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d018      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1b2>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a24      	ldr	r2, [pc, #144]	; (8008434 <HAL_TIM_PWM_Start+0x218>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1b2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a23      	ldr	r2, [pc, #140]	; (8008438 <HAL_TIM_PWM_Start+0x21c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00e      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1b2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a19      	ldr	r2, [pc, #100]	; (800841c <HAL_TIM_PWM_Start+0x200>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d009      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1b2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a18      	ldr	r2, [pc, #96]	; (8008420 <HAL_TIM_PWM_Start+0x204>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d004      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1b2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a18      	ldr	r2, [pc, #96]	; (800842c <HAL_TIM_PWM_Start+0x210>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d115      	bne.n	80083fa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	4b19      	ldr	r3, [pc, #100]	; (800843c <HAL_TIM_PWM_Start+0x220>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b06      	cmp	r3, #6
 80083de:	d015      	beq.n	800840c <HAL_TIM_PWM_Start+0x1f0>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e6:	d011      	beq.n	800840c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0201 	orr.w	r2, r2, #1
 80083f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f8:	e008      	b.n	800840c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0201 	orr.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	e000      	b.n	800840e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40012c00 	.word	0x40012c00
 800841c:	40013400 	.word	0x40013400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800
 800842c:	40015000 	.word	0x40015000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	00010007 	.word	0x00010007

08008440 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e049      	b.n	80084e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fa fcb6 	bl	8002dd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3304      	adds	r3, #4
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f000 fb5e 	bl	8008b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <HAL_TIM_IC_Start_IT+0x1e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800850a:	b2db      	uxtb	r3, r3
 800850c:	e023      	b.n	8008556 <HAL_TIM_IC_Start_IT+0x66>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b04      	cmp	r3, #4
 8008512:	d104      	bne.n	800851e <HAL_TIM_IC_Start_IT+0x2e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800851a:	b2db      	uxtb	r3, r3
 800851c:	e01b      	b.n	8008556 <HAL_TIM_IC_Start_IT+0x66>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b08      	cmp	r3, #8
 8008522:	d104      	bne.n	800852e <HAL_TIM_IC_Start_IT+0x3e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800852a:	b2db      	uxtb	r3, r3
 800852c:	e013      	b.n	8008556 <HAL_TIM_IC_Start_IT+0x66>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b0c      	cmp	r3, #12
 8008532:	d104      	bne.n	800853e <HAL_TIM_IC_Start_IT+0x4e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800853a:	b2db      	uxtb	r3, r3
 800853c:	e00b      	b.n	8008556 <HAL_TIM_IC_Start_IT+0x66>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b10      	cmp	r3, #16
 8008542:	d104      	bne.n	800854e <HAL_TIM_IC_Start_IT+0x5e>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800854a:	b2db      	uxtb	r3, r3
 800854c:	e003      	b.n	8008556 <HAL_TIM_IC_Start_IT+0x66>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008554:	b2db      	uxtb	r3, r3
 8008556:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <HAL_TIM_IC_Start_IT+0x78>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008564:	b2db      	uxtb	r3, r3
 8008566:	e013      	b.n	8008590 <HAL_TIM_IC_Start_IT+0xa0>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b04      	cmp	r3, #4
 800856c:	d104      	bne.n	8008578 <HAL_TIM_IC_Start_IT+0x88>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008574:	b2db      	uxtb	r3, r3
 8008576:	e00b      	b.n	8008590 <HAL_TIM_IC_Start_IT+0xa0>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b08      	cmp	r3, #8
 800857c:	d104      	bne.n	8008588 <HAL_TIM_IC_Start_IT+0x98>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008584:	b2db      	uxtb	r3, r3
 8008586:	e003      	b.n	8008590 <HAL_TIM_IC_Start_IT+0xa0>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800858e:	b2db      	uxtb	r3, r3
 8008590:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d102      	bne.n	800859e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008598:	7b7b      	ldrb	r3, [r7, #13]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d001      	beq.n	80085a2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e0e2      	b.n	8008768 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <HAL_TIM_IC_Start_IT+0xc2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b0:	e023      	b.n	80085fa <HAL_TIM_IC_Start_IT+0x10a>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d104      	bne.n	80085c2 <HAL_TIM_IC_Start_IT+0xd2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c0:	e01b      	b.n	80085fa <HAL_TIM_IC_Start_IT+0x10a>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d104      	bne.n	80085d2 <HAL_TIM_IC_Start_IT+0xe2>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d0:	e013      	b.n	80085fa <HAL_TIM_IC_Start_IT+0x10a>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b0c      	cmp	r3, #12
 80085d6:	d104      	bne.n	80085e2 <HAL_TIM_IC_Start_IT+0xf2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e0:	e00b      	b.n	80085fa <HAL_TIM_IC_Start_IT+0x10a>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b10      	cmp	r3, #16
 80085e6:	d104      	bne.n	80085f2 <HAL_TIM_IC_Start_IT+0x102>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f0:	e003      	b.n	80085fa <HAL_TIM_IC_Start_IT+0x10a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2202      	movs	r2, #2
 80085f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d104      	bne.n	800860a <HAL_TIM_IC_Start_IT+0x11a>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008608:	e013      	b.n	8008632 <HAL_TIM_IC_Start_IT+0x142>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b04      	cmp	r3, #4
 800860e:	d104      	bne.n	800861a <HAL_TIM_IC_Start_IT+0x12a>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008618:	e00b      	b.n	8008632 <HAL_TIM_IC_Start_IT+0x142>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b08      	cmp	r3, #8
 800861e:	d104      	bne.n	800862a <HAL_TIM_IC_Start_IT+0x13a>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008628:	e003      	b.n	8008632 <HAL_TIM_IC_Start_IT+0x142>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b0c      	cmp	r3, #12
 8008636:	d841      	bhi.n	80086bc <HAL_TIM_IC_Start_IT+0x1cc>
 8008638:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <HAL_TIM_IC_Start_IT+0x150>)
 800863a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863e:	bf00      	nop
 8008640:	08008675 	.word	0x08008675
 8008644:	080086bd 	.word	0x080086bd
 8008648:	080086bd 	.word	0x080086bd
 800864c:	080086bd 	.word	0x080086bd
 8008650:	08008687 	.word	0x08008687
 8008654:	080086bd 	.word	0x080086bd
 8008658:	080086bd 	.word	0x080086bd
 800865c:	080086bd 	.word	0x080086bd
 8008660:	08008699 	.word	0x08008699
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086bd 	.word	0x080086bd
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080086ab 	.word	0x080086ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0202 	orr.w	r2, r2, #2
 8008682:	60da      	str	r2, [r3, #12]
      break;
 8008684:	e01d      	b.n	80086c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0204 	orr.w	r2, r2, #4
 8008694:	60da      	str	r2, [r3, #12]
      break;
 8008696:	e014      	b.n	80086c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0208 	orr.w	r2, r2, #8
 80086a6:	60da      	str	r2, [r3, #12]
      break;
 80086a8:	e00b      	b.n	80086c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0210 	orr.w	r2, r2, #16
 80086b8:	60da      	str	r2, [r3, #12]
      break;
 80086ba:	e002      	b.n	80086c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d14e      	bne.n	8008766 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 ff31 	bl	8009538 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a25      	ldr	r2, [pc, #148]	; (8008770 <HAL_TIM_IC_Start_IT+0x280>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <HAL_TIM_IC_Start_IT+0x236>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e8:	d01d      	beq.n	8008726 <HAL_TIM_IC_Start_IT+0x236>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a21      	ldr	r2, [pc, #132]	; (8008774 <HAL_TIM_IC_Start_IT+0x284>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_TIM_IC_Start_IT+0x236>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1f      	ldr	r2, [pc, #124]	; (8008778 <HAL_TIM_IC_Start_IT+0x288>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_TIM_IC_Start_IT+0x236>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1e      	ldr	r2, [pc, #120]	; (800877c <HAL_TIM_IC_Start_IT+0x28c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_TIM_IC_Start_IT+0x236>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1c      	ldr	r2, [pc, #112]	; (8008780 <HAL_TIM_IC_Start_IT+0x290>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_TIM_IC_Start_IT+0x236>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1b      	ldr	r2, [pc, #108]	; (8008784 <HAL_TIM_IC_Start_IT+0x294>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_TIM_IC_Start_IT+0x236>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a19      	ldr	r2, [pc, #100]	; (8008788 <HAL_TIM_IC_Start_IT+0x298>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d115      	bne.n	8008752 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <HAL_TIM_IC_Start_IT+0x29c>)
 800872e:	4013      	ands	r3, r2
 8008730:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b06      	cmp	r3, #6
 8008736:	d015      	beq.n	8008764 <HAL_TIM_IC_Start_IT+0x274>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873e:	d011      	beq.n	8008764 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008750:	e008      	b.n	8008764 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0201 	orr.w	r2, r2, #1
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	e000      	b.n	8008766 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008764:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	40012c00 	.word	0x40012c00
 8008774:	40000400 	.word	0x40000400
 8008778:	40000800 	.word	0x40000800
 800877c:	40000c00 	.word	0x40000c00
 8008780:	40013400 	.word	0x40013400
 8008784:	40014000 	.word	0x40014000
 8008788:	40015000 	.word	0x40015000
 800878c:	00010007 	.word	0x00010007

08008790 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e088      	b.n	80088c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11b      	bne.n	80087f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f000 fd8a 	bl	80092e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 020c 	bic.w	r2, r2, #12
 80087de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	619a      	str	r2, [r3, #24]
 80087f2:	e060      	b.n	80088b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d11c      	bne.n	8008834 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6819      	ldr	r1, [r3, #0]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f000 fddf 	bl	80093cc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699a      	ldr	r2, [r3, #24]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800881c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6999      	ldr	r1, [r3, #24]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	021a      	lsls	r2, r3, #8
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	619a      	str	r2, [r3, #24]
 8008832:	e040      	b.n	80088b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b08      	cmp	r3, #8
 8008838:	d11b      	bne.n	8008872 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6819      	ldr	r1, [r3, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f000 fdfc 	bl	8009446 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69da      	ldr	r2, [r3, #28]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 020c 	bic.w	r2, r2, #12
 800885c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69d9      	ldr	r1, [r3, #28]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	61da      	str	r2, [r3, #28]
 8008870:	e021      	b.n	80088b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b0c      	cmp	r3, #12
 8008876:	d11c      	bne.n	80088b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6819      	ldr	r1, [r3, #0]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f000 fe19 	bl	80094be <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69da      	ldr	r2, [r3, #28]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800889a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	69d9      	ldr	r1, [r3, #28]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	021a      	lsls	r2, r3, #8
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	61da      	str	r2, [r3, #28]
 80088b0:	e001      	b.n	80088b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e0ff      	b.n	8008ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b14      	cmp	r3, #20
 80088f2:	f200 80f0 	bhi.w	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008951 	.word	0x08008951
 8008900:	08008ad7 	.word	0x08008ad7
 8008904:	08008ad7 	.word	0x08008ad7
 8008908:	08008ad7 	.word	0x08008ad7
 800890c:	08008991 	.word	0x08008991
 8008910:	08008ad7 	.word	0x08008ad7
 8008914:	08008ad7 	.word	0x08008ad7
 8008918:	08008ad7 	.word	0x08008ad7
 800891c:	080089d3 	.word	0x080089d3
 8008920:	08008ad7 	.word	0x08008ad7
 8008924:	08008ad7 	.word	0x08008ad7
 8008928:	08008ad7 	.word	0x08008ad7
 800892c:	08008a13 	.word	0x08008a13
 8008930:	08008ad7 	.word	0x08008ad7
 8008934:	08008ad7 	.word	0x08008ad7
 8008938:	08008ad7 	.word	0x08008ad7
 800893c:	08008a55 	.word	0x08008a55
 8008940:	08008ad7 	.word	0x08008ad7
 8008944:	08008ad7 	.word	0x08008ad7
 8008948:	08008ad7 	.word	0x08008ad7
 800894c:	08008a95 	.word	0x08008a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f99a 	bl	8008c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0208 	orr.w	r2, r2, #8
 800896a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0204 	bic.w	r2, r2, #4
 800897a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6999      	ldr	r1, [r3, #24]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	691a      	ldr	r2, [r3, #16]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	619a      	str	r2, [r3, #24]
      break;
 800898e:	e0a5      	b.n	8008adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fa14 	bl	8008dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699a      	ldr	r2, [r3, #24]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6999      	ldr	r1, [r3, #24]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	021a      	lsls	r2, r3, #8
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	619a      	str	r2, [r3, #24]
      break;
 80089d0:	e084      	b.n	8008adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fa87 	bl	8008eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f042 0208 	orr.w	r2, r2, #8
 80089ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0204 	bic.w	r2, r2, #4
 80089fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69d9      	ldr	r1, [r3, #28]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	691a      	ldr	r2, [r3, #16]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	61da      	str	r2, [r3, #28]
      break;
 8008a10:	e064      	b.n	8008adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 faf9 	bl	8009010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69da      	ldr	r2, [r3, #28]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69d9      	ldr	r1, [r3, #28]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	021a      	lsls	r2, r3, #8
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	61da      	str	r2, [r3, #28]
      break;
 8008a52:	e043      	b.n	8008adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fb6c 	bl	8009138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f042 0208 	orr.w	r2, r2, #8
 8008a6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0204 	bic.w	r2, r2, #4
 8008a7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691a      	ldr	r2, [r3, #16]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008a92:	e023      	b.n	8008adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fbb6 	bl	800920c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008abe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	021a      	lsls	r2, r3, #8
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008ad4:	e002      	b.n	8008adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop

08008af0 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_TIM_GenerateEvent+0x18>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e014      	b.n	8008b32 <HAL_TIM_GenerateEvent+0x42>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
	...

08008b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a46      	ldr	r2, [pc, #280]	; (8008c6c <TIM_Base_SetConfig+0x12c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d017      	beq.n	8008b88 <TIM_Base_SetConfig+0x48>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d013      	beq.n	8008b88 <TIM_Base_SetConfig+0x48>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a43      	ldr	r2, [pc, #268]	; (8008c70 <TIM_Base_SetConfig+0x130>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00f      	beq.n	8008b88 <TIM_Base_SetConfig+0x48>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a42      	ldr	r2, [pc, #264]	; (8008c74 <TIM_Base_SetConfig+0x134>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00b      	beq.n	8008b88 <TIM_Base_SetConfig+0x48>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a41      	ldr	r2, [pc, #260]	; (8008c78 <TIM_Base_SetConfig+0x138>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d007      	beq.n	8008b88 <TIM_Base_SetConfig+0x48>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a40      	ldr	r2, [pc, #256]	; (8008c7c <TIM_Base_SetConfig+0x13c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d003      	beq.n	8008b88 <TIM_Base_SetConfig+0x48>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a3f      	ldr	r2, [pc, #252]	; (8008c80 <TIM_Base_SetConfig+0x140>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d108      	bne.n	8008b9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a33      	ldr	r2, [pc, #204]	; (8008c6c <TIM_Base_SetConfig+0x12c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d023      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba8:	d01f      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a30      	ldr	r2, [pc, #192]	; (8008c70 <TIM_Base_SetConfig+0x130>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d01b      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a2f      	ldr	r2, [pc, #188]	; (8008c74 <TIM_Base_SetConfig+0x134>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d017      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a2e      	ldr	r2, [pc, #184]	; (8008c78 <TIM_Base_SetConfig+0x138>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d013      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2d      	ldr	r2, [pc, #180]	; (8008c7c <TIM_Base_SetConfig+0x13c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00f      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a2d      	ldr	r2, [pc, #180]	; (8008c84 <TIM_Base_SetConfig+0x144>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00b      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a2c      	ldr	r2, [pc, #176]	; (8008c88 <TIM_Base_SetConfig+0x148>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d007      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a2b      	ldr	r2, [pc, #172]	; (8008c8c <TIM_Base_SetConfig+0x14c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d003      	beq.n	8008bea <TIM_Base_SetConfig+0xaa>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <TIM_Base_SetConfig+0x140>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d108      	bne.n	8008bfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a12      	ldr	r2, [pc, #72]	; (8008c6c <TIM_Base_SetConfig+0x12c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d013      	beq.n	8008c50 <TIM_Base_SetConfig+0x110>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a14      	ldr	r2, [pc, #80]	; (8008c7c <TIM_Base_SetConfig+0x13c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00f      	beq.n	8008c50 <TIM_Base_SetConfig+0x110>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a14      	ldr	r2, [pc, #80]	; (8008c84 <TIM_Base_SetConfig+0x144>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00b      	beq.n	8008c50 <TIM_Base_SetConfig+0x110>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a13      	ldr	r2, [pc, #76]	; (8008c88 <TIM_Base_SetConfig+0x148>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d007      	beq.n	8008c50 <TIM_Base_SetConfig+0x110>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a12      	ldr	r2, [pc, #72]	; (8008c8c <TIM_Base_SetConfig+0x14c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d003      	beq.n	8008c50 <TIM_Base_SetConfig+0x110>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a0d      	ldr	r2, [pc, #52]	; (8008c80 <TIM_Base_SetConfig+0x140>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d103      	bne.n	8008c58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	615a      	str	r2, [r3, #20]
}
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40012c00 	.word	0x40012c00
 8008c70:	40000400 	.word	0x40000400
 8008c74:	40000800 	.word	0x40000800
 8008c78:	40000c00 	.word	0x40000c00
 8008c7c:	40013400 	.word	0x40013400
 8008c80:	40015000 	.word	0x40015000
 8008c84:	40014000 	.word	0x40014000
 8008c88:	40014400 	.word	0x40014400
 8008c8c:	40014800 	.word	0x40014800

08008c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f023 0201 	bic.w	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0303 	bic.w	r3, r3, #3
 8008cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f023 0302 	bic.w	r3, r3, #2
 8008cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a30      	ldr	r2, [pc, #192]	; (8008dac <TIM_OC1_SetConfig+0x11c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <TIM_OC1_SetConfig+0x88>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a2f      	ldr	r2, [pc, #188]	; (8008db0 <TIM_OC1_SetConfig+0x120>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00f      	beq.n	8008d18 <TIM_OC1_SetConfig+0x88>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a2e      	ldr	r2, [pc, #184]	; (8008db4 <TIM_OC1_SetConfig+0x124>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00b      	beq.n	8008d18 <TIM_OC1_SetConfig+0x88>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a2d      	ldr	r2, [pc, #180]	; (8008db8 <TIM_OC1_SetConfig+0x128>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d007      	beq.n	8008d18 <TIM_OC1_SetConfig+0x88>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a2c      	ldr	r2, [pc, #176]	; (8008dbc <TIM_OC1_SetConfig+0x12c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d003      	beq.n	8008d18 <TIM_OC1_SetConfig+0x88>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a2b      	ldr	r2, [pc, #172]	; (8008dc0 <TIM_OC1_SetConfig+0x130>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d10c      	bne.n	8008d32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f023 0308 	bic.w	r3, r3, #8
 8008d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 0304 	bic.w	r3, r3, #4
 8008d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a1d      	ldr	r2, [pc, #116]	; (8008dac <TIM_OC1_SetConfig+0x11c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d013      	beq.n	8008d62 <TIM_OC1_SetConfig+0xd2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a1c      	ldr	r2, [pc, #112]	; (8008db0 <TIM_OC1_SetConfig+0x120>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00f      	beq.n	8008d62 <TIM_OC1_SetConfig+0xd2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a1b      	ldr	r2, [pc, #108]	; (8008db4 <TIM_OC1_SetConfig+0x124>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00b      	beq.n	8008d62 <TIM_OC1_SetConfig+0xd2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a1a      	ldr	r2, [pc, #104]	; (8008db8 <TIM_OC1_SetConfig+0x128>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d007      	beq.n	8008d62 <TIM_OC1_SetConfig+0xd2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a19      	ldr	r2, [pc, #100]	; (8008dbc <TIM_OC1_SetConfig+0x12c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d003      	beq.n	8008d62 <TIM_OC1_SetConfig+0xd2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a18      	ldr	r2, [pc, #96]	; (8008dc0 <TIM_OC1_SetConfig+0x130>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d111      	bne.n	8008d86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	621a      	str	r2, [r3, #32]
}
 8008da0:	bf00      	nop
 8008da2:	371c      	adds	r7, #28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	40012c00 	.word	0x40012c00
 8008db0:	40013400 	.word	0x40013400
 8008db4:	40014000 	.word	0x40014000
 8008db8:	40014400 	.word	0x40014400
 8008dbc:	40014800 	.word	0x40014800
 8008dc0:	40015000 	.word	0x40015000

08008dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f023 0210 	bic.w	r2, r3, #16
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	021b      	lsls	r3, r3, #8
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f023 0320 	bic.w	r3, r3, #32
 8008e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a2c      	ldr	r2, [pc, #176]	; (8008ed4 <TIM_OC2_SetConfig+0x110>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_OC2_SetConfig+0x74>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a2b      	ldr	r2, [pc, #172]	; (8008ed8 <TIM_OC2_SetConfig+0x114>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_OC2_SetConfig+0x74>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a2a      	ldr	r2, [pc, #168]	; (8008edc <TIM_OC2_SetConfig+0x118>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d10d      	bne.n	8008e54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a1f      	ldr	r2, [pc, #124]	; (8008ed4 <TIM_OC2_SetConfig+0x110>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d013      	beq.n	8008e84 <TIM_OC2_SetConfig+0xc0>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <TIM_OC2_SetConfig+0x114>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00f      	beq.n	8008e84 <TIM_OC2_SetConfig+0xc0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <TIM_OC2_SetConfig+0x11c>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00b      	beq.n	8008e84 <TIM_OC2_SetConfig+0xc0>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ee4 <TIM_OC2_SetConfig+0x120>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d007      	beq.n	8008e84 <TIM_OC2_SetConfig+0xc0>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a1c      	ldr	r2, [pc, #112]	; (8008ee8 <TIM_OC2_SetConfig+0x124>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d003      	beq.n	8008e84 <TIM_OC2_SetConfig+0xc0>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a17      	ldr	r2, [pc, #92]	; (8008edc <TIM_OC2_SetConfig+0x118>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d113      	bne.n	8008eac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	621a      	str	r2, [r3, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	40013400 	.word	0x40013400
 8008edc:	40015000 	.word	0x40015000
 8008ee0:	40014000 	.word	0x40014000
 8008ee4:	40014400 	.word	0x40014400
 8008ee8:	40014800 	.word	0x40014800

08008eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f023 0303 	bic.w	r3, r3, #3
 8008f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	021b      	lsls	r3, r3, #8
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a2b      	ldr	r2, [pc, #172]	; (8008ff8 <TIM_OC3_SetConfig+0x10c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d007      	beq.n	8008f5e <TIM_OC3_SetConfig+0x72>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a2a      	ldr	r2, [pc, #168]	; (8008ffc <TIM_OC3_SetConfig+0x110>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d003      	beq.n	8008f5e <TIM_OC3_SetConfig+0x72>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a29      	ldr	r2, [pc, #164]	; (8009000 <TIM_OC3_SetConfig+0x114>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d10d      	bne.n	8008f7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a1e      	ldr	r2, [pc, #120]	; (8008ff8 <TIM_OC3_SetConfig+0x10c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d013      	beq.n	8008faa <TIM_OC3_SetConfig+0xbe>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1d      	ldr	r2, [pc, #116]	; (8008ffc <TIM_OC3_SetConfig+0x110>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00f      	beq.n	8008faa <TIM_OC3_SetConfig+0xbe>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a1d      	ldr	r2, [pc, #116]	; (8009004 <TIM_OC3_SetConfig+0x118>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d00b      	beq.n	8008faa <TIM_OC3_SetConfig+0xbe>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a1c      	ldr	r2, [pc, #112]	; (8009008 <TIM_OC3_SetConfig+0x11c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d007      	beq.n	8008faa <TIM_OC3_SetConfig+0xbe>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a1b      	ldr	r2, [pc, #108]	; (800900c <TIM_OC3_SetConfig+0x120>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d003      	beq.n	8008faa <TIM_OC3_SetConfig+0xbe>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a16      	ldr	r2, [pc, #88]	; (8009000 <TIM_OC3_SetConfig+0x114>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d113      	bne.n	8008fd2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	621a      	str	r2, [r3, #32]
}
 8008fec:	bf00      	nop
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	40012c00 	.word	0x40012c00
 8008ffc:	40013400 	.word	0x40013400
 8009000:	40015000 	.word	0x40015000
 8009004:	40014000 	.word	0x40014000
 8009008:	40014400 	.word	0x40014400
 800900c:	40014800 	.word	0x40014800

08009010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800904a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800905e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	031b      	lsls	r3, r3, #12
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4313      	orrs	r3, r2
 800906a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a2c      	ldr	r2, [pc, #176]	; (8009120 <TIM_OC4_SetConfig+0x110>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d007      	beq.n	8009084 <TIM_OC4_SetConfig+0x74>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a2b      	ldr	r2, [pc, #172]	; (8009124 <TIM_OC4_SetConfig+0x114>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d003      	beq.n	8009084 <TIM_OC4_SetConfig+0x74>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a2a      	ldr	r2, [pc, #168]	; (8009128 <TIM_OC4_SetConfig+0x118>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d10d      	bne.n	80090a0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800908a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	031b      	lsls	r3, r3, #12
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800909e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <TIM_OC4_SetConfig+0x110>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <TIM_OC4_SetConfig+0xc0>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a1e      	ldr	r2, [pc, #120]	; (8009124 <TIM_OC4_SetConfig+0x114>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00f      	beq.n	80090d0 <TIM_OC4_SetConfig+0xc0>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a1e      	ldr	r2, [pc, #120]	; (800912c <TIM_OC4_SetConfig+0x11c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00b      	beq.n	80090d0 <TIM_OC4_SetConfig+0xc0>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a1d      	ldr	r2, [pc, #116]	; (8009130 <TIM_OC4_SetConfig+0x120>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_OC4_SetConfig+0xc0>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a1c      	ldr	r2, [pc, #112]	; (8009134 <TIM_OC4_SetConfig+0x124>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_OC4_SetConfig+0xc0>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a17      	ldr	r2, [pc, #92]	; (8009128 <TIM_OC4_SetConfig+0x118>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d113      	bne.n	80090f8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	019b      	lsls	r3, r3, #6
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	019b      	lsls	r3, r3, #6
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	621a      	str	r2, [r3, #32]
}
 8009112:	bf00      	nop
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40012c00 	.word	0x40012c00
 8009124:	40013400 	.word	0x40013400
 8009128:	40015000 	.word	0x40015000
 800912c:	40014000 	.word	0x40014000
 8009130:	40014400 	.word	0x40014400
 8009134:	40014800 	.word	0x40014800

08009138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800917c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	041b      	lsls	r3, r3, #16
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a19      	ldr	r2, [pc, #100]	; (80091f4 <TIM_OC5_SetConfig+0xbc>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <TIM_OC5_SetConfig+0x82>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a18      	ldr	r2, [pc, #96]	; (80091f8 <TIM_OC5_SetConfig+0xc0>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00f      	beq.n	80091ba <TIM_OC5_SetConfig+0x82>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a17      	ldr	r2, [pc, #92]	; (80091fc <TIM_OC5_SetConfig+0xc4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00b      	beq.n	80091ba <TIM_OC5_SetConfig+0x82>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a16      	ldr	r2, [pc, #88]	; (8009200 <TIM_OC5_SetConfig+0xc8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <TIM_OC5_SetConfig+0x82>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a15      	ldr	r2, [pc, #84]	; (8009204 <TIM_OC5_SetConfig+0xcc>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d003      	beq.n	80091ba <TIM_OC5_SetConfig+0x82>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a14      	ldr	r2, [pc, #80]	; (8009208 <TIM_OC5_SetConfig+0xd0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d109      	bne.n	80091ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	621a      	str	r2, [r3, #32]
}
 80091e8:	bf00      	nop
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	40012c00 	.word	0x40012c00
 80091f8:	40013400 	.word	0x40013400
 80091fc:	40014000 	.word	0x40014000
 8009200:	40014400 	.word	0x40014400
 8009204:	40014800 	.word	0x40014800
 8009208:	40015000 	.word	0x40015000

0800920c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800923a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800923e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	051b      	lsls	r3, r3, #20
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a1a      	ldr	r2, [pc, #104]	; (80092cc <TIM_OC6_SetConfig+0xc0>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d013      	beq.n	8009290 <TIM_OC6_SetConfig+0x84>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a19      	ldr	r2, [pc, #100]	; (80092d0 <TIM_OC6_SetConfig+0xc4>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00f      	beq.n	8009290 <TIM_OC6_SetConfig+0x84>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a18      	ldr	r2, [pc, #96]	; (80092d4 <TIM_OC6_SetConfig+0xc8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00b      	beq.n	8009290 <TIM_OC6_SetConfig+0x84>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a17      	ldr	r2, [pc, #92]	; (80092d8 <TIM_OC6_SetConfig+0xcc>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d007      	beq.n	8009290 <TIM_OC6_SetConfig+0x84>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a16      	ldr	r2, [pc, #88]	; (80092dc <TIM_OC6_SetConfig+0xd0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d003      	beq.n	8009290 <TIM_OC6_SetConfig+0x84>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a15      	ldr	r2, [pc, #84]	; (80092e0 <TIM_OC6_SetConfig+0xd4>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d109      	bne.n	80092a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009296:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	029b      	lsls	r3, r3, #10
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	621a      	str	r2, [r3, #32]
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40012c00 	.word	0x40012c00
 80092d0:	40013400 	.word	0x40013400
 80092d4:	40014000 	.word	0x40014000
 80092d8:	40014400 	.word	0x40014400
 80092dc:	40014800 	.word	0x40014800
 80092e0:	40015000 	.word	0x40015000

080092e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	f023 0201 	bic.w	r2, r3, #1
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	4a28      	ldr	r2, [pc, #160]	; (80093b0 <TIM_TI1_SetConfig+0xcc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d01b      	beq.n	800934a <TIM_TI1_SetConfig+0x66>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009318:	d017      	beq.n	800934a <TIM_TI1_SetConfig+0x66>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4a25      	ldr	r2, [pc, #148]	; (80093b4 <TIM_TI1_SetConfig+0xd0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d013      	beq.n	800934a <TIM_TI1_SetConfig+0x66>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4a24      	ldr	r2, [pc, #144]	; (80093b8 <TIM_TI1_SetConfig+0xd4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d00f      	beq.n	800934a <TIM_TI1_SetConfig+0x66>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4a23      	ldr	r2, [pc, #140]	; (80093bc <TIM_TI1_SetConfig+0xd8>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00b      	beq.n	800934a <TIM_TI1_SetConfig+0x66>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4a22      	ldr	r2, [pc, #136]	; (80093c0 <TIM_TI1_SetConfig+0xdc>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d007      	beq.n	800934a <TIM_TI1_SetConfig+0x66>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4a21      	ldr	r2, [pc, #132]	; (80093c4 <TIM_TI1_SetConfig+0xe0>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d003      	beq.n	800934a <TIM_TI1_SetConfig+0x66>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4a20      	ldr	r2, [pc, #128]	; (80093c8 <TIM_TI1_SetConfig+0xe4>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d101      	bne.n	800934e <TIM_TI1_SetConfig+0x6a>
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <TIM_TI1_SetConfig+0x6c>
 800934e:	2300      	movs	r3, #0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d008      	beq.n	8009366 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4313      	orrs	r3, r2
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e003      	b.n	800936e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f043 0301 	orr.w	r3, r3, #1
 800936c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	b2db      	uxtb	r3, r3
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f023 030a 	bic.w	r3, r3, #10
 8009388:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f003 030a 	and.w	r3, r3, #10
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	4313      	orrs	r3, r2
 8009394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	621a      	str	r2, [r3, #32]
}
 80093a2:	bf00      	nop
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	40012c00 	.word	0x40012c00
 80093b4:	40000400 	.word	0x40000400
 80093b8:	40000800 	.word	0x40000800
 80093bc:	40000c00 	.word	0x40000c00
 80093c0:	40013400 	.word	0x40013400
 80093c4:	40014000 	.word	0x40014000
 80093c8:	40015000 	.word	0x40015000

080093cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	f023 0210 	bic.w	r2, r3, #16
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	021b      	lsls	r3, r3, #8
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800940a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	031b      	lsls	r3, r3, #12
 8009410:	b29b      	uxth	r3, r3
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800941e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	4313      	orrs	r3, r2
 800942c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	621a      	str	r2, [r3, #32]
}
 800943a:	bf00      	nop
 800943c:	371c      	adds	r7, #28
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009446:	b480      	push	{r7}
 8009448:	b087      	sub	sp, #28
 800944a:	af00      	add	r7, sp, #0
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	607a      	str	r2, [r7, #4]
 8009452:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009482:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	b2db      	uxtb	r3, r3
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009496:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	021b      	lsls	r3, r3, #8
 800949c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80094be:	b480      	push	{r7}
 80094c0:	b087      	sub	sp, #28
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
 80094ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	031b      	lsls	r3, r3, #12
 8009502:	b29b      	uxth	r3, r3
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009510:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	031b      	lsls	r3, r3, #12
 8009516:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	4313      	orrs	r3, r2
 800951e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	621a      	str	r2, [r3, #32]
}
 800952c:	bf00      	nop
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f003 031f 	and.w	r3, r3, #31
 800954a:	2201      	movs	r2, #1
 800954c:	fa02 f303 	lsl.w	r3, r2, r3
 8009550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a1a      	ldr	r2, [r3, #32]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	43db      	mvns	r3, r3
 800955a:	401a      	ands	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6a1a      	ldr	r2, [r3, #32]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f003 031f 	and.w	r3, r3, #31
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	fa01 f303 	lsl.w	r3, r1, r3
 8009570:	431a      	orrs	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	621a      	str	r2, [r3, #32]
}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
	...

08009584 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <HAL_TIMEx_PWMN_Start+0x24>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b01      	cmp	r3, #1
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	e022      	b.n	80095ee <HAL_TIMEx_PWMN_Start+0x6a>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d109      	bne.n	80095c2 <HAL_TIMEx_PWMN_Start+0x3e>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	bf14      	ite	ne
 80095ba:	2301      	movne	r3, #1
 80095bc:	2300      	moveq	r3, #0
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	e015      	b.n	80095ee <HAL_TIMEx_PWMN_Start+0x6a>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d109      	bne.n	80095dc <HAL_TIMEx_PWMN_Start+0x58>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	bf14      	ite	ne
 80095d4:	2301      	movne	r3, #1
 80095d6:	2300      	moveq	r3, #0
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	e008      	b.n	80095ee <HAL_TIMEx_PWMN_Start+0x6a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	bf14      	ite	ne
 80095e8:	2301      	movne	r3, #1
 80095ea:	2300      	moveq	r3, #0
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e073      	b.n	80096de <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d104      	bne.n	8009606 <HAL_TIMEx_PWMN_Start+0x82>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009604:	e013      	b.n	800962e <HAL_TIMEx_PWMN_Start+0xaa>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b04      	cmp	r3, #4
 800960a:	d104      	bne.n	8009616 <HAL_TIMEx_PWMN_Start+0x92>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2202      	movs	r2, #2
 8009610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009614:	e00b      	b.n	800962e <HAL_TIMEx_PWMN_Start+0xaa>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b08      	cmp	r3, #8
 800961a:	d104      	bne.n	8009626 <HAL_TIMEx_PWMN_Start+0xa2>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009624:	e003      	b.n	800962e <HAL_TIMEx_PWMN_Start+0xaa>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2202      	movs	r2, #2
 800962a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2204      	movs	r2, #4
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f9ae 	bl	8009998 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800964a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a25      	ldr	r2, [pc, #148]	; (80096e8 <HAL_TIMEx_PWMN_Start+0x164>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d022      	beq.n	800969c <HAL_TIMEx_PWMN_Start+0x118>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965e:	d01d      	beq.n	800969c <HAL_TIMEx_PWMN_Start+0x118>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a21      	ldr	r2, [pc, #132]	; (80096ec <HAL_TIMEx_PWMN_Start+0x168>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d018      	beq.n	800969c <HAL_TIMEx_PWMN_Start+0x118>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a20      	ldr	r2, [pc, #128]	; (80096f0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d013      	beq.n	800969c <HAL_TIMEx_PWMN_Start+0x118>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a1e      	ldr	r2, [pc, #120]	; (80096f4 <HAL_TIMEx_PWMN_Start+0x170>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00e      	beq.n	800969c <HAL_TIMEx_PWMN_Start+0x118>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a1d      	ldr	r2, [pc, #116]	; (80096f8 <HAL_TIMEx_PWMN_Start+0x174>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d009      	beq.n	800969c <HAL_TIMEx_PWMN_Start+0x118>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <HAL_TIMEx_PWMN_Start+0x178>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d004      	beq.n	800969c <HAL_TIMEx_PWMN_Start+0x118>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a1a      	ldr	r2, [pc, #104]	; (8009700 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d115      	bne.n	80096c8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689a      	ldr	r2, [r3, #8]
 80096a2:	4b18      	ldr	r3, [pc, #96]	; (8009704 <HAL_TIMEx_PWMN_Start+0x180>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b06      	cmp	r3, #6
 80096ac:	d015      	beq.n	80096da <HAL_TIMEx_PWMN_Start+0x156>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096b4:	d011      	beq.n	80096da <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0201 	orr.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c6:	e008      	b.n	80096da <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0201 	orr.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	e000      	b.n	80096dc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	40012c00 	.word	0x40012c00
 80096ec:	40000400 	.word	0x40000400
 80096f0:	40000800 	.word	0x40000800
 80096f4:	40000c00 	.word	0x40000c00
 80096f8:	40013400 	.word	0x40013400
 80096fc:	40014000 	.word	0x40014000
 8009700:	40015000 	.word	0x40015000
 8009704:	00010007 	.word	0x00010007

08009708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800971c:	2302      	movs	r3, #2
 800971e:	e074      	b.n	800980a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a34      	ldr	r2, [pc, #208]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d009      	beq.n	800975e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a33      	ldr	r2, [pc, #204]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a31      	ldr	r2, [pc, #196]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d108      	bne.n	8009770 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009764:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4313      	orrs	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a21      	ldr	r2, [pc, #132]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d022      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a0:	d01d      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a1f      	ldr	r2, [pc, #124]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d018      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1d      	ldr	r2, [pc, #116]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d013      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	; (800982c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00e      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a15      	ldr	r2, [pc, #84]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d009      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a18      	ldr	r2, [pc, #96]	; (8009830 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d004      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a11      	ldr	r2, [pc, #68]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d10c      	bne.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	40012c00 	.word	0x40012c00
 800981c:	40013400 	.word	0x40013400
 8009820:	40015000 	.word	0x40015000
 8009824:	40000400 	.word	0x40000400
 8009828:	40000800 	.word	0x40000800
 800982c:	40000c00 	.word	0x40000c00
 8009830:	40014000 	.word	0x40014000

08009834 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800984c:	2302      	movs	r3, #2
 800984e:	e096      	b.n	800997e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	4313      	orrs	r3, r2
 8009864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	4313      	orrs	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	4313      	orrs	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4313      	orrs	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b6:	4313      	orrs	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	041b      	lsls	r3, r3, #16
 80098c6:	4313      	orrs	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a2f      	ldr	r2, [pc, #188]	; (800998c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d009      	beq.n	80098e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a2d      	ldr	r2, [pc, #180]	; (8009990 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d004      	beq.n	80098e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a2c      	ldr	r2, [pc, #176]	; (8009994 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d106      	bne.n	80098f6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a24      	ldr	r2, [pc, #144]	; (800998c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d009      	beq.n	8009914 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a22      	ldr	r2, [pc, #136]	; (8009990 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a21      	ldr	r2, [pc, #132]	; (8009994 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d12b      	bne.n	800996c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	051b      	lsls	r3, r3, #20
 8009920:	4313      	orrs	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a11      	ldr	r2, [pc, #68]	; (800998c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d009      	beq.n	800995e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a10      	ldr	r2, [pc, #64]	; (8009990 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d004      	beq.n	800995e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a0e      	ldr	r2, [pc, #56]	; (8009994 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d106      	bne.n	800996c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	40012c00 	.word	0x40012c00
 8009990:	40013400 	.word	0x40013400
 8009994:	40015000 	.word	0x40015000

08009998 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f003 031f 	and.w	r3, r3, #31
 80099aa:	2204      	movs	r2, #4
 80099ac:	fa02 f303 	lsl.w	r3, r2, r3
 80099b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1a      	ldr	r2, [r3, #32]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	43db      	mvns	r3, r3
 80099ba:	401a      	ands	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a1a      	ldr	r2, [r3, #32]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f003 031f 	and.w	r3, r3, #31
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	fa01 f303 	lsl.w	r3, r1, r3
 80099d0:	431a      	orrs	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	621a      	str	r2, [r3, #32]
}
 80099d6:	bf00      	nop
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e042      	b.n	8009a7a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d106      	bne.n	8009a0c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7f9 f96e 	bl	8002ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2224      	movs	r2, #36	; 0x24
 8009a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0201 	bic.w	r2, r2, #1
 8009a22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f82d 	bl	8009a84 <UART_SetConfig>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d101      	bne.n	8009a34 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e022      	b.n	8009a7a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fb1d 	bl	800a07c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 0201 	orr.w	r2, r2, #1
 8009a70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fba4 	bl	800a1c0 <UART_CheckIdleState>
 8009a78:	4603      	mov	r3, r0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a88:	b08c      	sub	sp, #48	; 0x30
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	4baa      	ldr	r3, [pc, #680]	; (8009d5c <UART_SetConfig+0x2d8>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009abc:	430b      	orrs	r3, r1
 8009abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a9f      	ldr	r2, [pc, #636]	; (8009d60 <UART_SetConfig+0x2dc>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d004      	beq.n	8009af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aec:	4313      	orrs	r3, r2
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009afa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b04:	430b      	orrs	r3, r1
 8009b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	f023 010f 	bic.w	r1, r3, #15
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a90      	ldr	r2, [pc, #576]	; (8009d64 <UART_SetConfig+0x2e0>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d125      	bne.n	8009b74 <UART_SetConfig+0xf0>
 8009b28:	4b8f      	ldr	r3, [pc, #572]	; (8009d68 <UART_SetConfig+0x2e4>)
 8009b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d81a      	bhi.n	8009b6c <UART_SetConfig+0xe8>
 8009b36:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <UART_SetConfig+0xb8>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b4d 	.word	0x08009b4d
 8009b40:	08009b5d 	.word	0x08009b5d
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b52:	e116      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009b54:	2302      	movs	r3, #2
 8009b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b5a:	e112      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b62:	e10e      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b6a:	e10a      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b72:	e106      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a7c      	ldr	r2, [pc, #496]	; (8009d6c <UART_SetConfig+0x2e8>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d138      	bne.n	8009bf0 <UART_SetConfig+0x16c>
 8009b7e:	4b7a      	ldr	r3, [pc, #488]	; (8009d68 <UART_SetConfig+0x2e4>)
 8009b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b84:	f003 030c 	and.w	r3, r3, #12
 8009b88:	2b0c      	cmp	r3, #12
 8009b8a:	d82d      	bhi.n	8009be8 <UART_SetConfig+0x164>
 8009b8c:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <UART_SetConfig+0x110>)
 8009b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b92:	bf00      	nop
 8009b94:	08009bc9 	.word	0x08009bc9
 8009b98:	08009be9 	.word	0x08009be9
 8009b9c:	08009be9 	.word	0x08009be9
 8009ba0:	08009be9 	.word	0x08009be9
 8009ba4:	08009bd9 	.word	0x08009bd9
 8009ba8:	08009be9 	.word	0x08009be9
 8009bac:	08009be9 	.word	0x08009be9
 8009bb0:	08009be9 	.word	0x08009be9
 8009bb4:	08009bd1 	.word	0x08009bd1
 8009bb8:	08009be9 	.word	0x08009be9
 8009bbc:	08009be9 	.word	0x08009be9
 8009bc0:	08009be9 	.word	0x08009be9
 8009bc4:	08009be1 	.word	0x08009be1
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bce:	e0d8      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bd6:	e0d4      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bde:	e0d0      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be6:	e0cc      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bee:	e0c8      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a5e      	ldr	r2, [pc, #376]	; (8009d70 <UART_SetConfig+0x2ec>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d125      	bne.n	8009c46 <UART_SetConfig+0x1c2>
 8009bfa:	4b5b      	ldr	r3, [pc, #364]	; (8009d68 <UART_SetConfig+0x2e4>)
 8009bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c04:	2b30      	cmp	r3, #48	; 0x30
 8009c06:	d016      	beq.n	8009c36 <UART_SetConfig+0x1b2>
 8009c08:	2b30      	cmp	r3, #48	; 0x30
 8009c0a:	d818      	bhi.n	8009c3e <UART_SetConfig+0x1ba>
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	d00a      	beq.n	8009c26 <UART_SetConfig+0x1a2>
 8009c10:	2b20      	cmp	r3, #32
 8009c12:	d814      	bhi.n	8009c3e <UART_SetConfig+0x1ba>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <UART_SetConfig+0x19a>
 8009c18:	2b10      	cmp	r3, #16
 8009c1a:	d008      	beq.n	8009c2e <UART_SetConfig+0x1aa>
 8009c1c:	e00f      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c24:	e0ad      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c26:	2302      	movs	r3, #2
 8009c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c2c:	e0a9      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c2e:	2304      	movs	r3, #4
 8009c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c34:	e0a5      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c36:	2308      	movs	r3, #8
 8009c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c3c:	e0a1      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c3e:	2310      	movs	r3, #16
 8009c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c44:	e09d      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a4a      	ldr	r2, [pc, #296]	; (8009d74 <UART_SetConfig+0x2f0>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d125      	bne.n	8009c9c <UART_SetConfig+0x218>
 8009c50:	4b45      	ldr	r3, [pc, #276]	; (8009d68 <UART_SetConfig+0x2e4>)
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8009c5c:	d016      	beq.n	8009c8c <UART_SetConfig+0x208>
 8009c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8009c60:	d818      	bhi.n	8009c94 <UART_SetConfig+0x210>
 8009c62:	2b80      	cmp	r3, #128	; 0x80
 8009c64:	d00a      	beq.n	8009c7c <UART_SetConfig+0x1f8>
 8009c66:	2b80      	cmp	r3, #128	; 0x80
 8009c68:	d814      	bhi.n	8009c94 <UART_SetConfig+0x210>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <UART_SetConfig+0x1f0>
 8009c6e:	2b40      	cmp	r3, #64	; 0x40
 8009c70:	d008      	beq.n	8009c84 <UART_SetConfig+0x200>
 8009c72:	e00f      	b.n	8009c94 <UART_SetConfig+0x210>
 8009c74:	2300      	movs	r3, #0
 8009c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c7a:	e082      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c82:	e07e      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c84:	2304      	movs	r3, #4
 8009c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c8a:	e07a      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c8c:	2308      	movs	r3, #8
 8009c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c92:	e076      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c94:	2310      	movs	r3, #16
 8009c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c9a:	e072      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a35      	ldr	r2, [pc, #212]	; (8009d78 <UART_SetConfig+0x2f4>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d12a      	bne.n	8009cfc <UART_SetConfig+0x278>
 8009ca6:	4b30      	ldr	r3, [pc, #192]	; (8009d68 <UART_SetConfig+0x2e4>)
 8009ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cb4:	d01a      	beq.n	8009cec <UART_SetConfig+0x268>
 8009cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cba:	d81b      	bhi.n	8009cf4 <UART_SetConfig+0x270>
 8009cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc0:	d00c      	beq.n	8009cdc <UART_SetConfig+0x258>
 8009cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc6:	d815      	bhi.n	8009cf4 <UART_SetConfig+0x270>
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <UART_SetConfig+0x250>
 8009ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd0:	d008      	beq.n	8009ce4 <UART_SetConfig+0x260>
 8009cd2:	e00f      	b.n	8009cf4 <UART_SetConfig+0x270>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cda:	e052      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ce2:	e04e      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cea:	e04a      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009cec:	2308      	movs	r3, #8
 8009cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cf2:	e046      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cfa:	e042      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a17      	ldr	r2, [pc, #92]	; (8009d60 <UART_SetConfig+0x2dc>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d13a      	bne.n	8009d7c <UART_SetConfig+0x2f8>
 8009d06:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <UART_SetConfig+0x2e4>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d14:	d01a      	beq.n	8009d4c <UART_SetConfig+0x2c8>
 8009d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d1a:	d81b      	bhi.n	8009d54 <UART_SetConfig+0x2d0>
 8009d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d20:	d00c      	beq.n	8009d3c <UART_SetConfig+0x2b8>
 8009d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d26:	d815      	bhi.n	8009d54 <UART_SetConfig+0x2d0>
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <UART_SetConfig+0x2b0>
 8009d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d30:	d008      	beq.n	8009d44 <UART_SetConfig+0x2c0>
 8009d32:	e00f      	b.n	8009d54 <UART_SetConfig+0x2d0>
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d3a:	e022      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d42:	e01e      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009d44:	2304      	movs	r3, #4
 8009d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d4a:	e01a      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d52:	e016      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009d54:	2310      	movs	r3, #16
 8009d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d5a:	e012      	b.n	8009d82 <UART_SetConfig+0x2fe>
 8009d5c:	cfff69f3 	.word	0xcfff69f3
 8009d60:	40008000 	.word	0x40008000
 8009d64:	40013800 	.word	0x40013800
 8009d68:	40021000 	.word	0x40021000
 8009d6c:	40004400 	.word	0x40004400
 8009d70:	40004800 	.word	0x40004800
 8009d74:	40004c00 	.word	0x40004c00
 8009d78:	40005000 	.word	0x40005000
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4aae      	ldr	r2, [pc, #696]	; (800a040 <UART_SetConfig+0x5bc>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	f040 8097 	bne.w	8009ebc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d92:	2b08      	cmp	r3, #8
 8009d94:	d823      	bhi.n	8009dde <UART_SetConfig+0x35a>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <UART_SetConfig+0x318>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009dc1 	.word	0x08009dc1
 8009da0:	08009ddf 	.word	0x08009ddf
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009ddf 	.word	0x08009ddf
 8009dac:	08009dcf 	.word	0x08009dcf
 8009db0:	08009ddf 	.word	0x08009ddf
 8009db4:	08009ddf 	.word	0x08009ddf
 8009db8:	08009ddf 	.word	0x08009ddf
 8009dbc:	08009dd7 	.word	0x08009dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc0:	f7fd fdd4 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8009dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dc6:	e010      	b.n	8009dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dc8:	4b9e      	ldr	r3, [pc, #632]	; (800a044 <UART_SetConfig+0x5c0>)
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009dcc:	e00d      	b.n	8009dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dce:	f7fd fd5f 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8009dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dd4:	e009      	b.n	8009dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ddc:	e005      	b.n	8009dea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8130 	beq.w	800a052 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	4a94      	ldr	r2, [pc, #592]	; (800a048 <UART_SetConfig+0x5c4>)
 8009df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	4413      	add	r3, r2
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d305      	bcc.n	8009e22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d903      	bls.n	8009e2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e28:	e113      	b.n	800a052 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	60bb      	str	r3, [r7, #8]
 8009e30:	60fa      	str	r2, [r7, #12]
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	4a84      	ldr	r2, [pc, #528]	; (800a048 <UART_SetConfig+0x5c4>)
 8009e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2200      	movs	r2, #0
 8009e40:	603b      	str	r3, [r7, #0]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e4c:	f7f6 fd1a 	bl	8000884 <__aeabi_uldivmod>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4610      	mov	r0, r2
 8009e56:	4619      	mov	r1, r3
 8009e58:	f04f 0200 	mov.w	r2, #0
 8009e5c:	f04f 0300 	mov.w	r3, #0
 8009e60:	020b      	lsls	r3, r1, #8
 8009e62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e66:	0202      	lsls	r2, r0, #8
 8009e68:	6979      	ldr	r1, [r7, #20]
 8009e6a:	6849      	ldr	r1, [r1, #4]
 8009e6c:	0849      	lsrs	r1, r1, #1
 8009e6e:	2000      	movs	r0, #0
 8009e70:	460c      	mov	r4, r1
 8009e72:	4605      	mov	r5, r0
 8009e74:	eb12 0804 	adds.w	r8, r2, r4
 8009e78:	eb43 0905 	adc.w	r9, r3, r5
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	469a      	mov	sl, r3
 8009e84:	4693      	mov	fp, r2
 8009e86:	4652      	mov	r2, sl
 8009e88:	465b      	mov	r3, fp
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	f7f6 fcf9 	bl	8000884 <__aeabi_uldivmod>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	4613      	mov	r3, r2
 8009e98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ea0:	d308      	bcc.n	8009eb4 <UART_SetConfig+0x430>
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ea8:	d204      	bcs.n	8009eb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6a3a      	ldr	r2, [r7, #32]
 8009eb0:	60da      	str	r2, [r3, #12]
 8009eb2:	e0ce      	b.n	800a052 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009eba:	e0ca      	b.n	800a052 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec4:	d166      	bne.n	8009f94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009eca:	2b08      	cmp	r3, #8
 8009ecc:	d827      	bhi.n	8009f1e <UART_SetConfig+0x49a>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <UART_SetConfig+0x450>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009ef9 	.word	0x08009ef9
 8009ed8:	08009f01 	.word	0x08009f01
 8009edc:	08009f09 	.word	0x08009f09
 8009ee0:	08009f1f 	.word	0x08009f1f
 8009ee4:	08009f0f 	.word	0x08009f0f
 8009ee8:	08009f1f 	.word	0x08009f1f
 8009eec:	08009f1f 	.word	0x08009f1f
 8009ef0:	08009f1f 	.word	0x08009f1f
 8009ef4:	08009f17 	.word	0x08009f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ef8:	f7fd fd38 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8009efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009efe:	e014      	b.n	8009f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f00:	f7fd fd4a 	bl	8007998 <HAL_RCC_GetPCLK2Freq>
 8009f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f06:	e010      	b.n	8009f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f08:	4b4e      	ldr	r3, [pc, #312]	; (800a044 <UART_SetConfig+0x5c0>)
 8009f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f0c:	e00d      	b.n	8009f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f0e:	f7fd fcbf 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8009f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f14:	e009      	b.n	8009f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f1c:	e005      	b.n	8009f2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8090 	beq.w	800a052 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	4a44      	ldr	r2, [pc, #272]	; (800a048 <UART_SetConfig+0x5c4>)
 8009f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f44:	005a      	lsls	r2, r3, #1
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	085b      	lsrs	r3, r3, #1
 8009f4c:	441a      	add	r2, r3
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	2b0f      	cmp	r3, #15
 8009f5c:	d916      	bls.n	8009f8c <UART_SetConfig+0x508>
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f64:	d212      	bcs.n	8009f8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	f023 030f 	bic.w	r3, r3, #15
 8009f6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	085b      	lsrs	r3, r3, #1
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f003 0307 	and.w	r3, r3, #7
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	8bfb      	ldrh	r3, [r7, #30]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	8bfa      	ldrh	r2, [r7, #30]
 8009f88:	60da      	str	r2, [r3, #12]
 8009f8a:	e062      	b.n	800a052 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009f92:	e05e      	b.n	800a052 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d828      	bhi.n	8009fee <UART_SetConfig+0x56a>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <UART_SetConfig+0x520>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	08009fc9 	.word	0x08009fc9
 8009fa8:	08009fd1 	.word	0x08009fd1
 8009fac:	08009fd9 	.word	0x08009fd9
 8009fb0:	08009fef 	.word	0x08009fef
 8009fb4:	08009fdf 	.word	0x08009fdf
 8009fb8:	08009fef 	.word	0x08009fef
 8009fbc:	08009fef 	.word	0x08009fef
 8009fc0:	08009fef 	.word	0x08009fef
 8009fc4:	08009fe7 	.word	0x08009fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fc8:	f7fd fcd0 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8009fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fce:	e014      	b.n	8009ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fd0:	f7fd fce2 	bl	8007998 <HAL_RCC_GetPCLK2Freq>
 8009fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fd6:	e010      	b.n	8009ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <UART_SetConfig+0x5c0>)
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fdc:	e00d      	b.n	8009ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fde:	f7fd fc57 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8009fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fe4:	e009      	b.n	8009ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fec:	e005      	b.n	8009ffa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ff8:	bf00      	nop
    }

    if (pclk != 0U)
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d028      	beq.n	800a052 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	4a10      	ldr	r2, [pc, #64]	; (800a048 <UART_SetConfig+0x5c4>)
 800a006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	085b      	lsrs	r3, r3, #1
 800a018:	441a      	add	r2, r3
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a022:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	2b0f      	cmp	r3, #15
 800a028:	d910      	bls.n	800a04c <UART_SetConfig+0x5c8>
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a030:	d20c      	bcs.n	800a04c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	b29a      	uxth	r2, r3
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	60da      	str	r2, [r3, #12]
 800a03c:	e009      	b.n	800a052 <UART_SetConfig+0x5ce>
 800a03e:	bf00      	nop
 800a040:	40008000 	.word	0x40008000
 800a044:	00f42400 	.word	0x00f42400
 800a048:	0800b634 	.word	0x0800b634
      }
      else
      {
        ret = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2201      	movs	r2, #1
 800a056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2200      	movs	r2, #0
 800a066:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2200      	movs	r2, #0
 800a06c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a06e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a072:	4618      	mov	r0, r3
 800a074:	3730      	adds	r7, #48	; 0x30
 800a076:	46bd      	mov	sp, r7
 800a078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a07c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00a      	beq.n	800a0ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00a      	beq.n	800a10c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	f003 0310 	and.w	r3, r3, #16
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00a      	beq.n	800a12e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a132:	f003 0320 	and.w	r3, r3, #32
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00a      	beq.n	800a150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	430a      	orrs	r2, r1
 800a14e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01a      	beq.n	800a192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a17a:	d10a      	bne.n	800a192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	430a      	orrs	r2, r1
 800a190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00a      	beq.n	800a1b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	605a      	str	r2, [r3, #4]
  }
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1d0:	f7f9 f8f0 	bl	80033b4 <HAL_GetTick>
 800a1d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0308 	and.w	r3, r3, #8
 800a1e0:	2b08      	cmp	r3, #8
 800a1e2:	d10e      	bne.n	800a202 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f82f 	bl	800a256 <UART_WaitOnFlagUntilTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e025      	b.n	800a24e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0304 	and.w	r3, r3, #4
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d10e      	bne.n	800a22e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f819 	bl	800a256 <UART_WaitOnFlagUntilTimeout>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e00f      	b.n	800a24e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2220      	movs	r2, #32
 800a23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b09c      	sub	sp, #112	; 0x70
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	603b      	str	r3, [r7, #0]
 800a262:	4613      	mov	r3, r2
 800a264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a266:	e0a9      	b.n	800a3bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26e:	f000 80a5 	beq.w	800a3bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a272:	f7f9 f89f 	bl	80033b4 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a27e:	429a      	cmp	r2, r3
 800a280:	d302      	bcc.n	800a288 <UART_WaitOnFlagUntilTimeout+0x32>
 800a282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a284:	2b00      	cmp	r3, #0
 800a286:	d140      	bne.n	800a30a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a290:	e853 3f00 	ldrex	r3, [r3]
 800a294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a29c:	667b      	str	r3, [r7, #100]	; 0x64
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a2ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2ae:	e841 2300 	strex	r3, r2, [r1]
 800a2b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1e6      	bne.n	800a288 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	f023 0301 	bic.w	r3, r3, #1
 800a2d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2da:	64ba      	str	r2, [r7, #72]	; 0x48
 800a2dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e5      	bne.n	800a2ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e069      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0304 	and.w	r3, r3, #4
 800a314:	2b00      	cmp	r3, #0
 800a316:	d051      	beq.n	800a3bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a326:	d149      	bne.n	800a3bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a330:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	e853 3f00 	ldrex	r3, [r3]
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a346:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	461a      	mov	r2, r3
 800a34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a350:	637b      	str	r3, [r7, #52]	; 0x34
 800a352:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a358:	e841 2300 	strex	r3, r2, [r1]
 800a35c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e6      	bne.n	800a332 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	613b      	str	r3, [r7, #16]
   return(result);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f023 0301 	bic.w	r3, r3, #1
 800a37a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3308      	adds	r3, #8
 800a382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a384:	623a      	str	r2, [r7, #32]
 800a386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	69f9      	ldr	r1, [r7, #28]
 800a38a:	6a3a      	ldr	r2, [r7, #32]
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	61bb      	str	r3, [r7, #24]
   return(result);
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e5      	bne.n	800a364 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2220      	movs	r2, #32
 800a39c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e010      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	69da      	ldr	r2, [r3, #28]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	bf0c      	ite	eq
 800a3cc:	2301      	moveq	r3, #1
 800a3ce:	2300      	movne	r3, #0
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	f43f af46 	beq.w	800a268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3770      	adds	r7, #112	; 0x70
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d101      	bne.n	800a3fc <HAL_UARTEx_DisableFifoMode+0x16>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e027      	b.n	800a44c <HAL_UARTEx_DisableFifoMode+0x66>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2224      	movs	r2, #36	; 0x24
 800a408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0201 	bic.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a42a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2220      	movs	r2, #32
 800a43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a46c:	2302      	movs	r3, #2
 800a46e:	e02d      	b.n	800a4cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2224      	movs	r2, #36	; 0x24
 800a47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f022 0201 	bic.w	r2, r2, #1
 800a496:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f84f 	bl	800a550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d101      	bne.n	800a4ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e02d      	b.n	800a548 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2224      	movs	r2, #36	; 0x24
 800a4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 0201 	bic.w	r2, r2, #1
 800a512:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f811 	bl	800a550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2220      	movs	r2, #32
 800a53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d108      	bne.n	800a572 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a570:	e031      	b.n	800a5d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a572:	2308      	movs	r3, #8
 800a574:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a576:	2308      	movs	r3, #8
 800a578:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	0e5b      	lsrs	r3, r3, #25
 800a582:	b2db      	uxtb	r3, r3
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	0f5b      	lsrs	r3, r3, #29
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 0307 	and.w	r3, r3, #7
 800a598:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	7b3a      	ldrb	r2, [r7, #12]
 800a59e:	4911      	ldr	r1, [pc, #68]	; (800a5e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a5a0:	5c8a      	ldrb	r2, [r1, r2]
 800a5a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5a6:	7b3a      	ldrb	r2, [r7, #12]
 800a5a8:	490f      	ldr	r1, [pc, #60]	; (800a5e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a5aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	7b7a      	ldrb	r2, [r7, #13]
 800a5bc:	4909      	ldr	r1, [pc, #36]	; (800a5e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a5be:	5c8a      	ldrb	r2, [r1, r2]
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5c4:	7b7a      	ldrb	r2, [r7, #13]
 800a5c6:	4908      	ldr	r1, [pc, #32]	; (800a5e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a5c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5d6:	bf00      	nop
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	0800b64c 	.word	0x0800b64c
 800a5e8:	0800b654 	.word	0x0800b654

0800a5ec <__errno>:
 800a5ec:	4b01      	ldr	r3, [pc, #4]	; (800a5f4 <__errno+0x8>)
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	2000000c 	.word	0x2000000c

0800a5f8 <__libc_init_array>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4d0d      	ldr	r5, [pc, #52]	; (800a630 <__libc_init_array+0x38>)
 800a5fc:	4c0d      	ldr	r4, [pc, #52]	; (800a634 <__libc_init_array+0x3c>)
 800a5fe:	1b64      	subs	r4, r4, r5
 800a600:	10a4      	asrs	r4, r4, #2
 800a602:	2600      	movs	r6, #0
 800a604:	42a6      	cmp	r6, r4
 800a606:	d109      	bne.n	800a61c <__libc_init_array+0x24>
 800a608:	4d0b      	ldr	r5, [pc, #44]	; (800a638 <__libc_init_array+0x40>)
 800a60a:	4c0c      	ldr	r4, [pc, #48]	; (800a63c <__libc_init_array+0x44>)
 800a60c:	f000 fffa 	bl	800b604 <_init>
 800a610:	1b64      	subs	r4, r4, r5
 800a612:	10a4      	asrs	r4, r4, #2
 800a614:	2600      	movs	r6, #0
 800a616:	42a6      	cmp	r6, r4
 800a618:	d105      	bne.n	800a626 <__libc_init_array+0x2e>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a620:	4798      	blx	r3
 800a622:	3601      	adds	r6, #1
 800a624:	e7ee      	b.n	800a604 <__libc_init_array+0xc>
 800a626:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62a:	4798      	blx	r3
 800a62c:	3601      	adds	r6, #1
 800a62e:	e7f2      	b.n	800a616 <__libc_init_array+0x1e>
 800a630:	0800ba74 	.word	0x0800ba74
 800a634:	0800ba74 	.word	0x0800ba74
 800a638:	0800ba74 	.word	0x0800ba74
 800a63c:	0800ba78 	.word	0x0800ba78

0800a640 <memset>:
 800a640:	4402      	add	r2, r0
 800a642:	4603      	mov	r3, r0
 800a644:	4293      	cmp	r3, r2
 800a646:	d100      	bne.n	800a64a <memset+0xa>
 800a648:	4770      	bx	lr
 800a64a:	f803 1b01 	strb.w	r1, [r3], #1
 800a64e:	e7f9      	b.n	800a644 <memset+0x4>

0800a650 <cosf>:
 800a650:	ee10 3a10 	vmov	r3, s0
 800a654:	b507      	push	{r0, r1, r2, lr}
 800a656:	4a1e      	ldr	r2, [pc, #120]	; (800a6d0 <cosf+0x80>)
 800a658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a65c:	4293      	cmp	r3, r2
 800a65e:	dc06      	bgt.n	800a66e <cosf+0x1e>
 800a660:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a6d4 <cosf+0x84>
 800a664:	b003      	add	sp, #12
 800a666:	f85d eb04 	ldr.w	lr, [sp], #4
 800a66a:	f000 bb1d 	b.w	800aca8 <__kernel_cosf>
 800a66e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a672:	db04      	blt.n	800a67e <cosf+0x2e>
 800a674:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a678:	b003      	add	sp, #12
 800a67a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a67e:	4668      	mov	r0, sp
 800a680:	f000 f9d2 	bl	800aa28 <__ieee754_rem_pio2f>
 800a684:	f000 0003 	and.w	r0, r0, #3
 800a688:	2801      	cmp	r0, #1
 800a68a:	d009      	beq.n	800a6a0 <cosf+0x50>
 800a68c:	2802      	cmp	r0, #2
 800a68e:	d010      	beq.n	800a6b2 <cosf+0x62>
 800a690:	b9b0      	cbnz	r0, 800a6c0 <cosf+0x70>
 800a692:	eddd 0a01 	vldr	s1, [sp, #4]
 800a696:	ed9d 0a00 	vldr	s0, [sp]
 800a69a:	f000 fb05 	bl	800aca8 <__kernel_cosf>
 800a69e:	e7eb      	b.n	800a678 <cosf+0x28>
 800a6a0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6a4:	ed9d 0a00 	vldr	s0, [sp]
 800a6a8:	f000 fdd4 	bl	800b254 <__kernel_sinf>
 800a6ac:	eeb1 0a40 	vneg.f32	s0, s0
 800a6b0:	e7e2      	b.n	800a678 <cosf+0x28>
 800a6b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6b6:	ed9d 0a00 	vldr	s0, [sp]
 800a6ba:	f000 faf5 	bl	800aca8 <__kernel_cosf>
 800a6be:	e7f5      	b.n	800a6ac <cosf+0x5c>
 800a6c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6c4:	ed9d 0a00 	vldr	s0, [sp]
 800a6c8:	2001      	movs	r0, #1
 800a6ca:	f000 fdc3 	bl	800b254 <__kernel_sinf>
 800a6ce:	e7d3      	b.n	800a678 <cosf+0x28>
 800a6d0:	3f490fd8 	.word	0x3f490fd8
 800a6d4:	00000000 	.word	0x00000000

0800a6d8 <sinf>:
 800a6d8:	ee10 3a10 	vmov	r3, s0
 800a6dc:	b507      	push	{r0, r1, r2, lr}
 800a6de:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <sinf+0x84>)
 800a6e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	dc07      	bgt.n	800a6f8 <sinf+0x20>
 800a6e8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a760 <sinf+0x88>
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	b003      	add	sp, #12
 800a6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f4:	f000 bdae 	b.w	800b254 <__kernel_sinf>
 800a6f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6fc:	db04      	blt.n	800a708 <sinf+0x30>
 800a6fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a702:	b003      	add	sp, #12
 800a704:	f85d fb04 	ldr.w	pc, [sp], #4
 800a708:	4668      	mov	r0, sp
 800a70a:	f000 f98d 	bl	800aa28 <__ieee754_rem_pio2f>
 800a70e:	f000 0003 	and.w	r0, r0, #3
 800a712:	2801      	cmp	r0, #1
 800a714:	d00a      	beq.n	800a72c <sinf+0x54>
 800a716:	2802      	cmp	r0, #2
 800a718:	d00f      	beq.n	800a73a <sinf+0x62>
 800a71a:	b9c0      	cbnz	r0, 800a74e <sinf+0x76>
 800a71c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a720:	ed9d 0a00 	vldr	s0, [sp]
 800a724:	2001      	movs	r0, #1
 800a726:	f000 fd95 	bl	800b254 <__kernel_sinf>
 800a72a:	e7ea      	b.n	800a702 <sinf+0x2a>
 800a72c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a730:	ed9d 0a00 	vldr	s0, [sp]
 800a734:	f000 fab8 	bl	800aca8 <__kernel_cosf>
 800a738:	e7e3      	b.n	800a702 <sinf+0x2a>
 800a73a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a73e:	ed9d 0a00 	vldr	s0, [sp]
 800a742:	2001      	movs	r0, #1
 800a744:	f000 fd86 	bl	800b254 <__kernel_sinf>
 800a748:	eeb1 0a40 	vneg.f32	s0, s0
 800a74c:	e7d9      	b.n	800a702 <sinf+0x2a>
 800a74e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a752:	ed9d 0a00 	vldr	s0, [sp]
 800a756:	f000 faa7 	bl	800aca8 <__kernel_cosf>
 800a75a:	e7f5      	b.n	800a748 <sinf+0x70>
 800a75c:	3f490fd8 	.word	0x3f490fd8
 800a760:	00000000 	.word	0x00000000

0800a764 <atan2f>:
 800a764:	f000 b83e 	b.w	800a7e4 <__ieee754_atan2f>

0800a768 <fmodf>:
 800a768:	b508      	push	{r3, lr}
 800a76a:	ed2d 8b02 	vpush	{d8}
 800a76e:	eef0 8a40 	vmov.f32	s17, s0
 800a772:	eeb0 8a60 	vmov.f32	s16, s1
 800a776:	f000 f8d5 	bl	800a924 <__ieee754_fmodf>
 800a77a:	eef4 8a48 	vcmp.f32	s17, s16
 800a77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a782:	d60c      	bvs.n	800a79e <fmodf+0x36>
 800a784:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a7a4 <fmodf+0x3c>
 800a788:	eeb4 8a68 	vcmp.f32	s16, s17
 800a78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a790:	d105      	bne.n	800a79e <fmodf+0x36>
 800a792:	f7ff ff2b 	bl	800a5ec <__errno>
 800a796:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a79a:	2321      	movs	r3, #33	; 0x21
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	ecbd 8b02 	vpop	{d8}
 800a7a2:	bd08      	pop	{r3, pc}
 800a7a4:	00000000 	.word	0x00000000

0800a7a8 <sqrtf>:
 800a7a8:	b508      	push	{r3, lr}
 800a7aa:	ed2d 8b02 	vpush	{d8}
 800a7ae:	eeb0 8a40 	vmov.f32	s16, s0
 800a7b2:	f000 fa75 	bl	800aca0 <__ieee754_sqrtf>
 800a7b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7be:	d60c      	bvs.n	800a7da <sqrtf+0x32>
 800a7c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a7e0 <sqrtf+0x38>
 800a7c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7cc:	d505      	bpl.n	800a7da <sqrtf+0x32>
 800a7ce:	f7ff ff0d 	bl	800a5ec <__errno>
 800a7d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a7d6:	2321      	movs	r3, #33	; 0x21
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	ecbd 8b02 	vpop	{d8}
 800a7de:	bd08      	pop	{r3, pc}
 800a7e0:	00000000 	.word	0x00000000

0800a7e4 <__ieee754_atan2f>:
 800a7e4:	ee10 2a90 	vmov	r2, s1
 800a7e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a7ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	eef0 7a40 	vmov.f32	s15, s0
 800a7f6:	dc06      	bgt.n	800a806 <__ieee754_atan2f+0x22>
 800a7f8:	ee10 0a10 	vmov	r0, s0
 800a7fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a800:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a804:	dd04      	ble.n	800a810 <__ieee754_atan2f+0x2c>
 800a806:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a80a:	eeb0 0a67 	vmov.f32	s0, s15
 800a80e:	bd10      	pop	{r4, pc}
 800a810:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a814:	d103      	bne.n	800a81e <__ieee754_atan2f+0x3a>
 800a816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a81a:	f000 bd63 	b.w	800b2e4 <atanf>
 800a81e:	1794      	asrs	r4, r2, #30
 800a820:	f004 0402 	and.w	r4, r4, #2
 800a824:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a828:	b943      	cbnz	r3, 800a83c <__ieee754_atan2f+0x58>
 800a82a:	2c02      	cmp	r4, #2
 800a82c:	d05e      	beq.n	800a8ec <__ieee754_atan2f+0x108>
 800a82e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a900 <__ieee754_atan2f+0x11c>
 800a832:	2c03      	cmp	r4, #3
 800a834:	bf08      	it	eq
 800a836:	eef0 7a47 	vmoveq.f32	s15, s14
 800a83a:	e7e6      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a83c:	b941      	cbnz	r1, 800a850 <__ieee754_atan2f+0x6c>
 800a83e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a904 <__ieee754_atan2f+0x120>
 800a842:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a908 <__ieee754_atan2f+0x124>
 800a846:	2800      	cmp	r0, #0
 800a848:	bfb8      	it	lt
 800a84a:	eef0 7a40 	vmovlt.f32	s15, s0
 800a84e:	e7dc      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a850:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a854:	d110      	bne.n	800a878 <__ieee754_atan2f+0x94>
 800a856:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a85a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a85e:	d107      	bne.n	800a870 <__ieee754_atan2f+0x8c>
 800a860:	2c02      	cmp	r4, #2
 800a862:	d846      	bhi.n	800a8f2 <__ieee754_atan2f+0x10e>
 800a864:	4b29      	ldr	r3, [pc, #164]	; (800a90c <__ieee754_atan2f+0x128>)
 800a866:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a86a:	edd4 7a00 	vldr	s15, [r4]
 800a86e:	e7cc      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a870:	2c02      	cmp	r4, #2
 800a872:	d841      	bhi.n	800a8f8 <__ieee754_atan2f+0x114>
 800a874:	4b26      	ldr	r3, [pc, #152]	; (800a910 <__ieee754_atan2f+0x12c>)
 800a876:	e7f6      	b.n	800a866 <__ieee754_atan2f+0x82>
 800a878:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a87c:	d0df      	beq.n	800a83e <__ieee754_atan2f+0x5a>
 800a87e:	1a5b      	subs	r3, r3, r1
 800a880:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a884:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a888:	da1a      	bge.n	800a8c0 <__ieee754_atan2f+0xdc>
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	da01      	bge.n	800a892 <__ieee754_atan2f+0xae>
 800a88e:	313c      	adds	r1, #60	; 0x3c
 800a890:	db19      	blt.n	800a8c6 <__ieee754_atan2f+0xe2>
 800a892:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a896:	f000 fdf9 	bl	800b48c <fabsf>
 800a89a:	f000 fd23 	bl	800b2e4 <atanf>
 800a89e:	eef0 7a40 	vmov.f32	s15, s0
 800a8a2:	2c01      	cmp	r4, #1
 800a8a4:	d012      	beq.n	800a8cc <__ieee754_atan2f+0xe8>
 800a8a6:	2c02      	cmp	r4, #2
 800a8a8:	d017      	beq.n	800a8da <__ieee754_atan2f+0xf6>
 800a8aa:	2c00      	cmp	r4, #0
 800a8ac:	d0ad      	beq.n	800a80a <__ieee754_atan2f+0x26>
 800a8ae:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a914 <__ieee754_atan2f+0x130>
 800a8b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a8b6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a918 <__ieee754_atan2f+0x134>
 800a8ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a8be:	e7a4      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a8c0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a904 <__ieee754_atan2f+0x120>
 800a8c4:	e7ed      	b.n	800a8a2 <__ieee754_atan2f+0xbe>
 800a8c6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a91c <__ieee754_atan2f+0x138>
 800a8ca:	e7ea      	b.n	800a8a2 <__ieee754_atan2f+0xbe>
 800a8cc:	ee17 3a90 	vmov	r3, s15
 800a8d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a8d4:	ee07 3a90 	vmov	s15, r3
 800a8d8:	e797      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a8da:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a914 <__ieee754_atan2f+0x130>
 800a8de:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a8e2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a918 <__ieee754_atan2f+0x134>
 800a8e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a8ea:	e78e      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a8ec:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a918 <__ieee754_atan2f+0x134>
 800a8f0:	e78b      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a8f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a920 <__ieee754_atan2f+0x13c>
 800a8f6:	e788      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a8f8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a91c <__ieee754_atan2f+0x138>
 800a8fc:	e785      	b.n	800a80a <__ieee754_atan2f+0x26>
 800a8fe:	bf00      	nop
 800a900:	c0490fdb 	.word	0xc0490fdb
 800a904:	3fc90fdb 	.word	0x3fc90fdb
 800a908:	bfc90fdb 	.word	0xbfc90fdb
 800a90c:	0800b65c 	.word	0x0800b65c
 800a910:	0800b668 	.word	0x0800b668
 800a914:	33bbbd2e 	.word	0x33bbbd2e
 800a918:	40490fdb 	.word	0x40490fdb
 800a91c:	00000000 	.word	0x00000000
 800a920:	3f490fdb 	.word	0x3f490fdb

0800a924 <__ieee754_fmodf>:
 800a924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a926:	ee10 5a90 	vmov	r5, s1
 800a92a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800a92e:	d009      	beq.n	800a944 <__ieee754_fmodf+0x20>
 800a930:	ee10 2a10 	vmov	r2, s0
 800a934:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a938:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a93c:	da02      	bge.n	800a944 <__ieee754_fmodf+0x20>
 800a93e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a942:	dd04      	ble.n	800a94e <__ieee754_fmodf+0x2a>
 800a944:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a948:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94e:	42a3      	cmp	r3, r4
 800a950:	dbfc      	blt.n	800a94c <__ieee754_fmodf+0x28>
 800a952:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800a956:	d105      	bne.n	800a964 <__ieee754_fmodf+0x40>
 800a958:	4b32      	ldr	r3, [pc, #200]	; (800aa24 <__ieee754_fmodf+0x100>)
 800a95a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800a95e:	ed93 0a00 	vldr	s0, [r3]
 800a962:	e7f3      	b.n	800a94c <__ieee754_fmodf+0x28>
 800a964:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800a968:	d13f      	bne.n	800a9ea <__ieee754_fmodf+0xc6>
 800a96a:	0219      	lsls	r1, r3, #8
 800a96c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800a970:	2900      	cmp	r1, #0
 800a972:	dc37      	bgt.n	800a9e4 <__ieee754_fmodf+0xc0>
 800a974:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800a978:	d13d      	bne.n	800a9f6 <__ieee754_fmodf+0xd2>
 800a97a:	0227      	lsls	r7, r4, #8
 800a97c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a980:	2f00      	cmp	r7, #0
 800a982:	da35      	bge.n	800a9f0 <__ieee754_fmodf+0xcc>
 800a984:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a988:	bfbb      	ittet	lt
 800a98a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a98e:	1a12      	sublt	r2, r2, r0
 800a990:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a994:	4093      	lsllt	r3, r2
 800a996:	bfa8      	it	ge
 800a998:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a99c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a9a0:	bfb5      	itete	lt
 800a9a2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a9a6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800a9aa:	1a52      	sublt	r2, r2, r1
 800a9ac:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800a9b0:	bfb8      	it	lt
 800a9b2:	4094      	lsllt	r4, r2
 800a9b4:	1a40      	subs	r0, r0, r1
 800a9b6:	1b1a      	subs	r2, r3, r4
 800a9b8:	bb00      	cbnz	r0, 800a9fc <__ieee754_fmodf+0xd8>
 800a9ba:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a9be:	bf38      	it	cc
 800a9c0:	4613      	movcc	r3, r2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0c8      	beq.n	800a958 <__ieee754_fmodf+0x34>
 800a9c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9ca:	db1f      	blt.n	800aa0c <__ieee754_fmodf+0xe8>
 800a9cc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a9d0:	db1f      	blt.n	800aa12 <__ieee754_fmodf+0xee>
 800a9d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a9d6:	317f      	adds	r1, #127	; 0x7f
 800a9d8:	4333      	orrs	r3, r6
 800a9da:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a9de:	ee00 3a10 	vmov	s0, r3
 800a9e2:	e7b3      	b.n	800a94c <__ieee754_fmodf+0x28>
 800a9e4:	3801      	subs	r0, #1
 800a9e6:	0049      	lsls	r1, r1, #1
 800a9e8:	e7c2      	b.n	800a970 <__ieee754_fmodf+0x4c>
 800a9ea:	15d8      	asrs	r0, r3, #23
 800a9ec:	387f      	subs	r0, #127	; 0x7f
 800a9ee:	e7c1      	b.n	800a974 <__ieee754_fmodf+0x50>
 800a9f0:	3901      	subs	r1, #1
 800a9f2:	007f      	lsls	r7, r7, #1
 800a9f4:	e7c4      	b.n	800a980 <__ieee754_fmodf+0x5c>
 800a9f6:	15e1      	asrs	r1, r4, #23
 800a9f8:	397f      	subs	r1, #127	; 0x7f
 800a9fa:	e7c3      	b.n	800a984 <__ieee754_fmodf+0x60>
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	da02      	bge.n	800aa06 <__ieee754_fmodf+0xe2>
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	3801      	subs	r0, #1
 800aa04:	e7d7      	b.n	800a9b6 <__ieee754_fmodf+0x92>
 800aa06:	d0a7      	beq.n	800a958 <__ieee754_fmodf+0x34>
 800aa08:	0053      	lsls	r3, r2, #1
 800aa0a:	e7fa      	b.n	800aa02 <__ieee754_fmodf+0xde>
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	3901      	subs	r1, #1
 800aa10:	e7d9      	b.n	800a9c6 <__ieee754_fmodf+0xa2>
 800aa12:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800aa16:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800aa1a:	3182      	adds	r1, #130	; 0x82
 800aa1c:	410b      	asrs	r3, r1
 800aa1e:	4333      	orrs	r3, r6
 800aa20:	e7dd      	b.n	800a9de <__ieee754_fmodf+0xba>
 800aa22:	bf00      	nop
 800aa24:	0800b674 	.word	0x0800b674

0800aa28 <__ieee754_rem_pio2f>:
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2a:	ee10 6a10 	vmov	r6, s0
 800aa2e:	4b8e      	ldr	r3, [pc, #568]	; (800ac68 <__ieee754_rem_pio2f+0x240>)
 800aa30:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800aa34:	429d      	cmp	r5, r3
 800aa36:	b087      	sub	sp, #28
 800aa38:	eef0 7a40 	vmov.f32	s15, s0
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	dc05      	bgt.n	800aa4c <__ieee754_rem_pio2f+0x24>
 800aa40:	2300      	movs	r3, #0
 800aa42:	ed80 0a00 	vstr	s0, [r0]
 800aa46:	6043      	str	r3, [r0, #4]
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e01a      	b.n	800aa82 <__ieee754_rem_pio2f+0x5a>
 800aa4c:	4b87      	ldr	r3, [pc, #540]	; (800ac6c <__ieee754_rem_pio2f+0x244>)
 800aa4e:	429d      	cmp	r5, r3
 800aa50:	dc46      	bgt.n	800aae0 <__ieee754_rem_pio2f+0xb8>
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ac70 <__ieee754_rem_pio2f+0x248>
 800aa58:	4b86      	ldr	r3, [pc, #536]	; (800ac74 <__ieee754_rem_pio2f+0x24c>)
 800aa5a:	f025 050f 	bic.w	r5, r5, #15
 800aa5e:	dd1f      	ble.n	800aaa0 <__ieee754_rem_pio2f+0x78>
 800aa60:	429d      	cmp	r5, r3
 800aa62:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa66:	d00e      	beq.n	800aa86 <__ieee754_rem_pio2f+0x5e>
 800aa68:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ac78 <__ieee754_rem_pio2f+0x250>
 800aa6c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800aa70:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa74:	ed80 0a00 	vstr	s0, [r0]
 800aa78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	edc4 7a01 	vstr	s15, [r4, #4]
 800aa82:	b007      	add	sp, #28
 800aa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa86:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800ac7c <__ieee754_rem_pio2f+0x254>
 800aa8a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ac80 <__ieee754_rem_pio2f+0x258>
 800aa8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa92:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800aa96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aa9a:	edc0 6a00 	vstr	s13, [r0]
 800aa9e:	e7eb      	b.n	800aa78 <__ieee754_rem_pio2f+0x50>
 800aaa0:	429d      	cmp	r5, r3
 800aaa2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aaa6:	d00e      	beq.n	800aac6 <__ieee754_rem_pio2f+0x9e>
 800aaa8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ac78 <__ieee754_rem_pio2f+0x250>
 800aaac:	ee37 0a87 	vadd.f32	s0, s15, s14
 800aab0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aab4:	ed80 0a00 	vstr	s0, [r0]
 800aab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295
 800aac0:	edc4 7a01 	vstr	s15, [r4, #4]
 800aac4:	e7dd      	b.n	800aa82 <__ieee754_rem_pio2f+0x5a>
 800aac6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ac7c <__ieee754_rem_pio2f+0x254>
 800aaca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ac80 <__ieee754_rem_pio2f+0x258>
 800aace:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aad2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aad6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aada:	edc0 6a00 	vstr	s13, [r0]
 800aade:	e7eb      	b.n	800aab8 <__ieee754_rem_pio2f+0x90>
 800aae0:	4b68      	ldr	r3, [pc, #416]	; (800ac84 <__ieee754_rem_pio2f+0x25c>)
 800aae2:	429d      	cmp	r5, r3
 800aae4:	dc72      	bgt.n	800abcc <__ieee754_rem_pio2f+0x1a4>
 800aae6:	f000 fcd1 	bl	800b48c <fabsf>
 800aaea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ac88 <__ieee754_rem_pio2f+0x260>
 800aaee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aaf2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aaf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aafa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aafe:	ee17 0a90 	vmov	r0, s15
 800ab02:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ac70 <__ieee754_rem_pio2f+0x248>
 800ab06:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ab0a:	281f      	cmp	r0, #31
 800ab0c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ac78 <__ieee754_rem_pio2f+0x250>
 800ab10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab14:	eeb1 6a47 	vneg.f32	s12, s14
 800ab18:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ab1c:	ee16 2a90 	vmov	r2, s13
 800ab20:	dc1c      	bgt.n	800ab5c <__ieee754_rem_pio2f+0x134>
 800ab22:	495a      	ldr	r1, [pc, #360]	; (800ac8c <__ieee754_rem_pio2f+0x264>)
 800ab24:	1e47      	subs	r7, r0, #1
 800ab26:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ab2a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ab2e:	428b      	cmp	r3, r1
 800ab30:	d014      	beq.n	800ab5c <__ieee754_rem_pio2f+0x134>
 800ab32:	6022      	str	r2, [r4, #0]
 800ab34:	ed94 7a00 	vldr	s14, [r4]
 800ab38:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ab3c:	2e00      	cmp	r6, #0
 800ab3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab42:	ed84 0a01 	vstr	s0, [r4, #4]
 800ab46:	da9c      	bge.n	800aa82 <__ieee754_rem_pio2f+0x5a>
 800ab48:	eeb1 7a47 	vneg.f32	s14, s14
 800ab4c:	eeb1 0a40 	vneg.f32	s0, s0
 800ab50:	ed84 7a00 	vstr	s14, [r4]
 800ab54:	ed84 0a01 	vstr	s0, [r4, #4]
 800ab58:	4240      	negs	r0, r0
 800ab5a:	e792      	b.n	800aa82 <__ieee754_rem_pio2f+0x5a>
 800ab5c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ab60:	15eb      	asrs	r3, r5, #23
 800ab62:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ab66:	2d08      	cmp	r5, #8
 800ab68:	dde3      	ble.n	800ab32 <__ieee754_rem_pio2f+0x10a>
 800ab6a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ac7c <__ieee754_rem_pio2f+0x254>
 800ab6e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac80 <__ieee754_rem_pio2f+0x258>
 800ab72:	eef0 6a40 	vmov.f32	s13, s0
 800ab76:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab7a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ab7e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800ab82:	eef0 7a40 	vmov.f32	s15, s0
 800ab86:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ab8a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ab8e:	ee15 2a90 	vmov	r2, s11
 800ab92:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ab96:	1a5b      	subs	r3, r3, r1
 800ab98:	2b19      	cmp	r3, #25
 800ab9a:	dc04      	bgt.n	800aba6 <__ieee754_rem_pio2f+0x17e>
 800ab9c:	edc4 5a00 	vstr	s11, [r4]
 800aba0:	eeb0 0a66 	vmov.f32	s0, s13
 800aba4:	e7c6      	b.n	800ab34 <__ieee754_rem_pio2f+0x10c>
 800aba6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ac90 <__ieee754_rem_pio2f+0x268>
 800abaa:	eeb0 0a66 	vmov.f32	s0, s13
 800abae:	eea6 0a25 	vfma.f32	s0, s12, s11
 800abb2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800abb6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ac94 <__ieee754_rem_pio2f+0x26c>
 800abba:	eee6 7a25 	vfma.f32	s15, s12, s11
 800abbe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800abc2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800abc6:	ed84 7a00 	vstr	s14, [r4]
 800abca:	e7b3      	b.n	800ab34 <__ieee754_rem_pio2f+0x10c>
 800abcc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800abd0:	db06      	blt.n	800abe0 <__ieee754_rem_pio2f+0x1b8>
 800abd2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800abd6:	edc0 7a01 	vstr	s15, [r0, #4]
 800abda:	edc0 7a00 	vstr	s15, [r0]
 800abde:	e733      	b.n	800aa48 <__ieee754_rem_pio2f+0x20>
 800abe0:	15ea      	asrs	r2, r5, #23
 800abe2:	3a86      	subs	r2, #134	; 0x86
 800abe4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800abe8:	ee07 3a90 	vmov	s15, r3
 800abec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800abf0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ac98 <__ieee754_rem_pio2f+0x270>
 800abf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800abf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abfc:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ac00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ac08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac10:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ac14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac18:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ac1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac20:	edcd 7a05 	vstr	s15, [sp, #20]
 800ac24:	d11e      	bne.n	800ac64 <__ieee754_rem_pio2f+0x23c>
 800ac26:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ac2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2e:	bf14      	ite	ne
 800ac30:	2302      	movne	r3, #2
 800ac32:	2301      	moveq	r3, #1
 800ac34:	4919      	ldr	r1, [pc, #100]	; (800ac9c <__ieee754_rem_pio2f+0x274>)
 800ac36:	9101      	str	r1, [sp, #4]
 800ac38:	2102      	movs	r1, #2
 800ac3a:	9100      	str	r1, [sp, #0]
 800ac3c:	a803      	add	r0, sp, #12
 800ac3e:	4621      	mov	r1, r4
 800ac40:	f000 f892 	bl	800ad68 <__kernel_rem_pio2f>
 800ac44:	2e00      	cmp	r6, #0
 800ac46:	f6bf af1c 	bge.w	800aa82 <__ieee754_rem_pio2f+0x5a>
 800ac4a:	edd4 7a00 	vldr	s15, [r4]
 800ac4e:	eef1 7a67 	vneg.f32	s15, s15
 800ac52:	edc4 7a00 	vstr	s15, [r4]
 800ac56:	edd4 7a01 	vldr	s15, [r4, #4]
 800ac5a:	eef1 7a67 	vneg.f32	s15, s15
 800ac5e:	edc4 7a01 	vstr	s15, [r4, #4]
 800ac62:	e779      	b.n	800ab58 <__ieee754_rem_pio2f+0x130>
 800ac64:	2303      	movs	r3, #3
 800ac66:	e7e5      	b.n	800ac34 <__ieee754_rem_pio2f+0x20c>
 800ac68:	3f490fd8 	.word	0x3f490fd8
 800ac6c:	4016cbe3 	.word	0x4016cbe3
 800ac70:	3fc90f80 	.word	0x3fc90f80
 800ac74:	3fc90fd0 	.word	0x3fc90fd0
 800ac78:	37354443 	.word	0x37354443
 800ac7c:	37354400 	.word	0x37354400
 800ac80:	2e85a308 	.word	0x2e85a308
 800ac84:	43490f80 	.word	0x43490f80
 800ac88:	3f22f984 	.word	0x3f22f984
 800ac8c:	0800b67c 	.word	0x0800b67c
 800ac90:	2e85a300 	.word	0x2e85a300
 800ac94:	248d3132 	.word	0x248d3132
 800ac98:	43800000 	.word	0x43800000
 800ac9c:	0800b6fc 	.word	0x0800b6fc

0800aca0 <__ieee754_sqrtf>:
 800aca0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aca4:	4770      	bx	lr
	...

0800aca8 <__kernel_cosf>:
 800aca8:	ee10 3a10 	vmov	r3, s0
 800acac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800acb4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800acb8:	da05      	bge.n	800acc6 <__kernel_cosf+0x1e>
 800acba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800acbe:	ee17 2a90 	vmov	r2, s15
 800acc2:	2a00      	cmp	r2, #0
 800acc4:	d03d      	beq.n	800ad42 <__kernel_cosf+0x9a>
 800acc6:	ee60 5a00 	vmul.f32	s11, s0, s0
 800acca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ad48 <__kernel_cosf+0xa0>
 800acce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ad4c <__kernel_cosf+0xa4>
 800acd2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800ad50 <__kernel_cosf+0xa8>
 800acd6:	4a1f      	ldr	r2, [pc, #124]	; (800ad54 <__kernel_cosf+0xac>)
 800acd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800acdc:	4293      	cmp	r3, r2
 800acde:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800ad58 <__kernel_cosf+0xb0>
 800ace2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ace6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800ad5c <__kernel_cosf+0xb4>
 800acea:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800acee:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800ad60 <__kernel_cosf+0xb8>
 800acf2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800acf6:	eeb0 7a66 	vmov.f32	s14, s13
 800acfa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800acfe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ad02:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800ad06:	ee67 6a25 	vmul.f32	s13, s14, s11
 800ad0a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800ad0e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ad12:	dc04      	bgt.n	800ad1e <__kernel_cosf+0x76>
 800ad14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ad18:	ee36 0a47 	vsub.f32	s0, s12, s14
 800ad1c:	4770      	bx	lr
 800ad1e:	4a11      	ldr	r2, [pc, #68]	; (800ad64 <__kernel_cosf+0xbc>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	bfda      	itte	le
 800ad24:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800ad28:	ee06 3a90 	vmovle	s13, r3
 800ad2c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800ad30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad34:	ee36 0a66 	vsub.f32	s0, s12, s13
 800ad38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad40:	4770      	bx	lr
 800ad42:	eeb0 0a46 	vmov.f32	s0, s12
 800ad46:	4770      	bx	lr
 800ad48:	ad47d74e 	.word	0xad47d74e
 800ad4c:	310f74f6 	.word	0x310f74f6
 800ad50:	3d2aaaab 	.word	0x3d2aaaab
 800ad54:	3e999999 	.word	0x3e999999
 800ad58:	b493f27c 	.word	0xb493f27c
 800ad5c:	37d00d01 	.word	0x37d00d01
 800ad60:	bab60b61 	.word	0xbab60b61
 800ad64:	3f480000 	.word	0x3f480000

0800ad68 <__kernel_rem_pio2f>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	ed2d 8b04 	vpush	{d8-d9}
 800ad70:	b0d9      	sub	sp, #356	; 0x164
 800ad72:	4688      	mov	r8, r1
 800ad74:	9002      	str	r0, [sp, #8]
 800ad76:	49bb      	ldr	r1, [pc, #748]	; (800b064 <__kernel_rem_pio2f+0x2fc>)
 800ad78:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ad80:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800ad84:	1e59      	subs	r1, r3, #1
 800ad86:	1d13      	adds	r3, r2, #4
 800ad88:	db27      	blt.n	800adda <__kernel_rem_pio2f+0x72>
 800ad8a:	f1b2 0b03 	subs.w	fp, r2, #3
 800ad8e:	bf48      	it	mi
 800ad90:	f102 0b04 	addmi.w	fp, r2, #4
 800ad94:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800ad98:	1c45      	adds	r5, r0, #1
 800ad9a:	00ec      	lsls	r4, r5, #3
 800ad9c:	1a47      	subs	r7, r0, r1
 800ad9e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b074 <__kernel_rem_pio2f+0x30c>
 800ada2:	9403      	str	r4, [sp, #12]
 800ada4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ada8:	eb0a 0c01 	add.w	ip, sl, r1
 800adac:	ae1c      	add	r6, sp, #112	; 0x70
 800adae:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800adb2:	2400      	movs	r4, #0
 800adb4:	4564      	cmp	r4, ip
 800adb6:	dd12      	ble.n	800adde <__kernel_rem_pio2f+0x76>
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	ac1c      	add	r4, sp, #112	; 0x70
 800adbc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800adc0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800adc4:	f04f 0c00 	mov.w	ip, #0
 800adc8:	45d4      	cmp	ip, sl
 800adca:	dc27      	bgt.n	800ae1c <__kernel_rem_pio2f+0xb4>
 800adcc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800add0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b074 <__kernel_rem_pio2f+0x30c>
 800add4:	4627      	mov	r7, r4
 800add6:	2600      	movs	r6, #0
 800add8:	e016      	b.n	800ae08 <__kernel_rem_pio2f+0xa0>
 800adda:	2000      	movs	r0, #0
 800addc:	e7dc      	b.n	800ad98 <__kernel_rem_pio2f+0x30>
 800adde:	42e7      	cmn	r7, r4
 800ade0:	bf5d      	ittte	pl
 800ade2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800ade6:	ee07 3a90 	vmovpl	s15, r3
 800adea:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800adee:	eef0 7a47 	vmovmi.f32	s15, s14
 800adf2:	ece6 7a01 	vstmia	r6!, {s15}
 800adf6:	3401      	adds	r4, #1
 800adf8:	e7dc      	b.n	800adb4 <__kernel_rem_pio2f+0x4c>
 800adfa:	ecf9 6a01 	vldmia	r9!, {s13}
 800adfe:	ed97 7a00 	vldr	s14, [r7]
 800ae02:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae06:	3601      	adds	r6, #1
 800ae08:	428e      	cmp	r6, r1
 800ae0a:	f1a7 0704 	sub.w	r7, r7, #4
 800ae0e:	ddf4      	ble.n	800adfa <__kernel_rem_pio2f+0x92>
 800ae10:	eceb 7a01 	vstmia	fp!, {s15}
 800ae14:	f10c 0c01 	add.w	ip, ip, #1
 800ae18:	3404      	adds	r4, #4
 800ae1a:	e7d5      	b.n	800adc8 <__kernel_rem_pio2f+0x60>
 800ae1c:	ab08      	add	r3, sp, #32
 800ae1e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ae22:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b070 <__kernel_rem_pio2f+0x308>
 800ae26:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b06c <__kernel_rem_pio2f+0x304>
 800ae2a:	9304      	str	r3, [sp, #16]
 800ae2c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800ae30:	4656      	mov	r6, sl
 800ae32:	00b3      	lsls	r3, r6, #2
 800ae34:	9305      	str	r3, [sp, #20]
 800ae36:	ab58      	add	r3, sp, #352	; 0x160
 800ae38:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ae3c:	ac08      	add	r4, sp, #32
 800ae3e:	ab44      	add	r3, sp, #272	; 0x110
 800ae40:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ae44:	46a4      	mov	ip, r4
 800ae46:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ae4a:	4637      	mov	r7, r6
 800ae4c:	2f00      	cmp	r7, #0
 800ae4e:	f1a0 0004 	sub.w	r0, r0, #4
 800ae52:	dc4f      	bgt.n	800aef4 <__kernel_rem_pio2f+0x18c>
 800ae54:	4628      	mov	r0, r5
 800ae56:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800ae5a:	f000 fb61 	bl	800b520 <scalbnf>
 800ae5e:	eeb0 8a40 	vmov.f32	s16, s0
 800ae62:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ae66:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ae6a:	f000 fb17 	bl	800b49c <floorf>
 800ae6e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ae72:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800ae7c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ae80:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ae84:	ee17 9a90 	vmov	r9, s15
 800ae88:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ae8c:	dd44      	ble.n	800af18 <__kernel_rem_pio2f+0x1b0>
 800ae8e:	f106 3cff 	add.w	ip, r6, #4294967295
 800ae92:	ab08      	add	r3, sp, #32
 800ae94:	f1c5 0e08 	rsb	lr, r5, #8
 800ae98:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ae9c:	fa47 f00e 	asr.w	r0, r7, lr
 800aea0:	4481      	add	r9, r0
 800aea2:	fa00 f00e 	lsl.w	r0, r0, lr
 800aea6:	1a3f      	subs	r7, r7, r0
 800aea8:	f1c5 0007 	rsb	r0, r5, #7
 800aeac:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800aeb0:	4107      	asrs	r7, r0
 800aeb2:	2f00      	cmp	r7, #0
 800aeb4:	dd3f      	ble.n	800af36 <__kernel_rem_pio2f+0x1ce>
 800aeb6:	f04f 0e00 	mov.w	lr, #0
 800aeba:	f109 0901 	add.w	r9, r9, #1
 800aebe:	4673      	mov	r3, lr
 800aec0:	4576      	cmp	r6, lr
 800aec2:	dc6b      	bgt.n	800af9c <__kernel_rem_pio2f+0x234>
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	dd04      	ble.n	800aed2 <__kernel_rem_pio2f+0x16a>
 800aec8:	2d01      	cmp	r5, #1
 800aeca:	d078      	beq.n	800afbe <__kernel_rem_pio2f+0x256>
 800aecc:	2d02      	cmp	r5, #2
 800aece:	f000 8081 	beq.w	800afd4 <__kernel_rem_pio2f+0x26c>
 800aed2:	2f02      	cmp	r7, #2
 800aed4:	d12f      	bne.n	800af36 <__kernel_rem_pio2f+0x1ce>
 800aed6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aeda:	ee30 8a48 	vsub.f32	s16, s0, s16
 800aede:	b353      	cbz	r3, 800af36 <__kernel_rem_pio2f+0x1ce>
 800aee0:	4628      	mov	r0, r5
 800aee2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800aee6:	f000 fb1b 	bl	800b520 <scalbnf>
 800aeea:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800aeee:	ee38 8a40 	vsub.f32	s16, s16, s0
 800aef2:	e020      	b.n	800af36 <__kernel_rem_pio2f+0x1ce>
 800aef4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800aef8:	3f01      	subs	r7, #1
 800aefa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aefe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af02:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800af06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800af0a:	ecac 0a01 	vstmia	ip!, {s0}
 800af0e:	ed90 0a00 	vldr	s0, [r0]
 800af12:	ee37 0a80 	vadd.f32	s0, s15, s0
 800af16:	e799      	b.n	800ae4c <__kernel_rem_pio2f+0xe4>
 800af18:	d105      	bne.n	800af26 <__kernel_rem_pio2f+0x1be>
 800af1a:	1e70      	subs	r0, r6, #1
 800af1c:	ab08      	add	r3, sp, #32
 800af1e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800af22:	11ff      	asrs	r7, r7, #7
 800af24:	e7c5      	b.n	800aeb2 <__kernel_rem_pio2f+0x14a>
 800af26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800af2a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800af2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af32:	da31      	bge.n	800af98 <__kernel_rem_pio2f+0x230>
 800af34:	2700      	movs	r7, #0
 800af36:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800af3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3e:	f040 809b 	bne.w	800b078 <__kernel_rem_pio2f+0x310>
 800af42:	1e74      	subs	r4, r6, #1
 800af44:	46a4      	mov	ip, r4
 800af46:	2000      	movs	r0, #0
 800af48:	45d4      	cmp	ip, sl
 800af4a:	da4a      	bge.n	800afe2 <__kernel_rem_pio2f+0x27a>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d07a      	beq.n	800b046 <__kernel_rem_pio2f+0x2de>
 800af50:	ab08      	add	r3, sp, #32
 800af52:	3d08      	subs	r5, #8
 800af54:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 8081 	beq.w	800b060 <__kernel_rem_pio2f+0x2f8>
 800af5e:	4628      	mov	r0, r5
 800af60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af64:	00a5      	lsls	r5, r4, #2
 800af66:	f000 fadb 	bl	800b520 <scalbnf>
 800af6a:	aa44      	add	r2, sp, #272	; 0x110
 800af6c:	1d2b      	adds	r3, r5, #4
 800af6e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b070 <__kernel_rem_pio2f+0x308>
 800af72:	18d1      	adds	r1, r2, r3
 800af74:	4622      	mov	r2, r4
 800af76:	2a00      	cmp	r2, #0
 800af78:	f280 80ae 	bge.w	800b0d8 <__kernel_rem_pio2f+0x370>
 800af7c:	4622      	mov	r2, r4
 800af7e:	2a00      	cmp	r2, #0
 800af80:	f2c0 80cc 	blt.w	800b11c <__kernel_rem_pio2f+0x3b4>
 800af84:	a944      	add	r1, sp, #272	; 0x110
 800af86:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800af8a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b068 <__kernel_rem_pio2f+0x300>
 800af8e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b074 <__kernel_rem_pio2f+0x30c>
 800af92:	2000      	movs	r0, #0
 800af94:	1aa1      	subs	r1, r4, r2
 800af96:	e0b6      	b.n	800b106 <__kernel_rem_pio2f+0x39e>
 800af98:	2702      	movs	r7, #2
 800af9a:	e78c      	b.n	800aeb6 <__kernel_rem_pio2f+0x14e>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	b94b      	cbnz	r3, 800afb4 <__kernel_rem_pio2f+0x24c>
 800afa0:	b118      	cbz	r0, 800afaa <__kernel_rem_pio2f+0x242>
 800afa2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800afa6:	6020      	str	r0, [r4, #0]
 800afa8:	2001      	movs	r0, #1
 800afaa:	f10e 0e01 	add.w	lr, lr, #1
 800afae:	3404      	adds	r4, #4
 800afb0:	4603      	mov	r3, r0
 800afb2:	e785      	b.n	800aec0 <__kernel_rem_pio2f+0x158>
 800afb4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800afb8:	6020      	str	r0, [r4, #0]
 800afba:	4618      	mov	r0, r3
 800afbc:	e7f5      	b.n	800afaa <__kernel_rem_pio2f+0x242>
 800afbe:	1e74      	subs	r4, r6, #1
 800afc0:	a808      	add	r0, sp, #32
 800afc2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800afc6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800afca:	f10d 0c20 	add.w	ip, sp, #32
 800afce:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800afd2:	e77e      	b.n	800aed2 <__kernel_rem_pio2f+0x16a>
 800afd4:	1e74      	subs	r4, r6, #1
 800afd6:	a808      	add	r0, sp, #32
 800afd8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800afdc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800afe0:	e7f3      	b.n	800afca <__kernel_rem_pio2f+0x262>
 800afe2:	ab08      	add	r3, sp, #32
 800afe4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800afe8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800afec:	4318      	orrs	r0, r3
 800afee:	e7ab      	b.n	800af48 <__kernel_rem_pio2f+0x1e0>
 800aff0:	f10c 0c01 	add.w	ip, ip, #1
 800aff4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800aff8:	2c00      	cmp	r4, #0
 800affa:	d0f9      	beq.n	800aff0 <__kernel_rem_pio2f+0x288>
 800affc:	9b05      	ldr	r3, [sp, #20]
 800affe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b002:	eb0d 0003 	add.w	r0, sp, r3
 800b006:	9b01      	ldr	r3, [sp, #4]
 800b008:	18f4      	adds	r4, r6, r3
 800b00a:	ab1c      	add	r3, sp, #112	; 0x70
 800b00c:	1c77      	adds	r7, r6, #1
 800b00e:	384c      	subs	r0, #76	; 0x4c
 800b010:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b014:	4466      	add	r6, ip
 800b016:	42be      	cmp	r6, r7
 800b018:	f6ff af0b 	blt.w	800ae32 <__kernel_rem_pio2f+0xca>
 800b01c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b020:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b02c:	f04f 0c00 	mov.w	ip, #0
 800b030:	ece4 7a01 	vstmia	r4!, {s15}
 800b034:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b074 <__kernel_rem_pio2f+0x30c>
 800b038:	46a1      	mov	r9, r4
 800b03a:	458c      	cmp	ip, r1
 800b03c:	dd07      	ble.n	800b04e <__kernel_rem_pio2f+0x2e6>
 800b03e:	ece0 7a01 	vstmia	r0!, {s15}
 800b042:	3701      	adds	r7, #1
 800b044:	e7e7      	b.n	800b016 <__kernel_rem_pio2f+0x2ae>
 800b046:	9804      	ldr	r0, [sp, #16]
 800b048:	f04f 0c01 	mov.w	ip, #1
 800b04c:	e7d2      	b.n	800aff4 <__kernel_rem_pio2f+0x28c>
 800b04e:	ecfe 6a01 	vldmia	lr!, {s13}
 800b052:	ed39 7a01 	vldmdb	r9!, {s14}
 800b056:	f10c 0c01 	add.w	ip, ip, #1
 800b05a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b05e:	e7ec      	b.n	800b03a <__kernel_rem_pio2f+0x2d2>
 800b060:	3c01      	subs	r4, #1
 800b062:	e775      	b.n	800af50 <__kernel_rem_pio2f+0x1e8>
 800b064:	0800ba40 	.word	0x0800ba40
 800b068:	0800ba14 	.word	0x0800ba14
 800b06c:	43800000 	.word	0x43800000
 800b070:	3b800000 	.word	0x3b800000
 800b074:	00000000 	.word	0x00000000
 800b078:	9b03      	ldr	r3, [sp, #12]
 800b07a:	eeb0 0a48 	vmov.f32	s0, s16
 800b07e:	1a98      	subs	r0, r3, r2
 800b080:	f000 fa4e 	bl	800b520 <scalbnf>
 800b084:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b06c <__kernel_rem_pio2f+0x304>
 800b088:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b090:	db19      	blt.n	800b0c6 <__kernel_rem_pio2f+0x35e>
 800b092:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b070 <__kernel_rem_pio2f+0x308>
 800b096:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b09a:	aa08      	add	r2, sp, #32
 800b09c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0a0:	1c74      	adds	r4, r6, #1
 800b0a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0a6:	3508      	adds	r5, #8
 800b0a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b0ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0b4:	ee10 3a10 	vmov	r3, s0
 800b0b8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b0bc:	ee17 3a90 	vmov	r3, s15
 800b0c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b0c4:	e74b      	b.n	800af5e <__kernel_rem_pio2f+0x1f6>
 800b0c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0ca:	aa08      	add	r2, sp, #32
 800b0cc:	ee10 3a10 	vmov	r3, s0
 800b0d0:	4634      	mov	r4, r6
 800b0d2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b0d6:	e742      	b.n	800af5e <__kernel_rem_pio2f+0x1f6>
 800b0d8:	a808      	add	r0, sp, #32
 800b0da:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b0de:	9001      	str	r0, [sp, #4]
 800b0e0:	ee07 0a90 	vmov	s15, r0
 800b0e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0e8:	3a01      	subs	r2, #1
 800b0ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b0ee:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b0f2:	ed61 7a01 	vstmdb	r1!, {s15}
 800b0f6:	e73e      	b.n	800af76 <__kernel_rem_pio2f+0x20e>
 800b0f8:	ecfc 6a01 	vldmia	ip!, {s13}
 800b0fc:	ecb6 7a01 	vldmia	r6!, {s14}
 800b100:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b104:	3001      	adds	r0, #1
 800b106:	4550      	cmp	r0, sl
 800b108:	dc01      	bgt.n	800b10e <__kernel_rem_pio2f+0x3a6>
 800b10a:	4288      	cmp	r0, r1
 800b10c:	ddf4      	ble.n	800b0f8 <__kernel_rem_pio2f+0x390>
 800b10e:	a858      	add	r0, sp, #352	; 0x160
 800b110:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b114:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b118:	3a01      	subs	r2, #1
 800b11a:	e730      	b.n	800af7e <__kernel_rem_pio2f+0x216>
 800b11c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b11e:	2a02      	cmp	r2, #2
 800b120:	dc09      	bgt.n	800b136 <__kernel_rem_pio2f+0x3ce>
 800b122:	2a00      	cmp	r2, #0
 800b124:	dc2a      	bgt.n	800b17c <__kernel_rem_pio2f+0x414>
 800b126:	d043      	beq.n	800b1b0 <__kernel_rem_pio2f+0x448>
 800b128:	f009 0007 	and.w	r0, r9, #7
 800b12c:	b059      	add	sp, #356	; 0x164
 800b12e:	ecbd 8b04 	vpop	{d8-d9}
 800b132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b136:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d1f5      	bne.n	800b128 <__kernel_rem_pio2f+0x3c0>
 800b13c:	ab30      	add	r3, sp, #192	; 0xc0
 800b13e:	442b      	add	r3, r5
 800b140:	461a      	mov	r2, r3
 800b142:	4619      	mov	r1, r3
 800b144:	4620      	mov	r0, r4
 800b146:	2800      	cmp	r0, #0
 800b148:	f1a1 0104 	sub.w	r1, r1, #4
 800b14c:	dc51      	bgt.n	800b1f2 <__kernel_rem_pio2f+0x48a>
 800b14e:	4621      	mov	r1, r4
 800b150:	2901      	cmp	r1, #1
 800b152:	f1a2 0204 	sub.w	r2, r2, #4
 800b156:	dc5c      	bgt.n	800b212 <__kernel_rem_pio2f+0x4aa>
 800b158:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b074 <__kernel_rem_pio2f+0x30c>
 800b15c:	3304      	adds	r3, #4
 800b15e:	2c01      	cmp	r4, #1
 800b160:	dc67      	bgt.n	800b232 <__kernel_rem_pio2f+0x4ca>
 800b162:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b166:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b16a:	2f00      	cmp	r7, #0
 800b16c:	d167      	bne.n	800b23e <__kernel_rem_pio2f+0x4d6>
 800b16e:	edc8 6a00 	vstr	s13, [r8]
 800b172:	ed88 7a01 	vstr	s14, [r8, #4]
 800b176:	edc8 7a02 	vstr	s15, [r8, #8]
 800b17a:	e7d5      	b.n	800b128 <__kernel_rem_pio2f+0x3c0>
 800b17c:	aa30      	add	r2, sp, #192	; 0xc0
 800b17e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b074 <__kernel_rem_pio2f+0x30c>
 800b182:	4413      	add	r3, r2
 800b184:	4622      	mov	r2, r4
 800b186:	2a00      	cmp	r2, #0
 800b188:	da24      	bge.n	800b1d4 <__kernel_rem_pio2f+0x46c>
 800b18a:	b34f      	cbz	r7, 800b1e0 <__kernel_rem_pio2f+0x478>
 800b18c:	eef1 7a47 	vneg.f32	s15, s14
 800b190:	edc8 7a00 	vstr	s15, [r8]
 800b194:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b19c:	aa31      	add	r2, sp, #196	; 0xc4
 800b19e:	2301      	movs	r3, #1
 800b1a0:	429c      	cmp	r4, r3
 800b1a2:	da20      	bge.n	800b1e6 <__kernel_rem_pio2f+0x47e>
 800b1a4:	b10f      	cbz	r7, 800b1aa <__kernel_rem_pio2f+0x442>
 800b1a6:	eef1 7a67 	vneg.f32	s15, s15
 800b1aa:	edc8 7a01 	vstr	s15, [r8, #4]
 800b1ae:	e7bb      	b.n	800b128 <__kernel_rem_pio2f+0x3c0>
 800b1b0:	aa30      	add	r2, sp, #192	; 0xc0
 800b1b2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b074 <__kernel_rem_pio2f+0x30c>
 800b1b6:	4413      	add	r3, r2
 800b1b8:	2c00      	cmp	r4, #0
 800b1ba:	da05      	bge.n	800b1c8 <__kernel_rem_pio2f+0x460>
 800b1bc:	b10f      	cbz	r7, 800b1c2 <__kernel_rem_pio2f+0x45a>
 800b1be:	eef1 7a67 	vneg.f32	s15, s15
 800b1c2:	edc8 7a00 	vstr	s15, [r8]
 800b1c6:	e7af      	b.n	800b128 <__kernel_rem_pio2f+0x3c0>
 800b1c8:	ed33 7a01 	vldmdb	r3!, {s14}
 800b1cc:	3c01      	subs	r4, #1
 800b1ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1d2:	e7f1      	b.n	800b1b8 <__kernel_rem_pio2f+0x450>
 800b1d4:	ed73 7a01 	vldmdb	r3!, {s15}
 800b1d8:	3a01      	subs	r2, #1
 800b1da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1de:	e7d2      	b.n	800b186 <__kernel_rem_pio2f+0x41e>
 800b1e0:	eef0 7a47 	vmov.f32	s15, s14
 800b1e4:	e7d4      	b.n	800b190 <__kernel_rem_pio2f+0x428>
 800b1e6:	ecb2 7a01 	vldmia	r2!, {s14}
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1f0:	e7d6      	b.n	800b1a0 <__kernel_rem_pio2f+0x438>
 800b1f2:	edd1 7a00 	vldr	s15, [r1]
 800b1f6:	edd1 6a01 	vldr	s13, [r1, #4]
 800b1fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b1fe:	3801      	subs	r0, #1
 800b200:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b204:	ed81 7a00 	vstr	s14, [r1]
 800b208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b20c:	edc1 7a01 	vstr	s15, [r1, #4]
 800b210:	e799      	b.n	800b146 <__kernel_rem_pio2f+0x3de>
 800b212:	edd2 7a00 	vldr	s15, [r2]
 800b216:	edd2 6a01 	vldr	s13, [r2, #4]
 800b21a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b21e:	3901      	subs	r1, #1
 800b220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b224:	ed82 7a00 	vstr	s14, [r2]
 800b228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22c:	edc2 7a01 	vstr	s15, [r2, #4]
 800b230:	e78e      	b.n	800b150 <__kernel_rem_pio2f+0x3e8>
 800b232:	ed33 7a01 	vldmdb	r3!, {s14}
 800b236:	3c01      	subs	r4, #1
 800b238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b23c:	e78f      	b.n	800b15e <__kernel_rem_pio2f+0x3f6>
 800b23e:	eef1 6a66 	vneg.f32	s13, s13
 800b242:	eeb1 7a47 	vneg.f32	s14, s14
 800b246:	edc8 6a00 	vstr	s13, [r8]
 800b24a:	ed88 7a01 	vstr	s14, [r8, #4]
 800b24e:	eef1 7a67 	vneg.f32	s15, s15
 800b252:	e790      	b.n	800b176 <__kernel_rem_pio2f+0x40e>

0800b254 <__kernel_sinf>:
 800b254:	ee10 3a10 	vmov	r3, s0
 800b258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b25c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b260:	da04      	bge.n	800b26c <__kernel_sinf+0x18>
 800b262:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b266:	ee17 3a90 	vmov	r3, s15
 800b26a:	b35b      	cbz	r3, 800b2c4 <__kernel_sinf+0x70>
 800b26c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b270:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b2c8 <__kernel_sinf+0x74>
 800b274:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b2cc <__kernel_sinf+0x78>
 800b278:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b27c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b2d0 <__kernel_sinf+0x7c>
 800b280:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b284:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b2d4 <__kernel_sinf+0x80>
 800b288:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b28c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b2d8 <__kernel_sinf+0x84>
 800b290:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b294:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b298:	b930      	cbnz	r0, 800b2a8 <__kernel_sinf+0x54>
 800b29a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b2dc <__kernel_sinf+0x88>
 800b29e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b2a6:	4770      	bx	lr
 800b2a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b2ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b2b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b2b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b2b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b2e0 <__kernel_sinf+0x8c>
 800b2bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b2c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	2f2ec9d3 	.word	0x2f2ec9d3
 800b2cc:	b2d72f34 	.word	0xb2d72f34
 800b2d0:	3638ef1b 	.word	0x3638ef1b
 800b2d4:	b9500d01 	.word	0xb9500d01
 800b2d8:	3c088889 	.word	0x3c088889
 800b2dc:	be2aaaab 	.word	0xbe2aaaab
 800b2e0:	3e2aaaab 	.word	0x3e2aaaab

0800b2e4 <atanf>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	ee10 5a10 	vmov	r5, s0
 800b2ea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b2ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800b2f2:	eef0 7a40 	vmov.f32	s15, s0
 800b2f6:	db10      	blt.n	800b31a <atanf+0x36>
 800b2f8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b2fc:	dd04      	ble.n	800b308 <atanf+0x24>
 800b2fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b302:	eeb0 0a67 	vmov.f32	s0, s15
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b440 <atanf+0x15c>
 800b30c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800b444 <atanf+0x160>
 800b310:	2d00      	cmp	r5, #0
 800b312:	bfd8      	it	le
 800b314:	eef0 7a40 	vmovle.f32	s15, s0
 800b318:	e7f3      	b.n	800b302 <atanf+0x1e>
 800b31a:	4b4b      	ldr	r3, [pc, #300]	; (800b448 <atanf+0x164>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	dc10      	bgt.n	800b342 <atanf+0x5e>
 800b320:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800b324:	da0a      	bge.n	800b33c <atanf+0x58>
 800b326:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b44c <atanf+0x168>
 800b32a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b332:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33a:	dce2      	bgt.n	800b302 <atanf+0x1e>
 800b33c:	f04f 33ff 	mov.w	r3, #4294967295
 800b340:	e013      	b.n	800b36a <atanf+0x86>
 800b342:	f000 f8a3 	bl	800b48c <fabsf>
 800b346:	4b42      	ldr	r3, [pc, #264]	; (800b450 <atanf+0x16c>)
 800b348:	429c      	cmp	r4, r3
 800b34a:	dc4f      	bgt.n	800b3ec <atanf+0x108>
 800b34c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b350:	429c      	cmp	r4, r3
 800b352:	dc41      	bgt.n	800b3d8 <atanf+0xf4>
 800b354:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b358:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b35c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b360:	2300      	movs	r3, #0
 800b362:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b366:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b370:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b454 <atanf+0x170>
 800b374:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b458 <atanf+0x174>
 800b378:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b45c <atanf+0x178>
 800b37c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b380:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b384:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b460 <atanf+0x17c>
 800b388:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b38c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b464 <atanf+0x180>
 800b390:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b394:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b468 <atanf+0x184>
 800b398:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b39c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b46c <atanf+0x188>
 800b3a0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b3a4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b470 <atanf+0x18c>
 800b3a8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b3ac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b474 <atanf+0x190>
 800b3b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b3b4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b478 <atanf+0x194>
 800b3b8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b3bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b47c <atanf+0x198>
 800b3c0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b3c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b3c8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b3cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b3d0:	d121      	bne.n	800b416 <atanf+0x132>
 800b3d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3d6:	e794      	b.n	800b302 <atanf+0x1e>
 800b3d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b3dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b3e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b3ea:	e7be      	b.n	800b36a <atanf+0x86>
 800b3ec:	4b24      	ldr	r3, [pc, #144]	; (800b480 <atanf+0x19c>)
 800b3ee:	429c      	cmp	r4, r3
 800b3f0:	dc0b      	bgt.n	800b40a <atanf+0x126>
 800b3f2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b3f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3fa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b3fe:	2302      	movs	r3, #2
 800b400:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b408:	e7af      	b.n	800b36a <atanf+0x86>
 800b40a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b40e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b412:	2303      	movs	r3, #3
 800b414:	e7a9      	b.n	800b36a <atanf+0x86>
 800b416:	4a1b      	ldr	r2, [pc, #108]	; (800b484 <atanf+0x1a0>)
 800b418:	491b      	ldr	r1, [pc, #108]	; (800b488 <atanf+0x1a4>)
 800b41a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b41e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b422:	ed93 0a00 	vldr	s0, [r3]
 800b426:	ee37 7a40 	vsub.f32	s14, s14, s0
 800b42a:	ed92 0a00 	vldr	s0, [r2]
 800b42e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b432:	2d00      	cmp	r5, #0
 800b434:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b438:	bfb8      	it	lt
 800b43a:	eef1 7a67 	vneglt.f32	s15, s15
 800b43e:	e760      	b.n	800b302 <atanf+0x1e>
 800b440:	3fc90fdb 	.word	0x3fc90fdb
 800b444:	bfc90fdb 	.word	0xbfc90fdb
 800b448:	3edfffff 	.word	0x3edfffff
 800b44c:	7149f2ca 	.word	0x7149f2ca
 800b450:	3f97ffff 	.word	0x3f97ffff
 800b454:	3c8569d7 	.word	0x3c8569d7
 800b458:	3d4bda59 	.word	0x3d4bda59
 800b45c:	bd6ef16b 	.word	0xbd6ef16b
 800b460:	3d886b35 	.word	0x3d886b35
 800b464:	3dba2e6e 	.word	0x3dba2e6e
 800b468:	3e124925 	.word	0x3e124925
 800b46c:	3eaaaaab 	.word	0x3eaaaaab
 800b470:	bd15a221 	.word	0xbd15a221
 800b474:	bd9d8795 	.word	0xbd9d8795
 800b478:	bde38e38 	.word	0xbde38e38
 800b47c:	be4ccccd 	.word	0xbe4ccccd
 800b480:	401bffff 	.word	0x401bffff
 800b484:	0800ba4c 	.word	0x0800ba4c
 800b488:	0800ba5c 	.word	0x0800ba5c

0800b48c <fabsf>:
 800b48c:	ee10 3a10 	vmov	r3, s0
 800b490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b494:	ee00 3a10 	vmov	s0, r3
 800b498:	4770      	bx	lr
	...

0800b49c <floorf>:
 800b49c:	ee10 3a10 	vmov	r3, s0
 800b4a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b4a4:	3a7f      	subs	r2, #127	; 0x7f
 800b4a6:	2a16      	cmp	r2, #22
 800b4a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4ac:	dc2a      	bgt.n	800b504 <floorf+0x68>
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	da11      	bge.n	800b4d6 <floorf+0x3a>
 800b4b2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b514 <floorf+0x78>
 800b4b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b4ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c2:	dd05      	ble.n	800b4d0 <floorf+0x34>
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da23      	bge.n	800b510 <floorf+0x74>
 800b4c8:	4a13      	ldr	r2, [pc, #76]	; (800b518 <floorf+0x7c>)
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	bf18      	it	ne
 800b4ce:	4613      	movne	r3, r2
 800b4d0:	ee00 3a10 	vmov	s0, r3
 800b4d4:	4770      	bx	lr
 800b4d6:	4911      	ldr	r1, [pc, #68]	; (800b51c <floorf+0x80>)
 800b4d8:	4111      	asrs	r1, r2
 800b4da:	420b      	tst	r3, r1
 800b4dc:	d0fa      	beq.n	800b4d4 <floorf+0x38>
 800b4de:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b514 <floorf+0x78>
 800b4e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b4e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ee:	ddef      	ble.n	800b4d0 <floorf+0x34>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	bfbe      	ittt	lt
 800b4f4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b4f8:	fa40 f202 	asrlt.w	r2, r0, r2
 800b4fc:	189b      	addlt	r3, r3, r2
 800b4fe:	ea23 0301 	bic.w	r3, r3, r1
 800b502:	e7e5      	b.n	800b4d0 <floorf+0x34>
 800b504:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b508:	d3e4      	bcc.n	800b4d4 <floorf+0x38>
 800b50a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b50e:	4770      	bx	lr
 800b510:	2300      	movs	r3, #0
 800b512:	e7dd      	b.n	800b4d0 <floorf+0x34>
 800b514:	7149f2ca 	.word	0x7149f2ca
 800b518:	bf800000 	.word	0xbf800000
 800b51c:	007fffff 	.word	0x007fffff

0800b520 <scalbnf>:
 800b520:	ee10 3a10 	vmov	r3, s0
 800b524:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b528:	d025      	beq.n	800b576 <scalbnf+0x56>
 800b52a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b52e:	d302      	bcc.n	800b536 <scalbnf+0x16>
 800b530:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b534:	4770      	bx	lr
 800b536:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b53a:	d122      	bne.n	800b582 <scalbnf+0x62>
 800b53c:	4b2a      	ldr	r3, [pc, #168]	; (800b5e8 <scalbnf+0xc8>)
 800b53e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b5ec <scalbnf+0xcc>
 800b542:	4298      	cmp	r0, r3
 800b544:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b548:	db16      	blt.n	800b578 <scalbnf+0x58>
 800b54a:	ee10 3a10 	vmov	r3, s0
 800b54e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b552:	3a19      	subs	r2, #25
 800b554:	4402      	add	r2, r0
 800b556:	2afe      	cmp	r2, #254	; 0xfe
 800b558:	dd15      	ble.n	800b586 <scalbnf+0x66>
 800b55a:	ee10 3a10 	vmov	r3, s0
 800b55e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b5f0 <scalbnf+0xd0>
 800b562:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b5f4 <scalbnf+0xd4>
 800b566:	2b00      	cmp	r3, #0
 800b568:	eeb0 7a67 	vmov.f32	s14, s15
 800b56c:	bfb8      	it	lt
 800b56e:	eef0 7a66 	vmovlt.f32	s15, s13
 800b572:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b576:	4770      	bx	lr
 800b578:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b5f8 <scalbnf+0xd8>
 800b57c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b580:	4770      	bx	lr
 800b582:	0dd2      	lsrs	r2, r2, #23
 800b584:	e7e6      	b.n	800b554 <scalbnf+0x34>
 800b586:	2a00      	cmp	r2, #0
 800b588:	dd06      	ble.n	800b598 <scalbnf+0x78>
 800b58a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b58e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b592:	ee00 3a10 	vmov	s0, r3
 800b596:	4770      	bx	lr
 800b598:	f112 0f16 	cmn.w	r2, #22
 800b59c:	da1a      	bge.n	800b5d4 <scalbnf+0xb4>
 800b59e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b5a2:	4298      	cmp	r0, r3
 800b5a4:	ee10 3a10 	vmov	r3, s0
 800b5a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ac:	dd0a      	ble.n	800b5c4 <scalbnf+0xa4>
 800b5ae:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b5f0 <scalbnf+0xd0>
 800b5b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b5f4 <scalbnf+0xd4>
 800b5b6:	eef0 7a40 	vmov.f32	s15, s0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	bf18      	it	ne
 800b5be:	eeb0 0a47 	vmovne.f32	s0, s14
 800b5c2:	e7db      	b.n	800b57c <scalbnf+0x5c>
 800b5c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b5f8 <scalbnf+0xd8>
 800b5c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b5fc <scalbnf+0xdc>
 800b5cc:	eef0 7a40 	vmov.f32	s15, s0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	e7f3      	b.n	800b5bc <scalbnf+0x9c>
 800b5d4:	3219      	adds	r2, #25
 800b5d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b5da:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b5de:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b600 <scalbnf+0xe0>
 800b5e2:	ee07 3a10 	vmov	s14, r3
 800b5e6:	e7c4      	b.n	800b572 <scalbnf+0x52>
 800b5e8:	ffff3cb0 	.word	0xffff3cb0
 800b5ec:	4c000000 	.word	0x4c000000
 800b5f0:	7149f2ca 	.word	0x7149f2ca
 800b5f4:	f149f2ca 	.word	0xf149f2ca
 800b5f8:	0da24260 	.word	0x0da24260
 800b5fc:	8da24260 	.word	0x8da24260
 800b600:	33000000 	.word	0x33000000

0800b604 <_init>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	bf00      	nop
 800b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60a:	bc08      	pop	{r3}
 800b60c:	469e      	mov	lr, r3
 800b60e:	4770      	bx	lr

0800b610 <_fini>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr
