
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0d4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a2ac  0800a2ac  0001a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6fc  0800a6fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a704  0800a704  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a70c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000070  0800a77c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  0800a77c  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d73  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003097  00000000  00000000  00039e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0003ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  0003e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293c6  00000000  00000000  0003f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a452  00000000  00000000  00068cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112775  00000000  00000000  00083148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001958bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a8  00000000  00000000  00195910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a294 	.word	0x0800a294

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800a294 	.word	0x0800a294

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	ed87 0a03 	vstr	s0, [r7, #12]
 8000526:	edc7 0a02 	vstr	s1, [r7, #8]
 800052a:	ed87 1a01 	vstr	s2, [r7, #4]
 800052e:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	ed93 7a00 	vldr	s14, [r3]
 8000536:	edd7 6a03 	vldr	s13, [r7, #12]
 800053a:	edd7 7a01 	vldr	s15, [r7, #4]
 800053e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 800054c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000550:	edd7 7a03 	vldr	s15, [r7, #12]
 8000554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	ee07 3a90 	vmov	s15, r3
}
 800056c:	eeb0 0a67 	vmov.f32	s0, s15
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	ed87 0a03 	vstr	s0, [r7, #12]
 8000584:	edc7 0a02 	vstr	s1, [r7, #8]
 8000588:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 800058c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	db0b      	blt.n	80005b2 <gfDivideAvoidZero+0x38>
 800059a:	ed97 7a02 	vldr	s14, [r7, #8]
 800059e:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	d502      	bpl.n	80005b2 <gfDivideAvoidZero+0x38>
		den = threshold;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e017      	b.n	80005e2 <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80005b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	d510      	bpl.n	80005e2 <gfDivideAvoidZero+0x68>
 80005c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c4:	eef1 7a67 	vneg.f32	s15, s15
 80005c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80005cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	dd05      	ble.n	80005e2 <gfDivideAvoidZero+0x68>
		den = -threshold;
 80005d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005da:	eef1 7a67 	vneg.f32	s15, s15
 80005de:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80005e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80005e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ee:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000612:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000678 <gfWrapTheta+0x70>
 8000616:	ed97 0a01 	vldr	s0, [r7, #4]
 800061a:	f008 feed 	bl	80093f8 <fmodf>
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800067c <gfWrapTheta+0x74>
 800062a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	dd08      	ble.n	8000646 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000634:	edd7 7a01 	vldr	s15, [r7, #4]
 8000638:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000678 <gfWrapTheta+0x70>
 800063c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000640:	edc7 7a01 	vstr	s15, [r7, #4]
 8000644:	e010      	b.n	8000668 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000646:	edd7 7a01 	vldr	s15, [r7, #4]
 800064a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000680 <gfWrapTheta+0x78>
 800064e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000656:	d507      	bpl.n	8000668 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000658:	edd7 7a01 	vldr	s15, [r7, #4]
 800065c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000678 <gfWrapTheta+0x70>
 8000660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000664:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	ee07 3a90 	vmov	s15, r3
}
 800066e:	eeb0 0a67 	vmov.f32	s0, s15
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40c90fdb 	.word	0x40c90fdb
 800067c:	40490fdb 	.word	0x40490fdb
 8000680:	c0490fdb 	.word	0xc0490fdb

08000684 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	ed87 0a03 	vstr	s0, [r7, #12]
 800068e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000692:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000696:	ed97 7a03 	vldr	s14, [r7, #12]
 800069a:	edd7 7a02 	vldr	s15, [r7, #8]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	dd01      	ble.n	80006ac <gUpperLowerLimit+0x28>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80006ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006bc:	d501      	bpl.n	80006c2 <gUpperLowerLimit+0x3e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
	return input;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	ee07 3a90 	vmov	s15, r3
}
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <readButton1>:



uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <readButton1+0x20>)
 80006e4:	f005 fa96 	bl	8005c14 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
	return B1;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	48000800 	.word	0x48000800

080006fc <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000708:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	3301      	adds	r3, #1
 800072e:	085b      	lsrs	r3, r3, #1
 8000730:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074a:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000758:	eef1 7a67 	vneg.f32	s15, s15
 800075c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000768:	d50a      	bpl.n	8000780 <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000774:	ed97 7a05 	vldr	s14, [r7, #20]
 8000778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077c:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000780:	ed97 7a05 	vldr	s14, [r7, #20]
 8000784:	eddf 6a07 	vldr	s13, [pc, #28]	; 80007a4 <readTimeInterval+0x8c>
 8000788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800078c:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	ee07 3a90 	vmov	s15, r3
}
 8000796:	eeb0 0a67 	vmov.f32	s0, s15
 800079a:	371c      	adds	r7, #28
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	4d221fe8 	.word	0x4d221fe8

080007a8 <readVolume>:

float readVolume(void){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <readVolume+0x38>)
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	80fb      	strh	r3, [r7, #6]

	Volume = Volume_ad * 0.0002442f;
 80007b4:	88fb      	ldrh	r3, [r7, #6]
 80007b6:	ee07 3a90 	vmov	s15, r3
 80007ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007be:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80007e4 <readVolume+0x3c>
 80007c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c6:	edc7 7a00 	vstr	s15, [r7]
	//Volume = ((int16_t)Volume_ad - 856) * 0.000573394f;
	return Volume;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	ee07 3a90 	vmov	s15, r3
}
 80007d0:	eeb0 0a67 	vmov.f32	s0, s15
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	398007f8 	.word	0x398007f8

080007e8 <readVdc>:

float readVdc(void){
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <readVdc+0x38>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * AD2VOLTAGE;
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007fe:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000824 <readVdc+0x3c>
 8000802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000806:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	ee07 3a90 	vmov	s15, r3
}
 8000810:	eeb0 0a67 	vmov.f32	s0, s15
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2000008c 	.word	0x2000008c
 8000824:	3c7cd035 	.word	0x3c7cd035

08000828 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800083a:	b29a      	uxth	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000844:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3302      	adds	r3, #2
 800084c:	b292      	uxth	r2, r2
 800084e:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000854:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3304      	adds	r3, #4
 800085c:	b292      	uxth	r2, r2
 800085e:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	ee07 3a90 	vmov	s15, r3
 8000868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800086c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80008dc <readCurrent+0xb4>
 8000870:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000874:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80008e0 <readCurrent+0xb8>
 8000878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3302      	adds	r3, #2
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000890:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80008e4 <readCurrent+0xbc>
 8000894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	3304      	adds	r3, #4
 800089c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80008e0 <readCurrent+0xb8>
 80008a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a4:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3304      	adds	r3, #4
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80008e8 <readCurrent+0xc0>
 80008ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3308      	adds	r3, #8
 80008c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80008e0 <readCurrent+0xb8>
 80008c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ca:	edc3 7a00 	vstr	s15, [r3]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	44f0c000 	.word	0x44f0c000
 80008e0:	bafdbcc5 	.word	0xbafdbcc5
 80008e4:	44f08000 	.word	0x44f08000
 80008e8:	44efa000 	.word	0x44efa000

080008ec <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 80008f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f005 f98a 	bl	8005c14 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	1c5c      	adds	r4, r3, #1
 800090c:	2108      	movs	r1, #8
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <readHallSignal+0x48>)
 8000910:	f005 f980 	bl	8005c14 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1c9c      	adds	r4, r3, #2
 800091c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <readHallSignal+0x48>)
 8000922:	f005 f977 	bl	8005c14 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	7023      	strb	r3, [r4, #0]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	bf00      	nop
 8000934:	48000400 	.word	0x48000400

08000938 <writeOutputMode>:

void writeOutputMode(int8_t* outputMode){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f993 3000 	ldrsb.w	r3, [r3]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d106      	bne.n	8000958 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	4819      	ldr	r0, [pc, #100]	; (80009b8 <writeOutputMode+0x80>)
 8000952:	f005 f977 	bl	8005c44 <HAL_GPIO_WritePin>
 8000956:	e005      	b.n	8000964 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <writeOutputMode+0x80>)
 8000960:	f005 f970 	bl	8005c44 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3301      	adds	r3, #1
 8000968:	f993 3000 	ldrsb.w	r3, [r3]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d106      	bne.n	800097e <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000976:	4810      	ldr	r0, [pc, #64]	; (80009b8 <writeOutputMode+0x80>)
 8000978:	f005 f964 	bl	8005c44 <HAL_GPIO_WritePin>
 800097c:	e005      	b.n	800098a <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <writeOutputMode+0x80>)
 8000986:	f005 f95d 	bl	8005c44 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3302      	adds	r3, #2
 800098e:	f993 3000 	ldrsb.w	r3, [r3]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d106      	bne.n	80009a4 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <writeOutputMode+0x80>)
 800099e:	f005 f951 	bl	8005c44 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 80009a2:	e005      	b.n	80009b0 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <writeOutputMode+0x80>)
 80009ac:	f005 f94a 	bl	8005c44 <HAL_GPIO_WritePin>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	48000800 	.word	0x48000800

080009bc <writeDuty>:

void writeDuty(float* Duty){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	ed93 7a00 	vldr	s14, [r3]
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <writeDuty+0x80>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <writeDuty+0x80>)
 80009dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009e0:	ee17 2a90 	vmov	r2, s15
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3304      	adds	r3, #4
 80009ea:	ed93 7a00 	vldr	s14, [r3]
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <writeDuty+0x80>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <writeDuty+0x80>)
 8000a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a04:	ee17 2a90 	vmov	r2, s15
 8000a08:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3308      	adds	r3, #8
 8000a0e:	ed93 7a00 	vldr	s14, [r3]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <writeDuty+0x80>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <writeDuty+0x80>)
 8000a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a28:	ee17 2a90 	vmov	r2, s15
 8000a2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40012c00 	.word	0x40012c00

08000a40 <sixStepTasks>:
static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode);
static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty);


// input DutyRef minus1-1, output Duty 0-1
void sixStepTasks(float DutyRef, uint8_t leadAngleModeFlg, float leadAngle, float* Theta, float* Duty, int8_t* outputMode){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	ed87 0a05 	vstr	s0, [r7, #20]
 8000a4a:	edc7 0a03 	vstr	s1, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4603      	mov	r3, r0
 8000a56:	74fb      	strb	r3, [r7, #19]
	float Ki_PLL;
	float Ts_PLL;
	float timeInterval;

	// Read Hall Signals
	readHallSignal(gHall);
 8000a58:	489e      	ldr	r0, [pc, #632]	; (8000cd4 <sixStepTasks+0x294>)
 8000a5a:	f7ff ff47 	bl	80008ec <readHallSignal>

	// Hold & Read Input Capture Count
	gInputCaptureCnt_pre = gInputCaptureCnt;
 8000a5e:	4b9e      	ldr	r3, [pc, #632]	; (8000cd8 <sixStepTasks+0x298>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a9e      	ldr	r2, [pc, #632]	; (8000cdc <sixStepTasks+0x29c>)
 8000a64:	6013      	str	r3, [r2, #0]
	gInputCaptureCnt = readInputCaptureCnt();
 8000a66:	f7ff fe49 	bl	80006fc <readInputCaptureCnt>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4a9a      	ldr	r2, [pc, #616]	; (8000cd8 <sixStepTasks+0x298>)
 8000a6e:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(gInputCaptureCnt != gInputCaptureCnt_pre){
 8000a70:	4b99      	ldr	r3, [pc, #612]	; (8000cd8 <sixStepTasks+0x298>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b99      	ldr	r3, [pc, #612]	; (8000cdc <sixStepTasks+0x29c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d016      	beq.n	8000aaa <sixStepTasks+0x6a>
		timeInterval = readTimeInterval(gInputCaptureCnt, gInputCaptureCnt_pre);
 8000a7c:	4b96      	ldr	r3, [pc, #600]	; (8000cd8 <sixStepTasks+0x298>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a96      	ldr	r2, [pc, #600]	; (8000cdc <sixStepTasks+0x29c>)
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe46 	bl	8000718 <readTimeInterval>
 8000a8c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8000a90:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8000ce0 <sixStepTasks+0x2a0>
 8000a94:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8000a98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a9c:	f7ff fd6d 	bl	800057a <gfDivideAvoidZero>
 8000aa0:	eef0 7a40 	vmov.f32	s15, s0
 8000aa4:	4b8f      	ldr	r3, [pc, #572]	; (8000ce4 <sixStepTasks+0x2a4>)
 8000aa6:	edc3 7a00 	vstr	s15, [r3]
	}

	// Calculate PLL Gain based on Electrical Frequency
	wc_PLL = gElectFreq * 0.5f * TWOPI;
 8000aaa:	4b8e      	ldr	r3, [pc, #568]	; (8000ce4 <sixStepTasks+0x2a4>)
 8000aac:	edd3 7a00 	vldr	s15, [r3]
 8000ab0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab8:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8000ce8 <sixStepTasks+0x2a8>
 8000abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	Ts_PLL = 1.0f / (gElectFreq * 6.0f);
 8000ac4:	4b87      	ldr	r3, [pc, #540]	; (8000ce4 <sixStepTasks+0x2a4>)
 8000ac6:	edd3 7a00 	vldr	s15, [r3]
 8000aca:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000ace:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ada:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Kp_PLL = wc_PLL;
 8000ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae0:	623b      	str	r3, [r7, #32]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000ae2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ae6:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8000cec <sixStepTasks+0x2ac>
 8000aea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afe:	edc7 7a07 	vstr	s15, [r7, #28]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8000b02:	4b7b      	ldr	r3, [pc, #492]	; (8000cf0 <sixStepTasks+0x2b0>)
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	4b7b      	ldr	r3, [pc, #492]	; (8000cf4 <sixStepTasks+0x2b4>)
 8000b08:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(gHall);
 8000b0a:	4872      	ldr	r0, [pc, #456]	; (8000cd4 <sixStepTasks+0x294>)
 8000b0c:	f000 f90c 	bl	8000d28 <calcVoltageMode>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b76      	ldr	r3, [pc, #472]	; (8000cf0 <sixStepTasks+0x2b0>)
 8000b16:	701a      	strb	r2, [r3, #0]

	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8000b18:	4b77      	ldr	r3, [pc, #476]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a77      	ldr	r2, [pc, #476]	; (8000cfc <sixStepTasks+0x2bc>)
 8000b1e:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8000b20:	4b74      	ldr	r3, [pc, #464]	; (8000cf4 <sixStepTasks+0x2b4>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4a72      	ldr	r2, [pc, #456]	; (8000cf0 <sixStepTasks+0x2b0>)
 8000b26:	7811      	ldrb	r1, [r2, #0]
 8000b28:	4a75      	ldr	r2, [pc, #468]	; (8000d00 <sixStepTasks+0x2c0>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f942 	bl	8000db4 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000b30:	4b6f      	ldr	r3, [pc, #444]	; (8000cf0 <sixStepTasks+0x2b0>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4a72      	ldr	r2, [pc, #456]	; (8000d00 <sixStepTasks+0x2c0>)
 8000b36:	f992 2000 	ldrsb.w	r2, [r2]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f965 	bl	8000e0c <calcElectAngleFromVoltageMode>
 8000b42:	eef0 7a40 	vmov.f32	s15, s0
 8000b46:	4b6c      	ldr	r3, [pc, #432]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000b48:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000b4c:	4b6a      	ldr	r3, [pc, #424]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000b4e:	edd3 7a00 	vldr	s15, [r3]
 8000b52:	eeb0 0a67 	vmov.f32	s0, s15
 8000b56:	f7ff fd57 	bl	8000608 <gfWrapTheta>
 8000b5a:	eef0 7a40 	vmov.f32	s15, s0
 8000b5e:	4b66      	ldr	r3, [pc, #408]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000b60:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sLeadAngleModeFlg_pre = sLeadAngleModeFlg;
 8000b64:	4b67      	ldr	r3, [pc, #412]	; (8000d04 <sixStepTasks+0x2c4>)
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <sixStepTasks+0x2c8>)
 8000b6a:	701a      	strb	r2, [r3, #0]
	sLeadAngleModeFlg = leadAngleModeFlg;//calcLeadAngleModeFlg();
 8000b6c:	4a65      	ldr	r2, [pc, #404]	; (8000d04 <sixStepTasks+0x2c4>)
 8000b6e:	7cfb      	ldrb	r3, [r7, #19]
 8000b70:	7013      	strb	r3, [r2, #0]

	if(sLeadAngleModeFlg == 1){
 8000b72:	4b64      	ldr	r3, [pc, #400]	; (8000d04 <sixStepTasks+0x2c4>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	f040 8082 	bne.w	8000c80 <sixStepTasks+0x240>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sLeadAngleModeFlg_pre == 0 ){
 8000b7c:	4b62      	ldr	r3, [pc, #392]	; (8000d08 <sixStepTasks+0x2c8>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d111      	bne.n	8000ba8 <sixStepTasks+0x168>
			sElectAngVeloEstimate = gElectFreq * TWOPI;
 8000b84:	4b57      	ldr	r3, [pc, #348]	; (8000ce4 <sixStepTasks+0x2a4>)
 8000b86:	edd3 7a00 	vldr	s15, [r3]
 8000b8a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000ce8 <sixStepTasks+0x2a8>
 8000b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b92:	4b5e      	ldr	r3, [pc, #376]	; (8000d0c <sixStepTasks+0x2cc>)
 8000b94:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000b98:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <sixStepTasks+0x2cc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a5c      	ldr	r2, [pc, #368]	; (8000d10 <sixStepTasks+0x2d0>)
 8000b9e:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8000ba0:	4b55      	ldr	r3, [pc, #340]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a5b      	ldr	r2, [pc, #364]	; (8000d14 <sixStepTasks+0x2d4>)
 8000ba6:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000ba8:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <sixStepTasks+0x2cc>)
 8000baa:	edd3 7a00 	vldr	s15, [r3]
 8000bae:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000d18 <sixStepTasks+0x2d8>
 8000bb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000bb6:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <sixStepTasks+0x2d4>)
 8000bb8:	edd3 7a00 	vldr	s15, [r3]
 8000bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc0:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <sixStepTasks+0x2d4>)
 8000bc2:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <sixStepTasks+0x2d4>)
 8000bc8:	edd3 7a00 	vldr	s15, [r3]
 8000bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd0:	f7ff fd1a 	bl	8000608 <gfWrapTheta>
 8000bd4:	eef0 7a40 	vmov.f32	s15, s0
 8000bd8:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <sixStepTasks+0x2d4>)
 8000bda:	edc3 7a00 	vstr	s15, [r3]

		electAnglePrusLeadAngle = sElectAngleEstimate + leadAngle;
 8000bde:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <sixStepTasks+0x2d4>)
 8000be0:	edd3 7a00 	vldr	s15, [r3]
 8000be4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bec:	edc7 7a06 	vstr	s15, [r7, #24]
		electAnglePrusLeadAngle = gfWrapTheta(electAnglePrusLeadAngle);
 8000bf0:	ed97 0a06 	vldr	s0, [r7, #24]
 8000bf4:	f7ff fd08 	bl	8000608 <gfWrapTheta>
 8000bf8:	ed87 0a06 	vstr	s0, [r7, #24]

		sVoltageModeModify = calcVoltageModeFromElectAngle(electAnglePrusLeadAngle);
 8000bfc:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c00:	f000 f95e 	bl	8000ec0 <calcVoltageModeFromElectAngle>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <sixStepTasks+0x2dc>)
 8000c0a:	701a      	strb	r2, [r3, #0]

		if( sElectAngleActual != sElectAngleActual_pre){
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000c0e:	ed93 7a00 	vldr	s14, [r3]
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <sixStepTasks+0x2bc>)
 8000c14:	edd3 7a00 	vldr	s15, [r3]
 8000c18:	eeb4 7a67 	vcmp.f32	s14, s15
 8000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c20:	d027      	beq.n	8000c72 <sixStepTasks+0x232>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000c22:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000c24:	ed93 7a00 	vldr	s14, [r3]
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <sixStepTasks+0x2d4>)
 8000c2a:	edd3 7a00 	vldr	s15, [r3]
 8000c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c32:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <sixStepTasks+0x2e0>)
 8000c34:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <sixStepTasks+0x2e0>)
 8000c3a:	edd3 7a00 	vldr	s15, [r3]
 8000c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c42:	f7ff fce1 	bl	8000608 <gfWrapTheta>
 8000c46:	eef0 7a40 	vmov.f32	s15, s0
 8000c4a:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <sixStepTasks+0x2e0>)
 8000c4c:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <sixStepTasks+0x2e0>)
 8000c52:	edd3 7a00 	vldr	s15, [r3]
 8000c56:	482e      	ldr	r0, [pc, #184]	; (8000d10 <sixStepTasks+0x2d0>)
 8000c58:	ed97 1a07 	vldr	s2, [r7, #28]
 8000c5c:	edd7 0a08 	vldr	s1, [r7, #32]
 8000c60:	eeb0 0a67 	vmov.f32	s0, s15
 8000c64:	f7ff fc5a 	bl	800051c <cfPhaseLockedLoop>
 8000c68:	eef0 7a40 	vmov.f32	s15, s0
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <sixStepTasks+0x2cc>)
 8000c6e:	edc3 7a00 	vstr	s15, [r3]
		}

		calcOutputMode(sVoltageModeModify, sOutputMode);
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <sixStepTasks+0x2dc>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	492b      	ldr	r1, [pc, #172]	; (8000d24 <sixStepTasks+0x2e4>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f9d1 	bl	8001020 <calcOutputMode>
 8000c7e:	e009      	b.n	8000c94 <sixStepTasks+0x254>

	}

	else{
		// Control without Electrical Angle ( Use Only Hall Signals )
		calcOutputMode(sVoltageMode, sOutputMode);
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <sixStepTasks+0x2b0>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4927      	ldr	r1, [pc, #156]	; (8000d24 <sixStepTasks+0x2e4>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f9ca 	bl	8001020 <calcOutputMode>
		sElectAngleEstimate = sElectAngleActual;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <sixStepTasks+0x2b8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <sixStepTasks+0x2d4>)
 8000c92:	6013      	str	r3, [r2, #0]
	}

	// Output Voltage
	calcDuty(sOutputMode, DutyRef, Duty);
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	ed97 0a05 	vldr	s0, [r7, #20]
 8000c9a:	4822      	ldr	r0, [pc, #136]	; (8000d24 <sixStepTasks+0x2e4>)
 8000c9c:	f000 fa34 	bl	8001108 <calcDuty>

	// Output Static Signals
	outputMode[0] = sOutputMode[0];
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <sixStepTasks+0x2e4>)
 8000ca2:	f993 2000 	ldrsb.w	r2, [r3]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	701a      	strb	r2, [r3, #0]
	outputMode[1] = sOutputMode[1];
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <sixStepTasks+0x2e4>)
 8000cb0:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8000cb4:	701a      	strb	r2, [r3, #0]
	outputMode[2] = sOutputMode[2];
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <sixStepTasks+0x2e4>)
 8000cbc:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8000cc0:	701a      	strb	r2, [r3, #0]

	*Theta = sElectAngleEstimate;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <sixStepTasks+0x2d4>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	601a      	str	r2, [r3, #0]


}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000090 	.word	0x20000090
 8000cd8:	20000094 	.word	0x20000094
 8000cdc:	20000098 	.word	0x20000098
 8000ce0:	31ca1db9 	.word	0x31ca1db9
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	40c90fdb 	.word	0x40c90fdb
 8000cec:	3e4ccccd 	.word	0x3e4ccccd
 8000cf0:	200000d7 	.word	0x200000d7
 8000cf4:	200000d8 	.word	0x200000d8
 8000cf8:	200000e0 	.word	0x200000e0
 8000cfc:	200000e4 	.word	0x200000e4
 8000d00:	200000da 	.word	0x200000da
 8000d04:	200000db 	.word	0x200000db
 8000d08:	200000dc 	.word	0x200000dc
 8000d0c:	200000f0 	.word	0x200000f0
 8000d10:	200000ec 	.word	0x200000ec
 8000d14:	200000e8 	.word	0x200000e8
 8000d18:	4684d000 	.word	0x4684d000
 8000d1c:	200000d9 	.word	0x200000d9
 8000d20:	200000f4 	.word	0x200000f4
 8000d24:	200000d4 	.word	0x200000d4

08000d28 <calcVoltageMode>:
else
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

static uint8_t calcVoltageMode(uint8_t* Hall){
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3302      	adds	r3, #2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3301      	adds	r3, #1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	d821      	bhi.n	8000da0 <calcVoltageMode+0x78>
 8000d5c:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <calcVoltageMode+0x3c>)
 8000d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d62:	bf00      	nop
 8000d64:	08000d9b 	.word	0x08000d9b
 8000d68:	08000d83 	.word	0x08000d83
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000d8f 	.word	0x08000d8f
 8000d74:	08000d95 	.word	0x08000d95
 8000d78:	08000d89 	.word	0x08000d89
	  case 3:
		voltageMode = 3;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d80:	e011      	b.n	8000da6 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	73fb      	strb	r3, [r7, #15]
		break;
 8000d86:	e00e      	b.n	8000da6 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d8c:	e00b      	b.n	8000da6 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	73fb      	strb	r3, [r7, #15]
		break;
 8000d92:	e008      	b.n	8000da6 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
		break;
 8000d98:	e005      	b.n	8000da6 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d9e:	e002      	b.n	8000da6 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
	  break;
 8000da4:	bf00      	nop
	}
	return voltageMode;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <calcRotDirFromVoltageMode>:
static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	603a      	str	r2, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8000dc4:	79ba      	ldrb	r2, [r7, #6]
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	dd04      	ble.n	8000de0 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	3b06      	subs	r3, #6
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e008      	b.n	8000df2 <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8000de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	da03      	bge.n	8000df2 <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	3306      	adds	r3, #6
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	701a      	strb	r2, [r3, #0]

}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	460a      	mov	r2, r1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d822      	bhi.n	8000e6a <calcElectAngleFromVoltageMode+0x5e>
 8000e24:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <calcElectAngleFromVoltageMode+0x20>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e5f 	.word	0x08000e5f
 8000e30:	08000e65 	.word	0x08000e65
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000e4d 	.word	0x08000e4d
 8000e3c:	08000e53 	.word	0x08000e53
 8000e40:	08000e59 	.word	0x08000e59
		  case 3:
			  electAngle_Center = 0.0f;
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
			break;
 8000e4a:	e012      	b.n	8000e72 <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <calcElectAngleFromVoltageMode+0x9c>)
 8000e4e:	60fb      	str	r3, [r7, #12]
			break;
 8000e50:	e00f      	b.n	8000e72 <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <calcElectAngleFromVoltageMode+0xa0>)
 8000e54:	60fb      	str	r3, [r7, #12]
			break;
 8000e56:	e00c      	b.n	8000e72 <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <calcElectAngleFromVoltageMode+0xa4>)
 8000e5a:	60fb      	str	r3, [r7, #12]
			break;
 8000e5c:	e009      	b.n	8000e72 <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <calcElectAngleFromVoltageMode+0xa8>)
 8000e60:	60fb      	str	r3, [r7, #12]
			break;
 8000e62:	e006      	b.n	8000e72 <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <calcElectAngleFromVoltageMode+0xac>)
 8000e66:	60fb      	str	r3, [r7, #12]
			break;
 8000e68:	e003      	b.n	8000e72 <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
		  break;
 8000e70:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8000e72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ebc <calcElectAngleFromVoltageMode+0xb0>
 8000e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e86:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e8e:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	ee07 3a90 	vmov	s15, r3
}
 8000e98:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	3f860a92 	.word	0x3f860a92
 8000eac:	40060a92 	.word	0x40060a92
 8000eb0:	40490fdb 	.word	0x40490fdb
 8000eb4:	c0060a92 	.word	0xc0060a92
 8000eb8:	bf860a92 	.word	0xbf860a92
 8000ebc:	3f060a92 	.word	0x3f060a92

08000ec0 <calcVoltageModeFromElectAngle>:
		leadAngleModeFlg = 1;

	return leadAngleModeFlg;
}

static uint8_t calcVoltageModeFromElectAngle(float electAngle){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b08b      	sub	sp, #44	; 0x2c
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t voltageMode = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Angle Limit : minus PI - prus PI
	float voltageMode1_StartAngle = -PI + PIDIV6;
 8000ed0:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <calcVoltageModeFromElectAngle+0x148>)
 8000ed2:	623b      	str	r3, [r7, #32]
	float voltageMode2_StartAngle = -PIDIV3 * 2.0f + PIDIV6;
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <calcVoltageModeFromElectAngle+0x14c>)
 8000ed6:	61fb      	str	r3, [r7, #28]
	float voltageMode3_StartAngle = -PIDIV3 + PIDIV6;
 8000ed8:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <calcVoltageModeFromElectAngle+0x150>)
 8000eda:	61bb      	str	r3, [r7, #24]
	float voltageMode4_StartAngle = PIDIV6;
 8000edc:	4b4d      	ldr	r3, [pc, #308]	; (8001014 <calcVoltageModeFromElectAngle+0x154>)
 8000ede:	617b      	str	r3, [r7, #20]
	float voltageMode5_StartAngle = PIDIV3 + PIDIV6;
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <calcVoltageModeFromElectAngle+0x158>)
 8000ee2:	613b      	str	r3, [r7, #16]
	float voltageMode6_StartAngle = PIDIV3 * 2.0f + PIDIV6;
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	; (800101c <calcVoltageModeFromElectAngle+0x15c>)
 8000ee6:	60fb      	str	r3, [r7, #12]

	if(electAngle >= voltageMode6_StartAngle || electAngle < voltageMode1_StartAngle ){
 8000ee8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	da08      	bge.n	8000f0c <calcVoltageModeFromElectAngle+0x4c>
 8000efa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000efe:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	d503      	bpl.n	8000f14 <calcVoltageModeFromElectAngle+0x54>
		voltageMode = 6;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f12:	e070      	b.n	8000ff6 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode1_StartAngle && electAngle < voltageMode2_StartAngle ){
 8000f14:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f18:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f24:	db0c      	blt.n	8000f40 <calcVoltageModeFromElectAngle+0x80>
 8000f26:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	d503      	bpl.n	8000f40 <calcVoltageModeFromElectAngle+0x80>
		voltageMode = 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f3e:	e05a      	b.n	8000ff6 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode2_StartAngle && electAngle < voltageMode3_StartAngle ){
 8000f40:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f44:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	db0c      	blt.n	8000f6c <calcVoltageModeFromElectAngle+0xac>
 8000f52:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f56:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	d503      	bpl.n	8000f6c <calcVoltageModeFromElectAngle+0xac>
		voltageMode = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f6a:	e044      	b.n	8000ff6 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode3_StartAngle && electAngle < voltageMode4_StartAngle ){
 8000f6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	db0c      	blt.n	8000f98 <calcVoltageModeFromElectAngle+0xd8>
 8000f7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d503      	bpl.n	8000f98 <calcVoltageModeFromElectAngle+0xd8>
		voltageMode = 3;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f96:	e02e      	b.n	8000ff6 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode4_StartAngle && electAngle < voltageMode5_StartAngle ){
 8000f98:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa8:	db0c      	blt.n	8000fc4 <calcVoltageModeFromElectAngle+0x104>
 8000faa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d503      	bpl.n	8000fc4 <calcVoltageModeFromElectAngle+0x104>
		voltageMode = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fc2:	e018      	b.n	8000ff6 <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode5_StartAngle && electAngle < voltageMode6_StartAngle ){
 8000fc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	db0c      	blt.n	8000ff0 <calcVoltageModeFromElectAngle+0x130>
 8000fd6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	d503      	bpl.n	8000ff0 <calcVoltageModeFromElectAngle+0x130>
		voltageMode = 5;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fee:	e002      	b.n	8000ff6 <calcVoltageModeFromElectAngle+0x136>
	}
	else
		voltageMode = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return voltageMode;
 8000ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	372c      	adds	r7, #44	; 0x2c
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	c0278d36 	.word	0xc0278d36
 800100c:	bfc90fdb 	.word	0xbfc90fdb
 8001010:	bf060a92 	.word	0xbf060a92
 8001014:	3f060a92 	.word	0x3f060a92
 8001018:	3fc90fdb 	.word	0x3fc90fdb
 800101c:	40278d36 	.word	0x40278d36

08001020 <calcOutputMode>:

static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
		// Decide output mode
		switch(voltageMode){
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3b01      	subs	r3, #1
 8001030:	2b05      	cmp	r3, #5
 8001032:	d857      	bhi.n	80010e4 <calcOutputMode+0xc4>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <calcOutputMode+0x1c>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	080010b5 	.word	0x080010b5
 8001040:	080010cd 	.word	0x080010cd
 8001044:	08001055 	.word	0x08001055
 8001048:	0800106d 	.word	0x0800106d
 800104c:	08001085 	.word	0x08001085
 8001050:	0800109d 	.word	0x0800109d
		  case 3:
			outputMode[0] = OUTPUTMODE_OPEN;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	3302      	adds	r3, #2
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	701a      	strb	r2, [r3, #0]
			break;
 800106a:	e047      	b.n	80010fc <calcOutputMode+0xdc>
		  case 4:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	22ff      	movs	r2, #255	; 0xff
 8001070:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3302      	adds	r3, #2
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
			break;
 8001082:	e03b      	b.n	80010fc <calcOutputMode+0xdc>
		  case 5:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	22ff      	movs	r2, #255	; 0xff
 8001088:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	3302      	adds	r3, #2
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
			break;
 800109a:	e02f      	b.n	80010fc <calcOutputMode+0xdc>
		  case 6:
			outputMode[0] = OUTPUTMODE_OPEN;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
			break;
 80010b2:	e023      	b.n	80010fc <calcOutputMode+0xdc>
		  case 1:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
			break;
 80010ca:	e017      	b.n	80010fc <calcOutputMode+0xdc>
		  case 2:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3302      	adds	r3, #2
 80010de:	22ff      	movs	r2, #255	; 0xff
 80010e0:	701a      	strb	r2, [r3, #0]
			break;
 80010e2:	e00b      	b.n	80010fc <calcOutputMode+0xdc>
		  default :
			outputMode[0] = OUTPUTMODE_OPEN;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3302      	adds	r3, #2
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
		  break;
 80010fa:	bf00      	nop
		}
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <calcDuty>:

static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty){
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	ed87 0a02 	vstr	s0, [r7, #8]
 8001114:	6079      	str	r1, [r7, #4]

	// if DutyRef < 0, swap OUTPUTMODE_POSITIVE and OUTPUTMODE_NEGATIVE
	int8_t outputModeMulSwapGain[3];
	int8_t swapGain;

	if (DutyRef > 0)
 8001116:	edd7 7a02 	vldr	s15, [r7, #8]
 800111a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	dd02      	ble.n	800112a <calcDuty+0x22>
		swapGain = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	75fb      	strb	r3, [r7, #23]
 8001128:	e001      	b.n	800112e <calcDuty+0x26>
	else
		swapGain = -1;
 800112a:	23ff      	movs	r3, #255	; 0xff
 800112c:	75fb      	strb	r3, [r7, #23]


	outputModeMulSwapGain[0]  = outputMode[0] * swapGain;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f993 3000 	ldrsb.w	r3, [r3]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	fb12 f303 	smulbb	r3, r2, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	b25b      	sxtb	r3, r3
 8001140:	753b      	strb	r3, [r7, #20]
	outputModeMulSwapGain[1]  = outputMode[1] * swapGain;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	f993 3000 	ldrsb.w	r3, [r3]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	fb12 f303 	smulbb	r3, r2, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	757b      	strb	r3, [r7, #21]
	outputModeMulSwapGain[2]  = outputMode[2] * swapGain;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3302      	adds	r3, #2
 800115c:	f993 3000 	ldrsb.w	r3, [r3]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	fb12 f303 	smulbb	r3, r2, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	b25b      	sxtb	r3, r3
 800116c:	75bb      	strb	r3, [r7, #22]

	if( outputModeMulSwapGain[0] < 0) outputModeMulSwapGain[0] = 0;
 800116e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da01      	bge.n	800117a <calcDuty+0x72>
 8001176:	2300      	movs	r3, #0
 8001178:	753b      	strb	r3, [r7, #20]
	if( outputModeMulSwapGain[1] < 0) outputModeMulSwapGain[1] = 0;
 800117a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da01      	bge.n	8001186 <calcDuty+0x7e>
 8001182:	2300      	movs	r3, #0
 8001184:	757b      	strb	r3, [r7, #21]
	if( outputModeMulSwapGain[2] < 0) outputModeMulSwapGain[2] = 0;
 8001186:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800118a:	2b00      	cmp	r3, #0
 800118c:	da01      	bge.n	8001192 <calcDuty+0x8a>
 800118e:	2300      	movs	r3, #0
 8001190:	75bb      	strb	r3, [r7, #22]


	Duty[0] = (float)(outputModeMulSwapGain[0] * DutyRef * swapGain);
 8001192:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119e:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (float)(outputModeMulSwapGain[1] * DutyRef * swapGain);
 80011bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3304      	adds	r3, #4
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (float)(outputModeMulSwapGain[2] * DutyRef * swapGain);
 80011e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3308      	adds	r3, #8
 800120c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001210:	edc3 7a00 	vstr	s15, [r3]

}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <VectorControlTasks>:
static float calcAmpFromVect(float* Vect);
static float calcModFromVamp(float Vamp, float twoDivVdc);
static void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static void CurrentFbControl(float *Igd_ref, float *Igd, float Vdc, float *Vgd, float* Vamp);

void VectorControlTasks(float *Idq_ref, float theta, float *Iuvw, float Vdc, float twoDivVdc, float* Duty, int8_t* outputMode){
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	61f8      	str	r0, [r7, #28]
 8001228:	ed87 0a06 	vstr	s0, [r7, #24]
 800122c:	6179      	str	r1, [r7, #20]
 800122e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001232:	ed87 1a03 	vstr	s2, [r7, #12]
 8001236:	60ba      	str	r2, [r7, #8]
 8001238:	607b      	str	r3, [r7, #4]
	outputMode[0] = OUTPUTMODE_POSITIVE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3302      	adds	r3, #2
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]


	uvw2ab(gIuvw, sIab);
 8001250:	4925      	ldr	r1, [pc, #148]	; (80012e8 <VectorControlTasks+0xc8>)
 8001252:	4826      	ldr	r0, [pc, #152]	; (80012ec <VectorControlTasks+0xcc>)
 8001254:	f000 f85e 	bl	8001314 <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 8001258:	4925      	ldr	r1, [pc, #148]	; (80012f0 <VectorControlTasks+0xd0>)
 800125a:	4823      	ldr	r0, [pc, #140]	; (80012e8 <VectorControlTasks+0xc8>)
 800125c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001260:	f000 f8e2 	bl	8001428 <ab2dq>
	CurrentFbControl(Idq_ref, sIdq, Vdc, sVdq, &sVamp);
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <VectorControlTasks+0xd4>)
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <VectorControlTasks+0xd8>)
 8001268:	ed97 0a04 	vldr	s0, [r7, #16]
 800126c:	4920      	ldr	r1, [pc, #128]	; (80012f0 <VectorControlTasks+0xd0>)
 800126e:	69f8      	ldr	r0, [r7, #28]
 8001270:	f000 fa38 	bl	80016e4 <CurrentFbControl>

	//sVamp = calcAmpFromVect(sVdq);

	sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <VectorControlTasks+0xd4>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <VectorControlTasks+0xdc>)
 800127c:	ed93 7a00 	vldr	s14, [r3]
 8001280:	eef0 0a47 	vmov.f32	s1, s14
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	f000 f938 	bl	80014fc <calcModFromVamp>
 800128c:	eef0 7a40 	vmov.f32	s15, s0
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <VectorControlTasks+0xe0>)
 8001292:	edc3 7a00 	vstr	s15, [r3]
	dq2ab(theta, sVdq, sVab);
 8001296:	491b      	ldr	r1, [pc, #108]	; (8001304 <VectorControlTasks+0xe4>)
 8001298:	4817      	ldr	r0, [pc, #92]	; (80012f8 <VectorControlTasks+0xd8>)
 800129a:	ed97 0a06 	vldr	s0, [r7, #24]
 800129e:	f000 f94d 	bl	800153c <dq2ab>
	ab2uvw(sVab, sVuvw);
 80012a2:	4919      	ldr	r1, [pc, #100]	; (8001308 <VectorControlTasks+0xe8>)
 80012a4:	4817      	ldr	r0, [pc, #92]	; (8001304 <VectorControlTasks+0xe4>)
 80012a6:	f000 f87d 	bl	80013a4 <ab2uvw>
	Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <VectorControlTasks+0xe8>)
 80012ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80012b2:	f000 f983 	bl	80015bc <Vuvw2Duty>

	sIdq_1000[0] = sIdq[0] * 1000.0f;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <VectorControlTasks+0xd0>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800130c <VectorControlTasks+0xec>
 80012c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <VectorControlTasks+0xf0>)
 80012c6:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <VectorControlTasks+0xd0>)
 80012cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800130c <VectorControlTasks+0xec>
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <VectorControlTasks+0xf0>)
 80012da:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000f8 	.word	0x200000f8
 80012ec:	200000b0 	.word	0x200000b0
 80012f0:	20000100 	.word	0x20000100
 80012f4:	2000012c 	.word	0x2000012c
 80012f8:	20000110 	.word	0x20000110
 80012fc:	200000a8 	.word	0x200000a8
 8001300:	20000130 	.word	0x20000130
 8001304:	20000118 	.word	0x20000118
 8001308:	20000120 	.word	0x20000120
 800130c:	447a0000 	.word	0x447a0000
 8001310:	20000108 	.word	0x20000108

08001314 <uvw2ab>:
	dq2ab(theta, sVdq, sVab);
	ab2uvw(sVab, sVuvw);
	Vuvw2Duty(twoDivVdc, sVuvw, Duty);
}

static void uvw2ab(float* uvw, float* ab){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3304      	adds	r3, #4
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001330:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3308      	adds	r3, #8
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800139c <uvw2ab+0x88>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80013a0 <uvw2ab+0x8c>
 8001366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3308      	adds	r3, #8
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013a0 <uvw2ab+0x8c>
 8001376:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800137a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3304      	adds	r3, #4
 8001382:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800139c <uvw2ab+0x88>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	edc3 7a00 	vstr	s15, [r3]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	3f5105ec 	.word	0x3f5105ec
 80013a0:	3f5db3d7 	.word	0x3f5db3d7

080013a4 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001420 <ab2uvw+0x7c>
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3304      	adds	r3, #4
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001424 <ab2uvw+0x80>
 80013dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3304      	adds	r3, #4
 80013e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001420 <ab2uvw+0x7c>
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eeb1 7a67 	vneg.f32	s14, s15
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3304      	adds	r3, #4
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3308      	adds	r3, #8
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	edc3 7a00 	vstr	s15, [r3]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	3f5105ec 	.word	0x3f5105ec
 8001424:	3f5db3d7 	.word	0x3f5db3d7

08001428 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001432:	60b8      	str	r0, [r7, #8]
 8001434:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001436:	ed97 0a03 	vldr	s0, [r7, #12]
 800143a:	f007 ff95 	bl	8009368 <sinf>
 800143e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001442:	ed97 0a03 	vldr	s0, [r7, #12]
 8001446:	f007 ff4b 	bl	80092e0 <cosf>
 800144a:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	ed93 7a00 	vldr	s14, [r3]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3304      	adds	r3, #4
 8001460:	edd3 6a00 	vldr	s13, [r3]
 8001464:	edd7 7a05 	vldr	s15, [r7, #20]
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	eeb1 7a67 	vneg.f32	s14, s15
 8001480:	edd7 7a05 	vldr	s15, [r7, #20]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3304      	adds	r3, #4
 800148c:	edd3 6a00 	vldr	s13, [r3]
 8001490:	edd7 7a04 	vldr	s15, [r7, #16]
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3304      	adds	r3, #4
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	edc3 7a00 	vstr	s15, [r3]
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	float amp;
	float amp2;

	amp2 = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	ed93 7a00 	vldr	s14, [r3]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	edd3 6a00 	vldr	s13, [r3]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3304      	adds	r3, #4
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(amp2);
 80014e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80014e4:	f007 ffa8 	bl	8009438 <sqrtf>
 80014e8:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	ee07 3a90 	vmov	s15, r3
}
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	ed87 0a01 	vstr	s0, [r7, #4]
 8001506:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 800150a:	ed97 7a01 	vldr	s14, [r7, #4]
 800150e:	edd7 7a00 	vldr	s15, [r7]
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001538 <calcModFromVamp+0x3c>
 800151a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	ee07 3a90 	vmov	s15, r3
}
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	3f5105ec 	.word	0x3f5105ec

0800153c <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	ed87 0a03 	vstr	s0, [r7, #12]
 8001546:	60b8      	str	r0, [r7, #8]
 8001548:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800154a:	ed97 0a03 	vldr	s0, [r7, #12]
 800154e:	f007 ff0b 	bl	8009368 <sinf>
 8001552:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001556:	ed97 0a03 	vldr	s0, [r7, #12]
 800155a:	f007 fec1 	bl	80092e0 <cosf>
 800155e:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	ed93 7a00 	vldr	s14, [r3]
 8001568:	edd7 7a04 	vldr	s15, [r7, #16]
 800156c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3304      	adds	r3, #4
 8001574:	edd3 6a00 	vldr	s13, [r3]
 8001578:	edd7 7a05 	vldr	s15, [r7, #20]
 800157c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	edd7 7a05 	vldr	s15, [r7, #20]
 8001594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3304      	adds	r3, #4
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	edc3 7a00 	vstr	s15, [r3]
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80015c6:	60b8      	str	r0, [r7, #8]
 80015c8:	6079      	str	r1, [r7, #4]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3304      	adds	r3, #4
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = -Duty[0] - Duty[1];
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3304      	adds	r3, #4
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3308      	adds	r3, #8
 800160c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001610:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800161e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	f7ff f82d 	bl	8000684 <gUpperLowerLimit>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3304      	adds	r3, #4
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	1d1c      	adds	r4, r3, #4
 8001640:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001644:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	f7ff f81a 	bl	8000684 <gUpperLowerLimit>
 8001650:	eef0 7a40 	vmov.f32	s15, s0
 8001654:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3308      	adds	r3, #8
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f103 0408 	add.w	r4, r3, #8
 8001666:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800166a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	f7ff f807 	bl	8000684 <gUpperLowerLimit>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3304      	adds	r3, #4
 80016ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016b6:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3308      	adds	r3, #8
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3308      	adds	r3, #8
 80016ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016d6:	edc3 7a00 	vstr	s15, [r3]

}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
	...

080016e4 <CurrentFbControl>:



static void CurrentFbControl(float* Igd_ref, float* Igd, float Vdc, float* Vgd, float* Vamp){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6178      	str	r0, [r7, #20]
 80016ec:	6139      	str	r1, [r7, #16]
 80016ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80016f2:	60ba      	str	r2, [r7, #8]
 80016f4:	607b      	str	r3, [r7, #4]
	float Kig;
	float Kid;
	float VampLimit;
	float Vphase;

	Kig = 0.001;
 80016f6:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <CurrentFbControl+0x114>)
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	Kid = 0.001;
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <CurrentFbControl+0x114>)
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28

	Ierr[0] = Igd_ref[0] - Igd[0];
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	edc7 7a06 	vstr	s15, [r7, #24]
	Ierr[1] = Igd_ref[1] - Igd[1];
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3304      	adds	r3, #4
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	3304      	adds	r3, #4
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001726:	edc7 7a07 	vstr	s15, [r7, #28]
	Vgd[0] = Vgd[0] + Kig * Ierr[0];
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	edd7 6a06 	vldr	s13, [r7, #24]
 8001734:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	edc3 7a00 	vstr	s15, [r3]
	Vgd[1] = Vgd[1] + Kid * Ierr[1];
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3304      	adds	r3, #4
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001752:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3304      	adds	r3, #4
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	edc3 7a00 	vstr	s15, [r3]

	Vphase = atan2f(Vgd[1], Vgd[0]);
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3304      	adds	r3, #4
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	ed93 7a00 	vldr	s14, [r3]
 8001774:	eef0 0a47 	vmov.f32	s1, s14
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	f007 fe3a 	bl	80093f4 <atan2f>
 8001780:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	*Vamp = calcAmpFromVect(Vgd);
 8001784:	68b8      	ldr	r0, [r7, #8]
 8001786:	f7ff fe91 	bl	80014ac <calcAmpFromVect>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = Vdc * SQRT3DIV2_DIV2;
 8001794:	edd7 7a03 	vldr	s15, [r7, #12]
 8001798:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80017fc <CurrentFbControl+0x118>
 800179c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a0:	edc7 7a08 	vstr	s15, [r7, #32]
	if( *Vamp > VampLimit ){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80017ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d400      	bmi.n	80017ba <CurrentFbControl+0xd6>
		Vgd[0] = VampLimit * cosf(Vphase);
		Vgd[1] = VampLimit * sinf(Vphase);

	}
}
 80017b8:	e01a      	b.n	80017f0 <CurrentFbControl+0x10c>
		Vgd[0] = VampLimit * cosf(Vphase);
 80017ba:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017be:	f007 fd8f 	bl	80092e0 <cosf>
 80017c2:	eeb0 7a40 	vmov.f32	s14, s0
 80017c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	edc3 7a00 	vstr	s15, [r3]
		Vgd[1] = VampLimit * sinf(Vphase);
 80017d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017d8:	f007 fdc6 	bl	8009368 <sinf>
 80017dc:	eeb0 7a40 	vmov.f32	s14, s0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3304      	adds	r3, #4
 80017e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	edc3 7a00 	vstr	s15, [r3]
}
 80017f0:	bf00      	nop
 80017f2:	3730      	adds	r7, #48	; 0x30
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	3a83126f 	.word	0x3a83126f
 80017fc:	3f1cc471 	.word	0x3f1cc471

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001804:	f000 ff0f 	bl	8002626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001808:	f000 f862 	bl	80018d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180c:	f000 fb20 	bl	8001e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001810:	f000 faf4 	bl	8001dfc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001814:	f000 f984 	bl	8001b20 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001818:	f000 f8a6 	bl	8001968 <MX_ADC1_Init>
  MX_TIM1_Init();
 800181c:	f000 f9ca 	bl	8001bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001820:	f000 fa82 	bl	8001d28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001824:	4824      	ldr	r0, [pc, #144]	; (80018b8 <main+0xb8>)
 8001826:	f005 fa99 	bl	8006d5c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800182a:	4824      	ldr	r0, [pc, #144]	; (80018bc <main+0xbc>)
 800182c:	f002 fd82 	bl	8004334 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001836:	4822      	ldr	r0, [pc, #136]	; (80018c0 <main+0xc0>)
 8001838:	f004 fa04 	bl	8005c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001842:	481f      	ldr	r0, [pc, #124]	; (80018c0 <main+0xc0>)
 8001844:	f004 f9fe 	bl	8005c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184e:	481c      	ldr	r0, [pc, #112]	; (80018c0 <main+0xc0>)
 8001850:	f004 f9f8 	bl	8005c44 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001854:	2100      	movs	r1, #0
 8001856:	4818      	ldr	r0, [pc, #96]	; (80018b8 <main+0xb8>)
 8001858:	f005 fb50 	bl	8006efc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800185c:	2100      	movs	r1, #0
 800185e:	4816      	ldr	r0, [pc, #88]	; (80018b8 <main+0xb8>)
 8001860:	f006 fcd8 	bl	8008214 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001864:	2104      	movs	r1, #4
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <main+0xb8>)
 8001868:	f005 fb48 	bl	8006efc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800186c:	2104      	movs	r1, #4
 800186e:	4812      	ldr	r0, [pc, #72]	; (80018b8 <main+0xb8>)
 8001870:	f006 fcd0 	bl	8008214 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001874:	2108      	movs	r1, #8
 8001876:	4810      	ldr	r0, [pc, #64]	; (80018b8 <main+0xb8>)
 8001878:	f005 fb40 	bl	8006efc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800187c:	2108      	movs	r1, #8
 800187e:	480e      	ldr	r0, [pc, #56]	; (80018b8 <main+0xb8>)
 8001880:	f006 fcc8 	bl	8008214 <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 10;//for Carrier Top Interrupt
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <main+0xc4>)
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <main+0xc4>)
 800188a:	3b0a      	subs	r3, #10
 800188c:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <main+0xc8>)
 8001890:	f005 fa64 	bl	8006d5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	480c      	ldr	r0, [pc, #48]	; (80018c8 <main+0xc8>)
 8001898:	f005 fc9a 	bl	80071d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800189c:	2104      	movs	r1, #4
 800189e:	480a      	ldr	r0, [pc, #40]	; (80018c8 <main+0xc8>)
 80018a0:	f005 fc96 	bl	80071d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80018a4:	2108      	movs	r1, #8
 80018a6:	4808      	ldr	r0, [pc, #32]	; (80018c8 <main+0xc8>)
 80018a8:	f005 fc92 	bl	80071d0 <HAL_TIM_IC_Start_IT>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 80018ac:	2202      	movs	r2, #2
 80018ae:	4907      	ldr	r1, [pc, #28]	; (80018cc <main+0xcc>)
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <main+0xbc>)
 80018b2:	f001 fb2f 	bl	8002f14 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <main+0xb6>
 80018b8:	20000290 	.word	0x20000290
 80018bc:	20000134 	.word	0x20000134
 80018c0:	48000800 	.word	0x48000800
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	200002dc 	.word	0x200002dc
 80018cc:	2000008c 	.word	0x2000008c

080018d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b094      	sub	sp, #80	; 0x50
 80018d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 0318 	add.w	r3, r7, #24
 80018da:	2238      	movs	r2, #56	; 0x38
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f007 fcf6 	bl	80092d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f004 f9fc 	bl	8005cf0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001902:	2340      	movs	r3, #64	; 0x40
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001906:	2302      	movs	r3, #2
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190a:	2302      	movs	r3, #2
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800190e:	2304      	movs	r3, #4
 8001910:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001912:	2355      	movs	r3, #85	; 0x55
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001916:	2302      	movs	r3, #2
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800191a:	2302      	movs	r3, #2
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800191e:	2302      	movs	r3, #2
 8001920:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fa96 	bl	8005e58 <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001932:	f000 fb11 	bl	8001f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193a:	2303      	movs	r3, #3
 800193c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2104      	movs	r1, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f004 fd9a 	bl	8006488 <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800195a:	f000 fafd 	bl	8001f58 <Error_Handler>
  }
}
 800195e:	bf00      	nop
 8001960:	3750      	adds	r7, #80	; 0x50
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09a      	sub	sp, #104	; 0x68
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800196e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800197a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800197e:	2220      	movs	r2, #32
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f007 fca4 	bl	80092d0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001988:	463b      	mov	r3, r7
 800198a:	223c      	movs	r2, #60	; 0x3c
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f007 fc9e 	bl	80092d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001994:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800199a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800199c:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 800199e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019a4:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019aa:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019b6:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019be:	2204      	movs	r2, #4
 80019c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019c8:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019f0:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80019f6:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fe:	4842      	ldr	r0, [pc, #264]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001a00:	f001 f8c6 	bl	8002b90 <HAL_ADC_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a0a:	f000 faa5 	bl	8001f58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a16:	4619      	mov	r1, r3
 8001a18:	483b      	ldr	r0, [pc, #236]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001a1a:	f003 faef 	bl	8004ffc <HAL_ADCEx_MultiModeConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001a24:	f000 fa98 	bl	8001f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <MX_ADC1_Init+0x1a4>)
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a30:	2300      	movs	r3, #0
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a34:	237f      	movs	r3, #127	; 0x7f
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a44:	4619      	mov	r1, r3
 8001a46:	4830      	ldr	r0, [pc, #192]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001a48:	f001 fdc0 	bl	80035cc <HAL_ADC_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001a52:	f000 fa81 	bl	8001f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <MX_ADC1_Init+0x1a8>)
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a62:	4619      	mov	r1, r3
 8001a64:	4828      	ldr	r0, [pc, #160]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001a66:	f001 fdb1 	bl	80035cc <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001a70:	f000 fa72 	bl	8001f58 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <MX_ADC1_Init+0x1ac>)
 8001a76:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001a78:	2309      	movs	r3, #9
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001a80:	237f      	movs	r3, #127	; 0x7f
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001a84:	2304      	movs	r3, #4
 8001a86:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4814      	ldr	r0, [pc, #80]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001ab6:	f002 fd75 	bl	80045a4 <HAL_ADCEx_InjectedConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8001ac0:	f000 fa4a 	bl	8001f58 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_ADC1_Init+0x1b0>)
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001ac8:	f240 130f 	movw	r3, #271	; 0x10f
 8001acc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ace:	463b      	mov	r3, r7
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001ad4:	f002 fd66 	bl	80045a4 <HAL_ADCEx_InjectedConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8001ade:	f000 fa3b 	bl	8001f58 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_ADC1_Init+0x1b4>)
 8001ae4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001ae6:	f240 2315 	movw	r3, #533	; 0x215
 8001aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_ADC1_Init+0x1a0>)
 8001af2:	f002 fd57 	bl	80045a4 <HAL_ADCEx_InjectedConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8001afc:	f000 fa2c 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3768      	adds	r7, #104	; 0x68
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000134 	.word	0x20000134
 8001b0c:	08600004 	.word	0x08600004
 8001b10:	32601000 	.word	0x32601000
 8001b14:	04300002 	.word	0x04300002
 8001b18:	1d500080 	.word	0x1d500080
 8001b1c:	19200040 	.word	0x19200040

08001b20 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b26:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <MX_LPUART1_UART_Init+0x90>)
 8001b28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b30:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b62:	4812      	ldr	r0, [pc, #72]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b64:	f006 fd85 	bl	8008672 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f9f3 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b72:	2100      	movs	r1, #0
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b76:	f007 fab7 	bl	80090e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b80:	f000 f9ea 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b84:	2100      	movs	r1, #0
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b88:	f007 faec 	bl	8009164 <HAL_UARTEx_SetRxFifoThreshold>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b92:	f000 f9e1 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_LPUART1_UART_Init+0x8c>)
 8001b98:	f007 fa6d 	bl	8009076 <HAL_UARTEx_DisableFifoMode>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001ba2:	f000 f9d9 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000200 	.word	0x20000200
 8001bb0:	40008000 	.word	0x40008000

08001bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b098      	sub	sp, #96	; 0x60
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	615a      	str	r2, [r3, #20]
 8001bd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2234      	movs	r2, #52	; 0x34
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f007 fb75 	bl	80092d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001be8:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <MX_TIM1_Init+0x170>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001bf2:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001bfa:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c12:	4843      	ldr	r0, [pc, #268]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c14:	f005 f91a 	bl	8006e4c <HAL_TIM_PWM_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c1e:	f000 f99b 	bl	8001f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001c22:	2370      	movs	r3, #112	; 0x70
 8001c24:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c32:	4619      	mov	r1, r3
 8001c34:	483a      	ldr	r0, [pc, #232]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c36:	f006 fbaf 	bl	8008398 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c40:	f000 f98a 	bl	8001f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c44:	2360      	movs	r3, #96	; 0x60
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c50:	2300      	movs	r3, #0
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c64:	2200      	movs	r2, #0
 8001c66:	4619      	mov	r1, r3
 8001c68:	482d      	ldr	r0, [pc, #180]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c6a:	f005 fc9d 	bl	80075a8 <HAL_TIM_PWM_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c74:	f000 f970 	bl	8001f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4827      	ldr	r0, [pc, #156]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c82:	f005 fc91 	bl	80075a8 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001c8c:	f000 f964 	bl	8001f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c94:	2208      	movs	r2, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001c9a:	f005 fc85 	bl	80075a8 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001ca4:	f000 f958 	bl	8001f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001ca8:	2370      	movs	r3, #112	; 0x70
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481a      	ldr	r0, [pc, #104]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001cb6:	f005 fc77 	bl	80075a8 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001cc0:	f000 f94a 	bl	8001f58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001d02:	f006 fbdf 	bl	80084c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001d0c:	f000 f924 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <MX_TIM1_Init+0x16c>)
 8001d12:	f000 fae3 	bl	80022dc <HAL_TIM_MspPostInit>

}
 8001d16:	bf00      	nop
 8001d18:	3760      	adds	r7, #96	; 0x60
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000290 	.word	0x20000290
 8001d24:	40012c00 	.word	0x40012c00

08001d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d6e:	4822      	ldr	r0, [pc, #136]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d70:	f005 f9d6 	bl	8007120 <HAL_TIM_IC_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d7a:	f000 f8ed 	bl	8001f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	481a      	ldr	r0, [pc, #104]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001d8e:	f006 fb03 	bl	8008398 <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001d98:	f000 f8de 	bl	8001f58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001da0:	2301      	movs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	4619      	mov	r1, r3
 8001db2:	4811      	ldr	r0, [pc, #68]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001db4:	f005 fb5c 	bl	8007470 <HAL_TIM_IC_ConfigChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dbe:	f000 f8cb 	bl	8001f58 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480b      	ldr	r0, [pc, #44]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001dca:	f005 fb51 	bl	8007470 <HAL_TIM_IC_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001dd4:	f000 f8c0 	bl	8001f58 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2208      	movs	r2, #8
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_TIM2_Init+0xd0>)
 8001de0:	f005 fb46 	bl	8007470 <HAL_TIM_IC_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001dea:	f000 f8b5 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200002dc 	.word	0x200002dc

08001dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_DMA_Init+0x50>)
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <MX_DMA_Init+0x50>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6493      	str	r3, [r2, #72]	; 0x48
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_DMA_Init+0x50>)
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_DMA_Init+0x50>)
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <MX_DMA_Init+0x50>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6493      	str	r3, [r2, #72]	; 0x48
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_DMA_Init+0x50>)
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	200b      	movs	r0, #11
 8001e38:	f003 fac3 	bl	80053c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e3c:	200b      	movs	r0, #11
 8001e3e:	f003 fada 	bl	80053f6 <HAL_NVIC_EnableIRQ>

}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000

08001e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a39      	ldr	r2, [pc, #228]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a33      	ldr	r2, [pc, #204]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e84:	f043 0320 	orr.w	r3, r3, #32
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <MX_GPIO_Init+0x100>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2120      	movs	r1, #32
 8001eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ece:	f003 feb9 	bl	8005c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001ed8:	481e      	ldr	r0, [pc, #120]	; (8001f54 <MX_GPIO_Init+0x104>)
 8001eda:	f003 feb3 	bl	8005c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ee4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4817      	ldr	r0, [pc, #92]	; (8001f54 <MX_GPIO_Init+0x104>)
 8001ef6:	f003 fd0b 	bl	8005910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001efa:	2320      	movs	r3, #32
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f14:	f003 fcfc 	bl	8005910 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8001f18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4808      	ldr	r0, [pc, #32]	; (8001f54 <MX_GPIO_Init+0x104>)
 8001f32:	f003 fced 	bl	8005910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2028      	movs	r0, #40	; 0x28
 8001f3c:	f003 fa41 	bl	80053c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f40:	2028      	movs	r0, #40	; 0x28
 8001f42:	f003 fa58 	bl	80053f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	; 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000800 	.word	0x48000800

08001f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
}
 8001f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <Error_Handler+0x8>
	...

08001f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6613      	str	r3, [r2, #96]	; 0x60
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f9a:	f003 ff4d 	bl	8005e38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000

08001fac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0a0      	sub	sp, #128	; 0x80
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc4:	f107 0318 	add.w	r3, r7, #24
 8001fc8:	2254      	movs	r2, #84	; 0x54
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f007 f97f 	bl	80092d0 <memset>
  if(hadc->Instance==ADC1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fda:	f040 8098 	bne.w	800210e <HAL_ADC_MspInit+0x162>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001fe4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f004 fc66 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001ffa:	f7ff ffad 	bl	8001f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ffe:	4b46      	ldr	r3, [pc, #280]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	4a45      	ldr	r2, [pc, #276]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	4a39      	ldr	r2, [pc, #228]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a33      	ldr	r2, [pc, #204]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_ADC_MspInit+0x16c>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205e:	2303      	movs	r3, #3
 8002060:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800206e:	4619      	mov	r1, r3
 8002070:	482a      	ldr	r0, [pc, #168]	; (800211c <HAL_ADC_MspInit+0x170>)
 8002072:	f003 fc4d 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002076:	2303      	movs	r3, #3
 8002078:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207a:	2303      	movs	r3, #3
 800207c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f003 fc40 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002090:	2302      	movs	r3, #2
 8002092:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	2303      	movs	r3, #3
 8002096:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020a0:	4619      	mov	r1, r3
 80020a2:	481f      	ldr	r0, [pc, #124]	; (8002120 <HAL_ADC_MspInit+0x174>)
 80020a4:	f003 fc34 	bl	8005910 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_ADC_MspInit+0x17c>)
 80020ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020b0:	2205      	movs	r2, #5
 80020b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020d8:	2220      	movs	r2, #32
 80020da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020e2:	4810      	ldr	r0, [pc, #64]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020e4:	f003 f9a2 	bl	800542c <HAL_DMA_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80020ee:	f7ff ff33 	bl	8001f58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_ADC_MspInit+0x178>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2012      	movs	r0, #18
 8002104:	f003 f95d 	bl	80053c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002108:	2012      	movs	r0, #18
 800210a:	f003 f974 	bl	80053f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3780      	adds	r7, #128	; 0x80
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	48000800 	.word	0x48000800
 8002120:	48000400 	.word	0x48000400
 8002124:	200001a0 	.word	0x200001a0
 8002128:	40020008 	.word	0x40020008

0800212c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b09e      	sub	sp, #120	; 0x78
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	2254      	movs	r2, #84	; 0x54
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f007 f8bf 	bl	80092d0 <memset>
  if(huart->Instance==LPUART1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_UART_MspInit+0xa8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d136      	bne.n	80021ca <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800215c:	2320      	movs	r3, #32
 800215e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4618      	mov	r0, r3
 800216a:	f004 fba9 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002174:	f7ff fef0 	bl	8001f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_UART_MspInit+0xac>)
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <HAL_UART_MspInit+0xac>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_UART_MspInit+0xac>)
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_UART_MspInit+0xac>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <HAL_UART_MspInit+0xac>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_UART_MspInit+0xac>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80021a8:	230c      	movs	r3, #12
 80021aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80021b8:	230c      	movs	r3, #12
 80021ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f003 fba3 	bl	8005910 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3778      	adds	r7, #120	; 0x78
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40008000 	.word	0x40008000
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_TIM_PWM_MspInit+0x38>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10b      	bne.n	8002206 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f8:	6613      	str	r3, [r2, #96]	; 0x60
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <HAL_TIM_PWM_MspInit+0x3c>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40012c00 	.word	0x40012c00
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d146      	bne.n	80022cc <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223e:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_TIM_IC_MspInit+0xb8>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8002286:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002298:	2301      	movs	r3, #1
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	480d      	ldr	r0, [pc, #52]	; (80022d8 <HAL_TIM_IC_MspInit+0xbc>)
 80022a4:	f003 fb34 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 80022a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ba:	2301      	movs	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f003 fb22 	bl	8005910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022cc:	bf00      	nop
 80022ce:	3728      	adds	r7, #40	; 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	48000400 	.word	0x48000400

080022dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a20      	ldr	r2, [pc, #128]	; (800237c <HAL_TIM_MspPostInit+0xa0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d139      	bne.n	8002372 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_TIM_MspPostInit+0xa4>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_TIM_MspPostInit+0xa4>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_TIM_MspPostInit+0xa4>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_TIM_MspPostInit+0xa4>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_TIM_MspPostInit+0xa4>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_TIM_MspPostInit+0xa4>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800232e:	2308      	movs	r3, #8
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800233e:	2302      	movs	r3, #2
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	480e      	ldr	r0, [pc, #56]	; (8002384 <HAL_TIM_MspPostInit+0xa8>)
 800234a:	f003 fae1 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800234e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002360:	2306      	movs	r3, #6
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f003 facf 	bl	8005910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40021000 	.word	0x40021000
 8002384:	48000800 	.word	0x48000800

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800238c:	e7fe      	b.n	800238c <NMI_Handler+0x4>

0800238e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <MemManage_Handler+0x4>

0800239a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d4:	f000 f97a 	bl	80026cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA1_Channel1_IRQHandler+0x10>)
 80023e2:	f003 f946 	bl	8005672 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200001a0 	.word	0x200001a0

080023f0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <ADC1_2_IRQHandler+0x174>)
 80023f8:	61bb      	str	r3, [r7, #24]
	float theta_tmp;
	float Idq_ref[2];
	uint8_t leadAngleModeFlg;
  int8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023fa:	485b      	ldr	r0, [pc, #364]	; (8002568 <ADC1_2_IRQHandler+0x178>)
 80023fc:	f000 fe5e 	bl	80030bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002400:	2120      	movs	r1, #32
 8002402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002406:	f003 fc35 	bl	8005c74 <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 800240a:	f7fe f965 	bl	80006d8 <readButton1>
 800240e:	4603      	mov	r3, r0
 8002410:	461a      	mov	r2, r3
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <ADC1_2_IRQHandler+0x17c>)
 8002414:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 8002416:	f7fe f9c7 	bl	80007a8 <readVolume>
 800241a:	eef0 7a40 	vmov.f32	s15, s0
 800241e:	4b54      	ldr	r3, [pc, #336]	; (8002570 <ADC1_2_IRQHandler+0x180>)
 8002420:	edc3 7a00 	vstr	s15, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 8002424:	4953      	ldr	r1, [pc, #332]	; (8002574 <ADC1_2_IRQHandler+0x184>)
 8002426:	4854      	ldr	r0, [pc, #336]	; (8002578 <ADC1_2_IRQHandler+0x188>)
 8002428:	f7fe f9fe 	bl	8000828 <readCurrent>
	gVdc = readVdc();
 800242c:	f7fe f9dc 	bl	80007e8 <readVdc>
 8002430:	eef0 7a40 	vmov.f32	s15, s0
 8002434:	4b51      	ldr	r3, [pc, #324]	; (800257c <ADC1_2_IRQHandler+0x18c>)
 8002436:	edc3 7a00 	vstr	s15, [r3]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 800243a:	4b50      	ldr	r3, [pc, #320]	; (800257c <ADC1_2_IRQHandler+0x18c>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002444:	eef0 0a67 	vmov.f32	s1, s15
 8002448:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800244c:	f7fe f895 	bl	800057a <gfDivideAvoidZero>
 8002450:	eef0 7a40 	vmov.f32	s15, s0
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <ADC1_2_IRQHandler+0x190>)
 8002456:	edc3 7a00 	vstr	s15, [r3]

	//DutyRef Calculation
	//if ( gButton1 == 1 )
	  rotDir = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
	//else
	//  rotDir = -1;


	  Idq_ref[0] = 0;
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
	  Idq_ref[1] = gVolume;
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <ADC1_2_IRQHandler+0x180>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
	ErectFreqErr = ErectFreqRef - gElectFreq;
	gDutyRef += ErectFreqErr * 0.0000001f;
	*/


	gDutyRef = (float)rotDir * gVolume;
 800246a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <ADC1_2_IRQHandler+0x180>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	4b40      	ldr	r3, [pc, #256]	; (8002584 <ADC1_2_IRQHandler+0x194>)
 8002482:	edc3 7a00 	vstr	s15, [r3]
	if (gDutyRef > 1.0f) gDutyRef = 1.0f;
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <ADC1_2_IRQHandler+0x194>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	dd03      	ble.n	80024a2 <ADC1_2_IRQHandler+0xb2>
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <ADC1_2_IRQHandler+0x194>)
 800249c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024a0:	601a      	str	r2, [r3, #0]
	if (gDutyRef < -1.0f) gDutyRef = -1.0f;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <ADC1_2_IRQHandler+0x194>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80024ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d502      	bpl.n	80024bc <ADC1_2_IRQHandler+0xcc>
 80024b6:	4b33      	ldr	r3, [pc, #204]	; (8002584 <ADC1_2_IRQHandler+0x194>)
 80024b8:	4a33      	ldr	r2, [pc, #204]	; (8002588 <ADC1_2_IRQHandler+0x198>)
 80024ba:	601a      	str	r2, [r3, #0]

	//gDutyRef = 0.5f;

	//Input DutyRef, Lead Angle Output Duty
	//sixStepTasks(gDutyRef, 0.0f, &gTheta, gDuty, outputMode);
	if (gElectFreq > 50)
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <ADC1_2_IRQHandler+0x19c>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002590 <ADC1_2_IRQHandler+0x1a0>
 80024c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	dd02      	ble.n	80024d6 <ADC1_2_IRQHandler+0xe6>
		leadAngleModeFlg = 1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	77fb      	strb	r3, [r7, #31]
 80024d4:	e001      	b.n	80024da <ADC1_2_IRQHandler+0xea>
	else
		leadAngleModeFlg = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	77fb      	strb	r3, [r7, #31]

	sixStepTasks(gDutyRef, leadAngleModeFlg, 0.0f, &theta_tmp, gDuty, outputMode);
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <ADC1_2_IRQHandler+0x194>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	f107 0110 	add.w	r1, r7, #16
 80024e6:	7ff8      	ldrb	r0, [r7, #31]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <ADC1_2_IRQHandler+0x1a4>)
 80024ea:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8002598 <ADC1_2_IRQHandler+0x1a8>
 80024ee:	eeb0 0a67 	vmov.f32	s0, s15
 80024f2:	f7fe faa5 	bl	8000a40 <sixStepTasks>
	gTheta = theta_tmp;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4a28      	ldr	r2, [pc, #160]	; (800259c <ADC1_2_IRQHandler+0x1ac>)
 80024fa:	6013      	str	r3, [r2, #0]
	//write IO signals

	if (leadAngleModeFlg == 0){
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <ADC1_2_IRQHandler+0x120>
	writeOutputMode(outputMode);
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fa17 	bl	8000938 <writeOutputMode>
	writeDuty(gDuty);
 800250a:	4822      	ldr	r0, [pc, #136]	; (8002594 <ADC1_2_IRQHandler+0x1a4>)
 800250c:	f7fe fa56 	bl	80009bc <writeDuty>


	//if ( gButton1 == 0 )
	//	OpenLoopTasks(gDutyRef * 8.0f, gTheta, gIuvw, gTwoDivVdc, gDuty, outputMode);
	//else
		VectorControlTasks(Idq_ref, gTheta, gIuvw, gVdc, gTwoDivVdc, gDuty, outputMode);
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <ADC1_2_IRQHandler+0x1ac>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <ADC1_2_IRQHandler+0x18c>)
 8002518:	ed93 7a00 	vldr	s14, [r3]
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <ADC1_2_IRQHandler+0x190>)
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	f107 0008 	add.w	r0, r7, #8
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <ADC1_2_IRQHandler+0x1a4>)
 800252a:	eeb0 1a66 	vmov.f32	s2, s13
 800252e:	eef0 0a47 	vmov.f32	s1, s14
 8002532:	4910      	ldr	r1, [pc, #64]	; (8002574 <ADC1_2_IRQHandler+0x184>)
 8002534:	eeb0 0a67 	vmov.f32	s0, s15
 8002538:	f7fe fe72 	bl	8001220 <VectorControlTasks>

	if (leadAngleModeFlg == 1){
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d106      	bne.n	8002550 <ADC1_2_IRQHandler+0x160>
	writeOutputMode(outputMode);
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe f9f7 	bl	8000938 <writeOutputMode>
	writeDuty(gDuty);
 800254a:	4812      	ldr	r0, [pc, #72]	; (8002594 <ADC1_2_IRQHandler+0x1a4>)
 800254c:	f7fe fa36 	bl	80009bc <writeDuty>
	}
//
//VectorControlTasks(Idq_ref, gTheta, gIuvw, gVdc, gDuty);

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002550:	2120      	movs	r1, #32
 8002552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002556:	f003 fb8d 	bl	8005c74 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	42c80000 	.word	0x42c80000
 8002568:	20000134 	.word	0x20000134
 800256c:	20000093 	.word	0x20000093
 8002570:	200000ac 	.word	0x200000ac
 8002574:	200000b0 	.word	0x200000b0
 8002578:	200000bc 	.word	0x200000bc
 800257c:	200000a4 	.word	0x200000a4
 8002580:	200000a8 	.word	0x200000a8
 8002584:	200000c4 	.word	0x200000c4
 8002588:	bf800000 	.word	0xbf800000
 800258c:	2000009c 	.word	0x2000009c
 8002590:	42480000 	.word	0x42480000
 8002594:	200000c8 	.word	0x200000c8
 8002598:	00000000 	.word	0x00000000
 800259c:	200000a0 	.word	0x200000a0

080025a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025a8:	f003 fb7e 	bl	8005ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <SystemInit+0x20>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <SystemInit+0x20>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025d4:	480d      	ldr	r0, [pc, #52]	; (800260c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d8:	480d      	ldr	r0, [pc, #52]	; (8002610 <LoopForever+0x6>)
  ldr r1, =_edata
 80025da:	490e      	ldr	r1, [pc, #56]	; (8002614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025dc:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <LoopForever+0xe>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <LoopForever+0x12>)
  ldr r4, =_ebss
 80025f0:	4c0b      	ldr	r4, [pc, #44]	; (8002620 <LoopForever+0x16>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025fe:	f7ff ffd7 	bl	80025b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002602:	f006 fe41 	bl	8009288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002606:	f7ff f8fb 	bl	8001800 <main>

0800260a <LoopForever>:

LoopForever:
    b LoopForever
 800260a:	e7fe      	b.n	800260a <LoopForever>
  ldr   r0, =_estack
 800260c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002614:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002618:	0800a70c 	.word	0x0800a70c
  ldr r2, =_sbss
 800261c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002620:	2000032c 	.word	0x2000032c

08002624 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC3_IRQHandler>

08002626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f002 febb 	bl	80053ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002636:	2000      	movs	r0, #0
 8002638:	f000 f80e 	bl	8002658 <HAL_InitTick>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	e001      	b.n	800264c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002648:	f7ff fc8c 	bl	8001f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800264c:	79fb      	ldrb	r3, [r7, #7]

}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_InitTick+0x68>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d022      	beq.n	80026b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_InitTick+0x6c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_InitTick+0x68>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002678:	fbb1 f3f3 	udiv	r3, r1, r3
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fec6 	bl	8005412 <HAL_SYSTICK_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	d809      	bhi.n	80026a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002692:	2200      	movs	r2, #0
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	f04f 30ff 	mov.w	r0, #4294967295
 800269a:	f002 fe92 	bl	80053c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_InitTick+0x70>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e004      	b.n	80026b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e001      	b.n	80026b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000004 	.word	0x20000004

080026cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_IncTick+0x1c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_IncTick+0x20>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_IncTick+0x1c>)
 80026dc:	6013      	str	r3, [r2, #0]
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	20000328 	.word	0x20000328
 80026ec:	20000008 	.word	0x20000008

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000328 	.word	0x20000328

08002708 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	609a      	str	r2, [r3, #8]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3360      	adds	r3, #96	; 0x60
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <LL_ADC_SetOffset+0x44>)
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	4313      	orrs	r3, r2
 80027a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	03fff000 	.word	0x03fff000

080027b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3360      	adds	r3, #96	; 0x60
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3360      	adds	r3, #96	; 0x60
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800281a:	b480      	push	{r7}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3360      	adds	r3, #96	; 0x60
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	431a      	orrs	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3360      	adds	r3, #96	; 0x60
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	615a      	str	r2, [r3, #20]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3330      	adds	r3, #48	; 0x30
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	211f      	movs	r1, #31
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	401a      	ands	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	f003 011f 	and.w	r1, r3, #31
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3314      	adds	r3, #20
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	0e5b      	lsrs	r3, r3, #25
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	0d1b      	lsrs	r3, r3, #20
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2107      	movs	r1, #7
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	401a      	ands	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	0d1b      	lsrs	r3, r3, #20
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	431a      	orrs	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d10a      	bne.n	80029d2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80029d0:	e00a      	b.n	80029e8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	43db      	mvns	r3, r3
 80029e0:	401a      	ands	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	407f0000 	.word	0x407f0000

080029f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 031f 	and.w	r3, r3, #31
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6093      	str	r3, [r2, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a68:	d101      	bne.n	8002a6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab8:	d101      	bne.n	8002abe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <LL_ADC_IsEnabled+0x18>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <LL_ADC_IsEnabled+0x1a>
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d101      	bne.n	8002b5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d101      	bne.n	8002b80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1af      	b.n	8002f0a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff f9f7 	bl	8001fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff3f 	bl	8002a54 <LL_ADC_IsDeepPowerDownEnabled>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff25 	bl	8002a30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff5a 	bl	8002aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d115      	bne.n	8002c22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff3e 	bl	8002a7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c00:	4b9f      	ldr	r3, [pc, #636]	; (8002e80 <HAL_ADC_Init+0x2f0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	4a9f      	ldr	r2, [pc, #636]	; (8002e84 <HAL_ADC_Init+0x2f4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c14:	e002      	b.n	8002c1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f9      	bne.n	8002c16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff3c 	bl	8002aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10d      	bne.n	8002c4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff75 	bl	8002b42 <LL_ADC_REG_IsConversionOngoing>
 8002c58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 8148 	bne.w	8002ef8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8144 	bne.w	8002ef8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c78:	f043 0202 	orr.w	r2, r3, #2
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff35 	bl	8002af4 <LL_ADC_IsEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d141      	bne.n	8002d14 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADC_Init+0x114>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7a      	ldr	r2, [pc, #488]	; (8002e88 <HAL_ADC_Init+0x2f8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10f      	bne.n	8002cc4 <HAL_ADC_Init+0x134>
 8002ca4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ca8:	f7ff ff24 	bl	8002af4 <LL_ADC_IsEnabled>
 8002cac:	4604      	mov	r4, r0
 8002cae:	4876      	ldr	r0, [pc, #472]	; (8002e88 <HAL_ADC_Init+0x2f8>)
 8002cb0:	f7ff ff20 	bl	8002af4 <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e012      	b.n	8002cea <HAL_ADC_Init+0x15a>
 8002cc4:	4871      	ldr	r0, [pc, #452]	; (8002e8c <HAL_ADC_Init+0x2fc>)
 8002cc6:	f7ff ff15 	bl	8002af4 <LL_ADC_IsEnabled>
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4870      	ldr	r0, [pc, #448]	; (8002e90 <HAL_ADC_Init+0x300>)
 8002cce:	f7ff ff11 	bl	8002af4 <LL_ADC_IsEnabled>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	431c      	orrs	r4, r3
 8002cd6:	486f      	ldr	r0, [pc, #444]	; (8002e94 <HAL_ADC_Init+0x304>)
 8002cd8:	f7ff ff0c 	bl	8002af4 <LL_ADC_IsEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4323      	orrs	r3, r4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_Init+0x172>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a62      	ldr	r2, [pc, #392]	; (8002e88 <HAL_ADC_Init+0x2f8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_Init+0x176>
 8002d02:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_ADC_Init+0x308>)
 8002d04:	e000      	b.n	8002d08 <HAL_ADC_Init+0x178>
 8002d06:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_ADC_Init+0x30c>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7ff fcfa 	bl	8002708 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7f5b      	ldrb	r3, [r3, #29]
 8002d18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d106      	bne.n	8002d50 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	045b      	lsls	r3, r3, #17
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_ADC_Init+0x310>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fed1 	bl	8002b42 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fede 	bl	8002b68 <LL_ADC_INJ_IsConversionOngoing>
 8002dac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d17f      	bne.n	8002eb4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d17c      	bne.n	8002eb4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dbe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dc6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd6:	f023 0302 	bic.w	r3, r3, #2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6911      	ldr	r1, [r2, #16]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e1a:	e013      	b.n	8002e44 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d12a      	bne.n	8002ea4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e70:	430a      	orrs	r2, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e019      	b.n	8002eb4 <HAL_ADC_Init+0x324>
 8002e80:	20000000 	.word	0x20000000
 8002e84:	053e2d63 	.word	0x053e2d63
 8002e88:	50000100 	.word	0x50000100
 8002e8c:	50000400 	.word	0x50000400
 8002e90:	50000500 	.word	0x50000500
 8002e94:	50000600 	.word	0x50000600
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	50000700 	.word	0x50000700
 8002ea0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10c      	bne.n	8002ed6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f023 010f 	bic.w	r1, r3, #15
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	1e5a      	subs	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	e007      	b.n	8002ee6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 020f 	bic.w	r2, r2, #15
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef6:	e007      	b.n	8002f08 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop

08002f14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f28:	d004      	beq.n	8002f34 <HAL_ADC_Start_DMA+0x20>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a5a      	ldr	r2, [pc, #360]	; (8003098 <HAL_ADC_Start_DMA+0x184>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_Start_DMA+0x24>
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_ADC_Start_DMA+0x188>)
 8002f36:	e000      	b.n	8002f3a <HAL_ADC_Start_DMA+0x26>
 8002f38:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_ADC_Start_DMA+0x18c>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fd5c 	bl	80029f8 <LL_ADC_GetMultimode>
 8002f40:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fdfb 	bl	8002b42 <LL_ADC_REG_IsConversionOngoing>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 809b 	bne.w	800308a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_Start_DMA+0x4e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e096      	b.n	8003090 <HAL_ADC_Start_DMA+0x17c>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_ADC_Start_DMA+0x190>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d008      	beq.n	8002f86 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d002      	beq.n	8002f86 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	d17a      	bne.n	800307c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 ff60 	bl	8003e4c <ADC_Enable>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d16d      	bne.n	8003072 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_ADC_Start_DMA+0x184>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_ADC_Start_DMA+0xb4>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <HAL_ADC_Start_DMA+0x194>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d002      	beq.n	8002fc4 <HAL_ADC_Start_DMA+0xb0>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e003      	b.n	8002fcc <HAL_ADC_Start_DMA+0xb8>
 8002fc4:	4b39      	ldr	r3, [pc, #228]	; (80030ac <HAL_ADC_Start_DMA+0x198>)
 8002fc6:	e001      	b.n	8002fcc <HAL_ADC_Start_DMA+0xb8>
 8002fc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d002      	beq.n	8002fda <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d006      	beq.n	8003000 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	f023 0206 	bic.w	r2, r3, #6
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	661a      	str	r2, [r3, #96]	; 0x60
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <HAL_ADC_Start_DMA+0x19c>)
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	4a28      	ldr	r2, [pc, #160]	; (80030b4 <HAL_ADC_Start_DMA+0x1a0>)
 8003014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <HAL_ADC_Start_DMA+0x1a4>)
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	221c      	movs	r2, #28
 8003024:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0210 	orr.w	r2, r2, #16
 800303c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3340      	adds	r3, #64	; 0x40
 8003058:	4619      	mov	r1, r3
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f002 fa8d 	bl	800557c <HAL_DMA_Start_IT>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fd55 	bl	8002b1a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003070:	e00d      	b.n	800308e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800307a:	e008      	b.n	800308e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003088:	e001      	b.n	800308e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800308a:	2302      	movs	r3, #2
 800308c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	50000100 	.word	0x50000100
 800309c:	50000300 	.word	0x50000300
 80030a0:	50000700 	.word	0x50000700
 80030a4:	50000600 	.word	0x50000600
 80030a8:	50000500 	.word	0x50000500
 80030ac:	50000400 	.word	0x50000400
 80030b0:	08003f11 	.word	0x08003f11
 80030b4:	08003fe9 	.word	0x08003fe9
 80030b8:	08004005 	.word	0x08004005

080030bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e0:	d004      	beq.n	80030ec <HAL_ADC_IRQHandler+0x30>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a8e      	ldr	r2, [pc, #568]	; (8003320 <HAL_ADC_IRQHandler+0x264>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_IRQHandler+0x34>
 80030ec:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <HAL_ADC_IRQHandler+0x268>)
 80030ee:	e000      	b.n	80030f2 <HAL_ADC_IRQHandler+0x36>
 80030f0:	4b8d      	ldr	r3, [pc, #564]	; (8003328 <HAL_ADC_IRQHandler+0x26c>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fc80 	bl	80029f8 <LL_ADC_GetMultimode>
 80030f8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_ADC_IRQHandler+0x78>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d012      	beq.n	8003134 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f001 fa32 	bl	8004590 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2202      	movs	r2, #2
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_ADC_IRQHandler+0x8c>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8094 	beq.w	800327c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 808e 	beq.w	800327c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fb95 	bl	80028ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d072      	beq.n	800326e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a64      	ldr	r2, [pc, #400]	; (8003320 <HAL_ADC_IRQHandler+0x264>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_ADC_IRQHandler+0xea>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_ADC_IRQHandler+0x270>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d002      	beq.n	80031a2 <HAL_ADC_IRQHandler+0xe6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	e003      	b.n	80031aa <HAL_ADC_IRQHandler+0xee>
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_ADC_IRQHandler+0x274>)
 80031a4:	e001      	b.n	80031aa <HAL_ADC_IRQHandler+0xee>
 80031a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d008      	beq.n	80031c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d002      	beq.n	80031c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	d104      	bne.n	80031ce <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	e014      	b.n	80031f8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a53      	ldr	r2, [pc, #332]	; (8003320 <HAL_ADC_IRQHandler+0x264>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_ADC_IRQHandler+0x130>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a53      	ldr	r2, [pc, #332]	; (800332c <HAL_ADC_IRQHandler+0x270>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d002      	beq.n	80031e8 <HAL_ADC_IRQHandler+0x12c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	e003      	b.n	80031f0 <HAL_ADC_IRQHandler+0x134>
 80031e8:	4b51      	ldr	r3, [pc, #324]	; (8003330 <HAL_ADC_IRQHandler+0x274>)
 80031ea:	e001      	b.n	80031f0 <HAL_ADC_IRQHandler+0x134>
 80031ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d135      	bne.n	800326e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d12e      	bne.n	800326e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fc94 	bl	8002b42 <LL_ADC_REG_IsConversionOngoing>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11a      	bne.n	8003256 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020c 	bic.w	r2, r2, #12
 800322e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d112      	bne.n	800326e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
 8003254:	e00b      	b.n	800326e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	f043 0210 	orr.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f984 	bl	800357c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	220c      	movs	r2, #12
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d004      	beq.n	8003290 <HAL_ADC_IRQHandler+0x1d4>
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80b3 	beq.w	8003402 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80ad 	beq.w	8003402 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fb30 	bl	800292a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff faeb 	bl	80028ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80032d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_ADC_IRQHandler+0x264>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_ADC_IRQHandler+0x23a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_ADC_IRQHandler+0x270>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d002      	beq.n	80032f2 <HAL_ADC_IRQHandler+0x236>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	e003      	b.n	80032fa <HAL_ADC_IRQHandler+0x23e>
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_ADC_IRQHandler+0x274>)
 80032f4:	e001      	b.n	80032fa <HAL_ADC_IRQHandler+0x23e>
 80032f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4293      	cmp	r3, r2
 8003300:	d008      	beq.n	8003314 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d002      	beq.n	8003314 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b07      	cmp	r3, #7
 8003312:	d10f      	bne.n	8003334 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	e01f      	b.n	800335e <HAL_ADC_IRQHandler+0x2a2>
 800331e:	bf00      	nop
 8003320:	50000100 	.word	0x50000100
 8003324:	50000300 	.word	0x50000300
 8003328:	50000700 	.word	0x50000700
 800332c:	50000500 	.word	0x50000500
 8003330:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a8b      	ldr	r2, [pc, #556]	; (8003568 <HAL_ADC_IRQHandler+0x4ac>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d009      	beq.n	8003352 <HAL_ADC_IRQHandler+0x296>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a8a      	ldr	r2, [pc, #552]	; (800356c <HAL_ADC_IRQHandler+0x4b0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d002      	beq.n	800334e <HAL_ADC_IRQHandler+0x292>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	e003      	b.n	8003356 <HAL_ADC_IRQHandler+0x29a>
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_ADC_IRQHandler+0x4b4>)
 8003350:	e001      	b.n	8003356 <HAL_ADC_IRQHandler+0x29a>
 8003352:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003356:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d047      	beq.n	80033f4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_ADC_IRQHandler+0x2c2>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d03f      	beq.n	80033f4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800337a:	2b00      	cmp	r3, #0
 800337c:	d13a      	bne.n	80033f4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d133      	bne.n	80033f4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d12e      	bne.n	80033f4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fbe4 	bl	8002b68 <LL_ADC_INJ_IsConversionOngoing>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11a      	bne.n	80033dc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d112      	bne.n	80033f4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033da:	e00b      	b.n	80033f4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f001 f8a3 	bl	8004540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2260      	movs	r2, #96	; 0x60
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d011      	beq.n	8003430 <HAL_ADC_IRQHandler+0x374>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8be 	bl	80035a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <HAL_ADC_IRQHandler+0x3a4>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f001 f889 	bl	8004568 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_ADC_IRQHandler+0x3d4>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f001 f87b 	bl	800457c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d043      	beq.n	8003522 <HAL_ADC_IRQHandler+0x466>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d03e      	beq.n	8003522 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80034ac:	2301      	movs	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
 80034b0:	e021      	b.n	80034f6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_IRQHandler+0x410>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <HAL_ADC_IRQHandler+0x4ac>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_IRQHandler+0x414>
 80034cc:	4b29      	ldr	r3, [pc, #164]	; (8003574 <HAL_ADC_IRQHandler+0x4b8>)
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_IRQHandler+0x416>
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_ADC_IRQHandler+0x4bc>)
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fa9e 	bl	8002a14 <LL_ADC_GetMultiDMATransfer>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034de:	2301      	movs	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	e008      	b.n	80034f6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034f2:	2301      	movs	r3, #1
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10e      	bne.n	800351a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	f043 0202 	orr.w	r2, r3, #2
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f84f 	bl	80035b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d018      	beq.n	800355e <HAL_ADC_IRQHandler+0x4a2>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003546:	f043 0208 	orr.w	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003556:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fffb 	bl	8004554 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	50000100 	.word	0x50000100
 800356c:	50000500 	.word	0x50000500
 8003570:	50000400 	.word	0x50000400
 8003574:	50000300 	.word	0x50000300
 8003578:	50000700 	.word	0x50000700

0800357c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b0b6      	sub	sp, #216	; 0xd8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x24>
 80035ea:	2302      	movs	r3, #2
 80035ec:	f000 bc13 	b.w	8003e16 <HAL_ADC_ConfigChannel+0x84a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff faa0 	bl	8002b42 <LL_ADC_REG_IsConversionOngoing>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	f040 83f3 	bne.w	8003df0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f7ff f95b 	bl	80028d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fa8e 	bl	8002b42 <LL_ADC_REG_IsConversionOngoing>
 8003626:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fa9a 	bl	8002b68 <LL_ADC_INJ_IsConversionOngoing>
 8003634:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003638:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 81d9 	bne.w	80039f4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003642:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 81d4 	bne.w	80039f4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003654:	d10f      	bne.n	8003676 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	4619      	mov	r1, r3
 8003662:	f7ff f975 	bl	8002950 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff f909 	bl	8002886 <LL_ADC_SetSamplingTimeCommonConfig>
 8003674:	e00e      	b.n	8003694 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	461a      	mov	r2, r3
 8003684:	f7ff f964 	bl	8002950 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f8f9 	bl	8002886 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	08db      	lsrs	r3, r3, #3
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d022      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6919      	ldr	r1, [r3, #16]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036c6:	f7ff f853 	bl	8002770 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6919      	ldr	r1, [r3, #16]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	461a      	mov	r2, r3
 80036d8:	f7ff f89f 	bl	800281a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6919      	ldr	r1, [r3, #16]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	7f1b      	ldrb	r3, [r3, #28]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x126>
 80036ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x128>
 80036f2:	2300      	movs	r3, #0
 80036f4:	461a      	mov	r2, r3
 80036f6:	f7ff f8ab 	bl	8002850 <LL_ADC_SetOffsetSaturation>
 80036fa:	e17b      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f858 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x15c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f84d 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	e01e      	b.n	8003766 <HAL_ADC_ConfigChannel+0x19a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f842 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800374a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800374e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003756:	2320      	movs	r3, #32
 8003758:	e004      	b.n	8003764 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800375a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_ADC_ConfigChannel+0x1b2>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	e018      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x1e4>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800379a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e004      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80037a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f811 	bl	80027e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2101      	movs	r1, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fff5 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x222>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe ffea 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 80037e4:	4603      	mov	r3, r0
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	e01e      	b.n	800382c <HAL_ADC_ConfigChannel+0x260>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2101      	movs	r1, #1
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe ffdf 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800380c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e004      	b.n	800382a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x278>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e9b      	lsrs	r3, r3, #26
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	e018      	b.n	8003876 <HAL_ADC_ConfigChannel+0x2aa>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003858:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800385c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e004      	b.n	8003876 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800386c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003876:	429a      	cmp	r2, r3
 8003878:	d106      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2200      	movs	r2, #0
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe ffae 	bl	80027e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe ff92 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x2e8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2102      	movs	r1, #2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe ff87 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	f003 021f 	and.w	r2, r3, #31
 80038b2:	e01e      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x326>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2102      	movs	r1, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ff7c 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e004      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_ADC_ConfigChannel+0x33e>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	e016      	b.n	8003938 <HAL_ADC_ConfigChannel+0x36c>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800391c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800391e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e004      	b.n	8003938 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800392e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003938:	429a      	cmp	r2, r3
 800393a:	d106      	bne.n	800394a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2200      	movs	r2, #0
 8003942:	2102      	movs	r1, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe ff4d 	bl	80027e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2103      	movs	r1, #3
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe ff31 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x3aa>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2103      	movs	r1, #3
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe ff26 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	e017      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x3da>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2103      	movs	r1, #3
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe ff1b 	bl	80027b8 <LL_ADC_GetOffsetChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800398e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003990:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003998:	2320      	movs	r3, #32
 800399a:	e003      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800399c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <HAL_ADC_ConfigChannel+0x3f2>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	0e9b      	lsrs	r3, r3, #26
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	e011      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x416>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e003      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d106      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2103      	movs	r1, #3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fef8 	bl	80027e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff f87b 	bl	8002af4 <LL_ADC_IsEnabled>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f040 813d 	bne.w	8003c80 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f7fe ffc8 	bl	80029a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4aa2      	ldr	r2, [pc, #648]	; (8003ca8 <HAL_ADC_ConfigChannel+0x6dc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	f040 812e 	bne.w	8003c80 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x480>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	0e9b      	lsrs	r3, r3, #26
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	bf94      	ite	ls
 8003a44:	2301      	movls	r3, #1
 8003a46:	2300      	movhi	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e019      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x4b4>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2b09      	cmp	r3, #9
 8003a78:	bf94      	ite	ls
 8003a7a:	2301      	movls	r3, #1
 8003a7c:	2300      	movhi	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d079      	beq.n	8003b78 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x4d4>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e9b      	lsrs	r3, r3, #26
 8003a96:	3301      	adds	r3, #1
 8003a98:	069b      	lsls	r3, r3, #26
 8003a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a9e:	e015      	b.n	8003acc <HAL_ADC_ConfigChannel+0x500>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	e003      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	069b      	lsls	r3, r3, #26
 8003ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x520>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	e017      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x550>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003b04:	2320      	movs	r3, #32
 8003b06:	e003      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	ea42 0103 	orr.w	r1, r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x576>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	3301      	adds	r3, #1
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	051b      	lsls	r3, r3, #20
 8003b40:	e018      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x5a8>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	e003      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b74:	430b      	orrs	r3, r1
 8003b76:	e07e      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x5c8>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0e9b      	lsrs	r3, r3, #26
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	069b      	lsls	r3, r3, #26
 8003b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b92:	e015      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x5f4>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003bac:	2320      	movs	r3, #32
 8003bae:	e003      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	069b      	lsls	r3, r3, #26
 8003bbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x614>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0e9b      	lsrs	r3, r3, #26
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	e017      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x644>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	61fb      	str	r3, [r7, #28]
  return result;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e003      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	ea42 0103 	orr.w	r1, r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x670>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	3301      	adds	r3, #1
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	3b1e      	subs	r3, #30
 8003c34:	051b      	lsls	r3, r3, #20
 8003c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	e01b      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x6a8>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	613b      	str	r3, [r7, #16]
  return result;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c54:	2320      	movs	r3, #32
 8003c56:	e003      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	f003 021f 	and.w	r2, r3, #31
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3b1e      	subs	r3, #30
 8003c6e:	051b      	lsls	r3, r3, #20
 8003c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c74:	430b      	orrs	r3, r1
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fe fe68 	bl	8002950 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_ADC_ConfigChannel+0x6e0>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80be 	beq.w	8003e0a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c96:	d004      	beq.n	8003ca2 <HAL_ADC_ConfigChannel+0x6d6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x6ec>
 8003ca2:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ca4:	e009      	b.n	8003cba <HAL_ADC_ConfigChannel+0x6ee>
 8003ca6:	bf00      	nop
 8003ca8:	407f0000 	.word	0x407f0000
 8003cac:	80080000 	.word	0x80080000
 8003cb0:	50000100 	.word	0x50000100
 8003cb4:	50000300 	.word	0x50000300
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_ADC_ConfigChannel+0x854>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fd4a 	bl	8002754 <LL_ADC_GetCommonPathInternalCh>
 8003cc0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a56      	ldr	r2, [pc, #344]	; (8003e24 <HAL_ADC_ConfigChannel+0x858>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x70c>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a55      	ldr	r2, [pc, #340]	; (8003e28 <HAL_ADC_ConfigChannel+0x85c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d13a      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d134      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cec:	d005      	beq.n	8003cfa <HAL_ADC_ConfigChannel+0x72e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4e      	ldr	r2, [pc, #312]	; (8003e2c <HAL_ADC_ConfigChannel+0x860>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	f040 8085 	bne.w	8003e04 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d02:	d004      	beq.n	8003d0e <HAL_ADC_ConfigChannel+0x742>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a49      	ldr	r2, [pc, #292]	; (8003e30 <HAL_ADC_ConfigChannel+0x864>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x746>
 8003d0e:	4a49      	ldr	r2, [pc, #292]	; (8003e34 <HAL_ADC_ConfigChannel+0x868>)
 8003d10:	e000      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x748>
 8003d12:	4a43      	ldr	r2, [pc, #268]	; (8003e20 <HAL_ADC_ConfigChannel+0x854>)
 8003d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f7fe fd05 	bl	800272e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d24:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <HAL_ADC_ConfigChannel+0x86c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	4a44      	ldr	r2, [pc, #272]	; (8003e3c <HAL_ADC_ConfigChannel+0x870>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	099b      	lsrs	r3, r3, #6
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d3e:	e002      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f9      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d4c:	e05a      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <HAL_ADC_ConfigChannel+0x874>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d125      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x7d8>
 8003d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11f      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a31      	ldr	r2, [pc, #196]	; (8003e30 <HAL_ADC_ConfigChannel+0x864>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d104      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x7ac>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <HAL_ADC_ConfigChannel+0x878>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d047      	beq.n	8003e08 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d80:	d004      	beq.n	8003d8c <HAL_ADC_ConfigChannel+0x7c0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <HAL_ADC_ConfigChannel+0x864>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x7c4>
 8003d8c:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <HAL_ADC_ConfigChannel+0x868>)
 8003d8e:	e000      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x7c6>
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <HAL_ADC_ConfigChannel+0x854>)
 8003d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe fcc6 	bl	800272e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003da2:	e031      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <HAL_ADC_ConfigChannel+0x87c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12d      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d127      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_ADC_ConfigChannel+0x864>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dcc:	d004      	beq.n	8003dd8 <HAL_ADC_ConfigChannel+0x80c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_ADC_ConfigChannel+0x864>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x810>
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_ADC_ConfigChannel+0x868>)
 8003dda:	e000      	b.n	8003dde <HAL_ADC_ConfigChannel+0x812>
 8003ddc:	4a10      	ldr	r2, [pc, #64]	; (8003e20 <HAL_ADC_ConfigChannel+0x854>)
 8003dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7fe fca0 	bl	800272e <LL_ADC_SetCommonPathInternalCh>
 8003dee:	e00c      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e02:	e002      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	37d8      	adds	r7, #216	; 0xd8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	50000700 	.word	0x50000700
 8003e24:	c3210000 	.word	0xc3210000
 8003e28:	90c00010 	.word	0x90c00010
 8003e2c:	50000600 	.word	0x50000600
 8003e30:	50000100 	.word	0x50000100
 8003e34:	50000300 	.word	0x50000300
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	053e2d63 	.word	0x053e2d63
 8003e40:	c7520000 	.word	0xc7520000
 8003e44:	50000500 	.word	0x50000500
 8003e48:	cb840000 	.word	0xcb840000

08003e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fe4b 	bl	8002af4 <LL_ADC_IsEnabled>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d14d      	bne.n	8003f00 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <ADC_Enable+0xc0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	f043 0210 	orr.w	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e039      	b.n	8003f02 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fe1a 	bl	8002acc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e98:	f7fe fc2a 	bl	80026f0 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e9e:	e028      	b.n	8003ef2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe fe25 	bl	8002af4 <LL_ADC_IsEnabled>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fe09 	bl	8002acc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eba:	f7fe fc19 	bl	80026f0 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d914      	bls.n	8003ef2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d00d      	beq.n	8003ef2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e007      	b.n	8003f02 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d1cf      	bne.n	8003ea0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	8000003f 	.word	0x8000003f

08003f10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d14b      	bne.n	8003fc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d021      	beq.n	8003f88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe fcaf 	bl	80028ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d032      	beq.n	8003fba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d12b      	bne.n	8003fba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11f      	bne.n	8003fba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f86:	e018      	b.n	8003fba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d111      	bne.n	8003fba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff fade 	bl	800357c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fc0:	e00e      	b.n	8003fe0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7ff faf2 	bl	80035b8 <HAL_ADC_ErrorCallback>
}
 8003fd4:	e004      	b.n	8003fe0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff faca 	bl	8003590 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff fac4 	bl	80035b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <LL_ADC_SetCommonPathInternalCh>:
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_ADC_GetCommonPathInternalCh>:
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <LL_ADC_SetOffset>:
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3360      	adds	r3, #96	; 0x60
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <LL_ADC_SetOffset+0x44>)
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	03fff000 	.word	0x03fff000

080040c4 <LL_ADC_GetOffsetChannel>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3360      	adds	r3, #96	; 0x60
 80040d2:	461a      	mov	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_ADC_SetOffsetState>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3360      	adds	r3, #96	; 0x60
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	601a      	str	r2, [r3, #0]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_ADC_SetOffsetSign>:
{
 8004126:	b480      	push	{r7}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3360      	adds	r3, #96	; 0x60
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	431a      	orrs	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	601a      	str	r2, [r3, #0]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_SetOffsetSaturation>:
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3360      	adds	r3, #96	; 0x60
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	431a      	orrs	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	601a      	str	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	615a      	str	r2, [r3, #20]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_INJ_GetTrigAuto>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_ADC_SetChannelSamplingTime>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3314      	adds	r3, #20
 80041e4:	461a      	mov	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	0e5b      	lsrs	r3, r3, #25
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	0d1b      	lsrs	r3, r3, #20
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2107      	movs	r1, #7
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	401a      	ands	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	0d1b      	lsrs	r3, r3, #20
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <LL_ADC_SetChannelSingleDiff>:
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a0f      	ldr	r2, [pc, #60]	; (8004278 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10a      	bne.n	8004256 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004254:	e00a      	b.n	800426c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	43db      	mvns	r3, r3
 8004264:	401a      	ands	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	407f0000 	.word	0x407f0000

0800427c <LL_ADC_GetMultimode>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 031f 	and.w	r3, r3, #31
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_ADC_IsEnabled>:
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <LL_ADC_IsEnabled+0x18>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <LL_ADC_IsEnabled+0x1a>
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_ADC_REG_IsConversionOngoing>:
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d101      	bne.n	80042d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_INJ_StartConversion>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042f8:	f043 0208 	orr.w	r2, r3, #8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_ADC_INJ_IsConversionOngoing>:
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d101      	bne.n	8004324 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004344:	d004      	beq.n	8004350 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a78      	ldr	r2, [pc, #480]	; (800452c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_ADCEx_InjectedStart_IT+0x20>
 8004350:	4b77      	ldr	r3, [pc, #476]	; (8004530 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8004352:	e000      	b.n	8004356 <HAL_ADCEx_InjectedStart_IT+0x22>
 8004354:	4b77      	ldr	r3, [pc, #476]	; (8004534 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff90 	bl	800427c <LL_ADC_GetMultimode>
 800435c:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ffd2 	bl	800430c <LL_ADC_INJ_IsConversionOngoing>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
 8004370:	e0d8      	b.n	8004524 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800437c:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d107      	bne.n	80043a2 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e0c0      	b.n	8004524 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_ADCEx_InjectedStart_IT+0x7c>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e0b9      	b.n	8004524 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fd47 	bl	8003e4c <ADC_Enable>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 80a8 	bne.w	800451a <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043da:	f023 0208 	bic.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
 80043e2:	e002      	b.n	80043ea <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a4a      	ldr	r2, [pc, #296]	; (800452c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_ADCEx_InjectedStart_IT+0xe8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a4a      	ldr	r2, [pc, #296]	; (8004538 <HAL_ADCEx_InjectedStart_IT+0x204>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d002      	beq.n	8004418 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e003      	b.n	8004420 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004418:	4b48      	ldr	r3, [pc, #288]	; (800453c <HAL_ADCEx_InjectedStart_IT+0x208>)
 800441a:	e001      	b.n	8004420 <HAL_ADCEx_InjectedStart_IT+0xec>
 800441c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	4293      	cmp	r3, r2
 8004426:	d002      	beq.n	800442e <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d105      	bne.n	800443a <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2260      	movs	r2, #96	; 0x60
 8004440:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004466:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d110      	bne.n	8004492 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0220 	bic.w	r2, r2, #32
 800447e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448e:	605a      	str	r2, [r3, #4]
          break;
 8004490:	e010      	b.n	80044b4 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0220 	orr.w	r2, r2, #32
 80044b0:	605a      	str	r2, [r3, #4]
          break;
 80044b2:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_ADCEx_InjectedStart_IT+0x19e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d002      	beq.n	80044ce <HAL_ADCEx_InjectedStart_IT+0x19a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	e003      	b.n	80044d6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80044ce:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_ADCEx_InjectedStart_IT+0x208>)
 80044d0:	e001      	b.n	80044d6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80044d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	4293      	cmp	r3, r2
 80044dc:	d008      	beq.n	80044f0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d002      	beq.n	80044f0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b07      	cmp	r3, #7
 80044ee:	d10d      	bne.n	800450c <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fe5f 	bl	80041b8 <LL_ADC_INJ_GetTrigAuto>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d110      	bne.n	8004522 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff feed 	bl	80042e4 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800450a:	e00a      	b.n	8004522 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	65da      	str	r2, [r3, #92]	; 0x5c
 8004518:	e003      	b.n	8004522 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	50000100 	.word	0x50000100
 8004530:	50000300 	.word	0x50000300
 8004534:	50000700 	.word	0x50000700
 8004538:	50000500 	.word	0x50000500
 800453c:	50000400 	.word	0x50000400

08004540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0b6      	sub	sp, #216	; 0xd8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d102      	bne.n	80045ce <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80045c8:	2302      	movs	r3, #2
 80045ca:	f000 bcfd 	b.w	8004fc8 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d130      	bne.n	8004648 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b09      	cmp	r3, #9
 80045ec:	d179      	bne.n	80046e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0e9b      	lsrs	r3, r3, #26
 80045fc:	025b      	lsls	r3, r3, #9
 80045fe:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800460a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004616:	e007      	b.n	8004628 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0e9b      	lsrs	r3, r3, #26
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800462e:	4b84      	ldr	r3, [pc, #528]	; (8004840 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800463a:	430b      	orrs	r3, r1
 800463c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004644:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004646:	e04c      	b.n	80046e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11d      	bne.n	800468c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6a1a      	ldr	r2, [r3, #32]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004674:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004680:	e004      	b.n	800468c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	3b01      	subs	r3, #1
 8004688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	f003 021f 	and.w	r2, r3, #31
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b0:	1e5a      	subs	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046d2:	4b5b      	ldr	r3, [pc, #364]	; (8004840 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	430b      	orrs	r3, r1
 80046e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fe10 	bl	800430c <LL_ADC_INJ_IsConversionOngoing>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d124      	bne.n	800473c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d112      	bne.n	8004722 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800470c:	055a      	lsls	r2, r3, #21
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004714:	051b      	lsls	r3, r3, #20
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	e00c      	b.n	800473c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004732:	055a      	lsls	r2, r3, #21
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fdbc 	bl	80042be <LL_ADC_REG_IsConversionOngoing>
 8004746:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fddc 	bl	800430c <LL_ADC_INJ_IsConversionOngoing>
 8004754:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 822e 	bne.w	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 8229 	bne.w	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d116      	bne.n	80047aa <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004794:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004796:	e01f      	b.n	80047d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80047a6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80047a8:	e016      	b.n	80047d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d109      	bne.n	80047c8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80047c6:	e007      	b.n	80047d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80047d6:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d110      	bne.n	8004804 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	430b      	orrs	r3, r1
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0202 	orr.w	r2, r2, #2
 8004800:	611a      	str	r2, [r3, #16]
 8004802:	e007      	b.n	8004814 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0202 	bic.w	r2, r2, #2
 8004812:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481c:	d112      	bne.n	8004844 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	4619      	mov	r1, r3
 800482a:	f7ff fcd3 	bl	80041d4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fcab 	bl	8004192 <LL_ADC_SetSamplingTimeCommonConfig>
 800483c:	e011      	b.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800483e:	bf00      	nop
 8004840:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	461a      	mov	r2, r3
 8004852:	f7ff fcbf 	bl	80041d4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fc98 	bl	8004192 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	08db      	lsrs	r3, r3, #3
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d022      	beq.n	80048ca <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6919      	ldr	r1, [r3, #16]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004894:	f7ff fbf2 	bl	800407c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6919      	ldr	r1, [r3, #16]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	461a      	mov	r2, r3
 80048a6:	f7ff fc3e 	bl	8004126 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d102      	bne.n	80048c0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80048ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048be:	e000      	b.n	80048c2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80048c0:	2300      	movs	r3, #0
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7ff fc4a 	bl	800415c <LL_ADC_SetOffsetSaturation>
 80048c8:	e179      	b.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fbf7 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fbec 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 80048ec:	4603      	mov	r3, r0
 80048ee:	0e9b      	lsrs	r3, r3, #26
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	e01e      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2100      	movs	r1, #0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fbe1 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004902:	4603      	mov	r3, r0
 8004904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800491c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004924:	2320      	movs	r3, #32
 8004926:	e004      	b.n	8004932 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004928:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0e9b      	lsrs	r3, r3, #26
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	e018      	b.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004970:	2320      	movs	r3, #32
 8004972:	e004      	b.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800497e:	429a      	cmp	r2, r3
 8004980:	d106      	bne.n	8004990 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fbb0 	bl	80040f0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff fb94 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 800499c:	4603      	mov	r3, r0
 800499e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <HAL_ADCEx_InjectedConfigChannel+0x418>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fb89 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 80049b2:	4603      	mov	r3, r0
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	f003 021f 	and.w	r2, r3, #31
 80049ba:	e01e      	b.n	80049fa <HAL_ADCEx_InjectedConfigChannel+0x456>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2101      	movs	r1, #1
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fb7e 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80049da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80049e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80049ea:	2320      	movs	r3, #32
 80049ec:	e004      	b.n	80049f8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80049ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049f2:	fab3 f383 	clz	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d105      	bne.n	8004a12 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	0e9b      	lsrs	r3, r3, #26
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	e018      	b.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004a36:	2320      	movs	r3, #32
 8004a38:	e004      	b.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d106      	bne.n	8004a56 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fb4d 	bl	80040f0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fb31 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2102      	movs	r1, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fb26 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	0e9b      	lsrs	r3, r3, #26
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	e01e      	b.n	8004ac0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2102      	movs	r1, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fb1b 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	e004      	b.n	8004abe <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab8:	fab3 f383 	clz	r3, r3
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0e9b      	lsrs	r3, r3, #26
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	e014      	b.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004af4:	2320      	movs	r3, #32
 8004af6:	e004      	b.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004afc:	fab3 f383 	clz	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d106      	bne.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff faee 	bl	80040f0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2103      	movs	r1, #3
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fad2 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2103      	movs	r1, #3
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fac7 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004b36:	4603      	mov	r3, r0
 8004b38:	0e9b      	lsrs	r3, r3, #26
 8004b3a:	f003 021f 	and.w	r2, r3, #31
 8004b3e:	e017      	b.n	8004b70 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2103      	movs	r1, #3
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fabc 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b52:	fa93 f3a3 	rbit	r3, r3
 8004b56:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004b62:	2320      	movs	r3, #32
 8004b64:	e003      	b.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b68:	fab3 f383 	clz	r3, r3
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	f003 031f 	and.w	r3, r3, #31
 8004b86:	e011      	b.n	8004bac <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b90:	fa93 f3a3 	rbit	r3, r3
 8004b94:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b98:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	e003      	b.n	8004bac <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2103      	movs	r1, #3
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fa99 	bl	80040f0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fb68 	bl	8004298 <LL_ADC_IsEnabled>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f040 813d 	bne.w	8004e4a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6819      	ldr	r1, [r3, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f7ff fb25 	bl	800422c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	4aa2      	ldr	r2, [pc, #648]	; (8004e70 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	f040 812e 	bne.w	8004e4a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	0e9b      	lsrs	r3, r3, #26
 8004c04:	3301      	adds	r3, #1
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2b09      	cmp	r3, #9
 8004c0c:	bf94      	ite	ls
 8004c0e:	2301      	movls	r3, #1
 8004c10:	2300      	movhi	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	e019      	b.n	8004c4a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c26:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004c2e:	2320      	movs	r3, #32
 8004c30:	e003      	b.n	8004c3a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c34:	fab3 f383 	clz	r3, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	bf94      	ite	ls
 8004c44:	2301      	movls	r3, #1
 8004c46:	2300      	movhi	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d079      	beq.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d107      	bne.n	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	0e9b      	lsrs	r3, r3, #26
 8004c60:	3301      	adds	r3, #1
 8004c62:	069b      	lsls	r3, r3, #26
 8004c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c68:	e015      	b.n	8004c96 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004c82:	2320      	movs	r3, #32
 8004c84:	e003      	b.n	8004c8e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	069b      	lsls	r3, r3, #26
 8004c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	0e9b      	lsrs	r3, r3, #26
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	2101      	movs	r1, #1
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	e017      	b.n	8004ce6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004cce:	2320      	movs	r3, #32
 8004cd0:	e003      	b.n	8004cda <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd4:	fab3 f383 	clz	r3, r3
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	0e9b      	lsrs	r3, r3, #26
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f003 021f 	and.w	r2, r3, #31
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	051b      	lsls	r3, r3, #20
 8004d0a:	e018      	b.n	8004d3e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004d24:	2320      	movs	r3, #32
 8004d26:	e003      	b.n	8004d30 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	f003 021f 	and.w	r2, r3, #31
 8004d36:	4613      	mov	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	4413      	add	r3, r2
 8004d3c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	e07e      	b.n	8004e40 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	0e9b      	lsrs	r3, r3, #26
 8004d54:	3301      	adds	r3, #1
 8004d56:	069b      	lsls	r3, r3, #26
 8004d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d5c:	e015      	b.n	8004d8a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004d76:	2320      	movs	r3, #32
 8004d78:	e003      	b.n	8004d82 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	3301      	adds	r3, #1
 8004d84:	069b      	lsls	r3, r3, #26
 8004d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	0e9b      	lsrs	r3, r3, #26
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	e017      	b.n	8004dda <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	61bb      	str	r3, [r7, #24]
  return result;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	e003      	b.n	8004dce <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	fab3 f383 	clz	r3, r3
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	ea42 0103 	orr.w	r1, r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10d      	bne.n	8004e06 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	0e9b      	lsrs	r3, r3, #26
 8004df0:	3301      	adds	r3, #1
 8004df2:	f003 021f 	and.w	r2, r3, #31
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3b1e      	subs	r3, #30
 8004dfe:	051b      	lsls	r3, r3, #20
 8004e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e04:	e01b      	b.n	8004e3e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	60fb      	str	r3, [r7, #12]
  return result;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004e1e:	2320      	movs	r3, #32
 8004e20:	e003      	b.n	8004e2a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	fab3 f383 	clz	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f003 021f 	and.w	r2, r3, #31
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	3b1e      	subs	r3, #30
 8004e38:	051b      	lsls	r3, r3, #20
 8004e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	6892      	ldr	r2, [r2, #8]
 8004e44:	4619      	mov	r1, r3
 8004e46:	f7ff f9c5 	bl	80041d4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80b2 	beq.w	8004fbc <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e60:	d004      	beq.n	8004e6c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d109      	bne.n	8004e80 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8004e6e:	e008      	b.n	8004e82 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8004e70:	407f0000 	.word	0x407f0000
 8004e74:	80080000 	.word	0x80080000
 8004e78:	50000100 	.word	0x50000100
 8004e7c:	50000300 	.word	0x50000300
 8004e80:	4b53      	ldr	r3, [pc, #332]	; (8004fd0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff f8eb 	bl	800405e <LL_ADC_GetCommonPathInternalCh>
 8004e88:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a50      	ldr	r2, [pc, #320]	; (8004fd4 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a4f      	ldr	r2, [pc, #316]	; (8004fd8 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d139      	bne.n	8004f14 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d133      	bne.n	8004f14 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb4:	d004      	beq.n	8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a48      	ldr	r2, [pc, #288]	; (8004fdc <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d17a      	bne.n	8004fb6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ec8:	d004      	beq.n	8004ed4 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a44      	ldr	r2, [pc, #272]	; (8004fe0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004ed4:	4a43      	ldr	r2, [pc, #268]	; (8004fe4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004ed6:	e000      	b.n	8004eda <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004ed8:	4a3d      	ldr	r2, [pc, #244]	; (8004fd0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004eda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7ff f8a7 	bl	8004038 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004eea:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	4a3e      	ldr	r2, [pc, #248]	; (8004fec <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	099a      	lsrs	r2, r3, #6
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	3318      	adds	r3, #24
 8004f02:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004f04:	e002      	b.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f9      	bne.n	8004f06 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f12:	e050      	b.n	8004fb6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a35      	ldr	r2, [pc, #212]	; (8004ff0 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d125      	bne.n	8004f6a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11f      	bne.n	8004f6a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2c      	ldr	r2, [pc, #176]	; (8004fe0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d104      	bne.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2e      	ldr	r2, [pc, #184]	; (8004ff4 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d03d      	beq.n	8004fba <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f46:	d004      	beq.n	8004f52 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a24      	ldr	r2, [pc, #144]	; (8004fe0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d101      	bne.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8004f52:	4a24      	ldr	r2, [pc, #144]	; (8004fe4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004f54:	e000      	b.n	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8004f56:	4a1e      	ldr	r2, [pc, #120]	; (8004fd0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7ff f868 	bl	8004038 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f68:	e027      	b.n	8004fba <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d123      	bne.n	8004fbc <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d11d      	bne.n	8004fbc <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f92:	d004      	beq.n	8004f9e <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8004f9e:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004fa0:	e000      	b.n	8004fa4 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8004fa2:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7ff f842 	bl	8004038 <LL_ADC_SetCommonPathInternalCh>
 8004fb4:	e002      	b.n	8004fbc <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fba:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fc4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	37d8      	adds	r7, #216	; 0xd8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	50000700 	.word	0x50000700
 8004fd4:	c3210000 	.word	0xc3210000
 8004fd8:	90c00010 	.word	0x90c00010
 8004fdc:	50000600 	.word	0x50000600
 8004fe0:	50000100 	.word	0x50000100
 8004fe4:	50000300 	.word	0x50000300
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	053e2d63 	.word	0x053e2d63
 8004ff0:	c7520000 	.word	0xc7520000
 8004ff4:	50000500 	.word	0x50000500
 8004ff8:	cb840000 	.word	0xcb840000

08004ffc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b0a1      	sub	sp, #132	; 0x84
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005016:	2302      	movs	r3, #2
 8005018:	e0e7      	b.n	80051ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005022:	2300      	movs	r3, #0
 8005024:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005026:	2300      	movs	r3, #0
 8005028:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005032:	d102      	bne.n	800503a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005034:	4b6f      	ldr	r3, [pc, #444]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	e009      	b.n	800504e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6e      	ldr	r2, [pc, #440]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d102      	bne.n	800504a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005044:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	e001      	b.n	800504e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0be      	b.n	80051ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff f925 	bl	80042be <LL_ADC_REG_IsConversionOngoing>
 8005074:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f91f 	bl	80042be <LL_ADC_REG_IsConversionOngoing>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 80a0 	bne.w	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 809c 	bne.w	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005098:	d004      	beq.n	80050a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a55      	ldr	r2, [pc, #340]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80050a4:	4b56      	ldr	r3, [pc, #344]	; (8005200 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80050a6:	e000      	b.n	80050aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80050a8:	4b56      	ldr	r3, [pc, #344]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80050aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d04b      	beq.n	800514c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050c6:	035b      	lsls	r3, r3, #13
 80050c8:	430b      	orrs	r3, r1
 80050ca:	431a      	orrs	r2, r3
 80050cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d8:	d004      	beq.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a45      	ldr	r2, [pc, #276]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10f      	bne.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050e8:	f7ff f8d6 	bl	8004298 <LL_ADC_IsEnabled>
 80050ec:	4604      	mov	r4, r0
 80050ee:	4841      	ldr	r0, [pc, #260]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050f0:	f7ff f8d2 	bl	8004298 <LL_ADC_IsEnabled>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4323      	orrs	r3, r4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e012      	b.n	800512a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005104:	483c      	ldr	r0, [pc, #240]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005106:	f7ff f8c7 	bl	8004298 <LL_ADC_IsEnabled>
 800510a:	4604      	mov	r4, r0
 800510c:	483b      	ldr	r0, [pc, #236]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800510e:	f7ff f8c3 	bl	8004298 <LL_ADC_IsEnabled>
 8005112:	4603      	mov	r3, r0
 8005114:	431c      	orrs	r4, r3
 8005116:	483c      	ldr	r0, [pc, #240]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005118:	f7ff f8be 	bl	8004298 <LL_ADC_IsEnabled>
 800511c:	4603      	mov	r3, r0
 800511e:	4323      	orrs	r3, r4
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d056      	beq.n	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800512e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005136:	f023 030f 	bic.w	r3, r3, #15
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	430a      	orrs	r2, r1
 8005144:	431a      	orrs	r2, r3
 8005146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005148:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800514a:	e047      	b.n	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800514c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005156:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005160:	d004      	beq.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10f      	bne.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800516c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005170:	f7ff f892 	bl	8004298 <LL_ADC_IsEnabled>
 8005174:	4604      	mov	r4, r0
 8005176:	481f      	ldr	r0, [pc, #124]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005178:	f7ff f88e 	bl	8004298 <LL_ADC_IsEnabled>
 800517c:	4603      	mov	r3, r0
 800517e:	4323      	orrs	r3, r4
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e012      	b.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800518c:	481a      	ldr	r0, [pc, #104]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800518e:	f7ff f883 	bl	8004298 <LL_ADC_IsEnabled>
 8005192:	4604      	mov	r4, r0
 8005194:	4819      	ldr	r0, [pc, #100]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005196:	f7ff f87f 	bl	8004298 <LL_ADC_IsEnabled>
 800519a:	4603      	mov	r3, r0
 800519c:	431c      	orrs	r4, r3
 800519e:	481a      	ldr	r0, [pc, #104]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051a0:	f7ff f87a 	bl	8004298 <LL_ADC_IsEnabled>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4323      	orrs	r3, r4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051be:	f023 030f 	bic.w	r3, r3, #15
 80051c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051c6:	e009      	b.n	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80051da:	e000      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3784      	adds	r7, #132	; 0x84
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	bf00      	nop
 80051f4:	50000100 	.word	0x50000100
 80051f8:	50000400 	.word	0x50000400
 80051fc:	50000500 	.word	0x50000500
 8005200:	50000300 	.word	0x50000300
 8005204:	50000700 	.word	0x50000700
 8005208:	50000600 	.word	0x50000600

0800520c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <__NVIC_SetPriorityGrouping+0x44>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005228:	4013      	ands	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800523e:	4a04      	ldr	r2, [pc, #16]	; (8005250 <__NVIC_SetPriorityGrouping+0x44>)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	60d3      	str	r3, [r2, #12]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <__NVIC_GetPriorityGrouping+0x18>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	0a1b      	lsrs	r3, r3, #8
 800525e:	f003 0307 	and.w	r3, r3, #7
}
 8005262:	4618      	mov	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527e:	2b00      	cmp	r3, #0
 8005280:	db0b      	blt.n	800529a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	f003 021f 	and.w	r2, r3, #31
 8005288:	4907      	ldr	r1, [pc, #28]	; (80052a8 <__NVIC_EnableIRQ+0x38>)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	2001      	movs	r0, #1
 8005292:	fa00 f202 	lsl.w	r2, r0, r2
 8005296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000e100 	.word	0xe000e100

080052ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	db0a      	blt.n	80052d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	490c      	ldr	r1, [pc, #48]	; (80052f8 <__NVIC_SetPriority+0x4c>)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	0112      	lsls	r2, r2, #4
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	440b      	add	r3, r1
 80052d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d4:	e00a      	b.n	80052ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4908      	ldr	r1, [pc, #32]	; (80052fc <__NVIC_SetPriority+0x50>)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	3b04      	subs	r3, #4
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	440b      	add	r3, r1
 80052ea:	761a      	strb	r2, [r3, #24]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	e000e100 	.word	0xe000e100
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f1c3 0307 	rsb	r3, r3, #7
 800531a:	2b04      	cmp	r3, #4
 800531c:	bf28      	it	cs
 800531e:	2304      	movcs	r3, #4
 8005320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3304      	adds	r3, #4
 8005326:	2b06      	cmp	r3, #6
 8005328:	d902      	bls.n	8005330 <NVIC_EncodePriority+0x30>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3b03      	subs	r3, #3
 800532e:	e000      	b.n	8005332 <NVIC_EncodePriority+0x32>
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	f04f 32ff 	mov.w	r2, #4294967295
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	401a      	ands	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005348:	f04f 31ff 	mov.w	r1, #4294967295
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	43d9      	mvns	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005358:	4313      	orrs	r3, r2
         );
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3b01      	subs	r3, #1
 8005374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005378:	d301      	bcc.n	800537e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800537a:	2301      	movs	r3, #1
 800537c:	e00f      	b.n	800539e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800537e:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <SysTick_Config+0x40>)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3b01      	subs	r3, #1
 8005384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005386:	210f      	movs	r1, #15
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	f7ff ff8e 	bl	80052ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <SysTick_Config+0x40>)
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005396:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <SysTick_Config+0x40>)
 8005398:	2207      	movs	r2, #7
 800539a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	e000e010 	.word	0xe000e010

080053ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff29 	bl	800520c <__NVIC_SetPriorityGrouping>
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	4603      	mov	r3, r0
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053d0:	f7ff ff40 	bl	8005254 <__NVIC_GetPriorityGrouping>
 80053d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff90 	bl	8005300 <NVIC_EncodePriority>
 80053e0:	4602      	mov	r2, r0
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff5f 	bl	80052ac <__NVIC_SetPriority>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	4603      	mov	r3, r0
 80053fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ff33 	bl	8005270 <__NVIC_EnableIRQ>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ffa4 	bl	8005368 <SysTick_Config>
 8005420:	4603      	mov	r3, r0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e08d      	b.n	800555a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	4b47      	ldr	r3, [pc, #284]	; (8005564 <HAL_DMA_Init+0x138>)
 8005446:	429a      	cmp	r2, r3
 8005448:	d80f      	bhi.n	800546a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	4b45      	ldr	r3, [pc, #276]	; (8005568 <HAL_DMA_Init+0x13c>)
 8005452:	4413      	add	r3, r2
 8005454:	4a45      	ldr	r2, [pc, #276]	; (800556c <HAL_DMA_Init+0x140>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	009a      	lsls	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a42      	ldr	r2, [pc, #264]	; (8005570 <HAL_DMA_Init+0x144>)
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
 8005468:	e00e      	b.n	8005488 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	4b40      	ldr	r3, [pc, #256]	; (8005574 <HAL_DMA_Init+0x148>)
 8005472:	4413      	add	r3, r2
 8005474:	4a3d      	ldr	r2, [pc, #244]	; (800556c <HAL_DMA_Init+0x140>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	009a      	lsls	r2, r3, #2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a3c      	ldr	r2, [pc, #240]	; (8005578 <HAL_DMA_Init+0x14c>)
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9b6 	bl	800584c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e8:	d102      	bne.n	80054f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005504:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d010      	beq.n	8005530 <HAL_DMA_Init+0x104>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d80c      	bhi.n	8005530 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f9d6 	bl	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	e008      	b.n	8005542 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40020407 	.word	0x40020407
 8005568:	bffdfff8 	.word	0xbffdfff8
 800556c:	cccccccd 	.word	0xcccccccd
 8005570:	40020000 	.word	0x40020000
 8005574:	bffdfbf8 	.word	0xbffdfbf8
 8005578:	40020400 	.word	0x40020400

0800557c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_DMA_Start_IT+0x20>
 8005598:	2302      	movs	r3, #2
 800559a:	e066      	b.n	800566a <HAL_DMA_Start_IT+0xee>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d155      	bne.n	800565c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f8fb 	bl	80057d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 020e 	orr.w	r2, r2, #14
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e00f      	b.n	8005614 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0204 	bic.w	r2, r2, #4
 8005602:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 020a 	orr.w	r2, r2, #10
 8005612:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005630:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005648:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e005      	b.n	8005668 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2204      	movs	r2, #4
 8005694:	409a      	lsls	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d026      	beq.n	80056ec <HAL_DMA_IRQHandler+0x7a>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d021      	beq.n	80056ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d107      	bne.n	80056c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0204 	bic.w	r2, r2, #4
 80056c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	f003 021f 	and.w	r2, r3, #31
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2104      	movs	r1, #4
 80056d4:	fa01 f202 	lsl.w	r2, r1, r2
 80056d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d071      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056ea:	e06c      	b.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	2202      	movs	r2, #2
 80056f6:	409a      	lsls	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02e      	beq.n	800575e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d029      	beq.n	800575e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 020a 	bic.w	r2, r2, #10
 8005726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005734:	f003 021f 	and.w	r2, r3, #31
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	2102      	movs	r1, #2
 800573e:	fa01 f202 	lsl.w	r2, r1, r2
 8005742:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d038      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800575c:	e033      	b.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2208      	movs	r2, #8
 8005768:	409a      	lsls	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d02a      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d025      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 020e 	bic.w	r2, r2, #14
 800578a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005790:	f003 021f 	and.w	r2, r3, #31
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	2101      	movs	r1, #1
 800579a:	fa01 f202 	lsl.w	r2, r1, r2
 800579e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
}
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f003 021f 	and.w	r2, r3, #31
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	2101      	movs	r1, #1
 8005808:	fa01 f202 	lsl.w	r2, r1, r2
 800580c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b10      	cmp	r3, #16
 800581c:	d108      	bne.n	8005830 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800582e:	e007      	b.n	8005840 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800585c:	429a      	cmp	r2, r3
 800585e:	d802      	bhi.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005860:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e001      	b.n	800586a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005868:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	3b08      	subs	r3, #8
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	009a      	lsls	r2, r3, #2
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	461a      	mov	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005896:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2201      	movs	r2, #1
 80058a0:	409a      	lsls	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40020407 	.word	0x40020407
 80058b8:	40020800 	.word	0x40020800
 80058bc:	40020820 	.word	0x40020820
 80058c0:	cccccccd 	.word	0xcccccccd
 80058c4:	40020880 	.word	0x40020880

080058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a08      	ldr	r2, [pc, #32]	; (800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80058ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2201      	movs	r2, #1
 80058f6:	409a      	lsls	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	1000823f 	.word	0x1000823f
 800590c:	40020940 	.word	0x40020940

08005910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800591e:	e15a      	b.n	8005bd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	2101      	movs	r1, #1
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	fa01 f303 	lsl.w	r3, r1, r3
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 814c 	beq.w	8005bd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d005      	beq.n	8005950 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800594c:	2b02      	cmp	r3, #2
 800594e:	d130      	bne.n	80059b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	2203      	movs	r2, #3
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4013      	ands	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005986:	2201      	movs	r2, #1
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	f003 0201 	and.w	r2, r3, #1
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d017      	beq.n	80059ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	2203      	movs	r2, #3
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4013      	ands	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d123      	bne.n	8005a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	08da      	lsrs	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3208      	adds	r2, #8
 8005a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	220f      	movs	r2, #15
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	08da      	lsrs	r2, r3, #3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3208      	adds	r2, #8
 8005a3c:	6939      	ldr	r1, [r7, #16]
 8005a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4013      	ands	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f003 0203 	and.w	r2, r3, #3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80a6 	beq.w	8005bd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a84:	4b5b      	ldr	r3, [pc, #364]	; (8005bf4 <HAL_GPIO_Init+0x2e4>)
 8005a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a88:	4a5a      	ldr	r2, [pc, #360]	; (8005bf4 <HAL_GPIO_Init+0x2e4>)
 8005a8a:	f043 0301 	orr.w	r3, r3, #1
 8005a8e:	6613      	str	r3, [r2, #96]	; 0x60
 8005a90:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <HAL_GPIO_Init+0x2e4>)
 8005a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a9c:	4a56      	ldr	r2, [pc, #344]	; (8005bf8 <HAL_GPIO_Init+0x2e8>)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	089b      	lsrs	r3, r3, #2
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	220f      	movs	r2, #15
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4013      	ands	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ac6:	d01f      	beq.n	8005b08 <HAL_GPIO_Init+0x1f8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a4c      	ldr	r2, [pc, #304]	; (8005bfc <HAL_GPIO_Init+0x2ec>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d019      	beq.n	8005b04 <HAL_GPIO_Init+0x1f4>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a4b      	ldr	r2, [pc, #300]	; (8005c00 <HAL_GPIO_Init+0x2f0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_GPIO_Init+0x1f0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a4a      	ldr	r2, [pc, #296]	; (8005c04 <HAL_GPIO_Init+0x2f4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00d      	beq.n	8005afc <HAL_GPIO_Init+0x1ec>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a49      	ldr	r2, [pc, #292]	; (8005c08 <HAL_GPIO_Init+0x2f8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <HAL_GPIO_Init+0x1e8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a48      	ldr	r2, [pc, #288]	; (8005c0c <HAL_GPIO_Init+0x2fc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_GPIO_Init+0x1e4>
 8005af0:	2305      	movs	r3, #5
 8005af2:	e00a      	b.n	8005b0a <HAL_GPIO_Init+0x1fa>
 8005af4:	2306      	movs	r3, #6
 8005af6:	e008      	b.n	8005b0a <HAL_GPIO_Init+0x1fa>
 8005af8:	2304      	movs	r3, #4
 8005afa:	e006      	b.n	8005b0a <HAL_GPIO_Init+0x1fa>
 8005afc:	2303      	movs	r3, #3
 8005afe:	e004      	b.n	8005b0a <HAL_GPIO_Init+0x1fa>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e002      	b.n	8005b0a <HAL_GPIO_Init+0x1fa>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <HAL_GPIO_Init+0x1fa>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	f002 0203 	and.w	r2, r2, #3
 8005b10:	0092      	lsls	r2, r2, #2
 8005b12:	4093      	lsls	r3, r2
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b1a:	4937      	ldr	r1, [pc, #220]	; (8005bf8 <HAL_GPIO_Init+0x2e8>)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	089b      	lsrs	r3, r3, #2
 8005b20:	3302      	adds	r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b28:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4013      	ands	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b4c:	4a30      	ldr	r2, [pc, #192]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b52:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b76:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b7c:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	43db      	mvns	r3, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ba6:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bca:	4a11      	ldr	r2, [pc, #68]	; (8005c10 <HAL_GPIO_Init+0x300>)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f ae9d 	bne.w	8005920 <HAL_GPIO_Init+0x10>
  }
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	48000400 	.word	0x48000400
 8005c00:	48000800 	.word	0x48000800
 8005c04:	48000c00 	.word	0x48000c00
 8005c08:	48001000 	.word	0x48001000
 8005c0c:	48001400 	.word	0x48001400
 8005c10:	40010400 	.word	0x40010400

08005c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
 8005c30:	e001      	b.n	8005c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
 8005c50:	4613      	mov	r3, r2
 8005c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c54:	787b      	ldrb	r3, [r7, #1]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c5a:	887a      	ldrh	r2, [r7, #2]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c60:	e002      	b.n	8005c68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c86:	887a      	ldrh	r2, [r7, #2]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	041a      	lsls	r2, r3, #16
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	43d9      	mvns	r1, r3
 8005c92:	887b      	ldrh	r3, [r7, #2]
 8005c94:	400b      	ands	r3, r1
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	619a      	str	r2, [r3, #24]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cbe:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f806 	bl	8005cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d141      	bne.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cfe:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0a:	d131      	bne.n	8005d70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d0c:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d12:	4a46      	ldr	r2, [pc, #280]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d1c:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d24:	4a41      	ldr	r2, [pc, #260]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d2c:	4b40      	ldr	r3, [pc, #256]	; (8005e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2232      	movs	r2, #50	; 0x32
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	4a3f      	ldr	r2, [pc, #252]	; (8005e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	0c9b      	lsrs	r3, r3, #18
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d42:	e002      	b.n	8005d4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d4a:	4b38      	ldr	r3, [pc, #224]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d56:	d102      	bne.n	8005d5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f2      	bne.n	8005d44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d5e:	4b33      	ldr	r3, [pc, #204]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	d158      	bne.n	8005e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e057      	b.n	8005e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d70:	4b2e      	ldr	r3, [pc, #184]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d76:	4a2d      	ldr	r2, [pc, #180]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d80:	e04d      	b.n	8005e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d141      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d8a:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d96:	d131      	bne.n	8005dfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d98:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9e:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005da8:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005db0:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005db8:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2232      	movs	r2, #50	; 0x32
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	0c9b      	lsrs	r3, r3, #18
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dce:	e002      	b.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dd6:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de2:	d102      	bne.n	8005dea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f2      	bne.n	8005dd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dea:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df6:	d112      	bne.n	8005e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e011      	b.n	8005e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e0c:	e007      	b.n	8005e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40007000 	.word	0x40007000
 8005e30:	20000000 	.word	0x20000000
 8005e34:	431bde83 	.word	0x431bde83

08005e38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e46:	6093      	str	r3, [r2, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40007000 	.word	0x40007000

08005e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e306      	b.n	8006478 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d075      	beq.n	8005f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e76:	4b97      	ldr	r3, [pc, #604]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e80:	4b94      	ldr	r3, [pc, #592]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCC_OscConfig+0x3e>
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d002      	beq.n	8005e9c <HAL_RCC_OscConfig+0x44>
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9c:	4b8d      	ldr	r3, [pc, #564]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05b      	beq.n	8005f60 <HAL_RCC_OscConfig+0x108>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d157      	bne.n	8005f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e2e1      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCC_OscConfig+0x74>
 8005ebe:	4b85      	ldr	r3, [pc, #532]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a84      	ldr	r2, [pc, #528]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e01d      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x98>
 8005ed6:	4b7f      	ldr	r3, [pc, #508]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a7e      	ldr	r2, [pc, #504]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b7c      	ldr	r3, [pc, #496]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a7b      	ldr	r2, [pc, #492]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e00b      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ef0:	4b78      	ldr	r3, [pc, #480]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a77      	ldr	r2, [pc, #476]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	4b75      	ldr	r3, [pc, #468]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a74      	ldr	r2, [pc, #464]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fc fbee 	bl	80026f0 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fc fbea 	bl	80026f0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e2a6      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0xc0>
 8005f36:	e014      	b.n	8005f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fc fbda 	bl	80026f0 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f40:	f7fc fbd6 	bl	80026f0 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b64      	cmp	r3, #100	; 0x64
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e292      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f52:	4b60      	ldr	r3, [pc, #384]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f0      	bne.n	8005f40 <HAL_RCC_OscConfig+0xe8>
 8005f5e:	e000      	b.n	8005f62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d075      	beq.n	800605a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6e:	4b59      	ldr	r3, [pc, #356]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f78:	4b56      	ldr	r3, [pc, #344]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b0c      	cmp	r3, #12
 8005f86:	d102      	bne.n	8005f8e <HAL_RCC_OscConfig+0x136>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d002      	beq.n	8005f94 <HAL_RCC_OscConfig+0x13c>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d11f      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f94:	4b4f      	ldr	r3, [pc, #316]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_OscConfig+0x154>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e265      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fac:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	061b      	lsls	r3, r3, #24
 8005fba:	4946      	ldr	r1, [pc, #280]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fc0:	4b45      	ldr	r3, [pc, #276]	; (80060d8 <HAL_RCC_OscConfig+0x280>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fc fb47 	bl	8002658 <HAL_InitTick>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d043      	beq.n	8006058 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e251      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d023      	beq.n	8006024 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3c      	ldr	r2, [pc, #240]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fc fb82 	bl	80026f0 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7fc fb7e 	bl	80026f0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e23a      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006002:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600e:	4b31      	ldr	r3, [pc, #196]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	061b      	lsls	r3, r3, #24
 800601c:	492d      	ldr	r1, [pc, #180]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	604b      	str	r3, [r1, #4]
 8006022:	e01a      	b.n	800605a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2a      	ldr	r2, [pc, #168]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 800602a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fc fb5e 	bl	80026f0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006038:	f7fc fb5a 	bl	80026f0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e216      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x1e0>
 8006056:	e000      	b.n	800605a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006058:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d041      	beq.n	80060ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01c      	beq.n	80060a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800606e:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8006070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006074:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607e:	f7fc fb37 	bl	80026f0 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006086:	f7fc fb33 	bl	80026f0 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e1ef      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006098:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 800609a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0ef      	beq.n	8006086 <HAL_RCC_OscConfig+0x22e>
 80060a6:	e020      	b.n	80060ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060a8:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 80060aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <HAL_RCC_OscConfig+0x27c>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b8:	f7fc fb1a 	bl	80026f0 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060be:	e00d      	b.n	80060dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c0:	f7fc fb16 	bl	80026f0 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d906      	bls.n	80060dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e1d2      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
 80060d2:	bf00      	nop
 80060d4:	40021000 	.word	0x40021000
 80060d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060dc:	4b8c      	ldr	r3, [pc, #560]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80060de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ea      	bne.n	80060c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 80a6 	beq.w	8006244 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f8:	2300      	movs	r3, #0
 80060fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060fc:	4b84      	ldr	r3, [pc, #528]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80060fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_RCC_OscConfig+0x2b4>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <HAL_RCC_OscConfig+0x2b6>
 800610c:	2300      	movs	r3, #0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006112:	4b7f      	ldr	r3, [pc, #508]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	4a7e      	ldr	r2, [pc, #504]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611c:	6593      	str	r3, [r2, #88]	; 0x58
 800611e:	4b7c      	ldr	r3, [pc, #496]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800612a:	2301      	movs	r3, #1
 800612c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800612e:	4b79      	ldr	r3, [pc, #484]	; (8006314 <HAL_RCC_OscConfig+0x4bc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d118      	bne.n	800616c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800613a:	4b76      	ldr	r3, [pc, #472]	; (8006314 <HAL_RCC_OscConfig+0x4bc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a75      	ldr	r2, [pc, #468]	; (8006314 <HAL_RCC_OscConfig+0x4bc>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006146:	f7fc fad3 	bl	80026f0 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614e:	f7fc facf 	bl	80026f0 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e18b      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006160:	4b6c      	ldr	r3, [pc, #432]	; (8006314 <HAL_RCC_OscConfig+0x4bc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d108      	bne.n	8006186 <HAL_RCC_OscConfig+0x32e>
 8006174:	4b66      	ldr	r3, [pc, #408]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617a:	4a65      	ldr	r2, [pc, #404]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 800617c:	f043 0301 	orr.w	r3, r3, #1
 8006180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006184:	e024      	b.n	80061d0 <HAL_RCC_OscConfig+0x378>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b05      	cmp	r3, #5
 800618c:	d110      	bne.n	80061b0 <HAL_RCC_OscConfig+0x358>
 800618e:	4b60      	ldr	r3, [pc, #384]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006194:	4a5e      	ldr	r2, [pc, #376]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f043 0304 	orr.w	r3, r3, #4
 800619a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800619e:	4b5c      	ldr	r3, [pc, #368]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a4:	4a5a      	ldr	r2, [pc, #360]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061ae:	e00f      	b.n	80061d0 <HAL_RCC_OscConfig+0x378>
 80061b0:	4b57      	ldr	r3, [pc, #348]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	4a56      	ldr	r2, [pc, #344]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061c0:	4b53      	ldr	r3, [pc, #332]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	4a52      	ldr	r2, [pc, #328]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80061c8:	f023 0304 	bic.w	r3, r3, #4
 80061cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d016      	beq.n	8006206 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d8:	f7fc fa8a 	bl	80026f0 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061de:	e00a      	b.n	80061f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e0:	f7fc fa86 	bl	80026f0 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e140      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f6:	4b46      	ldr	r3, [pc, #280]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ed      	beq.n	80061e0 <HAL_RCC_OscConfig+0x388>
 8006204:	e015      	b.n	8006232 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006206:	f7fc fa73 	bl	80026f0 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800620c:	e00a      	b.n	8006224 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620e:	f7fc fa6f 	bl	80026f0 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	4293      	cmp	r3, r2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e129      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006224:	4b3a      	ldr	r3, [pc, #232]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1ed      	bne.n	800620e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006232:	7ffb      	ldrb	r3, [r7, #31]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b35      	ldr	r3, [pc, #212]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	4a34      	ldr	r2, [pc, #208]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 800623e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d03c      	beq.n	80062ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01c      	beq.n	8006292 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 800625a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006268:	f7fc fa42 	bl	80026f0 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006270:	f7fc fa3e 	bl	80026f0 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e0fa      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006282:	4b23      	ldr	r3, [pc, #140]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0ef      	beq.n	8006270 <HAL_RCC_OscConfig+0x418>
 8006290:	e01b      	b.n	80062ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006292:	4b1f      	ldr	r3, [pc, #124]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 8006294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006298:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a2:	f7fc fa25 	bl	80026f0 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062aa:	f7fc fa21 	bl	80026f0 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e0dd      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062bc:	4b14      	ldr	r3, [pc, #80]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80062be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1ef      	bne.n	80062aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80d1 	beq.w	8006476 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 030c 	and.w	r3, r3, #12
 80062dc:	2b0c      	cmp	r3, #12
 80062de:	f000 808b 	beq.w	80063f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d15e      	bne.n	80063a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ea:	4b09      	ldr	r3, [pc, #36]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a08      	ldr	r2, [pc, #32]	; (8006310 <HAL_RCC_OscConfig+0x4b8>)
 80062f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fc f9fb 	bl	80026f0 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062fc:	e00c      	b.n	8006318 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fe:	f7fc f9f7 	bl	80026f0 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d905      	bls.n	8006318 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e0b3      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
 8006310:	40021000 	.word	0x40021000
 8006314:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006318:	4b59      	ldr	r3, [pc, #356]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1ec      	bne.n	80062fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006324:	4b56      	ldr	r3, [pc, #344]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	4b56      	ldr	r3, [pc, #344]	; (8006484 <HAL_RCC_OscConfig+0x62c>)
 800632a:	4013      	ands	r3, r2
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6a11      	ldr	r1, [r2, #32]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006334:	3a01      	subs	r2, #1
 8006336:	0112      	lsls	r2, r2, #4
 8006338:	4311      	orrs	r1, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800633e:	0212      	lsls	r2, r2, #8
 8006340:	4311      	orrs	r1, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006346:	0852      	lsrs	r2, r2, #1
 8006348:	3a01      	subs	r2, #1
 800634a:	0552      	lsls	r2, r2, #21
 800634c:	4311      	orrs	r1, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006352:	0852      	lsrs	r2, r2, #1
 8006354:	3a01      	subs	r2, #1
 8006356:	0652      	lsls	r2, r2, #25
 8006358:	4311      	orrs	r1, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800635e:	06d2      	lsls	r2, r2, #27
 8006360:	430a      	orrs	r2, r1
 8006362:	4947      	ldr	r1, [pc, #284]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 8006364:	4313      	orrs	r3, r2
 8006366:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006368:	4b45      	ldr	r3, [pc, #276]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a44      	ldr	r2, [pc, #272]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 800636e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006372:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006374:	4b42      	ldr	r3, [pc, #264]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4a41      	ldr	r2, [pc, #260]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 800637a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800637e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fc f9b6 	bl	80026f0 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006388:	f7fc f9b2 	bl	80026f0 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e06e      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639a:	4b39      	ldr	r3, [pc, #228]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f0      	beq.n	8006388 <HAL_RCC_OscConfig+0x530>
 80063a6:	e066      	b.n	8006476 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a8:	4b35      	ldr	r3, [pc, #212]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a34      	ldr	r2, [pc, #208]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063b4:	4b32      	ldr	r3, [pc, #200]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a31      	ldr	r2, [pc, #196]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063c0:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4a2e      	ldr	r2, [pc, #184]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 80063c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fc f98e 	bl	80026f0 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d8:	f7fc f98a 	bl	80026f0 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e046      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ea:	4b25      	ldr	r3, [pc, #148]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f0      	bne.n	80063d8 <HAL_RCC_OscConfig+0x580>
 80063f6:	e03e      	b.n	8006476 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e039      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006404:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <HAL_RCC_OscConfig+0x628>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f003 0203 	and.w	r2, r3, #3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	429a      	cmp	r2, r3
 8006416:	d12c      	bne.n	8006472 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	3b01      	subs	r3, #1
 8006424:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d123      	bne.n	8006472 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006436:	429a      	cmp	r2, r3
 8006438:	d11b      	bne.n	8006472 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006446:	429a      	cmp	r2, r3
 8006448:	d113      	bne.n	8006472 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	3b01      	subs	r3, #1
 8006458:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800645a:	429a      	cmp	r2, r3
 800645c:	d109      	bne.n	8006472 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	3b01      	subs	r3, #1
 800646c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d001      	beq.n	8006476 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3720      	adds	r7, #32
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40021000 	.word	0x40021000
 8006484:	019f800c 	.word	0x019f800c

08006488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e11e      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a0:	4b91      	ldr	r3, [pc, #580]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d910      	bls.n	80064d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ae:	4b8e      	ldr	r3, [pc, #568]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 020f 	bic.w	r2, r3, #15
 80064b6:	498c      	ldr	r1, [pc, #560]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064be:	4b8a      	ldr	r3, [pc, #552]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d001      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e106      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d073      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d129      	bne.n	8006538 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064e4:	4b81      	ldr	r3, [pc, #516]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0f4      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064f4:	f000 f99e 	bl	8006834 <RCC_GetSysClockFreqFromPLLSource>
 80064f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4a7c      	ldr	r2, [pc, #496]	; (80066f0 <HAL_RCC_ClockConfig+0x268>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d93f      	bls.n	8006582 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006502:	4b7a      	ldr	r3, [pc, #488]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006516:	2b00      	cmp	r3, #0
 8006518:	d033      	beq.n	8006582 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800651e:	2b00      	cmp	r3, #0
 8006520:	d12f      	bne.n	8006582 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006522:	4b72      	ldr	r3, [pc, #456]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800652a:	4a70      	ldr	r2, [pc, #448]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 800652c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006530:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e024      	b.n	8006582 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d107      	bne.n	8006550 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006540:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0c6      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006550:	4b66      	ldr	r3, [pc, #408]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0be      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006560:	f000 f8ce 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8006564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4a61      	ldr	r2, [pc, #388]	; (80066f0 <HAL_RCC_ClockConfig+0x268>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d909      	bls.n	8006582 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800656e:	4b5f      	ldr	r3, [pc, #380]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006576:	4a5d      	ldr	r2, [pc, #372]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006582:	4b5a      	ldr	r3, [pc, #360]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 0203 	bic.w	r2, r3, #3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4957      	ldr	r1, [pc, #348]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006590:	4313      	orrs	r3, r2
 8006592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006594:	f7fc f8ac 	bl	80026f0 <HAL_GetTick>
 8006598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659a:	e00a      	b.n	80065b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800659c:	f7fc f8a8 	bl	80026f0 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e095      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b2:	4b4e      	ldr	r3, [pc, #312]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 020c 	and.w	r2, r3, #12
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d1eb      	bne.n	800659c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d023      	beq.n	8006618 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065dc:	4b43      	ldr	r3, [pc, #268]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4a42      	ldr	r2, [pc, #264]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065f4:	4b3d      	ldr	r3, [pc, #244]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065fc:	4a3b      	ldr	r2, [pc, #236]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006604:	4b39      	ldr	r3, [pc, #228]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4936      	ldr	r1, [pc, #216]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
 8006616:	e008      	b.n	800662a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d105      	bne.n	800662a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800661e:	4b33      	ldr	r3, [pc, #204]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	4a32      	ldr	r2, [pc, #200]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006628:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800662a:	4b2f      	ldr	r3, [pc, #188]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d21d      	bcs.n	8006674 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006638:	4b2b      	ldr	r3, [pc, #172]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f023 020f 	bic.w	r2, r3, #15
 8006640:	4929      	ldr	r1, [pc, #164]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006648:	f7fc f852 	bl	80026f0 <HAL_GetTick>
 800664c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	e00a      	b.n	8006666 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006650:	f7fc f84e 	bl	80026f0 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f241 3288 	movw	r2, #5000	; 0x1388
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e03b      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <HAL_RCC_ClockConfig+0x260>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d1ed      	bne.n	8006650 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4917      	ldr	r1, [pc, #92]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	490f      	ldr	r1, [pc, #60]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066b2:	f000 f825 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <HAL_RCC_ClockConfig+0x264>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	490c      	ldr	r1, [pc, #48]	; (80066f4 <HAL_RCC_ClockConfig+0x26c>)
 80066c4:	5ccb      	ldrb	r3, [r1, r3]
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <HAL_RCC_ClockConfig+0x270>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066d2:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <HAL_RCC_ClockConfig+0x274>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fb ffbe 	bl	8002658 <HAL_InitTick>
 80066dc:	4603      	mov	r3, r0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40022000 	.word	0x40022000
 80066ec:	40021000 	.word	0x40021000
 80066f0:	04c4b400 	.word	0x04c4b400
 80066f4:	0800a2ac 	.word	0x0800a2ac
 80066f8:	20000000 	.word	0x20000000
 80066fc:	20000004 	.word	0x20000004

08006700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006706:	4b2c      	ldr	r3, [pc, #176]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
 800670e:	2b04      	cmp	r3, #4
 8006710:	d102      	bne.n	8006718 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006712:	4b2a      	ldr	r3, [pc, #168]	; (80067bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e047      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006718:	4b27      	ldr	r3, [pc, #156]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 030c 	and.w	r3, r3, #12
 8006720:	2b08      	cmp	r3, #8
 8006722:	d102      	bne.n	800672a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006724:	4b26      	ldr	r3, [pc, #152]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	e03e      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800672a:	4b23      	ldr	r3, [pc, #140]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b0c      	cmp	r3, #12
 8006734:	d136      	bne.n	80067a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006736:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006740:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	3301      	adds	r3, #1
 800674c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d10c      	bne.n	800676e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006754:	4a1a      	ldr	r2, [pc, #104]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	fbb2 f3f3 	udiv	r3, r2, r3
 800675c:	4a16      	ldr	r2, [pc, #88]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800675e:	68d2      	ldr	r2, [r2, #12]
 8006760:	0a12      	lsrs	r2, r2, #8
 8006762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	617b      	str	r3, [r7, #20]
      break;
 800676c:	e00c      	b.n	8006788 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	4a10      	ldr	r2, [pc, #64]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006778:	68d2      	ldr	r2, [r2, #12]
 800677a:	0a12      	lsrs	r2, r2, #8
 800677c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006780:	fb02 f303 	mul.w	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]
      break;
 8006786:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	0e5b      	lsrs	r3, r3, #25
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	3301      	adds	r3, #1
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	e001      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80067a8:	693b      	ldr	r3, [r7, #16]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000
 80067bc:	00f42400 	.word	0x00f42400
 80067c0:	016e3600 	.word	0x016e3600

080067c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067ca:	681b      	ldr	r3, [r3, #0]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000000 	.word	0x20000000

080067dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067e0:	f7ff fff0 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	4904      	ldr	r1, [pc, #16]	; (8006804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067f2:	5ccb      	ldrb	r3, [r1, r3]
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	0800a2bc 	.word	0x0800a2bc

08006808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800680c:	f7ff ffda 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0adb      	lsrs	r3, r3, #11
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4904      	ldr	r1, [pc, #16]	; (8006830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006828:	4618      	mov	r0, r3
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	0800a2bc 	.word	0x0800a2bc

08006834 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800683a:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d10c      	bne.n	8006872 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006862:	68d2      	ldr	r2, [r2, #12]
 8006864:	0a12      	lsrs	r2, r2, #8
 8006866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	617b      	str	r3, [r7, #20]
    break;
 8006870:	e00c      	b.n	800688c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006872:	4a12      	ldr	r2, [pc, #72]	; (80068bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	4a0e      	ldr	r2, [pc, #56]	; (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800687c:	68d2      	ldr	r2, [r2, #12]
 800687e:	0a12      	lsrs	r2, r2, #8
 8006880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]
    break;
 800688a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	0e5b      	lsrs	r3, r3, #25
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	3301      	adds	r3, #1
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80068a6:	687b      	ldr	r3, [r7, #4]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40021000 	.word	0x40021000
 80068b8:	016e3600 	.word	0x016e3600
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068c8:	2300      	movs	r3, #0
 80068ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068cc:	2300      	movs	r3, #0
 80068ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8098 	beq.w	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068de:	2300      	movs	r3, #0
 80068e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068e2:	4b43      	ldr	r3, [pc, #268]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10d      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f2:	4a3f      	ldr	r2, [pc, #252]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f8:	6593      	str	r3, [r2, #88]	; 0x58
 80068fa:	4b3d      	ldr	r3, [pc, #244]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	60bb      	str	r3, [r7, #8]
 8006904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006906:	2301      	movs	r3, #1
 8006908:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800690a:	4b3a      	ldr	r3, [pc, #232]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a39      	ldr	r2, [pc, #228]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006916:	f7fb feeb 	bl	80026f0 <HAL_GetTick>
 800691a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691c:	e009      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fb fee7 	bl	80026f0 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d902      	bls.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	74fb      	strb	r3, [r7, #19]
        break;
 8006930:	e005      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006932:	4b30      	ldr	r3, [pc, #192]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ef      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800693e:	7cfb      	ldrb	r3, [r7, #19]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d159      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006944:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01e      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d019      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006960:	4b23      	ldr	r3, [pc, #140]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800696c:	4b20      	ldr	r3, [pc, #128]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006972:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800697c:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699e:	f7fb fea7 	bl	80026f0 <HAL_GetTick>
 80069a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a4:	e00b      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fb fea3 	bl	80026f0 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d902      	bls.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	74fb      	strb	r3, [r7, #19]
            break;
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069be:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0ec      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069cc:	7cfb      	ldrb	r3, [r7, #19]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e0:	4903      	ldr	r1, [pc, #12]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069e8:	e008      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ea:	7cfb      	ldrb	r3, [r7, #19]
 80069ec:	74bb      	strb	r3, [r7, #18]
 80069ee:	e005      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	7cfb      	ldrb	r3, [r7, #19]
 80069fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069fc:	7c7b      	ldrb	r3, [r7, #17]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a02:	4ba7      	ldr	r3, [pc, #668]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a06:	4aa6      	ldr	r2, [pc, #664]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a1a:	4ba1      	ldr	r3, [pc, #644]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	f023 0203 	bic.w	r2, r3, #3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	499d      	ldr	r1, [pc, #628]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a3c:	4b98      	ldr	r3, [pc, #608]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f023 020c 	bic.w	r2, r3, #12
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	4995      	ldr	r1, [pc, #596]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a5e:	4b90      	ldr	r3, [pc, #576]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	498c      	ldr	r1, [pc, #560]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a80:	4b87      	ldr	r3, [pc, #540]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	4984      	ldr	r1, [pc, #528]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006aa2:	4b7f      	ldr	r3, [pc, #508]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	497b      	ldr	r1, [pc, #492]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac4:	4b76      	ldr	r3, [pc, #472]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	4973      	ldr	r1, [pc, #460]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae6:	4b6e      	ldr	r3, [pc, #440]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	496a      	ldr	r1, [pc, #424]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b08:	4b65      	ldr	r3, [pc, #404]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4962      	ldr	r1, [pc, #392]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b2a:	4b5d      	ldr	r3, [pc, #372]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	4959      	ldr	r1, [pc, #356]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b4c:	4b54      	ldr	r3, [pc, #336]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b52:	f023 0203 	bic.w	r2, r3, #3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	4951      	ldr	r1, [pc, #324]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b6e:	4b4c      	ldr	r3, [pc, #304]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4948      	ldr	r1, [pc, #288]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d015      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b90:	4b43      	ldr	r3, [pc, #268]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4940      	ldr	r1, [pc, #256]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bae:	d105      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a3a      	ldr	r2, [pc, #232]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d015      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bc8:	4b35      	ldr	r3, [pc, #212]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd6:	4932      	ldr	r1, [pc, #200]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006be6:	d105      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be8:	4b2d      	ldr	r3, [pc, #180]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a2c      	ldr	r2, [pc, #176]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d015      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c00:	4b27      	ldr	r3, [pc, #156]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	4924      	ldr	r1, [pc, #144]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c1e:	d105      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c20:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d015      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c38:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	4916      	ldr	r1, [pc, #88]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c56:	d105      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a10      	ldr	r2, [pc, #64]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d019      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	4908      	ldr	r1, [pc, #32]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c8e:	d109      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c90:	4b03      	ldr	r3, [pc, #12]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a02      	ldr	r2, [pc, #8]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9a:	60d3      	str	r3, [r2, #12]
 8006c9c:	e002      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c9e:	bf00      	nop
 8006ca0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cb0:	4b29      	ldr	r3, [pc, #164]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	4926      	ldr	r1, [pc, #152]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cce:	d105      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cd0:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4a20      	ldr	r2, [pc, #128]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d015      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf6:	4918      	ldr	r1, [pc, #96]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d06:	d105      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a12      	ldr	r2, [pc, #72]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d015      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2e:	490a      	ldr	r1, [pc, #40]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d3e:	d105      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4a04      	ldr	r2, [pc, #16]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40021000 	.word	0x40021000

08006d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d001      	beq.n	8006d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e054      	b.n	8006e1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d022      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x80>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9e:	d01d      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x80>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a22      	ldr	r2, [pc, #136]	; (8006e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d018      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x80>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a21      	ldr	r2, [pc, #132]	; (8006e34 <HAL_TIM_Base_Start_IT+0xd8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d013      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x80>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <HAL_TIM_Base_Start_IT+0xdc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00e      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x80>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <HAL_TIM_Base_Start_IT+0xe0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d009      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x80>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <HAL_TIM_Base_Start_IT+0xe4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x80>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1b      	ldr	r2, [pc, #108]	; (8006e44 <HAL_TIM_Base_Start_IT+0xe8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d115      	bne.n	8006e08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <HAL_TIM_Base_Start_IT+0xec>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b06      	cmp	r3, #6
 8006dec:	d015      	beq.n	8006e1a <HAL_TIM_Base_Start_IT+0xbe>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d011      	beq.n	8006e1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e06:	e008      	b.n	8006e1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e000      	b.n	8006e1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40012c00 	.word	0x40012c00
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40015000 	.word	0x40015000
 8006e48:	00010007 	.word	0x00010007

08006e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e049      	b.n	8006ef2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fb f9b2 	bl	80021dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f000 fca0 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <HAL_TIM_PWM_Start+0x24>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e03c      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d109      	bne.n	8006f3a <HAL_TIM_PWM_Start+0x3e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	e02f      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d109      	bne.n	8006f54 <HAL_TIM_PWM_Start+0x58>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e022      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b0c      	cmp	r3, #12
 8006f58:	d109      	bne.n	8006f6e <HAL_TIM_PWM_Start+0x72>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	e015      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d109      	bne.n	8006f88 <HAL_TIM_PWM_Start+0x8c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	bf14      	ite	ne
 8006f80:	2301      	movne	r3, #1
 8006f82:	2300      	moveq	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	e008      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e0a6      	b.n	80070f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0xb6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb0:	e023      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_PWM_Start+0xc6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc0:	e01b      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0xd6>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd0:	e013      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b0c      	cmp	r3, #12
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIM_PWM_Start+0xe6>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fe0:	e00b      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_PWM_Start+0xf6>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ff0:	e003      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2201      	movs	r2, #1
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f8e0 	bl	80081c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a3a      	ldr	r2, [pc, #232]	; (80070f8 <HAL_TIM_PWM_Start+0x1fc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d018      	beq.n	8007044 <HAL_TIM_PWM_Start+0x148>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a39      	ldr	r2, [pc, #228]	; (80070fc <HAL_TIM_PWM_Start+0x200>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <HAL_TIM_PWM_Start+0x148>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a37      	ldr	r2, [pc, #220]	; (8007100 <HAL_TIM_PWM_Start+0x204>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00e      	beq.n	8007044 <HAL_TIM_PWM_Start+0x148>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a36      	ldr	r2, [pc, #216]	; (8007104 <HAL_TIM_PWM_Start+0x208>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d009      	beq.n	8007044 <HAL_TIM_PWM_Start+0x148>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a34      	ldr	r2, [pc, #208]	; (8007108 <HAL_TIM_PWM_Start+0x20c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d004      	beq.n	8007044 <HAL_TIM_PWM_Start+0x148>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a33      	ldr	r2, [pc, #204]	; (800710c <HAL_TIM_PWM_Start+0x210>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d101      	bne.n	8007048 <HAL_TIM_PWM_Start+0x14c>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <HAL_TIM_PWM_Start+0x14e>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d007      	beq.n	800705e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800705c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a25      	ldr	r2, [pc, #148]	; (80070f8 <HAL_TIM_PWM_Start+0x1fc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <HAL_TIM_PWM_Start+0x1b2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007070:	d01d      	beq.n	80070ae <HAL_TIM_PWM_Start+0x1b2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a26      	ldr	r2, [pc, #152]	; (8007110 <HAL_TIM_PWM_Start+0x214>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <HAL_TIM_PWM_Start+0x1b2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a24      	ldr	r2, [pc, #144]	; (8007114 <HAL_TIM_PWM_Start+0x218>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_TIM_PWM_Start+0x1b2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a23      	ldr	r2, [pc, #140]	; (8007118 <HAL_TIM_PWM_Start+0x21c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <HAL_TIM_PWM_Start+0x1b2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a19      	ldr	r2, [pc, #100]	; (80070fc <HAL_TIM_PWM_Start+0x200>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_TIM_PWM_Start+0x1b2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a18      	ldr	r2, [pc, #96]	; (8007100 <HAL_TIM_PWM_Start+0x204>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <HAL_TIM_PWM_Start+0x1b2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a18      	ldr	r2, [pc, #96]	; (800710c <HAL_TIM_PWM_Start+0x210>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d115      	bne.n	80070da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	4b19      	ldr	r3, [pc, #100]	; (800711c <HAL_TIM_PWM_Start+0x220>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b06      	cmp	r3, #6
 80070be:	d015      	beq.n	80070ec <HAL_TIM_PWM_Start+0x1f0>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c6:	d011      	beq.n	80070ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d8:	e008      	b.n	80070ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0201 	orr.w	r2, r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e000      	b.n	80070ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400
 8007108:	40014800 	.word	0x40014800
 800710c:	40015000 	.word	0x40015000
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40000c00 	.word	0x40000c00
 800711c:	00010007 	.word	0x00010007

08007120 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e049      	b.n	80071c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fb f868 	bl	800221c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f000 fb36 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <HAL_TIM_IC_Start_IT+0x1e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	e023      	b.n	8007236 <HAL_TIM_IC_Start_IT+0x66>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d104      	bne.n	80071fe <HAL_TIM_IC_Start_IT+0x2e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e01b      	b.n	8007236 <HAL_TIM_IC_Start_IT+0x66>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d104      	bne.n	800720e <HAL_TIM_IC_Start_IT+0x3e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800720a:	b2db      	uxtb	r3, r3
 800720c:	e013      	b.n	8007236 <HAL_TIM_IC_Start_IT+0x66>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d104      	bne.n	800721e <HAL_TIM_IC_Start_IT+0x4e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800721a:	b2db      	uxtb	r3, r3
 800721c:	e00b      	b.n	8007236 <HAL_TIM_IC_Start_IT+0x66>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b10      	cmp	r3, #16
 8007222:	d104      	bne.n	800722e <HAL_TIM_IC_Start_IT+0x5e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e003      	b.n	8007236 <HAL_TIM_IC_Start_IT+0x66>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007234:	b2db      	uxtb	r3, r3
 8007236:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <HAL_TIM_IC_Start_IT+0x78>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e013      	b.n	8007270 <HAL_TIM_IC_Start_IT+0xa0>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b04      	cmp	r3, #4
 800724c:	d104      	bne.n	8007258 <HAL_TIM_IC_Start_IT+0x88>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e00b      	b.n	8007270 <HAL_TIM_IC_Start_IT+0xa0>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b08      	cmp	r3, #8
 800725c:	d104      	bne.n	8007268 <HAL_TIM_IC_Start_IT+0x98>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007264:	b2db      	uxtb	r3, r3
 8007266:	e003      	b.n	8007270 <HAL_TIM_IC_Start_IT+0xa0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800726e:	b2db      	uxtb	r3, r3
 8007270:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d102      	bne.n	800727e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007278:	7b7b      	ldrb	r3, [r7, #13]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d001      	beq.n	8007282 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e0e2      	b.n	8007448 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <HAL_TIM_IC_Start_IT+0xc2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007290:	e023      	b.n	80072da <HAL_TIM_IC_Start_IT+0x10a>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b04      	cmp	r3, #4
 8007296:	d104      	bne.n	80072a2 <HAL_TIM_IC_Start_IT+0xd2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072a0:	e01b      	b.n	80072da <HAL_TIM_IC_Start_IT+0x10a>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d104      	bne.n	80072b2 <HAL_TIM_IC_Start_IT+0xe2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072b0:	e013      	b.n	80072da <HAL_TIM_IC_Start_IT+0x10a>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b0c      	cmp	r3, #12
 80072b6:	d104      	bne.n	80072c2 <HAL_TIM_IC_Start_IT+0xf2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072c0:	e00b      	b.n	80072da <HAL_TIM_IC_Start_IT+0x10a>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b10      	cmp	r3, #16
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_IC_Start_IT+0x102>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d0:	e003      	b.n	80072da <HAL_TIM_IC_Start_IT+0x10a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_TIM_IC_Start_IT+0x11a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e8:	e013      	b.n	8007312 <HAL_TIM_IC_Start_IT+0x142>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d104      	bne.n	80072fa <HAL_TIM_IC_Start_IT+0x12a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072f8:	e00b      	b.n	8007312 <HAL_TIM_IC_Start_IT+0x142>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d104      	bne.n	800730a <HAL_TIM_IC_Start_IT+0x13a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007308:	e003      	b.n	8007312 <HAL_TIM_IC_Start_IT+0x142>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b0c      	cmp	r3, #12
 8007316:	d841      	bhi.n	800739c <HAL_TIM_IC_Start_IT+0x1cc>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <HAL_TIM_IC_Start_IT+0x150>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007355 	.word	0x08007355
 8007324:	0800739d 	.word	0x0800739d
 8007328:	0800739d 	.word	0x0800739d
 800732c:	0800739d 	.word	0x0800739d
 8007330:	08007367 	.word	0x08007367
 8007334:	0800739d 	.word	0x0800739d
 8007338:	0800739d 	.word	0x0800739d
 800733c:	0800739d 	.word	0x0800739d
 8007340:	08007379 	.word	0x08007379
 8007344:	0800739d 	.word	0x0800739d
 8007348:	0800739d 	.word	0x0800739d
 800734c:	0800739d 	.word	0x0800739d
 8007350:	0800738b 	.word	0x0800738b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0202 	orr.w	r2, r2, #2
 8007362:	60da      	str	r2, [r3, #12]
      break;
 8007364:	e01d      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0204 	orr.w	r2, r2, #4
 8007374:	60da      	str	r2, [r3, #12]
      break;
 8007376:	e014      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0208 	orr.w	r2, r2, #8
 8007386:	60da      	str	r2, [r3, #12]
      break;
 8007388:	e00b      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0210 	orr.w	r2, r2, #16
 8007398:	60da      	str	r2, [r3, #12]
      break;
 800739a:	e002      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
      break;
 80073a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d14e      	bne.n	8007446 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2201      	movs	r2, #1
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 ff09 	bl	80081c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a25      	ldr	r2, [pc, #148]	; (8007450 <HAL_TIM_IC_Start_IT+0x280>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d022      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x236>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c8:	d01d      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x236>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a21      	ldr	r2, [pc, #132]	; (8007454 <HAL_TIM_IC_Start_IT+0x284>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d018      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x236>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1f      	ldr	r2, [pc, #124]	; (8007458 <HAL_TIM_IC_Start_IT+0x288>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x236>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1e      	ldr	r2, [pc, #120]	; (800745c <HAL_TIM_IC_Start_IT+0x28c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x236>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <HAL_TIM_IC_Start_IT+0x290>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x236>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1b      	ldr	r2, [pc, #108]	; (8007464 <HAL_TIM_IC_Start_IT+0x294>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x236>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a19      	ldr	r2, [pc, #100]	; (8007468 <HAL_TIM_IC_Start_IT+0x298>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d115      	bne.n	8007432 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	4b17      	ldr	r3, [pc, #92]	; (800746c <HAL_TIM_IC_Start_IT+0x29c>)
 800740e:	4013      	ands	r3, r2
 8007410:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b06      	cmp	r3, #6
 8007416:	d015      	beq.n	8007444 <HAL_TIM_IC_Start_IT+0x274>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741e:	d011      	beq.n	8007444 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007430:	e008      	b.n	8007444 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f042 0201 	orr.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e000      	b.n	8007446 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007444:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40012c00 	.word	0x40012c00
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	40000c00 	.word	0x40000c00
 8007460:	40013400 	.word	0x40013400
 8007464:	40014000 	.word	0x40014000
 8007468:	40015000 	.word	0x40015000
 800746c:	00010007 	.word	0x00010007

08007470 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_TIM_IC_ConfigChannel+0x1e>
 800748a:	2302      	movs	r3, #2
 800748c:	e088      	b.n	80075a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d11b      	bne.n	80074d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f000 fd62 	bl	8007f74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 020c 	bic.w	r2, r2, #12
 80074be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6999      	ldr	r1, [r3, #24]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	619a      	str	r2, [r3, #24]
 80074d2:	e060      	b.n	8007596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d11c      	bne.n	8007514 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6819      	ldr	r1, [r3, #0]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f000 fdb7 	bl	800805c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6999      	ldr	r1, [r3, #24]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	021a      	lsls	r2, r3, #8
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	619a      	str	r2, [r3, #24]
 8007512:	e040      	b.n	8007596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b08      	cmp	r3, #8
 8007518:	d11b      	bne.n	8007552 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6819      	ldr	r1, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f000 fdd4 	bl	80080d6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 020c 	bic.w	r2, r2, #12
 800753c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69d9      	ldr	r1, [r3, #28]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	61da      	str	r2, [r3, #28]
 8007550:	e021      	b.n	8007596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b0c      	cmp	r3, #12
 8007556:	d11c      	bne.n	8007592 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6819      	ldr	r1, [r3, #0]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f000 fdf1 	bl	800814e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69da      	ldr	r2, [r3, #28]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800757a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69d9      	ldr	r1, [r3, #28]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	021a      	lsls	r2, r3, #8
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	61da      	str	r2, [r3, #28]
 8007590:	e001      	b.n	8007596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e0ff      	b.n	80077c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b14      	cmp	r3, #20
 80075d2:	f200 80f0 	bhi.w	80077b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007631 	.word	0x08007631
 80075e0:	080077b7 	.word	0x080077b7
 80075e4:	080077b7 	.word	0x080077b7
 80075e8:	080077b7 	.word	0x080077b7
 80075ec:	08007671 	.word	0x08007671
 80075f0:	080077b7 	.word	0x080077b7
 80075f4:	080077b7 	.word	0x080077b7
 80075f8:	080077b7 	.word	0x080077b7
 80075fc:	080076b3 	.word	0x080076b3
 8007600:	080077b7 	.word	0x080077b7
 8007604:	080077b7 	.word	0x080077b7
 8007608:	080077b7 	.word	0x080077b7
 800760c:	080076f3 	.word	0x080076f3
 8007610:	080077b7 	.word	0x080077b7
 8007614:	080077b7 	.word	0x080077b7
 8007618:	080077b7 	.word	0x080077b7
 800761c:	08007735 	.word	0x08007735
 8007620:	080077b7 	.word	0x080077b7
 8007624:	080077b7 	.word	0x080077b7
 8007628:	080077b7 	.word	0x080077b7
 800762c:	08007775 	.word	0x08007775
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f972 	bl	8007920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0208 	orr.w	r2, r2, #8
 800764a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0204 	bic.w	r2, r2, #4
 800765a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6999      	ldr	r1, [r3, #24]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	619a      	str	r2, [r3, #24]
      break;
 800766e:	e0a5      	b.n	80077bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f9ec 	bl	8007a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800768a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6999      	ldr	r1, [r3, #24]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	021a      	lsls	r2, r3, #8
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	619a      	str	r2, [r3, #24]
      break;
 80076b0:	e084      	b.n	80077bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fa5f 	bl	8007b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0208 	orr.w	r2, r2, #8
 80076cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0204 	bic.w	r2, r2, #4
 80076dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69d9      	ldr	r1, [r3, #28]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	61da      	str	r2, [r3, #28]
      break;
 80076f0:	e064      	b.n	80077bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fad1 	bl	8007ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800770c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800771c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69d9      	ldr	r1, [r3, #28]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	021a      	lsls	r2, r3, #8
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	61da      	str	r2, [r3, #28]
      break;
 8007732:	e043      	b.n	80077bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fb44 	bl	8007dc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0208 	orr.w	r2, r2, #8
 800774e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0204 	bic.w	r2, r2, #4
 800775e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	691a      	ldr	r2, [r3, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007772:	e023      	b.n	80077bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fb8e 	bl	8007e9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800778e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800779e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	021a      	lsls	r2, r3, #8
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80077b4:	e002      	b.n	80077bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop

080077d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a46      	ldr	r2, [pc, #280]	; (80078fc <TIM_Base_SetConfig+0x12c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d017      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ee:	d013      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a43      	ldr	r2, [pc, #268]	; (8007900 <TIM_Base_SetConfig+0x130>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00f      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a42      	ldr	r2, [pc, #264]	; (8007904 <TIM_Base_SetConfig+0x134>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00b      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a41      	ldr	r2, [pc, #260]	; (8007908 <TIM_Base_SetConfig+0x138>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d007      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a40      	ldr	r2, [pc, #256]	; (800790c <TIM_Base_SetConfig+0x13c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a3f      	ldr	r2, [pc, #252]	; (8007910 <TIM_Base_SetConfig+0x140>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d108      	bne.n	800782a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a33      	ldr	r2, [pc, #204]	; (80078fc <TIM_Base_SetConfig+0x12c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d023      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007838:	d01f      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a30      	ldr	r2, [pc, #192]	; (8007900 <TIM_Base_SetConfig+0x130>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01b      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2f      	ldr	r2, [pc, #188]	; (8007904 <TIM_Base_SetConfig+0x134>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d017      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a2e      	ldr	r2, [pc, #184]	; (8007908 <TIM_Base_SetConfig+0x138>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2d      	ldr	r2, [pc, #180]	; (800790c <TIM_Base_SetConfig+0x13c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00f      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2d      	ldr	r2, [pc, #180]	; (8007914 <TIM_Base_SetConfig+0x144>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00b      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2c      	ldr	r2, [pc, #176]	; (8007918 <TIM_Base_SetConfig+0x148>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d007      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2b      	ldr	r2, [pc, #172]	; (800791c <TIM_Base_SetConfig+0x14c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d003      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a26      	ldr	r2, [pc, #152]	; (8007910 <TIM_Base_SetConfig+0x140>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d108      	bne.n	800788c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a12      	ldr	r2, [pc, #72]	; (80078fc <TIM_Base_SetConfig+0x12c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d013      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a14      	ldr	r2, [pc, #80]	; (800790c <TIM_Base_SetConfig+0x13c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00f      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a14      	ldr	r2, [pc, #80]	; (8007914 <TIM_Base_SetConfig+0x144>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00b      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a13      	ldr	r2, [pc, #76]	; (8007918 <TIM_Base_SetConfig+0x148>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a12      	ldr	r2, [pc, #72]	; (800791c <TIM_Base_SetConfig+0x14c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a0d      	ldr	r2, [pc, #52]	; (8007910 <TIM_Base_SetConfig+0x140>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d103      	bne.n	80078e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	615a      	str	r2, [r3, #20]
}
 80078ee:	bf00      	nop
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40000400 	.word	0x40000400
 8007904:	40000800 	.word	0x40000800
 8007908:	40000c00 	.word	0x40000c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40015000 	.word	0x40015000
 8007914:	40014000 	.word	0x40014000
 8007918:	40014400 	.word	0x40014400
 800791c:	40014800 	.word	0x40014800

08007920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f023 0302 	bic.w	r3, r3, #2
 800796c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a30      	ldr	r2, [pc, #192]	; (8007a3c <TIM_OC1_SetConfig+0x11c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <TIM_OC1_SetConfig+0x88>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a2f      	ldr	r2, [pc, #188]	; (8007a40 <TIM_OC1_SetConfig+0x120>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00f      	beq.n	80079a8 <TIM_OC1_SetConfig+0x88>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a2e      	ldr	r2, [pc, #184]	; (8007a44 <TIM_OC1_SetConfig+0x124>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00b      	beq.n	80079a8 <TIM_OC1_SetConfig+0x88>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a2d      	ldr	r2, [pc, #180]	; (8007a48 <TIM_OC1_SetConfig+0x128>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d007      	beq.n	80079a8 <TIM_OC1_SetConfig+0x88>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a2c      	ldr	r2, [pc, #176]	; (8007a4c <TIM_OC1_SetConfig+0x12c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_OC1_SetConfig+0x88>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a2b      	ldr	r2, [pc, #172]	; (8007a50 <TIM_OC1_SetConfig+0x130>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d10c      	bne.n	80079c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f023 0308 	bic.w	r3, r3, #8
 80079ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f023 0304 	bic.w	r3, r3, #4
 80079c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <TIM_OC1_SetConfig+0x11c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d013      	beq.n	80079f2 <TIM_OC1_SetConfig+0xd2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1c      	ldr	r2, [pc, #112]	; (8007a40 <TIM_OC1_SetConfig+0x120>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00f      	beq.n	80079f2 <TIM_OC1_SetConfig+0xd2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <TIM_OC1_SetConfig+0x124>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00b      	beq.n	80079f2 <TIM_OC1_SetConfig+0xd2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1a      	ldr	r2, [pc, #104]	; (8007a48 <TIM_OC1_SetConfig+0x128>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d007      	beq.n	80079f2 <TIM_OC1_SetConfig+0xd2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a19      	ldr	r2, [pc, #100]	; (8007a4c <TIM_OC1_SetConfig+0x12c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d003      	beq.n	80079f2 <TIM_OC1_SetConfig+0xd2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a18      	ldr	r2, [pc, #96]	; (8007a50 <TIM_OC1_SetConfig+0x130>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d111      	bne.n	8007a16 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800
 8007a50:	40015000 	.word	0x40015000

08007a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	f023 0210 	bic.w	r2, r3, #16
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f023 0320 	bic.w	r3, r3, #32
 8007aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a2c      	ldr	r2, [pc, #176]	; (8007b64 <TIM_OC2_SetConfig+0x110>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <TIM_OC2_SetConfig+0x74>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a2b      	ldr	r2, [pc, #172]	; (8007b68 <TIM_OC2_SetConfig+0x114>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_OC2_SetConfig+0x74>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <TIM_OC2_SetConfig+0x118>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d10d      	bne.n	8007ae4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a1f      	ldr	r2, [pc, #124]	; (8007b64 <TIM_OC2_SetConfig+0x110>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <TIM_OC2_SetConfig+0xc0>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1e      	ldr	r2, [pc, #120]	; (8007b68 <TIM_OC2_SetConfig+0x114>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00f      	beq.n	8007b14 <TIM_OC2_SetConfig+0xc0>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <TIM_OC2_SetConfig+0x11c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_OC2_SetConfig+0xc0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <TIM_OC2_SetConfig+0x120>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_OC2_SetConfig+0xc0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a1c      	ldr	r2, [pc, #112]	; (8007b78 <TIM_OC2_SetConfig+0x124>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_OC2_SetConfig+0xc0>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a17      	ldr	r2, [pc, #92]	; (8007b6c <TIM_OC2_SetConfig+0x118>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d113      	bne.n	8007b3c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40015000 	.word	0x40015000
 8007b70:	40014000 	.word	0x40014000
 8007b74:	40014400 	.word	0x40014400
 8007b78:	40014800 	.word	0x40014800

08007b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a2b      	ldr	r2, [pc, #172]	; (8007c88 <TIM_OC3_SetConfig+0x10c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <TIM_OC3_SetConfig+0x72>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2a      	ldr	r2, [pc, #168]	; (8007c8c <TIM_OC3_SetConfig+0x110>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_OC3_SetConfig+0x72>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <TIM_OC3_SetConfig+0x114>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d10d      	bne.n	8007c0a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <TIM_OC3_SetConfig+0x10c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d013      	beq.n	8007c3a <TIM_OC3_SetConfig+0xbe>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <TIM_OC3_SetConfig+0x110>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00f      	beq.n	8007c3a <TIM_OC3_SetConfig+0xbe>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1d      	ldr	r2, [pc, #116]	; (8007c94 <TIM_OC3_SetConfig+0x118>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00b      	beq.n	8007c3a <TIM_OC3_SetConfig+0xbe>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1c      	ldr	r2, [pc, #112]	; (8007c98 <TIM_OC3_SetConfig+0x11c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <TIM_OC3_SetConfig+0xbe>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1b      	ldr	r2, [pc, #108]	; (8007c9c <TIM_OC3_SetConfig+0x120>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_OC3_SetConfig+0xbe>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <TIM_OC3_SetConfig+0x114>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d113      	bne.n	8007c62 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	621a      	str	r2, [r3, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40012c00 	.word	0x40012c00
 8007c8c:	40013400 	.word	0x40013400
 8007c90:	40015000 	.word	0x40015000
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800

08007ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	031b      	lsls	r3, r3, #12
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a2c      	ldr	r2, [pc, #176]	; (8007db0 <TIM_OC4_SetConfig+0x110>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <TIM_OC4_SetConfig+0x74>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a2b      	ldr	r2, [pc, #172]	; (8007db4 <TIM_OC4_SetConfig+0x114>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_OC4_SetConfig+0x74>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <TIM_OC4_SetConfig+0x118>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d10d      	bne.n	8007d30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	031b      	lsls	r3, r3, #12
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1f      	ldr	r2, [pc, #124]	; (8007db0 <TIM_OC4_SetConfig+0x110>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d013      	beq.n	8007d60 <TIM_OC4_SetConfig+0xc0>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1e      	ldr	r2, [pc, #120]	; (8007db4 <TIM_OC4_SetConfig+0x114>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00f      	beq.n	8007d60 <TIM_OC4_SetConfig+0xc0>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a1e      	ldr	r2, [pc, #120]	; (8007dbc <TIM_OC4_SetConfig+0x11c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00b      	beq.n	8007d60 <TIM_OC4_SetConfig+0xc0>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a1d      	ldr	r2, [pc, #116]	; (8007dc0 <TIM_OC4_SetConfig+0x120>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d007      	beq.n	8007d60 <TIM_OC4_SetConfig+0xc0>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a1c      	ldr	r2, [pc, #112]	; (8007dc4 <TIM_OC4_SetConfig+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_OC4_SetConfig+0xc0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <TIM_OC4_SetConfig+0x118>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d113      	bne.n	8007d88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	019b      	lsls	r3, r3, #6
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	019b      	lsls	r3, r3, #6
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	621a      	str	r2, [r3, #32]
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	40013400 	.word	0x40013400
 8007db8:	40015000 	.word	0x40015000
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40014400 	.word	0x40014400
 8007dc4:	40014800 	.word	0x40014800

08007dc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	041b      	lsls	r3, r3, #16
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <TIM_OC5_SetConfig+0xbc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d013      	beq.n	8007e4a <TIM_OC5_SetConfig+0x82>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <TIM_OC5_SetConfig+0xc0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00f      	beq.n	8007e4a <TIM_OC5_SetConfig+0x82>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <TIM_OC5_SetConfig+0xc4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00b      	beq.n	8007e4a <TIM_OC5_SetConfig+0x82>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <TIM_OC5_SetConfig+0xc8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d007      	beq.n	8007e4a <TIM_OC5_SetConfig+0x82>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a15      	ldr	r2, [pc, #84]	; (8007e94 <TIM_OC5_SetConfig+0xcc>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d003      	beq.n	8007e4a <TIM_OC5_SetConfig+0x82>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a14      	ldr	r2, [pc, #80]	; (8007e98 <TIM_OC5_SetConfig+0xd0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d109      	bne.n	8007e5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	621a      	str	r2, [r3, #32]
}
 8007e78:	bf00      	nop
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40013400 	.word	0x40013400
 8007e8c:	40014000 	.word	0x40014000
 8007e90:	40014400 	.word	0x40014400
 8007e94:	40014800 	.word	0x40014800
 8007e98:	40015000 	.word	0x40015000

08007e9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	051b      	lsls	r3, r3, #20
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a1a      	ldr	r2, [pc, #104]	; (8007f5c <TIM_OC6_SetConfig+0xc0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <TIM_OC6_SetConfig+0x84>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <TIM_OC6_SetConfig+0xc4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00f      	beq.n	8007f20 <TIM_OC6_SetConfig+0x84>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <TIM_OC6_SetConfig+0xc8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_OC6_SetConfig+0x84>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <TIM_OC6_SetConfig+0xcc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_OC6_SetConfig+0x84>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a16      	ldr	r2, [pc, #88]	; (8007f6c <TIM_OC6_SetConfig+0xd0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_OC6_SetConfig+0x84>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <TIM_OC6_SetConfig+0xd4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d109      	bne.n	8007f34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	029b      	lsls	r3, r3, #10
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	621a      	str	r2, [r3, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40014000 	.word	0x40014000
 8007f68:	40014400 	.word	0x40014400
 8007f6c:	40014800 	.word	0x40014800
 8007f70:	40015000 	.word	0x40015000

08007f74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f023 0201 	bic.w	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4a28      	ldr	r2, [pc, #160]	; (8008040 <TIM_TI1_SetConfig+0xcc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d01b      	beq.n	8007fda <TIM_TI1_SetConfig+0x66>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa8:	d017      	beq.n	8007fda <TIM_TI1_SetConfig+0x66>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4a25      	ldr	r2, [pc, #148]	; (8008044 <TIM_TI1_SetConfig+0xd0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d013      	beq.n	8007fda <TIM_TI1_SetConfig+0x66>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a24      	ldr	r2, [pc, #144]	; (8008048 <TIM_TI1_SetConfig+0xd4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00f      	beq.n	8007fda <TIM_TI1_SetConfig+0x66>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4a23      	ldr	r2, [pc, #140]	; (800804c <TIM_TI1_SetConfig+0xd8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00b      	beq.n	8007fda <TIM_TI1_SetConfig+0x66>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4a22      	ldr	r2, [pc, #136]	; (8008050 <TIM_TI1_SetConfig+0xdc>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d007      	beq.n	8007fda <TIM_TI1_SetConfig+0x66>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a21      	ldr	r2, [pc, #132]	; (8008054 <TIM_TI1_SetConfig+0xe0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d003      	beq.n	8007fda <TIM_TI1_SetConfig+0x66>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a20      	ldr	r2, [pc, #128]	; (8008058 <TIM_TI1_SetConfig+0xe4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d101      	bne.n	8007fde <TIM_TI1_SetConfig+0x6a>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <TIM_TI1_SetConfig+0x6c>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d008      	beq.n	8007ff6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0303 	bic.w	r3, r3, #3
 8007fea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e003      	b.n	8007ffe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f043 0301 	orr.w	r3, r3, #1
 8007ffc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	b2db      	uxtb	r3, r3
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f023 030a 	bic.w	r3, r3, #10
 8008018:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f003 030a 	and.w	r3, r3, #10
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	621a      	str	r2, [r3, #32]
}
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	40012c00 	.word	0x40012c00
 8008044:	40000400 	.word	0x40000400
 8008048:	40000800 	.word	0x40000800
 800804c:	40000c00 	.word	0x40000c00
 8008050:	40013400 	.word	0x40013400
 8008054:	40014000 	.word	0x40014000
 8008058:	40015000 	.word	0x40015000

0800805c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f023 0210 	bic.w	r2, r3, #16
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	031b      	lsls	r3, r3, #12
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b087      	sub	sp, #28
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4313      	orrs	r3, r2
 800810a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008112:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	011b      	lsls	r3, r3, #4
 8008118:	b2db      	uxtb	r3, r3
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008126:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800814e:	b480      	push	{r7}
 8008150:	b087      	sub	sp, #28
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800818c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	031b      	lsls	r3, r3, #12
 8008192:	b29b      	uxth	r3, r3
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80081a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	031b      	lsls	r3, r3, #12
 80081a6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	621a      	str	r2, [r3, #32]
}
 80081bc:	bf00      	nop
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2201      	movs	r2, #1
 80081dc:	fa02 f303 	lsl.w	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a1a      	ldr	r2, [r3, #32]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	401a      	ands	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008200:	431a      	orrs	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_TIMEx_PWMN_Start+0x24>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	bf14      	ite	ne
 8008230:	2301      	movne	r3, #1
 8008232:	2300      	moveq	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	e022      	b.n	800827e <HAL_TIMEx_PWMN_Start+0x6a>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b04      	cmp	r3, #4
 800823c:	d109      	bne.n	8008252 <HAL_TIMEx_PWMN_Start+0x3e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	bf14      	ite	ne
 800824a:	2301      	movne	r3, #1
 800824c:	2300      	moveq	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	e015      	b.n	800827e <HAL_TIMEx_PWMN_Start+0x6a>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d109      	bne.n	800826c <HAL_TIMEx_PWMN_Start+0x58>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e008      	b.n	800827e <HAL_TIMEx_PWMN_Start+0x6a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e073      	b.n	800836e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <HAL_TIMEx_PWMN_Start+0x82>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008294:	e013      	b.n	80082be <HAL_TIMEx_PWMN_Start+0xaa>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d104      	bne.n	80082a6 <HAL_TIMEx_PWMN_Start+0x92>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082a4:	e00b      	b.n	80082be <HAL_TIMEx_PWMN_Start+0xaa>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d104      	bne.n	80082b6 <HAL_TIMEx_PWMN_Start+0xa2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082b4:	e003      	b.n	80082be <HAL_TIMEx_PWMN_Start+0xaa>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2204      	movs	r2, #4
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f9ae 	bl	8008628 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a25      	ldr	r2, [pc, #148]	; (8008378 <HAL_TIMEx_PWMN_Start+0x164>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d022      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x118>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ee:	d01d      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x118>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a21      	ldr	r2, [pc, #132]	; (800837c <HAL_TIMEx_PWMN_Start+0x168>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d018      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x118>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a20      	ldr	r2, [pc, #128]	; (8008380 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d013      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x118>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1e      	ldr	r2, [pc, #120]	; (8008384 <HAL_TIMEx_PWMN_Start+0x170>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00e      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x118>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1d      	ldr	r2, [pc, #116]	; (8008388 <HAL_TIMEx_PWMN_Start+0x174>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d009      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x118>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1b      	ldr	r2, [pc, #108]	; (800838c <HAL_TIMEx_PWMN_Start+0x178>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d004      	beq.n	800832c <HAL_TIMEx_PWMN_Start+0x118>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1a      	ldr	r2, [pc, #104]	; (8008390 <HAL_TIMEx_PWMN_Start+0x17c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d115      	bne.n	8008358 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	4b18      	ldr	r3, [pc, #96]	; (8008394 <HAL_TIMEx_PWMN_Start+0x180>)
 8008334:	4013      	ands	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b06      	cmp	r3, #6
 800833c:	d015      	beq.n	800836a <HAL_TIMEx_PWMN_Start+0x156>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008344:	d011      	beq.n	800836a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0201 	orr.w	r2, r2, #1
 8008354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008356:	e008      	b.n	800836a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	e000      	b.n	800836c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800836a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	40012c00 	.word	0x40012c00
 800837c:	40000400 	.word	0x40000400
 8008380:	40000800 	.word	0x40000800
 8008384:	40000c00 	.word	0x40000c00
 8008388:	40013400 	.word	0x40013400
 800838c:	40014000 	.word	0x40014000
 8008390:	40015000 	.word	0x40015000
 8008394:	00010007 	.word	0x00010007

08008398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e074      	b.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a34      	ldr	r2, [pc, #208]	; (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d009      	beq.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a33      	ldr	r2, [pc, #204]	; (80084ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d004      	beq.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a31      	ldr	r2, [pc, #196]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d108      	bne.n	8008400 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a21      	ldr	r2, [pc, #132]	; (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d022      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008430:	d01d      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1f      	ldr	r2, [pc, #124]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d013      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00e      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a15      	ldr	r2, [pc, #84]	; (80084ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d009      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a11      	ldr	r2, [pc, #68]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d10c      	bne.n	8008488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4313      	orrs	r3, r2
 800847e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40012c00 	.word	0x40012c00
 80084ac:	40013400 	.word	0x40013400
 80084b0:	40015000 	.word	0x40015000
 80084b4:	40000400 	.word	0x40000400
 80084b8:	40000800 	.word	0x40000800
 80084bc:	40000c00 	.word	0x40000c00
 80084c0:	40014000 	.word	0x40014000

080084c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084dc:	2302      	movs	r3, #2
 80084de:	e096      	b.n	800860e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	4313      	orrs	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	4313      	orrs	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	041b      	lsls	r3, r3, #16
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a2f      	ldr	r2, [pc, #188]	; (800861c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a2d      	ldr	r2, [pc, #180]	; (8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2c      	ldr	r2, [pc, #176]	; (8008624 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d106      	bne.n	8008586 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a24      	ldr	r2, [pc, #144]	; (800861c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d009      	beq.n	80085a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a22      	ldr	r2, [pc, #136]	; (8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a21      	ldr	r2, [pc, #132]	; (8008624 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d12b      	bne.n	80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	051b      	lsls	r3, r3, #20
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a11      	ldr	r2, [pc, #68]	; (800861c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d009      	beq.n	80085ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a10      	ldr	r2, [pc, #64]	; (8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d004      	beq.n	80085ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a0e      	ldr	r2, [pc, #56]	; (8008624 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d106      	bne.n	80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40012c00 	.word	0x40012c00
 8008620:	40013400 	.word	0x40013400
 8008624:	40015000 	.word	0x40015000

08008628 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f003 031f 	and.w	r3, r3, #31
 800863a:	2204      	movs	r2, #4
 800863c:	fa02 f303 	lsl.w	r3, r2, r3
 8008640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a1a      	ldr	r2, [r3, #32]
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	43db      	mvns	r3, r3
 800864a:	401a      	ands	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a1a      	ldr	r2, [r3, #32]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f003 031f 	and.w	r3, r3, #31
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	431a      	orrs	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	621a      	str	r2, [r3, #32]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e042      	b.n	800870a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7f9 fd48 	bl	800212c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2224      	movs	r2, #36	; 0x24
 80086a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0201 	bic.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f82d 	bl	8008714 <UART_SetConfig>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e022      	b.n	800870a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fb1d 	bl	8008d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0201 	orr.w	r2, r2, #1
 8008700:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fba4 	bl	8008e50 <UART_CheckIdleState>
 8008708:	4603      	mov	r3, r0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008718:	b08c      	sub	sp, #48	; 0x30
 800871a:	af00      	add	r7, sp, #0
 800871c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	431a      	orrs	r2, r3
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	431a      	orrs	r2, r3
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	4313      	orrs	r3, r2
 800873a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4baa      	ldr	r3, [pc, #680]	; (80089ec <UART_SetConfig+0x2d8>)
 8008744:	4013      	ands	r3, r2
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800874c:	430b      	orrs	r3, r1
 800874e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a9f      	ldr	r2, [pc, #636]	; (80089f0 <UART_SetConfig+0x2dc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d004      	beq.n	8008780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800877c:	4313      	orrs	r3, r2
 800877e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800878a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	6812      	ldr	r2, [r2, #0]
 8008792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008794:	430b      	orrs	r3, r1
 8008796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879e:	f023 010f 	bic.w	r1, r3, #15
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a90      	ldr	r2, [pc, #576]	; (80089f4 <UART_SetConfig+0x2e0>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d125      	bne.n	8008804 <UART_SetConfig+0xf0>
 80087b8:	4b8f      	ldr	r3, [pc, #572]	; (80089f8 <UART_SetConfig+0x2e4>)
 80087ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d81a      	bhi.n	80087fc <UART_SetConfig+0xe8>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0xb8>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087dd 	.word	0x080087dd
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	080087e5 	.word	0x080087e5
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e2:	e116      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80087e4:	2302      	movs	r3, #2
 80087e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ea:	e112      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f2:	e10e      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fa:	e10a      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008802:	e106      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a7c      	ldr	r2, [pc, #496]	; (80089fc <UART_SetConfig+0x2e8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d138      	bne.n	8008880 <UART_SetConfig+0x16c>
 800880e:	4b7a      	ldr	r3, [pc, #488]	; (80089f8 <UART_SetConfig+0x2e4>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008814:	f003 030c 	and.w	r3, r3, #12
 8008818:	2b0c      	cmp	r3, #12
 800881a:	d82d      	bhi.n	8008878 <UART_SetConfig+0x164>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x110>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008859 	.word	0x08008859
 8008828:	08008879 	.word	0x08008879
 800882c:	08008879 	.word	0x08008879
 8008830:	08008879 	.word	0x08008879
 8008834:	08008869 	.word	0x08008869
 8008838:	08008879 	.word	0x08008879
 800883c:	08008879 	.word	0x08008879
 8008840:	08008879 	.word	0x08008879
 8008844:	08008861 	.word	0x08008861
 8008848:	08008879 	.word	0x08008879
 800884c:	08008879 	.word	0x08008879
 8008850:	08008879 	.word	0x08008879
 8008854:	08008871 	.word	0x08008871
 8008858:	2300      	movs	r3, #0
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885e:	e0d8      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008860:	2302      	movs	r3, #2
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008866:	e0d4      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886e:	e0d0      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008876:	e0cc      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887e:	e0c8      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a5e      	ldr	r2, [pc, #376]	; (8008a00 <UART_SetConfig+0x2ec>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d125      	bne.n	80088d6 <UART_SetConfig+0x1c2>
 800888a:	4b5b      	ldr	r3, [pc, #364]	; (80089f8 <UART_SetConfig+0x2e4>)
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008890:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008894:	2b30      	cmp	r3, #48	; 0x30
 8008896:	d016      	beq.n	80088c6 <UART_SetConfig+0x1b2>
 8008898:	2b30      	cmp	r3, #48	; 0x30
 800889a:	d818      	bhi.n	80088ce <UART_SetConfig+0x1ba>
 800889c:	2b20      	cmp	r3, #32
 800889e:	d00a      	beq.n	80088b6 <UART_SetConfig+0x1a2>
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d814      	bhi.n	80088ce <UART_SetConfig+0x1ba>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <UART_SetConfig+0x19a>
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d008      	beq.n	80088be <UART_SetConfig+0x1aa>
 80088ac:	e00f      	b.n	80088ce <UART_SetConfig+0x1ba>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b4:	e0ad      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80088b6:	2302      	movs	r3, #2
 80088b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088bc:	e0a9      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80088be:	2304      	movs	r3, #4
 80088c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c4:	e0a5      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80088c6:	2308      	movs	r3, #8
 80088c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088cc:	e0a1      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80088ce:	2310      	movs	r3, #16
 80088d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d4:	e09d      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a4a      	ldr	r2, [pc, #296]	; (8008a04 <UART_SetConfig+0x2f0>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d125      	bne.n	800892c <UART_SetConfig+0x218>
 80088e0:	4b45      	ldr	r3, [pc, #276]	; (80089f8 <UART_SetConfig+0x2e4>)
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088ea:	2bc0      	cmp	r3, #192	; 0xc0
 80088ec:	d016      	beq.n	800891c <UART_SetConfig+0x208>
 80088ee:	2bc0      	cmp	r3, #192	; 0xc0
 80088f0:	d818      	bhi.n	8008924 <UART_SetConfig+0x210>
 80088f2:	2b80      	cmp	r3, #128	; 0x80
 80088f4:	d00a      	beq.n	800890c <UART_SetConfig+0x1f8>
 80088f6:	2b80      	cmp	r3, #128	; 0x80
 80088f8:	d814      	bhi.n	8008924 <UART_SetConfig+0x210>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <UART_SetConfig+0x1f0>
 80088fe:	2b40      	cmp	r3, #64	; 0x40
 8008900:	d008      	beq.n	8008914 <UART_SetConfig+0x200>
 8008902:	e00f      	b.n	8008924 <UART_SetConfig+0x210>
 8008904:	2300      	movs	r3, #0
 8008906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800890a:	e082      	b.n	8008a12 <UART_SetConfig+0x2fe>
 800890c:	2302      	movs	r3, #2
 800890e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008912:	e07e      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891a:	e07a      	b.n	8008a12 <UART_SetConfig+0x2fe>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008922:	e076      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892a:	e072      	b.n	8008a12 <UART_SetConfig+0x2fe>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a35      	ldr	r2, [pc, #212]	; (8008a08 <UART_SetConfig+0x2f4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d12a      	bne.n	800898c <UART_SetConfig+0x278>
 8008936:	4b30      	ldr	r3, [pc, #192]	; (80089f8 <UART_SetConfig+0x2e4>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008944:	d01a      	beq.n	800897c <UART_SetConfig+0x268>
 8008946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800894a:	d81b      	bhi.n	8008984 <UART_SetConfig+0x270>
 800894c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008950:	d00c      	beq.n	800896c <UART_SetConfig+0x258>
 8008952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008956:	d815      	bhi.n	8008984 <UART_SetConfig+0x270>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <UART_SetConfig+0x250>
 800895c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008960:	d008      	beq.n	8008974 <UART_SetConfig+0x260>
 8008962:	e00f      	b.n	8008984 <UART_SetConfig+0x270>
 8008964:	2300      	movs	r3, #0
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896a:	e052      	b.n	8008a12 <UART_SetConfig+0x2fe>
 800896c:	2302      	movs	r3, #2
 800896e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008972:	e04e      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897a:	e04a      	b.n	8008a12 <UART_SetConfig+0x2fe>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008982:	e046      	b.n	8008a12 <UART_SetConfig+0x2fe>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898a:	e042      	b.n	8008a12 <UART_SetConfig+0x2fe>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <UART_SetConfig+0x2dc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d13a      	bne.n	8008a0c <UART_SetConfig+0x2f8>
 8008996:	4b18      	ldr	r3, [pc, #96]	; (80089f8 <UART_SetConfig+0x2e4>)
 8008998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089a4:	d01a      	beq.n	80089dc <UART_SetConfig+0x2c8>
 80089a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089aa:	d81b      	bhi.n	80089e4 <UART_SetConfig+0x2d0>
 80089ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b0:	d00c      	beq.n	80089cc <UART_SetConfig+0x2b8>
 80089b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b6:	d815      	bhi.n	80089e4 <UART_SetConfig+0x2d0>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <UART_SetConfig+0x2b0>
 80089bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c0:	d008      	beq.n	80089d4 <UART_SetConfig+0x2c0>
 80089c2:	e00f      	b.n	80089e4 <UART_SetConfig+0x2d0>
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ca:	e022      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80089cc:	2302      	movs	r3, #2
 80089ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d2:	e01e      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089da:	e01a      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e2:	e016      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ea:	e012      	b.n	8008a12 <UART_SetConfig+0x2fe>
 80089ec:	cfff69f3 	.word	0xcfff69f3
 80089f0:	40008000 	.word	0x40008000
 80089f4:	40013800 	.word	0x40013800
 80089f8:	40021000 	.word	0x40021000
 80089fc:	40004400 	.word	0x40004400
 8008a00:	40004800 	.word	0x40004800
 8008a04:	40004c00 	.word	0x40004c00
 8008a08:	40005000 	.word	0x40005000
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4aae      	ldr	r2, [pc, #696]	; (8008cd0 <UART_SetConfig+0x5bc>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	f040 8097 	bne.w	8008b4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	d823      	bhi.n	8008a6e <UART_SetConfig+0x35a>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x318>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a6f 	.word	0x08008a6f
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a6f 	.word	0x08008a6f
 8008a3c:	08008a5f 	.word	0x08008a5f
 8008a40:	08008a6f 	.word	0x08008a6f
 8008a44:	08008a6f 	.word	0x08008a6f
 8008a48:	08008a6f 	.word	0x08008a6f
 8008a4c:	08008a67 	.word	0x08008a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a50:	f7fd fec4 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8008a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a56:	e010      	b.n	8008a7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a58:	4b9e      	ldr	r3, [pc, #632]	; (8008cd4 <UART_SetConfig+0x5c0>)
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a5c:	e00d      	b.n	8008a7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5e:	f7fd fe4f 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8008a62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a64:	e009      	b.n	8008a7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a6c:	e005      	b.n	8008a7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8130 	beq.w	8008ce2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	4a94      	ldr	r2, [pc, #592]	; (8008cd8 <UART_SetConfig+0x5c4>)
 8008a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	4413      	add	r3, r2
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d305      	bcc.n	8008ab2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d903      	bls.n	8008aba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ab8:	e113      	b.n	8008ce2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	2200      	movs	r2, #0
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	60fa      	str	r2, [r7, #12]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	4a84      	ldr	r2, [pc, #528]	; (8008cd8 <UART_SetConfig+0x5c4>)
 8008ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2200      	movs	r2, #0
 8008ad0:	603b      	str	r3, [r7, #0]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008adc:	f7f7 fb9c 	bl	8000218 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	020b      	lsls	r3, r1, #8
 8008af2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008af6:	0202      	lsls	r2, r0, #8
 8008af8:	6979      	ldr	r1, [r7, #20]
 8008afa:	6849      	ldr	r1, [r1, #4]
 8008afc:	0849      	lsrs	r1, r1, #1
 8008afe:	2000      	movs	r0, #0
 8008b00:	460c      	mov	r4, r1
 8008b02:	4605      	mov	r5, r0
 8008b04:	eb12 0804 	adds.w	r8, r2, r4
 8008b08:	eb43 0905 	adc.w	r9, r3, r5
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	469a      	mov	sl, r3
 8008b14:	4693      	mov	fp, r2
 8008b16:	4652      	mov	r2, sl
 8008b18:	465b      	mov	r3, fp
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	f7f7 fb7b 	bl	8000218 <__aeabi_uldivmod>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4613      	mov	r3, r2
 8008b28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b30:	d308      	bcc.n	8008b44 <UART_SetConfig+0x430>
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b38:	d204      	bcs.n	8008b44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6a3a      	ldr	r2, [r7, #32]
 8008b40:	60da      	str	r2, [r3, #12]
 8008b42:	e0ce      	b.n	8008ce2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b4a:	e0ca      	b.n	8008ce2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b54:	d166      	bne.n	8008c24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d827      	bhi.n	8008bae <UART_SetConfig+0x49a>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0x450>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b89 	.word	0x08008b89
 8008b68:	08008b91 	.word	0x08008b91
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	08008baf 	.word	0x08008baf
 8008b74:	08008b9f 	.word	0x08008b9f
 8008b78:	08008baf 	.word	0x08008baf
 8008b7c:	08008baf 	.word	0x08008baf
 8008b80:	08008baf 	.word	0x08008baf
 8008b84:	08008ba7 	.word	0x08008ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b88:	f7fd fe28 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8008b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b8e:	e014      	b.n	8008bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b90:	f7fd fe3a 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8008b94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b96:	e010      	b.n	8008bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b98:	4b4e      	ldr	r3, [pc, #312]	; (8008cd4 <UART_SetConfig+0x5c0>)
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b9c:	e00d      	b.n	8008bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b9e:	f7fd fdaf 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8008ba2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ba4:	e009      	b.n	8008bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008baa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bac:	e005      	b.n	8008bba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 8090 	beq.w	8008ce2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	4a44      	ldr	r2, [pc, #272]	; (8008cd8 <UART_SetConfig+0x5c4>)
 8008bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd4:	005a      	lsls	r2, r3, #1
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	441a      	add	r2, r3
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	2b0f      	cmp	r3, #15
 8008bec:	d916      	bls.n	8008c1c <UART_SetConfig+0x508>
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf4:	d212      	bcs.n	8008c1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f023 030f 	bic.w	r3, r3, #15
 8008bfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	085b      	lsrs	r3, r3, #1
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	8bfb      	ldrh	r3, [r7, #30]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	8bfa      	ldrh	r2, [r7, #30]
 8008c18:	60da      	str	r2, [r3, #12]
 8008c1a:	e062      	b.n	8008ce2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c22:	e05e      	b.n	8008ce2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d828      	bhi.n	8008c7e <UART_SetConfig+0x56a>
 8008c2c:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <UART_SetConfig+0x520>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c61 	.word	0x08008c61
 8008c3c:	08008c69 	.word	0x08008c69
 8008c40:	08008c7f 	.word	0x08008c7f
 8008c44:	08008c6f 	.word	0x08008c6f
 8008c48:	08008c7f 	.word	0x08008c7f
 8008c4c:	08008c7f 	.word	0x08008c7f
 8008c50:	08008c7f 	.word	0x08008c7f
 8008c54:	08008c77 	.word	0x08008c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c58:	f7fd fdc0 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8008c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c5e:	e014      	b.n	8008c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c60:	f7fd fdd2 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8008c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c66:	e010      	b.n	8008c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c68:	4b1a      	ldr	r3, [pc, #104]	; (8008cd4 <UART_SetConfig+0x5c0>)
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c6c:	e00d      	b.n	8008c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c6e:	f7fd fd47 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8008c72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c74:	e009      	b.n	8008c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c7c:	e005      	b.n	8008c8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c88:	bf00      	nop
    }

    if (pclk != 0U)
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d028      	beq.n	8008ce2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	4a10      	ldr	r2, [pc, #64]	; (8008cd8 <UART_SetConfig+0x5c4>)
 8008c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	441a      	add	r2, r3
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	2b0f      	cmp	r3, #15
 8008cb8:	d910      	bls.n	8008cdc <UART_SetConfig+0x5c8>
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc0:	d20c      	bcs.n	8008cdc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60da      	str	r2, [r3, #12]
 8008ccc:	e009      	b.n	8008ce2 <UART_SetConfig+0x5ce>
 8008cce:	bf00      	nop
 8008cd0:	40008000 	.word	0x40008000
 8008cd4:	00f42400 	.word	0x00f42400
 8008cd8:	0800a2c4 	.word	0x0800a2c4
      }
      else
      {
        ret = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cfe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3730      	adds	r7, #48	; 0x30
 8008d06:	46bd      	mov	sp, r7
 8008d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7e:	f003 0308 	and.w	r3, r3, #8
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01a      	beq.n	8008e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e0a:	d10a      	bne.n	8008e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	605a      	str	r2, [r3, #4]
  }
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e60:	f7f9 fc46 	bl	80026f0 <HAL_GetTick>
 8008e64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	d10e      	bne.n	8008e92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f82f 	bl	8008ee6 <UART_WaitOnFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e025      	b.n	8008ede <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d10e      	bne.n	8008ebe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f819 	bl	8008ee6 <UART_WaitOnFlagUntilTimeout>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00f      	b.n	8008ede <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b09c      	sub	sp, #112	; 0x70
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	603b      	str	r3, [r7, #0]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef6:	e0a9      	b.n	800904c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efe:	f000 80a5 	beq.w	800904c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f02:	f7f9 fbf5 	bl	80026f0 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d302      	bcc.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d140      	bne.n	8008f9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e6      	bne.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	f023 0301 	bic.w	r3, r3, #1
 8008f60:	663b      	str	r3, [r7, #96]	; 0x60
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e5      	bne.n	8008f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e069      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d051      	beq.n	800904c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fb6:	d149      	bne.n	800904c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e6      	bne.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	613b      	str	r3, [r7, #16]
   return(result);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f023 0301 	bic.w	r3, r3, #1
 800900a:	66bb      	str	r3, [r7, #104]	; 0x68
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3308      	adds	r3, #8
 8009012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009014:	623a      	str	r2, [r7, #32]
 8009016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	69f9      	ldr	r1, [r7, #28]
 800901a:	6a3a      	ldr	r2, [r7, #32]
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	61bb      	str	r3, [r7, #24]
   return(result);
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e5      	bne.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2220      	movs	r2, #32
 8009034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2220      	movs	r2, #32
 800903c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e010      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69da      	ldr	r2, [r3, #28]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	4013      	ands	r3, r2
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	429a      	cmp	r2, r3
 800905a:	bf0c      	ite	eq
 800905c:	2301      	moveq	r3, #1
 800905e:	2300      	movne	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	461a      	mov	r2, r3
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	429a      	cmp	r2, r3
 8009068:	f43f af46 	beq.w	8008ef8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3770      	adds	r7, #112	; 0x70
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_UARTEx_DisableFifoMode+0x16>
 8009088:	2302      	movs	r3, #2
 800908a:	e027      	b.n	80090dc <HAL_UARTEx_DisableFifoMode+0x66>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2224      	movs	r2, #36	; 0x24
 8009098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0201 	bic.w	r2, r2, #1
 80090b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e02d      	b.n	800915c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f84f 	bl	80091e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009178:	2302      	movs	r3, #2
 800917a:	e02d      	b.n	80091d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2224      	movs	r2, #36	; 0x24
 8009188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f811 	bl	80091e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d108      	bne.n	8009202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009200:	e031      	b.n	8009266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009202:	2308      	movs	r3, #8
 8009204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009206:	2308      	movs	r3, #8
 8009208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	0e5b      	lsrs	r3, r3, #25
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	0f5b      	lsrs	r3, r3, #29
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	7b3a      	ldrb	r2, [r7, #12]
 800922e:	4911      	ldr	r1, [pc, #68]	; (8009274 <UARTEx_SetNbDataToProcess+0x94>)
 8009230:	5c8a      	ldrb	r2, [r1, r2]
 8009232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009236:	7b3a      	ldrb	r2, [r7, #12]
 8009238:	490f      	ldr	r1, [pc, #60]	; (8009278 <UARTEx_SetNbDataToProcess+0x98>)
 800923a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800923c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009240:	b29a      	uxth	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	7b7a      	ldrb	r2, [r7, #13]
 800924c:	4909      	ldr	r1, [pc, #36]	; (8009274 <UARTEx_SetNbDataToProcess+0x94>)
 800924e:	5c8a      	ldrb	r2, [r1, r2]
 8009250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009254:	7b7a      	ldrb	r2, [r7, #13]
 8009256:	4908      	ldr	r1, [pc, #32]	; (8009278 <UARTEx_SetNbDataToProcess+0x98>)
 8009258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800925a:	fb93 f3f2 	sdiv	r3, r3, r2
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	0800a2dc 	.word	0x0800a2dc
 8009278:	0800a2e4 	.word	0x0800a2e4

0800927c <__errno>:
 800927c:	4b01      	ldr	r3, [pc, #4]	; (8009284 <__errno+0x8>)
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	2000000c 	.word	0x2000000c

08009288 <__libc_init_array>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	4d0d      	ldr	r5, [pc, #52]	; (80092c0 <__libc_init_array+0x38>)
 800928c:	4c0d      	ldr	r4, [pc, #52]	; (80092c4 <__libc_init_array+0x3c>)
 800928e:	1b64      	subs	r4, r4, r5
 8009290:	10a4      	asrs	r4, r4, #2
 8009292:	2600      	movs	r6, #0
 8009294:	42a6      	cmp	r6, r4
 8009296:	d109      	bne.n	80092ac <__libc_init_array+0x24>
 8009298:	4d0b      	ldr	r5, [pc, #44]	; (80092c8 <__libc_init_array+0x40>)
 800929a:	4c0c      	ldr	r4, [pc, #48]	; (80092cc <__libc_init_array+0x44>)
 800929c:	f000 fffa 	bl	800a294 <_init>
 80092a0:	1b64      	subs	r4, r4, r5
 80092a2:	10a4      	asrs	r4, r4, #2
 80092a4:	2600      	movs	r6, #0
 80092a6:	42a6      	cmp	r6, r4
 80092a8:	d105      	bne.n	80092b6 <__libc_init_array+0x2e>
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b0:	4798      	blx	r3
 80092b2:	3601      	adds	r6, #1
 80092b4:	e7ee      	b.n	8009294 <__libc_init_array+0xc>
 80092b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ba:	4798      	blx	r3
 80092bc:	3601      	adds	r6, #1
 80092be:	e7f2      	b.n	80092a6 <__libc_init_array+0x1e>
 80092c0:	0800a704 	.word	0x0800a704
 80092c4:	0800a704 	.word	0x0800a704
 80092c8:	0800a704 	.word	0x0800a704
 80092cc:	0800a708 	.word	0x0800a708

080092d0 <memset>:
 80092d0:	4402      	add	r2, r0
 80092d2:	4603      	mov	r3, r0
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d100      	bne.n	80092da <memset+0xa>
 80092d8:	4770      	bx	lr
 80092da:	f803 1b01 	strb.w	r1, [r3], #1
 80092de:	e7f9      	b.n	80092d4 <memset+0x4>

080092e0 <cosf>:
 80092e0:	ee10 3a10 	vmov	r3, s0
 80092e4:	b507      	push	{r0, r1, r2, lr}
 80092e6:	4a1e      	ldr	r2, [pc, #120]	; (8009360 <cosf+0x80>)
 80092e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092ec:	4293      	cmp	r3, r2
 80092ee:	dc06      	bgt.n	80092fe <cosf+0x1e>
 80092f0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009364 <cosf+0x84>
 80092f4:	b003      	add	sp, #12
 80092f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80092fa:	f000 bb1d 	b.w	8009938 <__kernel_cosf>
 80092fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009302:	db04      	blt.n	800930e <cosf+0x2e>
 8009304:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009308:	b003      	add	sp, #12
 800930a:	f85d fb04 	ldr.w	pc, [sp], #4
 800930e:	4668      	mov	r0, sp
 8009310:	f000 f9d2 	bl	80096b8 <__ieee754_rem_pio2f>
 8009314:	f000 0003 	and.w	r0, r0, #3
 8009318:	2801      	cmp	r0, #1
 800931a:	d009      	beq.n	8009330 <cosf+0x50>
 800931c:	2802      	cmp	r0, #2
 800931e:	d010      	beq.n	8009342 <cosf+0x62>
 8009320:	b9b0      	cbnz	r0, 8009350 <cosf+0x70>
 8009322:	eddd 0a01 	vldr	s1, [sp, #4]
 8009326:	ed9d 0a00 	vldr	s0, [sp]
 800932a:	f000 fb05 	bl	8009938 <__kernel_cosf>
 800932e:	e7eb      	b.n	8009308 <cosf+0x28>
 8009330:	eddd 0a01 	vldr	s1, [sp, #4]
 8009334:	ed9d 0a00 	vldr	s0, [sp]
 8009338:	f000 fdd4 	bl	8009ee4 <__kernel_sinf>
 800933c:	eeb1 0a40 	vneg.f32	s0, s0
 8009340:	e7e2      	b.n	8009308 <cosf+0x28>
 8009342:	eddd 0a01 	vldr	s1, [sp, #4]
 8009346:	ed9d 0a00 	vldr	s0, [sp]
 800934a:	f000 faf5 	bl	8009938 <__kernel_cosf>
 800934e:	e7f5      	b.n	800933c <cosf+0x5c>
 8009350:	eddd 0a01 	vldr	s1, [sp, #4]
 8009354:	ed9d 0a00 	vldr	s0, [sp]
 8009358:	2001      	movs	r0, #1
 800935a:	f000 fdc3 	bl	8009ee4 <__kernel_sinf>
 800935e:	e7d3      	b.n	8009308 <cosf+0x28>
 8009360:	3f490fd8 	.word	0x3f490fd8
 8009364:	00000000 	.word	0x00000000

08009368 <sinf>:
 8009368:	ee10 3a10 	vmov	r3, s0
 800936c:	b507      	push	{r0, r1, r2, lr}
 800936e:	4a1f      	ldr	r2, [pc, #124]	; (80093ec <sinf+0x84>)
 8009370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009374:	4293      	cmp	r3, r2
 8009376:	dc07      	bgt.n	8009388 <sinf+0x20>
 8009378:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80093f0 <sinf+0x88>
 800937c:	2000      	movs	r0, #0
 800937e:	b003      	add	sp, #12
 8009380:	f85d eb04 	ldr.w	lr, [sp], #4
 8009384:	f000 bdae 	b.w	8009ee4 <__kernel_sinf>
 8009388:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800938c:	db04      	blt.n	8009398 <sinf+0x30>
 800938e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009392:	b003      	add	sp, #12
 8009394:	f85d fb04 	ldr.w	pc, [sp], #4
 8009398:	4668      	mov	r0, sp
 800939a:	f000 f98d 	bl	80096b8 <__ieee754_rem_pio2f>
 800939e:	f000 0003 	and.w	r0, r0, #3
 80093a2:	2801      	cmp	r0, #1
 80093a4:	d00a      	beq.n	80093bc <sinf+0x54>
 80093a6:	2802      	cmp	r0, #2
 80093a8:	d00f      	beq.n	80093ca <sinf+0x62>
 80093aa:	b9c0      	cbnz	r0, 80093de <sinf+0x76>
 80093ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80093b0:	ed9d 0a00 	vldr	s0, [sp]
 80093b4:	2001      	movs	r0, #1
 80093b6:	f000 fd95 	bl	8009ee4 <__kernel_sinf>
 80093ba:	e7ea      	b.n	8009392 <sinf+0x2a>
 80093bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80093c0:	ed9d 0a00 	vldr	s0, [sp]
 80093c4:	f000 fab8 	bl	8009938 <__kernel_cosf>
 80093c8:	e7e3      	b.n	8009392 <sinf+0x2a>
 80093ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80093ce:	ed9d 0a00 	vldr	s0, [sp]
 80093d2:	2001      	movs	r0, #1
 80093d4:	f000 fd86 	bl	8009ee4 <__kernel_sinf>
 80093d8:	eeb1 0a40 	vneg.f32	s0, s0
 80093dc:	e7d9      	b.n	8009392 <sinf+0x2a>
 80093de:	eddd 0a01 	vldr	s1, [sp, #4]
 80093e2:	ed9d 0a00 	vldr	s0, [sp]
 80093e6:	f000 faa7 	bl	8009938 <__kernel_cosf>
 80093ea:	e7f5      	b.n	80093d8 <sinf+0x70>
 80093ec:	3f490fd8 	.word	0x3f490fd8
 80093f0:	00000000 	.word	0x00000000

080093f4 <atan2f>:
 80093f4:	f000 b83e 	b.w	8009474 <__ieee754_atan2f>

080093f8 <fmodf>:
 80093f8:	b508      	push	{r3, lr}
 80093fa:	ed2d 8b02 	vpush	{d8}
 80093fe:	eef0 8a40 	vmov.f32	s17, s0
 8009402:	eeb0 8a60 	vmov.f32	s16, s1
 8009406:	f000 f8d5 	bl	80095b4 <__ieee754_fmodf>
 800940a:	eef4 8a48 	vcmp.f32	s17, s16
 800940e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009412:	d60c      	bvs.n	800942e <fmodf+0x36>
 8009414:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009434 <fmodf+0x3c>
 8009418:	eeb4 8a68 	vcmp.f32	s16, s17
 800941c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009420:	d105      	bne.n	800942e <fmodf+0x36>
 8009422:	f7ff ff2b 	bl	800927c <__errno>
 8009426:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800942a:	2321      	movs	r3, #33	; 0x21
 800942c:	6003      	str	r3, [r0, #0]
 800942e:	ecbd 8b02 	vpop	{d8}
 8009432:	bd08      	pop	{r3, pc}
 8009434:	00000000 	.word	0x00000000

08009438 <sqrtf>:
 8009438:	b508      	push	{r3, lr}
 800943a:	ed2d 8b02 	vpush	{d8}
 800943e:	eeb0 8a40 	vmov.f32	s16, s0
 8009442:	f000 fa75 	bl	8009930 <__ieee754_sqrtf>
 8009446:	eeb4 8a48 	vcmp.f32	s16, s16
 800944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944e:	d60c      	bvs.n	800946a <sqrtf+0x32>
 8009450:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009470 <sqrtf+0x38>
 8009454:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945c:	d505      	bpl.n	800946a <sqrtf+0x32>
 800945e:	f7ff ff0d 	bl	800927c <__errno>
 8009462:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009466:	2321      	movs	r3, #33	; 0x21
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	ecbd 8b02 	vpop	{d8}
 800946e:	bd08      	pop	{r3, pc}
 8009470:	00000000 	.word	0x00000000

08009474 <__ieee754_atan2f>:
 8009474:	ee10 2a90 	vmov	r2, s1
 8009478:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800947c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009480:	b510      	push	{r4, lr}
 8009482:	eef0 7a40 	vmov.f32	s15, s0
 8009486:	dc06      	bgt.n	8009496 <__ieee754_atan2f+0x22>
 8009488:	ee10 0a10 	vmov	r0, s0
 800948c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009490:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009494:	dd04      	ble.n	80094a0 <__ieee754_atan2f+0x2c>
 8009496:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800949a:	eeb0 0a67 	vmov.f32	s0, s15
 800949e:	bd10      	pop	{r4, pc}
 80094a0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80094a4:	d103      	bne.n	80094ae <__ieee754_atan2f+0x3a>
 80094a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094aa:	f000 bd63 	b.w	8009f74 <atanf>
 80094ae:	1794      	asrs	r4, r2, #30
 80094b0:	f004 0402 	and.w	r4, r4, #2
 80094b4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80094b8:	b943      	cbnz	r3, 80094cc <__ieee754_atan2f+0x58>
 80094ba:	2c02      	cmp	r4, #2
 80094bc:	d05e      	beq.n	800957c <__ieee754_atan2f+0x108>
 80094be:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009590 <__ieee754_atan2f+0x11c>
 80094c2:	2c03      	cmp	r4, #3
 80094c4:	bf08      	it	eq
 80094c6:	eef0 7a47 	vmoveq.f32	s15, s14
 80094ca:	e7e6      	b.n	800949a <__ieee754_atan2f+0x26>
 80094cc:	b941      	cbnz	r1, 80094e0 <__ieee754_atan2f+0x6c>
 80094ce:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009594 <__ieee754_atan2f+0x120>
 80094d2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009598 <__ieee754_atan2f+0x124>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	bfb8      	it	lt
 80094da:	eef0 7a40 	vmovlt.f32	s15, s0
 80094de:	e7dc      	b.n	800949a <__ieee754_atan2f+0x26>
 80094e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80094e4:	d110      	bne.n	8009508 <__ieee754_atan2f+0x94>
 80094e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80094ee:	d107      	bne.n	8009500 <__ieee754_atan2f+0x8c>
 80094f0:	2c02      	cmp	r4, #2
 80094f2:	d846      	bhi.n	8009582 <__ieee754_atan2f+0x10e>
 80094f4:	4b29      	ldr	r3, [pc, #164]	; (800959c <__ieee754_atan2f+0x128>)
 80094f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094fa:	edd4 7a00 	vldr	s15, [r4]
 80094fe:	e7cc      	b.n	800949a <__ieee754_atan2f+0x26>
 8009500:	2c02      	cmp	r4, #2
 8009502:	d841      	bhi.n	8009588 <__ieee754_atan2f+0x114>
 8009504:	4b26      	ldr	r3, [pc, #152]	; (80095a0 <__ieee754_atan2f+0x12c>)
 8009506:	e7f6      	b.n	80094f6 <__ieee754_atan2f+0x82>
 8009508:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800950c:	d0df      	beq.n	80094ce <__ieee754_atan2f+0x5a>
 800950e:	1a5b      	subs	r3, r3, r1
 8009510:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009514:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009518:	da1a      	bge.n	8009550 <__ieee754_atan2f+0xdc>
 800951a:	2a00      	cmp	r2, #0
 800951c:	da01      	bge.n	8009522 <__ieee754_atan2f+0xae>
 800951e:	313c      	adds	r1, #60	; 0x3c
 8009520:	db19      	blt.n	8009556 <__ieee754_atan2f+0xe2>
 8009522:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009526:	f000 fdf9 	bl	800a11c <fabsf>
 800952a:	f000 fd23 	bl	8009f74 <atanf>
 800952e:	eef0 7a40 	vmov.f32	s15, s0
 8009532:	2c01      	cmp	r4, #1
 8009534:	d012      	beq.n	800955c <__ieee754_atan2f+0xe8>
 8009536:	2c02      	cmp	r4, #2
 8009538:	d017      	beq.n	800956a <__ieee754_atan2f+0xf6>
 800953a:	2c00      	cmp	r4, #0
 800953c:	d0ad      	beq.n	800949a <__ieee754_atan2f+0x26>
 800953e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80095a4 <__ieee754_atan2f+0x130>
 8009542:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009546:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80095a8 <__ieee754_atan2f+0x134>
 800954a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800954e:	e7a4      	b.n	800949a <__ieee754_atan2f+0x26>
 8009550:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009594 <__ieee754_atan2f+0x120>
 8009554:	e7ed      	b.n	8009532 <__ieee754_atan2f+0xbe>
 8009556:	eddf 7a15 	vldr	s15, [pc, #84]	; 80095ac <__ieee754_atan2f+0x138>
 800955a:	e7ea      	b.n	8009532 <__ieee754_atan2f+0xbe>
 800955c:	ee17 3a90 	vmov	r3, s15
 8009560:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	e797      	b.n	800949a <__ieee754_atan2f+0x26>
 800956a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80095a4 <__ieee754_atan2f+0x130>
 800956e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009572:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80095a8 <__ieee754_atan2f+0x134>
 8009576:	ee70 7a67 	vsub.f32	s15, s0, s15
 800957a:	e78e      	b.n	800949a <__ieee754_atan2f+0x26>
 800957c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80095a8 <__ieee754_atan2f+0x134>
 8009580:	e78b      	b.n	800949a <__ieee754_atan2f+0x26>
 8009582:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80095b0 <__ieee754_atan2f+0x13c>
 8009586:	e788      	b.n	800949a <__ieee754_atan2f+0x26>
 8009588:	eddf 7a08 	vldr	s15, [pc, #32]	; 80095ac <__ieee754_atan2f+0x138>
 800958c:	e785      	b.n	800949a <__ieee754_atan2f+0x26>
 800958e:	bf00      	nop
 8009590:	c0490fdb 	.word	0xc0490fdb
 8009594:	3fc90fdb 	.word	0x3fc90fdb
 8009598:	bfc90fdb 	.word	0xbfc90fdb
 800959c:	0800a2ec 	.word	0x0800a2ec
 80095a0:	0800a2f8 	.word	0x0800a2f8
 80095a4:	33bbbd2e 	.word	0x33bbbd2e
 80095a8:	40490fdb 	.word	0x40490fdb
 80095ac:	00000000 	.word	0x00000000
 80095b0:	3f490fdb 	.word	0x3f490fdb

080095b4 <__ieee754_fmodf>:
 80095b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b6:	ee10 5a90 	vmov	r5, s1
 80095ba:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80095be:	d009      	beq.n	80095d4 <__ieee754_fmodf+0x20>
 80095c0:	ee10 2a10 	vmov	r2, s0
 80095c4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80095c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80095cc:	da02      	bge.n	80095d4 <__ieee754_fmodf+0x20>
 80095ce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80095d2:	dd04      	ble.n	80095de <__ieee754_fmodf+0x2a>
 80095d4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80095d8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80095dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095de:	42a3      	cmp	r3, r4
 80095e0:	dbfc      	blt.n	80095dc <__ieee754_fmodf+0x28>
 80095e2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80095e6:	d105      	bne.n	80095f4 <__ieee754_fmodf+0x40>
 80095e8:	4b32      	ldr	r3, [pc, #200]	; (80096b4 <__ieee754_fmodf+0x100>)
 80095ea:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80095ee:	ed93 0a00 	vldr	s0, [r3]
 80095f2:	e7f3      	b.n	80095dc <__ieee754_fmodf+0x28>
 80095f4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80095f8:	d13f      	bne.n	800967a <__ieee754_fmodf+0xc6>
 80095fa:	0219      	lsls	r1, r3, #8
 80095fc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009600:	2900      	cmp	r1, #0
 8009602:	dc37      	bgt.n	8009674 <__ieee754_fmodf+0xc0>
 8009604:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8009608:	d13d      	bne.n	8009686 <__ieee754_fmodf+0xd2>
 800960a:	0227      	lsls	r7, r4, #8
 800960c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8009610:	2f00      	cmp	r7, #0
 8009612:	da35      	bge.n	8009680 <__ieee754_fmodf+0xcc>
 8009614:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009618:	bfbb      	ittet	lt
 800961a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800961e:	1a12      	sublt	r2, r2, r0
 8009620:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8009624:	4093      	lsllt	r3, r2
 8009626:	bfa8      	it	ge
 8009628:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800962c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009630:	bfb5      	itete	lt
 8009632:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8009636:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800963a:	1a52      	sublt	r2, r2, r1
 800963c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8009640:	bfb8      	it	lt
 8009642:	4094      	lsllt	r4, r2
 8009644:	1a40      	subs	r0, r0, r1
 8009646:	1b1a      	subs	r2, r3, r4
 8009648:	bb00      	cbnz	r0, 800968c <__ieee754_fmodf+0xd8>
 800964a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800964e:	bf38      	it	cc
 8009650:	4613      	movcc	r3, r2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0c8      	beq.n	80095e8 <__ieee754_fmodf+0x34>
 8009656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800965a:	db1f      	blt.n	800969c <__ieee754_fmodf+0xe8>
 800965c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009660:	db1f      	blt.n	80096a2 <__ieee754_fmodf+0xee>
 8009662:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009666:	317f      	adds	r1, #127	; 0x7f
 8009668:	4333      	orrs	r3, r6
 800966a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800966e:	ee00 3a10 	vmov	s0, r3
 8009672:	e7b3      	b.n	80095dc <__ieee754_fmodf+0x28>
 8009674:	3801      	subs	r0, #1
 8009676:	0049      	lsls	r1, r1, #1
 8009678:	e7c2      	b.n	8009600 <__ieee754_fmodf+0x4c>
 800967a:	15d8      	asrs	r0, r3, #23
 800967c:	387f      	subs	r0, #127	; 0x7f
 800967e:	e7c1      	b.n	8009604 <__ieee754_fmodf+0x50>
 8009680:	3901      	subs	r1, #1
 8009682:	007f      	lsls	r7, r7, #1
 8009684:	e7c4      	b.n	8009610 <__ieee754_fmodf+0x5c>
 8009686:	15e1      	asrs	r1, r4, #23
 8009688:	397f      	subs	r1, #127	; 0x7f
 800968a:	e7c3      	b.n	8009614 <__ieee754_fmodf+0x60>
 800968c:	2a00      	cmp	r2, #0
 800968e:	da02      	bge.n	8009696 <__ieee754_fmodf+0xe2>
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	3801      	subs	r0, #1
 8009694:	e7d7      	b.n	8009646 <__ieee754_fmodf+0x92>
 8009696:	d0a7      	beq.n	80095e8 <__ieee754_fmodf+0x34>
 8009698:	0053      	lsls	r3, r2, #1
 800969a:	e7fa      	b.n	8009692 <__ieee754_fmodf+0xde>
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	3901      	subs	r1, #1
 80096a0:	e7d9      	b.n	8009656 <__ieee754_fmodf+0xa2>
 80096a2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80096a6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80096aa:	3182      	adds	r1, #130	; 0x82
 80096ac:	410b      	asrs	r3, r1
 80096ae:	4333      	orrs	r3, r6
 80096b0:	e7dd      	b.n	800966e <__ieee754_fmodf+0xba>
 80096b2:	bf00      	nop
 80096b4:	0800a304 	.word	0x0800a304

080096b8 <__ieee754_rem_pio2f>:
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ba:	ee10 6a10 	vmov	r6, s0
 80096be:	4b8e      	ldr	r3, [pc, #568]	; (80098f8 <__ieee754_rem_pio2f+0x240>)
 80096c0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80096c4:	429d      	cmp	r5, r3
 80096c6:	b087      	sub	sp, #28
 80096c8:	eef0 7a40 	vmov.f32	s15, s0
 80096cc:	4604      	mov	r4, r0
 80096ce:	dc05      	bgt.n	80096dc <__ieee754_rem_pio2f+0x24>
 80096d0:	2300      	movs	r3, #0
 80096d2:	ed80 0a00 	vstr	s0, [r0]
 80096d6:	6043      	str	r3, [r0, #4]
 80096d8:	2000      	movs	r0, #0
 80096da:	e01a      	b.n	8009712 <__ieee754_rem_pio2f+0x5a>
 80096dc:	4b87      	ldr	r3, [pc, #540]	; (80098fc <__ieee754_rem_pio2f+0x244>)
 80096de:	429d      	cmp	r5, r3
 80096e0:	dc46      	bgt.n	8009770 <__ieee754_rem_pio2f+0xb8>
 80096e2:	2e00      	cmp	r6, #0
 80096e4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009900 <__ieee754_rem_pio2f+0x248>
 80096e8:	4b86      	ldr	r3, [pc, #536]	; (8009904 <__ieee754_rem_pio2f+0x24c>)
 80096ea:	f025 050f 	bic.w	r5, r5, #15
 80096ee:	dd1f      	ble.n	8009730 <__ieee754_rem_pio2f+0x78>
 80096f0:	429d      	cmp	r5, r3
 80096f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80096f6:	d00e      	beq.n	8009716 <__ieee754_rem_pio2f+0x5e>
 80096f8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009908 <__ieee754_rem_pio2f+0x250>
 80096fc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009700:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009704:	ed80 0a00 	vstr	s0, [r0]
 8009708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800970c:	2001      	movs	r0, #1
 800970e:	edc4 7a01 	vstr	s15, [r4, #4]
 8009712:	b007      	add	sp, #28
 8009714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009716:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800990c <__ieee754_rem_pio2f+0x254>
 800971a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009910 <__ieee754_rem_pio2f+0x258>
 800971e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009722:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009726:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800972a:	edc0 6a00 	vstr	s13, [r0]
 800972e:	e7eb      	b.n	8009708 <__ieee754_rem_pio2f+0x50>
 8009730:	429d      	cmp	r5, r3
 8009732:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009736:	d00e      	beq.n	8009756 <__ieee754_rem_pio2f+0x9e>
 8009738:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009908 <__ieee754_rem_pio2f+0x250>
 800973c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009740:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009744:	ed80 0a00 	vstr	s0, [r0]
 8009748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800974c:	f04f 30ff 	mov.w	r0, #4294967295
 8009750:	edc4 7a01 	vstr	s15, [r4, #4]
 8009754:	e7dd      	b.n	8009712 <__ieee754_rem_pio2f+0x5a>
 8009756:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800990c <__ieee754_rem_pio2f+0x254>
 800975a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009910 <__ieee754_rem_pio2f+0x258>
 800975e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009762:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009766:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800976a:	edc0 6a00 	vstr	s13, [r0]
 800976e:	e7eb      	b.n	8009748 <__ieee754_rem_pio2f+0x90>
 8009770:	4b68      	ldr	r3, [pc, #416]	; (8009914 <__ieee754_rem_pio2f+0x25c>)
 8009772:	429d      	cmp	r5, r3
 8009774:	dc72      	bgt.n	800985c <__ieee754_rem_pio2f+0x1a4>
 8009776:	f000 fcd1 	bl	800a11c <fabsf>
 800977a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009918 <__ieee754_rem_pio2f+0x260>
 800977e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009782:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800978a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800978e:	ee17 0a90 	vmov	r0, s15
 8009792:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009900 <__ieee754_rem_pio2f+0x248>
 8009796:	eea7 0a67 	vfms.f32	s0, s14, s15
 800979a:	281f      	cmp	r0, #31
 800979c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009908 <__ieee754_rem_pio2f+0x250>
 80097a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a4:	eeb1 6a47 	vneg.f32	s12, s14
 80097a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80097ac:	ee16 2a90 	vmov	r2, s13
 80097b0:	dc1c      	bgt.n	80097ec <__ieee754_rem_pio2f+0x134>
 80097b2:	495a      	ldr	r1, [pc, #360]	; (800991c <__ieee754_rem_pio2f+0x264>)
 80097b4:	1e47      	subs	r7, r0, #1
 80097b6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80097ba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80097be:	428b      	cmp	r3, r1
 80097c0:	d014      	beq.n	80097ec <__ieee754_rem_pio2f+0x134>
 80097c2:	6022      	str	r2, [r4, #0]
 80097c4:	ed94 7a00 	vldr	s14, [r4]
 80097c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80097cc:	2e00      	cmp	r6, #0
 80097ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80097d2:	ed84 0a01 	vstr	s0, [r4, #4]
 80097d6:	da9c      	bge.n	8009712 <__ieee754_rem_pio2f+0x5a>
 80097d8:	eeb1 7a47 	vneg.f32	s14, s14
 80097dc:	eeb1 0a40 	vneg.f32	s0, s0
 80097e0:	ed84 7a00 	vstr	s14, [r4]
 80097e4:	ed84 0a01 	vstr	s0, [r4, #4]
 80097e8:	4240      	negs	r0, r0
 80097ea:	e792      	b.n	8009712 <__ieee754_rem_pio2f+0x5a>
 80097ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80097f0:	15eb      	asrs	r3, r5, #23
 80097f2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80097f6:	2d08      	cmp	r5, #8
 80097f8:	dde3      	ble.n	80097c2 <__ieee754_rem_pio2f+0x10a>
 80097fa:	eddf 7a44 	vldr	s15, [pc, #272]	; 800990c <__ieee754_rem_pio2f+0x254>
 80097fe:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009910 <__ieee754_rem_pio2f+0x258>
 8009802:	eef0 6a40 	vmov.f32	s13, s0
 8009806:	eee6 6a27 	vfma.f32	s13, s12, s15
 800980a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800980e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8009812:	eef0 7a40 	vmov.f32	s15, s0
 8009816:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800981a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800981e:	ee15 2a90 	vmov	r2, s11
 8009822:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009826:	1a5b      	subs	r3, r3, r1
 8009828:	2b19      	cmp	r3, #25
 800982a:	dc04      	bgt.n	8009836 <__ieee754_rem_pio2f+0x17e>
 800982c:	edc4 5a00 	vstr	s11, [r4]
 8009830:	eeb0 0a66 	vmov.f32	s0, s13
 8009834:	e7c6      	b.n	80097c4 <__ieee754_rem_pio2f+0x10c>
 8009836:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009920 <__ieee754_rem_pio2f+0x268>
 800983a:	eeb0 0a66 	vmov.f32	s0, s13
 800983e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009842:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009846:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009924 <__ieee754_rem_pio2f+0x26c>
 800984a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800984e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009852:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009856:	ed84 7a00 	vstr	s14, [r4]
 800985a:	e7b3      	b.n	80097c4 <__ieee754_rem_pio2f+0x10c>
 800985c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009860:	db06      	blt.n	8009870 <__ieee754_rem_pio2f+0x1b8>
 8009862:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009866:	edc0 7a01 	vstr	s15, [r0, #4]
 800986a:	edc0 7a00 	vstr	s15, [r0]
 800986e:	e733      	b.n	80096d8 <__ieee754_rem_pio2f+0x20>
 8009870:	15ea      	asrs	r2, r5, #23
 8009872:	3a86      	subs	r2, #134	; 0x86
 8009874:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009878:	ee07 3a90 	vmov	s15, r3
 800987c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009880:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009928 <__ieee754_rem_pio2f+0x270>
 8009884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800988c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009890:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009894:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009898:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800989c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098a0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80098a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80098a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80098ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b0:	edcd 7a05 	vstr	s15, [sp, #20]
 80098b4:	d11e      	bne.n	80098f4 <__ieee754_rem_pio2f+0x23c>
 80098b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80098ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098be:	bf14      	ite	ne
 80098c0:	2302      	movne	r3, #2
 80098c2:	2301      	moveq	r3, #1
 80098c4:	4919      	ldr	r1, [pc, #100]	; (800992c <__ieee754_rem_pio2f+0x274>)
 80098c6:	9101      	str	r1, [sp, #4]
 80098c8:	2102      	movs	r1, #2
 80098ca:	9100      	str	r1, [sp, #0]
 80098cc:	a803      	add	r0, sp, #12
 80098ce:	4621      	mov	r1, r4
 80098d0:	f000 f892 	bl	80099f8 <__kernel_rem_pio2f>
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	f6bf af1c 	bge.w	8009712 <__ieee754_rem_pio2f+0x5a>
 80098da:	edd4 7a00 	vldr	s15, [r4]
 80098de:	eef1 7a67 	vneg.f32	s15, s15
 80098e2:	edc4 7a00 	vstr	s15, [r4]
 80098e6:	edd4 7a01 	vldr	s15, [r4, #4]
 80098ea:	eef1 7a67 	vneg.f32	s15, s15
 80098ee:	edc4 7a01 	vstr	s15, [r4, #4]
 80098f2:	e779      	b.n	80097e8 <__ieee754_rem_pio2f+0x130>
 80098f4:	2303      	movs	r3, #3
 80098f6:	e7e5      	b.n	80098c4 <__ieee754_rem_pio2f+0x20c>
 80098f8:	3f490fd8 	.word	0x3f490fd8
 80098fc:	4016cbe3 	.word	0x4016cbe3
 8009900:	3fc90f80 	.word	0x3fc90f80
 8009904:	3fc90fd0 	.word	0x3fc90fd0
 8009908:	37354443 	.word	0x37354443
 800990c:	37354400 	.word	0x37354400
 8009910:	2e85a308 	.word	0x2e85a308
 8009914:	43490f80 	.word	0x43490f80
 8009918:	3f22f984 	.word	0x3f22f984
 800991c:	0800a30c 	.word	0x0800a30c
 8009920:	2e85a300 	.word	0x2e85a300
 8009924:	248d3132 	.word	0x248d3132
 8009928:	43800000 	.word	0x43800000
 800992c:	0800a38c 	.word	0x0800a38c

08009930 <__ieee754_sqrtf>:
 8009930:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009934:	4770      	bx	lr
	...

08009938 <__kernel_cosf>:
 8009938:	ee10 3a10 	vmov	r3, s0
 800993c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009940:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009944:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009948:	da05      	bge.n	8009956 <__kernel_cosf+0x1e>
 800994a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800994e:	ee17 2a90 	vmov	r2, s15
 8009952:	2a00      	cmp	r2, #0
 8009954:	d03d      	beq.n	80099d2 <__kernel_cosf+0x9a>
 8009956:	ee60 5a00 	vmul.f32	s11, s0, s0
 800995a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80099d8 <__kernel_cosf+0xa0>
 800995e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80099dc <__kernel_cosf+0xa4>
 8009962:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80099e0 <__kernel_cosf+0xa8>
 8009966:	4a1f      	ldr	r2, [pc, #124]	; (80099e4 <__kernel_cosf+0xac>)
 8009968:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800996c:	4293      	cmp	r3, r2
 800996e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80099e8 <__kernel_cosf+0xb0>
 8009972:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009976:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80099ec <__kernel_cosf+0xb4>
 800997a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800997e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80099f0 <__kernel_cosf+0xb8>
 8009982:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009986:	eeb0 7a66 	vmov.f32	s14, s13
 800998a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800998e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009992:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8009996:	ee67 6a25 	vmul.f32	s13, s14, s11
 800999a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800999e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80099a2:	dc04      	bgt.n	80099ae <__kernel_cosf+0x76>
 80099a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80099a8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80099ac:	4770      	bx	lr
 80099ae:	4a11      	ldr	r2, [pc, #68]	; (80099f4 <__kernel_cosf+0xbc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	bfda      	itte	le
 80099b4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80099b8:	ee06 3a90 	vmovle	s13, r3
 80099bc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80099c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099c4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80099c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80099d0:	4770      	bx	lr
 80099d2:	eeb0 0a46 	vmov.f32	s0, s12
 80099d6:	4770      	bx	lr
 80099d8:	ad47d74e 	.word	0xad47d74e
 80099dc:	310f74f6 	.word	0x310f74f6
 80099e0:	3d2aaaab 	.word	0x3d2aaaab
 80099e4:	3e999999 	.word	0x3e999999
 80099e8:	b493f27c 	.word	0xb493f27c
 80099ec:	37d00d01 	.word	0x37d00d01
 80099f0:	bab60b61 	.word	0xbab60b61
 80099f4:	3f480000 	.word	0x3f480000

080099f8 <__kernel_rem_pio2f>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	ed2d 8b04 	vpush	{d8-d9}
 8009a00:	b0d9      	sub	sp, #356	; 0x164
 8009a02:	4688      	mov	r8, r1
 8009a04:	9002      	str	r0, [sp, #8]
 8009a06:	49bb      	ldr	r1, [pc, #748]	; (8009cf4 <__kernel_rem_pio2f+0x2fc>)
 8009a08:	9866      	ldr	r0, [sp, #408]	; 0x198
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009a10:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8009a14:	1e59      	subs	r1, r3, #1
 8009a16:	1d13      	adds	r3, r2, #4
 8009a18:	db27      	blt.n	8009a6a <__kernel_rem_pio2f+0x72>
 8009a1a:	f1b2 0b03 	subs.w	fp, r2, #3
 8009a1e:	bf48      	it	mi
 8009a20:	f102 0b04 	addmi.w	fp, r2, #4
 8009a24:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8009a28:	1c45      	adds	r5, r0, #1
 8009a2a:	00ec      	lsls	r4, r5, #3
 8009a2c:	1a47      	subs	r7, r0, r1
 8009a2e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009d04 <__kernel_rem_pio2f+0x30c>
 8009a32:	9403      	str	r4, [sp, #12]
 8009a34:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009a38:	eb0a 0c01 	add.w	ip, sl, r1
 8009a3c:	ae1c      	add	r6, sp, #112	; 0x70
 8009a3e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009a42:	2400      	movs	r4, #0
 8009a44:	4564      	cmp	r4, ip
 8009a46:	dd12      	ble.n	8009a6e <__kernel_rem_pio2f+0x76>
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	ac1c      	add	r4, sp, #112	; 0x70
 8009a4c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009a50:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009a54:	f04f 0c00 	mov.w	ip, #0
 8009a58:	45d4      	cmp	ip, sl
 8009a5a:	dc27      	bgt.n	8009aac <__kernel_rem_pio2f+0xb4>
 8009a5c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009a60:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009d04 <__kernel_rem_pio2f+0x30c>
 8009a64:	4627      	mov	r7, r4
 8009a66:	2600      	movs	r6, #0
 8009a68:	e016      	b.n	8009a98 <__kernel_rem_pio2f+0xa0>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	e7dc      	b.n	8009a28 <__kernel_rem_pio2f+0x30>
 8009a6e:	42e7      	cmn	r7, r4
 8009a70:	bf5d      	ittte	pl
 8009a72:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8009a76:	ee07 3a90 	vmovpl	s15, r3
 8009a7a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009a7e:	eef0 7a47 	vmovmi.f32	s15, s14
 8009a82:	ece6 7a01 	vstmia	r6!, {s15}
 8009a86:	3401      	adds	r4, #1
 8009a88:	e7dc      	b.n	8009a44 <__kernel_rem_pio2f+0x4c>
 8009a8a:	ecf9 6a01 	vldmia	r9!, {s13}
 8009a8e:	ed97 7a00 	vldr	s14, [r7]
 8009a92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009a96:	3601      	adds	r6, #1
 8009a98:	428e      	cmp	r6, r1
 8009a9a:	f1a7 0704 	sub.w	r7, r7, #4
 8009a9e:	ddf4      	ble.n	8009a8a <__kernel_rem_pio2f+0x92>
 8009aa0:	eceb 7a01 	vstmia	fp!, {s15}
 8009aa4:	f10c 0c01 	add.w	ip, ip, #1
 8009aa8:	3404      	adds	r4, #4
 8009aaa:	e7d5      	b.n	8009a58 <__kernel_rem_pio2f+0x60>
 8009aac:	ab08      	add	r3, sp, #32
 8009aae:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009ab2:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009d00 <__kernel_rem_pio2f+0x308>
 8009ab6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009cfc <__kernel_rem_pio2f+0x304>
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8009ac0:	4656      	mov	r6, sl
 8009ac2:	00b3      	lsls	r3, r6, #2
 8009ac4:	9305      	str	r3, [sp, #20]
 8009ac6:	ab58      	add	r3, sp, #352	; 0x160
 8009ac8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009acc:	ac08      	add	r4, sp, #32
 8009ace:	ab44      	add	r3, sp, #272	; 0x110
 8009ad0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009ad4:	46a4      	mov	ip, r4
 8009ad6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009ada:	4637      	mov	r7, r6
 8009adc:	2f00      	cmp	r7, #0
 8009ade:	f1a0 0004 	sub.w	r0, r0, #4
 8009ae2:	dc4f      	bgt.n	8009b84 <__kernel_rem_pio2f+0x18c>
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009aea:	f000 fb61 	bl	800a1b0 <scalbnf>
 8009aee:	eeb0 8a40 	vmov.f32	s16, s0
 8009af2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009af6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009afa:	f000 fb17 	bl	800a12c <floorf>
 8009afe:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009b02:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009b0c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009b10:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009b14:	ee17 9a90 	vmov	r9, s15
 8009b18:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009b1c:	dd44      	ble.n	8009ba8 <__kernel_rem_pio2f+0x1b0>
 8009b1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8009b22:	ab08      	add	r3, sp, #32
 8009b24:	f1c5 0e08 	rsb	lr, r5, #8
 8009b28:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009b2c:	fa47 f00e 	asr.w	r0, r7, lr
 8009b30:	4481      	add	r9, r0
 8009b32:	fa00 f00e 	lsl.w	r0, r0, lr
 8009b36:	1a3f      	subs	r7, r7, r0
 8009b38:	f1c5 0007 	rsb	r0, r5, #7
 8009b3c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009b40:	4107      	asrs	r7, r0
 8009b42:	2f00      	cmp	r7, #0
 8009b44:	dd3f      	ble.n	8009bc6 <__kernel_rem_pio2f+0x1ce>
 8009b46:	f04f 0e00 	mov.w	lr, #0
 8009b4a:	f109 0901 	add.w	r9, r9, #1
 8009b4e:	4673      	mov	r3, lr
 8009b50:	4576      	cmp	r6, lr
 8009b52:	dc6b      	bgt.n	8009c2c <__kernel_rem_pio2f+0x234>
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	dd04      	ble.n	8009b62 <__kernel_rem_pio2f+0x16a>
 8009b58:	2d01      	cmp	r5, #1
 8009b5a:	d078      	beq.n	8009c4e <__kernel_rem_pio2f+0x256>
 8009b5c:	2d02      	cmp	r5, #2
 8009b5e:	f000 8081 	beq.w	8009c64 <__kernel_rem_pio2f+0x26c>
 8009b62:	2f02      	cmp	r7, #2
 8009b64:	d12f      	bne.n	8009bc6 <__kernel_rem_pio2f+0x1ce>
 8009b66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009b6a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009b6e:	b353      	cbz	r3, 8009bc6 <__kernel_rem_pio2f+0x1ce>
 8009b70:	4628      	mov	r0, r5
 8009b72:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009b76:	f000 fb1b 	bl	800a1b0 <scalbnf>
 8009b7a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009b7e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009b82:	e020      	b.n	8009bc6 <__kernel_rem_pio2f+0x1ce>
 8009b84:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009b88:	3f01      	subs	r7, #1
 8009b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b92:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009b96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009b9a:	ecac 0a01 	vstmia	ip!, {s0}
 8009b9e:	ed90 0a00 	vldr	s0, [r0]
 8009ba2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009ba6:	e799      	b.n	8009adc <__kernel_rem_pio2f+0xe4>
 8009ba8:	d105      	bne.n	8009bb6 <__kernel_rem_pio2f+0x1be>
 8009baa:	1e70      	subs	r0, r6, #1
 8009bac:	ab08      	add	r3, sp, #32
 8009bae:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009bb2:	11ff      	asrs	r7, r7, #7
 8009bb4:	e7c5      	b.n	8009b42 <__kernel_rem_pio2f+0x14a>
 8009bb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009bba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc2:	da31      	bge.n	8009c28 <__kernel_rem_pio2f+0x230>
 8009bc4:	2700      	movs	r7, #0
 8009bc6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bce:	f040 809b 	bne.w	8009d08 <__kernel_rem_pio2f+0x310>
 8009bd2:	1e74      	subs	r4, r6, #1
 8009bd4:	46a4      	mov	ip, r4
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	45d4      	cmp	ip, sl
 8009bda:	da4a      	bge.n	8009c72 <__kernel_rem_pio2f+0x27a>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d07a      	beq.n	8009cd6 <__kernel_rem_pio2f+0x2de>
 8009be0:	ab08      	add	r3, sp, #32
 8009be2:	3d08      	subs	r5, #8
 8009be4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8081 	beq.w	8009cf0 <__kernel_rem_pio2f+0x2f8>
 8009bee:	4628      	mov	r0, r5
 8009bf0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009bf4:	00a5      	lsls	r5, r4, #2
 8009bf6:	f000 fadb 	bl	800a1b0 <scalbnf>
 8009bfa:	aa44      	add	r2, sp, #272	; 0x110
 8009bfc:	1d2b      	adds	r3, r5, #4
 8009bfe:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009d00 <__kernel_rem_pio2f+0x308>
 8009c02:	18d1      	adds	r1, r2, r3
 8009c04:	4622      	mov	r2, r4
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	f280 80ae 	bge.w	8009d68 <__kernel_rem_pio2f+0x370>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	f2c0 80cc 	blt.w	8009dac <__kernel_rem_pio2f+0x3b4>
 8009c14:	a944      	add	r1, sp, #272	; 0x110
 8009c16:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8009c1a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009cf8 <__kernel_rem_pio2f+0x300>
 8009c1e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009d04 <__kernel_rem_pio2f+0x30c>
 8009c22:	2000      	movs	r0, #0
 8009c24:	1aa1      	subs	r1, r4, r2
 8009c26:	e0b6      	b.n	8009d96 <__kernel_rem_pio2f+0x39e>
 8009c28:	2702      	movs	r7, #2
 8009c2a:	e78c      	b.n	8009b46 <__kernel_rem_pio2f+0x14e>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	b94b      	cbnz	r3, 8009c44 <__kernel_rem_pio2f+0x24c>
 8009c30:	b118      	cbz	r0, 8009c3a <__kernel_rem_pio2f+0x242>
 8009c32:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8009c36:	6020      	str	r0, [r4, #0]
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f10e 0e01 	add.w	lr, lr, #1
 8009c3e:	3404      	adds	r4, #4
 8009c40:	4603      	mov	r3, r0
 8009c42:	e785      	b.n	8009b50 <__kernel_rem_pio2f+0x158>
 8009c44:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8009c48:	6020      	str	r0, [r4, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	e7f5      	b.n	8009c3a <__kernel_rem_pio2f+0x242>
 8009c4e:	1e74      	subs	r4, r6, #1
 8009c50:	a808      	add	r0, sp, #32
 8009c52:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009c56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009c5a:	f10d 0c20 	add.w	ip, sp, #32
 8009c5e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8009c62:	e77e      	b.n	8009b62 <__kernel_rem_pio2f+0x16a>
 8009c64:	1e74      	subs	r4, r6, #1
 8009c66:	a808      	add	r0, sp, #32
 8009c68:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009c6c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009c70:	e7f3      	b.n	8009c5a <__kernel_rem_pio2f+0x262>
 8009c72:	ab08      	add	r3, sp, #32
 8009c74:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009c78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c7c:	4318      	orrs	r0, r3
 8009c7e:	e7ab      	b.n	8009bd8 <__kernel_rem_pio2f+0x1e0>
 8009c80:	f10c 0c01 	add.w	ip, ip, #1
 8009c84:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	d0f9      	beq.n	8009c80 <__kernel_rem_pio2f+0x288>
 8009c8c:	9b05      	ldr	r3, [sp, #20]
 8009c8e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009c92:	eb0d 0003 	add.w	r0, sp, r3
 8009c96:	9b01      	ldr	r3, [sp, #4]
 8009c98:	18f4      	adds	r4, r6, r3
 8009c9a:	ab1c      	add	r3, sp, #112	; 0x70
 8009c9c:	1c77      	adds	r7, r6, #1
 8009c9e:	384c      	subs	r0, #76	; 0x4c
 8009ca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ca4:	4466      	add	r6, ip
 8009ca6:	42be      	cmp	r6, r7
 8009ca8:	f6ff af0b 	blt.w	8009ac2 <__kernel_rem_pio2f+0xca>
 8009cac:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009cb0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cbc:	f04f 0c00 	mov.w	ip, #0
 8009cc0:	ece4 7a01 	vstmia	r4!, {s15}
 8009cc4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009d04 <__kernel_rem_pio2f+0x30c>
 8009cc8:	46a1      	mov	r9, r4
 8009cca:	458c      	cmp	ip, r1
 8009ccc:	dd07      	ble.n	8009cde <__kernel_rem_pio2f+0x2e6>
 8009cce:	ece0 7a01 	vstmia	r0!, {s15}
 8009cd2:	3701      	adds	r7, #1
 8009cd4:	e7e7      	b.n	8009ca6 <__kernel_rem_pio2f+0x2ae>
 8009cd6:	9804      	ldr	r0, [sp, #16]
 8009cd8:	f04f 0c01 	mov.w	ip, #1
 8009cdc:	e7d2      	b.n	8009c84 <__kernel_rem_pio2f+0x28c>
 8009cde:	ecfe 6a01 	vldmia	lr!, {s13}
 8009ce2:	ed39 7a01 	vldmdb	r9!, {s14}
 8009ce6:	f10c 0c01 	add.w	ip, ip, #1
 8009cea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009cee:	e7ec      	b.n	8009cca <__kernel_rem_pio2f+0x2d2>
 8009cf0:	3c01      	subs	r4, #1
 8009cf2:	e775      	b.n	8009be0 <__kernel_rem_pio2f+0x1e8>
 8009cf4:	0800a6d0 	.word	0x0800a6d0
 8009cf8:	0800a6a4 	.word	0x0800a6a4
 8009cfc:	43800000 	.word	0x43800000
 8009d00:	3b800000 	.word	0x3b800000
 8009d04:	00000000 	.word	0x00000000
 8009d08:	9b03      	ldr	r3, [sp, #12]
 8009d0a:	eeb0 0a48 	vmov.f32	s0, s16
 8009d0e:	1a98      	subs	r0, r3, r2
 8009d10:	f000 fa4e 	bl	800a1b0 <scalbnf>
 8009d14:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009cfc <__kernel_rem_pio2f+0x304>
 8009d18:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d20:	db19      	blt.n	8009d56 <__kernel_rem_pio2f+0x35e>
 8009d22:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009d00 <__kernel_rem_pio2f+0x308>
 8009d26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009d2a:	aa08      	add	r2, sp, #32
 8009d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d30:	1c74      	adds	r4, r6, #1
 8009d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d36:	3508      	adds	r5, #8
 8009d38:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009d44:	ee10 3a10 	vmov	r3, s0
 8009d48:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009d4c:	ee17 3a90 	vmov	r3, s15
 8009d50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009d54:	e74b      	b.n	8009bee <__kernel_rem_pio2f+0x1f6>
 8009d56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009d5a:	aa08      	add	r2, sp, #32
 8009d5c:	ee10 3a10 	vmov	r3, s0
 8009d60:	4634      	mov	r4, r6
 8009d62:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009d66:	e742      	b.n	8009bee <__kernel_rem_pio2f+0x1f6>
 8009d68:	a808      	add	r0, sp, #32
 8009d6a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009d6e:	9001      	str	r0, [sp, #4]
 8009d70:	ee07 0a90 	vmov	s15, r0
 8009d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d78:	3a01      	subs	r2, #1
 8009d7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009d7e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009d82:	ed61 7a01 	vstmdb	r1!, {s15}
 8009d86:	e73e      	b.n	8009c06 <__kernel_rem_pio2f+0x20e>
 8009d88:	ecfc 6a01 	vldmia	ip!, {s13}
 8009d8c:	ecb6 7a01 	vldmia	r6!, {s14}
 8009d90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009d94:	3001      	adds	r0, #1
 8009d96:	4550      	cmp	r0, sl
 8009d98:	dc01      	bgt.n	8009d9e <__kernel_rem_pio2f+0x3a6>
 8009d9a:	4288      	cmp	r0, r1
 8009d9c:	ddf4      	ble.n	8009d88 <__kernel_rem_pio2f+0x390>
 8009d9e:	a858      	add	r0, sp, #352	; 0x160
 8009da0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009da4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009da8:	3a01      	subs	r2, #1
 8009daa:	e730      	b.n	8009c0e <__kernel_rem_pio2f+0x216>
 8009dac:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8009dae:	2a02      	cmp	r2, #2
 8009db0:	dc09      	bgt.n	8009dc6 <__kernel_rem_pio2f+0x3ce>
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	dc2a      	bgt.n	8009e0c <__kernel_rem_pio2f+0x414>
 8009db6:	d043      	beq.n	8009e40 <__kernel_rem_pio2f+0x448>
 8009db8:	f009 0007 	and.w	r0, r9, #7
 8009dbc:	b059      	add	sp, #356	; 0x164
 8009dbe:	ecbd 8b04 	vpop	{d8-d9}
 8009dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d1f5      	bne.n	8009db8 <__kernel_rem_pio2f+0x3c0>
 8009dcc:	ab30      	add	r3, sp, #192	; 0xc0
 8009dce:	442b      	add	r3, r5
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f1a1 0104 	sub.w	r1, r1, #4
 8009ddc:	dc51      	bgt.n	8009e82 <__kernel_rem_pio2f+0x48a>
 8009dde:	4621      	mov	r1, r4
 8009de0:	2901      	cmp	r1, #1
 8009de2:	f1a2 0204 	sub.w	r2, r2, #4
 8009de6:	dc5c      	bgt.n	8009ea2 <__kernel_rem_pio2f+0x4aa>
 8009de8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009d04 <__kernel_rem_pio2f+0x30c>
 8009dec:	3304      	adds	r3, #4
 8009dee:	2c01      	cmp	r4, #1
 8009df0:	dc67      	bgt.n	8009ec2 <__kernel_rem_pio2f+0x4ca>
 8009df2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009df6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009dfa:	2f00      	cmp	r7, #0
 8009dfc:	d167      	bne.n	8009ece <__kernel_rem_pio2f+0x4d6>
 8009dfe:	edc8 6a00 	vstr	s13, [r8]
 8009e02:	ed88 7a01 	vstr	s14, [r8, #4]
 8009e06:	edc8 7a02 	vstr	s15, [r8, #8]
 8009e0a:	e7d5      	b.n	8009db8 <__kernel_rem_pio2f+0x3c0>
 8009e0c:	aa30      	add	r2, sp, #192	; 0xc0
 8009e0e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8009d04 <__kernel_rem_pio2f+0x30c>
 8009e12:	4413      	add	r3, r2
 8009e14:	4622      	mov	r2, r4
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	da24      	bge.n	8009e64 <__kernel_rem_pio2f+0x46c>
 8009e1a:	b34f      	cbz	r7, 8009e70 <__kernel_rem_pio2f+0x478>
 8009e1c:	eef1 7a47 	vneg.f32	s15, s14
 8009e20:	edc8 7a00 	vstr	s15, [r8]
 8009e24:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e2c:	aa31      	add	r2, sp, #196	; 0xc4
 8009e2e:	2301      	movs	r3, #1
 8009e30:	429c      	cmp	r4, r3
 8009e32:	da20      	bge.n	8009e76 <__kernel_rem_pio2f+0x47e>
 8009e34:	b10f      	cbz	r7, 8009e3a <__kernel_rem_pio2f+0x442>
 8009e36:	eef1 7a67 	vneg.f32	s15, s15
 8009e3a:	edc8 7a01 	vstr	s15, [r8, #4]
 8009e3e:	e7bb      	b.n	8009db8 <__kernel_rem_pio2f+0x3c0>
 8009e40:	aa30      	add	r2, sp, #192	; 0xc0
 8009e42:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8009d04 <__kernel_rem_pio2f+0x30c>
 8009e46:	4413      	add	r3, r2
 8009e48:	2c00      	cmp	r4, #0
 8009e4a:	da05      	bge.n	8009e58 <__kernel_rem_pio2f+0x460>
 8009e4c:	b10f      	cbz	r7, 8009e52 <__kernel_rem_pio2f+0x45a>
 8009e4e:	eef1 7a67 	vneg.f32	s15, s15
 8009e52:	edc8 7a00 	vstr	s15, [r8]
 8009e56:	e7af      	b.n	8009db8 <__kernel_rem_pio2f+0x3c0>
 8009e58:	ed33 7a01 	vldmdb	r3!, {s14}
 8009e5c:	3c01      	subs	r4, #1
 8009e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e62:	e7f1      	b.n	8009e48 <__kernel_rem_pio2f+0x450>
 8009e64:	ed73 7a01 	vldmdb	r3!, {s15}
 8009e68:	3a01      	subs	r2, #1
 8009e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e6e:	e7d2      	b.n	8009e16 <__kernel_rem_pio2f+0x41e>
 8009e70:	eef0 7a47 	vmov.f32	s15, s14
 8009e74:	e7d4      	b.n	8009e20 <__kernel_rem_pio2f+0x428>
 8009e76:	ecb2 7a01 	vldmia	r2!, {s14}
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e80:	e7d6      	b.n	8009e30 <__kernel_rem_pio2f+0x438>
 8009e82:	edd1 7a00 	vldr	s15, [r1]
 8009e86:	edd1 6a01 	vldr	s13, [r1, #4]
 8009e8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009e8e:	3801      	subs	r0, #1
 8009e90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e94:	ed81 7a00 	vstr	s14, [r1]
 8009e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9c:	edc1 7a01 	vstr	s15, [r1, #4]
 8009ea0:	e799      	b.n	8009dd6 <__kernel_rem_pio2f+0x3de>
 8009ea2:	edd2 7a00 	vldr	s15, [r2]
 8009ea6:	edd2 6a01 	vldr	s13, [r2, #4]
 8009eaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009eae:	3901      	subs	r1, #1
 8009eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009eb4:	ed82 7a00 	vstr	s14, [r2]
 8009eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ebc:	edc2 7a01 	vstr	s15, [r2, #4]
 8009ec0:	e78e      	b.n	8009de0 <__kernel_rem_pio2f+0x3e8>
 8009ec2:	ed33 7a01 	vldmdb	r3!, {s14}
 8009ec6:	3c01      	subs	r4, #1
 8009ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ecc:	e78f      	b.n	8009dee <__kernel_rem_pio2f+0x3f6>
 8009ece:	eef1 6a66 	vneg.f32	s13, s13
 8009ed2:	eeb1 7a47 	vneg.f32	s14, s14
 8009ed6:	edc8 6a00 	vstr	s13, [r8]
 8009eda:	ed88 7a01 	vstr	s14, [r8, #4]
 8009ede:	eef1 7a67 	vneg.f32	s15, s15
 8009ee2:	e790      	b.n	8009e06 <__kernel_rem_pio2f+0x40e>

08009ee4 <__kernel_sinf>:
 8009ee4:	ee10 3a10 	vmov	r3, s0
 8009ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009eec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009ef0:	da04      	bge.n	8009efc <__kernel_sinf+0x18>
 8009ef2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009ef6:	ee17 3a90 	vmov	r3, s15
 8009efa:	b35b      	cbz	r3, 8009f54 <__kernel_sinf+0x70>
 8009efc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009f00:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009f58 <__kernel_sinf+0x74>
 8009f04:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009f5c <__kernel_sinf+0x78>
 8009f08:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009f0c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009f60 <__kernel_sinf+0x7c>
 8009f10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f14:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009f64 <__kernel_sinf+0x80>
 8009f18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009f1c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009f68 <__kernel_sinf+0x84>
 8009f20:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009f24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f28:	b930      	cbnz	r0, 8009f38 <__kernel_sinf+0x54>
 8009f2a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009f6c <__kernel_sinf+0x88>
 8009f2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009f32:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009f36:	4770      	bx	lr
 8009f38:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009f3c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009f40:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009f44:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009f48:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009f70 <__kernel_sinf+0x8c>
 8009f4c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009f50:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	2f2ec9d3 	.word	0x2f2ec9d3
 8009f5c:	b2d72f34 	.word	0xb2d72f34
 8009f60:	3638ef1b 	.word	0x3638ef1b
 8009f64:	b9500d01 	.word	0xb9500d01
 8009f68:	3c088889 	.word	0x3c088889
 8009f6c:	be2aaaab 	.word	0xbe2aaaab
 8009f70:	3e2aaaab 	.word	0x3e2aaaab

08009f74 <atanf>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	ee10 5a10 	vmov	r5, s0
 8009f7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009f7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009f82:	eef0 7a40 	vmov.f32	s15, s0
 8009f86:	db10      	blt.n	8009faa <atanf+0x36>
 8009f88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009f8c:	dd04      	ble.n	8009f98 <atanf+0x24>
 8009f8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009f92:	eeb0 0a67 	vmov.f32	s0, s15
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a0d0 <atanf+0x15c>
 8009f9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a0d4 <atanf+0x160>
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	bfd8      	it	le
 8009fa4:	eef0 7a40 	vmovle.f32	s15, s0
 8009fa8:	e7f3      	b.n	8009f92 <atanf+0x1e>
 8009faa:	4b4b      	ldr	r3, [pc, #300]	; (800a0d8 <atanf+0x164>)
 8009fac:	429c      	cmp	r4, r3
 8009fae:	dc10      	bgt.n	8009fd2 <atanf+0x5e>
 8009fb0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009fb4:	da0a      	bge.n	8009fcc <atanf+0x58>
 8009fb6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a0dc <atanf+0x168>
 8009fba:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fca:	dce2      	bgt.n	8009f92 <atanf+0x1e>
 8009fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd0:	e013      	b.n	8009ffa <atanf+0x86>
 8009fd2:	f000 f8a3 	bl	800a11c <fabsf>
 8009fd6:	4b42      	ldr	r3, [pc, #264]	; (800a0e0 <atanf+0x16c>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	dc4f      	bgt.n	800a07c <atanf+0x108>
 8009fdc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	dc41      	bgt.n	800a068 <atanf+0xf4>
 8009fe4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009fe8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009fec:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ff6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a000:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a0e4 <atanf+0x170>
 800a004:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a0e8 <atanf+0x174>
 800a008:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a0ec <atanf+0x178>
 800a00c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a010:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a014:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a0f0 <atanf+0x17c>
 800a018:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a01c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a0f4 <atanf+0x180>
 800a020:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a024:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a0f8 <atanf+0x184>
 800a028:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a02c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a0fc <atanf+0x188>
 800a030:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a034:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a100 <atanf+0x18c>
 800a038:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a03c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a104 <atanf+0x190>
 800a040:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a044:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a108 <atanf+0x194>
 800a048:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a04c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a10c <atanf+0x198>
 800a050:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a054:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a058:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a05c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a060:	d121      	bne.n	800a0a6 <atanf+0x132>
 800a062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a066:	e794      	b.n	8009f92 <atanf+0x1e>
 800a068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a06c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a070:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a074:	2301      	movs	r3, #1
 800a076:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a07a:	e7be      	b.n	8009ffa <atanf+0x86>
 800a07c:	4b24      	ldr	r3, [pc, #144]	; (800a110 <atanf+0x19c>)
 800a07e:	429c      	cmp	r4, r3
 800a080:	dc0b      	bgt.n	800a09a <atanf+0x126>
 800a082:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a08a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a08e:	2302      	movs	r3, #2
 800a090:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a098:	e7af      	b.n	8009ffa <atanf+0x86>
 800a09a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a09e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e7a9      	b.n	8009ffa <atanf+0x86>
 800a0a6:	4a1b      	ldr	r2, [pc, #108]	; (800a114 <atanf+0x1a0>)
 800a0a8:	491b      	ldr	r1, [pc, #108]	; (800a118 <atanf+0x1a4>)
 800a0aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a0ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a0b2:	ed93 0a00 	vldr	s0, [r3]
 800a0b6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a0ba:	ed92 0a00 	vldr	s0, [r2]
 800a0be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a0c8:	bfb8      	it	lt
 800a0ca:	eef1 7a67 	vneglt.f32	s15, s15
 800a0ce:	e760      	b.n	8009f92 <atanf+0x1e>
 800a0d0:	3fc90fdb 	.word	0x3fc90fdb
 800a0d4:	bfc90fdb 	.word	0xbfc90fdb
 800a0d8:	3edfffff 	.word	0x3edfffff
 800a0dc:	7149f2ca 	.word	0x7149f2ca
 800a0e0:	3f97ffff 	.word	0x3f97ffff
 800a0e4:	3c8569d7 	.word	0x3c8569d7
 800a0e8:	3d4bda59 	.word	0x3d4bda59
 800a0ec:	bd6ef16b 	.word	0xbd6ef16b
 800a0f0:	3d886b35 	.word	0x3d886b35
 800a0f4:	3dba2e6e 	.word	0x3dba2e6e
 800a0f8:	3e124925 	.word	0x3e124925
 800a0fc:	3eaaaaab 	.word	0x3eaaaaab
 800a100:	bd15a221 	.word	0xbd15a221
 800a104:	bd9d8795 	.word	0xbd9d8795
 800a108:	bde38e38 	.word	0xbde38e38
 800a10c:	be4ccccd 	.word	0xbe4ccccd
 800a110:	401bffff 	.word	0x401bffff
 800a114:	0800a6dc 	.word	0x0800a6dc
 800a118:	0800a6ec 	.word	0x0800a6ec

0800a11c <fabsf>:
 800a11c:	ee10 3a10 	vmov	r3, s0
 800a120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a124:	ee00 3a10 	vmov	s0, r3
 800a128:	4770      	bx	lr
	...

0800a12c <floorf>:
 800a12c:	ee10 3a10 	vmov	r3, s0
 800a130:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a134:	3a7f      	subs	r2, #127	; 0x7f
 800a136:	2a16      	cmp	r2, #22
 800a138:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a13c:	dc2a      	bgt.n	800a194 <floorf+0x68>
 800a13e:	2a00      	cmp	r2, #0
 800a140:	da11      	bge.n	800a166 <floorf+0x3a>
 800a142:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a1a4 <floorf+0x78>
 800a146:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a14a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a152:	dd05      	ble.n	800a160 <floorf+0x34>
 800a154:	2b00      	cmp	r3, #0
 800a156:	da23      	bge.n	800a1a0 <floorf+0x74>
 800a158:	4a13      	ldr	r2, [pc, #76]	; (800a1a8 <floorf+0x7c>)
 800a15a:	2900      	cmp	r1, #0
 800a15c:	bf18      	it	ne
 800a15e:	4613      	movne	r3, r2
 800a160:	ee00 3a10 	vmov	s0, r3
 800a164:	4770      	bx	lr
 800a166:	4911      	ldr	r1, [pc, #68]	; (800a1ac <floorf+0x80>)
 800a168:	4111      	asrs	r1, r2
 800a16a:	420b      	tst	r3, r1
 800a16c:	d0fa      	beq.n	800a164 <floorf+0x38>
 800a16e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a1a4 <floorf+0x78>
 800a172:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a176:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17e:	ddef      	ble.n	800a160 <floorf+0x34>
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfbe      	ittt	lt
 800a184:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a188:	fa40 f202 	asrlt.w	r2, r0, r2
 800a18c:	189b      	addlt	r3, r3, r2
 800a18e:	ea23 0301 	bic.w	r3, r3, r1
 800a192:	e7e5      	b.n	800a160 <floorf+0x34>
 800a194:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a198:	d3e4      	bcc.n	800a164 <floorf+0x38>
 800a19a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a19e:	4770      	bx	lr
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e7dd      	b.n	800a160 <floorf+0x34>
 800a1a4:	7149f2ca 	.word	0x7149f2ca
 800a1a8:	bf800000 	.word	0xbf800000
 800a1ac:	007fffff 	.word	0x007fffff

0800a1b0 <scalbnf>:
 800a1b0:	ee10 3a10 	vmov	r3, s0
 800a1b4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a1b8:	d025      	beq.n	800a206 <scalbnf+0x56>
 800a1ba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a1be:	d302      	bcc.n	800a1c6 <scalbnf+0x16>
 800a1c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1c4:	4770      	bx	lr
 800a1c6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a1ca:	d122      	bne.n	800a212 <scalbnf+0x62>
 800a1cc:	4b2a      	ldr	r3, [pc, #168]	; (800a278 <scalbnf+0xc8>)
 800a1ce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a27c <scalbnf+0xcc>
 800a1d2:	4298      	cmp	r0, r3
 800a1d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a1d8:	db16      	blt.n	800a208 <scalbnf+0x58>
 800a1da:	ee10 3a10 	vmov	r3, s0
 800a1de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a1e2:	3a19      	subs	r2, #25
 800a1e4:	4402      	add	r2, r0
 800a1e6:	2afe      	cmp	r2, #254	; 0xfe
 800a1e8:	dd15      	ble.n	800a216 <scalbnf+0x66>
 800a1ea:	ee10 3a10 	vmov	r3, s0
 800a1ee:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a280 <scalbnf+0xd0>
 800a1f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a284 <scalbnf+0xd4>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	eeb0 7a67 	vmov.f32	s14, s15
 800a1fc:	bfb8      	it	lt
 800a1fe:	eef0 7a66 	vmovlt.f32	s15, s13
 800a202:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a206:	4770      	bx	lr
 800a208:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a288 <scalbnf+0xd8>
 800a20c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a210:	4770      	bx	lr
 800a212:	0dd2      	lsrs	r2, r2, #23
 800a214:	e7e6      	b.n	800a1e4 <scalbnf+0x34>
 800a216:	2a00      	cmp	r2, #0
 800a218:	dd06      	ble.n	800a228 <scalbnf+0x78>
 800a21a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a21e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a222:	ee00 3a10 	vmov	s0, r3
 800a226:	4770      	bx	lr
 800a228:	f112 0f16 	cmn.w	r2, #22
 800a22c:	da1a      	bge.n	800a264 <scalbnf+0xb4>
 800a22e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a232:	4298      	cmp	r0, r3
 800a234:	ee10 3a10 	vmov	r3, s0
 800a238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a23c:	dd0a      	ble.n	800a254 <scalbnf+0xa4>
 800a23e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a280 <scalbnf+0xd0>
 800a242:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a284 <scalbnf+0xd4>
 800a246:	eef0 7a40 	vmov.f32	s15, s0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bf18      	it	ne
 800a24e:	eeb0 0a47 	vmovne.f32	s0, s14
 800a252:	e7db      	b.n	800a20c <scalbnf+0x5c>
 800a254:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a288 <scalbnf+0xd8>
 800a258:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a28c <scalbnf+0xdc>
 800a25c:	eef0 7a40 	vmov.f32	s15, s0
 800a260:	2b00      	cmp	r3, #0
 800a262:	e7f3      	b.n	800a24c <scalbnf+0x9c>
 800a264:	3219      	adds	r2, #25
 800a266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a26a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a26e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a290 <scalbnf+0xe0>
 800a272:	ee07 3a10 	vmov	s14, r3
 800a276:	e7c4      	b.n	800a202 <scalbnf+0x52>
 800a278:	ffff3cb0 	.word	0xffff3cb0
 800a27c:	4c000000 	.word	0x4c000000
 800a280:	7149f2ca 	.word	0x7149f2ca
 800a284:	f149f2ca 	.word	0xf149f2ca
 800a288:	0da24260 	.word	0x0da24260
 800a28c:	8da24260 	.word	0x8da24260
 800a290:	33000000 	.word	0x33000000

0800a294 <_init>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	bf00      	nop
 800a298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29a:	bc08      	pop	{r3}
 800a29c:	469e      	mov	lr, r3
 800a29e:	4770      	bx	lr

0800a2a0 <_fini>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	bf00      	nop
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr
