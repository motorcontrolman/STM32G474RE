
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000724c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007874  08007874  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800787c  0800787c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000070  080078f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  080078f4  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e58  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003913  00000000  00000000  00043ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001a047  00000000  00000000  0004780b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00061858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001688  00000000  00000000  00062ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e34  00000000  00000000  00064328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f96  00000000  00000000  0008e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011580f  00000000  00000000  000b30f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c8901  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003814  00000000  00000000  001c8954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800740c 	.word	0x0800740c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800740c 	.word	0x0800740c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <cfPhaseLockedLoop>:

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 800051c:	ee20 1a01 	vmul.f32	s2, s0, s2
 8000520:	edd0 7a00 	vldr	s15, [r0]
 8000524:	ee31 1a27 	vadd.f32	s2, s2, s15
 8000528:	ed80 1a00 	vstr	s2, [r0]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 800052c:	ee20 0a20 	vmul.f32	s0, s0, s1

	return ElectAngVeloEstimate;
}
 8000530:	ee31 0a00 	vadd.f32	s0, s2, s0
 8000534:	4770      	bx	lr

08000536 <gfDivideAvoidZero>:
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
	float result;
	if ( den >= 0 && den < threshold )
 8000536:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800053a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053e:	db04      	blt.n	800054a <gfDivideAvoidZero+0x14>
 8000540:	eef4 0ac1 	vcmpe.f32	s1, s2
 8000544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000548:	d411      	bmi.n	800056e <gfDivideAvoidZero+0x38>
		den = threshold;
	else if( den < 0 && den > -threshold)
 800054a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000552:	d402      	bmi.n	800055a <gfDivideAvoidZero+0x24>
		den = -threshold;

	result = num / den;
	return result;
}
 8000554:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8000558:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 800055a:	eeb1 1a41 	vneg.f32	s2, s2
 800055e:	eeb4 1ae0 	vcmpe.f32	s2, s1
 8000562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000566:	d5f5      	bpl.n	8000554 <gfDivideAvoidZero+0x1e>
		den = -threshold;
 8000568:	eef0 0a41 	vmov.f32	s1, s2
 800056c:	e7f2      	b.n	8000554 <gfDivideAvoidZero+0x1e>
		den = threshold;
 800056e:	eef0 0a41 	vmov.f32	s1, s2
 8000572:	e7ef      	b.n	8000554 <gfDivideAvoidZero+0x1e>

08000574 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000574:	b508      	push	{r3, lr}
	theta = fmodf(theta, TWOPI);
 8000576:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80005b0 <gfWrapTheta+0x3c>
 800057a:	f005 fff9 	bl	8006570 <fmodf>
	if( theta > PI)
 800057e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80005b4 <gfWrapTheta+0x40>
 8000582:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	dd04      	ble.n	8000596 <gfWrapTheta+0x22>
		theta -= TWOPI;
 800058c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80005b0 <gfWrapTheta+0x3c>
 8000590:	ee30 0a67 	vsub.f32	s0, s0, s15
	else if( theta < -PI)
		theta += TWOPI;

	return theta;
}
 8000594:	bd08      	pop	{r3, pc}
	else if( theta < -PI)
 8000596:	eddf 7a08 	vldr	s15, [pc, #32]	; 80005b8 <gfWrapTheta+0x44>
 800059a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800059e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a2:	d5f7      	bpl.n	8000594 <gfWrapTheta+0x20>
		theta += TWOPI;
 80005a4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80005b0 <gfWrapTheta+0x3c>
 80005a8:	ee30 0a27 	vadd.f32	s0, s0, s15
	return theta;
 80005ac:	e7f2      	b.n	8000594 <gfWrapTheta+0x20>
 80005ae:	bf00      	nop
 80005b0:	40c90fdb 	.word	0x40c90fdb
 80005b4:	40490fdb 	.word	0x40490fdb
 80005b8:	c0490fdb 	.word	0xc0490fdb

080005bc <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 80005bc:	eef0 7a40 	vmov.f32	s15, s0
 80005c0:	eeb0 0a41 	vmov.f32	s0, s2
	if(input > Upper) input = Upper;
 80005c4:	eef4 7ae0 	vcmpe.f32	s15, s1
 80005c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005cc:	dc01      	bgt.n	80005d2 <gUpperLowerLimit+0x16>
 80005ce:	eef0 0a67 	vmov.f32	s1, s15
	if(input < Lower) input = Lower;
 80005d2:	eef4 0ac0 	vcmpe.f32	s1, s0
 80005d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005da:	d401      	bmi.n	80005e0 <gUpperLowerLimit+0x24>
 80005dc:	eeb0 0a60 	vmov.f32	s0, s1
	return input;
}
 80005e0:	4770      	bx	lr

080005e2 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	outputMode[0] = OUTPUTMODE_OPEN;
 80005e2:	2300      	movs	r3, #0
 80005e4:	700b      	strb	r3, [r1, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80005e6:	704b      	strb	r3, [r1, #1]
	outputMode[2] = OUTPUTMODE_OPEN;
 80005e8:	708b      	strb	r3, [r1, #2]
	Duty[0] = 0.0f;
 80005ea:	2300      	movs	r3, #0
 80005ec:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 80005ee:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 80005f0:	6083      	str	r3, [r0, #8]
}
 80005f2:	4770      	bx	lr

080005f4 <gLPF>:
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 80005f4:	ee20 1a81 	vmul.f32	s2, s1, s2
	yn_1 = *y;
 80005f8:	ed90 7a00 	vldr	s14, [r0]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 80005fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000600:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8000604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000608:	ee21 1a00 	vmul.f32	s2, s2, s0
 800060c:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000610:	edc0 7a00 	vstr	s15, [r0]
}
 8000614:	4770      	bx	lr
	...

08000618 <slctPosModeForSensorless>:
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static void slctPosModeForSensorless(uint8_t button, uint8_t* posMode){
	if (sElectAngVeloRefRateLimit < 100.0f)
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <slctPosModeForSensorless+0x20>)
 800061a:	ed93 7a00 	vldr	s14, [r3]
 800061e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800063c <slctPosModeForSensorless+0x24>
 8000622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062a:	d502      	bpl.n	8000632 <slctPosModeForSensorless+0x1a>
		*posMode = POSMODE_FREERUN;
 800062c:	2301      	movs	r3, #1
 800062e:	700b      	strb	r3, [r1, #0]
 8000630:	4770      	bx	lr
	else
		*posMode = POSMODE_SENSORLESS;
 8000632:	2304      	movs	r3, #4
 8000634:	700b      	strb	r3, [r1, #0]
}
 8000636:	4770      	bx	lr
 8000638:	200000e4 	.word	0x200000e4
 800063c:	42c80000 	.word	0x42c80000

08000640 <slctDrvModeForSensorless>:

static void slctDrvModeForSensorless(uint8_t button, uint8_t* drvMode){
	if (sElectAngVeloRefRateLimit < 100.0f)
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <slctDrvModeForSensorless+0x34>)
 8000642:	edd3 7a00 	vldr	s15, [r3]
 8000646:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000678 <slctDrvModeForSensorless+0x38>
 800064a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000652:	d502      	bpl.n	800065a <slctDrvModeForSensorless+0x1a>
		*drvMode = DRVMODE_OPENLOOP;
 8000654:	2302      	movs	r3, #2
 8000656:	700b      	strb	r3, [r1, #0]
 8000658:	4770      	bx	lr
	else if(sElectAngVeloRefRateLimit < 200.0f)
 800065a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800067c <slctDrvModeForSensorless+0x3c>
 800065e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000666:	d502      	bpl.n	800066e <slctDrvModeForSensorless+0x2e>
		*drvMode = DRVMODE_OPENLOOP_SENSORLESS;
 8000668:	2303      	movs	r3, #3
 800066a:	700b      	strb	r3, [r1, #0]
 800066c:	4770      	bx	lr
	else
		*drvMode = DRVMODE_VECTORCONTROL;
 800066e:	2304      	movs	r3, #4
 8000670:	700b      	strb	r3, [r1, #0]
}
 8000672:	4770      	bx	lr
 8000674:	200000e4 	.word	0x200000e4
 8000678:	42c80000 	.word	0x42c80000
 800067c:	43480000 	.word	0x43480000

08000680 <slctElectAngleFromPosMode>:

void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo){
 8000680:	b510      	push	{r4, lr}
 8000682:	460c      	mov	r4, r1
	uint8_t flgPLL;

	switch(posMode){
 8000684:	2804      	cmp	r0, #4
 8000686:	d83c      	bhi.n	8000702 <slctElectAngleFromPosMode+0x82>
 8000688:	e8df f000 	tbb	[pc, r0]
 800068c:	221e0903 	.word	0x221e0903
 8000690:	26          	.byte	0x26
 8000691:	00          	.byte	0x00
	case POSMODE_STOP:
		*electAngle = 0.0f;
 8000692:	2300      	movs	r3, #0
 8000694:	600b      	str	r3, [r1, #0]
		*electAngVelo = 0.0f;
 8000696:	6013      	str	r3, [r2, #0]
		sElectAngVeloRef = 0.0f;
 8000698:	4a1c      	ldr	r2, [pc, #112]	; (800070c <slctElectAngleFromPosMode+0x8c>)
 800069a:	6013      	str	r3, [r2, #0]
	default:
		*electAngle = 0;
		*electAngVelo = 0;
		break;
	}
}
 800069c:	bd10      	pop	{r4, pc}
		*electAngVelo = sElectAngVeloRefRateLimit;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <slctElectAngleFromPosMode+0x90>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	edc2 7a00 	vstr	s15, [r2]
		sElectAngle = sElectAngle + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 80006a8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000714 <slctElectAngleFromPosMode+0x94>
 80006ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <slctElectAngleFromPosMode+0x98>)
 80006b2:	edd3 7a00 	vldr	s15, [r3]
 80006b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80006ba:	ed83 0a00 	vstr	s0, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 80006be:	f7ff ff59 	bl	8000574 <gfWrapTheta>
 80006c2:	ed84 0a00 	vstr	s0, [r4]
		break;
 80006c6:	e7e9      	b.n	800069c <slctElectAngleFromPosMode+0x1c>
		calcElectAngle(flgPLL, electAngle, electAngVelo);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 f9fd 	bl	8000ac8 <calcElectAngle>
		break;
 80006ce:	e7e5      	b.n	800069c <slctElectAngleFromPosMode+0x1c>
		calcElectAngle(flgPLL, electAngle, electAngVelo);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 f9f9 	bl	8000ac8 <calcElectAngle>
		break;
 80006d6:	e7e1      	b.n	800069c <slctElectAngleFromPosMode+0x1c>
		*electAngVelo = sElectAngVeloRefRateLimit;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <slctElectAngleFromPosMode+0x90>)
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	edc2 7a00 	vstr	s15, [r2]
		sElectAngle = sElectAngle + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 80006e2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000714 <slctElectAngleFromPosMode+0x94>
 80006e6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <slctElectAngleFromPosMode+0x98>)
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80006f4:	ed83 0a00 	vstr	s0, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 80006f8:	f7ff ff3c 	bl	8000574 <gfWrapTheta>
 80006fc:	ed84 0a00 	vstr	s0, [r4]
		break;
 8000700:	e7cc      	b.n	800069c <slctElectAngleFromPosMode+0x1c>
		*electAngle = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	600b      	str	r3, [r1, #0]
		*electAngVelo = 0;
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	e7c8      	b.n	800069c <slctElectAngleFromPosMode+0x1c>
 800070a:	bf00      	nop
 800070c:	200000e0 	.word	0x200000e0
 8000710:	200000e4 	.word	0x200000e4
 8000714:	4684d000 	.word	0x4684d000
 8000718:	200000e8 	.word	0x200000e8

0800071c <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode){
 800071c:	b500      	push	{lr}
 800071e:	b085      	sub	sp, #20
 8000720:	460b      	mov	r3, r1
 8000722:	4611      	mov	r1, r2
	uint8_t flgFB;
	uint8_t flgPLL;
	// MotorDrive

	float Idq_ref[2];
	Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 8000724:	2200      	movs	r2, #0
 8000726:	9202      	str	r2, [sp, #8]
	Idq_ref[1] = IQREFMAX * gVolume;
 8000728:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <slctCntlFromDrvMode+0xc0>)
 800072a:	edd2 7a00 	vldr	s15, [r2]
 800072e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000736:	edcd 7a03 	vstr	s15, [sp, #12]

	switch(drvMode){
 800073a:	2804      	cmp	r0, #4
 800073c:	d849      	bhi.n	80007d2 <slctCntlFromDrvMode+0xb6>
 800073e:	e8df f000 	tbb	[pc, r0]
 8000742:	4803      	.short	0x4803
 8000744:	1e09      	.short	0x1e09
 8000746:	33          	.byte	0x33
 8000747:	00          	.byte	0x00
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff4a 	bl	80005e2 <gOffDuty>
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
			break;
		default :
			gOffDuty(Duty, outputMode);
	}
}
 800074e:	b005      	add	sp, #20
 8000750:	f85d fb04 	ldr.w	pc, [sp], #4
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 8000754:	9101      	str	r1, [sp, #4]
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	461a      	mov	r2, r3
 800075c:	4920      	ldr	r1, [pc, #128]	; (80007e0 <slctCntlFromDrvMode+0xc4>)
 800075e:	edd1 1a00 	vldr	s3, [r1]
 8000762:	4920      	ldr	r1, [pc, #128]	; (80007e4 <slctCntlFromDrvMode+0xc8>)
 8000764:	ed91 1a00 	vldr	s2, [r1]
 8000768:	491f      	ldr	r1, [pc, #124]	; (80007e8 <slctCntlFromDrvMode+0xcc>)
 800076a:	4820      	ldr	r0, [pc, #128]	; (80007ec <slctCntlFromDrvMode+0xd0>)
 800076c:	edd0 0a00 	vldr	s1, [r0]
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <slctCntlFromDrvMode+0xd4>)
 8000772:	ed90 0a00 	vldr	s0, [r0]
 8000776:	a802      	add	r0, sp, #8
 8000778:	f000 fbee 	bl	8000f58 <VectorControlTasks>
			break;
 800077c:	e7e7      	b.n	800074e <slctCntlFromDrvMode+0x32>
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 800077e:	9101      	str	r1, [sp, #4]
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	2200      	movs	r2, #0
 8000786:	4916      	ldr	r1, [pc, #88]	; (80007e0 <slctCntlFromDrvMode+0xc4>)
 8000788:	edd1 1a00 	vldr	s3, [r1]
 800078c:	4915      	ldr	r1, [pc, #84]	; (80007e4 <slctCntlFromDrvMode+0xc8>)
 800078e:	ed91 1a00 	vldr	s2, [r1]
 8000792:	4915      	ldr	r1, [pc, #84]	; (80007e8 <slctCntlFromDrvMode+0xcc>)
 8000794:	4815      	ldr	r0, [pc, #84]	; (80007ec <slctCntlFromDrvMode+0xd0>)
 8000796:	edd0 0a00 	vldr	s1, [r0]
 800079a:	4815      	ldr	r0, [pc, #84]	; (80007f0 <slctCntlFromDrvMode+0xd4>)
 800079c:	ed90 0a00 	vldr	s0, [r0]
 80007a0:	a802      	add	r0, sp, #8
 80007a2:	f000 fbd9 	bl	8000f58 <VectorControlTasks>
			break;
 80007a6:	e7d2      	b.n	800074e <slctCntlFromDrvMode+0x32>
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 80007a8:	9101      	str	r1, [sp, #4]
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	461a      	mov	r2, r3
 80007b0:	490b      	ldr	r1, [pc, #44]	; (80007e0 <slctCntlFromDrvMode+0xc4>)
 80007b2:	edd1 1a00 	vldr	s3, [r1]
 80007b6:	490b      	ldr	r1, [pc, #44]	; (80007e4 <slctCntlFromDrvMode+0xc8>)
 80007b8:	ed91 1a00 	vldr	s2, [r1]
 80007bc:	490a      	ldr	r1, [pc, #40]	; (80007e8 <slctCntlFromDrvMode+0xcc>)
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <slctCntlFromDrvMode+0xd0>)
 80007c0:	edd0 0a00 	vldr	s1, [r0]
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <slctCntlFromDrvMode+0xd4>)
 80007c6:	ed90 0a00 	vldr	s0, [r0]
 80007ca:	a802      	add	r0, sp, #8
 80007cc:	f000 fbc4 	bl	8000f58 <VectorControlTasks>
			break;
 80007d0:	e7bd      	b.n	800074e <slctCntlFromDrvMode+0x32>
			gOffDuty(Duty, outputMode);
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff05 	bl	80005e2 <gOffDuty>
}
 80007d8:	e7b9      	b.n	800074e <slctCntlFromDrvMode+0x32>
 80007da:	bf00      	nop
 80007dc:	200000c8 	.word	0x200000c8
 80007e0:	200000c0 	.word	0x200000c0
 80007e4:	200000c4 	.word	0x200000c4
 80007e8:	200000a8 	.word	0x200000a8
 80007ec:	200000e4 	.word	0x200000e4
 80007f0:	200000e8 	.word	0x200000e8

080007f4 <Sequence>:
void Sequence(void){
 80007f4:	b538      	push	{r3, r4, r5, lr}
	if(sInitCnt < 500){
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <Sequence+0x7c>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007fe:	d228      	bcs.n	8000852 <Sequence+0x5e>
		sInitCnt++;
 8000800:	3301      	adds	r3, #1
 8000802:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <Sequence+0x7c>)
 8000804:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <Sequence+0x80>)
 8000808:	2202      	movs	r2, #2
 800080a:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <Sequence+0x84>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <Sequence+0x88>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
	slctElectAngleFromPosMode(sPosMode, &sElectAngle, &sElectAngVelo);
 8000818:	4c19      	ldr	r4, [pc, #100]	; (8000880 <Sequence+0x8c>)
 800081a:	4d1a      	ldr	r5, [pc, #104]	; (8000884 <Sequence+0x90>)
 800081c:	4622      	mov	r2, r4
 800081e:	4629      	mov	r1, r5
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <Sequence+0x80>)
 8000822:	7818      	ldrb	r0, [r3, #0]
 8000824:	f7ff ff2c 	bl	8000680 <slctElectAngleFromPosMode>
	gTheta = sElectAngle;
 8000828:	682a      	ldr	r2, [r5, #0]
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <Sequence+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
	gElectAngVelo = sElectAngVelo;
 800082e:	6822      	ldr	r2, [r4, #0]
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <Sequence+0x98>)
 8000832:	601a      	str	r2, [r3, #0]
	slctCntlFromDrvMode(sDrvMode, sDuty, sOutputMode);
 8000834:	4d16      	ldr	r5, [pc, #88]	; (8000890 <Sequence+0x9c>)
 8000836:	4c17      	ldr	r4, [pc, #92]	; (8000894 <Sequence+0xa0>)
 8000838:	462a      	mov	r2, r5
 800083a:	4621      	mov	r1, r4
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <Sequence+0x84>)
 800083e:	7818      	ldrb	r0, [r3, #0]
 8000840:	f7ff ff6c 	bl	800071c <slctCntlFromDrvMode>
	writeOutputMode(sOutputMode);
 8000844:	4628      	mov	r0, r5
 8000846:	f000 f8e1 	bl	8000a0c <writeOutputMode>
	writeDuty(sDuty);
 800084a:	4620      	mov	r0, r4
 800084c:	f000 f914 	bl	8000a78 <writeDuty>
}
 8000850:	bd38      	pop	{r3, r4, r5, pc}
	sElectAngVeloRef = 50.0f;//1000.0f * gVolume;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <Sequence+0xa4>)
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <Sequence+0xa8>)
 8000856:	6013      	str	r3, [r2, #0]
	sElectAngVeloRefRateLimit = sElectAngVeloRef;
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <Sequence+0x88>)
 800085a:	6013      	str	r3, [r2, #0]
	slctPosModeForSensorless(gButton1, &sPosMode);
 800085c:	4c10      	ldr	r4, [pc, #64]	; (80008a0 <Sequence+0xac>)
 800085e:	4905      	ldr	r1, [pc, #20]	; (8000874 <Sequence+0x80>)
 8000860:	7820      	ldrb	r0, [r4, #0]
 8000862:	f7ff fed9 	bl	8000618 <slctPosModeForSensorless>
	slctDrvModeForSensorless(gButton1, &sDrvMode);
 8000866:	4904      	ldr	r1, [pc, #16]	; (8000878 <Sequence+0x84>)
 8000868:	7820      	ldrb	r0, [r4, #0]
 800086a:	f7ff fee9 	bl	8000640 <slctDrvModeForSensorless>
 800086e:	e7d3      	b.n	8000818 <Sequence+0x24>
 8000870:	200000ec 	.word	0x200000ec
 8000874:	200000f3 	.word	0x200000f3
 8000878:	200000cc 	.word	0x200000cc
 800087c:	200000e4 	.word	0x200000e4
 8000880:	200000dc 	.word	0x200000dc
 8000884:	200000e8 	.word	0x200000e8
 8000888:	200000bc 	.word	0x200000bc
 800088c:	20000094 	.word	0x20000094
 8000890:	200000f0 	.word	0x200000f0
 8000894:	200000d0 	.word	0x200000d0
 8000898:	42480000 	.word	0x42480000
 800089c:	200000e0 	.word	0x200000e0
 80008a0:	20000090 	.word	0x20000090

080008a4 <readButton1>:
#include "SignalReadWrite.h"


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 80008a4:	b500      	push	{lr}
 80008a6:	b083      	sub	sp, #12
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80008a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <readButton1+0x1c>)
 80008ae:	f003 fbb5 	bl	800401c <HAL_GPIO_ReadPin>
 80008b2:	f88d 0007 	strb.w	r0, [sp, #7]
	return B1;
 80008b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80008ba:	b003      	add	sp, #12
 80008bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c0:	48000800 	.word	0x48000800

080008c4 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 80008c4:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 80008c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008cc:	9301      	str	r3, [sp, #4]

	return inputCaptureCnt;
 80008ce:	9801      	ldr	r0, [sp, #4]
}
 80008d0:	b002      	add	sp, #8
 80008d2:	4770      	bx	lr

080008d4 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 80008d4:	ee07 0a90 	vmov	s15, r0
 80008d8:	ee00 1a10 	vmov	s0, r1
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 80008dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 80008e2:	1c53      	adds	r3, r2, #1
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ee07 3a10 	vmov	s14, r3


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 80008ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ee:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80008f2:	ee77 7ac0 	vsub.f32	s15, s15, s0

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 80008f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80008fa:	eeb1 7a47 	vneg.f32	s14, s14
 80008fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	dd05      	ble.n	8000914 <readTimeInterval+0x40>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000908:	ee07 2a10 	vmov	s14, r2
 800090c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000910:	ee77 7a87 	vadd.f32	s15, s15, s14

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}
 8000914:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000920 <readTimeInterval+0x4c>
 8000918:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	4d221fe8 	.word	0x4d221fe8

08000924 <readVolume>:
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <readVolume+0x2c>)
 8000926:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800092a:	3b63      	subs	r3, #99	; 0x63
 800092c:	ee00 3a10 	vmov	s0, r3
 8000930:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000934:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000954 <readVolume+0x30>
 8000938:	ee20 0a27 	vmul.f32	s0, s0, s15
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 800093c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000944:	d400      	bmi.n	8000948 <readVolume+0x24>
	return Volume;
}
 8000946:	4770      	bx	lr
	if( Volume < 0) Volume = 0;
 8000948:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000958 <readVolume+0x34>
	return Volume;
 800094c:	e7fb      	b.n	8000946 <readVolume+0x22>
 800094e:	bf00      	nop
 8000950:	2000008c 	.word	0x2000008c
 8000954:	398007f8 	.word	0x398007f8
 8000958:	00000000 	.word	0x00000000

0800095c <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 800095c:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 800095e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000962:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000966:	b29b      	uxth	r3, r3
 8000968:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 800096a:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 800096e:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000970:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000974:	8082      	strh	r2, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800097e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80009cc <readCurrent+0x70>
 8000982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000986:	eddf 6a12 	vldr	s13, [pc, #72]	; 80009d0 <readCurrent+0x74>
 800098a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800098e:	edc1 7a00 	vstr	s15, [r1]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000992:	8843      	ldrh	r3, [r0, #2]
 8000994:	ee07 3a10 	vmov	s14, r3
 8000998:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800099c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80009d4 <readCurrent+0x78>
 80009a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80009a8:	ed81 7a01 	vstr	s14, [r1, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 80009ac:	8883      	ldrh	r3, [r0, #4]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80009d8 <readCurrent+0x7c>
 80009ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009c2:	edc1 7a02 	vstr	s15, [r1, #8]
}
 80009c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	44f7e000 	.word	0x44f7e000
 80009d0:	bc71f4bc 	.word	0xbc71f4bc
 80009d4:	44f8e000 	.word	0x44f8e000
 80009d8:	44fbc000 	.word	0x44fbc000

080009dc <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 80009dc:	b538      	push	{r3, r4, r5, lr}
 80009de:	4604      	mov	r4, r0
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 80009e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f003 fb18 	bl	800401c <HAL_GPIO_ReadPin>
 80009ec:	7020      	strb	r0, [r4, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 80009ee:	4d06      	ldr	r5, [pc, #24]	; (8000a08 <readHallSignal+0x2c>)
 80009f0:	2108      	movs	r1, #8
 80009f2:	4628      	mov	r0, r5
 80009f4:	f003 fb12 	bl	800401c <HAL_GPIO_ReadPin>
 80009f8:	7060      	strb	r0, [r4, #1]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	4628      	mov	r0, r5
 8000a00:	f003 fb0c 	bl	800401c <HAL_GPIO_ReadPin>
 8000a04:	70a0      	strb	r0, [r4, #2]
}
 8000a06:	bd38      	pop	{r3, r4, r5, pc}
 8000a08:	48000400 	.word	0x48000400

08000a0c <writeOutputMode>:

void writeOutputMode(int8_t* outputMode){
 8000a0c:	b510      	push	{r4, lr}
 8000a0e:	4604      	mov	r4, r0

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000a10:	f990 3000 	ldrsb.w	r3, [r0]
 8000a14:	b9c3      	cbnz	r3, 8000a48 <writeOutputMode+0x3c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <writeOutputMode+0x68>)
 8000a1e:	f003 fb04 	bl	800402a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000a22:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000a26:	b9b3      	cbnz	r3, 8000a56 <writeOutputMode+0x4a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a2e:	4811      	ldr	r0, [pc, #68]	; (8000a74 <writeOutputMode+0x68>)
 8000a30:	f003 fafb 	bl	800402a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000a34:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8000a38:	b9a3      	cbnz	r3, 8000a64 <writeOutputMode+0x58>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <writeOutputMode+0x68>)
 8000a42:	f003 faf2 	bl	800402a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000a46:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <writeOutputMode+0x68>)
 8000a50:	f003 faeb 	bl	800402a <HAL_GPIO_WritePin>
 8000a54:	e7e5      	b.n	8000a22 <writeOutputMode+0x16>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <writeOutputMode+0x68>)
 8000a5e:	f003 fae4 	bl	800402a <HAL_GPIO_WritePin>
 8000a62:	e7e7      	b.n	8000a34 <writeOutputMode+0x28>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6a:	4802      	ldr	r0, [pc, #8]	; (8000a74 <writeOutputMode+0x68>)
 8000a6c:	f003 fadd 	bl	800402a <HAL_GPIO_WritePin>
}
 8000a70:	e7e9      	b.n	8000a46 <writeOutputMode+0x3a>
 8000a72:	bf00      	nop
 8000a74:	48000800 	.word	0x48000800

08000a78 <writeDuty>:

void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000a78:	ed90 7a00 	vldr	s14, [r0]
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <writeDuty+0x4c>)
 8000a7e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8000a92:	ed90 7a01 	vldr	s14, [r0, #4]
 8000a96:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8000aaa:	ed90 7a02 	vldr	s14, [r0, #8]
 8000aae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000abe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8000ac2:	4770      	bx	lr
 8000ac4:	40012c00 	.word	0x40012c00

08000ac8 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8000ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000acc:	ed2d 8b02 	vpush	{d8}
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	460e      	mov	r6, r1
 8000ad4:	4615      	mov	r5, r2
	float Ki_PLL;
	float Ts_PLL;
	float timeInterval;

	// Read Hall Signals
	readHallSignal(gHall);
 8000ad6:	488b      	ldr	r0, [pc, #556]	; (8000d04 <calcElectAngle+0x23c>)
 8000ad8:	f7ff ff80 	bl	80009dc <readHallSignal>

	// Hold & Read Input Capture Count
	gInputCaptureCnt_pre = gInputCaptureCnt;
 8000adc:	4f8a      	ldr	r7, [pc, #552]	; (8000d08 <calcElectAngle+0x240>)
 8000ade:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8000d74 <calcElectAngle+0x2ac>
 8000ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ae6:	603b      	str	r3, [r7, #0]
	gInputCaptureCnt = readInputCaptureCnt();
 8000ae8:	f7ff feec 	bl	80008c4 <readInputCaptureCnt>
 8000aec:	f8c8 0000 	str.w	r0, [r8]

	// Calculate Electrical Freq From Input Capture Count
	if(gInputCaptureCnt != gInputCaptureCnt_pre){
 8000af0:	6839      	ldr	r1, [r7, #0]
 8000af2:	4288      	cmp	r0, r1
 8000af4:	d108      	bne.n	8000b08 <calcElectAngle+0x40>
		if( timeInterval > 0.0001f)
			gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);

		sNoInputCaptureCnt = 0;
	}
	else if(sNoInputCaptureCnt < 2000)
 8000af6:	4b85      	ldr	r3, [pc, #532]	; (8000d0c <calcElectAngle+0x244>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000afe:	d24e      	bcs.n	8000b9e <calcElectAngle+0xd6>
		sNoInputCaptureCnt ++;
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a82      	ldr	r2, [pc, #520]	; (8000d0c <calcElectAngle+0x244>)
 8000b04:	8013      	strh	r3, [r2, #0]
 8000b06:	e00b      	b.n	8000b20 <calcElectAngle+0x58>
		timeInterval = readTimeInterval(gInputCaptureCnt, gInputCaptureCnt_pre);
 8000b08:	f7ff fee4 	bl	80008d4 <readTimeInterval>
		if( timeInterval > 0.0001f)
 8000b0c:	eddf 7a80 	vldr	s15, [pc, #512]	; 8000d10 <calcElectAngle+0x248>
 8000b10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	dc35      	bgt.n	8000b86 <calcElectAngle+0xbe>
		sNoInputCaptureCnt = 0;
 8000b1a:	4b7c      	ldr	r3, [pc, #496]	; (8000d0c <calcElectAngle+0x244>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	801a      	strh	r2, [r3, #0]
	else
		gElectFreq = 0;


	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 8000b20:	4b7c      	ldr	r3, [pc, #496]	; (8000d14 <calcElectAngle+0x24c>)
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8000b2a:	ee67 8aa8 	vmul.f32	s17, s15, s17
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8000b2e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8000d18 <calcElectAngle+0x250>
 8000b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b36:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b42:	ee87 8a27 	vdiv.f32	s16, s14, s15
	Kp_PLL = wc_PLL;
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000b46:	eddf 7a75 	vldr	s15, [pc, #468]	; 8000d1c <calcElectAngle+0x254>
 8000b4a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000b4e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8000b52:	ee27 8a88 	vmul.f32	s16, s15, s16


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8000b56:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <calcElectAngle+0x258>)
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b72      	ldr	r3, [pc, #456]	; (8000d24 <calcElectAngle+0x25c>)
 8000b5c:	701a      	strb	r2, [r3, #0]
static uint8_t calcVoltageMode(uint8_t* Hall){
	uint8_t hallInput;
	uint8_t voltageMode = 0;

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000b5e:	4869      	ldr	r0, [pc, #420]	; (8000d04 <calcElectAngle+0x23c>)
 8000b60:	7883      	ldrb	r3, [r0, #2]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	7841      	ldrb	r1, [r0, #1]
 8000b68:	0049      	lsls	r1, r1, #1
 8000b6a:	b2c9      	uxtb	r1, r1
 8000b6c:	440b      	add	r3, r1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	7801      	ldrb	r1, [r0, #0]
 8000b72:	440b      	add	r3, r1
 8000b74:	b2db      	uxtb	r3, r3

	// Decode digital signal to voltage mode
	switch(hallInput){
 8000b76:	1e59      	subs	r1, r3, #1
 8000b78:	2905      	cmp	r1, #5
 8000b7a:	d81c      	bhi.n	8000bb6 <calcElectAngle+0xee>
 8000b7c:	e8df f001 	tbb	[pc, r1]
 8000b80:	151e1d19 	.word	0x151e1d19
 8000b84:	1317      	.short	0x1317
			gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8000b86:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8000d28 <calcElectAngle+0x260>
 8000b8a:	eef0 0a40 	vmov.f32	s1, s0
 8000b8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b92:	f7ff fcd0 	bl	8000536 <gfDivideAvoidZero>
 8000b96:	4b65      	ldr	r3, [pc, #404]	; (8000d2c <calcElectAngle+0x264>)
 8000b98:	ed83 0a00 	vstr	s0, [r3]
 8000b9c:	e7bd      	b.n	8000b1a <calcElectAngle+0x52>
		gElectFreq = 0;
 8000b9e:	4b63      	ldr	r3, [pc, #396]	; (8000d2c <calcElectAngle+0x264>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e7bc      	b.n	8000b20 <calcElectAngle+0x58>
		break;
	  case 2:
		voltageMode = 4;
		break;
	  case 6:
		voltageMode = 5;
 8000ba6:	2305      	movs	r3, #5
		break;
 8000ba8:	e008      	b.n	8000bbc <calcElectAngle+0xf4>
	  case 4:
		voltageMode = 6;
 8000baa:	2306      	movs	r3, #6
		break;
 8000bac:	e006      	b.n	8000bbc <calcElectAngle+0xf4>
	  case 5:
		voltageMode = 1;
 8000bae:	2301      	movs	r3, #1
		break;
 8000bb0:	e004      	b.n	8000bbc <calcElectAngle+0xf4>
	  case 1:
		voltageMode = 2;
 8000bb2:	2302      	movs	r3, #2
		break;
 8000bb4:	e002      	b.n	8000bbc <calcElectAngle+0xf4>
	  default :
		voltageMode = 0;
 8000bb6:	2300      	movs	r3, #0
	  break;
 8000bb8:	e000      	b.n	8000bbc <calcElectAngle+0xf4>
		voltageMode = 4;
 8000bba:	2304      	movs	r3, #4
	sVoltageMode = calcVoltageMode(gHall);
 8000bbc:	4958      	ldr	r1, [pc, #352]	; (8000d20 <calcElectAngle+0x258>)
 8000bbe:	700b      	strb	r3, [r1, #0]
	sElectAngleActual_pre = sElectAngleActual;
 8000bc0:	495b      	ldr	r1, [pc, #364]	; (8000d30 <calcElectAngle+0x268>)
 8000bc2:	6808      	ldr	r0, [r1, #0]
 8000bc4:	495b      	ldr	r1, [pc, #364]	; (8000d34 <calcElectAngle+0x26c>)
 8000bc6:	6008      	str	r0, [r1, #0]
	return voltageMode;
}
static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8000bc8:	1a9a      	subs	r2, r3, r2
 8000bca:	b2d1      	uxtb	r1, r2
 8000bcc:	b252      	sxtb	r2, r2

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8000bce:	2a01      	cmp	r2, #1
 8000bd0:	dd11      	ble.n	8000bf6 <calcElectAngle+0x12e>
		voltageMode_Diff -= 6;
 8000bd2:	1f8a      	subs	r2, r1, #6
 8000bd4:	b252      	sxtb	r2, r2
	else if(voltageMode_Diff < -1)
		voltageMode_Diff += 6;

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8000bd6:	b10a      	cbz	r2, 8000bdc <calcElectAngle+0x114>
		*rotDir = voltageMode_Diff;
 8000bd8:	4957      	ldr	r1, [pc, #348]	; (8000d38 <calcElectAngle+0x270>)
 8000bda:	700a      	strb	r2, [r1, #0]
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000bdc:	4a56      	ldr	r2, [pc, #344]	; (8000d38 <calcElectAngle+0x270>)
 8000bde:	f992 2000 	ldrsb.w	r2, [r2]
 8000be2:	ee00 2a10 	vmov	s0, r2
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 8000be6:	3b01      	subs	r3, #1
 8000be8:	2b05      	cmp	r3, #5
 8000bea:	d80a      	bhi.n	8000c02 <calcElectAngle+0x13a>
 8000bec:	e8df f003 	tbb	[pc, r3]
 8000bf0:	18091512 	.word	0x18091512
 8000bf4:	0f0c      	.short	0x0f0c
	else if(voltageMode_Diff < -1)
 8000bf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000bfa:	daec      	bge.n	8000bd6 <calcElectAngle+0x10e>
		voltageMode_Diff += 6;
 8000bfc:	1d8a      	adds	r2, r1, #6
 8000bfe:	b252      	sxtb	r2, r2
 8000c00:	e7e9      	b.n	8000bd6 <calcElectAngle+0x10e>
		switch(voltageMode){
 8000c02:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8000d3c <calcElectAngle+0x274>
 8000c06:	e00d      	b.n	8000c24 <calcElectAngle+0x15c>
			break;
		  case 4:
			  electAngle_Center = PIDIV3;
			break;
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8000c08:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8000d40 <calcElectAngle+0x278>
			break;
 8000c0c:	e00a      	b.n	8000c24 <calcElectAngle+0x15c>
		  case 6:
			  electAngle_Center = PI;
 8000c0e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8000d44 <calcElectAngle+0x27c>
			break;
 8000c12:	e007      	b.n	8000c24 <calcElectAngle+0x15c>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 8000c14:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8000d48 <calcElectAngle+0x280>
			break;
 8000c18:	e004      	b.n	8000c24 <calcElectAngle+0x15c>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8000c1a:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8000d4c <calcElectAngle+0x284>
			break;
 8000c1e:	e001      	b.n	8000c24 <calcElectAngle+0x15c>
			  electAngle_Center = PIDIV3;
 8000c20:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8000d50 <calcElectAngle+0x288>
		  default :
			  electAngle_Center = 0.0f;
		  break;
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8000c24:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000c28:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000d54 <calcElectAngle+0x28c>
 8000c2c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000c30:	ee37 0ac0 	vsub.f32	s0, s15, s0
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000c34:	4f3e      	ldr	r7, [pc, #248]	; (8000d30 <calcElectAngle+0x268>)
 8000c36:	ed87 0a00 	vstr	s0, [r7]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000c3a:	f7ff fc9b 	bl	8000574 <gfWrapTheta>
 8000c3e:	ed87 0a00 	vstr	s0, [r7]
	sFlgPLL_pre = sFlgPLL;
 8000c42:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <calcElectAngle+0x290>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	4945      	ldr	r1, [pc, #276]	; (8000d5c <calcElectAngle+0x294>)
 8000c48:	700a      	strb	r2, [r1, #0]
	sFlgPLL = flgPLL;
 8000c4a:	701c      	strb	r4, [r3, #0]
	if(flgPLL == 1){
 8000c4c:	2c01      	cmp	r4, #1
 8000c4e:	d016      	beq.n	8000c7e <calcElectAngle+0x1b6>
		sElectAngleEstimate = sElectAngleActual;
 8000c50:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <calcElectAngle+0x298>)
 8000c52:	ed83 0a00 	vstr	s0, [r3]
		sElectAngVeloEstimate = gElectFreq * TWOPI;
 8000c56:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <calcElectAngle+0x264>)
 8000c58:	edd3 7a00 	vldr	s15, [r3]
 8000c5c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000d64 <calcElectAngle+0x29c>
 8000c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <calcElectAngle+0x24c>)
 8000c66:	edc3 7a00 	vstr	s15, [r3]
	*electAngle = sElectAngleEstimate;
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <calcElectAngle+0x298>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6033      	str	r3, [r6, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8000c70:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <calcElectAngle+0x24c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	602b      	str	r3, [r5, #0]
}
 8000c76:	ecbd 8b02 	vpop	{d8}
 8000c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ( sFlgPLL_pre == 0 ){
 8000c7e:	b97a      	cbnz	r2, 8000ca0 <calcElectAngle+0x1d8>
			sElectAngVeloEstimate = gElectFreq * TWOPI;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <calcElectAngle+0x264>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000d64 <calcElectAngle+0x29c>
 8000c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <calcElectAngle+0x24c>)
 8000c90:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <calcElectAngle+0x2a0>)
 8000c96:	edc3 7a00 	vstr	s15, [r3]
			sElectAngleEstimate = sElectAngleActual;
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <calcElectAngle+0x298>)
 8000c9c:	ed83 0a00 	vstr	s0, [r3]
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <calcElectAngle+0x24c>)
 8000ca2:	ed93 7a00 	vldr	s14, [r3]
 8000ca6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8000d6c <calcElectAngle+0x2a4>
 8000caa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8000cae:	4c2c      	ldr	r4, [pc, #176]	; (8000d60 <calcElectAngle+0x298>)
 8000cb0:	edd4 7a00 	vldr	s15, [r4]
 8000cb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cb8:	ed84 0a00 	vstr	s0, [r4]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000cbc:	f7ff fc5a 	bl	8000574 <gfWrapTheta>
 8000cc0:	ed84 0a00 	vstr	s0, [r4]
		if( sElectAngleActual != sElectAngleActual_pre){
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <calcElectAngle+0x268>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <calcElectAngle+0x26c>)
 8000ccc:	ed93 7a00 	vldr	s14, [r3]
 8000cd0:	eef4 7a47 	vcmp.f32	s15, s14
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	d0c7      	beq.n	8000c6a <calcElectAngle+0x1a2>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000cda:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8000cde:	4c24      	ldr	r4, [pc, #144]	; (8000d70 <calcElectAngle+0x2a8>)
 8000ce0:	ed84 0a00 	vstr	s0, [r4]
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000ce4:	f7ff fc46 	bl	8000574 <gfWrapTheta>
 8000ce8:	ed84 0a00 	vstr	s0, [r4]
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000cec:	481e      	ldr	r0, [pc, #120]	; (8000d68 <calcElectAngle+0x2a0>)
 8000cee:	eeb0 1a48 	vmov.f32	s2, s16
 8000cf2:	eef0 0a68 	vmov.f32	s1, s17
 8000cf6:	f7ff fc11 	bl	800051c <cfPhaseLockedLoop>
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <calcElectAngle+0x24c>)
 8000cfc:	ed83 0a00 	vstr	s0, [r3]
 8000d00:	e7b3      	b.n	8000c6a <calcElectAngle+0x1a2>
 8000d02:	bf00      	nop
 8000d04:	2000009c 	.word	0x2000009c
 8000d08:	200000a4 	.word	0x200000a4
 8000d0c:	20000110 	.word	0x20000110
 8000d10:	38d1b717 	.word	0x38d1b717
 8000d14:	200000f4 	.word	0x200000f4
 8000d18:	3e22f983 	.word	0x3e22f983
 8000d1c:	3e4ccccd 	.word	0x3e4ccccd
 8000d20:	20000113 	.word	0x20000113
 8000d24:	20000114 	.word	0x20000114
 8000d28:	31ca1db9 	.word	0x31ca1db9
 8000d2c:	20000098 	.word	0x20000098
 8000d30:	200000f8 	.word	0x200000f8
 8000d34:	200000fc 	.word	0x200000fc
 8000d38:	20000112 	.word	0x20000112
 8000d3c:	00000000 	.word	0x00000000
 8000d40:	40060a92 	.word	0x40060a92
 8000d44:	40490fdb 	.word	0x40490fdb
 8000d48:	c0060a92 	.word	0xc0060a92
 8000d4c:	bf860a92 	.word	0xbf860a92
 8000d50:	3f860a92 	.word	0x3f860a92
 8000d54:	3f060a92 	.word	0x3f060a92
 8000d58:	20000108 	.word	0x20000108
 8000d5c:	20000109 	.word	0x20000109
 8000d60:	20000104 	.word	0x20000104
 8000d64:	40c90fdb 	.word	0x40c90fdb
 8000d68:	2000010c 	.word	0x2000010c
 8000d6c:	4684d000 	.word	0x4684d000
 8000d70:	20000100 	.word	0x20000100
 8000d74:	200000a0 	.word	0x200000a0

08000d78 <OpenLoopTasks>:

	gLPF(sIdq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);

}

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float twoDivVdc, float* Duty, int8_t* outputMode){
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	ed2d 8b0a 	vpush	{d8-d12}
 8000d7e:	eeb0 ba40 	vmov.f32	s22, s0
 8000d82:	eef0 ba60 	vmov.f32	s23, s1
 8000d86:	eef0 9a41 	vmov.f32	s19, s2
 8000d8a:	460c      	mov	r4, r1
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	7013      	strb	r3, [r2, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8000d90:	7053      	strb	r3, [r2, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8000d92:	7093      	strb	r3, [r2, #2]
	sIdq_1000[0] = sIdq[0] * 1000.0f;
	sIdq_1000[1] = sIdq[1] * 1000.0f;
}

static void uvw2ab(float* uvw, float* ab){
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8000d94:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <OpenLoopTasks+0x1b4>)
 8000d96:	ed93 8a00 	vldr	s16, [r3]
 8000d9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d9e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8000da2:	ee67 7a09 	vmul.f32	s15, s14, s18
 8000da6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000daa:	edd3 7a02 	vldr	s15, [r3, #8]
 8000dae:	ee67 6a89 	vmul.f32	s13, s15, s18
 8000db2:	ee38 8a66 	vsub.f32	s16, s16, s13
 8000db6:	ed9f aa5e 	vldr	s20, [pc, #376]	; 8000f30 <OpenLoopTasks+0x1b8>
 8000dba:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <OpenLoopTasks+0x1bc>)
 8000dc0:	ed83 8a00 	vstr	s16, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8000dc4:	eddf aa5c 	vldr	s21, [pc, #368]	; 8000f38 <OpenLoopTasks+0x1c0>
 8000dc8:	ee67 8a2a 	vmul.f32	s17, s14, s21
 8000dcc:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8000dd0:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8000dd4:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8000dd8:	edc3 8a01 	vstr	s17, [r3, #4]
}

static void ab2dq(float theta, float* ab, float* dq){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8000ddc:	eeb0 0a60 	vmov.f32	s0, s1
 8000de0:	f005 fb7e 	bl	80064e0 <sinf>
 8000de4:	eeb0 ca40 	vmov.f32	s24, s0
	cosTheta = cosf(theta);
 8000de8:	eeb0 0a6b 	vmov.f32	s0, s23
 8000dec:	f005 fb34 	bl	8006458 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8000df0:	ee60 7a08 	vmul.f32	s15, s0, s16
 8000df4:	ee2c 7a28 	vmul.f32	s14, s24, s17
 8000df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dfc:	4d4f      	ldr	r5, [pc, #316]	; (8000f3c <OpenLoopTasks+0x1c4>)
 8000dfe:	edc5 7a00 	vstr	s15, [r5]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000e02:	ee28 8a4c 	vnmul.f32	s16, s16, s24
 8000e06:	ee60 8a28 	vmul.f32	s17, s0, s17
 8000e0a:	ee78 8a28 	vadd.f32	s17, s16, s17
 8000e0e:	edc5 8a01 	vstr	s17, [r5, #4]
	sVdq[0] = 0.0f;
 8000e12:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <OpenLoopTasks+0x1c8>)
 8000e14:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8000f44 <OpenLoopTasks+0x1cc>
 8000e18:	edc3 8a00 	vstr	s17, [r3]
	sVdq[1] = VamRef;
 8000e1c:	ed83 ba01 	vstr	s22, [r3, #4]
}

static void dq2ab(float theta, float* dq, float* ab){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8000e20:	eeb0 0a6b 	vmov.f32	s0, s23
 8000e24:	f005 fb5c 	bl	80064e0 <sinf>
 8000e28:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8000e2c:	eeb0 0a6b 	vmov.f32	s0, s23
 8000e30:	f005 fb12 	bl	8006458 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8000e34:	ee60 7a28 	vmul.f32	s15, s0, s17
 8000e38:	ee28 7a0b 	vmul.f32	s14, s16, s22
 8000e3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e40:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <OpenLoopTasks+0x1d0>)
 8000e42:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8000e46:	ee28 8a28 	vmul.f32	s16, s16, s17
 8000e4a:	ee20 0a0b 	vmul.f32	s0, s0, s22
 8000e4e:	ee38 8a00 	vadd.f32	s16, s16, s0
 8000e52:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8000e56:	ee27 0a8a 	vmul.f32	s0, s15, s20
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <OpenLoopTasks+0x1d4>)
 8000e5c:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8000e60:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8000e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e68:	ee28 8a2a 	vmul.f32	s16, s16, s21
 8000e6c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8000e70:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8000e74:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8000e78:	eeb1 7a40 	vneg.f32	s14, s0
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	edc3 7a02 	vstr	s15, [r3, #8]
}

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8000e84:	ee29 0a80 	vmul.f32	s0, s19, s0
 8000e88:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8000e8c:	ed93 1a01 	vldr	s2, [r3, #4]
 8000e90:	ee69 9a81 	vmul.f32	s19, s19, s2
 8000e94:	edc4 9a01 	vstr	s19, [r4, #4]
	Duty[2] = -Duty[0] - Duty[1];
 8000e98:	eeb1 1a40 	vneg.f32	s2, s0
 8000e9c:	ee71 9a69 	vsub.f32	s19, s2, s19
 8000ea0:	edc4 9a02 	vstr	s19, [r4, #8]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8000ea4:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000ea8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000eac:	f7ff fb86 	bl	80005bc <gUpperLowerLimit>
 8000eb0:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8000eb4:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000eb8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ebc:	ed94 0a01 	vldr	s0, [r4, #4]
 8000ec0:	f7ff fb7c 	bl	80005bc <gUpperLowerLimit>
 8000ec4:	ed84 0a01 	vstr	s0, [r4, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8000ec8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000ecc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ed0:	ed94 0a02 	vldr	s0, [r4, #8]
 8000ed4:	f7ff fb72 	bl	80005bc <gUpperLowerLimit>
 8000ed8:	ed84 0a02 	vstr	s0, [r4, #8]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8000edc:	edd4 7a00 	vldr	s15, [r4]
 8000ee0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000ee4:	ee77 7a89 	vadd.f32	s15, s15, s18
 8000ee8:	edc4 7a00 	vstr	s15, [r4]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8000eec:	edd4 7a01 	vldr	s15, [r4, #4]
 8000ef0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000ef4:	ee77 7a89 	vadd.f32	s15, s15, s18
 8000ef8:	edc4 7a01 	vstr	s15, [r4, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8000efc:	ee20 0a09 	vmul.f32	s0, s0, s18
 8000f00:	ee30 9a09 	vadd.f32	s18, s0, s18
 8000f04:	ed84 9a02 	vstr	s18, [r4, #8]
	sIdq_1000[0] = sIdq[0] * 1000.0f;
 8000f08:	ed95 7a00 	vldr	s14, [r5]
 8000f0c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000f50 <OpenLoopTasks+0x1d8>
 8000f10:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <OpenLoopTasks+0x1dc>)
 8000f16:	ed83 7a00 	vstr	s14, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 8000f1a:	edd5 7a01 	vldr	s15, [r5, #4]
 8000f1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f22:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000f26:	ecbd 8b0a 	vpop	{d8-d12}
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	200000a8 	.word	0x200000a8
 8000f30:	3f5105ec 	.word	0x3f5105ec
 8000f34:	2000012c 	.word	0x2000012c
 8000f38:	3f5db3d7 	.word	0x3f5db3d7
 8000f3c:	20000134 	.word	0x20000134
 8000f40:	20000168 	.word	0x20000168
 8000f44:	00000000 	.word	0x00000000
 8000f48:	2000015c 	.word	0x2000015c
 8000f4c:	20000178 	.word	0x20000178
 8000f50:	447a0000 	.word	0x447a0000
 8000f54:	2000013c 	.word	0x2000013c

08000f58 <VectorControlTasks>:
void VectorControlTasks(float *Idq_ref, float electAngle, float electAngVelo, float *Iuvw, float Vdc, float twoDivVdc, uint8_t flgFB, uint8_t flgPLL, float* Duty, int8_t* outputMode){
 8000f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f5c:	ed2d 8b08 	vpush	{d8-d11}
 8000f60:	b082      	sub	sp, #8
 8000f62:	4605      	mov	r5, r0
 8000f64:	eef0 9a40 	vmov.f32	s19, s0
 8000f68:	eeb0 8a60 	vmov.f32	s16, s1
 8000f6c:	4688      	mov	r8, r1
 8000f6e:	eef0 8a41 	vmov.f32	s17, s2
 8000f72:	eeb0 9a61 	vmov.f32	s18, s3
 8000f76:	4616      	mov	r6, r2
 8000f78:	461f      	mov	r7, r3
 8000f7a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000f7c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	sElectAngleErr = FluxObserver(sIdq, sVdq, *electAngleEstimate, sEdq);
 8000f80:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <VectorControlTasks+0x14c>)
 8000f82:	edd3 6a00 	vldr	s13, [r3]
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8000f86:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <VectorControlTasks+0x150>)
 8000f88:	edd2 7a00 	vldr	s15, [r2]
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <VectorControlTasks+0x154>)
 8000f8e:	edd3 0a00 	vldr	s1, [r3]
 8000f92:	eddf 5a47 	vldr	s11, [pc, #284]	; 80010b0 <VectorControlTasks+0x158>
 8000f96:	ee20 0aa5 	vmul.f32	s0, s1, s11
 8000f9a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000f9e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80010b4 <VectorControlTasks+0x15c>
 8000fa2:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000fa6:	ed93 6a01 	vldr	s12, [r3, #4]
 8000faa:	ee26 0a86 	vmul.f32	s0, s13, s12
 8000fae:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <VectorControlTasks+0x160>)
 8000fb4:	ed83 0a00 	vstr	s0, [r3]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8000fb8:	ed92 7a01 	vldr	s14, [r2, #4]
 8000fbc:	ee26 6a25 	vmul.f32	s12, s12, s11
 8000fc0:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000fc4:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8000fc8:	ee77 0a66 	vsub.f32	s1, s14, s13
 8000fcc:	edc3 0a01 	vstr	s1, [r3, #4]
	angleErr = atan2f(-1.0f * sEdq[0], sEdq[1]); //推定q軸を基準とした実q軸との誤差を算出
 8000fd0:	eeb1 0a40 	vneg.f32	s0, s0
 8000fd4:	f005 faca 	bl	800656c <atan2f>
	sElectAngleErr = FluxObserver(sIdq, sVdq, *electAngleEstimate, sEdq);
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <VectorControlTasks+0x164>)
 8000fda:	ed83 0a00 	vstr	s0, [r3]

	if( flgPLL == 0){
 8000fde:	2f00      	cmp	r7, #0
 8000fe0:	d13c      	bne.n	800105c <VectorControlTasks+0x104>
		*electAngVeloEstimate = electAngVelo;
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <VectorControlTasks+0x168>)
 8000fe4:	ed83 8a00 	vstr	s16, [r3]
		*electAngleEstimate = electAngle;
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <VectorControlTasks+0x14c>)
 8000fea:	edc3 9a00 	vstr	s19, [r3]
		sIntegral_ElectAngleErr_Ki = electAngVelo;
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <VectorControlTasks+0x16c>)
 8000ff0:	ed83 8a00 	vstr	s16, [r3]
	theta = sElectAngleEstimate;
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <VectorControlTasks+0x14c>)
 8000ff6:	ed93 aa00 	vldr	s20, [r3]
	omega = sElectAngVeloEstimate;
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <VectorControlTasks+0x168>)
 8000ffc:	edd3 aa00 	vldr	s21, [r3]
	if ( flgFB == 0 ){
 8001000:	2e00      	cmp	r6, #0
 8001002:	d175      	bne.n	80010f0 <VectorControlTasks+0x198>
		Vq_ref_open = Vdc * SQRT3DIV2_DIV2 * gVolume;
 8001004:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80010c8 <VectorControlTasks+0x170>
 8001008:	ee68 8a81 	vmul.f32	s17, s17, s2
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <VectorControlTasks+0x174>)
 800100e:	ed93 1a00 	vldr	s2, [r3]
 8001012:	ee68 8a81 	vmul.f32	s17, s17, s2
		OpenLoopTasks(Vq_ref_open, theta, Iuvw, twoDivVdc, Duty, outputMode);
 8001016:	464a      	mov	r2, r9
 8001018:	4621      	mov	r1, r4
 800101a:	eeb0 1a49 	vmov.f32	s2, s18
 800101e:	4640      	mov	r0, r8
 8001020:	eef0 0a4a 	vmov.f32	s1, s20
 8001024:	eeb0 0a68 	vmov.f32	s0, s17
 8001028:	f7ff fea6 	bl	8000d78 <OpenLoopTasks>
		sVdq_i[0] = 0.0f;
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <VectorControlTasks+0x178>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
		sVdq_i[1] = Vq_ref_open;
 8001032:	edc3 8a01 	vstr	s17, [r3, #4]
		sIq_ref_LPF = sIq_LPF;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <VectorControlTasks+0x17c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <VectorControlTasks+0x180>)
 800103c:	601a      	str	r2, [r3, #0]
	gLPF(sIdq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 800103e:	4825      	ldr	r0, [pc, #148]	; (80010d4 <VectorControlTasks+0x17c>)
 8001040:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80010dc <VectorControlTasks+0x184>
 8001044:	eddf 0a26 	vldr	s1, [pc, #152]	; 80010e0 <VectorControlTasks+0x188>
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <VectorControlTasks+0x154>)
 800104a:	ed93 0a01 	vldr	s0, [r3, #4]
 800104e:	f7ff fad1 	bl	80005f4 <gLPF>
}
 8001052:	b002      	add	sp, #8
 8001054:	ecbd 8b08 	vpop	{d8-d11}
 8001058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Ts_PLL = CARRIERCYCLE;
		Kp_PLL = wc_PLL;
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;

		// Estimate Electrical Angle & Velocity using PLL
		*electAngleEstimate += (*electAngVeloEstimate) * CARRIERCYCLE;
 800105c:	f8df a060 	ldr.w	sl, [pc, #96]	; 80010c0 <VectorControlTasks+0x168>
 8001060:	ed9a 7a00 	vldr	s14, [sl]
 8001064:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80010e4 <VectorControlTasks+0x18c>
 8001068:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800106c:	4f0d      	ldr	r7, [pc, #52]	; (80010a4 <VectorControlTasks+0x14c>)
 800106e:	edd7 7a00 	vldr	s15, [r7]
 8001072:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001076:	ed87 0a00 	vstr	s0, [r7]
		*electAngleEstimate = gfWrapTheta(*electAngleEstimate);
 800107a:	f7ff fa7b 	bl	8000574 <gfWrapTheta>
 800107e:	ed87 0a00 	vstr	s0, [r7]

		// wrap Electrical Angle Err
		sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001082:	4f0e      	ldr	r7, [pc, #56]	; (80010bc <VectorControlTasks+0x164>)
 8001084:	ed97 0a00 	vldr	s0, [r7]
 8001088:	f7ff fa74 	bl	8000574 <gfWrapTheta>
 800108c:	ed87 0a00 	vstr	s0, [r7]

		//PLL
		*electAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <VectorControlTasks+0x16c>)
 8001092:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80010e8 <VectorControlTasks+0x190>
 8001096:	eddf 0a15 	vldr	s1, [pc, #84]	; 80010ec <VectorControlTasks+0x194>
 800109a:	f7ff fa3f 	bl	800051c <cfPhaseLockedLoop>
 800109e:	ed8a 0a00 	vstr	s0, [sl]
 80010a2:	e7a7      	b.n	8000ff4 <VectorControlTasks+0x9c>
 80010a4:	20000128 	.word	0x20000128
 80010a8:	20000168 	.word	0x20000168
 80010ac:	20000134 	.word	0x20000134
 80010b0:	3cf5c28f 	.word	0x3cf5c28f
 80010b4:	3849539c 	.word	0x3849539c
 80010b8:	20000118 	.word	0x20000118
 80010bc:	20000124 	.word	0x20000124
 80010c0:	20000120 	.word	0x20000120
 80010c4:	2000014c 	.word	0x2000014c
 80010c8:	3f1cc471 	.word	0x3f1cc471
 80010cc:	200000c8 	.word	0x200000c8
 80010d0:	20000170 	.word	0x20000170
 80010d4:	20000150 	.word	0x20000150
 80010d8:	20000154 	.word	0x20000154
 80010dc:	3876b949 	.word	0x3876b949
 80010e0:	42fb3333 	.word	0x42fb3333
 80010e4:	4684d000 	.word	0x4684d000
 80010e8:	3f949fe9 	.word	0x3f949fe9
 80010ec:	439d1463 	.word	0x439d1463
		outputMode[0] = OUTPUTMODE_POSITIVE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	f889 3000 	strb.w	r3, [r9]
		outputMode[1] = OUTPUTMODE_POSITIVE;
 80010f6:	f889 3001 	strb.w	r3, [r9, #1]
		outputMode[2] = OUTPUTMODE_POSITIVE;
 80010fa:	f889 3002 	strb.w	r3, [r9, #2]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80010fe:	4baf      	ldr	r3, [pc, #700]	; (80013bc <VectorControlTasks+0x464>)
 8001100:	ed93 8a00 	vldr	s16, [r3]
 8001104:	edd3 7a01 	vldr	s15, [r3, #4]
 8001108:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800110c:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8001110:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001114:	ed93 7a02 	vldr	s14, [r3, #8]
 8001118:	ee67 6a26 	vmul.f32	s13, s14, s13
 800111c:	ee38 8a66 	vsub.f32	s16, s16, s13
 8001120:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80013c0 <VectorControlTasks+0x468>
 8001124:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001128:	4ba6      	ldr	r3, [pc, #664]	; (80013c4 <VectorControlTasks+0x46c>)
 800112a:	ed83 8a00 	vstr	s16, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 800112e:	eddf 9aa6 	vldr	s19, [pc, #664]	; 80013c8 <VectorControlTasks+0x470>
 8001132:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8001136:	ee67 9a29 	vmul.f32	s19, s14, s19
 800113a:	ee77 9ae9 	vsub.f32	s19, s15, s19
 800113e:	ee69 9aa6 	vmul.f32	s19, s19, s13
 8001142:	edc3 9a01 	vstr	s19, [r3, #4]
	sinTheta = sinf(theta);
 8001146:	eeb0 0a4a 	vmov.f32	s0, s20
 800114a:	f005 f9c9 	bl	80064e0 <sinf>
 800114e:	eeb0 ba40 	vmov.f32	s22, s0
	cosTheta = cosf(theta);
 8001152:	eeb0 0a4a 	vmov.f32	s0, s20
 8001156:	f005 f97f 	bl	8006458 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 800115a:	ee60 7a08 	vmul.f32	s15, s0, s16
 800115e:	ee2b 7a29 	vmul.f32	s14, s22, s19
 8001162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001166:	4e99      	ldr	r6, [pc, #612]	; (80013cc <VectorControlTasks+0x474>)
 8001168:	edc6 7a00 	vstr	s15, [r6]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 800116c:	ee28 8a4b 	vnmul.f32	s16, s16, s22
 8001170:	ee20 0a29 	vmul.f32	s0, s0, s19
 8001174:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001178:	ed86 8a01 	vstr	s16, [r6, #4]
		gLPF(Idq_ref[1], 62.8f, CARRIERCYCLE, &sIq_ref_LPF);
 800117c:	4f94      	ldr	r7, [pc, #592]	; (80013d0 <VectorControlTasks+0x478>)
 800117e:	4638      	mov	r0, r7
 8001180:	ed9f 1a94 	vldr	s2, [pc, #592]	; 80013d4 <VectorControlTasks+0x47c>
 8001184:	eddf 0a94 	vldr	s1, [pc, #592]	; 80013d8 <VectorControlTasks+0x480>
 8001188:	ed95 0a01 	vldr	s0, [r5, #4]
 800118c:	f7ff fa32 	bl	80005f4 <gLPF>
		Idq_ref[1] = sIq_ref_LPF; // zanteisyori
 8001190:	edd7 7a00 	vldr	s15, [r7]
 8001194:	edc5 7a01 	vstr	s15, [r5, #4]
	Ierr[0] = Igd_ref[0] - Igd[0];
 8001198:	ed95 7a00 	vldr	s14, [r5]
 800119c:	edd6 0a00 	vldr	s1, [r6]
 80011a0:	ee37 7a60 	vsub.f32	s14, s14, s1
 80011a4:	ed8d 7a00 	vstr	s14, [sp]
	Ierr[1] = Igd_ref[1] - Igd[1];
 80011a8:	ed96 0a01 	vldr	s0, [r6, #4]
 80011ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80011b0:	edcd 7a01 	vstr	s15, [sp, #4]
	sVdq_i[0] += Kig * Ierr[0];
 80011b4:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80013dc <VectorControlTasks+0x484>
 80011b8:	ee67 0a00 	vmul.f32	s1, s14, s0
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <VectorControlTasks+0x488>)
 80011be:	edd3 6a00 	vldr	s13, [r3]
 80011c2:	ee70 0aa6 	vadd.f32	s1, s1, s13
 80011c6:	edc3 0a00 	vstr	s1, [r3]
	sVdq_i[1] += Kid * Ierr[1];
 80011ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80011ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80011d2:	ee30 0a26 	vadd.f32	s0, s0, s13
 80011d6:	ed83 0a01 	vstr	s0, [r3, #4]
	Vgd[0] = Kp * Ierr[0] + sVdq_i[0];
 80011da:	eddf 6a82 	vldr	s13, [pc, #520]	; 80013e4 <VectorControlTasks+0x48c>
 80011de:	ee27 7a26 	vmul.f32	s14, s14, s13
 80011e2:	ee70 0a87 	vadd.f32	s1, s1, s14
 80011e6:	4e80      	ldr	r6, [pc, #512]	; (80013e8 <VectorControlTasks+0x490>)
 80011e8:	edc6 0a00 	vstr	s1, [r6]
	Vgd[1] = Kp * Ierr[1] + sVdq_i[1];// + Ke * electAngVelo;// + Vgd[1] + Kid * Ierr[1] + ;
 80011ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80011f4:	ed86 0a01 	vstr	s0, [r6, #4]
	Vphase = atan2f(Vgd[1], Vgd[0]);
 80011f8:	f005 f9b8 	bl	800656c <atan2f>
 80011fc:	eeb0 8a40 	vmov.f32	s16, s0
	amp2 = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001200:	edd6 7a00 	vldr	s15, [r6]
 8001204:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8001208:	edd6 7a01 	vldr	s15, [r6, #4]
 800120c:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(amp2);
 8001210:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001214:	f005 f9cc 	bl	80065b0 <sqrtf>
	*Vamp = calcAmpFromVect(Vgd);
 8001218:	4b74      	ldr	r3, [pc, #464]	; (80013ec <VectorControlTasks+0x494>)
 800121a:	ed83 0a00 	vstr	s0, [r3]
	VampLimit = Vdc * SQRT3DIV2_DIV2;
 800121e:	ed9f 1a74 	vldr	s2, [pc, #464]	; 80013f0 <VectorControlTasks+0x498>
 8001222:	ee68 8a81 	vmul.f32	s17, s17, s2
	if( *Vamp > VampLimit ){
 8001226:	eef4 8ac0 	vcmpe.f32	s17, s0
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	d51b      	bpl.n	8001268 <VectorControlTasks+0x310>
		Vgd[0] = VampLimit * cosf(Vphase);
 8001230:	eeb0 0a48 	vmov.f32	s0, s16
 8001234:	f005 f910 	bl	8006458 <cosf>
 8001238:	ee28 0a80 	vmul.f32	s0, s17, s0
 800123c:	4637      	mov	r7, r6
 800123e:	ed86 0a00 	vstr	s0, [r6]
		sVdq_i[0] = Vgd[0];
 8001242:	4e67      	ldr	r6, [pc, #412]	; (80013e0 <VectorControlTasks+0x488>)
 8001244:	ed86 0a00 	vstr	s0, [r6]
		Vgd[1] = VampLimit * sinf(Vphase);
 8001248:	eeb0 0a48 	vmov.f32	s0, s16
 800124c:	f005 f948 	bl	80064e0 <sinf>
 8001250:	ee68 8a80 	vmul.f32	s17, s17, s0
 8001254:	edc7 8a01 	vstr	s17, [r7, #4]
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;
 8001258:	eddf 7a66 	vldr	s15, [pc, #408]	; 80013f4 <VectorControlTasks+0x49c>
 800125c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8001260:	ee78 8aea 	vsub.f32	s17, s17, s21
 8001264:	edc6 8a01 	vstr	s17, [r6, #4]
		sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 8001268:	4b60      	ldr	r3, [pc, #384]	; (80013ec <VectorControlTasks+0x494>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	4b62      	ldr	r3, [pc, #392]	; (80013f8 <VectorControlTasks+0x4a0>)
 8001270:	ed93 7a00 	vldr	s14, [r3]
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001278:	eddf 8a51 	vldr	s17, [pc, #324]	; 80013c0 <VectorControlTasks+0x468>
 800127c:	ee67 7aa8 	vmul.f32	s15, s15, s17
		sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 8001280:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <VectorControlTasks+0x4a4>)
 8001282:	edc3 7a00 	vstr	s15, [r3]
	sinTheta = sinf(theta);
 8001286:	eeb0 0a4a 	vmov.f32	s0, s20
 800128a:	f005 f929 	bl	80064e0 <sinf>
 800128e:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8001292:	eeb0 0a4a 	vmov.f32	s0, s20
 8001296:	f005 f8df 	bl	8006458 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <VectorControlTasks+0x490>)
 800129c:	edd3 6a00 	vldr	s13, [r3]
 80012a0:	ee60 7a26 	vmul.f32	s15, s0, s13
 80012a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80012a8:	ee28 6a07 	vmul.f32	s12, s16, s14
 80012ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <VectorControlTasks+0x4a8>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 80012b6:	ee28 8a26 	vmul.f32	s16, s16, s13
 80012ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80012be:	ee38 8a00 	vadd.f32	s16, s16, s0
 80012c2:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80012c6:	ee27 0aa8 	vmul.f32	s0, s15, s17
 80012ca:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <VectorControlTasks+0x4ac>)
 80012cc:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 80012d0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80013c8 <VectorControlTasks+0x470>
 80012dc:	ee28 8a07 	vmul.f32	s16, s16, s14
 80012e0:	ee77 7a88 	vadd.f32	s15, s15, s16
 80012e4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80012e8:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 80012ec:	eeb1 7a40 	vneg.f32	s14, s0
 80012f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f4:	edc3 7a02 	vstr	s15, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 80012f8:	ee29 0a00 	vmul.f32	s0, s18, s0
 80012fc:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001300:	edd3 1a01 	vldr	s3, [r3, #4]
 8001304:	ee29 9a21 	vmul.f32	s18, s18, s3
 8001308:	ed84 9a01 	vstr	s18, [r4, #4]
	Duty[2] = -Duty[0] - Duty[1];
 800130c:	eef1 1a40 	vneg.f32	s3, s0
 8001310:	ee31 9ac9 	vsub.f32	s18, s3, s18
 8001314:	ed84 9a02 	vstr	s18, [r4, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001318:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800131c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001320:	f7ff f94c 	bl	80005bc <gUpperLowerLimit>
 8001324:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001328:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800132c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001330:	ed94 0a01 	vldr	s0, [r4, #4]
 8001334:	f7ff f942 	bl	80005bc <gUpperLowerLimit>
 8001338:	ed84 0a01 	vstr	s0, [r4, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 800133c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001340:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001344:	ed94 0a02 	vldr	s0, [r4, #8]
 8001348:	f7ff f938 	bl	80005bc <gUpperLowerLimit>
 800134c:	ed84 0a02 	vstr	s0, [r4, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001350:	ed94 7a00 	vldr	s14, [r4]
 8001354:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001360:	ed84 7a00 	vstr	s14, [r4]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001364:	ed94 7a01 	vldr	s14, [r4, #4]
 8001368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001370:	ed84 7a01 	vstr	s14, [r4, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001374:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001378:	ee30 0a27 	vadd.f32	s0, s0, s15
 800137c:	ed84 0a02 	vstr	s0, [r4, #8]
		sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 8001380:	ed95 7a00 	vldr	s14, [r5]
 8001384:	eddf 7a20 	vldr	s15, [pc, #128]	; 8001408 <VectorControlTasks+0x4b0>
 8001388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <VectorControlTasks+0x4b4>)
 800138e:	ed83 7a00 	vstr	s14, [r3]
		sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 8001392:	ed95 7a01 	vldr	s14, [r5, #4]
 8001396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139a:	ed83 7a01 	vstr	s14, [r3, #4]
		sIdq_1000[0] = sIdq[0] * 1000.0f;
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <VectorControlTasks+0x474>)
 80013a0:	ed92 7a00 	vldr	s14, [r2]
 80013a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <VectorControlTasks+0x4b8>)
 80013aa:	ed83 7a00 	vstr	s14, [r3]
		sIdq_1000[1] = sIdq[1] * 1000.0f;
 80013ae:	ed92 7a01 	vldr	s14, [r2, #4]
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	edc3 7a01 	vstr	s15, [r3, #4]
 80013ba:	e640      	b.n	800103e <VectorControlTasks+0xe6>
 80013bc:	200000a8 	.word	0x200000a8
 80013c0:	3f5105ec 	.word	0x3f5105ec
 80013c4:	2000012c 	.word	0x2000012c
 80013c8:	3f5db3d7 	.word	0x3f5db3d7
 80013cc:	20000134 	.word	0x20000134
 80013d0:	20000154 	.word	0x20000154
 80013d4:	3876b949 	.word	0x3876b949
 80013d8:	427b3333 	.word	0x427b3333
 80013dc:	38e8881c 	.word	0x38e8881c
 80013e0:	20000170 	.word	0x20000170
 80013e4:	3b45a6e5 	.word	0x3b45a6e5
 80013e8:	20000168 	.word	0x20000168
 80013ec:	20000164 	.word	0x20000164
 80013f0:	3f1cc471 	.word	0x3f1cc471
 80013f4:	3c449ba6 	.word	0x3c449ba6
 80013f8:	200000c0 	.word	0x200000c0
 80013fc:	20000158 	.word	0x20000158
 8001400:	2000015c 	.word	0x2000015c
 8001404:	20000178 	.word	0x20000178
 8001408:	447a0000 	.word	0x447a0000
 800140c:	20000144 	.word	0x20000144
 8001410:	2000013c 	.word	0x2000013c

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	2400      	movs	r4, #0
 800141a:	9405      	str	r4, [sp, #20]
 800141c:	9406      	str	r4, [sp, #24]
 800141e:	9407      	str	r4, [sp, #28]
 8001420:	9408      	str	r4, [sp, #32]
 8001422:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <MX_GPIO_Init+0xc8>)
 8001426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001428:	f042 0204 	orr.w	r2, r2, #4
 800142c:	64da      	str	r2, [r3, #76]	; 0x4c
 800142e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001430:	f002 0204 	and.w	r2, r2, #4
 8001434:	9201      	str	r2, [sp, #4]
 8001436:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800143a:	f042 0220 	orr.w	r2, r2, #32
 800143e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001442:	f002 0220 	and.w	r2, r2, #32
 8001446:	9202      	str	r2, [sp, #8]
 8001448:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	64da      	str	r2, [r3, #76]	; 0x4c
 8001452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001454:	f002 0201 	and.w	r2, r2, #1
 8001458:	9203      	str	r2, [sp, #12]
 800145a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800145e:	f042 0202 	orr.w	r2, r2, #2
 8001462:	64da      	str	r2, [r3, #76]	; 0x4c
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	9304      	str	r3, [sp, #16]
 800146c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146e:	4622      	mov	r2, r4
 8001470:	2120      	movs	r1, #32
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f002 fdd8 	bl	800402a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800147a:	4d19      	ldr	r5, [pc, #100]	; (80014e0 <MX_GPIO_Init+0xcc>)
 800147c:	4622      	mov	r2, r4
 800147e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001482:	4628      	mov	r0, r5
 8001484:	f002 fdd1 	bl	800402a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001492:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001496:	a905      	add	r1, sp, #20
 8001498:	4628      	mov	r0, r5
 800149a:	f002 fcd5 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149e:	2320      	movs	r3, #32
 80014a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2601      	movs	r6, #1
 80014a4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014aa:	a905      	add	r1, sp, #20
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f002 fcca 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 80014b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014b8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	a905      	add	r1, sp, #20
 80014c2:	4628      	mov	r0, r5
 80014c4:	f002 fcc0 	bl	8003e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c8:	4622      	mov	r2, r4
 80014ca:	4621      	mov	r1, r4
 80014cc:	2028      	movs	r0, #40	; 0x28
 80014ce:	f002 f991 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d2:	2028      	movs	r0, #40	; 0x28
 80014d4:	f002 f9c6 	bl	8003864 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d8:	b00a      	add	sp, #40	; 0x28
 80014da:	bd70      	pop	{r4, r5, r6, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000800 	.word	0x48000800

080014e4 <MX_DMA_Init>:
{
 80014e4:	b500      	push	{lr}
 80014e6:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_DMA_Init+0x50>)
 80014ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014ec:	f042 0204 	orr.w	r2, r2, #4
 80014f0:	649a      	str	r2, [r3, #72]	; 0x48
 80014f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014f4:	f002 0204 	and.w	r2, r2, #4
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	649a      	str	r2, [r3, #72]	; 0x48
 8001504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	4611      	mov	r1, r2
 8001512:	200b      	movs	r0, #11
 8001514:	f002 f96e 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001518:	200b      	movs	r0, #11
 800151a:	f002 f9a3 	bl	8003864 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	4611      	mov	r1, r2
 8001522:	200c      	movs	r0, #12
 8001524:	f002 f966 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001528:	200c      	movs	r0, #12
 800152a:	f002 f99b 	bl	8003864 <HAL_NVIC_EnableIRQ>
}
 800152e:	b003      	add	sp, #12
 8001530:	f85d fb04 	ldr.w	pc, [sp], #4
 8001534:	40021000 	.word	0x40021000

08001538 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153a:	e7fe      	b.n	800153a <Error_Handler+0x2>

0800153c <MX_LPUART1_UART_Init>:
{
 800153c:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 800153e:	4815      	ldr	r0, [pc, #84]	; (8001594 <MX_LPUART1_UART_Init+0x58>)
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_LPUART1_UART_Init+0x5c>)
 8001542:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001544:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001548:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	2300      	movs	r3, #0
 800154c:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800154e:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001550:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001552:	220c      	movs	r2, #12
 8001554:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001558:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155a:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155c:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800155e:	f004 fe86 	bl	800626e <HAL_UART_Init>
 8001562:	b970      	cbnz	r0, 8001582 <MX_LPUART1_UART_Init+0x46>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <MX_LPUART1_UART_Init+0x58>)
 8001568:	f004 fef9 	bl	800635e <HAL_UARTEx_SetTxFifoThreshold>
 800156c:	b958      	cbnz	r0, 8001586 <MX_LPUART1_UART_Init+0x4a>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <MX_LPUART1_UART_Init+0x58>)
 8001572:	f004 ff19 	bl	80063a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001576:	b940      	cbnz	r0, 800158a <MX_LPUART1_UART_Init+0x4e>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_LPUART1_UART_Init+0x58>)
 800157a:	f004 fed1 	bl	8006320 <HAL_UARTEx_DisableFifoMode>
 800157e:	b930      	cbnz	r0, 800158e <MX_LPUART1_UART_Init+0x52>
}
 8001580:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001582:	f7ff ffd9 	bl	8001538 <Error_Handler>
    Error_Handler();
 8001586:	f7ff ffd7 	bl	8001538 <Error_Handler>
    Error_Handler();
 800158a:	f7ff ffd5 	bl	8001538 <Error_Handler>
    Error_Handler();
 800158e:	f7ff ffd3 	bl	8001538 <Error_Handler>
 8001592:	bf00      	nop
 8001594:	200002c4 	.word	0x200002c4
 8001598:	40008000 	.word	0x40008000

0800159c <MX_ADC1_Init>:
{
 800159c:	b510      	push	{r4, lr}
 800159e:	b09a      	sub	sp, #104	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 80015a0:	2400      	movs	r4, #0
 80015a2:	9417      	str	r4, [sp, #92]	; 0x5c
 80015a4:	9418      	str	r4, [sp, #96]	; 0x60
 80015a6:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 80015a8:	2220      	movs	r2, #32
 80015aa:	4621      	mov	r1, r4
 80015ac:	a80f      	add	r0, sp, #60	; 0x3c
 80015ae:	f004 ff4b 	bl	8006448 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015b2:	223c      	movs	r2, #60	; 0x3c
 80015b4:	4621      	mov	r1, r4
 80015b6:	4668      	mov	r0, sp
 80015b8:	f004 ff46 	bl	8006448 <memset>
  hadc1.Instance = ADC1;
 80015bc:	4841      	ldr	r0, [pc, #260]	; (80016c4 <MX_ADC1_Init+0x128>)
 80015be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015c2:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015c8:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ca:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015cc:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 80015ce:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d4:	2204      	movs	r2, #4
 80015d6:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015d8:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015da:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 2;
 80015dc:	2202      	movs	r2, #2
 80015de:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e6:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015e8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015ec:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015ee:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f2:	f000 fd67 	bl	80020c4 <HAL_ADC_Init>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d155      	bne.n	80016a6 <MX_ADC1_Init+0x10a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015fe:	a917      	add	r1, sp, #92	; 0x5c
 8001600:	4830      	ldr	r0, [pc, #192]	; (80016c4 <MX_ADC1_Init+0x128>)
 8001602:	f001 fffb 	bl	80035fc <HAL_ADCEx_MultiModeConfigChannel>
 8001606:	2800      	cmp	r0, #0
 8001608:	d14f      	bne.n	80016aa <MX_ADC1_Init+0x10e>
  sConfig.Channel = ADC_CHANNEL_2;
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <MX_ADC1_Init+0x12c>)
 800160c:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800160e:	2306      	movs	r3, #6
 8001610:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001612:	2300      	movs	r3, #0
 8001614:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001616:	227f      	movs	r2, #127	; 0x7f
 8001618:	9212      	str	r2, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161a:	2204      	movs	r2, #4
 800161c:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 800161e:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001620:	a90f      	add	r1, sp, #60	; 0x3c
 8001622:	4828      	ldr	r0, [pc, #160]	; (80016c4 <MX_ADC1_Init+0x128>)
 8001624:	f001 f870 	bl	8002708 <HAL_ADC_ConfigChannel>
 8001628:	2800      	cmp	r0, #0
 800162a:	d140      	bne.n	80016ae <MX_ADC1_Init+0x112>
  sConfig.Channel = ADC_CHANNEL_12;
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <MX_ADC1_Init+0x130>)
 800162e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001630:	230c      	movs	r3, #12
 8001632:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	a90f      	add	r1, sp, #60	; 0x3c
 8001636:	4823      	ldr	r0, [pc, #140]	; (80016c4 <MX_ADC1_Init+0x128>)
 8001638:	f001 f866 	bl	8002708 <HAL_ADC_ConfigChannel>
 800163c:	2800      	cmp	r0, #0
 800163e:	d138      	bne.n	80016b2 <MX_ADC1_Init+0x116>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <MX_ADC1_Init+0x134>)
 8001642:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001644:	2309      	movs	r3, #9
 8001646:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001648:	2300      	movs	r3, #0
 800164a:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800164c:	227f      	movs	r2, #127	; 0x7f
 800164e:	9203      	str	r2, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001650:	2204      	movs	r2, #4
 8001652:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedOffset = 0;
 8001654:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001656:	2203      	movs	r2, #3
 8001658:	9208      	str	r2, [sp, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800165a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800165e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001662:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800166a:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800166c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001670:	4669      	mov	r1, sp
 8001672:	4814      	ldr	r0, [pc, #80]	; (80016c4 <MX_ADC1_Init+0x128>)
 8001674:	f001 fc8a 	bl	8002f8c <HAL_ADCEx_InjectedConfigChannel>
 8001678:	b9e8      	cbnz	r0, 80016b6 <MX_ADC1_Init+0x11a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_ADC1_Init+0x138>)
 800167c:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800167e:	f240 130f 	movw	r3, #271	; 0x10f
 8001682:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001684:	4669      	mov	r1, sp
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <MX_ADC1_Init+0x128>)
 8001688:	f001 fc80 	bl	8002f8c <HAL_ADCEx_InjectedConfigChannel>
 800168c:	b9a8      	cbnz	r0, 80016ba <MX_ADC1_Init+0x11e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_ADC1_Init+0x13c>)
 8001690:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001692:	f240 2315 	movw	r3, #533	; 0x215
 8001696:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001698:	4669      	mov	r1, sp
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <MX_ADC1_Init+0x128>)
 800169c:	f001 fc76 	bl	8002f8c <HAL_ADCEx_InjectedConfigChannel>
 80016a0:	b968      	cbnz	r0, 80016be <MX_ADC1_Init+0x122>
}
 80016a2:	b01a      	add	sp, #104	; 0x68
 80016a4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016a6:	f7ff ff47 	bl	8001538 <Error_Handler>
    Error_Handler();
 80016aa:	f7ff ff45 	bl	8001538 <Error_Handler>
    Error_Handler();
 80016ae:	f7ff ff43 	bl	8001538 <Error_Handler>
    Error_Handler();
 80016b2:	f7ff ff41 	bl	8001538 <Error_Handler>
    Error_Handler();
 80016b6:	f7ff ff3f 	bl	8001538 <Error_Handler>
    Error_Handler();
 80016ba:	f7ff ff3d 	bl	8001538 <Error_Handler>
    Error_Handler();
 80016be:	f7ff ff3b 	bl	8001538 <Error_Handler>
 80016c2:	bf00      	nop
 80016c4:	20000184 	.word	0x20000184
 80016c8:	08600004 	.word	0x08600004
 80016cc:	32601000 	.word	0x32601000
 80016d0:	04300002 	.word	0x04300002
 80016d4:	1d500080 	.word	0x1d500080
 80016d8:	19200040 	.word	0x19200040

080016dc <MX_TIM1_Init>:
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	2400      	movs	r4, #0
 80016e2:	9415      	str	r4, [sp, #84]	; 0x54
 80016e4:	9416      	str	r4, [sp, #88]	; 0x58
 80016e6:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e8:	940e      	str	r4, [sp, #56]	; 0x38
 80016ea:	940f      	str	r4, [sp, #60]	; 0x3c
 80016ec:	9410      	str	r4, [sp, #64]	; 0x40
 80016ee:	9411      	str	r4, [sp, #68]	; 0x44
 80016f0:	9412      	str	r4, [sp, #72]	; 0x48
 80016f2:	9413      	str	r4, [sp, #76]	; 0x4c
 80016f4:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f6:	2234      	movs	r2, #52	; 0x34
 80016f8:	4621      	mov	r1, r4
 80016fa:	a801      	add	r0, sp, #4
 80016fc:	f004 fea4 	bl	8006448 <memset>
  htim1.Instance = TIM1;
 8001700:	4835      	ldr	r0, [pc, #212]	; (80017d8 <MX_TIM1_Init+0xfc>)
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <MX_TIM1_Init+0x100>)
 8001704:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001706:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001708:	2320      	movs	r3, #32
 800170a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 4999;
 800170c:	f241 3387 	movw	r3, #4999	; 0x1387
 8001710:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001714:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001718:	f003 fdf6 	bl	8005308 <HAL_TIM_PWM_Init>
 800171c:	2800      	cmp	r0, #0
 800171e:	d14c      	bne.n	80017ba <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001720:	2370      	movs	r3, #112	; 0x70
 8001722:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172a:	a915      	add	r1, sp, #84	; 0x54
 800172c:	482a      	ldr	r0, [pc, #168]	; (80017d8 <MX_TIM1_Init+0xfc>)
 800172e:	f004 fa0d 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	2800      	cmp	r0, #0
 8001734:	d143      	bne.n	80017be <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001736:	2360      	movs	r3, #96	; 0x60
 8001738:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800173a:	2200      	movs	r2, #0
 800173c:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001740:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001742:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001744:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001746:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001748:	a90e      	add	r1, sp, #56	; 0x38
 800174a:	4823      	ldr	r0, [pc, #140]	; (80017d8 <MX_TIM1_Init+0xfc>)
 800174c:	f003 fe8a 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 8001750:	2800      	cmp	r0, #0
 8001752:	d136      	bne.n	80017c2 <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001754:	2204      	movs	r2, #4
 8001756:	a90e      	add	r1, sp, #56	; 0x38
 8001758:	481f      	ldr	r0, [pc, #124]	; (80017d8 <MX_TIM1_Init+0xfc>)
 800175a:	f003 fe83 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800175e:	2800      	cmp	r0, #0
 8001760:	d131      	bne.n	80017c6 <MX_TIM1_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001762:	2208      	movs	r2, #8
 8001764:	a90e      	add	r1, sp, #56	; 0x38
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <MX_TIM1_Init+0xfc>)
 8001768:	f003 fe7c 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800176c:	2800      	cmp	r0, #0
 800176e:	d12c      	bne.n	80017ca <MX_TIM1_Init+0xee>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001770:	2370      	movs	r3, #112	; 0x70
 8001772:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001774:	220c      	movs	r2, #12
 8001776:	a90e      	add	r1, sp, #56	; 0x38
 8001778:	4817      	ldr	r0, [pc, #92]	; (80017d8 <MX_TIM1_Init+0xfc>)
 800177a:	f003 fe73 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800177e:	bb30      	cbnz	r0, 80017ce <MX_TIM1_Init+0xf2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001784:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001786:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001788:	2264      	movs	r2, #100	; 0x64
 800178a:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800178e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001792:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001794:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001796:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001798:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800179a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800179e:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017a0:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017a2:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a4:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a6:	a901      	add	r1, sp, #4
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <MX_TIM1_Init+0xfc>)
 80017aa:	f004 fa25 	bl	8005bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ae:	b980      	cbnz	r0, 80017d2 <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <MX_TIM1_Init+0xfc>)
 80017b2:	f000 fb37 	bl	8001e24 <HAL_TIM_MspPostInit>
}
 80017b6:	b018      	add	sp, #96	; 0x60
 80017b8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80017ba:	f7ff febd 	bl	8001538 <Error_Handler>
    Error_Handler();
 80017be:	f7ff febb 	bl	8001538 <Error_Handler>
    Error_Handler();
 80017c2:	f7ff feb9 	bl	8001538 <Error_Handler>
    Error_Handler();
 80017c6:	f7ff feb7 	bl	8001538 <Error_Handler>
    Error_Handler();
 80017ca:	f7ff feb5 	bl	8001538 <Error_Handler>
    Error_Handler();
 80017ce:	f7ff feb3 	bl	8001538 <Error_Handler>
    Error_Handler();
 80017d2:	f7ff feb1 	bl	8001538 <Error_Handler>
 80017d6:	bf00      	nop
 80017d8:	20000354 	.word	0x20000354
 80017dc:	40012c00 	.word	0x40012c00

080017e0 <MX_TIM2_Init>:
{
 80017e0:	b500      	push	{lr}
 80017e2:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	2300      	movs	r3, #0
 80017e6:	9305      	str	r3, [sp, #20]
 80017e8:	9306      	str	r3, [sp, #24]
 80017ea:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	9303      	str	r3, [sp, #12]
 80017f2:	9304      	str	r3, [sp, #16]
  htim2.Instance = TIM2;
 80017f4:	481d      	ldr	r0, [pc, #116]	; (800186c <MX_TIM2_Init+0x8c>)
 80017f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fa:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80017fc:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4.294967295E9;
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800180a:	f003 fdad 	bl	8005368 <HAL_TIM_IC_Init>
 800180e:	bb10      	cbnz	r0, 8001856 <MX_TIM2_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001816:	a905      	add	r1, sp, #20
 8001818:	4814      	ldr	r0, [pc, #80]	; (800186c <MX_TIM2_Init+0x8c>)
 800181a:	f004 f997 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	b9e0      	cbnz	r0, 800185a <MX_TIM2_Init+0x7a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001820:	2200      	movs	r2, #0
 8001822:	9201      	str	r2, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001824:	2301      	movs	r3, #1
 8001826:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001828:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 1;
 800182a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800182c:	a901      	add	r1, sp, #4
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <MX_TIM2_Init+0x8c>)
 8001830:	f003 fef4 	bl	800561c <HAL_TIM_IC_ConfigChannel>
 8001834:	b998      	cbnz	r0, 800185e <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001836:	2204      	movs	r2, #4
 8001838:	eb0d 0102 	add.w	r1, sp, r2
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <MX_TIM2_Init+0x8c>)
 800183e:	f003 feed 	bl	800561c <HAL_TIM_IC_ConfigChannel>
 8001842:	b970      	cbnz	r0, 8001862 <MX_TIM2_Init+0x82>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001844:	2208      	movs	r2, #8
 8001846:	a901      	add	r1, sp, #4
 8001848:	4808      	ldr	r0, [pc, #32]	; (800186c <MX_TIM2_Init+0x8c>)
 800184a:	f003 fee7 	bl	800561c <HAL_TIM_IC_ConfigChannel>
 800184e:	b950      	cbnz	r0, 8001866 <MX_TIM2_Init+0x86>
}
 8001850:	b009      	add	sp, #36	; 0x24
 8001852:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001856:	f7ff fe6f 	bl	8001538 <Error_Handler>
    Error_Handler();
 800185a:	f7ff fe6d 	bl	8001538 <Error_Handler>
    Error_Handler();
 800185e:	f7ff fe6b 	bl	8001538 <Error_Handler>
    Error_Handler();
 8001862:	f7ff fe69 	bl	8001538 <Error_Handler>
    Error_Handler();
 8001866:	f7ff fe67 	bl	8001538 <Error_Handler>
 800186a:	bf00      	nop
 800186c:	200003a0 	.word	0x200003a0

08001870 <MX_DAC1_Init>:
{
 8001870:	b500      	push	{lr}
 8001872:	b08d      	sub	sp, #52	; 0x34
  DAC_ChannelConfTypeDef sConfig = {0};
 8001874:	2230      	movs	r2, #48	; 0x30
 8001876:	2100      	movs	r1, #0
 8001878:	4668      	mov	r0, sp
 800187a:	f004 fde5 	bl	8006448 <memset>
  hdac1.Instance = DAC1;
 800187e:	4810      	ldr	r0, [pc, #64]	; (80018c0 <MX_DAC1_Init+0x50>)
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_DAC1_Init+0x54>)
 8001882:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001884:	f002 f810 	bl	80038a8 <HAL_DAC_Init>
 8001888:	b9a8      	cbnz	r0, 80018b6 <MX_DAC1_Init+0x46>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800188a:	2302      	movs	r3, #2
 800188c:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800188e:	2200      	movs	r2, #0
 8001890:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001894:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001898:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800189a:	9303      	str	r3, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800189c:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800189e:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80018a0:	2301      	movs	r3, #1
 80018a2:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80018a4:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018a6:	4669      	mov	r1, sp
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_DAC1_Init+0x50>)
 80018aa:	f002 f85d 	bl	8003968 <HAL_DAC_ConfigChannel>
 80018ae:	b920      	cbnz	r0, 80018ba <MX_DAC1_Init+0x4a>
}
 80018b0:	b00d      	add	sp, #52	; 0x34
 80018b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80018b6:	f7ff fe3f 	bl	8001538 <Error_Handler>
    Error_Handler();
 80018ba:	f7ff fe3d 	bl	8001538 <Error_Handler>
 80018be:	bf00      	nop
 80018c0:	200001f0 	.word	0x200001f0
 80018c4:	50000800 	.word	0x50000800

080018c8 <MX_TIM7_Init>:
{
 80018c8:	b500      	push	{lr}
 80018ca:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	9303      	str	r3, [sp, #12]
  htim7.Instance = TIM7;
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <MX_TIM7_Init+0x44>)
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <MX_TIM7_Init+0x48>)
 80018d8:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 80018da:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 4999;
 80018de:	f241 3287 	movw	r2, #4999	; 0x1387
 80018e2:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018e6:	f003 fcdf 	bl	80052a8 <HAL_TIM_Base_Init>
 80018ea:	b958      	cbnz	r0, 8001904 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ec:	2320      	movs	r3, #32
 80018ee:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018f4:	a901      	add	r1, sp, #4
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_TIM7_Init+0x44>)
 80018f8:	f004 f928 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	b920      	cbnz	r0, 8001908 <MX_TIM7_Init+0x40>
}
 80018fe:	b005      	add	sp, #20
 8001900:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001904:	f7ff fe18 	bl	8001538 <Error_Handler>
    Error_Handler();
 8001908:	f7ff fe16 	bl	8001538 <Error_Handler>
 800190c:	200003ec 	.word	0x200003ec
 8001910:	40001400 	.word	0x40001400

08001914 <SystemClock_Config>:
{
 8001914:	b500      	push	{lr}
 8001916:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001918:	2238      	movs	r2, #56	; 0x38
 800191a:	2100      	movs	r1, #0
 800191c:	a806      	add	r0, sp, #24
 800191e:	f004 fd93 	bl	8006448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001922:	2000      	movs	r0, #0
 8001924:	9001      	str	r0, [sp, #4]
 8001926:	9002      	str	r0, [sp, #8]
 8001928:	9003      	str	r0, [sp, #12]
 800192a:	9004      	str	r0, [sp, #16]
 800192c:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800192e:	f002 fb99 	bl	8004064 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001932:	2302      	movs	r3, #2
 8001934:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800193c:	2240      	movs	r2, #64	; 0x40
 800193e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001940:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001942:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001944:	2204      	movs	r2, #4
 8001946:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001948:	2255      	movs	r2, #85	; 0x55
 800194a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800194e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001950:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001952:	a806      	add	r0, sp, #24
 8001954:	f002 fc40 	bl	80041d8 <HAL_RCC_OscConfig>
 8001958:	b980      	cbnz	r0, 800197c <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
 800195c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195e:	2303      	movs	r3, #3
 8001960:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001966:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001968:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800196a:	2104      	movs	r1, #4
 800196c:	eb0d 0001 	add.w	r0, sp, r1
 8001970:	f002 feea 	bl	8004748 <HAL_RCC_ClockConfig>
 8001974:	b920      	cbnz	r0, 8001980 <SystemClock_Config+0x6c>
}
 8001976:	b015      	add	sp, #84	; 0x54
 8001978:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800197c:	f7ff fddc 	bl	8001538 <Error_Handler>
    Error_Handler();
 8001980:	f7ff fdda 	bl	8001538 <Error_Handler>

08001984 <main>:
{
 8001984:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8001986:	f000 fb67 	bl	8002058 <HAL_Init>
  SystemClock_Config();
 800198a:	f7ff ffc3 	bl	8001914 <SystemClock_Config>
  MX_GPIO_Init();
 800198e:	f7ff fd41 	bl	8001414 <MX_GPIO_Init>
  MX_DMA_Init();
 8001992:	f7ff fda7 	bl	80014e4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001996:	f7ff fdd1 	bl	800153c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800199a:	f7ff fdff 	bl	800159c <MX_ADC1_Init>
  MX_TIM1_Init();
 800199e:	f7ff fe9d 	bl	80016dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80019a2:	f7ff ff1d 	bl	80017e0 <MX_TIM2_Init>
  MX_DAC1_Init();
 80019a6:	f7ff ff63 	bl	8001870 <MX_DAC1_Init>
  MX_TIM7_Init();
 80019aa:	f7ff ff8d 	bl	80018c8 <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80019ae:	4c3d      	ldr	r4, [pc, #244]	; (8001aa4 <main+0x120>)
 80019b0:	4620      	mov	r0, r4
 80019b2:	f003 fba9 	bl	8005108 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80019b6:	4d3c      	ldr	r5, [pc, #240]	; (8001aa8 <main+0x124>)
 80019b8:	4628      	mov	r0, r5
 80019ba:	f001 fa29 	bl	8002e10 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80019be:	4e3b      	ldr	r6, [pc, #236]	; (8001aac <main+0x128>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c6:	4630      	mov	r0, r6
 80019c8:	f002 fb2f 	bl	800402a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d2:	4630      	mov	r0, r6
 80019d4:	f002 fb29 	bl	800402a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019de:	4630      	mov	r0, r6
 80019e0:	f002 fb23 	bl	800402a <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019e4:	2100      	movs	r1, #0
 80019e6:	4620      	mov	r0, r4
 80019e8:	f003 fe8a 	bl	8005700 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80019ec:	2100      	movs	r1, #0
 80019ee:	4620      	mov	r0, r4
 80019f0:	f004 f82a 	bl	8005a48 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019f4:	2104      	movs	r1, #4
 80019f6:	4620      	mov	r0, r4
 80019f8:	f003 fe82 	bl	8005700 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80019fc:	2104      	movs	r1, #4
 80019fe:	4620      	mov	r0, r4
 8001a00:	f004 f822 	bl	8005a48 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a04:	2108      	movs	r1, #8
 8001a06:	4620      	mov	r0, r4
 8001a08:	f003 fe7a 	bl	8005700 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f004 f81a 	bl	8005a48 <HAL_TIMEx_PWMN_Start>
  TIM1 -> RCR = 1;
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <main+0x12c>)
 8001a16:	2601      	movs	r6, #1
 8001a18:	631e      	str	r6, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	4332      	orrs	r2, r6
 8001a1e:	615a      	str	r2, [r3, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8001a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a2a:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f042 0210 	orr.w	r2, r2, #16
 8001a32:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001a3a:	601a      	str	r2, [r3, #0]
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	3a28      	subs	r2, #40	; 0x28
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_Base_Start_IT(&htim2);
 8001a42:	4c1c      	ldr	r4, [pc, #112]	; (8001ab4 <main+0x130>)
 8001a44:	4620      	mov	r0, r4
 8001a46:	f003 fb5f 	bl	8005108 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f003 ff0f 	bl	8005870 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001a52:	2104      	movs	r1, #4
 8001a54:	4620      	mov	r0, r4
 8001a56:	f003 ff0b 	bl	8005870 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001a5a:	2108      	movs	r1, #8
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f003 ff07 	bl	8005870 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 8001a62:	4c15      	ldr	r4, [pc, #84]	; (8001ab8 <main+0x134>)
 8001a64:	4620      	mov	r0, r4
 8001a66:	f003 fb09 	bl	800507c <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8001a6a:	4631      	mov	r1, r6
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f003 fb95 	bl	800519c <HAL_TIM_GenerateEvent>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001a72:	2202      	movs	r2, #2
 8001a74:	4911      	ldr	r1, [pc, #68]	; (8001abc <main+0x138>)
 8001a76:	4628      	mov	r0, r5
 8001a78:	f001 f92e 	bl	8002cd8 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001a7c:	4c10      	ldr	r4, [pc, #64]	; (8001ac0 <main+0x13c>)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4620      	mov	r0, r4
 8001a82:	f001 ff23 	bl	80038cc <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f001 ff51 	bl	8003936 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <main+0x13c>)
 8001a9e:	f001 ff4a 	bl	8003936 <HAL_DAC_SetValue>
  while (1)
 8001aa2:	e7f7      	b.n	8001a94 <main+0x110>
 8001aa4:	20000354 	.word	0x20000354
 8001aa8:	20000184 	.word	0x20000184
 8001aac:	48000800 	.word	0x48000800
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	200003a0 	.word	0x200003a0
 8001ab8:	200003ec 	.word	0x200003ec
 8001abc:	2000008c 	.word	0x2000008c
 8001ac0:	200001f0 	.word	0x200001f0

08001ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b500      	push	{lr}
 8001ac6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_MspInit+0x34>)
 8001aca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	661a      	str	r2, [r3, #96]	; 0x60
 8001ad2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ad4:	f002 0201 	and.w	r2, r2, #1
 8001ad8:	9200      	str	r2, [sp, #0]
 8001ada:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ade:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001aee:	f002 fb3f 	bl	8004170 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	b003      	add	sp, #12
 8001af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	b09e      	sub	sp, #120	; 0x78
 8001b00:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	2100      	movs	r1, #0
 8001b04:	9119      	str	r1, [sp, #100]	; 0x64
 8001b06:	911a      	str	r1, [sp, #104]	; 0x68
 8001b08:	911b      	str	r1, [sp, #108]	; 0x6c
 8001b0a:	911c      	str	r1, [sp, #112]	; 0x70
 8001b0c:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b0e:	2254      	movs	r2, #84	; 0x54
 8001b10:	a804      	add	r0, sp, #16
 8001b12:	f004 fc99 	bl	8006448 <memset>
  if(hadc->Instance==ADC1)
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1c:	d001      	beq.n	8001b22 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1e:	b01e      	add	sp, #120	; 0x78
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b26:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b28:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b2c:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2e:	a804      	add	r0, sp, #16
 8001b30:	f002 ff30 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d15f      	bne.n	8001bf8 <HAL_ADC_MspInit+0xfc>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_ADC_MspInit+0x108>)
 8001b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b40:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b44:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b48:	9200      	str	r2, [sp, #0]
 8001b4a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4e:	f042 0204 	orr.w	r2, r2, #4
 8001b52:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b56:	f002 0204 	and.w	r2, r2, #4
 8001b5a:	9201      	str	r2, [sp, #4]
 8001b5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b68:	f002 0201 	and.w	r2, r2, #1
 8001b6c:	9202      	str	r2, [sp, #8]
 8001b6e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b72:	f042 0202 	orr.w	r2, r2, #2
 8001b76:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	9303      	str	r3, [sp, #12]
 8001b80:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b82:	2307      	movs	r3, #7
 8001b84:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2603      	movs	r6, #3
 8001b88:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	a919      	add	r1, sp, #100	; 0x64
 8001b90:	481d      	ldr	r0, [pc, #116]	; (8001c08 <HAL_ADC_MspInit+0x10c>)
 8001b92:	f002 f959 	bl	8003e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b96:	9619      	str	r6, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b98:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	a919      	add	r1, sp, #100	; 0x64
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f002 f951 	bl	8003e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	a919      	add	r1, sp, #100	; 0x64
 8001bb0:	4816      	ldr	r0, [pc, #88]	; (8001c0c <HAL_ADC_MspInit+0x110>)
 8001bb2:	f002 f949 	bl	8003e48 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001bb6:	4816      	ldr	r0, [pc, #88]	; (8001c10 <HAL_ADC_MspInit+0x114>)
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_ADC_MspInit+0x118>)
 8001bba:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc0:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bcc:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bd8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bda:	f002 f81d 	bl	8003c18 <HAL_DMA_Init>
 8001bde:	b970      	cbnz	r0, 8001bfe <HAL_ADC_MspInit+0x102>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_ADC_MspInit+0x114>)
 8001be2:	6563      	str	r3, [r4, #84]	; 0x54
 8001be4:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	4611      	mov	r1, r2
 8001bea:	2012      	movs	r0, #18
 8001bec:	f001 fe02 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bf0:	2012      	movs	r0, #18
 8001bf2:	f001 fe37 	bl	8003864 <HAL_NVIC_EnableIRQ>
}
 8001bf6:	e792      	b.n	8001b1e <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001bf8:	f7ff fc9e 	bl	8001538 <Error_Handler>
 8001bfc:	e79c      	b.n	8001b38 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8001bfe:	f7ff fc9b 	bl	8001538 <Error_Handler>
 8001c02:	e7ed      	b.n	8001be0 <HAL_ADC_MspInit+0xe4>
 8001c04:	40021000 	.word	0x40021000
 8001c08:	48000800 	.word	0x48000800
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	20000204 	.word	0x20000204
 8001c14:	40020008 	.word	0x40020008

08001c18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c18:	b530      	push	{r4, r5, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9303      	str	r3, [sp, #12]
 8001c20:	9304      	str	r3, [sp, #16]
 8001c22:	9305      	str	r3, [sp, #20]
 8001c24:	9306      	str	r3, [sp, #24]
 8001c26:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 8001c28:	6802      	ldr	r2, [r0, #0]
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_DAC_MspInit+0x98>)
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001c30:	b009      	add	sp, #36	; 0x24
 8001c32:	bd30      	pop	{r4, r5, pc}
 8001c34:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c36:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001c3a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c44:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c48:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001c4c:	9201      	str	r2, [sp, #4]
 8001c4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c62:	2510      	movs	r5, #16
 8001c64:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c66:	2303      	movs	r3, #3
 8001c68:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	a903      	add	r1, sp, #12
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f002 f8ea 	bl	8003e48 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001c74:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <HAL_DAC_MspInit+0x9c>)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_DAC_MspInit+0xa0>)
 8001c78:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c7e:	6085      	str	r5, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8c:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c92:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c94:	2220      	movs	r2, #32
 8001c96:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c98:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001c9a:	f001 ffbd 	bl	8003c18 <HAL_DMA_Init>
 8001c9e:	b918      	cbnz	r0, 8001ca8 <HAL_DAC_MspInit+0x90>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <HAL_DAC_MspInit+0x9c>)
 8001ca2:	60a3      	str	r3, [r4, #8]
 8001ca4:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001ca6:	e7c3      	b.n	8001c30 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8001ca8:	f7ff fc46 	bl	8001538 <Error_Handler>
 8001cac:	e7f8      	b.n	8001ca0 <HAL_DAC_MspInit+0x88>
 8001cae:	bf00      	nop
 8001cb0:	50000800 	.word	0x50000800
 8001cb4:	20000264 	.word	0x20000264
 8001cb8:	4002001c 	.word	0x4002001c

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	b09c      	sub	sp, #112	; 0x70
 8001cc0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	9117      	str	r1, [sp, #92]	; 0x5c
 8001cc6:	9118      	str	r1, [sp, #96]	; 0x60
 8001cc8:	9119      	str	r1, [sp, #100]	; 0x64
 8001cca:	911a      	str	r1, [sp, #104]	; 0x68
 8001ccc:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cce:	2254      	movs	r2, #84	; 0x54
 8001cd0:	a802      	add	r0, sp, #8
 8001cd2:	f004 fbb9 	bl	8006448 <memset>
  if(huart->Instance==LPUART1)
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_UART_MspInit+0x7c>)
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001cde:	b01c      	add	sp, #112	; 0x70
 8001ce0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce6:	a802      	add	r0, sp, #8
 8001ce8:	f002 fe54 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	bb00      	cbnz	r0, 8001d30 <HAL_UART_MspInit+0x74>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_UART_MspInit+0x80>)
 8001cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfa:	f002 0201 	and.w	r2, r2, #1
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001d14:	230c      	movs	r3, #12
 8001d16:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2202      	movs	r2, #2
 8001d1a:	9218      	str	r2, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	9219      	str	r2, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	921a      	str	r2, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d22:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	a917      	add	r1, sp, #92	; 0x5c
 8001d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2a:	f002 f88d 	bl	8003e48 <HAL_GPIO_Init>
}
 8001d2e:	e7d6      	b.n	8001cde <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001d30:	f7ff fc02 	bl	8001538 <Error_Handler>
 8001d34:	e7db      	b.n	8001cee <HAL_UART_MspInit+0x32>
 8001d36:	bf00      	nop
 8001d38:	40008000 	.word	0x40008000
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001d40:	6802      	ldr	r2, [r0, #0]
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_TIM_PWM_MspInit+0x28>)
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d000      	beq.n	8001d4a <HAL_TIM_PWM_MspInit+0xa>
 8001d48:	4770      	bx	lr
{
 8001d4a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001d50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d56:	661a      	str	r2, [r3, #96]	; 0x60
 8001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d62:	b002      	add	sp, #8
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40012c00 	.word	0x40012c00

08001d6c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d6c:	b530      	push	{r4, r5, lr}
 8001d6e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	2300      	movs	r3, #0
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	9304      	str	r3, [sp, #16]
 8001d76:	9305      	str	r3, [sp, #20]
 8001d78:	9306      	str	r3, [sp, #24]
 8001d7a:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM2)
 8001d7c:	6803      	ldr	r3, [r0, #0]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d82:	d001      	beq.n	8001d88 <HAL_TIM_IC_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d84:	b009      	add	sp, #36	; 0x24
 8001d86:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d88:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	659a      	str	r2, [r3, #88]	; 0x58
 8001d94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d96:	f002 0201 	and.w	r2, r2, #1
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da0:	f042 0202 	orr.w	r2, r2, #2
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da8:	f002 0202 	and.w	r2, r2, #2
 8001dac:	9201      	str	r2, [sp, #4]
 8001dae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	9302      	str	r3, [sp, #8]
 8001dc0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8001dc2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2502      	movs	r5, #2
 8001dca:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dcc:	2401      	movs	r4, #1
 8001dce:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	a903      	add	r1, sp, #12
 8001dd2:	4808      	ldr	r0, [pc, #32]	; (8001df4 <HAL_TIM_IC_MspInit+0x88>)
 8001dd4:	f002 f838 	bl	8003e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H1_Pin;
 8001dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ddc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8001de8:	a903      	add	r1, sp, #12
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f002 f82b 	bl	8003e48 <HAL_GPIO_Init>
}
 8001df2:	e7c7      	b.n	8001d84 <HAL_TIM_IC_MspInit+0x18>
 8001df4:	48000400 	.word	0x48000400

08001df8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 8001df8:	6802      	ldr	r2, [r0, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_TIM_Base_MspInit+0x28>)
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d000      	beq.n	8001e02 <HAL_TIM_Base_MspInit+0xa>
 8001e00:	4770      	bx	lr
{
 8001e02:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e04:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001e08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e1a:	b002      	add	sp, #8
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40001400 	.word	0x40001400

08001e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9303      	str	r3, [sp, #12]
 8001e2c:	9304      	str	r3, [sp, #16]
 8001e2e:	9305      	str	r3, [sp, #20]
 8001e30:	9306      	str	r3, [sp, #24]
 8001e32:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8001e34:	6802      	ldr	r2, [r0, #0]
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_TIM_MspPostInit+0xb8>)
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e3c:	b008      	add	sp, #32
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e46:	f042 0204 	orr.w	r2, r2, #4
 8001e4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e4e:	f002 0204 	and.w	r2, r2, #4
 8001e52:	9200      	str	r2, [sp, #0]
 8001e54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e60:	f002 0201 	and.w	r2, r2, #1
 8001e64:	9201      	str	r2, [sp, #4]
 8001e66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e6a:	f042 0202 	orr.w	r2, r2, #2
 8001e6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2502      	movs	r5, #2
 8001e80:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e82:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e84:	a903      	add	r1, sp, #12
 8001e86:	4816      	ldr	r0, [pc, #88]	; (8001ee0 <HAL_TIM_MspPostInit+0xbc>)
 8001e88:	f001 ffde 	bl	8003e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e8c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001e90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2400      	movs	r4, #0
 8001e96:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e9a:	2606      	movs	r6, #6
 8001e9c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	a903      	add	r1, sp, #12
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea4:	f001 ffd0 	bl	8003e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001eb2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	4e0b      	ldr	r6, [pc, #44]	; (8001ee4 <HAL_TIM_MspPostInit+0xc0>)
 8001eb6:	a903      	add	r1, sp, #12
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f001 ffc5 	bl	8003e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	eb0d 0103 	add.w	r1, sp, r3
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f001 ffb8 	bl	8003e48 <HAL_GPIO_Init>
}
 8001ed8:	e7b0      	b.n	8001e3c <HAL_TIM_MspPostInit+0x18>
 8001eda:	bf00      	nop
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	48000800 	.word	0x48000800
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <NMI_Handler>

08001eea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler>

08001eec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <MemManage_Handler>

08001eee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <BusFault_Handler>

08001ef0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler>

08001ef2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	4770      	bx	lr

08001ef4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef4:	4770      	bx	lr

08001ef6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efa:	f000 f8bd 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efe:	bd08      	pop	{r3, pc}

08001f00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f02:	4802      	ldr	r0, [pc, #8]	; (8001f0c <DMA1_Channel1_IRQHandler+0xc>)
 8001f04:	f001 ff3e 	bl	8003d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f08:	bd08      	pop	{r3, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000204 	.word	0x20000204

08001f10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001f12:	4802      	ldr	r0, [pc, #8]	; (8001f1c <DMA1_Channel2_IRQHandler+0xc>)
 8001f14:	f001 ff36 	bl	8003d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f18:	bd08      	pop	{r3, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000264 	.word	0x20000264

08001f20 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001f20:	b508      	push	{r3, lr}
	float Idq_ref[2];
	uint8_t leadAngleModeFlg;
	uint8_t flgFB;
  int8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f22:	4815      	ldr	r0, [pc, #84]	; (8001f78 <ADC1_2_IRQHandler+0x58>)
 8001f24:	f000 fa2c 	bl	8002380 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f28:	2120      	movs	r1, #32
 8001f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2e:	f002 f881 	bl	8004034 <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 8001f32:	f7fe fcb7 	bl	80008a4 <readButton1>
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <ADC1_2_IRQHandler+0x5c>)
 8001f38:	7018      	strb	r0, [r3, #0]
	gVolume = readVolume();
 8001f3a:	f7fe fcf3 	bl	8000924 <readVolume>
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <ADC1_2_IRQHandler+0x60>)
 8001f40:	ed83 0a00 	vstr	s0, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 8001f44:	490f      	ldr	r1, [pc, #60]	; (8001f84 <ADC1_2_IRQHandler+0x64>)
 8001f46:	4810      	ldr	r0, [pc, #64]	; (8001f88 <ADC1_2_IRQHandler+0x68>)
 8001f48:	f7fe fd08 	bl	800095c <readCurrent>
	gVdc = 13.0f;//readVdc();
 8001f4c:	eef2 0a0a 	vmov.f32	s1, #42	; 0x41500000  13.0
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <ADC1_2_IRQHandler+0x6c>)
 8001f52:	edc3 0a00 	vstr	s1, [r3]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 8001f56:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001f5a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001f5e:	f7fe faea 	bl	8000536 <gfDivideAvoidZero>
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <ADC1_2_IRQHandler+0x70>)
 8001f64:	ed83 0a00 	vstr	s0, [r3]

	// Sequence Control
	Sequence();
 8001f68:	f7fe fc44 	bl	80007f4 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f002 f85f 	bl	8004034 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f76:	bd08      	pop	{r3, pc}
 8001f78:	20000184 	.word	0x20000184
 8001f7c:	20000090 	.word	0x20000090
 8001f80:	200000c8 	.word	0x200000c8
 8001f84:	200000a8 	.word	0x200000a8
 8001f88:	200000b4 	.word	0x200000b4
 8001f8c:	200000c4 	.word	0x200000c4
 8001f90:	200000c0 	.word	0x200000c0

08001f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f9a:	f002 f855 	bl	8004048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f9e:	bd08      	pop	{r3, pc}

08001fa0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <SystemInit+0x10>)
 8001fa2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001faa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fba:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <LoopForever+0xe>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd0:	4c0b      	ldr	r4, [pc, #44]	; (8002000 <LoopForever+0x16>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fde:	f7ff ffdf 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f004 fa0d 	bl	8006400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fe6:	f7ff fccd 	bl	8001984 <main>

08001fea <LoopForever>:

LoopForever:
    b LoopForever
 8001fea:	e7fe      	b.n	8001fea <LoopForever>
  ldr   r0, =_estack
 8001fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ff8:	08007884 	.word	0x08007884
  ldr r2, =_sbss
 8001ffc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002000:	2000043c 	.word	0x2000043c

08002004 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC3_IRQHandler>
	...

08002008 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_InitTick+0x44>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b90b      	cbnz	r3, 8002012 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800200e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002010:	4770      	bx	lr
{
 8002012:	b510      	push	{r4, lr}
 8002014:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_InitTick+0x48>)
 8002020:	6810      	ldr	r0, [r2, #0]
 8002022:	fbb0 f0f3 	udiv	r0, r0, r3
 8002026:	f001 fc2b 	bl	8003880 <HAL_SYSTICK_Config>
 800202a:	b968      	cbnz	r0, 8002048 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202c:	2c0f      	cmp	r4, #15
 800202e:	d901      	bls.n	8002034 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002030:	2001      	movs	r0, #1
 8002032:	e00a      	b.n	800204a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	4621      	mov	r1, r4
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f001 fbda 	bl	80037f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_InitTick+0x4c>)
 8002042:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002044:	2000      	movs	r0, #0
 8002046:	e000      	b.n	800204a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002048:	2001      	movs	r0, #1
}
 800204a:	bd10      	pop	{r4, pc}
 800204c:	20000004 	.word	0x20000004
 8002050:	20000000 	.word	0x20000000
 8002054:	20000008 	.word	0x20000008

08002058 <HAL_Init>:
{
 8002058:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205a:	2003      	movs	r0, #3
 800205c:	f001 fbb8 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff ffd1 	bl	8002008 <HAL_InitTick>
 8002066:	b110      	cbz	r0, 800206e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002068:	2401      	movs	r4, #1
}
 800206a:	4620      	mov	r0, r4
 800206c:	bd10      	pop	{r4, pc}
 800206e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002070:	f7ff fd28 	bl	8001ac4 <HAL_MspInit>
 8002074:	e7f9      	b.n	800206a <HAL_Init+0x12>
	...

08002078 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002078:	4a03      	ldr	r2, [pc, #12]	; (8002088 <HAL_IncTick+0x10>)
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	4903      	ldr	r1, [pc, #12]	; (800208c <HAL_IncTick+0x14>)
 800207e:	6809      	ldr	r1, [r1, #0]
 8002080:	440b      	add	r3, r1
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000438 	.word	0x20000438
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002090:	4b01      	ldr	r3, [pc, #4]	; (8002098 <HAL_GetTick+0x8>)
 8002092:	6818      	ldr	r0, [r3, #0]
}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000438 	.word	0x20000438

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff fff6 	bl	8002090 <HAL_GetTick>
 80020a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80020aa:	d002      	beq.n	80020b2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <HAL_Delay+0x24>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b2:	f7ff ffed 	bl	8002090 <HAL_GetTick>
 80020b6:	1b40      	subs	r0, r0, r5
 80020b8:	42a0      	cmp	r0, r4
 80020ba:	d3fa      	bcc.n	80020b2 <HAL_Delay+0x16>
  {
  }
}
 80020bc:	bd38      	pop	{r3, r4, r5, pc}
 80020be:	bf00      	nop
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c4:	b530      	push	{r4, r5, lr}
 80020c6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020cc:	2800      	cmp	r0, #0
 80020ce:	f000 8138 	beq.w	8002342 <HAL_ADC_Init+0x27e>
 80020d2:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80020d6:	b313      	cbz	r3, 800211e <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d8:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80020e0:	d005      	beq.n	80020ee <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80020e8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80020ec:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ee:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020f0:	6893      	ldr	r3, [r2, #8]
 80020f2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020f6:	d11f      	bne.n	8002138 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80020f8:	6893      	ldr	r3, [r2, #8]
 80020fa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002108:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <HAL_ADC_Init+0x284>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	4a8f      	ldr	r2, [pc, #572]	; (800234c <HAL_ADC_Init+0x288>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800211c:	e009      	b.n	8002132 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800211e:	f7ff fced 	bl	8001afc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002122:	2300      	movs	r3, #0
 8002124:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8002126:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800212a:	e7d5      	b.n	80020d8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800212c:	9b01      	ldr	r3, [sp, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002132:	9b01      	ldr	r3, [sp, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002138:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800213a:	6893      	ldr	r3, [r2, #8]
 800213c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002140:	d13d      	bne.n	80021be <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002142:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002152:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002154:	6893      	ldr	r3, [r2, #8]
 8002156:	f013 0304 	ands.w	r3, r3, #4
 800215a:	d000      	beq.n	800215e <HAL_ADC_Init+0x9a>
 800215c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800215e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002160:	f011 0f10 	tst.w	r1, #16
 8002164:	f040 80e6 	bne.w	8002334 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 80e3 	bne.w	8002334 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002170:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800217a:	6893      	ldr	r3, [r2, #8]
 800217c:	f013 0f01 	tst.w	r3, #1
 8002180:	d13e      	bne.n	8002200 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002182:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002186:	d01c      	beq.n	80021c2 <HAL_ADC_Init+0xfe>
 8002188:	4b71      	ldr	r3, [pc, #452]	; (8002350 <HAL_ADC_Init+0x28c>)
 800218a:	429a      	cmp	r2, r3
 800218c:	d019      	beq.n	80021c2 <HAL_ADC_Init+0xfe>
 800218e:	4b71      	ldr	r3, [pc, #452]	; (8002354 <HAL_ADC_Init+0x290>)
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	f011 0101 	ands.w	r1, r1, #1
 8002196:	d000      	beq.n	800219a <HAL_ADC_Init+0xd6>
 8002198:	2101      	movs	r1, #1
 800219a:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_ADC_Init+0x294>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f013 0301 	ands.w	r3, r3, #1
 80021a2:	d000      	beq.n	80021a6 <HAL_ADC_Init+0xe2>
 80021a4:	2301      	movs	r3, #1
 80021a6:	430b      	orrs	r3, r1
 80021a8:	496c      	ldr	r1, [pc, #432]	; (800235c <HAL_ADC_Init+0x298>)
 80021aa:	6889      	ldr	r1, [r1, #8]
 80021ac:	f011 0101 	ands.w	r1, r1, #1
 80021b0:	d000      	beq.n	80021b4 <HAL_ADC_Init+0xf0>
 80021b2:	2101      	movs	r1, #1
 80021b4:	430b      	orrs	r3, r1
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	e012      	b.n	80021e4 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021be:	2000      	movs	r0, #0
 80021c0:	e7c8      	b.n	8002154 <HAL_ADC_Init+0x90>
 80021c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f013 0301 	ands.w	r3, r3, #1
 80021cc:	d000      	beq.n	80021d0 <HAL_ADC_Init+0x10c>
 80021ce:	2301      	movs	r3, #1
 80021d0:	495f      	ldr	r1, [pc, #380]	; (8002350 <HAL_ADC_Init+0x28c>)
 80021d2:	6889      	ldr	r1, [r1, #8]
 80021d4:	f011 0101 	ands.w	r1, r1, #1
 80021d8:	d000      	beq.n	80021dc <HAL_ADC_Init+0x118>
 80021da:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021dc:	430b      	orrs	r3, r1
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b163      	cbz	r3, 8002200 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021e6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80021ea:	d072      	beq.n	80022d2 <HAL_ADC_Init+0x20e>
 80021ec:	4b58      	ldr	r3, [pc, #352]	; (8002350 <HAL_ADC_Init+0x28c>)
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d06d      	beq.n	80022ce <HAL_ADC_Init+0x20a>
 80021f2:	495b      	ldr	r1, [pc, #364]	; (8002360 <HAL_ADC_Init+0x29c>)
 80021f4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021f6:	688a      	ldr	r2, [r1, #8]
 80021f8:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002200:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 8002202:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002204:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8002208:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 800220a:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 800220c:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 800220e:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002210:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002218:	2a01      	cmp	r2, #1
 800221a:	d05c      	beq.n	80022d6 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800221e:	b122      	cbz	r2, 800222a <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002220:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002224:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002226:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002228:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800222a:	6821      	ldr	r1, [r4, #0]
 800222c:	68cd      	ldr	r5, [r1, #12]
 800222e:	4a4d      	ldr	r2, [pc, #308]	; (8002364 <HAL_ADC_Init+0x2a0>)
 8002230:	402a      	ands	r2, r5
 8002232:	4313      	orrs	r3, r2
 8002234:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002236:	6822      	ldr	r2, [r4, #0]
 8002238:	6913      	ldr	r3, [r2, #16]
 800223a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800223e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002240:	430b      	orrs	r3, r1
 8002242:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002244:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002246:	688b      	ldr	r3, [r1, #8]
 8002248:	f013 0304 	ands.w	r3, r3, #4
 800224c:	d000      	beq.n	8002250 <HAL_ADC_Init+0x18c>
 800224e:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002250:	688a      	ldr	r2, [r1, #8]
 8002252:	f012 0208 	ands.w	r2, r2, #8
 8002256:	d000      	beq.n	800225a <HAL_ADC_Init+0x196>
 8002258:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800225a:	bb4b      	cbnz	r3, 80022b0 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225c:	bb42      	cbnz	r2, 80022b0 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800225e:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002260:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002264:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002266:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800226a:	68cb      	ldr	r3, [r1, #12]
 800226c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002270:	f023 0302 	bic.w	r3, r3, #2
 8002274:	4313      	orrs	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002278:	6923      	ldr	r3, [r4, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d030      	beq.n	80022e0 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	6913      	ldr	r3, [r2, #16]
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002288:	6822      	ldr	r2, [r4, #0]
 800228a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800228e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002292:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002296:	6921      	ldr	r1, [r4, #16]
 8002298:	430b      	orrs	r3, r1
 800229a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800229e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d02b      	beq.n	80022fe <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	6913      	ldr	r3, [r2, #16]
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b0:	6963      	ldr	r3, [r4, #20]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d035      	beq.n	8002322 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022ba:	f023 030f 	bic.w	r3, r3, #15
 80022be:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	65e3      	str	r3, [r4, #92]	; 0x5c
 80022cc:	e037      	b.n	800233e <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022ce:	4926      	ldr	r1, [pc, #152]	; (8002368 <HAL_ADC_Init+0x2a4>)
 80022d0:	e790      	b.n	80021f4 <HAL_ADC_Init+0x130>
 80022d2:	4925      	ldr	r1, [pc, #148]	; (8002368 <HAL_ADC_Init+0x2a4>)
 80022d4:	e78e      	b.n	80021f4 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022d8:	3a01      	subs	r2, #1
 80022da:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80022de:	e79d      	b.n	800221c <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022e0:	6822      	ldr	r2, [r4, #0]
 80022e2:	6913      	ldr	r3, [r2, #16]
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80022f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80022fc:	e7cf      	b.n	800229e <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 80022fe:	6821      	ldr	r1, [r4, #0]
 8002300:	690b      	ldr	r3, [r1, #16]
 8002302:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800230c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800230e:	432a      	orrs	r2, r5
 8002310:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8002312:	432a      	orrs	r2, r5
 8002314:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8002316:	432a      	orrs	r2, r5
 8002318:	4313      	orrs	r3, r2
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	610b      	str	r3, [r1, #16]
 8002320:	e7c6      	b.n	80022b0 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002322:	6821      	ldr	r1, [r4, #0]
 8002324:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002326:	f023 030f 	bic.w	r3, r3, #15
 800232a:	6a22      	ldr	r2, [r4, #32]
 800232c:	3a01      	subs	r2, #1
 800232e:	4313      	orrs	r3, r2
 8002330:	630b      	str	r3, [r1, #48]	; 0x30
 8002332:	e7c5      	b.n	80022c0 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002334:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800233c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800233e:	b003      	add	sp, #12
 8002340:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002342:	2001      	movs	r0, #1
 8002344:	e7fb      	b.n	800233e <HAL_ADC_Init+0x27a>
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000
 800234c:	053e2d63 	.word	0x053e2d63
 8002350:	50000100 	.word	0x50000100
 8002354:	50000400 	.word	0x50000400
 8002358:	50000500 	.word	0x50000500
 800235c:	50000600 	.word	0x50000600
 8002360:	50000700 	.word	0x50000700
 8002364:	fff04007 	.word	0xfff04007
 8002368:	50000300 	.word	0x50000300

0800236c <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800236c:	4770      	bx	lr

0800236e <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800236e:	4770      	bx	lr

08002370 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002370:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002372:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002374:	f7ff fffb 	bl	800236e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002378:	bd08      	pop	{r3, pc}

0800237a <HAL_ADC_LevelOutOfWindowCallback>:
}
 800237a:	4770      	bx	lr

0800237c <HAL_ADC_ErrorCallback>:
}
 800237c:	4770      	bx	lr
	...

08002380 <HAL_ADC_IRQHandler>:
{
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002384:	6803      	ldr	r3, [r0, #0]
 8002386:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002388:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800238a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238e:	d046      	beq.n	800241e <HAL_ADC_IRQHandler+0x9e>
 8002390:	4a97      	ldr	r2, [pc, #604]	; (80025f0 <HAL_ADC_IRQHandler+0x270>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d041      	beq.n	800241a <HAL_ADC_IRQHandler+0x9a>
 8002396:	4b97      	ldr	r3, [pc, #604]	; (80025f4 <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002398:	689d      	ldr	r5, [r3, #8]
 800239a:	f005 051f 	and.w	r5, r5, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800239e:	f016 0f02 	tst.w	r6, #2
 80023a2:	d010      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x46>
 80023a4:	f017 0f02 	tst.w	r7, #2
 80023a8:	d00d      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023ac:	f013 0f10 	tst.w	r3, #16
 80023b0:	d103      	bne.n	80023ba <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023ba:	4620      	mov	r0, r4
 80023bc:	f000 fde4 	bl	8002f88 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	2202      	movs	r2, #2
 80023c4:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023c6:	f016 0f04 	tst.w	r6, #4
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_IRQHandler+0x52>
 80023cc:	f017 0f04 	tst.w	r7, #4
 80023d0:	d105      	bne.n	80023de <HAL_ADC_IRQHandler+0x5e>
 80023d2:	f016 0f08 	tst.w	r6, #8
 80023d6:	d055      	beq.n	8002484 <HAL_ADC_IRQHandler+0x104>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023d8:	f017 0f08 	tst.w	r7, #8
 80023dc:	d052      	beq.n	8002484 <HAL_ADC_IRQHandler+0x104>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023e0:	f013 0f10 	tst.w	r3, #16
 80023e4:	d103      	bne.n	80023ee <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ec:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023ee:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80023f6:	d13f      	bne.n	8002478 <HAL_ADC_IRQHandler+0xf8>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023f8:	4a7d      	ldr	r2, [pc, #500]	; (80025f0 <HAL_ADC_IRQHandler+0x270>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d014      	beq.n	8002428 <HAL_ADC_IRQHandler+0xa8>
 80023fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_ADC_IRQHandler+0xa2>
 8002406:	461a      	mov	r2, r3
 8002408:	4293      	cmp	r3, r2
 800240a:	d010      	beq.n	800242e <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800240c:	b17d      	cbz	r5, 800242e <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800240e:	2d05      	cmp	r5, #5
 8002410:	d00d      	beq.n	800242e <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002412:	2d09      	cmp	r5, #9
 8002414:	d00b      	beq.n	800242e <HAL_ADC_IRQHandler+0xae>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002416:	68d2      	ldr	r2, [r2, #12]
 8002418:	e00a      	b.n	8002430 <HAL_ADC_IRQHandler+0xb0>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800241a:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <HAL_ADC_IRQHandler+0x278>)
 800241c:	e7bc      	b.n	8002398 <HAL_ADC_IRQHandler+0x18>
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_ADC_IRQHandler+0x278>)
 8002420:	e7ba      	b.n	8002398 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002422:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002426:	e7ef      	b.n	8002408 <HAL_ADC_IRQHandler+0x88>
 8002428:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800242c:	e7ec      	b.n	8002408 <HAL_ADC_IRQHandler+0x88>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800242e:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002430:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002434:	d120      	bne.n	8002478 <HAL_ADC_IRQHandler+0xf8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f012 0f08 	tst.w	r2, #8
 800243c:	d01c      	beq.n	8002478 <HAL_ADC_IRQHandler+0xf8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	f012 0f04 	tst.w	r2, #4
 8002444:	d110      	bne.n	8002468 <HAL_ADC_IRQHandler+0xe8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	f022 020c 	bic.w	r2, r2, #12
 800244c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800244e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002454:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002456:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002458:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800245c:	d10c      	bne.n	8002478 <HAL_ADC_IRQHandler+0xf8>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800245e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002466:	e007      	b.n	8002478 <HAL_ADC_IRQHandler+0xf8>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002468:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800246a:	f043 0310 	orr.w	r3, r3, #16
 800246e:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002470:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff ff77 	bl	800236c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	220c      	movs	r2, #12
 8002482:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002484:	f016 0f20 	tst.w	r6, #32
 8002488:	d002      	beq.n	8002490 <HAL_ADC_IRQHandler+0x110>
 800248a:	f017 0f20 	tst.w	r7, #32
 800248e:	d105      	bne.n	800249c <HAL_ADC_IRQHandler+0x11c>
 8002490:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002494:	d063      	beq.n	800255e <HAL_ADC_IRQHandler+0x1de>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002496:	f017 0f40 	tst.w	r7, #64	; 0x40
 800249a:	d060      	beq.n	800255e <HAL_ADC_IRQHandler+0x1de>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800249e:	f013 0f10 	tst.w	r3, #16
 80024a2:	d103      	bne.n	80024ac <HAL_ADC_IRQHandler+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024aa:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024ac:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024b0:	f412 7fc0 	tst.w	r2, #384	; 0x180
 80024b4:	d116      	bne.n	80024e4 <HAL_ADC_IRQHandler+0x164>
 80024b6:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80024be:	d113      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x168>
 80024c0:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024c2:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_ADC_IRQHandler+0x270>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d014      	beq.n	80024f2 <HAL_ADC_IRQHandler+0x172>
 80024c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_ADC_IRQHandler+0x16c>
 80024d0:	461a      	mov	r2, r3
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d010      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024d6:	b17d      	cbz	r5, 80024f8 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024d8:	2d06      	cmp	r5, #6
 80024da:	d00d      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024dc:	2d07      	cmp	r5, #7
 80024de:	d00b      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x178>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	e00a      	b.n	80024fa <HAL_ADC_IRQHandler+0x17a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024e4:	2100      	movs	r1, #0
 80024e6:	e7e7      	b.n	80024b8 <HAL_ADC_IRQHandler+0x138>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024e8:	2000      	movs	r0, #0
 80024ea:	e7ea      	b.n	80024c2 <HAL_ADC_IRQHandler+0x142>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ec:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80024f0:	e7ef      	b.n	80024d2 <HAL_ADC_IRQHandler+0x152>
 80024f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024f6:	e7ec      	b.n	80024d2 <HAL_ADC_IRQHandler+0x152>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024f8:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80024fa:	b351      	cbz	r1, 8002552 <HAL_ADC_IRQHandler+0x1d2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80024fc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002500:	d003      	beq.n	800250a <HAL_ADC_IRQHandler+0x18a>
 8002502:	b330      	cbz	r0, 8002552 <HAL_ADC_IRQHandler+0x1d2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002504:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002508:	d123      	bne.n	8002552 <HAL_ADC_IRQHandler+0x1d2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002510:	d01f      	beq.n	8002552 <HAL_ADC_IRQHandler+0x1d2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002512:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002516:	d11c      	bne.n	8002552 <HAL_ADC_IRQHandler+0x1d2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	f012 0f08 	tst.w	r2, #8
 800251e:	d110      	bne.n	8002542 <HAL_ADC_IRQHandler+0x1c2>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002526:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002528:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800252a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800252e:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002530:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002532:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002536:	d10c      	bne.n	8002552 <HAL_ADC_IRQHandler+0x1d2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002538:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002540:	e007      	b.n	8002552 <HAL_ADC_IRQHandler+0x1d2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002544:	f043 0310 	orr.w	r3, r3, #16
 8002548:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002552:	4620      	mov	r0, r4
 8002554:	f000 fd14 	bl	8002f80 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	2260      	movs	r2, #96	; 0x60
 800255c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800255e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002562:	d002      	beq.n	800256a <HAL_ADC_IRQHandler+0x1ea>
 8002564:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002568:	d136      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x258>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800256a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800256e:	d002      	beq.n	8002576 <HAL_ADC_IRQHandler+0x1f6>
 8002570:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002574:	d142      	bne.n	80025fc <HAL_ADC_IRQHandler+0x27c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002576:	f416 7f00 	tst.w	r6, #512	; 0x200
 800257a:	d002      	beq.n	8002582 <HAL_ADC_IRQHandler+0x202>
 800257c:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002580:	d148      	bne.n	8002614 <HAL_ADC_IRQHandler+0x294>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002582:	f016 0f10 	tst.w	r6, #16
 8002586:	d020      	beq.n	80025ca <HAL_ADC_IRQHandler+0x24a>
 8002588:	f017 0f10 	tst.w	r7, #16
 800258c:	d01d      	beq.n	80025ca <HAL_ADC_IRQHandler+0x24a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800258e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002590:	b16b      	cbz	r3, 80025ae <HAL_ADC_IRQHandler+0x22e>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002592:	2d00      	cmp	r5, #0
 8002594:	d04e      	beq.n	8002634 <HAL_ADC_IRQHandler+0x2b4>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800259c:	d048      	beq.n	8002630 <HAL_ADC_IRQHandler+0x2b0>
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_ADC_IRQHandler+0x270>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d043      	beq.n	800262c <HAL_ADC_IRQHandler+0x2ac>
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80025ac:	d00a      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x244>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b4:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff fedc 	bl	800237c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	2210      	movs	r2, #16
 80025c8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025ca:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80025ce:	d002      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x256>
 80025d0:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80025d4:	d134      	bne.n	8002640 <HAL_ADC_IRQHandler+0x2c0>
}
 80025d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff feca 	bl	800237a <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e7bd      	b.n	800256a <HAL_ADC_IRQHandler+0x1ea>
 80025ee:	bf00      	nop
 80025f0:	50000100 	.word	0x50000100
 80025f4:	50000700 	.word	0x50000700
 80025f8:	50000300 	.word	0x50000300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002602:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002604:	4620      	mov	r0, r4
 8002606:	f000 fcbd 	bl	8002f84 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e7b0      	b.n	8002576 <HAL_ADC_IRQHandler+0x1f6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002614:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800261c:	4620      	mov	r0, r4
 800261e:	f000 fcb2 	bl	8002f86 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e7aa      	b.n	8002582 <HAL_ADC_IRQHandler+0x202>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_ADC_IRQHandler+0x2e0>)
 800262e:	e7ba      	b.n	80025a6 <HAL_ADC_IRQHandler+0x226>
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_ADC_IRQHandler+0x2e0>)
 8002632:	e7b8      	b.n	80025a6 <HAL_ADC_IRQHandler+0x226>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f013 0f01 	tst.w	r3, #1
 800263c:	d0c2      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x244>
 800263e:	e7b6      	b.n	80025ae <HAL_ADC_IRQHandler+0x22e>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002640:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002646:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002648:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002656:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002658:	4620      	mov	r0, r4
 800265a:	f000 fc92 	bl	8002f82 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 800265e:	e7ba      	b.n	80025d6 <HAL_ADC_IRQHandler+0x256>
 8002660:	50000300 	.word	0x50000300

08002664 <ADC_DMAConvCplt>:
{
 8002664:	b508      	push	{r3, lr}
 8002666:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002668:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800266a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800266c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002670:	d130      	bne.n	80026d4 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002672:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002678:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800267a:	6803      	ldr	r3, [r0, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f012 0f08 	tst.w	r2, #8
 8002682:	d014      	beq.n	80026ae <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800268a:	d120      	bne.n	80026ce <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002692:	d11c      	bne.n	80026ce <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002694:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800269a:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800269c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800269e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80026a2:	d114      	bne.n	80026ce <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	65c3      	str	r3, [r0, #92]	; 0x5c
 80026ac:	e00f      	b.n	80026ce <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f013 0f02 	tst.w	r3, #2
 80026b4:	d10b      	bne.n	80026ce <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80026b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026bc:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80026c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80026c4:	d103      	bne.n	80026ce <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80026ce:	f7ff fe4d 	bl	800236c <HAL_ADC_ConvCpltCallback>
}
 80026d2:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026d4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80026d6:	f012 0f10 	tst.w	r2, #16
 80026da:	d104      	bne.n	80026e6 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026dc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80026de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026e0:	4618      	mov	r0, r3
 80026e2:	4790      	blx	r2
}
 80026e4:	e7f5      	b.n	80026d2 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80026e6:	f7ff fe49 	bl	800237c <HAL_ADC_ErrorCallback>
 80026ea:	e7f2      	b.n	80026d2 <ADC_DMAConvCplt+0x6e>

080026ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ec:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ee:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026f0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80026f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026f8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002700:	f7ff fe3c 	bl	800237c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002704:	bd08      	pop	{r3, pc}
	...

08002708 <HAL_ADC_ConfigChannel>:
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800270c:	2200      	movs	r2, #0
 800270e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002710:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8002714:	2a01      	cmp	r2, #1
 8002716:	f000 8284 	beq.w	8002c22 <HAL_ADC_ConfigChannel+0x51a>
 800271a:	4603      	mov	r3, r0
 800271c:	2201      	movs	r2, #1
 800271e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002722:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002724:	68a8      	ldr	r0, [r5, #8]
 8002726:	f010 0f04 	tst.w	r0, #4
 800272a:	d009      	beq.n	8002740 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800272e:	f042 0220 	orr.w	r2, r2, #32
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8002734:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800273c:	b003      	add	sp, #12
 800273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002740:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002742:	3530      	adds	r5, #48	; 0x30
 8002744:	0a22      	lsrs	r2, r4, #8
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 800274c:	58a8      	ldr	r0, [r5, r2]
 800274e:	f004 0e1f 	and.w	lr, r4, #31
 8002752:	241f      	movs	r4, #31
 8002754:	fa04 f40e 	lsl.w	r4, r4, lr
 8002758:	ea20 0004 	bic.w	r0, r0, r4
 800275c:	680c      	ldr	r4, [r1, #0]
 800275e:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8002762:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002766:	ea40 000c 	orr.w	r0, r0, ip
 800276a:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276c:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800276e:	6882      	ldr	r2, [r0, #8]
 8002770:	f012 0204 	ands.w	r2, r2, #4
 8002774:	d000      	beq.n	8002778 <HAL_ADC_ConfigChannel+0x70>
 8002776:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002778:	6884      	ldr	r4, [r0, #8]
 800277a:	f014 0408 	ands.w	r4, r4, #8
 800277e:	d000      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x7a>
 8002780:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002782:	2a00      	cmp	r2, #0
 8002784:	d150      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002786:	2c00      	cmp	r4, #0
 8002788:	d14e      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800278a:	688f      	ldr	r7, [r1, #8]
 800278c:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8002790:	f000 8086 	beq.w	80028a0 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002794:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002796:	3014      	adds	r0, #20
 8002798:	0e72      	lsrs	r2, r6, #25
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80027a0:	5885      	ldr	r5, [r0, r2]
 80027a2:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 80027a6:	f04f 0c07 	mov.w	ip, #7
 80027aa:	fa0c fc0e 	lsl.w	ip, ip, lr
 80027ae:	ea25 0c0c 	bic.w	ip, r5, ip
 80027b2:	fa07 f50e 	lsl.w	r5, r7, lr
 80027b6:	ea4c 0505 	orr.w	r5, ip, r5
 80027ba:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027bc:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027be:	6942      	ldr	r2, [r0, #20]
 80027c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027c4:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027c6:	694d      	ldr	r5, [r1, #20]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	68c2      	ldr	r2, [r0, #12]
 80027cc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80027d0:	0052      	lsls	r2, r2, #1
 80027d2:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027d6:	690e      	ldr	r6, [r1, #16]
 80027d8:	2e04      	cmp	r6, #4
 80027da:	d079      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027dc:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80027de:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80027e2:	4dae      	ldr	r5, [pc, #696]	; (8002a9c <HAL_ADC_ConfigChannel+0x394>)
 80027e4:	403d      	ands	r5, r7
 80027e6:	680f      	ldr	r7, [r1, #0]
 80027e8:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80027ec:	433a      	orrs	r2, r7
 80027ee:	4315      	orrs	r5, r2
 80027f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80027f4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	690e      	ldr	r6, [r1, #16]
 80027fc:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027fe:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8002800:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8002804:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8002808:	4328      	orrs	r0, r5
 800280a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	690d      	ldr	r5, [r1, #16]
 8002812:	7f08      	ldrb	r0, [r1, #28]
 8002814:	2801      	cmp	r0, #1
 8002816:	d058      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002818:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 800281a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800281e:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8002822:	4304      	orrs	r4, r0
 8002824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800282a:	6890      	ldr	r0, [r2, #8]
 800282c:	f010 0f01 	tst.w	r0, #1
 8002830:	d112      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002832:	6808      	ldr	r0, [r1, #0]
 8002834:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002836:	4c9a      	ldr	r4, [pc, #616]	; (8002aa0 <HAL_ADC_ConfigChannel+0x398>)
 8002838:	42a5      	cmp	r5, r4
 800283a:	f000 80b1 	beq.w	80029a0 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 800283e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8002842:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8002846:	ea24 0000 	bic.w	r0, r4, r0
 800284a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800284e:	68c8      	ldr	r0, [r1, #12]
 8002850:	4a93      	ldr	r2, [pc, #588]	; (8002aa0 <HAL_ADC_ConfigChannel+0x398>)
 8002852:	4290      	cmp	r0, r2
 8002854:	f000 80ac 	beq.w	80029b0 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002858:	680a      	ldr	r2, [r1, #0]
 800285a:	4992      	ldr	r1, [pc, #584]	; (8002aa4 <HAL_ADC_ConfigChannel+0x39c>)
 800285c:	420a      	tst	r2, r1
 800285e:	f000 81da 	beq.w	8002c16 <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002868:	f000 8173 	beq.w	8002b52 <HAL_ADC_ConfigChannel+0x44a>
 800286c:	488e      	ldr	r0, [pc, #568]	; (8002aa8 <HAL_ADC_ConfigChannel+0x3a0>)
 800286e:	4281      	cmp	r1, r0
 8002870:	f000 816c 	beq.w	8002b4c <HAL_ADC_ConfigChannel+0x444>
 8002874:	488d      	ldr	r0, [pc, #564]	; (8002aac <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002876:	6880      	ldr	r0, [r0, #8]
 8002878:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800287c:	4d8c      	ldr	r5, [pc, #560]	; (8002ab0 <HAL_ADC_ConfigChannel+0x3a8>)
 800287e:	42aa      	cmp	r2, r5
 8002880:	f000 8169 	beq.w	8002b56 <HAL_ADC_ConfigChannel+0x44e>
 8002884:	4d8b      	ldr	r5, [pc, #556]	; (8002ab4 <HAL_ADC_ConfigChannel+0x3ac>)
 8002886:	42aa      	cmp	r2, r5
 8002888:	f000 8165 	beq.w	8002b56 <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800288c:	4d8a      	ldr	r5, [pc, #552]	; (8002ab8 <HAL_ADC_ConfigChannel+0x3b0>)
 800288e:	42aa      	cmp	r2, r5
 8002890:	f000 8194 	beq.w	8002bbc <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002894:	4d89      	ldr	r5, [pc, #548]	; (8002abc <HAL_ADC_ConfigChannel+0x3b4>)
 8002896:	42aa      	cmp	r2, r5
 8002898:	f000 81a8 	beq.w	8002bec <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289c:	2000      	movs	r0, #0
 800289e:	e74a      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028a0:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028a2:	3014      	adds	r0, #20
 80028a4:	0e6a      	lsrs	r2, r5, #25
 80028a6:	0092      	lsls	r2, r2, #2
 80028a8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80028ac:	5886      	ldr	r6, [r0, r2]
 80028ae:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80028b2:	2707      	movs	r7, #7
 80028b4:	fa07 f505 	lsl.w	r5, r7, r5
 80028b8:	ea26 0505 	bic.w	r5, r6, r5
 80028bc:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028be:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028c0:	6942      	ldr	r2, [r0, #20]
 80028c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028c6:	6142      	str	r2, [r0, #20]
}
 80028c8:	e77d      	b.n	80027c6 <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80028ca:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80028ce:	e7a3      	b.n	8002818 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028d0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80028d2:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028d4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d8:	680a      	ldr	r2, [r1, #0]
 80028da:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80028de:	bb85      	cbnz	r5, 8002942 <HAL_ADC_ConfigChannel+0x23a>
 80028e0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028e4:	4294      	cmp	r4, r2
 80028e6:	d034      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028e8:	681c      	ldr	r4, [r3, #0]
 80028ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80028ee:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028f2:	680a      	ldr	r2, [r1, #0]
 80028f4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80028f8:	bb85      	cbnz	r5, 800295c <HAL_ADC_ConfigChannel+0x254>
 80028fa:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028fe:	4290      	cmp	r0, r2
 8002900:	d034      	beq.n	800296c <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002906:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002908:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800290c:	680a      	ldr	r2, [r1, #0]
 800290e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002912:	bb85      	cbnz	r5, 8002976 <HAL_ADC_ConfigChannel+0x26e>
 8002914:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002918:	4290      	cmp	r0, r2
 800291a:	d034      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800291c:	681c      	ldr	r4, [r3, #0]
 800291e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002920:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002922:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002926:	680a      	ldr	r2, [r1, #0]
 8002928:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800292c:	bb85      	cbnz	r5, 8002990 <HAL_ADC_ConfigChannel+0x288>
 800292e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002932:	4290      	cmp	r0, r2
 8002934:	f47f af78 	bne.w	8002828 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8002938:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800293a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800293e:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8002940:	e772      	b.n	8002828 <HAL_ADC_ConfigChannel+0x120>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002946:	b112      	cbz	r2, 800294e <HAL_ADC_ConfigChannel+0x246>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002948:	fab2 f282 	clz	r2, r2
 800294c:	e7ca      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 800294e:	2220      	movs	r2, #32
 8002950:	e7c8      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8002952:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002954:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002958:	6602      	str	r2, [r0, #96]	; 0x60
}
 800295a:	e7c5      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002960:	b112      	cbz	r2, 8002968 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	e7ca      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8002968:	2220      	movs	r2, #32
 800296a:	e7c8      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 800296c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800296e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002972:	6662      	str	r2, [r4, #100]	; 0x64
}
 8002974:	e7c5      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800297a:	b112      	cbz	r2, 8002982 <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	e7ca      	b.n	8002918 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8002982:	2220      	movs	r2, #32
 8002984:	e7c8      	b.n	8002918 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 8002986:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002988:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800298c:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800298e:	e7c5      	b.n	800291c <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002994:	b112      	cbz	r2, 800299c <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	e7ca      	b.n	8002932 <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 800299c:	2220      	movs	r2, #32
 800299e:	e7c8      	b.n	8002932 <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 80029a0:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80029a4:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80029a8:	4320      	orrs	r0, r4
 80029aa:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 80029ae:	e74e      	b.n	800284e <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b0:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b2:	680a      	ldr	r2, [r1, #0]
 80029b4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80029b8:	2d00      	cmp	r5, #0
 80029ba:	d138      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x326>
 80029bc:	0e90      	lsrs	r0, r2, #26
 80029be:	3001      	adds	r0, #1
 80029c0:	f000 001f 	and.w	r0, r0, #31
 80029c4:	2809      	cmp	r0, #9
 80029c6:	bf8c      	ite	hi
 80029c8:	2000      	movhi	r0, #0
 80029ca:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d077      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	d13b      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x344>
 80029d4:	0e90      	lsrs	r0, r2, #26
 80029d6:	3001      	adds	r0, #1
 80029d8:	0680      	lsls	r0, r0, #26
 80029da:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80029de:	2d00      	cmp	r5, #0
 80029e0:	d140      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x35c>
 80029e2:	0e96      	lsrs	r6, r2, #26
 80029e4:	3601      	adds	r6, #1
 80029e6:	f006 071f 	and.w	r7, r6, #31
 80029ea:	2601      	movs	r6, #1
 80029ec:	40be      	lsls	r6, r7
 80029ee:	4330      	orrs	r0, r6
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	d145      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x378>
 80029f4:	0e92      	lsrs	r2, r2, #26
 80029f6:	3201      	adds	r2, #1
 80029f8:	f002 021f 	and.w	r2, r2, #31
 80029fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a00:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a02:	4302      	orrs	r2, r0
 8002a04:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a06:	f104 0614 	add.w	r6, r4, #20
 8002a0a:	0e55      	lsrs	r5, r2, #25
 8002a0c:	00ad      	lsls	r5, r5, #2
 8002a0e:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8002a12:	5974      	ldr	r4, [r6, r5]
 8002a14:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002a18:	f04f 0c07 	mov.w	ip, #7
 8002a1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002a20:	ea24 0c0c 	bic.w	ip, r4, ip
 8002a24:	4090      	lsls	r0, r2
 8002a26:	ea4c 0000 	orr.w	r0, ip, r0
 8002a2a:	5170      	str	r0, [r6, r5]
}
 8002a2c:	e714      	b.n	8002858 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002a32:	b148      	cbz	r0, 8002a48 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8002a34:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a38:	3001      	adds	r0, #1
 8002a3a:	f000 001f 	and.w	r0, r0, #31
 8002a3e:	2809      	cmp	r0, #9
 8002a40:	bf8c      	ite	hi
 8002a42:	2000      	movhi	r0, #0
 8002a44:	2001      	movls	r0, #1
 8002a46:	e7c1      	b.n	80029cc <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8002a48:	2020      	movs	r0, #32
 8002a4a:	e7f5      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002a50:	b130      	cbz	r0, 8002a60 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002a52:	fab0 f080 	clz	r0, r0
 8002a56:	3001      	adds	r0, #1
 8002a58:	0680      	lsls	r0, r0, #26
 8002a5a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002a5e:	e7be      	b.n	80029de <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8002a60:	2020      	movs	r0, #32
 8002a62:	e7f8      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002a68:	b146      	cbz	r6, 8002a7c <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8002a6a:	fab6 f686 	clz	r6, r6
 8002a6e:	3601      	adds	r6, #1
 8002a70:	f006 061f 	and.w	r6, r6, #31
 8002a74:	2701      	movs	r7, #1
 8002a76:	fa07 f606 	lsl.w	r6, r7, r6
 8002a7a:	e7b8      	b.n	80029ee <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8002a7c:	2620      	movs	r6, #32
 8002a7e:	e7f6      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002a84:	b142      	cbz	r2, 8002a98 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	3201      	adds	r2, #1
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a94:	0512      	lsls	r2, r2, #20
 8002a96:	e7b4      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a98:	2220      	movs	r2, #32
 8002a9a:	e7f6      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x382>
 8002a9c:	03fff000 	.word	0x03fff000
 8002aa0:	407f0000 	.word	0x407f0000
 8002aa4:	80080000 	.word	0x80080000
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	50000700 	.word	0x50000700
 8002ab0:	c3210000 	.word	0xc3210000
 8002ab4:	90c00010 	.word	0x90c00010
 8002ab8:	c7520000 	.word	0xc7520000
 8002abc:	cb840000 	.word	0xcb840000
 8002ac0:	b9cd      	cbnz	r5, 8002af6 <HAL_ADC_ConfigChannel+0x3ee>
 8002ac2:	0e90      	lsrs	r0, r2, #26
 8002ac4:	3001      	adds	r0, #1
 8002ac6:	0680      	lsls	r0, r0, #26
 8002ac8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002acc:	b9fd      	cbnz	r5, 8002b0e <HAL_ADC_ConfigChannel+0x406>
 8002ace:	0e96      	lsrs	r6, r2, #26
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	f006 071f 	and.w	r7, r6, #31
 8002ad6:	2601      	movs	r6, #1
 8002ad8:	40be      	lsls	r6, r7
 8002ada:	4330      	orrs	r0, r6
 8002adc:	bb2d      	cbnz	r5, 8002b2a <HAL_ADC_ConfigChannel+0x422>
 8002ade:	0e92      	lsrs	r2, r2, #26
 8002ae0:	3201      	adds	r2, #1
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002aea:	3a1e      	subs	r2, #30
 8002aec:	0512      	lsls	r2, r2, #20
 8002aee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af2:	4302      	orrs	r2, r0
 8002af4:	e786      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002afa:	b130      	cbz	r0, 8002b0a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002afc:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b00:	3001      	adds	r0, #1
 8002b02:	0680      	lsls	r0, r0, #26
 8002b04:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002b08:	e7e0      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 8002b0a:	2020      	movs	r0, #32
 8002b0c:	e7f8      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002b12:	b146      	cbz	r6, 8002b26 <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 8002b14:	fab6 f686 	clz	r6, r6
 8002b18:	3601      	adds	r6, #1
 8002b1a:	f006 061f 	and.w	r6, r6, #31
 8002b1e:	2701      	movs	r7, #1
 8002b20:	fa07 f606 	lsl.w	r6, r7, r6
 8002b24:	e7d9      	b.n	8002ada <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 8002b26:	2620      	movs	r6, #32
 8002b28:	e7f6      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002b2e:	b15a      	cbz	r2, 8002b48 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	3201      	adds	r2, #1
 8002b36:	f002 021f 	and.w	r2, r2, #31
 8002b3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002b3e:	3a1e      	subs	r2, #30
 8002b40:	0512      	lsls	r2, r2, #20
 8002b42:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b46:	e7d4      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8002b48:	2220      	movs	r2, #32
 8002b4a:	e7f3      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b4c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002b50:	e691      	b.n	8002876 <HAL_ADC_ConfigChannel+0x16e>
 8002b52:	4835      	ldr	r0, [pc, #212]	; (8002c28 <HAL_ADC_ConfigChannel+0x520>)
 8002b54:	e68f      	b.n	8002876 <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b56:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002b5a:	f47f ae97 	bne.w	800288c <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002b62:	d004      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x466>
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_ADC_ConfigChannel+0x524>)
 8002b66:	4291      	cmp	r1, r2
 8002b68:	d001      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	e5e3      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002b72:	d019      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x4a0>
 8002b74:	4a2e      	ldr	r2, [pc, #184]	; (8002c30 <HAL_ADC_ConfigChannel+0x528>)
 8002b76:	4291      	cmp	r1, r2
 8002b78:	d014      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x49c>
 8002b7a:	492e      	ldr	r1, [pc, #184]	; (8002c34 <HAL_ADC_ConfigChannel+0x52c>)
 8002b7c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b80:	688a      	ldr	r2, [r1, #8]
 8002b82:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002b86:	4314      	orrs	r4, r2
 8002b88:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <HAL_ADC_ConfigChannel+0x530>)
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	0992      	lsrs	r2, r2, #6
 8002b90:	492a      	ldr	r1, [pc, #168]	; (8002c3c <HAL_ADC_ConfigChannel+0x534>)
 8002b92:	fba1 1202 	umull	r1, r2, r1, r2
 8002b96:	0992      	lsrs	r2, r2, #6
 8002b98:	3201      	adds	r2, #1
 8002b9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002ba2:	e006      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba4:	4920      	ldr	r1, [pc, #128]	; (8002c28 <HAL_ADC_ConfigChannel+0x520>)
 8002ba6:	e7e9      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x474>
 8002ba8:	491f      	ldr	r1, [pc, #124]	; (8002c28 <HAL_ADC_ConfigChannel+0x520>)
 8002baa:	e7e7      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8002bac:	9a01      	ldr	r2, [sp, #4]
 8002bae:	3a01      	subs	r2, #1
 8002bb0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002bb2:	9a01      	ldr	r2, [sp, #4]
 8002bb4:	2a00      	cmp	r2, #0
 8002bb6:	d1f9      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb8:	2000      	movs	r0, #0
 8002bba:	e5bc      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bbc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002bc0:	f47f ae68 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc4:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002bc8:	d00e      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0x4e0>
 8002bca:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_ADC_ConfigChannel+0x528>)
 8002bcc:	4291      	cmp	r1, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x4dc>
 8002bd0:	4918      	ldr	r1, [pc, #96]	; (8002c34 <HAL_ADC_ConfigChannel+0x52c>)
 8002bd2:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8002bd6:	688a      	ldr	r2, [r1, #8]
 8002bd8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002bdc:	4314      	orrs	r4, r2
 8002bde:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be0:	2000      	movs	r0, #0
}
 8002be2:	e5a8      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be4:	4910      	ldr	r1, [pc, #64]	; (8002c28 <HAL_ADC_ConfigChannel+0x520>)
 8002be6:	e7f4      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x4ca>
 8002be8:	490f      	ldr	r1, [pc, #60]	; (8002c28 <HAL_ADC_ConfigChannel+0x520>)
 8002bea:	e7f2      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bec:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002bf0:	d113      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_ADC_ConfigChannel+0x528>)
 8002bf4:	4291      	cmp	r1, r2
 8002bf6:	d012      	beq.n	8002c1e <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002bfc:	d009      	beq.n	8002c12 <HAL_ADC_ConfigChannel+0x50a>
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <HAL_ADC_ConfigChannel+0x52c>)
 8002c00:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c04:	6881      	ldr	r1, [r0, #8]
 8002c06:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0e:	2000      	movs	r0, #0
}
 8002c10:	e591      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <HAL_ADC_ConfigChannel+0x520>)
 8002c14:	e7f4      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c16:	2000      	movs	r0, #0
 8002c18:	e58d      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e58b      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
 8002c1e:	2000      	movs	r0, #0
 8002c20:	e589      	b.n	8002736 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8002c22:	2002      	movs	r0, #2
 8002c24:	e58a      	b.n	800273c <HAL_ADC_ConfigChannel+0x34>
 8002c26:	bf00      	nop
 8002c28:	50000300 	.word	0x50000300
 8002c2c:	50000600 	.word	0x50000600
 8002c30:	50000100 	.word	0x50000100
 8002c34:	50000700 	.word	0x50000700
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	053e2d63 	.word	0x053e2d63

08002c40 <ADC_Enable>:
{
 8002c40:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c42:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	f012 0f01 	tst.w	r2, #1
 8002c4a:	d140      	bne.n	8002cce <ADC_Enable+0x8e>
 8002c4c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <ADC_Enable+0x94>)
 8002c52:	4211      	tst	r1, r2
 8002c54:	d009      	beq.n	8002c6a <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8002c66:	2001      	movs	r0, #1
 8002c68:	e032      	b.n	8002cd0 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c70:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002c7a:	f7ff fa09 	bl	8002090 <HAL_GetTick>
 8002c7e:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	f012 0f01 	tst.w	r2, #1
 8002c88:	d11f      	bne.n	8002cca <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	f012 0f01 	tst.w	r2, #1
 8002c90:	d107      	bne.n	8002ca2 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c98:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ca2:	f7ff f9f5 	bl	8002090 <HAL_GetTick>
 8002ca6:	1b43      	subs	r3, r0, r5
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d9e9      	bls.n	8002c80 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f013 0f01 	tst.w	r3, #1
 8002cb4:	d1e4      	bne.n	8002c80 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cb8:	f043 0310 	orr.w	r3, r3, #16
 8002cbc:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	e002      	b.n	8002cd0 <ADC_Enable+0x90>
  return HAL_OK;
 8002cca:	2000      	movs	r0, #0
 8002ccc:	e000      	b.n	8002cd0 <ADC_Enable+0x90>
 8002cce:	2000      	movs	r0, #0
}
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
 8002cd2:	bf00      	nop
 8002cd4:	8000003f 	.word	0x8000003f

08002cd8 <HAL_ADC_Start_DMA>:
{
 8002cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cdc:	4604      	mov	r4, r0
 8002cde:	460f      	mov	r7, r1
 8002ce0:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce2:	6800      	ldr	r0, [r0, #0]
 8002ce4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002ce8:	d021      	beq.n	8002d2e <HAL_ADC_Start_DMA+0x56>
 8002cea:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <HAL_ADC_Start_DMA+0x11c>)
 8002cec:	4298      	cmp	r0, r3
 8002cee:	d01b      	beq.n	8002d28 <HAL_ADC_Start_DMA+0x50>
 8002cf0:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cf2:	689e      	ldr	r6, [r3, #8]
 8002cf4:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cf8:	6885      	ldr	r5, [r0, #8]
 8002cfa:	f015 0f04 	tst.w	r5, #4
 8002cfe:	d174      	bne.n	8002dea <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8002d00:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d073      	beq.n	8002df0 <HAL_ADC_Start_DMA+0x118>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_ADC_Start_DMA+0x124>)
 8002d10:	4298      	cmp	r0, r3
 8002d12:	d00e      	beq.n	8002d32 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d14:	b16e      	cbz	r6, 8002d32 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d16:	2e05      	cmp	r6, #5
 8002d18:	d00b      	beq.n	8002d32 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d1a:	2e09      	cmp	r6, #9
 8002d1c:	d009      	beq.n	8002d32 <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8002d24:	2001      	movs	r0, #1
 8002d26:	e061      	b.n	8002dec <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d2c:	e7e1      	b.n	8002cf2 <HAL_ADC_Start_DMA+0x1a>
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_ADC_Start_DMA+0x128>)
 8002d30:	e7df      	b.n	8002cf2 <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8002d32:	4620      	mov	r0, r4
 8002d34:	f7ff ff84 	bl	8002c40 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	d152      	bne.n	8002de2 <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8002d3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_ADC_Start_DMA+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d040      	beq.n	8002dd6 <HAL_ADC_Start_DMA+0xfe>
 8002d54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d039      	beq.n	8002dd0 <HAL_ADC_Start_DMA+0xf8>
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d000      	beq.n	8002d64 <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d62:	b91e      	cbnz	r6, 8002d6c <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d6a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d6e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002d72:	d033      	beq.n	8002ddc <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d76:	f023 0306 	bic.w	r3, r3, #6
 8002d7a:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <HAL_ADC_Start_DMA+0x12c>)
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d84:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_ADC_Start_DMA+0x130>)
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d8a:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <HAL_ADC_Start_DMA+0x134>)
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	221c      	movs	r2, #28
 8002d92:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002d94:	2300      	movs	r3, #0
 8002d96:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	6853      	ldr	r3, [r2, #4]
 8002d9e:	f043 0310 	orr.w	r3, r3, #16
 8002da2:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002da4:	6822      	ldr	r2, [r4, #0]
 8002da6:	68d3      	ldr	r3, [r2, #12]
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dae:	6821      	ldr	r1, [r4, #0]
 8002db0:	4643      	mov	r3, r8
 8002db2:	463a      	mov	r2, r7
 8002db4:	3140      	adds	r1, #64	; 0x40
 8002db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002db8:	f000 ff9a 	bl	8003cf0 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dbc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002dbe:	6893      	ldr	r3, [r2, #8]
 8002dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6093      	str	r3, [r2, #8]
}
 8002dce:	e00d      	b.n	8002dec <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002dd4:	e7c3      	b.n	8002d5e <HAL_ADC_Start_DMA+0x86>
 8002dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002dda:	e7c0      	b.n	8002d5e <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	6623      	str	r3, [r4, #96]	; 0x60
 8002de0:	e7cc      	b.n	8002d7c <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 8002de2:	2300      	movs	r3, #0
 8002de4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8002de8:	e000      	b.n	8002dec <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8002dea:	2002      	movs	r0, #2
}
 8002dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8002df0:	2002      	movs	r0, #2
 8002df2:	e7fb      	b.n	8002dec <HAL_ADC_Start_DMA+0x114>
 8002df4:	50000100 	.word	0x50000100
 8002df8:	50000700 	.word	0x50000700
 8002dfc:	50000600 	.word	0x50000600
 8002e00:	50000300 	.word	0x50000300
 8002e04:	08002665 	.word	0x08002665
 8002e08:	08002371 	.word	0x08002371
 8002e0c:	080026ed 	.word	0x080026ed

08002e10 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1a:	d073      	beq.n	8002f04 <HAL_ADCEx_InjectedStart_IT+0xf4>
 8002e1c:	4a55      	ldr	r2, [pc, #340]	; (8002f74 <HAL_ADCEx_InjectedStart_IT+0x164>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d06d      	beq.n	8002efe <HAL_ADCEx_InjectedStart_IT+0xee>
 8002e22:	4a55      	ldr	r2, [pc, #340]	; (8002f78 <HAL_ADCEx_InjectedStart_IT+0x168>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e24:	6895      	ldr	r5, [r2, #8]
 8002e26:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	f012 0f08 	tst.w	r2, #8
 8002e30:	f040 809b 	bne.w	8002f6a <HAL_ADCEx_InjectedStart_IT+0x15a>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002e34:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	f413 7fc0 	tst.w	r3, #384	; 0x180
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADCEx_InjectedStart_IT+0x32>
        && (tmp_config_injected_queue == 0UL)
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	da62      	bge.n	8002f08 <HAL_ADCEx_InjectedStart_IT+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002e42:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f000 8091 	beq.w	8002f6e <HAL_ADCEx_InjectedStart_IT+0x15e>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7ff fef4 	bl	8002c40 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	f040 8082 	bne.w	8002f62 <HAL_ADCEx_InjectedStart_IT+0x152>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002e5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e64:	d056      	beq.n	8002f14 <HAL_ADCEx_InjectedStart_IT+0x104>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e68:	f023 0308 	bic.w	r3, r3, #8
 8002e6c:	6623      	str	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e7c:	65e3      	str	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <HAL_ADCEx_InjectedStart_IT+0x164>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d04c      	beq.n	8002f20 <HAL_ADCEx_InjectedStart_IT+0x110>
 8002e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d045      	beq.n	8002f1a <HAL_ADCEx_InjectedStart_IT+0x10a>
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d000      	beq.n	8002e96 <HAL_ADCEx_InjectedStart_IT+0x86>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e94:	b91d      	cbnz	r5, 8002e9e <HAL_ADCEx_InjectedStart_IT+0x8e>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e98:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002e9c:	65e2      	str	r2, [r4, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002e9e:	2260      	movs	r2, #96	; 0x60
 8002ea0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002eb0:	d003      	beq.n	8002eba <HAL_ADCEx_InjectedStart_IT+0xaa>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb8:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002eba:	69a3      	ldr	r3, [r4, #24]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d032      	beq.n	8002f26 <HAL_ADCEx_InjectedStart_IT+0x116>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	6853      	ldr	r3, [r2, #4]
 8002ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec8:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002eca:	6822      	ldr	r2, [r4, #0]
 8002ecc:	6853      	ldr	r3, [r2, #4]
 8002ece:	f043 0320 	orr.w	r3, r3, #32
 8002ed2:	6053      	str	r3, [r2, #4]
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_ADCEx_InjectedStart_IT+0x164>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d032      	beq.n	8002f42 <HAL_ADCEx_InjectedStart_IT+0x132>
 8002edc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02b      	beq.n	8002f3c <HAL_ADCEx_InjectedStart_IT+0x12c>
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02e      	beq.n	8002f48 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eea:	b36d      	cbz	r5, 8002f48 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002eec:	2d06      	cmp	r5, #6
 8002eee:	d02b      	beq.n	8002f48 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ef0:	2d07      	cmp	r5, #7
 8002ef2:	d029      	beq.n	8002f48 <HAL_ADCEx_InjectedStart_IT+0x138>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ef4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002efa:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002efc:	e036      	b.n	8002f6c <HAL_ADCEx_InjectedStart_IT+0x15c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002efe:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002f02:	e78f      	b.n	8002e24 <HAL_ADCEx_InjectedStart_IT+0x14>
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_ADCEx_InjectedStart_IT+0x16c>)
 8002f06:	e78d      	b.n	8002e24 <HAL_ADCEx_InjectedStart_IT+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f0a:	f043 0320 	orr.w	r3, r3, #32
 8002f0e:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
 8002f12:	e02b      	b.n	8002f6c <HAL_ADCEx_InjectedStart_IT+0x15c>
        ADC_CLEAR_ERRORCODE(hadc);
 8002f14:	2300      	movs	r3, #0
 8002f16:	6623      	str	r3, [r4, #96]	; 0x60
 8002f18:	e7a9      	b.n	8002e6e <HAL_ADCEx_InjectedStart_IT+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f1a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002f1e:	e7b7      	b.n	8002e90 <HAL_ADCEx_InjectedStart_IT+0x80>
 8002f20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f24:	e7b4      	b.n	8002e90 <HAL_ADCEx_InjectedStart_IT+0x80>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	6853      	ldr	r3, [r2, #4]
 8002f2a:	f023 0320 	bic.w	r3, r3, #32
 8002f2e:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	6853      	ldr	r3, [r2, #4]
 8002f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f38:	6053      	str	r3, [r2, #4]
          break;
 8002f3a:	e7cb      	b.n	8002ed4 <HAL_ADCEx_InjectedStart_IT+0xc4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f3c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002f40:	e7d1      	b.n	8002ee6 <HAL_ADCEx_InjectedStart_IT+0xd6>
 8002f42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f46:	e7ce      	b.n	8002ee6 <HAL_ADCEx_InjectedStart_IT+0xd6>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002f48:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002f4a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002f4e:	d10d      	bne.n	8002f6c <HAL_ADCEx_InjectedStart_IT+0x15c>
  MODIFY_REG(ADCx->CR,
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f56:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	e004      	b.n	8002f6c <HAL_ADCEx_InjectedStart_IT+0x15c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f62:	2300      	movs	r3, #0
 8002f64:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002f68:	e000      	b.n	8002f6c <HAL_ADCEx_InjectedStart_IT+0x15c>
    return HAL_BUSY;
 8002f6a:	2002      	movs	r0, #2
  }
}
 8002f6c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8002f6e:	2002      	movs	r0, #2
 8002f70:	e7fc      	b.n	8002f6c <HAL_ADCEx_InjectedStart_IT+0x15c>
 8002f72:	bf00      	nop
 8002f74:	50000100 	.word	0x50000100
 8002f78:	50000700 	.word	0x50000700
 8002f7c:	50000300 	.word	0x50000300

08002f80 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f80:	4770      	bx	lr

08002f82 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f84:	4770      	bx	lr

08002f86 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f86:	4770      	bx	lr

08002f88 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002f92:	2200      	movs	r2, #0
 8002f94:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
  assert_param(IS_ADC_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f96:	6940      	ldr	r0, [r0, #20]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f98:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	f000 831f 	beq.w	80035e0 <HAL_ADCEx_InjectedConfigChannel+0x654>
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002fa8:	b1a8      	cbz	r0, 8002fd6 <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8002faa:	6a0a      	ldr	r2, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002fac:	2a01      	cmp	r2, #1
 8002fae:	d012      	beq.n	8002fd6 <HAL_ADCEx_InjectedConfigChannel+0x4a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002fb0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	f040 80cd 	bne.w	8003152 <HAL_ADCEx_InjectedConfigChannel+0x1c6>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002fb8:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002fba:	2200      	movs	r2, #0
 8002fbc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002fbe:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002fc0:	2c00      	cmp	r4, #0
 8002fc2:	f000 80c3 	beq.w	800314c <HAL_ADCEx_InjectedConfigChannel+0x1c0>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002fc6:	6a0a      	ldr	r2, [r1, #32]
 8002fc8:	3a01      	subs	r2, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002fca:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 8002fce:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002fd0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002fd2:	4314      	orrs	r4, r2
 8002fd4:	e0be      	b.n	8003154 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002fd6:	684a      	ldr	r2, [r1, #4]
 8002fd8:	2a09      	cmp	r2, #9
 8002fda:	f000 8097 	beq.w	800310c <HAL_ADCEx_InjectedConfigChannel+0x180>
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fde:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fe0:	6890      	ldr	r0, [r2, #8]
 8002fe2:	f010 0f08 	tst.w	r0, #8
 8002fe6:	d110      	bne.n	800300a <HAL_ADCEx_InjectedConfigChannel+0x7e>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002fe8:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f040 80d0 	bne.w	8003192 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002ff2:	68d0      	ldr	r0, [r2, #12]
 8002ff4:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8002ff8:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8002ffc:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003000:	0524      	lsls	r4, r4, #20
 8003002:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8003006:	4320      	orrs	r0, r4
 8003008:	60d0      	str	r0, [r2, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800300a:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800300c:	68a2      	ldr	r2, [r4, #8]
 800300e:	f012 0204 	ands.w	r2, r2, #4
 8003012:	d000      	beq.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8003014:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003016:	68a5      	ldr	r5, [r4, #8]
 8003018:	f015 0508 	ands.w	r5, r5, #8
 800301c:	d000      	beq.n	8003020 <HAL_ADCEx_InjectedConfigChannel+0x94>
 800301e:	2501      	movs	r5, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003020:	2a00      	cmp	r2, #0
 8003022:	f040 8161 	bne.w	80032e8 <HAL_ADCEx_InjectedConfigChannel+0x35c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003026:	2d00      	cmp	r5, #0
 8003028:	f040 819b 	bne.w	8003362 <HAL_ADCEx_InjectedConfigChannel+0x3d6>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800302c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800302e:	b11a      	cbz	r2, 8003038 <HAL_ADCEx_InjectedConfigChannel+0xac>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003030:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003032:	2a00      	cmp	r2, #0
 8003034:	f040 80bc 	bne.w	80031b0 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003038:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 800303c:	2a01      	cmp	r2, #1
 800303e:	f000 80b1 	beq.w	80031a4 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003042:	68e2      	ldr	r2, [r4, #12]
 8003044:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003048:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304a:	2000      	movs	r0, #0
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 800304c:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8003050:	2a01      	cmp	r2, #1
 8003052:	f000 80bc 	beq.w	80031ce <HAL_ADCEx_InjectedConfigChannel+0x242>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003056:	681c      	ldr	r4, [r3, #0]
 8003058:	6922      	ldr	r2, [r4, #16]
 800305a:	f022 0202 	bic.w	r2, r2, #2
 800305e:	6122      	str	r2, [r4, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003060:	688a      	ldr	r2, [r1, #8]
 8003062:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003066:	f000 80be 	beq.w	80031e6 <HAL_ADCEx_InjectedConfigChannel+0x25a>
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 800306a:	681c      	ldr	r4, [r3, #0]
 800306c:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800306e:	f104 0c14 	add.w	ip, r4, #20
 8003072:	0e77      	lsrs	r7, r6, #25
 8003074:	00bf      	lsls	r7, r7, #2
 8003076:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 800307a:	f85c 4007 	ldr.w	r4, [ip, r7]
 800307e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003082:	f04f 0e07 	mov.w	lr, #7
 8003086:	fa0e fe06 	lsl.w	lr, lr, r6
 800308a:	ea24 040e 	bic.w	r4, r4, lr
 800308e:	40b2      	lsls	r2, r6
 8003090:	4322      	orrs	r2, r4
 8003092:	f84c 2007 	str.w	r2, [ip, r7]

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003096:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003098:	6962      	ldr	r2, [r4, #20]
 800309a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800309e:	6162      	str	r2, [r4, #20]

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80030a0:	694c      	ldr	r4, [r1, #20]
 80030a2:	681e      	ldr	r6, [r3, #0]
 80030a4:	68f2      	ldr	r2, [r6, #12]
 80030a6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80030aa:	0052      	lsls	r2, r2, #1
 80030ac:	fa04 f202 	lsl.w	r2, r4, r2

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80030b0:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80030b4:	f1bc 0f04 	cmp.w	ip, #4
 80030b8:	f000 80af 	beq.w	800321a <HAL_ADCEx_InjectedConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030bc:	3660      	adds	r6, #96	; 0x60
  MODIFY_REG(*preg,
 80030be:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80030c2:	4fa9      	ldr	r7, [pc, #676]	; (8003368 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 80030c4:	4027      	ands	r7, r4
 80030c6:	680c      	ldr	r4, [r1, #0]
 80030c8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80030cc:	4322      	orrs	r2, r4
 80030ce:	4317      	orrs	r7, r2
 80030d0:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 80030d4:	f846 702c 	str.w	r7, [r6, ip, lsl #2]
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	690f      	ldr	r7, [r1, #16]
 80030dc:	698c      	ldr	r4, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030de:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80030e0:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 80030e4:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 80030e8:	4334      	orrs	r4, r6
 80030ea:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	690e      	ldr	r6, [r1, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030f2:	7f0c      	ldrb	r4, [r1, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80030f4:	2c01      	cmp	r4, #1
 80030f6:	f000 808d 	beq.w	8003214 <HAL_ADCEx_InjectedConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030fa:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80030fc:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8003100:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003104:	4325      	orrs	r5, r4
 8003106:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
}
 800310a:	e0ee      	b.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x35e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800310c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800310e:	b1bc      	cbz	r4, 8003140 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003110:	6808      	ldr	r0, [r1, #0]
 8003112:	0e82      	lsrs	r2, r0, #26
 8003114:	0252      	lsls	r2, r2, #9
 8003116:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800311a:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 800311e:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003120:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003122:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003124:	681c      	ldr	r4, [r3, #0]
 8003126:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003128:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 800312c:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003130:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003134:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003138:	4310      	orrs	r0, r2
 800313a:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800313c:	665a      	str	r2, [r3, #100]	; 0x64
 800313e:	e74e      	b.n	8002fde <HAL_ADCEx_InjectedConfigChannel+0x52>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003140:	680a      	ldr	r2, [r1, #0]
 8003142:	0e92      	lsrs	r2, r2, #26
 8003144:	0252      	lsls	r2, r2, #9
 8003146:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
 800314a:	e7eb      	b.n	8003124 <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 800314c:	6a0a      	ldr	r2, [r1, #32]
 800314e:	1e54      	subs	r4, r2, #1
 8003150:	e000      	b.n	8003154 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003152:	2400      	movs	r4, #0
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800315a:	684a      	ldr	r2, [r1, #4]
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	fa00 f202 	lsl.w	r2, r0, r2
 8003164:	4322      	orrs	r2, r4
    hadc->InjectionConfig.ChannelCount--;
 8003166:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003168:	3801      	subs	r0, #1
 800316a:	6698      	str	r0, [r3, #104]	; 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800316c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800316e:	4322      	orrs	r2, r4
 8003170:	665a      	str	r2, [r3, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003172:	2800      	cmp	r0, #0
 8003174:	f47f af33 	bne.w	8002fde <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003178:	681c      	ldr	r4, [r3, #0]
 800317a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800317c:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8003180:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003184:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003188:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800318c:	4302      	orrs	r2, r0
 800318e:	64e2      	str	r2, [r4, #76]	; 0x4c
 8003190:	e725      	b.n	8002fde <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->CFGR,
 8003192:	68d0      	ldr	r0, [r2, #12]
 8003194:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003198:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 800319c:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 80031a0:	60d0      	str	r0, [r2, #12]
 80031a2:	e732      	b.n	800300a <HAL_ADCEx_InjectedConfigChannel+0x7e>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80031a4:	68e2      	ldr	r2, [r4, #12]
 80031a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80031aa:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ac:	2000      	movs	r0, #0
 80031ae:	e74d      	b.n	800304c <HAL_ADCEx_InjectedConfigChannel+0xc0>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80031b0:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80031b4:	2801      	cmp	r0, #1
 80031b6:	d005      	beq.n	80031c4 <HAL_ADCEx_InjectedConfigChannel+0x238>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80031b8:	68e2      	ldr	r2, [r4, #12]
 80031ba:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80031be:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c0:	2000      	movs	r0, #0
 80031c2:	e743      	b.n	800304c <HAL_ADCEx_InjectedConfigChannel+0xc0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031c6:	f042 0220 	orr.w	r2, r2, #32
 80031ca:	65da      	str	r2, [r3, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80031cc:	e73e      	b.n	800304c <HAL_ADCEx_InjectedConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->CFGR2,
 80031ce:	681e      	ldr	r6, [r3, #0]
 80031d0:	6932      	ldr	r2, [r6, #16]
 80031d2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80031d6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80031d8:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80031da:	433c      	orrs	r4, r7
 80031dc:	4322      	orrs	r2, r4
 80031de:	f042 0202 	orr.w	r2, r2, #2
 80031e2:	6132      	str	r2, [r6, #16]
 80031e4:	e73c      	b.n	8003060 <HAL_ADCEx_InjectedConfigChannel+0xd4>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031e6:	681c      	ldr	r4, [r3, #0]
 80031e8:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031ea:	3414      	adds	r4, #20
 80031ec:	0e72      	lsrs	r2, r6, #25
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80031f4:	58a7      	ldr	r7, [r4, r2]
 80031f6:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80031fa:	f04f 0c07 	mov.w	ip, #7
 80031fe:	fa0c f606 	lsl.w	r6, ip, r6
 8003202:	ea27 0606 	bic.w	r6, r7, r6
 8003206:	50a6      	str	r6, [r4, r2]
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003208:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800320a:	6962      	ldr	r2, [r4, #20]
 800320c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003210:	6162      	str	r2, [r4, #20]
}
 8003212:	e745      	b.n	80030a0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003214:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8003218:	e76f      	b.n	80030fa <HAL_ADCEx_InjectedConfigChannel+0x16e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800321a:	6e32      	ldr	r2, [r6, #96]	; 0x60
 800321c:	6e34      	ldr	r4, [r6, #96]	; 0x60
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800321e:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003222:	680a      	ldr	r2, [r1, #0]
 8003224:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003228:	bb7d      	cbnz	r5, 800328a <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800322a:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800322e:	4294      	cmp	r4, r2
 8003230:	d033      	beq.n	800329a <HAL_ADCEx_InjectedConfigChannel+0x30e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003232:	681d      	ldr	r5, [r3, #0]
 8003234:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003236:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8003238:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800323c:	680a      	ldr	r2, [r1, #0]
 800323e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003242:	bb7e      	cbnz	r6, 80032a4 <HAL_ADCEx_InjectedConfigChannel+0x318>
 8003244:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003248:	4294      	cmp	r4, r2
 800324a:	d033      	beq.n	80032b4 <HAL_ADCEx_InjectedConfigChannel+0x328>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800324c:	681d      	ldr	r5, [r3, #0]
 800324e:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003250:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8003252:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003256:	680a      	ldr	r2, [r1, #0]
 8003258:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800325c:	bb7e      	cbnz	r6, 80032be <HAL_ADCEx_InjectedConfigChannel+0x332>
 800325e:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003262:	4294      	cmp	r4, r2
 8003264:	d033      	beq.n	80032ce <HAL_ADCEx_InjectedConfigChannel+0x342>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003266:	681d      	ldr	r5, [r3, #0]
 8003268:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800326a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800326c:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003270:	680a      	ldr	r2, [r1, #0]
 8003272:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003276:	bb7e      	cbnz	r6, 80032d8 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8003278:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800327c:	4294      	cmp	r4, r2
 800327e:	d134      	bne.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 8003280:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003282:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003286:	66ea      	str	r2, [r5, #108]	; 0x6c
}
 8003288:	e02f      	b.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x35e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800328e:	b112      	cbz	r2, 8003296 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  return __builtin_clz(value);
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	e7cb      	b.n	800322e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
    return 32U;
 8003296:	2220      	movs	r2, #32
 8003298:	e7c9      	b.n	800322e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
  MODIFY_REG(*preg,
 800329a:	6e32      	ldr	r2, [r6, #96]	; 0x60
 800329c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032a0:	6632      	str	r2, [r6, #96]	; 0x60
}
 80032a2:	e7c6      	b.n	8003232 <HAL_ADCEx_InjectedConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80032a8:	b112      	cbz	r2, 80032b0 <HAL_ADCEx_InjectedConfigChannel+0x324>
  return __builtin_clz(value);
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	e7cb      	b.n	8003248 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    return 32U;
 80032b0:	2220      	movs	r2, #32
 80032b2:	e7c9      	b.n	8003248 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
  MODIFY_REG(*preg,
 80032b4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80032b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ba:	666a      	str	r2, [r5, #100]	; 0x64
}
 80032bc:	e7c6      	b.n	800324c <HAL_ADCEx_InjectedConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80032c2:	b112      	cbz	r2, 80032ca <HAL_ADCEx_InjectedConfigChannel+0x33e>
  return __builtin_clz(value);
 80032c4:	fab2 f282 	clz	r2, r2
 80032c8:	e7cb      	b.n	8003262 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
    return 32U;
 80032ca:	2220      	movs	r2, #32
 80032cc:	e7c9      	b.n	8003262 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  MODIFY_REG(*preg,
 80032ce:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80032d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032d4:	66aa      	str	r2, [r5, #104]	; 0x68
}
 80032d6:	e7c6      	b.n	8003266 <HAL_ADCEx_InjectedConfigChannel+0x2da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80032dc:	b112      	cbz	r2, 80032e4 <HAL_ADCEx_InjectedConfigChannel+0x358>
  return __builtin_clz(value);
 80032de:	fab2 f282 	clz	r2, r2
 80032e2:	e7cb      	b.n	800327c <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    return 32U;
 80032e4:	2220      	movs	r2, #32
 80032e6:	e7c9      	b.n	800327c <HAL_ADCEx_InjectedConfigChannel+0x2f0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e8:	2000      	movs	r0, #0
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ea:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ec:	6894      	ldr	r4, [r2, #8]
 80032ee:	f014 0f01 	tst.w	r4, #1
 80032f2:	d110      	bne.n	8003316 <HAL_ADCEx_InjectedConfigChannel+0x38a>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80032f4:	680c      	ldr	r4, [r1, #0]
 80032f6:	68ce      	ldr	r6, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80032f8:	4d1c      	ldr	r5, [pc, #112]	; (800336c <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 80032fa:	42ae      	cmp	r6, r5
 80032fc:	d046      	beq.n	800338c <HAL_ADCEx_InjectedConfigChannel+0x400>
    CLEAR_BIT(ADCx->DIFSEL,
 80032fe:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003302:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003306:	ea25 0404 	bic.w	r4, r5, r4
 800330a:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800330e:	68cc      	ldr	r4, [r1, #12]
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8003312:	4294      	cmp	r4, r2
 8003314:	d042      	beq.n	800339c <HAL_ADCEx_InjectedConfigChannel+0x410>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003316:	680a      	ldr	r2, [r1, #0]
 8003318:	4915      	ldr	r1, [pc, #84]	; (8003370 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 800331a:	420a      	tst	r2, r1
 800331c:	d01c      	beq.n	8003358 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003324:	f000 80fb 	beq.w	800351e <HAL_ADCEx_InjectedConfigChannel+0x592>
 8003328:	4c12      	ldr	r4, [pc, #72]	; (8003374 <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 800332a:	42a1      	cmp	r1, r4
 800332c:	f000 80f4 	beq.w	8003518 <HAL_ADCEx_InjectedConfigChannel+0x58c>
 8003330:	4c11      	ldr	r4, [pc, #68]	; (8003378 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003332:	68a4      	ldr	r4, [r4, #8]
 8003334:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003338:	4e10      	ldr	r6, [pc, #64]	; (800337c <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
 800333a:	42b2      	cmp	r2, r6
 800333c:	f000 80f1 	beq.w	8003522 <HAL_ADCEx_InjectedConfigChannel+0x596>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003340:	4e0f      	ldr	r6, [pc, #60]	; (8003380 <HAL_ADCEx_InjectedConfigChannel+0x3f4>)
 8003342:	42b2      	cmp	r2, r6
 8003344:	f000 80ed 	beq.w	8003522 <HAL_ADCEx_InjectedConfigChannel+0x596>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003348:	4e0e      	ldr	r6, [pc, #56]	; (8003384 <HAL_ADCEx_InjectedConfigChannel+0x3f8>)
 800334a:	42b2      	cmp	r2, r6
 800334c:	f000 811a 	beq.w	8003584 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003350:	4e0d      	ldr	r6, [pc, #52]	; (8003388 <HAL_ADCEx_InjectedConfigChannel+0x3fc>)
 8003352:	42b2      	cmp	r2, r6
 8003354:	f000 812d 	beq.w	80035b2 <HAL_ADCEx_InjectedConfigChannel+0x626>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800335e:	b003      	add	sp, #12
 8003360:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003362:	2000      	movs	r0, #0
 8003364:	e7c1      	b.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x35e>
 8003366:	bf00      	nop
 8003368:	03fff000 	.word	0x03fff000
 800336c:	407f0000 	.word	0x407f0000
 8003370:	80080000 	.word	0x80080000
 8003374:	50000100 	.word	0x50000100
 8003378:	50000700 	.word	0x50000700
 800337c:	c3210000 	.word	0xc3210000
 8003380:	90c00010 	.word	0x90c00010
 8003384:	c7520000 	.word	0xc7520000
 8003388:	cb840000 	.word	0xcb840000
    SET_BIT(ADCx->DIFSEL,
 800338c:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003390:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003394:	432c      	orrs	r4, r5
 8003396:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
 800339a:	e7b8      	b.n	800330e <HAL_ADCEx_InjectedConfigChannel+0x382>
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800339c:	681d      	ldr	r5, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800339e:	680a      	ldr	r2, [r1, #0]
 80033a0:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80033a4:	2e00      	cmp	r6, #0
 80033a6:	d137      	bne.n	8003418 <HAL_ADCEx_InjectedConfigChannel+0x48c>
 80033a8:	0e94      	lsrs	r4, r2, #26
 80033aa:	3401      	adds	r4, #1
 80033ac:	f004 041f 	and.w	r4, r4, #31
 80033b0:	2c09      	cmp	r4, #9
 80033b2:	bf8c      	ite	hi
 80033b4:	2400      	movhi	r4, #0
 80033b6:	2401      	movls	r4, #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b8:	2c00      	cmp	r4, #0
 80033ba:	d065      	beq.n	8003488 <HAL_ADCEx_InjectedConfigChannel+0x4fc>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80033bc:	2e00      	cmp	r6, #0
 80033be:	d13a      	bne.n	8003436 <HAL_ADCEx_InjectedConfigChannel+0x4aa>
 80033c0:	0e94      	lsrs	r4, r2, #26
 80033c2:	3401      	adds	r4, #1
 80033c4:	06a4      	lsls	r4, r4, #26
 80033c6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80033ca:	2e00      	cmp	r6, #0
 80033cc:	d13f      	bne.n	800344e <HAL_ADCEx_InjectedConfigChannel+0x4c2>
 80033ce:	0e97      	lsrs	r7, r2, #26
 80033d0:	3701      	adds	r7, #1
 80033d2:	f007 0c1f 	and.w	ip, r7, #31
 80033d6:	2701      	movs	r7, #1
 80033d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80033dc:	433c      	orrs	r4, r7
 80033de:	2e00      	cmp	r6, #0
 80033e0:	d144      	bne.n	800346c <HAL_ADCEx_InjectedConfigChannel+0x4e0>
 80033e2:	0e92      	lsrs	r2, r2, #26
 80033e4:	3201      	adds	r2, #1
 80033e6:	f002 021f 	and.w	r2, r2, #31
 80033ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80033ee:	0512      	lsls	r2, r2, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f0:	4322      	orrs	r2, r4
 80033f2:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033f4:	3514      	adds	r5, #20
 80033f6:	0e56      	lsrs	r6, r2, #25
 80033f8:	00b6      	lsls	r6, r6, #2
 80033fa:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80033fe:	59af      	ldr	r7, [r5, r6]
 8003400:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003404:	f04f 0c07 	mov.w	ip, #7
 8003408:	fa0c fc02 	lsl.w	ip, ip, r2
 800340c:	ea27 070c 	bic.w	r7, r7, ip
 8003410:	4094      	lsls	r4, r2
 8003412:	433c      	orrs	r4, r7
 8003414:	51ac      	str	r4, [r5, r6]
}
 8003416:	e77e      	b.n	8003316 <HAL_ADCEx_InjectedConfigChannel+0x38a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800341c:	b14c      	cbz	r4, 8003432 <HAL_ADCEx_InjectedConfigChannel+0x4a6>
  return __builtin_clz(value);
 800341e:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003422:	3401      	adds	r4, #1
 8003424:	f004 041f 	and.w	r4, r4, #31
 8003428:	2c09      	cmp	r4, #9
 800342a:	bf8c      	ite	hi
 800342c:	2400      	movhi	r4, #0
 800342e:	2401      	movls	r4, #1
 8003430:	e7c2      	b.n	80033b8 <HAL_ADCEx_InjectedConfigChannel+0x42c>
    return 32U;
 8003432:	2420      	movs	r4, #32
 8003434:	e7f5      	b.n	8003422 <HAL_ADCEx_InjectedConfigChannel+0x496>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800343a:	b134      	cbz	r4, 800344a <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 800343c:	fab4 f484 	clz	r4, r4
 8003440:	3401      	adds	r4, #1
 8003442:	06a4      	lsls	r4, r4, #26
 8003444:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003448:	e7bf      	b.n	80033ca <HAL_ADCEx_InjectedConfigChannel+0x43e>
    return 32U;
 800344a:	2420      	movs	r4, #32
 800344c:	e7f8      	b.n	8003440 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8003452:	b14f      	cbz	r7, 8003468 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003454:	fab7 f787 	clz	r7, r7
 8003458:	3701      	adds	r7, #1
 800345a:	f007 071f 	and.w	r7, r7, #31
 800345e:	f04f 0c01 	mov.w	ip, #1
 8003462:	fa0c f707 	lsl.w	r7, ip, r7
 8003466:	e7b9      	b.n	80033dc <HAL_ADCEx_InjectedConfigChannel+0x450>
    return 32U;
 8003468:	2720      	movs	r7, #32
 800346a:	e7f5      	b.n	8003458 <HAL_ADCEx_InjectedConfigChannel+0x4cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003470:	b142      	cbz	r2, 8003484 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003472:	fab2 f282 	clz	r2, r2
 8003476:	3201      	adds	r2, #1
 8003478:	f002 021f 	and.w	r2, r2, #31
 800347c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003480:	0512      	lsls	r2, r2, #20
 8003482:	e7b5      	b.n	80033f0 <HAL_ADCEx_InjectedConfigChannel+0x464>
    return 32U;
 8003484:	2220      	movs	r2, #32
 8003486:	e7f6      	b.n	8003476 <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8003488:	b9d6      	cbnz	r6, 80034c0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800348a:	0e94      	lsrs	r4, r2, #26
 800348c:	3401      	adds	r4, #1
 800348e:	06a4      	lsls	r4, r4, #26
 8003490:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003494:	bb06      	cbnz	r6, 80034d8 <HAL_ADCEx_InjectedConfigChannel+0x54c>
 8003496:	0e97      	lsrs	r7, r2, #26
 8003498:	3701      	adds	r7, #1
 800349a:	f007 0c1f 	and.w	ip, r7, #31
 800349e:	2701      	movs	r7, #1
 80034a0:	fa07 f70c 	lsl.w	r7, r7, ip
 80034a4:	433c      	orrs	r4, r7
 80034a6:	bb36      	cbnz	r6, 80034f6 <HAL_ADCEx_InjectedConfigChannel+0x56a>
 80034a8:	0e92      	lsrs	r2, r2, #26
 80034aa:	3201      	adds	r2, #1
 80034ac:	f002 021f 	and.w	r2, r2, #31
 80034b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034b4:	3a1e      	subs	r2, #30
 80034b6:	0512      	lsls	r2, r2, #20
 80034b8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034bc:	4322      	orrs	r2, r4
 80034be:	e798      	b.n	80033f2 <HAL_ADCEx_InjectedConfigChannel+0x466>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80034c4:	b134      	cbz	r4, 80034d4 <HAL_ADCEx_InjectedConfigChannel+0x548>
  return __builtin_clz(value);
 80034c6:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80034ca:	3401      	adds	r4, #1
 80034cc:	06a4      	lsls	r4, r4, #26
 80034ce:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80034d2:	e7df      	b.n	8003494 <HAL_ADCEx_InjectedConfigChannel+0x508>
    return 32U;
 80034d4:	2420      	movs	r4, #32
 80034d6:	e7f8      	b.n	80034ca <HAL_ADCEx_InjectedConfigChannel+0x53e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 80034dc:	b14f      	cbz	r7, 80034f2 <HAL_ADCEx_InjectedConfigChannel+0x566>
  return __builtin_clz(value);
 80034de:	fab7 f787 	clz	r7, r7
 80034e2:	3701      	adds	r7, #1
 80034e4:	f007 071f 	and.w	r7, r7, #31
 80034e8:	f04f 0c01 	mov.w	ip, #1
 80034ec:	fa0c f707 	lsl.w	r7, ip, r7
 80034f0:	e7d8      	b.n	80034a4 <HAL_ADCEx_InjectedConfigChannel+0x518>
    return 32U;
 80034f2:	2720      	movs	r7, #32
 80034f4:	e7f5      	b.n	80034e2 <HAL_ADCEx_InjectedConfigChannel+0x556>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80034fa:	b15a      	cbz	r2, 8003514 <HAL_ADCEx_InjectedConfigChannel+0x588>
  return __builtin_clz(value);
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	3201      	adds	r2, #1
 8003502:	f002 021f 	and.w	r2, r2, #31
 8003506:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800350a:	3a1e      	subs	r2, #30
 800350c:	0512      	lsls	r2, r2, #20
 800350e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003512:	e7d3      	b.n	80034bc <HAL_ADCEx_InjectedConfigChannel+0x530>
    return 32U;
 8003514:	2220      	movs	r2, #32
 8003516:	e7f3      	b.n	8003500 <HAL_ADCEx_InjectedConfigChannel+0x574>
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003518:	f504 7400 	add.w	r4, r4, #512	; 0x200
 800351c:	e709      	b.n	8003332 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 800351e:	4c31      	ldr	r4, [pc, #196]	; (80035e4 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003520:	e707      	b.n	8003332 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003522:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8003526:	f47f af0f 	bne.w	8003348 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800352a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800352e:	d003      	beq.n	8003538 <HAL_ADCEx_InjectedConfigChannel+0x5ac>
 8003530:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <HAL_ADCEx_InjectedConfigChannel+0x65c>)
 8003532:	4291      	cmp	r1, r2
 8003534:	f47f af10 	bne.w	8003358 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003538:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800353c:	d019      	beq.n	8003572 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
 800353e:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003540:	4291      	cmp	r1, r2
 8003542:	d014      	beq.n	800356e <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8003544:	492a      	ldr	r1, [pc, #168]	; (80035f0 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003546:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800354a:	688a      	ldr	r2, [r1, #8]
 800354c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003550:	4315      	orrs	r5, r2
 8003552:	608d      	str	r5, [r1, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <HAL_ADCEx_InjectedConfigChannel+0x668>)
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	0992      	lsrs	r2, r2, #6
 800355a:	4927      	ldr	r1, [pc, #156]	; (80035f8 <HAL_ADCEx_InjectedConfigChannel+0x66c>)
 800355c:	fba1 1202 	umull	r1, r2, r1, r2
 8003560:	0992      	lsrs	r2, r2, #6
 8003562:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	3218      	adds	r2, #24
 800356a:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 800356c:	e006      	b.n	800357c <HAL_ADCEx_InjectedConfigChannel+0x5f0>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356e:	491d      	ldr	r1, [pc, #116]	; (80035e4 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003570:	e7e9      	b.n	8003546 <HAL_ADCEx_InjectedConfigChannel+0x5ba>
 8003572:	491c      	ldr	r1, [pc, #112]	; (80035e4 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003574:	e7e7      	b.n	8003546 <HAL_ADCEx_InjectedConfigChannel+0x5ba>
          wait_loop_index--;
 8003576:	9a01      	ldr	r2, [sp, #4]
 8003578:	3a01      	subs	r2, #1
 800357a:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 800357c:	9a01      	ldr	r2, [sp, #4]
 800357e:	2a00      	cmp	r2, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
 8003582:	e6e9      	b.n	8003358 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003584:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8003588:	f47f aee2 	bne.w	8003350 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003590:	d00d      	beq.n	80035ae <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003592:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003594:	4291      	cmp	r1, r2
 8003596:	d008      	beq.n	80035aa <HAL_ADCEx_InjectedConfigChannel+0x61e>
 8003598:	4915      	ldr	r1, [pc, #84]	; (80035f0 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 800359a:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 800359e:	688a      	ldr	r2, [r1, #8]
 80035a0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035a4:	4315      	orrs	r5, r2
 80035a6:	608d      	str	r5, [r1, #8]
}
 80035a8:	e6d6      	b.n	8003358 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 80035aa:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 80035ac:	e7f5      	b.n	800359a <HAL_ADCEx_InjectedConfigChannel+0x60e>
 80035ae:	490d      	ldr	r1, [pc, #52]	; (80035e4 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 80035b0:	e7f3      	b.n	800359a <HAL_ADCEx_InjectedConfigChannel+0x60e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035b2:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 80035b6:	f47f aecf 	bne.w	8003358 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
      if (ADC_VREFINT_INSTANCE(hadc))
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <HAL_ADCEx_InjectedConfigChannel+0x660>)
 80035bc:	4291      	cmp	r1, r2
 80035be:	f43f aecb 	beq.w	8003358 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c2:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80035c6:	d008      	beq.n	80035da <HAL_ADCEx_InjectedConfigChannel+0x64e>
 80035c8:	4909      	ldr	r1, [pc, #36]	; (80035f0 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 80035ca:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035ce:	688a      	ldr	r2, [r1, #8]
 80035d0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035d4:	4315      	orrs	r5, r2
 80035d6:	608d      	str	r5, [r1, #8]
}
 80035d8:	e6be      	b.n	8003358 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 80035da:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80035de:	e7f4      	b.n	80035ca <HAL_ADCEx_InjectedConfigChannel+0x63e>
  __HAL_LOCK(hadc);
 80035e0:	2002      	movs	r0, #2
 80035e2:	e6bc      	b.n	800335e <HAL_ADCEx_InjectedConfigChannel+0x3d2>
 80035e4:	50000300 	.word	0x50000300
 80035e8:	50000600 	.word	0x50000600
 80035ec:	50000100 	.word	0x50000100
 80035f0:	50000700 	.word	0x50000700
 80035f4:	20000000 	.word	0x20000000
 80035f8:	053e2d63 	.word	0x053e2d63

080035fc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035fc:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003600:	2a01      	cmp	r2, #1
 8003602:	f000 80d6 	beq.w	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8003606:	b410      	push	{r4}
 8003608:	b09d      	sub	sp, #116	; 0x74
 800360a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800360c:	2201      	movs	r2, #1
 800360e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003612:	2200      	movs	r2, #0
 8003614:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003616:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003618:	6800      	ldr	r0, [r0, #0]
 800361a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800361e:	d047      	beq.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003620:	4a65      	ldr	r2, [pc, #404]	; (80037b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003622:	4290      	cmp	r0, r2
 8003624:	d047      	beq.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003626:	2200      	movs	r2, #0
 8003628:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800362a:	9a01      	ldr	r2, [sp, #4]
 800362c:	2a00      	cmp	r2, #0
 800362e:	d046      	beq.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	f012 0204 	ands.w	r2, r2, #4
 8003636:	d000      	beq.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003638:	2201      	movs	r2, #1
 800363a:	6884      	ldr	r4, [r0, #8]
 800363c:	f014 0f04 	tst.w	r4, #4
 8003640:	f040 80a7 	bne.w	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003644:	2a00      	cmp	r2, #0
 8003646:	f040 80a4 	bne.w	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800364a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800364e:	d042      	beq.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8003650:	4a5a      	ldr	r2, [pc, #360]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003652:	4290      	cmp	r0, r2
 8003654:	d03c      	beq.n	80036d0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003656:	4a5a      	ldr	r2, [pc, #360]	; (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003658:	6808      	ldr	r0, [r1, #0]
 800365a:	2800      	cmp	r0, #0
 800365c:	d05c      	beq.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800365e:	6890      	ldr	r0, [r2, #8]
 8003660:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003664:	684c      	ldr	r4, [r1, #4]
 8003666:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 800366a:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 800366e:	4320      	orrs	r0, r4
 8003670:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003678:	d02f      	beq.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0xde>
 800367a:	4c50      	ldr	r4, [pc, #320]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800367c:	42a0      	cmp	r0, r4
 800367e:	d02c      	beq.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003680:	484d      	ldr	r0, [pc, #308]	; (80037b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003682:	6884      	ldr	r4, [r0, #8]
 8003684:	f014 0401 	ands.w	r4, r4, #1
 8003688:	d000      	beq.n	800368c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 800368a:	2401      	movs	r4, #1
 800368c:	484d      	ldr	r0, [pc, #308]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800368e:	6880      	ldr	r0, [r0, #8]
 8003690:	f010 0001 	ands.w	r0, r0, #1
 8003694:	d000      	beq.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003696:	2001      	movs	r0, #1
 8003698:	4320      	orrs	r0, r4
 800369a:	4c4b      	ldr	r4, [pc, #300]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800369c:	68a4      	ldr	r4, [r4, #8]
 800369e:	f014 0401 	ands.w	r4, r4, #1
 80036a2:	d000      	beq.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80036a4:	2401      	movs	r4, #1
 80036a6:	4320      	orrs	r0, r4
 80036a8:	bf0c      	ite	eq
 80036aa:	2001      	moveq	r0, #1
 80036ac:	2000      	movne	r0, #0
 80036ae:	e025      	b.n	80036fc <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036b0:	4a42      	ldr	r2, [pc, #264]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036b2:	9201      	str	r2, [sp, #4]
 80036b4:	e7b9      	b.n	800362a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80036b6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80036ba:	9201      	str	r2, [sp, #4]
 80036bc:	e7b5      	b.n	800362a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036c0:	f042 0220 	orr.w	r2, r2, #32
 80036c4:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 80036cc:	2001      	movs	r0, #1
 80036ce:	e068      	b.n	80037a2 <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036d0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80036d4:	e7c0      	b.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80036d6:	4a3d      	ldr	r2, [pc, #244]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80036d8:	e7be      	b.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80036da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036de:	6880      	ldr	r0, [r0, #8]
 80036e0:	f010 0001 	ands.w	r0, r0, #1
 80036e4:	d000      	beq.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80036e6:	2001      	movs	r0, #1
 80036e8:	4c34      	ldr	r4, [pc, #208]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036ea:	68a4      	ldr	r4, [r4, #8]
 80036ec:	f014 0401 	ands.w	r4, r4, #1
 80036f0:	d000      	beq.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80036f2:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f4:	4320      	orrs	r0, r4
 80036f6:	bf0c      	ite	eq
 80036f8:	2001      	moveq	r0, #1
 80036fa:	2000      	movne	r0, #0
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d054      	beq.n	80037aa <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003700:	6890      	ldr	r0, [r2, #8]
 8003702:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 8003706:	f020 000f 	bic.w	r0, r0, #15
 800370a:	680c      	ldr	r4, [r1, #0]
 800370c:	6889      	ldr	r1, [r1, #8]
 800370e:	4321      	orrs	r1, r4
 8003710:	4308      	orrs	r0, r1
 8003712:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003714:	2000      	movs	r0, #0
 8003716:	e041      	b.n	800379c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003718:	6891      	ldr	r1, [r2, #8]
 800371a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800371e:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003726:	d01a      	beq.n	800375e <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8003728:	4824      	ldr	r0, [pc, #144]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800372a:	4281      	cmp	r1, r0
 800372c:	d017      	beq.n	800375e <HAL_ADCEx_MultiModeConfigChannel+0x162>
 800372e:	4922      	ldr	r1, [pc, #136]	; (80037b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003730:	6888      	ldr	r0, [r1, #8]
 8003732:	f010 0001 	ands.w	r0, r0, #1
 8003736:	d000      	beq.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003738:	2001      	movs	r0, #1
 800373a:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800373c:	6889      	ldr	r1, [r1, #8]
 800373e:	f011 0101 	ands.w	r1, r1, #1
 8003742:	d000      	beq.n	8003746 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8003744:	2101      	movs	r1, #1
 8003746:	4301      	orrs	r1, r0
 8003748:	481f      	ldr	r0, [pc, #124]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800374a:	6880      	ldr	r0, [r0, #8]
 800374c:	f010 0001 	ands.w	r0, r0, #1
 8003750:	d000      	beq.n	8003754 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8003752:	2001      	movs	r0, #1
 8003754:	4301      	orrs	r1, r0
 8003756:	bf0c      	ite	eq
 8003758:	2101      	moveq	r1, #1
 800375a:	2100      	movne	r1, #0
 800375c:	e010      	b.n	8003780 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 800375e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003762:	6889      	ldr	r1, [r1, #8]
 8003764:	f011 0101 	ands.w	r1, r1, #1
 8003768:	d000      	beq.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800376a:	2101      	movs	r1, #1
 800376c:	4813      	ldr	r0, [pc, #76]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800376e:	6880      	ldr	r0, [r0, #8]
 8003770:	f010 0001 	ands.w	r0, r0, #1
 8003774:	d000      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8003776:	2001      	movs	r0, #1
 8003778:	4301      	orrs	r1, r0
 800377a:	bf0c      	ite	eq
 800377c:	2101      	moveq	r1, #1
 800377e:	2100      	movne	r1, #0
 8003780:	b1a9      	cbz	r1, 80037ae <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003782:	6891      	ldr	r1, [r2, #8]
 8003784:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003788:	f021 010f 	bic.w	r1, r1, #15
 800378c:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800378e:	2000      	movs	r0, #0
 8003790:	e004      	b.n	800379c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003794:	f042 0220 	orr.w	r2, r2, #32
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800379a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80037a2:	b01d      	add	sp, #116	; 0x74
 80037a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037a8:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037aa:	2000      	movs	r0, #0
 80037ac:	e7f6      	b.n	800379c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e7f4      	b.n	800379c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 80037b2:	2002      	movs	r0, #2
}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	50000400 	.word	0x50000400
 80037bc:	50000100 	.word	0x50000100
 80037c0:	50000700 	.word	0x50000700
 80037c4:	50000500 	.word	0x50000500
 80037c8:	50000600 	.word	0x50000600
 80037cc:	50000300 	.word	0x50000300

080037d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80037d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037dc:	0200      	lsls	r0, r0, #8
 80037de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80037e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80037ec:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_NVIC_SetPriority+0x68>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fe:	f1c3 0c07 	rsb	ip, r3, #7
 8003802:	f1bc 0f04 	cmp.w	ip, #4
 8003806:	bf28      	it	cs
 8003808:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380c:	f103 0e04 	add.w	lr, r3, #4
 8003810:	f1be 0f06 	cmp.w	lr, #6
 8003814:	d918      	bls.n	8003848 <HAL_NVIC_SetPriority+0x54>
 8003816:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 3eff 	mov.w	lr, #4294967295
 800381c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003820:	ea21 010c 	bic.w	r1, r1, ip
 8003824:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003826:	fa0e f303 	lsl.w	r3, lr, r3
 800382a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003830:	2800      	cmp	r0, #0
 8003832:	db0b      	blt.n	800384c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	0109      	lsls	r1, r1, #4
 8003836:	b2c9      	uxtb	r1, r1
 8003838:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800383c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003840:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003844:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003848:	2300      	movs	r3, #0
 800384a:	e7e5      	b.n	8003818 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	f000 000f 	and.w	r0, r0, #15
 8003850:	0109      	lsls	r1, r1, #4
 8003852:	b2c9      	uxtb	r1, r1
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <HAL_NVIC_SetPriority+0x6c>)
 8003856:	5419      	strb	r1, [r3, r0]
 8003858:	e7f4      	b.n	8003844 <HAL_NVIC_SetPriority+0x50>
 800385a:	bf00      	nop
 800385c:	e000ed00 	.word	0xe000ed00
 8003860:	e000ed14 	.word	0xe000ed14

08003864 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003864:	2800      	cmp	r0, #0
 8003866:	db07      	blt.n	8003878 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003868:	f000 021f 	and.w	r2, r0, #31
 800386c:	0940      	lsrs	r0, r0, #5
 800386e:	2301      	movs	r3, #1
 8003870:	4093      	lsls	r3, r2
 8003872:	4a02      	ldr	r2, [pc, #8]	; (800387c <HAL_NVIC_EnableIRQ+0x18>)
 8003874:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000e100 	.word	0xe000e100

08003880 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	3801      	subs	r0, #1
 8003882:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003886:	d20b      	bcs.n	80038a0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003888:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800388c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_SYSTICK_Config+0x24>)
 8003890:	21f0      	movs	r1, #240	; 0xf0
 8003892:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003896:	2000      	movs	r0, #0
 8003898:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	2207      	movs	r2, #7
 800389c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800389e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038a0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80038a8:	b170      	cbz	r0, 80038c8 <HAL_DAC_Init+0x20>
{
 80038aa:	b510      	push	{r4, lr}
 80038ac:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038ae:	7903      	ldrb	r3, [r0, #4]
 80038b0:	b133      	cbz	r3, 80038c0 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038b2:	2302      	movs	r3, #2
 80038b4:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038b6:	2000      	movs	r0, #0
 80038b8:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038ba:	2301      	movs	r3, #1
 80038bc:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80038be:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80038c0:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80038c2:	f7fe f9a9 	bl	8001c18 <HAL_DAC_MspInit>
 80038c6:	e7f4      	b.n	80038b2 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80038c8:	2001      	movs	r0, #1
}
 80038ca:	4770      	bx	lr

080038cc <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038cc:	7943      	ldrb	r3, [r0, #5]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d02f      	beq.n	8003932 <HAL_DAC_Start+0x66>
{
 80038d2:	b570      	push	{r4, r5, r6, lr}
 80038d4:	4604      	mov	r4, r0
 80038d6:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 80038d8:	2001      	movs	r0, #1
 80038da:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038dc:	2302      	movs	r3, #2
 80038de:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	f001 0610 	and.w	r6, r1, #16
 80038e8:	fa00 f106 	lsl.w	r1, r0, r6
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80038f0:	f7fe fbd4 	bl	800209c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80038f4:	b97d      	cbnz	r5, 8003916 <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	6813      	ldr	r3, [r2, #0]
 80038fa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d004      	beq.n	800390c <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003902:	2301      	movs	r3, #1
 8003904:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003906:	2000      	movs	r0, #0
 8003908:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 800390a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800390c:	6853      	ldr	r3, [r2, #4]
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6053      	str	r3, [r2, #4]
 8003914:	e7f5      	b.n	8003902 <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	680a      	ldr	r2, [r1, #0]
 800391a:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 800391e:	2302      	movs	r3, #2
 8003920:	fa03 f606 	lsl.w	r6, r3, r6
 8003924:	42b2      	cmp	r2, r6
 8003926:	d1ec      	bne.n	8003902 <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003928:	684b      	ldr	r3, [r1, #4]
 800392a:	f043 0302 	orr.w	r3, r3, #2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e7e7      	b.n	8003902 <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 8003932:	2002      	movs	r0, #2
}
 8003934:	4770      	bx	lr

08003936 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003936:	b410      	push	{r4}
 8003938:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 800393a:	2400      	movs	r4, #0
 800393c:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800393e:	6800      	ldr	r0, [r0, #0]
 8003940:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003942:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8003944:	b951      	cbnz	r1, 800395c <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003946:	9901      	ldr	r1, [sp, #4]
 8003948:	440a      	add	r2, r1
 800394a:	3208      	adds	r2, #8
 800394c:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800394e:	9a01      	ldr	r2, [sp, #4]
 8003950:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8003952:	2000      	movs	r0, #0
 8003954:	b003      	add	sp, #12
 8003956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800395a:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800395c:	9901      	ldr	r1, [sp, #4]
 800395e:	440a      	add	r2, r1
 8003960:	3214      	adds	r2, #20
 8003962:	9201      	str	r2, [sp, #4]
 8003964:	e7f3      	b.n	800394e <HAL_DAC_SetValue+0x18>
	...

08003968 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003968:	7943      	ldrb	r3, [r0, #5]
 800396a:	2b01      	cmp	r3, #1
 800396c:	f000 80f4 	beq.w	8003b58 <HAL_DAC_ConfigChannel+0x1f0>
{
 8003970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003974:	4604      	mov	r4, r0
 8003976:	460e      	mov	r6, r1
 8003978:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 800397a:	2301      	movs	r3, #1
 800397c:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800397e:	2302      	movs	r3, #2
 8003980:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003982:	688b      	ldr	r3, [r1, #8]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d017      	beq.n	80039b8 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003988:	69f3      	ldr	r3, [r6, #28]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d05e      	beq.n	8003a4c <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003992:	f005 0510 	and.w	r5, r5, #16
 8003996:	2307      	movs	r3, #7
 8003998:	40ab      	lsls	r3, r5
 800399a:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800399e:	69b3      	ldr	r3, [r6, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d060      	beq.n	8003a66 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f000 80bd 	beq.w	8003b24 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80039aa:	6973      	ldr	r3, [r6, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 80bc 	bne.w	8003b2a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80039b2:	f04f 0801 	mov.w	r8, #1
 80039b6:	e058      	b.n	8003a6a <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 80039b8:	f7fe fb6a 	bl	8002090 <HAL_GetTick>
 80039bc:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80039be:	b17d      	cbz	r5, 80039e0 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	da3a      	bge.n	8003a3e <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039c8:	f7fe fb62 	bl	8002090 <HAL_GetTick>
 80039cc:	1bc0      	subs	r0, r0, r7
 80039ce:	2801      	cmp	r0, #1
 80039d0:	d9f6      	bls.n	80039c0 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039d2:	6923      	ldr	r3, [r4, #16]
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039da:	2003      	movs	r0, #3
 80039dc:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80039de:	e09f      	b.n	8003b20 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80039e8:	d00b      	beq.n	8003a02 <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039ea:	f7fe fb51 	bl	8002090 <HAL_GetTick>
 80039ee:	1bc0      	subs	r0, r0, r7
 80039f0:	2801      	cmp	r0, #1
 80039f2:	d9f5      	bls.n	80039e0 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039f4:	6923      	ldr	r3, [r4, #16]
 80039f6:	f043 0308 	orr.w	r3, r3, #8
 80039fa:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039fc:	2003      	movs	r0, #3
 80039fe:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8003a00:	e08e      	b.n	8003b20 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f7fe fb4a 	bl	800209c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003a12:	f005 0110 	and.w	r1, r5, #16
 8003a16:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003a1a:	408b      	lsls	r3, r1
 8003a1c:	ea22 0203 	bic.w	r2, r2, r3
 8003a20:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003a22:	408b      	lsls	r3, r1
 8003a24:	431a      	orrs	r2, r3
 8003a26:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003a2c:	22ff      	movs	r2, #255	; 0xff
 8003a2e:	408a      	lsls	r2, r1
 8003a30:	ea23 0302 	bic.w	r3, r3, r2
 8003a34:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003a36:	408a      	lsls	r2, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003a3c:	e7a4      	b.n	8003988 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7fe fb2c 	bl	800209c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
 8003a4a:	e7e0      	b.n	8003a0e <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 8003a4c:	6821      	ldr	r1, [r4, #0]
 8003a4e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a50:	f005 0010 	and.w	r0, r5, #16
 8003a54:	231f      	movs	r3, #31
 8003a56:	4083      	lsls	r3, r0
 8003a58:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a5c:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a5e:	4083      	lsls	r3, r0
 8003a60:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8003a62:	638b      	str	r3, [r1, #56]	; 0x38
 8003a64:	e793      	b.n	800398e <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 8003a66:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a6a:	68b3      	ldr	r3, [r6, #8]
 8003a6c:	6972      	ldr	r2, [r6, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a78:	40aa      	lsls	r2, r5
 8003a7a:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003a7e:	7932      	ldrb	r2, [r6, #4]
 8003a80:	2a01      	cmp	r2, #1
 8003a82:	d055      	beq.n	8003b30 <HAL_DAC_ConfigChannel+0x1c8>
 8003a84:	f04f 0800 	mov.w	r8, #0
 8003a88:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a90:	40aa      	lsls	r2, r5
 8003a92:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003a96:	7972      	ldrb	r2, [r6, #5]
 8003a98:	2a01      	cmp	r2, #1
 8003a9a:	d04c      	beq.n	8003b36 <HAL_DAC_ConfigChannel+0x1ce>
 8003a9c:	f04f 0800 	mov.w	r8, #0
 8003aa0:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003aa4:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003aa8:	6833      	ldr	r3, [r6, #0]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d046      	beq.n	8003b3c <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003aae:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ab0:	fa08 f805 	lsl.w	r8, r8, r5
 8003ab4:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	680b      	ldr	r3, [r1, #0]
 8003ac0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ac4:	40aa      	lsls	r2, r5
 8003ac6:	ea23 0302 	bic.w	r3, r3, r2
 8003aca:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003acc:	6821      	ldr	r1, [r4, #0]
 8003ace:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003ad0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ad4:	40aa      	lsls	r2, r5
 8003ad6:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003ada:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003adc:	40ab      	lsls	r3, r5
 8003ade:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ae0:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ae2:	6821      	ldr	r1, [r4, #0]
 8003ae4:	680b      	ldr	r3, [r1, #0]
 8003ae6:	22c0      	movs	r2, #192	; 0xc0
 8003ae8:	40aa      	lsls	r2, r5
 8003aea:	ea23 0302 	bic.w	r3, r3, r2
 8003aee:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003af0:	68f2      	ldr	r2, [r6, #12]
 8003af2:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003af6:	6932      	ldr	r2, [r6, #16]
 8003af8:	0892      	lsrs	r2, r2, #2
 8003afa:	0212      	lsls	r2, r2, #8
 8003afc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8003b00:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003b02:	6820      	ldr	r0, [r4, #0]
 8003b04:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003b06:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003b0a:	40a9      	lsls	r1, r5
 8003b0c:	ea23 0301 	bic.w	r3, r3, r1
 8003b10:	fa02 f505 	lsl.w	r5, r2, r5
 8003b14:	431d      	orrs	r5, r3
 8003b16:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8003b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8003b24:	f04f 0801 	mov.w	r8, #1
 8003b28:	e79f      	b.n	8003a6a <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 8003b2a:	f04f 0800 	mov.w	r8, #0
 8003b2e:	e79c      	b.n	8003a6a <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003b30:	f44f 7880 	mov.w	r8, #256	; 0x100
 8003b34:	e7a8      	b.n	8003a88 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003b36:	f44f 7800 	mov.w	r8, #512	; 0x200
 8003b3a:	e7b1      	b.n	8003aa0 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003b3c:	f000 ff00 	bl	8004940 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_DAC_ConfigChannel+0x1f4>)
 8003b42:	4298      	cmp	r0, r3
 8003b44:	d902      	bls.n	8003b4c <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003b46:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8003b4a:	e7b1      	b.n	8003ab0 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_DAC_ConfigChannel+0x1f8>)
 8003b4e:	4298      	cmp	r0, r3
 8003b50:	d9ae      	bls.n	8003ab0 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003b52:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8003b56:	e7ab      	b.n	8003ab0 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 8003b58:	2002      	movs	r0, #2
}
 8003b5a:	4770      	bx	lr
 8003b5c:	09896800 	.word	0x09896800
 8003b60:	04c4b400 	.word	0x04c4b400

08003b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b66:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003b68:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8003b6a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b6c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003b6e:	b114      	cbz	r4, 8003b76 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b70:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003b72:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003b74:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b76:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003b78:	f004 0c1f 	and.w	ip, r4, #31
 8003b7c:	2401      	movs	r4, #1
 8003b7e:	fa04 f40c 	lsl.w	r4, r4, ip
 8003b82:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003b84:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b86:	6804      	ldr	r4, [r0, #0]
 8003b88:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8a:	6883      	ldr	r3, [r0, #8]
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d005      	beq.n	8003b9c <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b90:	6803      	ldr	r3, [r0, #0]
 8003b92:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b94:	6803      	ldr	r3, [r0, #0]
 8003b96:	60da      	str	r2, [r3, #12]
  }
}
 8003b98:	bc30      	pop	{r4, r5}
 8003b9a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003b9c:	6803      	ldr	r3, [r0, #0]
 8003b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003ba0:	6803      	ldr	r3, [r0, #0]
 8003ba2:	60d9      	str	r1, [r3, #12]
 8003ba4:	e7f8      	b.n	8003b98 <DMA_SetConfig+0x34>
	...

08003ba8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ba8:	6803      	ldr	r3, [r0, #0]
 8003baa:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d813      	bhi.n	8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bb0:	490b      	ldr	r1, [pc, #44]	; (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	3b08      	subs	r3, #8
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003bbe:	f022 0203 	bic.w	r2, r2, #3
 8003bc2:	440a      	add	r2, r1
 8003bc4:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8003bc8:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bca:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003bce:	2201      	movs	r2, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003bd6:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003bd8:	4904      	ldr	r1, [pc, #16]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8003bda:	e7ea      	b.n	8003bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8003bdc:	40020407 	.word	0x40020407
 8003be0:	40020800 	.word	0x40020800
 8003be4:	cccccccd 	.word	0xcccccccd
 8003be8:	40020880 	.word	0x40020880
 8003bec:	40020820 	.word	0x40020820

08003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bf0:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bf2:	4a07      	ldr	r2, [pc, #28]	; (8003c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8003bf4:	441a      	add	r2, r3
 8003bf6:	0092      	lsls	r2, r2, #2
 8003bf8:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bfa:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003bfc:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2201      	movs	r2, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	1000823f 	.word	0x1000823f
 8003c14:	40020940 	.word	0x40020940

08003c18 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d05b      	beq.n	8003cd4 <HAL_DMA_Init+0xbc>
{
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c20:	6801      	ldr	r1, [r0, #0]
 8003c22:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <HAL_DMA_Init+0xc0>)
 8003c24:	4299      	cmp	r1, r3
 8003c26:	d83d      	bhi.n	8003ca4 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_DMA_Init+0xc4>)
 8003c2a:	440b      	add	r3, r1
 8003c2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ce0 <HAL_DMA_Init+0xc8>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_DMA_Init+0xcc>)
 8003c3a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8003c42:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c44:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003c48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8003c4c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8003c50:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c52:	6920      	ldr	r0, [r4, #16]
 8003c54:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c56:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c58:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5a:	69a0      	ldr	r0, [r4, #24]
 8003c5c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c60:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c62:	6a20      	ldr	r0, [r4, #32]
 8003c64:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8003c66:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003c68:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff ff9c 	bl	8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c70:	68a3      	ldr	r3, [r4, #8]
 8003c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c76:	d020      	beq.n	8003cba <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c7a:	7922      	ldrb	r2, [r4, #4]
 8003c7c:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c82:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d919      	bls.n	8003cc0 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c90:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c92:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c94:	2000      	movs	r0, #0
 8003c96:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003c9e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003ca2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_DMA_Init+0xd0>)
 8003ca6:	440b      	add	r3, r1
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <HAL_DMA_Init+0xc8>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <HAL_DMA_Init+0xd4>)
 8003cb6:	6403      	str	r3, [r0, #64]	; 0x40
 8003cb8:	e7c0      	b.n	8003c3c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	e7db      	b.n	8003c78 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7ff ff95 	bl	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ccc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e7df      	b.n	8003c94 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8003cd4:	2001      	movs	r0, #1
}
 8003cd6:	4770      	bx	lr
 8003cd8:	40020407 	.word	0x40020407
 8003cdc:	bffdfff8 	.word	0xbffdfff8
 8003ce0:	cccccccd 	.word	0xcccccccd
 8003ce4:	40020000 	.word	0x40020000
 8003ce8:	bffdfbf8 	.word	0xbffdfbf8
 8003cec:	40020400 	.word	0x40020400

08003cf0 <HAL_DMA_Start_IT>:
{
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003cf4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003cf8:	2801      	cmp	r0, #1
 8003cfa:	d041      	beq.n	8003d80 <HAL_DMA_Start_IT+0x90>
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003d02:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003d06:	b2c0      	uxtb	r0, r0
 8003d08:	2801      	cmp	r0, #1
 8003d0a:	d004      	beq.n	8003d16 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8003d12:	2002      	movs	r0, #2
}
 8003d14:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d16:	2002      	movs	r0, #2
 8003d18:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003d20:	6825      	ldr	r5, [r4, #0]
 8003d22:	6828      	ldr	r0, [r5, #0]
 8003d24:	f020 0001 	bic.w	r0, r0, #1
 8003d28:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f7ff ff1a 	bl	8003b64 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003d30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d32:	b1d3      	cbz	r3, 8003d6a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	f043 030e 	orr.w	r3, r3, #14
 8003d3c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003d46:	d003      	beq.n	8003d50 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003d50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d52:	b11b      	cbz	r3, 8003d5c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2000      	movs	r0, #0
 8003d68:	e7d4      	b.n	8003d14 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6a:	6822      	ldr	r2, [r4, #0]
 8003d6c:	6813      	ldr	r3, [r2, #0]
 8003d6e:	f023 0304 	bic.w	r3, r3, #4
 8003d72:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	f043 030a 	orr.w	r3, r3, #10
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e7de      	b.n	8003d3e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003d80:	2002      	movs	r0, #2
 8003d82:	e7c7      	b.n	8003d14 <HAL_DMA_Start_IT+0x24>

08003d84 <HAL_DMA_IRQHandler>:
{
 8003d84:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d88:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003d8a:	6804      	ldr	r4, [r0, #0]
 8003d8c:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	420a      	tst	r2, r1
 8003d9a:	d015      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x44>
 8003d9c:	f015 0f04 	tst.w	r5, #4
 8003da0:	d012      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	f013 0f20 	tst.w	r3, #32
 8003da8:	d103      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003db2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003dba:	2304      	movs	r3, #4
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003dc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003dc2:	b103      	cbz	r3, 8003dc6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8003dc4:	4798      	blx	r3
}
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003dc8:	2202      	movs	r2, #2
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	420a      	tst	r2, r1
 8003dce:	d01c      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8003dd0:	f015 0f02 	tst.w	r5, #2
 8003dd4:	d019      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f013 0f20 	tst.w	r3, #32
 8003ddc:	d106      	bne.n	8003dec <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	f023 030a 	bic.w	r3, r3, #10
 8003de4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003dee:	f003 021f 	and.w	r2, r3, #31
 8003df2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003df4:	2302      	movs	r3, #2
 8003df6:	4093      	lsls	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8003e00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0df      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003e06:	4798      	blx	r3
 8003e08:	e7dd      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	420b      	tst	r3, r1
 8003e12:	d0d8      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8003e14:	f015 0f08 	tst.w	r5, #8
 8003e18:	d0d5      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	f023 030e 	bic.w	r3, r3, #14
 8003e20:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e32:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003e34:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003e3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0c0      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003e44:	4798      	blx	r3
  return;
 8003e46:	e7be      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x42>

08003e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8003e4c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e4e:	e062      	b.n	8003f16 <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e50:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e52:	005e      	lsls	r6, r3, #1
 8003e54:	2403      	movs	r4, #3
 8003e56:	40b4      	lsls	r4, r6
 8003e58:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e5c:	68cc      	ldr	r4, [r1, #12]
 8003e5e:	40b4      	lsls	r4, r6
 8003e60:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003e62:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e64:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e66:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6a:	684c      	ldr	r4, [r1, #4]
 8003e6c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003e70:	409c      	lsls	r4, r3
 8003e72:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003e76:	6044      	str	r4, [r0, #4]
 8003e78:	e05e      	b.n	8003f38 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e7a:	08dd      	lsrs	r5, r3, #3
 8003e7c:	3508      	adds	r5, #8
 8003e7e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e82:	f003 0407 	and.w	r4, r3, #7
 8003e86:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003e8a:	240f      	movs	r4, #15
 8003e8c:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e90:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e94:	690c      	ldr	r4, [r1, #16]
 8003e96:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e9a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003e9e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003ea2:	e060      	b.n	8003f66 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ea4:	2405      	movs	r4, #5
 8003ea6:	e000      	b.n	8003eaa <HAL_GPIO_Init+0x62>
 8003ea8:	2400      	movs	r4, #0
 8003eaa:	fa04 f40e 	lsl.w	r4, r4, lr
 8003eae:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb0:	f10c 0c02 	add.w	ip, ip, #2
 8003eb4:	4d55      	ldr	r5, [pc, #340]	; (800400c <HAL_GPIO_Init+0x1c4>)
 8003eb6:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eba:	4c55      	ldr	r4, [pc, #340]	; (8004010 <HAL_GPIO_Init+0x1c8>)
 8003ebc:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003ebe:	43d4      	mvns	r4, r2
 8003ec0:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ec4:	684f      	ldr	r7, [r1, #4]
 8003ec6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003eca:	d001      	beq.n	8003ed0 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003ecc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003ed0:	4d4f      	ldr	r5, [pc, #316]	; (8004010 <HAL_GPIO_Init+0x1c8>)
 8003ed2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003ed4:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003ed6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eda:	684f      	ldr	r7, [r1, #4]
 8003edc:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8003ee0:	d001      	beq.n	8003ee6 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003ee2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003ee6:	4d4a      	ldr	r5, [pc, #296]	; (8004010 <HAL_GPIO_Init+0x1c8>)
 8003ee8:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8003eea:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003eec:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ef0:	684f      	ldr	r7, [r1, #4]
 8003ef2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003ef6:	d001      	beq.n	8003efc <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003ef8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003efc:	4d44      	ldr	r5, [pc, #272]	; (8004010 <HAL_GPIO_Init+0x1c8>)
 8003efe:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f00:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003f02:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f04:	684e      	ldr	r6, [r1, #4]
 8003f06:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003f0a:	d001      	beq.n	8003f10 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8003f0c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8003f10:	4a3f      	ldr	r2, [pc, #252]	; (8004010 <HAL_GPIO_Init+0x1c8>)
 8003f12:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8003f14:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f16:	680a      	ldr	r2, [r1, #0]
 8003f18:	fa32 f403 	lsrs.w	r4, r2, r3
 8003f1c:	d074      	beq.n	8004008 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f1e:	f04f 0c01 	mov.w	ip, #1
 8003f22:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003f26:	ea1c 0202 	ands.w	r2, ip, r2
 8003f2a:	d0f3      	beq.n	8003f14 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f2c:	684c      	ldr	r4, [r1, #4]
 8003f2e:	f004 0403 	and.w	r4, r4, #3
 8003f32:	3c01      	subs	r4, #1
 8003f34:	2c01      	cmp	r4, #1
 8003f36:	d98b      	bls.n	8003e50 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f38:	684c      	ldr	r4, [r1, #4]
 8003f3a:	f004 0403 	and.w	r4, r4, #3
 8003f3e:	2c03      	cmp	r4, #3
 8003f40:	d00c      	beq.n	8003f5c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8003f42:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f44:	005d      	lsls	r5, r3, #1
 8003f46:	f04f 0c03 	mov.w	ip, #3
 8003f4a:	fa0c fc05 	lsl.w	ip, ip, r5
 8003f4e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f52:	688c      	ldr	r4, [r1, #8]
 8003f54:	40ac      	lsls	r4, r5
 8003f56:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003f5a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f5c:	684c      	ldr	r4, [r1, #4]
 8003f5e:	f004 0403 	and.w	r4, r4, #3
 8003f62:	2c02      	cmp	r4, #2
 8003f64:	d089      	beq.n	8003e7a <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8003f66:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f68:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003f6c:	f04f 0c03 	mov.w	ip, #3
 8003f70:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003f74:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f78:	684c      	ldr	r4, [r1, #4]
 8003f7a:	f004 0403 	and.w	r4, r4, #3
 8003f7e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f82:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003f86:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f88:	684c      	ldr	r4, [r1, #4]
 8003f8a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003f8e:	d0c1      	beq.n	8003f14 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f90:	4c20      	ldr	r4, [pc, #128]	; (8004014 <HAL_GPIO_Init+0x1cc>)
 8003f92:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003f94:	f045 0501 	orr.w	r5, r5, #1
 8003f98:	6625      	str	r5, [r4, #96]	; 0x60
 8003f9a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8003f9c:	f004 0401 	and.w	r4, r4, #1
 8003fa0:	9401      	str	r4, [sp, #4]
 8003fa2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003fa8:	f10c 0502 	add.w	r5, ip, #2
 8003fac:	4c17      	ldr	r4, [pc, #92]	; (800400c <HAL_GPIO_Init+0x1c4>)
 8003fae:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fb2:	f003 0403 	and.w	r4, r3, #3
 8003fb6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003fba:	240f      	movs	r4, #15
 8003fbc:	fa04 f40e 	lsl.w	r4, r4, lr
 8003fc0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fc4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003fc8:	f43f af6e 	beq.w	8003ea8 <HAL_GPIO_Init+0x60>
 8003fcc:	4c12      	ldr	r4, [pc, #72]	; (8004018 <HAL_GPIO_Init+0x1d0>)
 8003fce:	42a0      	cmp	r0, r4
 8003fd0:	d012      	beq.n	8003ff8 <HAL_GPIO_Init+0x1b0>
 8003fd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003fd6:	42a0      	cmp	r0, r4
 8003fd8:	d010      	beq.n	8003ffc <HAL_GPIO_Init+0x1b4>
 8003fda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003fde:	42a0      	cmp	r0, r4
 8003fe0:	d00e      	beq.n	8004000 <HAL_GPIO_Init+0x1b8>
 8003fe2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003fe6:	42a0      	cmp	r0, r4
 8003fe8:	d00c      	beq.n	8004004 <HAL_GPIO_Init+0x1bc>
 8003fea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003fee:	42a0      	cmp	r0, r4
 8003ff0:	f43f af58 	beq.w	8003ea4 <HAL_GPIO_Init+0x5c>
 8003ff4:	2406      	movs	r4, #6
 8003ff6:	e758      	b.n	8003eaa <HAL_GPIO_Init+0x62>
 8003ff8:	2401      	movs	r4, #1
 8003ffa:	e756      	b.n	8003eaa <HAL_GPIO_Init+0x62>
 8003ffc:	2402      	movs	r4, #2
 8003ffe:	e754      	b.n	8003eaa <HAL_GPIO_Init+0x62>
 8004000:	2403      	movs	r4, #3
 8004002:	e752      	b.n	8003eaa <HAL_GPIO_Init+0x62>
 8004004:	2404      	movs	r4, #4
 8004006:	e750      	b.n	8003eaa <HAL_GPIO_Init+0x62>
  }
}
 8004008:	b003      	add	sp, #12
 800400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400c:	40010000 	.word	0x40010000
 8004010:	40010400 	.word	0x40010400
 8004014:	40021000 	.word	0x40021000
 8004018:	48000400 	.word	0x48000400

0800401c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800401c:	6903      	ldr	r3, [r0, #16]
 800401e:	4219      	tst	r1, r3
 8004020:	d001      	beq.n	8004026 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004022:	2001      	movs	r0, #1
 8004024:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004026:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004028:	4770      	bx	lr

0800402a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800402a:	b10a      	cbz	r2, 8004030 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800402c:	6181      	str	r1, [r0, #24]
 800402e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004030:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004032:	4770      	bx	lr

08004034 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004034:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004036:	ea01 0203 	and.w	r2, r1, r3
 800403a:	ea21 0103 	bic.w	r1, r1, r3
 800403e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004042:	6181      	str	r1, [r0, #24]
}
 8004044:	4770      	bx	lr

08004046 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004046:	4770      	bx	lr

08004048 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004048:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4203      	tst	r3, r0
 8004050:	d100      	bne.n	8004054 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8004052:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004056:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004058:	f7ff fff5 	bl	8004046 <HAL_GPIO_EXTI_Callback>
}
 800405c:	e7f9      	b.n	8004052 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800405e:	bf00      	nop
 8004060:	40010400 	.word	0x40010400

08004064 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004064:	2800      	cmp	r0, #0
 8004066:	d136      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004068:	4b3e      	ldr	r3, [pc, #248]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d008      	beq.n	8004088 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004076:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004078:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800407c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004084:	2000      	movs	r0, #0
 8004086:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004088:	4a36      	ldr	r2, [pc, #216]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800408a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800408e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004092:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800409c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a2:	4b31      	ldr	r3, [pc, #196]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2232      	movs	r2, #50	; 0x32
 80040a8:	fb02 f303 	mul.w	r3, r2, r3
 80040ac:	4a2f      	ldr	r2, [pc, #188]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0c9b      	lsrs	r3, r3, #18
 80040b4:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040b6:	e000      	b.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80040b8:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ba:	4a2a      	ldr	r2, [pc, #168]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80040bc:	6952      	ldr	r2, [r2, #20]
 80040be:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80040c2:	d001      	beq.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0x64>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f7      	bne.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c8:	4b26      	ldr	r3, [pc, #152]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80040d0:	d144      	bne.n	800415c <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 80040d2:	2000      	movs	r0, #0
 80040d4:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80040da:	d008      	beq.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040dc:	4a21      	ldr	r2, [pc, #132]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040e8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80040ea:	2000      	movs	r0, #0
 80040ec:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fa:	d008      	beq.n	800410e <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040fc:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80040fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 800410a:	2000      	movs	r0, #0
 800410c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004110:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004126:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2232      	movs	r2, #50	; 0x32
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	0c9b      	lsrs	r3, r3, #18
 800413a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413c:	e000      	b.n	8004140 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 800413e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004142:	6952      	ldr	r2, [r2, #20]
 8004144:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004148:	d001      	beq.n	800414e <HAL_PWREx_ControlVoltageScaling+0xea>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f7      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004156:	d103      	bne.n	8004160 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8004158:	2000      	movs	r0, #0
 800415a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800415c:	2003      	movs	r0, #3
 800415e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004160:	2003      	movs	r0, #3
}
 8004162:	4770      	bx	lr
 8004164:	40007000 	.word	0x40007000
 8004168:	20000000 	.word	0x20000000
 800416c:	431bde83 	.word	0x431bde83

08004170 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004170:	4a02      	ldr	r2, [pc, #8]	; (800417c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004172:	6893      	ldr	r3, [r2, #8]
 8004174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004178:	6093      	str	r3, [r2, #8]
}
 800417a:	4770      	bx	lr
 800417c:	40007000 	.word	0x40007000

08004180 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004188:	68d8      	ldr	r0, [r3, #12]
 800418a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800418e:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8004190:	2a03      	cmp	r2, #3
 8004192:	d011      	beq.n	80041b8 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004194:	480e      	ldr	r0, [pc, #56]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004196:	fbb0 f0f3 	udiv	r0, r0, r3
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80041a2:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 80041b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80041b6:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041b8:	4806      	ldr	r0, [pc, #24]	; (80041d4 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 80041ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80041be:	4b03      	ldr	r3, [pc, #12]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80041c6:	fb03 f000 	mul.w	r0, r3, r0
    break;
 80041ca:	e7ec      	b.n	80041a6 <RCC_GetSysClockFreqFromPLLSource+0x26>
 80041cc:	40021000 	.word	0x40021000
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	016e3600 	.word	0x016e3600

080041d8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80041d8:	2800      	cmp	r0, #0
 80041da:	f000 8254 	beq.w	8004686 <HAL_RCC_OscConfig+0x4ae>
{
 80041de:	b570      	push	{r4, r5, r6, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e4:	6803      	ldr	r3, [r0, #0]
 80041e6:	f013 0f01 	tst.w	r3, #1
 80041ea:	d037      	beq.n	800425c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ec:	4aa4      	ldr	r2, [pc, #656]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 80041ee:	6893      	ldr	r3, [r2, #8]
 80041f0:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f4:	68d2      	ldr	r2, [r2, #12]
 80041f6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d023      	beq.n	8004246 <HAL_RCC_OscConfig+0x6e>
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d023      	beq.n	800424a <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004208:	d04e      	beq.n	80042a8 <HAL_RCC_OscConfig+0xd0>
 800420a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420e:	d051      	beq.n	80042b4 <HAL_RCC_OscConfig+0xdc>
 8004210:	4b9b      	ldr	r3, [pc, #620]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004220:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004222:	6863      	ldr	r3, [r4, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d052      	beq.n	80042ce <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8004228:	f7fd ff32 	bl	8002090 <HAL_GetTick>
 800422c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422e:	4b94      	ldr	r3, [pc, #592]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004236:	d111      	bne.n	800425c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fd ff2a 	bl	8002090 <HAL_GetTick>
 800423c:	1b40      	subs	r0, r0, r5
 800423e:	2864      	cmp	r0, #100	; 0x64
 8004240:	d9f5      	bls.n	800422e <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8004242:	2003      	movs	r0, #3
 8004244:	e228      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004246:	2a03      	cmp	r2, #3
 8004248:	d1d9      	bne.n	80041fe <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004252:	d003      	beq.n	800425c <HAL_RCC_OscConfig+0x84>
 8004254:	6863      	ldr	r3, [r4, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8217 	beq.w	800468a <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	f013 0f02 	tst.w	r3, #2
 8004262:	d05d      	beq.n	8004320 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004264:	4a86      	ldr	r2, [pc, #536]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004266:	6893      	ldr	r3, [r2, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d03a      	beq.n	80042ec <HAL_RCC_OscConfig+0x114>
 8004276:	2b04      	cmp	r3, #4
 8004278:	d03a      	beq.n	80042f0 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800427a:	68e3      	ldr	r3, [r4, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d075      	beq.n	800436c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8004280:	4a7f      	ldr	r2, [pc, #508]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800428a:	f7fd ff01 	bl	8002090 <HAL_GetTick>
 800428e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004290:	4b7b      	ldr	r3, [pc, #492]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004298:	d15f      	bne.n	800435a <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429a:	f7fd fef9 	bl	8002090 <HAL_GetTick>
 800429e:	1b40      	subs	r0, r0, r5
 80042a0:	2802      	cmp	r0, #2
 80042a2:	d9f5      	bls.n	8004290 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 80042a4:	2003      	movs	r0, #3
 80042a6:	e1f7      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a8:	4a75      	ldr	r2, [pc, #468]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e7b6      	b.n	8004222 <HAL_RCC_OscConfig+0x4a>
 80042b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042b8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e7a9      	b.n	8004222 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80042ce:	f7fd fedf 	bl	8002090 <HAL_GetTick>
 80042d2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042d4:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042dc:	d0be      	beq.n	800425c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042de:	f7fd fed7 	bl	8002090 <HAL_GetTick>
 80042e2:	1b40      	subs	r0, r0, r5
 80042e4:	2864      	cmp	r0, #100	; 0x64
 80042e6:	d9f5      	bls.n	80042d4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80042e8:	2003      	movs	r0, #3
 80042ea:	e1d5      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042ec:	2a02      	cmp	r2, #2
 80042ee:	d1c2      	bne.n	8004276 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f0:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042f8:	d003      	beq.n	8004302 <HAL_RCC_OscConfig+0x12a>
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 81c6 	beq.w	800468e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	4a5f      	ldr	r2, [pc, #380]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004304:	6853      	ldr	r3, [r2, #4]
 8004306:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800430a:	6921      	ldr	r1, [r4, #16]
 800430c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004310:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f7fd fe77 	bl	8002008 <HAL_InitTick>
 800431a:	2800      	cmp	r0, #0
 800431c:	f040 81b9 	bne.w	8004692 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	f013 0f08 	tst.w	r3, #8
 8004326:	d04c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004328:	6963      	ldr	r3, [r4, #20]
 800432a:	b39b      	cbz	r3, 8004394 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 800432c:	4a54      	ldr	r2, [pc, #336]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 800432e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800433a:	f7fd fea9 	bl	8002090 <HAL_GetTick>
 800433e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004340:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004346:	f013 0f02 	tst.w	r3, #2
 800434a:	d13a      	bne.n	80043c2 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434c:	f7fd fea0 	bl	8002090 <HAL_GetTick>
 8004350:	1b40      	subs	r0, r0, r5
 8004352:	2802      	cmp	r0, #2
 8004354:	d9f4      	bls.n	8004340 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8004356:	2003      	movs	r0, #3
 8004358:	e19e      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4a49      	ldr	r2, [pc, #292]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 800435c:	6853      	ldr	r3, [r2, #4]
 800435e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004362:	6921      	ldr	r1, [r4, #16]
 8004364:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	e7d9      	b.n	8004320 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800436c:	4a44      	ldr	r2, [pc, #272]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004374:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004376:	f7fd fe8b 	bl	8002090 <HAL_GetTick>
 800437a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800437c:	4b40      	ldr	r3, [pc, #256]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004384:	d0cc      	beq.n	8004320 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fd fe83 	bl	8002090 <HAL_GetTick>
 800438a:	1b40      	subs	r0, r0, r5
 800438c:	2802      	cmp	r0, #2
 800438e:	d9f5      	bls.n	800437c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8004390:	2003      	movs	r0, #3
 8004392:	e181      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8004394:	4a3a      	ldr	r2, [pc, #232]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004396:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80043a2:	f7fd fe75 	bl	8002090 <HAL_GetTick>
 80043a6:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043a8:	4b35      	ldr	r3, [pc, #212]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ae:	f013 0f02 	tst.w	r3, #2
 80043b2:	d006      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b4:	f7fd fe6c 	bl	8002090 <HAL_GetTick>
 80043b8:	1b40      	subs	r0, r0, r5
 80043ba:	2802      	cmp	r0, #2
 80043bc:	d9f4      	bls.n	80043a8 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 80043be:	2003      	movs	r0, #3
 80043c0:	e16a      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	f013 0f04 	tst.w	r3, #4
 80043c8:	f000 8081 	beq.w	80044ce <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043cc:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80043d4:	d136      	bne.n	8004444 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 80043d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043de:	659a      	str	r2, [r3, #88]	; 0x58
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80043ea:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ec:	4b26      	ldr	r3, [pc, #152]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043f4:	d028      	beq.n	8004448 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f6:	68a3      	ldr	r3, [r4, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d039      	beq.n	8004470 <HAL_RCC_OscConfig+0x298>
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d045      	beq.n	800448c <HAL_RCC_OscConfig+0x2b4>
 8004400:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004402:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800440e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004412:	f022 0204 	bic.w	r2, r2, #4
 8004416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d043      	beq.n	80044a8 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8004420:	f7fd fe36 	bl	8002090 <HAL_GetTick>
 8004424:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f013 0f02 	tst.w	r3, #2
 8004430:	d14c      	bne.n	80044cc <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fd fe2d 	bl	8002090 <HAL_GetTick>
 8004436:	1b80      	subs	r0, r0, r6
 8004438:	f241 3388 	movw	r3, #5000	; 0x1388
 800443c:	4298      	cmp	r0, r3
 800443e:	d9f2      	bls.n	8004426 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8004440:	2003      	movs	r0, #3
 8004442:	e129      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8004444:	2500      	movs	r5, #0
 8004446:	e7d1      	b.n	80043ec <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004448:	4a0f      	ldr	r2, [pc, #60]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004452:	f7fd fe1d 	bl	8002090 <HAL_GetTick>
 8004456:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004460:	d1c9      	bne.n	80043f6 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7fd fe15 	bl	8002090 <HAL_GetTick>
 8004466:	1b80      	subs	r0, r0, r6
 8004468:	2802      	cmp	r0, #2
 800446a:	d9f5      	bls.n	8004458 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 800446c:	2003      	movs	r0, #3
 800446e:	e113      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004470:	4a03      	ldr	r2, [pc, #12]	; (8004480 <HAL_RCC_OscConfig+0x2a8>)
 8004472:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800447e:	e7cc      	b.n	800441a <HAL_RCC_OscConfig+0x242>
 8004480:	40021000 	.word	0x40021000
 8004484:	20000008 	.word	0x20000008
 8004488:	40007000 	.word	0x40007000
 800448c:	4b8a      	ldr	r3, [pc, #552]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 800448e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004492:	f042 0204 	orr.w	r2, r2, #4
 8004496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800449a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80044a6:	e7b8      	b.n	800441a <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 80044a8:	f7fd fdf2 	bl	8002090 <HAL_GetTick>
 80044ac:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ae:	4b82      	ldr	r3, [pc, #520]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	f013 0f02 	tst.w	r3, #2
 80044b8:	d008      	beq.n	80044cc <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ba:	f7fd fde9 	bl	8002090 <HAL_GetTick>
 80044be:	1b80      	subs	r0, r0, r6
 80044c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80044c4:	4298      	cmp	r0, r3
 80044c6:	d9f2      	bls.n	80044ae <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 80044c8:	2003      	movs	r0, #3
 80044ca:	e0e5      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 80044cc:	b9e5      	cbnz	r5, 8004508 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	f013 0f20 	tst.w	r3, #32
 80044d4:	d035      	beq.n	8004542 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044d6:	69a3      	ldr	r3, [r4, #24]
 80044d8:	b1e3      	cbz	r3, 8004514 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 80044da:	4a77      	ldr	r2, [pc, #476]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 80044dc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80044e8:	f7fd fdd2 	bl	8002090 <HAL_GetTick>
 80044ec:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ee:	4b72      	ldr	r3, [pc, #456]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 80044f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f4:	f013 0f02 	tst.w	r3, #2
 80044f8:	d123      	bne.n	8004542 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044fa:	f7fd fdc9 	bl	8002090 <HAL_GetTick>
 80044fe:	1b40      	subs	r0, r0, r5
 8004500:	2802      	cmp	r0, #2
 8004502:	d9f4      	bls.n	80044ee <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8004504:	2003      	movs	r0, #3
 8004506:	e0c7      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004508:	4a6b      	ldr	r2, [pc, #428]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 800450a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004510:	6593      	str	r3, [r2, #88]	; 0x58
 8004512:	e7dc      	b.n	80044ce <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8004514:	4a68      	ldr	r2, [pc, #416]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 8004516:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004522:	f7fd fdb5 	bl	8002090 <HAL_GetTick>
 8004526:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004528:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 800452a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452e:	f013 0f02 	tst.w	r3, #2
 8004532:	d006      	beq.n	8004542 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004534:	f7fd fdac 	bl	8002090 <HAL_GetTick>
 8004538:	1b40      	subs	r0, r0, r5
 800453a:	2802      	cmp	r0, #2
 800453c:	d9f4      	bls.n	8004528 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 800453e:	2003      	movs	r0, #3
 8004540:	e0aa      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004542:	69e3      	ldr	r3, [r4, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80a6 	beq.w	8004696 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800454a:	4a5b      	ldr	r2, [pc, #364]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	f002 020c 	and.w	r2, r2, #12
 8004552:	2a0c      	cmp	r2, #12
 8004554:	d069      	beq.n	800462a <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004556:	2b02      	cmp	r3, #2
 8004558:	d01d      	beq.n	8004596 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b57      	ldr	r3, [pc, #348]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004562:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	f022 0203 	bic.w	r2, r2, #3
 800456a:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8004572:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004576:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004578:	f7fd fd8a 	bl	8002090 <HAL_GetTick>
 800457c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457e:	4b4e      	ldr	r3, [pc, #312]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004586:	d04e      	beq.n	8004626 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fd fd82 	bl	8002090 <HAL_GetTick>
 800458c:	1b00      	subs	r0, r0, r4
 800458e:	2802      	cmp	r0, #2
 8004590:	d9f5      	bls.n	800457e <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8004592:	2003      	movs	r0, #3
 8004594:	e080      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8004596:	4a48      	ldr	r2, [pc, #288]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045a0:	f7fd fd76 	bl	8002090 <HAL_GetTick>
 80045a4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a6:	4b44      	ldr	r3, [pc, #272]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80045ae:	d006      	beq.n	80045be <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd fd6e 	bl	8002090 <HAL_GetTick>
 80045b4:	1b40      	subs	r0, r0, r5
 80045b6:	2802      	cmp	r0, #2
 80045b8:	d9f5      	bls.n	80045a6 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 80045ba:	2003      	movs	r0, #3
 80045bc:	e06c      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045be:	4a3e      	ldr	r2, [pc, #248]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 80045c0:	68d3      	ldr	r3, [r2, #12]
 80045c2:	493e      	ldr	r1, [pc, #248]	; (80046bc <HAL_RCC_OscConfig+0x4e4>)
 80045c4:	4019      	ands	r1, r3
 80045c6:	6a23      	ldr	r3, [r4, #32]
 80045c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80045ca:	3801      	subs	r0, #1
 80045cc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80045d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80045d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80045d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80045d8:	0840      	lsrs	r0, r0, #1
 80045da:	3801      	subs	r0, #1
 80045dc:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80045e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80045e2:	0840      	lsrs	r0, r0, #1
 80045e4:	3801      	subs	r0, #1
 80045e6:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80045ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80045ec:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80045f0:	430b      	orrs	r3, r1
 80045f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045fc:	68d3      	ldr	r3, [r2, #12]
 80045fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004602:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004604:	f7fd fd44 	bl	8002090 <HAL_GetTick>
 8004608:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fd fd3c 	bl	8002090 <HAL_GetTick>
 8004618:	1b00      	subs	r0, r0, r4
 800461a:	2802      	cmp	r0, #2
 800461c:	d9f5      	bls.n	800460a <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 800461e:	2003      	movs	r0, #3
 8004620:	e03a      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8004622:	2000      	movs	r0, #0
 8004624:	e038      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
 8004626:	2000      	movs	r0, #0
 8004628:	e036      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800462a:	2b01      	cmp	r3, #1
 800462c:	d036      	beq.n	800469c <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_OscConfig+0x4e0>)
 8004630:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	f003 0103 	and.w	r1, r3, #3
 8004636:	6a22      	ldr	r2, [r4, #32]
 8004638:	4291      	cmp	r1, r2
 800463a:	d131      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800463c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004640:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004642:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004644:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004648:	d12c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800464a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800464e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004650:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004654:	d128      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004656:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800465a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800465c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004660:	d124      	bne.n	80046ac <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004662:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004666:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004668:	0852      	lsrs	r2, r2, #1
 800466a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800466c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004670:	d11e      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004672:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004676:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004678:	0852      	lsrs	r2, r2, #1
 800467a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004680:	d118      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8004682:	2000      	movs	r0, #0
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8004686:	2001      	movs	r0, #1
}
 8004688:	4770      	bx	lr
        return HAL_ERROR;
 800468a:	2001      	movs	r0, #1
 800468c:	e004      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 800468e:	2001      	movs	r0, #1
 8004690:	e002      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8004692:	2001      	movs	r0, #1
 8004694:	e000      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8004696:	2000      	movs	r0, #0
}
 8004698:	b002      	add	sp, #8
 800469a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800469c:	2001      	movs	r0, #1
 800469e:	e7fb      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80046a0:	2001      	movs	r0, #1
 80046a2:	e7f9      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
 80046a4:	2001      	movs	r0, #1
 80046a6:	e7f7      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
 80046a8:	2001      	movs	r0, #1
 80046aa:	e7f5      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
 80046ac:	2001      	movs	r0, #1
 80046ae:	e7f3      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
 80046b0:	2001      	movs	r0, #1
 80046b2:	e7f1      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
 80046b4:	2001      	movs	r0, #1
 80046b6:	e7ef      	b.n	8004698 <HAL_RCC_OscConfig+0x4c0>
 80046b8:	40021000 	.word	0x40021000
 80046bc:	019f800c 	.word	0x019f800c

080046c0 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046c0:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_GetSysClockFreq+0x7c>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d033      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCC_GetSysClockFreq+0x7c>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d02f      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <HAL_RCC_GetSysClockFreq+0x7c>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 80046e4:	2000      	movs	r0, #0
}
 80046e6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_RCC_GetSysClockFreq+0x7c>)
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f0:	68d8      	ldr	r0, [r3, #12]
 80046f2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80046f6:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 80046f8:	2a03      	cmp	r2, #3
 80046fa:	d011      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fc:	4810      	ldr	r0, [pc, #64]	; (8004740 <HAL_RCC_GetSysClockFreq+0x80>)
 80046fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <HAL_RCC_GetSysClockFreq+0x7c>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800470a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_GetSysClockFreq+0x7c>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004716:	3301      	adds	r3, #1
 8004718:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800471a:	fbb0 f0f3 	udiv	r0, r0, r3
 800471e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004720:	4808      	ldr	r0, [pc, #32]	; (8004744 <HAL_RCC_GetSysClockFreq+0x84>)
 8004722:	fbb0 f0f3 	udiv	r0, r0, r3
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetSysClockFreq+0x7c>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800472e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8004732:	e7ec      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8004734:	4802      	ldr	r0, [pc, #8]	; (8004740 <HAL_RCC_GetSysClockFreq+0x80>)
 8004736:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004738:	4802      	ldr	r0, [pc, #8]	; (8004744 <HAL_RCC_GetSysClockFreq+0x84>)
 800473a:	4770      	bx	lr
 800473c:	40021000 	.word	0x40021000
 8004740:	00f42400 	.word	0x00f42400
 8004744:	016e3600 	.word	0x016e3600

08004748 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004748:	2800      	cmp	r0, #0
 800474a:	f000 80e6 	beq.w	800491a <HAL_RCC_ClockConfig+0x1d2>
{
 800474e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004750:	460c      	mov	r4, r1
 8004752:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b74      	ldr	r3, [pc, #464]	; (8004928 <HAL_RCC_ClockConfig+0x1e0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	428b      	cmp	r3, r1
 800475e:	d20b      	bcs.n	8004778 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004760:	4a71      	ldr	r2, [pc, #452]	; (8004928 <HAL_RCC_ClockConfig+0x1e0>)
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	f023 030f 	bic.w	r3, r3, #15
 8004768:	430b      	orrs	r3, r1
 800476a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	428b      	cmp	r3, r1
 8004774:	f040 80d3 	bne.w	800491e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004778:	682e      	ldr	r6, [r5, #0]
 800477a:	f016 0601 	ands.w	r6, r6, #1
 800477e:	d05f      	beq.n	8004840 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004780:	686b      	ldr	r3, [r5, #4]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d02f      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	2b02      	cmp	r3, #2
 8004788:	d04d      	beq.n	8004826 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800478a:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004792:	f000 80c6 	beq.w	8004922 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004796:	f7ff ff93 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800479a:	4b65      	ldr	r3, [pc, #404]	; (8004930 <HAL_RCC_ClockConfig+0x1e8>)
 800479c:	4298      	cmp	r0, r3
 800479e:	d94d      	bls.n	800483c <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047a0:	4a62      	ldr	r2, [pc, #392]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 80047a2:	6893      	ldr	r3, [r2, #8]
 80047a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047ae:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047b0:	4a5e      	ldr	r2, [pc, #376]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 80047b2:	6893      	ldr	r3, [r2, #8]
 80047b4:	f023 0303 	bic.w	r3, r3, #3
 80047b8:	6869      	ldr	r1, [r5, #4]
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80047be:	f7fd fc67 	bl	8002090 <HAL_GetTick>
 80047c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	686a      	ldr	r2, [r5, #4]
 80047ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047d2:	d035      	beq.n	8004840 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fd fc5c 	bl	8002090 <HAL_GetTick>
 80047d8:	1bc0      	subs	r0, r0, r7
 80047da:	f241 3388 	movw	r3, #5000	; 0x1388
 80047de:	4298      	cmp	r0, r3
 80047e0:	d9f0      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 80047e2:	2003      	movs	r0, #3
 80047e4:	e078      	b.n	80048d8 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e6:	4b51      	ldr	r3, [pc, #324]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 80047f0:	2001      	movs	r0, #1
 80047f2:	e071      	b.n	80048d8 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047f4:	f7ff fcc4 	bl	8004180 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 80047f8:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x1e8>)
 80047fa:	4298      	cmp	r0, r3
 80047fc:	d91a      	bls.n	8004834 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047fe:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004808:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800480a:	f016 0602 	ands.w	r6, r6, #2
 800480e:	d0cf      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004810:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004812:	b98b      	cbnz	r3, 8004838 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004814:	4a45      	ldr	r2, [pc, #276]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 8004816:	6893      	ldr	r3, [r2, #8]
 8004818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004822:	2680      	movs	r6, #128	; 0x80
 8004824:	e7c4      	b.n	80047b0 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800482e:	d1b2      	bne.n	8004796 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8004830:	2001      	movs	r0, #1
 8004832:	e051      	b.n	80048d8 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004834:	2600      	movs	r6, #0
 8004836:	e7bb      	b.n	80047b0 <HAL_RCC_ClockConfig+0x68>
 8004838:	2600      	movs	r6, #0
 800483a:	e7b9      	b.n	80047b0 <HAL_RCC_ClockConfig+0x68>
 800483c:	2600      	movs	r6, #0
 800483e:	e7b7      	b.n	80047b0 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	f013 0f02 	tst.w	r3, #2
 8004846:	d048      	beq.n	80048da <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	f013 0f04 	tst.w	r3, #4
 800484c:	d004      	beq.n	8004858 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800484e:	4a37      	ldr	r2, [pc, #220]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 8004850:	6893      	ldr	r3, [r2, #8]
 8004852:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004856:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	f013 0f08 	tst.w	r3, #8
 800485e:	d006      	beq.n	800486e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004860:	4a32      	ldr	r2, [pc, #200]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 8004862:	6893      	ldr	r3, [r2, #8]
 8004864:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004868:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800486e:	4a2f      	ldr	r2, [pc, #188]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 8004870:	6893      	ldr	r3, [r2, #8]
 8004872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004876:	68a9      	ldr	r1, [r5, #8]
 8004878:	430b      	orrs	r3, r1
 800487a:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800487c:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <HAL_RCC_ClockConfig+0x1e0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	42a3      	cmp	r3, r4
 8004886:	d830      	bhi.n	80048ea <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	f013 0f04 	tst.w	r3, #4
 800488e:	d006      	beq.n	800489e <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 8004892:	6893      	ldr	r3, [r2, #8]
 8004894:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004898:	68e9      	ldr	r1, [r5, #12]
 800489a:	430b      	orrs	r3, r1
 800489c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	682b      	ldr	r3, [r5, #0]
 80048a0:	f013 0f08 	tst.w	r3, #8
 80048a4:	d007      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 80048a8:	6893      	ldr	r3, [r2, #8]
 80048aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80048ae:	6929      	ldr	r1, [r5, #16]
 80048b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048b4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048b6:	f7ff ff03 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 80048ba:	4b1c      	ldr	r3, [pc, #112]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_RCC_ClockConfig+0x1ec>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	40d8      	lsrs	r0, r3
 80048cc:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <HAL_RCC_ClockConfig+0x1f0>)
 80048ce:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80048d0:	4b1a      	ldr	r3, [pc, #104]	; (800493c <HAL_RCC_ClockConfig+0x1f4>)
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	f7fd fb98 	bl	8002008 <HAL_InitTick>
}
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 80048da:	2e80      	cmp	r6, #128	; 0x80
 80048dc:	d1ce      	bne.n	800487c <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <HAL_RCC_ClockConfig+0x1e4>)
 80048e0:	6893      	ldr	r3, [r2, #8]
 80048e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e6:	6093      	str	r3, [r2, #8]
 80048e8:	e7c8      	b.n	800487c <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4a0f      	ldr	r2, [pc, #60]	; (8004928 <HAL_RCC_ClockConfig+0x1e0>)
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	f023 030f 	bic.w	r3, r3, #15
 80048f2:	4323      	orrs	r3, r4
 80048f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80048f6:	f7fd fbcb 	bl	8002090 <HAL_GetTick>
 80048fa:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_RCC_ClockConfig+0x1e0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	42a3      	cmp	r3, r4
 8004906:	d0bf      	beq.n	8004888 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fd fbc2 	bl	8002090 <HAL_GetTick>
 800490c:	1b80      	subs	r0, r0, r6
 800490e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004912:	4298      	cmp	r0, r3
 8004914:	d9f2      	bls.n	80048fc <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8004916:	2003      	movs	r0, #3
 8004918:	e7de      	b.n	80048d8 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800491a:	2001      	movs	r0, #1
}
 800491c:	4770      	bx	lr
      return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
 8004920:	e7da      	b.n	80048d8 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8004922:	2001      	movs	r0, #1
 8004924:	e7d8      	b.n	80048d8 <HAL_RCC_ClockConfig+0x190>
 8004926:	bf00      	nop
 8004928:	40022000 	.word	0x40022000
 800492c:	40021000 	.word	0x40021000
 8004930:	04c4b400 	.word	0x04c4b400
 8004934:	08007424 	.word	0x08007424
 8004938:	20000000 	.word	0x20000000
 800493c:	20000008 	.word	0x20000008

08004940 <HAL_RCC_GetHCLKFreq>:
}
 8004940:	4b01      	ldr	r3, [pc, #4]	; (8004948 <HAL_RCC_GetHCLKFreq+0x8>)
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000000 	.word	0x20000000

0800494c <HAL_RCC_GetPCLK1Freq>:
{
 800494c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800494e:	f7ff fff7 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800495a:	4a04      	ldr	r2, [pc, #16]	; (800496c <HAL_RCC_GetPCLK1Freq+0x20>)
 800495c:	5cd3      	ldrb	r3, [r2, r3]
 800495e:	f003 031f 	and.w	r3, r3, #31
}
 8004962:	40d8      	lsrs	r0, r3
 8004964:	bd08      	pop	{r3, pc}
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	08007434 	.word	0x08007434

08004970 <HAL_RCC_GetPCLK2Freq>:
{
 8004970:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004972:	f7ff ffe5 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800497e:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004980:	5cd3      	ldrb	r3, [r2, r3]
 8004982:	f003 031f 	and.w	r3, r3, #31
}
 8004986:	40d8      	lsrs	r0, r3
 8004988:	bd08      	pop	{r3, pc}
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	08007434 	.word	0x08007434

08004994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004996:	b083      	sub	sp, #12
 8004998:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800499a:	6803      	ldr	r3, [r0, #0]
 800499c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80049a0:	d06e      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a2:	4b35      	ldr	r3, [pc, #212]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80049a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80049aa:	d11e      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ac:	4b32      	ldr	r3, [pc, #200]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80049ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049b4:	659a      	str	r2, [r3, #88]	; 0x58
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049c0:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049c2:	4a2e      	ldr	r2, [pc, #184]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049c4:	6813      	ldr	r3, [r2, #0]
 80049c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049cc:	f7fd fb60 	bl	8002090 <HAL_GetTick>
 80049d0:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049d2:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049da:	d108      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049dc:	f7fd fb58 	bl	8002090 <HAL_GetTick>
 80049e0:	1b40      	subs	r0, r0, r5
 80049e2:	2802      	cmp	r0, #2
 80049e4:	d9f5      	bls.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 80049e6:	2503      	movs	r5, #3
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2600      	movs	r6, #0
 80049ec:	e7e9      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ee:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80049f0:	bb45      	cbnz	r5, 8004a44 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049f2:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049f8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049fc:	d015      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x96>
 80049fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d012      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004a06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a0e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004a12:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004a16:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a1a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004a1e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004a22:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a2a:	f013 0f01 	tst.w	r3, #1
 8004a2e:	d110      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a30:	b945      	cbnz	r5, 8004a44 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a32:	4a11      	ldr	r2, [pc, #68]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004a34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a44:	b1ee      	cbz	r6, 8004a82 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004a48:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a50:	e017      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8004a52:	f7fd fb1d 	bl	8002090 <HAL_GetTick>
 8004a56:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f013 0f02 	tst.w	r3, #2
 8004a62:	d1e5      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7fd fb14 	bl	8002090 <HAL_GetTick>
 8004a68:	1bc0      	subs	r0, r0, r7
 8004a6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a6e:	4298      	cmp	r0, r3
 8004a70:	d9f2      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8004a72:	2503      	movs	r5, #3
 8004a74:	e7dc      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a80:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	f013 0f01 	tst.w	r3, #1
 8004a88:	d008      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a8a:	4a9f      	ldr	r2, [pc, #636]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a90:	f023 0303 	bic.w	r3, r3, #3
 8004a94:	6861      	ldr	r1, [r4, #4]
 8004a96:	430b      	orrs	r3, r1
 8004a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	f013 0f02 	tst.w	r3, #2
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa4:	4a98      	ldr	r2, [pc, #608]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aaa:	f023 030c 	bic.w	r3, r3, #12
 8004aae:	68a1      	ldr	r1, [r4, #8]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f013 0f04 	tst.w	r3, #4
 8004abc:	d008      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004abe:	4a92      	ldr	r2, [pc, #584]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ac0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ac4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004ac8:	68e1      	ldr	r1, [r4, #12]
 8004aca:	430b      	orrs	r3, r1
 8004acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	f013 0f08 	tst.w	r3, #8
 8004ad6:	d008      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad8:	4a8b      	ldr	r2, [pc, #556]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ada:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ade:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ae2:	6921      	ldr	r1, [r4, #16]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f013 0f10 	tst.w	r3, #16
 8004af0:	d008      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af2:	4a85      	ldr	r2, [pc, #532]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004af4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	6961      	ldr	r1, [r4, #20]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	f013 0f20 	tst.w	r3, #32
 8004b0a:	d008      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0c:	4a7e      	ldr	r2, [pc, #504]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b16:	69a1      	ldr	r1, [r4, #24]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b24:	d008      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b26:	4a78      	ldr	r2, [pc, #480]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b28:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b30:	69e1      	ldr	r1, [r4, #28]
 8004b32:	430b      	orrs	r3, r1
 8004b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b40:	4a71      	ldr	r2, [pc, #452]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b4a:	6a21      	ldr	r1, [r4, #32]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b58:	d008      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b5a:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b60:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b66:	430b      	orrs	r3, r1
 8004b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b72:	d008      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b74:	4a64      	ldr	r2, [pc, #400]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b76:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b80:	430b      	orrs	r3, r1
 8004b82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8e:	4a5e      	ldr	r2, [pc, #376]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b90:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b94:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004b98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba8:	4a57      	ldr	r2, [pc, #348]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004baa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc0:	d079      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004bc8:	d00c      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bca:	4a4f      	ldr	r2, [pc, #316]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bcc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bd0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d06d      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004bea:	d00c      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bec:	4a46      	ldr	r2, [pc, #280]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bf2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004bf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c04:	d061      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004c0c:	d00c      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c0e:	4a3e      	ldr	r2, [pc, #248]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c14:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004c18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c26:	d055      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004c2e:	d00c      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c30:	4a35      	ldr	r2, [pc, #212]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c36:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004c3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c48:	d049      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004c50:	d00c      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c52:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c54:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c58:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004c5c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6a:	d03d      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c72:	d00c      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c74:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c7a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c80:	430b      	orrs	r3, r1
 8004c82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8c:	d031      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004c94:	d00c      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c98:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004c9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ca0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ca8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cae:	d025      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	b003      	add	sp, #12
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb6:	68d3      	ldr	r3, [r2, #12]
 8004cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cbc:	60d3      	str	r3, [r2, #12]
 8004cbe:	e780      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc0:	68d3      	ldr	r3, [r2, #12]
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
 8004cc8:	e78c      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cca:	68d3      	ldr	r3, [r2, #12]
 8004ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd0:	60d3      	str	r3, [r2, #12]
 8004cd2:	e798      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd4:	68d3      	ldr	r3, [r2, #12]
 8004cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cda:	60d3      	str	r3, [r2, #12]
 8004cdc:	e7a4      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cde:	68d3      	ldr	r3, [r2, #12]
 8004ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce4:	60d3      	str	r3, [r2, #12]
 8004ce6:	e7b0      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ce8:	68d3      	ldr	r3, [r2, #12]
 8004cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cee:	60d3      	str	r3, [r2, #12]
 8004cf0:	e7bc      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cf2:	68d3      	ldr	r3, [r2, #12]
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	60d3      	str	r3, [r2, #12]
 8004cfa:	e7c8      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cfc:	68d3      	ldr	r3, [r2, #12]
 8004cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d02:	60d3      	str	r3, [r2, #12]
 8004d04:	e7d4      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000

08004d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0e:	6a03      	ldr	r3, [r0, #32]
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d1a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d20:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d24:	680c      	ldr	r4, [r1, #0]
 8004d26:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d28:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d2c:	688c      	ldr	r4, [r1, #8]
 8004d2e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d30:	4c21      	ldr	r4, [pc, #132]	; (8004db8 <TIM_OC1_SetConfig+0xac>)
 8004d32:	42a0      	cmp	r0, r4
 8004d34:	d013      	beq.n	8004d5e <TIM_OC1_SetConfig+0x52>
 8004d36:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004d3a:	42a0      	cmp	r0, r4
 8004d3c:	d00f      	beq.n	8004d5e <TIM_OC1_SetConfig+0x52>
 8004d3e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004d42:	42a0      	cmp	r0, r4
 8004d44:	d00b      	beq.n	8004d5e <TIM_OC1_SetConfig+0x52>
 8004d46:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d4a:	42a0      	cmp	r0, r4
 8004d4c:	d007      	beq.n	8004d5e <TIM_OC1_SetConfig+0x52>
 8004d4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d52:	42a0      	cmp	r0, r4
 8004d54:	d003      	beq.n	8004d5e <TIM_OC1_SetConfig+0x52>
 8004d56:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004d5a:	42a0      	cmp	r0, r4
 8004d5c:	d105      	bne.n	8004d6a <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d5e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d62:	68cc      	ldr	r4, [r1, #12]
 8004d64:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d66:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	4c13      	ldr	r4, [pc, #76]	; (8004db8 <TIM_OC1_SetConfig+0xac>)
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d013      	beq.n	8004d98 <TIM_OC1_SetConfig+0x8c>
 8004d70:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d00f      	beq.n	8004d98 <TIM_OC1_SetConfig+0x8c>
 8004d78:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d00b      	beq.n	8004d98 <TIM_OC1_SetConfig+0x8c>
 8004d80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d84:	42a0      	cmp	r0, r4
 8004d86:	d007      	beq.n	8004d98 <TIM_OC1_SetConfig+0x8c>
 8004d88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d8c:	42a0      	cmp	r0, r4
 8004d8e:	d003      	beq.n	8004d98 <TIM_OC1_SetConfig+0x8c>
 8004d90:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d107      	bne.n	8004da8 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d98:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d9c:	694c      	ldr	r4, [r1, #20]
 8004d9e:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004da2:	698d      	ldr	r5, [r1, #24]
 8004da4:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004daa:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dac:	684a      	ldr	r2, [r1, #4]
 8004dae:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db0:	6203      	str	r3, [r0, #32]
}
 8004db2:	bc30      	pop	{r4, r5}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40012c00 	.word	0x40012c00

08004dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dbe:	6a03      	ldr	r3, [r0, #32]
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004dd0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd4:	680d      	ldr	r5, [r1, #0]
 8004dd6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ddc:	688d      	ldr	r5, [r1, #8]
 8004dde:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004de2:	4d1c      	ldr	r5, [pc, #112]	; (8004e54 <TIM_OC3_SetConfig+0x98>)
 8004de4:	42a8      	cmp	r0, r5
 8004de6:	d007      	beq.n	8004df8 <TIM_OC3_SetConfig+0x3c>
 8004de8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004dec:	42a8      	cmp	r0, r5
 8004dee:	d003      	beq.n	8004df8 <TIM_OC3_SetConfig+0x3c>
 8004df0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8004df4:	42a8      	cmp	r0, r5
 8004df6:	d106      	bne.n	8004e06 <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dfc:	68cd      	ldr	r5, [r1, #12]
 8004dfe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e06:	4d13      	ldr	r5, [pc, #76]	; (8004e54 <TIM_OC3_SetConfig+0x98>)
 8004e08:	42a8      	cmp	r0, r5
 8004e0a:	d013      	beq.n	8004e34 <TIM_OC3_SetConfig+0x78>
 8004e0c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004e10:	42a8      	cmp	r0, r5
 8004e12:	d00f      	beq.n	8004e34 <TIM_OC3_SetConfig+0x78>
 8004e14:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004e18:	42a8      	cmp	r0, r5
 8004e1a:	d00b      	beq.n	8004e34 <TIM_OC3_SetConfig+0x78>
 8004e1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e20:	42a8      	cmp	r0, r5
 8004e22:	d007      	beq.n	8004e34 <TIM_OC3_SetConfig+0x78>
 8004e24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e28:	42a8      	cmp	r0, r5
 8004e2a:	d003      	beq.n	8004e34 <TIM_OC3_SetConfig+0x78>
 8004e2c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004e30:	42a8      	cmp	r0, r5
 8004e32:	d107      	bne.n	8004e44 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e34:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e38:	694c      	ldr	r4, [r1, #20]
 8004e3a:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3e:	698c      	ldr	r4, [r1, #24]
 8004e40:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e44:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e48:	684a      	ldr	r2, [r1, #4]
 8004e4a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	6203      	str	r3, [r0, #32]
}
 8004e4e:	bc30      	pop	{r4, r5}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00

08004e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e5a:	6a03      	ldr	r3, [r0, #32]
 8004e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e64:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e66:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e68:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004e6c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	680d      	ldr	r5, [r1, #0]
 8004e72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e7a:	688d      	ldr	r5, [r1, #8]
 8004e7c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e80:	4d1b      	ldr	r5, [pc, #108]	; (8004ef0 <TIM_OC4_SetConfig+0x98>)
 8004e82:	42a8      	cmp	r0, r5
 8004e84:	d007      	beq.n	8004e96 <TIM_OC4_SetConfig+0x3e>
 8004e86:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004e8a:	42a8      	cmp	r0, r5
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC4_SetConfig+0x3e>
 8004e8e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8004e92:	42a8      	cmp	r0, r5
 8004e94:	d106      	bne.n	8004ea4 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e9a:	68cd      	ldr	r5, [r1, #12]
 8004e9c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	4d12      	ldr	r5, [pc, #72]	; (8004ef0 <TIM_OC4_SetConfig+0x98>)
 8004ea6:	42a8      	cmp	r0, r5
 8004ea8:	d013      	beq.n	8004ed2 <TIM_OC4_SetConfig+0x7a>
 8004eaa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004eae:	42a8      	cmp	r0, r5
 8004eb0:	d00f      	beq.n	8004ed2 <TIM_OC4_SetConfig+0x7a>
 8004eb2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004eb6:	42a8      	cmp	r0, r5
 8004eb8:	d00b      	beq.n	8004ed2 <TIM_OC4_SetConfig+0x7a>
 8004eba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ebe:	42a8      	cmp	r0, r5
 8004ec0:	d007      	beq.n	8004ed2 <TIM_OC4_SetConfig+0x7a>
 8004ec2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ec6:	42a8      	cmp	r0, r5
 8004ec8:	d003      	beq.n	8004ed2 <TIM_OC4_SetConfig+0x7a>
 8004eca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004ece:	42a8      	cmp	r0, r5
 8004ed0:	d107      	bne.n	8004ee2 <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ed2:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ed6:	694c      	ldr	r4, [r1, #20]
 8004ed8:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004edc:	698c      	ldr	r4, [r1, #24]
 8004ede:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ee6:	684a      	ldr	r2, [r1, #4]
 8004ee8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eea:	6203      	str	r3, [r0, #32]
}
 8004eec:	bc30      	pop	{r4, r5}
 8004eee:	4770      	bx	lr
 8004ef0:	40012c00 	.word	0x40012c00

08004ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ef6:	6a03      	ldr	r3, [r0, #32]
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f02:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	680d      	ldr	r5, [r1, #0]
 8004f0e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f14:	688d      	ldr	r5, [r1, #8]
 8004f16:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1a:	4d11      	ldr	r5, [pc, #68]	; (8004f60 <TIM_OC5_SetConfig+0x6c>)
 8004f1c:	42a8      	cmp	r0, r5
 8004f1e:	d013      	beq.n	8004f48 <TIM_OC5_SetConfig+0x54>
 8004f20:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f24:	42a8      	cmp	r0, r5
 8004f26:	d00f      	beq.n	8004f48 <TIM_OC5_SetConfig+0x54>
 8004f28:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004f2c:	42a8      	cmp	r0, r5
 8004f2e:	d00b      	beq.n	8004f48 <TIM_OC5_SetConfig+0x54>
 8004f30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f34:	42a8      	cmp	r0, r5
 8004f36:	d007      	beq.n	8004f48 <TIM_OC5_SetConfig+0x54>
 8004f38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f3c:	42a8      	cmp	r0, r5
 8004f3e:	d003      	beq.n	8004f48 <TIM_OC5_SetConfig+0x54>
 8004f40:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f44:	42a8      	cmp	r0, r5
 8004f46:	d104      	bne.n	8004f52 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f48:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f4c:	694d      	ldr	r5, [r1, #20]
 8004f4e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f54:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f56:	684a      	ldr	r2, [r1, #4]
 8004f58:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	6203      	str	r3, [r0, #32]
}
 8004f5c:	bc30      	pop	{r4, r5}
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00

08004f64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f66:	6a03      	ldr	r3, [r0, #32]
 8004f68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f72:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f74:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	680d      	ldr	r5, [r1, #0]
 8004f7e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f86:	688d      	ldr	r5, [r1, #8]
 8004f88:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8c:	4d11      	ldr	r5, [pc, #68]	; (8004fd4 <TIM_OC6_SetConfig+0x70>)
 8004f8e:	42a8      	cmp	r0, r5
 8004f90:	d013      	beq.n	8004fba <TIM_OC6_SetConfig+0x56>
 8004f92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f96:	42a8      	cmp	r0, r5
 8004f98:	d00f      	beq.n	8004fba <TIM_OC6_SetConfig+0x56>
 8004f9a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004f9e:	42a8      	cmp	r0, r5
 8004fa0:	d00b      	beq.n	8004fba <TIM_OC6_SetConfig+0x56>
 8004fa2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004fa6:	42a8      	cmp	r0, r5
 8004fa8:	d007      	beq.n	8004fba <TIM_OC6_SetConfig+0x56>
 8004faa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004fae:	42a8      	cmp	r0, r5
 8004fb0:	d003      	beq.n	8004fba <TIM_OC6_SetConfig+0x56>
 8004fb2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004fb6:	42a8      	cmp	r0, r5
 8004fb8:	d104      	bne.n	8004fc4 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fba:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fbe:	694d      	ldr	r5, [r1, #20]
 8004fc0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fc6:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fc8:	684a      	ldr	r2, [r1, #4]
 8004fca:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fcc:	6203      	str	r3, [r0, #32]
}
 8004fce:	bc30      	pop	{r4, r5}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00

08004fd8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fd8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fda:	6a04      	ldr	r4, [r0, #32]
 8004fdc:	f024 0410 	bic.w	r4, r4, #16
 8004fe0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004fe4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fe6:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fea:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fee:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ff2:	031b      	lsls	r3, r3, #12
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ffa:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ffe:	0109      	lsls	r1, r1, #4
 8005000:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8005004:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005006:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005008:	6201      	str	r1, [r0, #32]
}
 800500a:	bc30      	pop	{r4, r5}
 800500c:	4770      	bx	lr

0800500e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800500e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005010:	6a04      	ldr	r4, [r0, #32]
 8005012:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8005016:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005018:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800501a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800501c:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8005020:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005024:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	b2db      	uxtb	r3, r3
 800502c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005030:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005034:	0209      	lsls	r1, r1, #8
 8005036:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 800503a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800503c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800503e:	6201      	str	r1, [r0, #32]
}
 8005040:	bc30      	pop	{r4, r5}
 8005042:	4770      	bx	lr

08005044 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005044:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005046:	6a04      	ldr	r4, [r0, #32]
 8005048:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800504c:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800504e:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8005050:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005052:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005056:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800505a:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800505e:	031b      	lsls	r3, r3, #12
 8005060:	b29b      	uxth	r3, r3
 8005062:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005066:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800506a:	0309      	lsls	r1, r1, #12
 800506c:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8005070:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005072:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8005074:	6201      	str	r1, [r0, #32]
}
 8005076:	bc30      	pop	{r4, r5}
 8005078:	4770      	bx	lr
	...

0800507c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800507c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d135      	bne.n	80050f2 <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 8005086:	2302      	movs	r3, #2
 8005088:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	6803      	ldr	r3, [r0, #0]
 800508e:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <HAL_TIM_Base_Start+0x84>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d020      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005098:	d01d      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
 800509a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800509e:	4293      	cmp	r3, r2
 80050a0:	d019      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
 80050a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d015      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
 80050aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d011      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
 80050b2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00d      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
 80050ba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
 80050c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d005      	beq.n	80050d6 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80050d2:	2000      	movs	r0, #0
 80050d4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d6:	6899      	ldr	r1, [r3, #8]
 80050d8:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <HAL_TIM_Base_Start+0x88>)
 80050da:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050dc:	2a06      	cmp	r2, #6
 80050de:	d00a      	beq.n	80050f6 <HAL_TIM_Base_Start+0x7a>
 80050e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80050e4:	d009      	beq.n	80050fa <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80050ee:	2000      	movs	r0, #0
 80050f0:	4770      	bx	lr
    return HAL_ERROR;
 80050f2:	2001      	movs	r0, #1
 80050f4:	4770      	bx	lr
  return HAL_OK;
 80050f6:	2000      	movs	r0, #0
 80050f8:	4770      	bx	lr
 80050fa:	2000      	movs	r0, #0
}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40012c00 	.word	0x40012c00
 8005104:	00010007 	.word	0x00010007

08005108 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005108:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d13a      	bne.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8005112:	2302      	movs	r3, #2
 8005114:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005118:	6802      	ldr	r2, [r0, #0]
 800511a:	68d3      	ldr	r3, [r2, #12]
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	6803      	ldr	r3, [r0, #0]
 8005124:	4a1b      	ldr	r2, [pc, #108]	; (8005194 <HAL_TIM_Base_Start_IT+0x8c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d020      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d01d      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
 8005130:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005134:	4293      	cmp	r3, r2
 8005136:	d019      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
 8005138:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800513c:	4293      	cmp	r3, r2
 800513e:	d015      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
 8005140:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005144:	4293      	cmp	r3, r2
 8005146:	d011      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
 8005148:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800514c:	4293      	cmp	r3, r2
 800514e:	d00d      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
 8005150:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
 8005158:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800515c:	4293      	cmp	r3, r2
 800515e:	d005      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005168:	2000      	movs	r0, #0
 800516a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <HAL_TIM_Base_Start_IT+0x90>)
 8005170:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	2a06      	cmp	r2, #6
 8005174:	d00a      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x84>
 8005176:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800517a:	d009      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005184:	2000      	movs	r0, #0
 8005186:	4770      	bx	lr
    return HAL_ERROR;
 8005188:	2001      	movs	r0, #1
 800518a:	4770      	bx	lr
  return HAL_OK;
 800518c:	2000      	movs	r0, #0
 800518e:	4770      	bx	lr
 8005190:	2000      	movs	r0, #0
}
 8005192:	4770      	bx	lr
 8005194:	40012c00 	.word	0x40012c00
 8005198:	00010007 	.word	0x00010007

0800519c <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 800519c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d00e      	beq.n	80051c2 <HAL_TIM_GenerateEvent+0x26>
 80051a4:	2301      	movs	r3, #1
 80051a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80051aa:	2202      	movs	r2, #2
 80051ac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 80051b0:	6802      	ldr	r2, [r0, #0]
 80051b2:	6151      	str	r1, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80051b8:	2300      	movs	r3, #0
 80051ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80051be:	4618      	mov	r0, r3
 80051c0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80051c2:	2002      	movs	r0, #2
}
 80051c4:	4770      	bx	lr
	...

080051c8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80051c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ca:	4a36      	ldr	r2, [pc, #216]	; (80052a4 <TIM_Base_SetConfig+0xdc>)
 80051cc:	4290      	cmp	r0, r2
 80051ce:	d016      	beq.n	80051fe <TIM_Base_SetConfig+0x36>
 80051d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80051d4:	d013      	beq.n	80051fe <TIM_Base_SetConfig+0x36>
 80051d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80051da:	4290      	cmp	r0, r2
 80051dc:	d00f      	beq.n	80051fe <TIM_Base_SetConfig+0x36>
 80051de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051e2:	4290      	cmp	r0, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_Base_SetConfig+0x36>
 80051e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ea:	4290      	cmp	r0, r2
 80051ec:	d007      	beq.n	80051fe <TIM_Base_SetConfig+0x36>
 80051ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80051f2:	4290      	cmp	r0, r2
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0x36>
 80051f6:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80051fa:	4290      	cmp	r0, r2
 80051fc:	d103      	bne.n	8005206 <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005202:	684a      	ldr	r2, [r1, #4]
 8005204:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <TIM_Base_SetConfig+0xdc>)
 8005208:	4290      	cmp	r0, r2
 800520a:	d022      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800520c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005210:	d01f      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005212:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005216:	4290      	cmp	r0, r2
 8005218:	d01b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800521a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800521e:	4290      	cmp	r0, r2
 8005220:	d017      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005226:	4290      	cmp	r0, r2
 8005228:	d013      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800522a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800522e:	4290      	cmp	r0, r2
 8005230:	d00f      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005232:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005236:	4290      	cmp	r0, r2
 8005238:	d00b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800523a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800523e:	4290      	cmp	r0, r2
 8005240:	d007      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005246:	4290      	cmp	r0, r2
 8005248:	d003      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800524a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524e:	4290      	cmp	r0, r2
 8005250:	d103      	bne.n	800525a <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005256:	68ca      	ldr	r2, [r1, #12]
 8005258:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800525a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525e:	694a      	ldr	r2, [r1, #20]
 8005260:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005262:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005264:	688b      	ldr	r3, [r1, #8]
 8005266:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005268:	680b      	ldr	r3, [r1, #0]
 800526a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <TIM_Base_SetConfig+0xdc>)
 800526e:	4298      	cmp	r0, r3
 8005270:	d013      	beq.n	800529a <TIM_Base_SetConfig+0xd2>
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	4298      	cmp	r0, r3
 8005278:	d00f      	beq.n	800529a <TIM_Base_SetConfig+0xd2>
 800527a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800527e:	4298      	cmp	r0, r3
 8005280:	d00b      	beq.n	800529a <TIM_Base_SetConfig+0xd2>
 8005282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005286:	4298      	cmp	r0, r3
 8005288:	d007      	beq.n	800529a <TIM_Base_SetConfig+0xd2>
 800528a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528e:	4298      	cmp	r0, r3
 8005290:	d003      	beq.n	800529a <TIM_Base_SetConfig+0xd2>
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	4298      	cmp	r0, r3
 8005298:	d101      	bne.n	800529e <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 800529a:	690b      	ldr	r3, [r1, #16]
 800529c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800529e:	2301      	movs	r3, #1
 80052a0:	6143      	str	r3, [r0, #20]
}
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00

080052a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80052a8:	b360      	cbz	r0, 8005304 <HAL_TIM_Base_Init+0x5c>
{
 80052aa:	b510      	push	{r4, lr}
 80052ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80052ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052b2:	b313      	cbz	r3, 80052fa <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	2302      	movs	r3, #2
 80052b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ba:	4621      	mov	r1, r4
 80052bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80052c0:	f7ff ff82 	bl	80051c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80052ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80052d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80052d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80052da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80052e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80052ee:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80052f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80052f6:	2000      	movs	r0, #0
}
 80052f8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80052fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80052fe:	f7fc fd7b 	bl	8001df8 <HAL_TIM_Base_MspInit>
 8005302:	e7d7      	b.n	80052b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005304:	2001      	movs	r0, #1
}
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005308:	b360      	cbz	r0, 8005364 <HAL_TIM_PWM_Init+0x5c>
{
 800530a:	b510      	push	{r4, lr}
 800530c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005312:	b313      	cbz	r3, 800535a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	2302      	movs	r3, #2
 8005316:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	4621      	mov	r1, r4
 800531c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005320:	f7ff ff52 	bl	80051c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005324:	2301      	movs	r3, #1
 8005326:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800532e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005332:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005336:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800533a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800533e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005342:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800534a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800534e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005352:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005356:	2000      	movs	r0, #0
}
 8005358:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800535a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800535e:	f7fc fcef 	bl	8001d40 <HAL_TIM_PWM_MspInit>
 8005362:	e7d7      	b.n	8005314 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005364:	2001      	movs	r0, #1
}
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005368:	b360      	cbz	r0, 80053c4 <HAL_TIM_IC_Init+0x5c>
{
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800536e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005372:	b313      	cbz	r3, 80053ba <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	2302      	movs	r3, #2
 8005376:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537a:	4621      	mov	r1, r4
 800537c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005380:	f7ff ff22 	bl	80051c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	2301      	movs	r3, #1
 8005386:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800538e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005392:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005396:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800539a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800539e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80053a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80053ae:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80053b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80053b6:	2000      	movs	r0, #0
}
 80053b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80053ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80053be:	f7fc fcd5 	bl	8001d6c <HAL_TIM_IC_MspInit>
 80053c2:	e7d7      	b.n	8005374 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 80053c4:	2001      	movs	r0, #1
}
 80053c6:	4770      	bx	lr

080053c8 <TIM_OC2_SetConfig>:
{
 80053c8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ca:	6a03      	ldr	r3, [r0, #32]
 80053cc:	f023 0310 	bic.w	r3, r3, #16
 80053d0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80053d2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80053d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80053d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80053dc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e0:	680d      	ldr	r5, [r1, #0]
 80053e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80053e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ea:	688d      	ldr	r5, [r1, #8]
 80053ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053f0:	4d1b      	ldr	r5, [pc, #108]	; (8005460 <TIM_OC2_SetConfig+0x98>)
 80053f2:	42a8      	cmp	r0, r5
 80053f4:	d007      	beq.n	8005406 <TIM_OC2_SetConfig+0x3e>
 80053f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80053fa:	42a8      	cmp	r0, r5
 80053fc:	d003      	beq.n	8005406 <TIM_OC2_SetConfig+0x3e>
 80053fe:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8005402:	42a8      	cmp	r0, r5
 8005404:	d106      	bne.n	8005414 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800540a:	68cd      	ldr	r5, [r1, #12]
 800540c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005414:	4d12      	ldr	r5, [pc, #72]	; (8005460 <TIM_OC2_SetConfig+0x98>)
 8005416:	42a8      	cmp	r0, r5
 8005418:	d013      	beq.n	8005442 <TIM_OC2_SetConfig+0x7a>
 800541a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800541e:	42a8      	cmp	r0, r5
 8005420:	d00f      	beq.n	8005442 <TIM_OC2_SetConfig+0x7a>
 8005422:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005426:	42a8      	cmp	r0, r5
 8005428:	d00b      	beq.n	8005442 <TIM_OC2_SetConfig+0x7a>
 800542a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800542e:	42a8      	cmp	r0, r5
 8005430:	d007      	beq.n	8005442 <TIM_OC2_SetConfig+0x7a>
 8005432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005436:	42a8      	cmp	r0, r5
 8005438:	d003      	beq.n	8005442 <TIM_OC2_SetConfig+0x7a>
 800543a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800543e:	42a8      	cmp	r0, r5
 8005440:	d107      	bne.n	8005452 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005442:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005446:	694c      	ldr	r4, [r1, #20]
 8005448:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800544c:	698c      	ldr	r4, [r1, #24]
 800544e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005452:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005454:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005456:	684a      	ldr	r2, [r1, #4]
 8005458:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800545a:	6203      	str	r3, [r0, #32]
}
 800545c:	bc30      	pop	{r4, r5}
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00

08005464 <HAL_TIM_PWM_ConfigChannel>:
{
 8005464:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005466:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800546a:	2b01      	cmp	r3, #1
 800546c:	f000 8095 	beq.w	800559a <HAL_TIM_PWM_ConfigChannel+0x136>
 8005470:	4604      	mov	r4, r0
 8005472:	460d      	mov	r5, r1
 8005474:	2301      	movs	r3, #1
 8005476:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800547a:	2a14      	cmp	r2, #20
 800547c:	f200 8088 	bhi.w	8005590 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005480:	e8df f002 	tbb	[pc, r2]
 8005484:	8686860b 	.word	0x8686860b
 8005488:	8686861f 	.word	0x8686861f
 800548c:	86868634 	.word	0x86868634
 8005490:	86868648 	.word	0x86868648
 8005494:	8686865d 	.word	0x8686865d
 8005498:	71          	.byte	0x71
 8005499:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	f7ff fc36 	bl	8004d0c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	6993      	ldr	r3, [r2, #24]
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	6993      	ldr	r3, [r2, #24]
 80054ae:	f023 0304 	bic.w	r3, r3, #4
 80054b2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	6993      	ldr	r3, [r2, #24]
 80054b8:	6929      	ldr	r1, [r5, #16]
 80054ba:	430b      	orrs	r3, r1
 80054bc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2000      	movs	r0, #0
      break;
 80054c0:	e067      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c2:	6800      	ldr	r0, [r0, #0]
 80054c4:	f7ff ff80 	bl	80053c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	6993      	ldr	r3, [r2, #24]
 80054cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	6993      	ldr	r3, [r2, #24]
 80054d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054dc:	6822      	ldr	r2, [r4, #0]
 80054de:	6993      	ldr	r3, [r2, #24]
 80054e0:	6929      	ldr	r1, [r5, #16]
 80054e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054e6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2000      	movs	r0, #0
      break;
 80054ea:	e052      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ec:	6800      	ldr	r0, [r0, #0]
 80054ee:	f7ff fc65 	bl	8004dbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	69d3      	ldr	r3, [r2, #28]
 80054f6:	f043 0308 	orr.w	r3, r3, #8
 80054fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	69d3      	ldr	r3, [r2, #28]
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005506:	6822      	ldr	r2, [r4, #0]
 8005508:	69d3      	ldr	r3, [r2, #28]
 800550a:	6929      	ldr	r1, [r5, #16]
 800550c:	430b      	orrs	r3, r1
 800550e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2000      	movs	r0, #0
      break;
 8005512:	e03e      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005514:	6800      	ldr	r0, [r0, #0]
 8005516:	f7ff fc9f 	bl	8004e58 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	69d3      	ldr	r3, [r2, #28]
 800551e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005522:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	69d3      	ldr	r3, [r2, #28]
 8005528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	69d3      	ldr	r3, [r2, #28]
 8005532:	6929      	ldr	r1, [r5, #16]
 8005534:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005538:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2000      	movs	r0, #0
      break;
 800553c:	e029      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800553e:	6800      	ldr	r0, [r0, #0]
 8005540:	f7ff fcd8 	bl	8004ef4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005548:	f043 0308 	orr.w	r3, r3, #8
 800554c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005552:	f023 0304 	bic.w	r3, r3, #4
 8005556:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800555c:	6929      	ldr	r1, [r5, #16]
 800555e:	430b      	orrs	r3, r1
 8005560:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005562:	2000      	movs	r0, #0
      break;
 8005564:	e015      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005566:	6800      	ldr	r0, [r0, #0]
 8005568:	f7ff fcfc 	bl	8004f64 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800556c:	6822      	ldr	r2, [r4, #0]
 800556e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005574:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800557a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800557e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005584:	6929      	ldr	r1, [r5, #16]
 8005586:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800558a:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2000      	movs	r0, #0
      break;
 800558e:	e000      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8005590:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005592:	2300      	movs	r3, #0
 8005594:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005598:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800559a:	2002      	movs	r0, #2
 800559c:	e7fc      	b.n	8005598 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

080055a0 <TIM_TI1_SetConfig>:
{
 80055a0:	b470      	push	{r4, r5, r6}
 80055a2:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a4:	6a04      	ldr	r4, [r0, #32]
 80055a6:	f024 0401 	bic.w	r4, r4, #1
 80055aa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ac:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80055ae:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055b0:	4d18      	ldr	r5, [pc, #96]	; (8005614 <TIM_TI1_SetConfig+0x74>)
 80055b2:	42a8      	cmp	r0, r5
 80055b4:	d01c      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
 80055b6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055ba:	d019      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <TIM_TI1_SetConfig+0x78>)
 80055be:	4290      	cmp	r0, r2
 80055c0:	d016      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
 80055c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055c6:	4290      	cmp	r0, r2
 80055c8:	d012      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
 80055ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ce:	4290      	cmp	r0, r2
 80055d0:	d00e      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
 80055d2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055d6:	4290      	cmp	r0, r2
 80055d8:	d00a      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
 80055da:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80055de:	4290      	cmp	r0, r2
 80055e0:	d006      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
 80055e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055e6:	4290      	cmp	r0, r2
 80055e8:	d002      	beq.n	80055f0 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055ea:	f044 0201 	orr.w	r2, r4, #1
 80055ee:	e003      	b.n	80055f8 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055f0:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80055f4:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005606:	f001 010a 	and.w	r1, r1, #10
 800560a:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800560c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800560e:	6201      	str	r1, [r0, #32]
}
 8005610:	bc70      	pop	{r4, r5, r6}
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400

0800561c <HAL_TIM_IC_ConfigChannel>:
{
 800561c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800561e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d05a      	beq.n	80056dc <HAL_TIM_IC_ConfigChannel+0xc0>
 8005626:	4604      	mov	r4, r0
 8005628:	460d      	mov	r5, r1
 800562a:	2301      	movs	r3, #1
 800562c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005630:	b152      	cbz	r2, 8005648 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8005632:	2a04      	cmp	r2, #4
 8005634:	d01a      	beq.n	800566c <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8005636:	2a08      	cmp	r2, #8
 8005638:	d02b      	beq.n	8005692 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 800563a:	2a0c      	cmp	r2, #12
 800563c:	d03b      	beq.n	80056b6 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800563e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005640:	2300      	movs	r3, #0
 8005642:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005646:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8005648:	68cb      	ldr	r3, [r1, #12]
 800564a:	684a      	ldr	r2, [r1, #4]
 800564c:	6809      	ldr	r1, [r1, #0]
 800564e:	6800      	ldr	r0, [r0, #0]
 8005650:	f7ff ffa6 	bl	80055a0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	6993      	ldr	r3, [r2, #24]
 8005658:	f023 030c 	bic.w	r3, r3, #12
 800565c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	6993      	ldr	r3, [r2, #24]
 8005662:	68a9      	ldr	r1, [r5, #8]
 8005664:	430b      	orrs	r3, r1
 8005666:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005668:	2000      	movs	r0, #0
 800566a:	e7e9      	b.n	8005640 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 800566c:	68cb      	ldr	r3, [r1, #12]
 800566e:	684a      	ldr	r2, [r1, #4]
 8005670:	6809      	ldr	r1, [r1, #0]
 8005672:	6800      	ldr	r0, [r0, #0]
 8005674:	f7ff fcb0 	bl	8004fd8 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	6993      	ldr	r3, [r2, #24]
 800567c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005680:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	6993      	ldr	r3, [r2, #24]
 8005686:	68a9      	ldr	r1, [r5, #8]
 8005688:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800568c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2000      	movs	r0, #0
 8005690:	e7d6      	b.n	8005640 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8005692:	68cb      	ldr	r3, [r1, #12]
 8005694:	684a      	ldr	r2, [r1, #4]
 8005696:	6809      	ldr	r1, [r1, #0]
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f7ff fcb8 	bl	800500e <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	69d3      	ldr	r3, [r2, #28]
 80056a2:	f023 030c 	bic.w	r3, r3, #12
 80056a6:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056a8:	6822      	ldr	r2, [r4, #0]
 80056aa:	69d3      	ldr	r3, [r2, #28]
 80056ac:	68a9      	ldr	r1, [r5, #8]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2000      	movs	r0, #0
 80056b4:	e7c4      	b.n	8005640 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 80056b6:	68cb      	ldr	r3, [r1, #12]
 80056b8:	684a      	ldr	r2, [r1, #4]
 80056ba:	6809      	ldr	r1, [r1, #0]
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f7ff fcc1 	bl	8005044 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	69d3      	ldr	r3, [r2, #28]
 80056c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056ca:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	69d3      	ldr	r3, [r2, #28]
 80056d0:	68a9      	ldr	r1, [r5, #8]
 80056d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80056d6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2000      	movs	r0, #0
 80056da:	e7b1      	b.n	8005640 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 80056dc:	2002      	movs	r0, #2
 80056de:	e7b2      	b.n	8005646 <HAL_TIM_IC_ConfigChannel+0x2a>

080056e0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056e0:	f001 011f 	and.w	r1, r1, #31
 80056e4:	2301      	movs	r3, #1
 80056e6:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ea:	6a03      	ldr	r3, [r0, #32]
 80056ec:	ea23 030c 	bic.w	r3, r3, ip
 80056f0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056f2:	6a03      	ldr	r3, [r0, #32]
 80056f4:	fa02 f101 	lsl.w	r1, r2, r1
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6203      	str	r3, [r0, #32]
}
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_TIM_PWM_Start>:
{
 8005700:	b510      	push	{r4, lr}
 8005702:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005704:	4608      	mov	r0, r1
 8005706:	2900      	cmp	r1, #0
 8005708:	d153      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xb2>
 800570a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800570e:	b2db      	uxtb	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	bf18      	it	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	f040 80a0 	bne.w	800585c <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800571c:	2800      	cmp	r0, #0
 800571e:	d173      	bne.n	8005808 <HAL_TIM_PWM_Start+0x108>
 8005720:	2302      	movs	r3, #2
 8005722:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005726:	2201      	movs	r2, #1
 8005728:	4601      	mov	r1, r0
 800572a:	6820      	ldr	r0, [r4, #0]
 800572c:	f7ff ffd8 	bl	80056e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	4a4d      	ldr	r2, [pc, #308]	; (8005868 <HAL_TIM_PWM_Start+0x168>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_TIM_PWM_Start+0x60>
 8005738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573c:	4293      	cmp	r3, r2
 800573e:	d00f      	beq.n	8005760 <HAL_TIM_PWM_Start+0x60>
 8005740:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005744:	4293      	cmp	r3, r2
 8005746:	d00b      	beq.n	8005760 <HAL_TIM_PWM_Start+0x60>
 8005748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800574c:	4293      	cmp	r3, r2
 800574e:	d007      	beq.n	8005760 <HAL_TIM_PWM_Start+0x60>
 8005750:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <HAL_TIM_PWM_Start+0x60>
 8005758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575c:	4293      	cmp	r3, r2
 800575e:	d103      	bne.n	8005768 <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 8005760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005766:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	4a3f      	ldr	r2, [pc, #252]	; (8005868 <HAL_TIM_PWM_Start+0x168>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d067      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d064      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
 8005776:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800577a:	4293      	cmp	r3, r2
 800577c:	d060      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
 800577e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005782:	4293      	cmp	r3, r2
 8005784:	d05c      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
 8005786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800578a:	4293      	cmp	r3, r2
 800578c:	d058      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
 800578e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005792:	4293      	cmp	r3, r2
 8005794:	d054      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
 8005796:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800579a:	4293      	cmp	r3, r2
 800579c:	d050      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
 800579e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d04c      	beq.n	8005840 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80057ae:	2000      	movs	r0, #0
 80057b0:	e055      	b.n	800585e <HAL_TIM_PWM_Start+0x15e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057b2:	2904      	cmp	r1, #4
 80057b4:	d00c      	beq.n	80057d0 <HAL_TIM_PWM_Start+0xd0>
 80057b6:	2908      	cmp	r1, #8
 80057b8:	d011      	beq.n	80057de <HAL_TIM_PWM_Start+0xde>
 80057ba:	290c      	cmp	r1, #12
 80057bc:	d016      	beq.n	80057ec <HAL_TIM_PWM_Start+0xec>
 80057be:	2910      	cmp	r1, #16
 80057c0:	d01b      	beq.n	80057fa <HAL_TIM_PWM_Start+0xfa>
 80057c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	bf18      	it	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	e7a2      	b.n	8005716 <HAL_TIM_PWM_Start+0x16>
 80057d0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	bf18      	it	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	e79b      	b.n	8005716 <HAL_TIM_PWM_Start+0x16>
 80057de:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	bf18      	it	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	e794      	b.n	8005716 <HAL_TIM_PWM_Start+0x16>
 80057ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	bf18      	it	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	e78d      	b.n	8005716 <HAL_TIM_PWM_Start+0x16>
 80057fa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	bf18      	it	ne
 8005804:	2301      	movne	r3, #1
 8005806:	e786      	b.n	8005716 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005808:	2804      	cmp	r0, #4
 800580a:	d009      	beq.n	8005820 <HAL_TIM_PWM_Start+0x120>
 800580c:	2808      	cmp	r0, #8
 800580e:	d00b      	beq.n	8005828 <HAL_TIM_PWM_Start+0x128>
 8005810:	280c      	cmp	r0, #12
 8005812:	d00d      	beq.n	8005830 <HAL_TIM_PWM_Start+0x130>
 8005814:	2810      	cmp	r0, #16
 8005816:	d00f      	beq.n	8005838 <HAL_TIM_PWM_Start+0x138>
 8005818:	2302      	movs	r3, #2
 800581a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581e:	e782      	b.n	8005726 <HAL_TIM_PWM_Start+0x26>
 8005820:	2302      	movs	r3, #2
 8005822:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005826:	e77e      	b.n	8005726 <HAL_TIM_PWM_Start+0x26>
 8005828:	2302      	movs	r3, #2
 800582a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800582e:	e77a      	b.n	8005726 <HAL_TIM_PWM_Start+0x26>
 8005830:	2302      	movs	r3, #2
 8005832:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005836:	e776      	b.n	8005726 <HAL_TIM_PWM_Start+0x26>
 8005838:	2302      	movs	r3, #2
 800583a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800583e:	e772      	b.n	8005726 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005840:	6899      	ldr	r1, [r3, #8]
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <HAL_TIM_PWM_Start+0x16c>)
 8005844:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005846:	2a06      	cmp	r2, #6
 8005848:	d00a      	beq.n	8005860 <HAL_TIM_PWM_Start+0x160>
 800584a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800584e:	d009      	beq.n	8005864 <HAL_TIM_PWM_Start+0x164>
      __HAL_TIM_ENABLE(htim);
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005858:	2000      	movs	r0, #0
 800585a:	e000      	b.n	800585e <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 800585c:	2001      	movs	r0, #1
}
 800585e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005860:	2000      	movs	r0, #0
 8005862:	e7fc      	b.n	800585e <HAL_TIM_PWM_Start+0x15e>
 8005864:	2000      	movs	r0, #0
 8005866:	e7fa      	b.n	800585e <HAL_TIM_PWM_Start+0x15e>
 8005868:	40012c00 	.word	0x40012c00
 800586c:	00010007 	.word	0x00010007

08005870 <HAL_TIM_IC_Start_IT>:
{
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005874:	460b      	mov	r3, r1
 8005876:	bb19      	cbnz	r1, 80058c0 <HAL_TIM_IC_Start_IT+0x50>
 8005878:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800587c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800587e:	2b00      	cmp	r3, #0
 8005880:	d13a      	bne.n	80058f8 <HAL_TIM_IC_Start_IT+0x88>
 8005882:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005886:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005888:	2801      	cmp	r0, #1
 800588a:	f040 80c0 	bne.w	8005a0e <HAL_TIM_IC_Start_IT+0x19e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800588e:	2a01      	cmp	r2, #1
 8005890:	f040 80be 	bne.w	8005a10 <HAL_TIM_IC_Start_IT+0x1a0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005894:	2b00      	cmp	r3, #0
 8005896:	d13f      	bne.n	8005918 <HAL_TIM_IC_Start_IT+0xa8>
 8005898:	2102      	movs	r1, #2
 800589a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d156      	bne.n	8005950 <HAL_TIM_IC_Start_IT+0xe0>
 80058a2:	2102      	movs	r1, #2
 80058a4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 80058a8:	2b0c      	cmp	r3, #12
 80058aa:	f200 80b2 	bhi.w	8005a12 <HAL_TIM_IC_Start_IT+0x1a2>
 80058ae:	e8df f003 	tbb	[pc, r3]
 80058b2:	b05f      	.short	0xb05f
 80058b4:	b08eb0b0 	.word	0xb08eb0b0
 80058b8:	b094b0b0 	.word	0xb094b0b0
 80058bc:	b0b0      	.short	0xb0b0
 80058be:	9a          	.byte	0x9a
 80058bf:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058c0:	2904      	cmp	r1, #4
 80058c2:	d009      	beq.n	80058d8 <HAL_TIM_IC_Start_IT+0x68>
 80058c4:	2908      	cmp	r1, #8
 80058c6:	d00b      	beq.n	80058e0 <HAL_TIM_IC_Start_IT+0x70>
 80058c8:	290c      	cmp	r1, #12
 80058ca:	d00d      	beq.n	80058e8 <HAL_TIM_IC_Start_IT+0x78>
 80058cc:	2910      	cmp	r1, #16
 80058ce:	d00f      	beq.n	80058f0 <HAL_TIM_IC_Start_IT+0x80>
 80058d0:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 80058d4:	b2c0      	uxtb	r0, r0
 80058d6:	e7d2      	b.n	800587e <HAL_TIM_IC_Start_IT+0xe>
 80058d8:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 80058dc:	b2c0      	uxtb	r0, r0
 80058de:	e7ce      	b.n	800587e <HAL_TIM_IC_Start_IT+0xe>
 80058e0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80058e4:	b2c0      	uxtb	r0, r0
 80058e6:	e7ca      	b.n	800587e <HAL_TIM_IC_Start_IT+0xe>
 80058e8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80058ec:	b2c0      	uxtb	r0, r0
 80058ee:	e7c6      	b.n	800587e <HAL_TIM_IC_Start_IT+0xe>
 80058f0:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 80058f4:	b2c0      	uxtb	r0, r0
 80058f6:	e7c2      	b.n	800587e <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d005      	beq.n	8005908 <HAL_TIM_IC_Start_IT+0x98>
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d007      	beq.n	8005910 <HAL_TIM_IC_Start_IT+0xa0>
 8005900:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	e7bf      	b.n	8005888 <HAL_TIM_IC_Start_IT+0x18>
 8005908:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	e7bb      	b.n	8005888 <HAL_TIM_IC_Start_IT+0x18>
 8005910:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	e7b7      	b.n	8005888 <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005918:	2b04      	cmp	r3, #4
 800591a:	d009      	beq.n	8005930 <HAL_TIM_IC_Start_IT+0xc0>
 800591c:	2b08      	cmp	r3, #8
 800591e:	d00b      	beq.n	8005938 <HAL_TIM_IC_Start_IT+0xc8>
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d00d      	beq.n	8005940 <HAL_TIM_IC_Start_IT+0xd0>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d00f      	beq.n	8005948 <HAL_TIM_IC_Start_IT+0xd8>
 8005928:	2102      	movs	r1, #2
 800592a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800592e:	e7b6      	b.n	800589e <HAL_TIM_IC_Start_IT+0x2e>
 8005930:	2102      	movs	r1, #2
 8005932:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8005936:	e7b2      	b.n	800589e <HAL_TIM_IC_Start_IT+0x2e>
 8005938:	2102      	movs	r1, #2
 800593a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 800593e:	e7ae      	b.n	800589e <HAL_TIM_IC_Start_IT+0x2e>
 8005940:	2102      	movs	r1, #2
 8005942:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 8005946:	e7aa      	b.n	800589e <HAL_TIM_IC_Start_IT+0x2e>
 8005948:	2102      	movs	r1, #2
 800594a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800594e:	e7a6      	b.n	800589e <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005950:	2b04      	cmp	r3, #4
 8005952:	d005      	beq.n	8005960 <HAL_TIM_IC_Start_IT+0xf0>
 8005954:	2b08      	cmp	r3, #8
 8005956:	d007      	beq.n	8005968 <HAL_TIM_IC_Start_IT+0xf8>
 8005958:	2102      	movs	r1, #2
 800595a:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 800595e:	e7a3      	b.n	80058a8 <HAL_TIM_IC_Start_IT+0x38>
 8005960:	2102      	movs	r1, #2
 8005962:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005966:	e79f      	b.n	80058a8 <HAL_TIM_IC_Start_IT+0x38>
 8005968:	2102      	movs	r1, #2
 800596a:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 800596e:	e79b      	b.n	80058a8 <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	68ca      	ldr	r2, [r1, #12]
 8005974:	f042 0202 	orr.w	r2, r2, #2
 8005978:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800597a:	2201      	movs	r2, #1
 800597c:	4619      	mov	r1, r3
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	f7ff feae 	bl	80056e0 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <HAL_TIM_IC_Start_IT+0x1b0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d032      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d02f      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
 8005992:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
 800599a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800599e:	4293      	cmp	r3, r2
 80059a0:	d027      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
 80059a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d023      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
 80059aa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01f      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
 80059b2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01b      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
 80059ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059be:	4293      	cmp	r3, r2
 80059c0:	d017      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x182>
      __HAL_TIM_ENABLE(htim);
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	2000      	movs	r0, #0
 80059cc:	e020      	b.n	8005a10 <HAL_TIM_IC_Start_IT+0x1a0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059ce:	6821      	ldr	r1, [r4, #0]
 80059d0:	68ca      	ldr	r2, [r1, #12]
 80059d2:	f042 0204 	orr.w	r2, r2, #4
 80059d6:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80059d8:	e7cf      	b.n	800597a <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059da:	6821      	ldr	r1, [r4, #0]
 80059dc:	68ca      	ldr	r2, [r1, #12]
 80059de:	f042 0208 	orr.w	r2, r2, #8
 80059e2:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80059e4:	e7c9      	b.n	800597a <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059e6:	6821      	ldr	r1, [r4, #0]
 80059e8:	68ca      	ldr	r2, [r1, #12]
 80059ea:	f042 0210 	orr.w	r2, r2, #16
 80059ee:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80059f0:	e7c3      	b.n	800597a <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f2:	6899      	ldr	r1, [r3, #8]
 80059f4:	4a0b      	ldr	r2, [pc, #44]	; (8005a24 <HAL_TIM_IC_Start_IT+0x1b4>)
 80059f6:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	2a06      	cmp	r2, #6
 80059fa:	d00c      	beq.n	8005a16 <HAL_TIM_IC_Start_IT+0x1a6>
 80059fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005a00:	d00b      	beq.n	8005a1a <HAL_TIM_IC_Start_IT+0x1aa>
        __HAL_TIM_ENABLE(htim);
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e000      	b.n	8005a10 <HAL_TIM_IC_Start_IT+0x1a0>
    return HAL_ERROR;
 8005a0e:	2001      	movs	r0, #1
}
 8005a10:	bd10      	pop	{r4, pc}
  switch (Channel)
 8005a12:	4610      	mov	r0, r2
 8005a14:	e7fc      	b.n	8005a10 <HAL_TIM_IC_Start_IT+0x1a0>
 8005a16:	2000      	movs	r0, #0
 8005a18:	e7fa      	b.n	8005a10 <HAL_TIM_IC_Start_IT+0x1a0>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e7f8      	b.n	8005a10 <HAL_TIM_IC_Start_IT+0x1a0>
 8005a1e:	bf00      	nop
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	00010007 	.word	0x00010007

08005a28 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a28:	f001 011f 	and.w	r1, r1, #31
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005a32:	6a03      	ldr	r3, [r0, #32]
 8005a34:	ea23 030c 	bic.w	r3, r3, ip
 8005a38:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3a:	6a03      	ldr	r3, [r0, #32]
 8005a3c:	fa02 f101 	lsl.w	r1, r2, r1
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6203      	str	r3, [r0, #32]
}
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_TIMEx_PWMN_Start>:
{
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d13b      	bne.n	8005aca <HAL_TIMEx_PWMN_Start+0x82>
 8005a52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	bf18      	it	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d16a      	bne.n	8005b38 <HAL_TIMEx_PWMN_Start+0xf0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d14a      	bne.n	8005afc <HAL_TIMEx_PWMN_Start+0xb4>
 8005a66:	2302      	movs	r3, #2
 8005a68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	4601      	mov	r1, r0
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	f7ff ffd9 	bl	8005a28 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8005a76:	6822      	ldr	r2, [r4, #0]
 8005a78:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	4a30      	ldr	r2, [pc, #192]	; (8005b44 <HAL_TIMEx_PWMN_Start+0xfc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d049      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8c:	d046      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
 8005a8e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d042      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
 8005a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d03e      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
 8005a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d03a      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
 8005aa6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d036      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
 8005aae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d032      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
 8005ab6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d02e      	beq.n	8005b1c <HAL_TIMEx_PWMN_Start+0xd4>
    __HAL_TIM_ENABLE(htim);
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	e037      	b.n	8005b3a <HAL_TIMEx_PWMN_Start+0xf2>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aca:	2904      	cmp	r1, #4
 8005acc:	d008      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x98>
 8005ace:	2908      	cmp	r1, #8
 8005ad0:	d00d      	beq.n	8005aee <HAL_TIMEx_PWMN_Start+0xa6>
 8005ad2:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	bf18      	it	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	e7be      	b.n	8005a5e <HAL_TIMEx_PWMN_Start+0x16>
 8005ae0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	bf18      	it	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	e7b7      	b.n	8005a5e <HAL_TIMEx_PWMN_Start+0x16>
 8005aee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	bf18      	it	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	e7b0      	b.n	8005a5e <HAL_TIMEx_PWMN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afc:	2804      	cmp	r0, #4
 8005afe:	d005      	beq.n	8005b0c <HAL_TIMEx_PWMN_Start+0xc4>
 8005b00:	2808      	cmp	r0, #8
 8005b02:	d007      	beq.n	8005b14 <HAL_TIMEx_PWMN_Start+0xcc>
 8005b04:	2302      	movs	r3, #2
 8005b06:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8005b0a:	e7af      	b.n	8005a6c <HAL_TIMEx_PWMN_Start+0x24>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b12:	e7ab      	b.n	8005a6c <HAL_TIMEx_PWMN_Start+0x24>
 8005b14:	2302      	movs	r3, #2
 8005b16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005b1a:	e7a7      	b.n	8005a6c <HAL_TIMEx_PWMN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	6899      	ldr	r1, [r3, #8]
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <HAL_TIMEx_PWMN_Start+0x100>)
 8005b20:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b22:	2a06      	cmp	r2, #6
 8005b24:	d00a      	beq.n	8005b3c <HAL_TIMEx_PWMN_Start+0xf4>
 8005b26:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005b2a:	d009      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0xf8>
      __HAL_TIM_ENABLE(htim);
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005b34:	2000      	movs	r0, #0
 8005b36:	e000      	b.n	8005b3a <HAL_TIMEx_PWMN_Start+0xf2>
    return HAL_ERROR;
 8005b38:	2001      	movs	r0, #1
}
 8005b3a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	e7fc      	b.n	8005b3a <HAL_TIMEx_PWMN_Start+0xf2>
 8005b40:	2000      	movs	r0, #0
 8005b42:	e7fa      	b.n	8005b3a <HAL_TIMEx_PWMN_Start+0xf2>
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	00010007 	.word	0x00010007

08005b4c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8005b4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d04c      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8005b54:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005b56:	2301      	movs	r3, #1
 8005b58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005b62:	6802      	ldr	r2, [r0, #0]
 8005b64:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005b66:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b68:	4d22      	ldr	r5, [pc, #136]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005b6a:	42aa      	cmp	r2, r5
 8005b6c:	d007      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005b6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b72:	42aa      	cmp	r2, r5
 8005b74:	d003      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005b76:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8005b7a:	42aa      	cmp	r2, r5
 8005b7c:	d103      	bne.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b82:	684d      	ldr	r5, [r1, #4]
 8005b84:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b86:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8e:	680d      	ldr	r5, [r1, #0]
 8005b90:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005b92:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b94:	6803      	ldr	r3, [r0, #0]
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d01a      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d017      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005ba2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00f      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005bba:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d007      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005bc2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005bca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d104      	bne.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x90>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bd2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd6:	688a      	ldr	r2, [r1, #8]
 8005bd8:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8005bda:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005be2:	2300      	movs	r3, #0
 8005be4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005be8:	4618      	mov	r0, r3
}
 8005bea:	bc30      	pop	{r4, r5}
 8005bec:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005bee:	2002      	movs	r0, #2
}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40012c00 	.word	0x40012c00

08005bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8005bf8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d060      	beq.n	8005cc2 <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 8005c00:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8005c02:	2301      	movs	r3, #1
 8005c04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c08:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0e:	688a      	ldr	r2, [r1, #8]
 8005c10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c16:	684a      	ldr	r2, [r1, #4]
 8005c18:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c1e:	680a      	ldr	r2, [r1, #0]
 8005c20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c26:	690a      	ldr	r2, [r1, #16]
 8005c28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c2e:	694a      	ldr	r2, [r1, #20]
 8005c30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c36:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005c38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c3a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005c3e:	698a      	ldr	r2, [r1, #24]
 8005c40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c44:	6802      	ldr	r2, [r0, #0]
 8005c46:	4c20      	ldr	r4, [pc, #128]	; (8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8005c48:	42a2      	cmp	r2, r4
 8005c4a:	d007      	beq.n	8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8005c4c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005c50:	42a2      	cmp	r2, r4
 8005c52:	d003      	beq.n	8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8005c54:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8005c58:	42a2      	cmp	r2, r4
 8005c5a:	d103      	bne.n	8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c60:	69cc      	ldr	r4, [r1, #28]
 8005c62:	4323      	orrs	r3, r4
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c64:	4c18      	ldr	r4, [pc, #96]	; (8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8005c66:	42a2      	cmp	r2, r4
 8005c68:	d007      	beq.n	8005c7a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8005c6a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005c6e:	42a2      	cmp	r2, r4
 8005c70:	d003      	beq.n	8005c7a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8005c72:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8005c76:	42a2      	cmp	r2, r4
 8005c78:	d11b      	bne.n	8005cb2 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c7e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005c80:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c88:	6a0c      	ldr	r4, [r1, #32]
 8005c8a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c8c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c90:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005c92:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c94:	4c0c      	ldr	r4, [pc, #48]	; (8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8005c96:	42a2      	cmp	r2, r4
 8005c98:	d007      	beq.n	8005caa <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8005c9a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005c9e:	42a2      	cmp	r2, r4
 8005ca0:	d003      	beq.n	8005caa <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8005ca2:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8005ca6:	42a2      	cmp	r2, r4
 8005ca8:	d103      	bne.n	8005cb2 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005caa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005cb0:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8005cb2:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005cba:	4618      	mov	r0, r3
}
 8005cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005cc2:	2002      	movs	r0, #2
}
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40012c00 	.word	0x40012c00

08005ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cd0:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd2:	6883      	ldr	r3, [r0, #8]
 8005cd4:	6902      	ldr	r2, [r0, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	6942      	ldr	r2, [r0, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	69c2      	ldr	r2, [r0, #28]
 8005cde:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce0:	6808      	ldr	r0, [r1, #0]
 8005ce2:	4a96      	ldr	r2, [pc, #600]	; (8005f3c <UART_SetConfig+0x270>)
 8005ce4:	4002      	ands	r2, r0
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	6853      	ldr	r3, [r2, #4]
 8005cee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005cf2:	68e1      	ldr	r1, [r4, #12]
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cf8:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	4b90      	ldr	r3, [pc, #576]	; (8005f40 <UART_SetConfig+0x274>)
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d001      	beq.n	8005d06 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d02:	6a23      	ldr	r3, [r4, #32]
 8005d04:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d06:	6893      	ldr	r3, [r2, #8]
 8005d08:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d0c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005d18:	f023 030f 	bic.w	r3, r3, #15
 8005d1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	4a87      	ldr	r2, [pc, #540]	; (8005f44 <UART_SetConfig+0x278>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d010      	beq.n	8005d4c <UART_SetConfig+0x80>
 8005d2a:	4a87      	ldr	r2, [pc, #540]	; (8005f48 <UART_SetConfig+0x27c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d021      	beq.n	8005d74 <UART_SetConfig+0xa8>
 8005d30:	4a86      	ldr	r2, [pc, #536]	; (8005f4c <UART_SetConfig+0x280>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d037      	beq.n	8005da6 <UART_SetConfig+0xda>
 8005d36:	4a86      	ldr	r2, [pc, #536]	; (8005f50 <UART_SetConfig+0x284>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d05c      	beq.n	8005df6 <UART_SetConfig+0x12a>
 8005d3c:	4a85      	ldr	r2, [pc, #532]	; (8005f54 <UART_SetConfig+0x288>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d06b      	beq.n	8005e1a <UART_SetConfig+0x14e>
 8005d42:	4a7f      	ldr	r2, [pc, #508]	; (8005f40 <UART_SetConfig+0x274>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d07d      	beq.n	8005e44 <UART_SetConfig+0x178>
 8005d48:	2210      	movs	r2, #16
 8005d4a:	e03a      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005d4c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005d50:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005d54:	f002 0203 	and.w	r2, r2, #3
 8005d58:	2a03      	cmp	r2, #3
 8005d5a:	d809      	bhi.n	8005d70 <UART_SetConfig+0xa4>
 8005d5c:	e8df f002 	tbb	[pc, r2]
 8005d60:	06870402 	.word	0x06870402
 8005d64:	2201      	movs	r2, #1
 8005d66:	e02c      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005d68:	2204      	movs	r2, #4
 8005d6a:	e02a      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	e028      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005d70:	2210      	movs	r2, #16
 8005d72:	e026      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005d74:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005d78:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005d7c:	f002 020c 	and.w	r2, r2, #12
 8005d80:	2a0c      	cmp	r2, #12
 8005d82:	d80e      	bhi.n	8005da2 <UART_SetConfig+0xd6>
 8005d84:	e8df f002 	tbb	[pc, r2]
 8005d88:	0d0d0d07 	.word	0x0d0d0d07
 8005d8c:	0d0d0d09 	.word	0x0d0d0d09
 8005d90:	0d0d0d75 	.word	0x0d0d0d75
 8005d94:	0b          	.byte	0x0b
 8005d95:	00          	.byte	0x00
 8005d96:	2200      	movs	r2, #0
 8005d98:	e013      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	e011      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005d9e:	2208      	movs	r2, #8
 8005da0:	e00f      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005da2:	2210      	movs	r2, #16
 8005da4:	e00d      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005da6:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005daa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005dae:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005db2:	2a20      	cmp	r2, #32
 8005db4:	d05f      	beq.n	8005e76 <UART_SetConfig+0x1aa>
 8005db6:	d81a      	bhi.n	8005dee <UART_SetConfig+0x122>
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d05e      	beq.n	8005e7a <UART_SetConfig+0x1ae>
 8005dbc:	2a10      	cmp	r2, #16
 8005dbe:	d15e      	bne.n	8005e7e <UART_SetConfig+0x1b2>
 8005dc0:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dc2:	495f      	ldr	r1, [pc, #380]	; (8005f40 <UART_SetConfig+0x274>)
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	d076      	beq.n	8005eb6 <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc8:	69e0      	ldr	r0, [r4, #28]
 8005dca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005dce:	f000 80c9 	beq.w	8005f64 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dd2:	2a08      	cmp	r2, #8
 8005dd4:	f200 8134 	bhi.w	8006040 <UART_SetConfig+0x374>
 8005dd8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005ddc:	011900f7 	.word	0x011900f7
 8005de0:	013200f5 	.word	0x013200f5
 8005de4:	0132011c 	.word	0x0132011c
 8005de8:	01320132 	.word	0x01320132
 8005dec:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dee:	2a30      	cmp	r2, #48	; 0x30
 8005df0:	d147      	bne.n	8005e82 <UART_SetConfig+0x1b6>
 8005df2:	2208      	movs	r2, #8
 8005df4:	e7e5      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005df6:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005dfa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005dfe:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005e02:	2a80      	cmp	r2, #128	; 0x80
 8005e04:	d03f      	beq.n	8005e86 <UART_SetConfig+0x1ba>
 8005e06:	d804      	bhi.n	8005e12 <UART_SetConfig+0x146>
 8005e08:	b3fa      	cbz	r2, 8005e8a <UART_SetConfig+0x1be>
 8005e0a:	2a40      	cmp	r2, #64	; 0x40
 8005e0c:	d13f      	bne.n	8005e8e <UART_SetConfig+0x1c2>
 8005e0e:	2204      	movs	r2, #4
 8005e10:	e7d7      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e12:	2ac0      	cmp	r2, #192	; 0xc0
 8005e14:	d13d      	bne.n	8005e92 <UART_SetConfig+0x1c6>
 8005e16:	2208      	movs	r2, #8
 8005e18:	e7d3      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e1a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8005e1e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e22:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005e26:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005e2a:	d034      	beq.n	8005e96 <UART_SetConfig+0x1ca>
 8005e2c:	d805      	bhi.n	8005e3a <UART_SetConfig+0x16e>
 8005e2e:	b3a2      	cbz	r2, 8005e9a <UART_SetConfig+0x1ce>
 8005e30:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005e34:	d133      	bne.n	8005e9e <UART_SetConfig+0x1d2>
 8005e36:	2204      	movs	r2, #4
 8005e38:	e7c3      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e3a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005e3e:	d130      	bne.n	8005ea2 <UART_SetConfig+0x1d6>
 8005e40:	2208      	movs	r2, #8
 8005e42:	e7be      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e44:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005e48:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e4c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005e50:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005e54:	d027      	beq.n	8005ea6 <UART_SetConfig+0x1da>
 8005e56:	d805      	bhi.n	8005e64 <UART_SetConfig+0x198>
 8005e58:	b33a      	cbz	r2, 8005eaa <UART_SetConfig+0x1de>
 8005e5a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005e5e:	d126      	bne.n	8005eae <UART_SetConfig+0x1e2>
 8005e60:	2204      	movs	r2, #4
 8005e62:	e7ae      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e64:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005e68:	d123      	bne.n	8005eb2 <UART_SetConfig+0x1e6>
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	e7a9      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e6e:	2202      	movs	r2, #2
 8005e70:	e7a7      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e72:	2202      	movs	r2, #2
 8005e74:	e7a5      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e76:	2202      	movs	r2, #2
 8005e78:	e7a3      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	e7a1      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e7e:	2210      	movs	r2, #16
 8005e80:	e79f      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e82:	2210      	movs	r2, #16
 8005e84:	e79d      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e86:	2202      	movs	r2, #2
 8005e88:	e79b      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	e799      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e8e:	2210      	movs	r2, #16
 8005e90:	e797      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e92:	2210      	movs	r2, #16
 8005e94:	e795      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e96:	2202      	movs	r2, #2
 8005e98:	e793      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	e791      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	e78f      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	e78d      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	e78b      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	e789      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005eae:	2210      	movs	r2, #16
 8005eb0:	e787      	b.n	8005dc2 <UART_SetConfig+0xf6>
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	e785      	b.n	8005dc2 <UART_SetConfig+0xf6>
    switch (clocksource)
 8005eb6:	2a08      	cmp	r2, #8
 8005eb8:	f200 80b2 	bhi.w	8006020 <UART_SetConfig+0x354>
 8005ebc:	e8df f002 	tbb	[pc, r2]
 8005ec0:	b03bb008 	.word	0xb03bb008
 8005ec4:	b0b0b038 	.word	0xb0b0b038
 8005ec8:	05          	.byte	0x05
 8005ec9:	00          	.byte	0x00
 8005eca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005ece:	e004      	b.n	8005eda <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fe fd3c 	bl	800494c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f000 80a5 	beq.w	8006024 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005edc:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <UART_SetConfig+0x28c>)
 8005ede:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005ee2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee6:	6865      	ldr	r5, [r4, #4]
 8005ee8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005eec:	4299      	cmp	r1, r3
 8005eee:	f200 809b 	bhi.w	8006028 <UART_SetConfig+0x35c>
 8005ef2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005ef6:	f200 8099 	bhi.w	800602c <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efa:	2600      	movs	r6, #0
 8005efc:	4633      	mov	r3, r6
 8005efe:	4631      	mov	r1, r6
 8005f00:	f7fa f98a 	bl	8000218 <__aeabi_uldivmod>
 8005f04:	0209      	lsls	r1, r1, #8
 8005f06:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005f0a:	0200      	lsls	r0, r0, #8
 8005f0c:	086b      	lsrs	r3, r5, #1
 8005f0e:	18c0      	adds	r0, r0, r3
 8005f10:	462a      	mov	r2, r5
 8005f12:	4633      	mov	r3, r6
 8005f14:	f141 0100 	adc.w	r1, r1, #0
 8005f18:	f7fa f97e 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f1c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <UART_SetConfig+0x290>)
 8005f22:	429a      	cmp	r2, r3
 8005f24:	f200 8084 	bhi.w	8006030 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	60d8      	str	r0, [r3, #12]
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	e065      	b.n	8005ffc <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f30:	f7fe fbc6 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
        break;
 8005f34:	e7ce      	b.n	8005ed4 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8005f36:	480a      	ldr	r0, [pc, #40]	; (8005f60 <UART_SetConfig+0x294>)
 8005f38:	e7cf      	b.n	8005eda <UART_SetConfig+0x20e>
 8005f3a:	bf00      	nop
 8005f3c:	cfff69f3 	.word	0xcfff69f3
 8005f40:	40008000 	.word	0x40008000
 8005f44:	40013800 	.word	0x40013800
 8005f48:	40004400 	.word	0x40004400
 8005f4c:	40004800 	.word	0x40004800
 8005f50:	40004c00 	.word	0x40004c00
 8005f54:	40005000 	.word	0x40005000
 8005f58:	0800743c 	.word	0x0800743c
 8005f5c:	000ffcff 	.word	0x000ffcff
 8005f60:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8005f64:	2a08      	cmp	r2, #8
 8005f66:	d865      	bhi.n	8006034 <UART_SetConfig+0x368>
 8005f68:	e8df f002 	tbb	[pc, r2]
 8005f6c:	64052707 	.word	0x64052707
 8005f70:	6464642a 	.word	0x6464642a
 8005f74:	0b          	.byte	0x0b
 8005f75:	00          	.byte	0x00
 8005f76:	4835      	ldr	r0, [pc, #212]	; (800604c <UART_SetConfig+0x380>)
 8005f78:	e003      	b.n	8005f82 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7a:	f7fe fce7 	bl	800494c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d05a      	beq.n	8006038 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f84:	4b32      	ldr	r3, [pc, #200]	; (8006050 <UART_SetConfig+0x384>)
 8005f86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005f8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f8e:	6862      	ldr	r2, [r4, #4]
 8005f90:	0853      	lsrs	r3, r2, #1
 8005f92:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005f96:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f9a:	f1a0 0210 	sub.w	r2, r0, #16
 8005f9e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d84a      	bhi.n	800603c <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa6:	b283      	uxth	r3, r0
 8005fa8:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fac:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005fb0:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	60d8      	str	r0, [r3, #12]
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e020      	b.n	8005ffc <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fba:	f7fe fcd9 	bl	8004970 <HAL_RCC_GetPCLK2Freq>
        break;
 8005fbe:	e7de      	b.n	8005f7e <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc0:	f7fe fb7e 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
        break;
 8005fc4:	e7db      	b.n	8005f7e <UART_SetConfig+0x2b2>
    switch (clocksource)
 8005fc6:	4821      	ldr	r0, [pc, #132]	; (800604c <UART_SetConfig+0x380>)
 8005fc8:	e003      	b.n	8005fd2 <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fca:	f7fe fcbf 	bl	800494c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d038      	beq.n	8006044 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <UART_SetConfig+0x384>)
 8005fd6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fda:	fbb0 f0f3 	udiv	r0, r0, r3
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005fe4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe8:	f1a0 0210 	sub.w	r2, r0, #16
 8005fec:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d829      	bhi.n	8006048 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	b280      	uxth	r0, r0
 8005ff8:	60d8      	str	r0, [r3, #12]
 8005ffa:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006002:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800600a:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 800600c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800600e:	f7fe fcaf 	bl	8004970 <HAL_RCC_GetPCLK2Freq>
        break;
 8006012:	e7dc      	b.n	8005fce <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8006014:	f7fe fb54 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
        break;
 8006018:	e7d9      	b.n	8005fce <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800601a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800601e:	e7d8      	b.n	8005fd2 <UART_SetConfig+0x306>
    switch (clocksource)
 8006020:	2001      	movs	r0, #1
 8006022:	e7eb      	b.n	8005ffc <UART_SetConfig+0x330>
 8006024:	2000      	movs	r0, #0
 8006026:	e7e9      	b.n	8005ffc <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006028:	2001      	movs	r0, #1
 800602a:	e7e7      	b.n	8005ffc <UART_SetConfig+0x330>
 800602c:	2001      	movs	r0, #1
 800602e:	e7e5      	b.n	8005ffc <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8006030:	2001      	movs	r0, #1
 8006032:	e7e3      	b.n	8005ffc <UART_SetConfig+0x330>
    switch (clocksource)
 8006034:	2001      	movs	r0, #1
 8006036:	e7e1      	b.n	8005ffc <UART_SetConfig+0x330>
 8006038:	2000      	movs	r0, #0
 800603a:	e7df      	b.n	8005ffc <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800603c:	2001      	movs	r0, #1
 800603e:	e7dd      	b.n	8005ffc <UART_SetConfig+0x330>
    switch (clocksource)
 8006040:	2001      	movs	r0, #1
 8006042:	e7db      	b.n	8005ffc <UART_SetConfig+0x330>
 8006044:	2000      	movs	r0, #0
 8006046:	e7d9      	b.n	8005ffc <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006048:	2001      	movs	r0, #1
 800604a:	e7d7      	b.n	8005ffc <UART_SetConfig+0x330>
 800604c:	00f42400 	.word	0x00f42400
 8006050:	0800743c 	.word	0x0800743c

08006054 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006054:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006056:	f013 0f01 	tst.w	r3, #1
 800605a:	d006      	beq.n	800606a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800605c:	6802      	ldr	r2, [r0, #0]
 800605e:	6853      	ldr	r3, [r2, #4]
 8006060:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006064:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006066:	430b      	orrs	r3, r1
 8006068:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800606a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800606c:	f013 0f02 	tst.w	r3, #2
 8006070:	d006      	beq.n	8006080 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006072:	6802      	ldr	r2, [r0, #0]
 8006074:	6853      	ldr	r3, [r2, #4]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800607c:	430b      	orrs	r3, r1
 800607e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006080:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006082:	f013 0f04 	tst.w	r3, #4
 8006086:	d006      	beq.n	8006096 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006088:	6802      	ldr	r2, [r0, #0]
 800608a:	6853      	ldr	r3, [r2, #4]
 800608c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006090:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006092:	430b      	orrs	r3, r1
 8006094:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006096:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006098:	f013 0f08 	tst.w	r3, #8
 800609c:	d006      	beq.n	80060ac <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800609e:	6802      	ldr	r2, [r0, #0]
 80060a0:	6853      	ldr	r3, [r2, #4]
 80060a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060a6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060ae:	f013 0f10 	tst.w	r3, #16
 80060b2:	d006      	beq.n	80060c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b4:	6802      	ldr	r2, [r0, #0]
 80060b6:	6893      	ldr	r3, [r2, #8]
 80060b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060bc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80060be:	430b      	orrs	r3, r1
 80060c0:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060c4:	f013 0f20 	tst.w	r3, #32
 80060c8:	d006      	beq.n	80060d8 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ca:	6802      	ldr	r2, [r0, #0]
 80060cc:	6893      	ldr	r3, [r2, #8]
 80060ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060de:	d00a      	beq.n	80060f6 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060e0:	6802      	ldr	r2, [r0, #0]
 80060e2:	6853      	ldr	r3, [r2, #4]
 80060e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060e8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80060ea:	430b      	orrs	r3, r1
 80060ec:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80060f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f4:	d00b      	beq.n	800610e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060fc:	d006      	beq.n	800610c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060fe:	6802      	ldr	r2, [r0, #0]
 8006100:	6853      	ldr	r3, [r2, #4]
 8006102:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006106:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006108:	430b      	orrs	r3, r1
 800610a:	6053      	str	r3, [r2, #4]
  }
}
 800610c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800610e:	6802      	ldr	r2, [r0, #0]
 8006110:	6853      	ldr	r3, [r2, #4]
 8006112:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006116:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006118:	430b      	orrs	r3, r1
 800611a:	6053      	str	r3, [r2, #4]
 800611c:	e7eb      	b.n	80060f6 <UART_AdvFeatureConfig+0xa2>

0800611e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800611e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006122:	4605      	mov	r5, r0
 8006124:	460f      	mov	r7, r1
 8006126:	4616      	mov	r6, r2
 8006128:	4699      	mov	r9, r3
 800612a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612e:	682c      	ldr	r4, [r5, #0]
 8006130:	69e4      	ldr	r4, [r4, #28]
 8006132:	ea37 0304 	bics.w	r3, r7, r4
 8006136:	bf0c      	ite	eq
 8006138:	f04f 0c01 	moveq.w	ip, #1
 800613c:	f04f 0c00 	movne.w	ip, #0
 8006140:	45b4      	cmp	ip, r6
 8006142:	d157      	bne.n	80061f4 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006144:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006148:	d0f1      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614a:	f7fb ffa1 	bl	8002090 <HAL_GetTick>
 800614e:	eba0 0009 	sub.w	r0, r0, r9
 8006152:	4540      	cmp	r0, r8
 8006154:	d82f      	bhi.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x98>
 8006156:	f1b8 0f00 	cmp.w	r8, #0
 800615a:	d02c      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	f012 0f04 	tst.w	r2, #4
 8006164:	d0e3      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800616c:	d0df      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006172:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006174:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	e852 3f00 	ldrex	r3, [r2]
 800617a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	e842 3100 	strex	r1, r3, [r2]
 8006182:	2900      	cmp	r1, #0
 8006184:	d1f6      	bne.n	8006174 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f102 0308 	add.w	r3, r2, #8
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	3208      	adds	r2, #8
 8006196:	e842 3100 	strex	r1, r3, [r2]
 800619a:	2900      	cmp	r1, #0
 800619c:	d1f3      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 800619e:	2320      	movs	r3, #32
 80061a0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80061a4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ac:	2300      	movs	r3, #0
 80061ae:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 80061b2:	2003      	movs	r0, #3
 80061b4:	e01f      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061b6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	e852 3f00 	ldrex	r3, [r2]
 80061bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	e842 3100 	strex	r1, r3, [r2]
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d1f6      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	f102 0308 	add.w	r3, r2, #8
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	3208      	adds	r2, #8
 80061d8:	e842 3100 	strex	r1, r3, [r2]
 80061dc:	2900      	cmp	r1, #0
 80061de:	d1f3      	bne.n	80061c8 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80061e0:	2320      	movs	r3, #32
 80061e2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80061e6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80061ea:	2300      	movs	r3, #0
 80061ec:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80061f0:	2003      	movs	r0, #3
 80061f2:	e000      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 80061f4:	2000      	movs	r0, #0
}
 80061f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080061fa <UART_CheckIdleState>:
{
 80061fa:	b530      	push	{r4, r5, lr}
 80061fc:	b083      	sub	sp, #12
 80061fe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	2300      	movs	r3, #0
 8006202:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006206:	f7fb ff43 	bl	8002090 <HAL_GetTick>
 800620a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	f012 0f08 	tst.w	r2, #8
 8006214:	d10f      	bne.n	8006236 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f013 0f04 	tst.w	r3, #4
 800621e:	d118      	bne.n	8006252 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006220:	2320      	movs	r3, #32
 8006222:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006226:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	2000      	movs	r0, #0
 800622c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800622e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006232:	b003      	add	sp, #12
 8006234:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006236:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4603      	mov	r3, r0
 800623e:	2200      	movs	r2, #0
 8006240:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff ff6a 	bl	800611e <UART_WaitOnFlagUntilTimeout>
 800624a:	2800      	cmp	r0, #0
 800624c:	d0e3      	beq.n	8006216 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800624e:	2003      	movs	r0, #3
 8006250:	e7ef      	b.n	8006232 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	462b      	mov	r3, r5
 800625a:	2200      	movs	r2, #0
 800625c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006260:	4620      	mov	r0, r4
 8006262:	f7ff ff5c 	bl	800611e <UART_WaitOnFlagUntilTimeout>
 8006266:	2800      	cmp	r0, #0
 8006268:	d0da      	beq.n	8006220 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800626a:	2003      	movs	r0, #3
 800626c:	e7e1      	b.n	8006232 <UART_CheckIdleState+0x38>

0800626e <HAL_UART_Init>:
  if (huart == NULL)
 800626e:	b378      	cbz	r0, 80062d0 <HAL_UART_Init+0x62>
{
 8006270:	b510      	push	{r4, lr}
 8006272:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006274:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006278:	b30b      	cbz	r3, 80062be <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800627a:	2324      	movs	r3, #36	; 0x24
 800627c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800628a:	4620      	mov	r0, r4
 800628c:	f7ff fd1e 	bl	8005ccc <UART_SetConfig>
 8006290:	2801      	cmp	r0, #1
 8006292:	d013      	beq.n	80062bc <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006296:	b9bb      	cbnz	r3, 80062c8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	6853      	ldr	r3, [r2, #4]
 800629c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80062a0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	6893      	ldr	r3, [r2, #8]
 80062a6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80062aa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff ff9f 	bl	80061fa <UART_CheckIdleState>
}
 80062bc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80062be:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80062c2:	f7fb fcfb 	bl	8001cbc <HAL_UART_MspInit>
 80062c6:	e7d8      	b.n	800627a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7ff fec3 	bl	8006054 <UART_AdvFeatureConfig>
 80062ce:	e7e3      	b.n	8006298 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80062d0:	2001      	movs	r0, #1
}
 80062d2:	4770      	bx	lr

080062d4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062d6:	b92b      	cbnz	r3, 80062e4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80062d8:	2301      	movs	r3, #1
 80062da:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062de:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80062e2:	4770      	bx	lr
{
 80062e4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062e6:	6803      	ldr	r3, [r0, #0]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062ee:	6899      	ldr	r1, [r3, #8]
 80062f0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062f2:	4d09      	ldr	r5, [pc, #36]	; (8006318 <UARTEx_SetNbDataToProcess+0x44>)
 80062f4:	5c6b      	ldrb	r3, [r5, r1]
 80062f6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062f8:	4c08      	ldr	r4, [pc, #32]	; (800631c <UARTEx_SetNbDataToProcess+0x48>)
 80062fa:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8006300:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006304:	5cab      	ldrb	r3, [r5, r2]
 8006306:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006308:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800630a:	fb93 f3f2 	sdiv	r3, r3, r2
 800630e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006312:	bc30      	pop	{r4, r5}
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	0800745c 	.word	0x0800745c
 800631c:	08007454 	.word	0x08007454

08006320 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006320:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006324:	2b01      	cmp	r3, #1
 8006326:	d018      	beq.n	800635a <HAL_UARTEx_DisableFifoMode+0x3a>
 8006328:	2301      	movs	r3, #1
 800632a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800632e:	2324      	movs	r3, #36	; 0x24
 8006330:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006334:	6803      	ldr	r3, [r0, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006338:	6819      	ldr	r1, [r3, #0]
 800633a:	f021 0101 	bic.w	r1, r1, #1
 800633e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006340:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006344:	2300      	movs	r3, #0
 8006346:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006348:	6801      	ldr	r1, [r0, #0]
 800634a:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800634c:	2220      	movs	r2, #32
 800634e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006352:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006356:	4618      	mov	r0, r3
 8006358:	4770      	bx	lr
  __HAL_LOCK(huart);
 800635a:	2002      	movs	r0, #2
}
 800635c:	4770      	bx	lr

0800635e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800635e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006360:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006364:	2b01      	cmp	r3, #1
 8006366:	d01d      	beq.n	80063a4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006368:	4604      	mov	r4, r0
 800636a:	2301      	movs	r3, #1
 800636c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006370:	2324      	movs	r3, #36	; 0x24
 8006372:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006376:	6803      	ldr	r3, [r0, #0]
 8006378:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006382:	6802      	ldr	r2, [r0, #0]
 8006384:	6893      	ldr	r3, [r2, #8]
 8006386:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800638a:	4319      	orrs	r1, r3
 800638c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800638e:	f7ff ffa1 	bl	80062d4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006396:	2320      	movs	r3, #32
 8006398:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800639c:	2000      	movs	r0, #0
 800639e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80063a4:	2002      	movs	r0, #2
 80063a6:	e7fc      	b.n	80063a2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080063a8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80063a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80063aa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d01d      	beq.n	80063ee <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80063b2:	4604      	mov	r4, r0
 80063b4:	2301      	movs	r3, #1
 80063b6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80063ba:	2324      	movs	r3, #36	; 0x24
 80063bc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063c0:	6803      	ldr	r3, [r0, #0]
 80063c2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	f022 0201 	bic.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063cc:	6802      	ldr	r2, [r0, #0]
 80063ce:	6893      	ldr	r3, [r2, #8]
 80063d0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80063d4:	4319      	orrs	r1, r3
 80063d6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80063d8:	f7ff ff7c 	bl	80062d4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80063e0:	2320      	movs	r3, #32
 80063e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80063e6:	2000      	movs	r0, #0
 80063e8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80063ec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80063ee:	2002      	movs	r0, #2
 80063f0:	e7fc      	b.n	80063ec <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080063f4 <__errno>:
 80063f4:	4b01      	ldr	r3, [pc, #4]	; (80063fc <__errno+0x8>)
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	2000000c 	.word	0x2000000c

08006400 <__libc_init_array>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	4d0d      	ldr	r5, [pc, #52]	; (8006438 <__libc_init_array+0x38>)
 8006404:	4c0d      	ldr	r4, [pc, #52]	; (800643c <__libc_init_array+0x3c>)
 8006406:	1b64      	subs	r4, r4, r5
 8006408:	10a4      	asrs	r4, r4, #2
 800640a:	2600      	movs	r6, #0
 800640c:	42a6      	cmp	r6, r4
 800640e:	d109      	bne.n	8006424 <__libc_init_array+0x24>
 8006410:	4d0b      	ldr	r5, [pc, #44]	; (8006440 <__libc_init_array+0x40>)
 8006412:	4c0c      	ldr	r4, [pc, #48]	; (8006444 <__libc_init_array+0x44>)
 8006414:	f000 fffa 	bl	800740c <_init>
 8006418:	1b64      	subs	r4, r4, r5
 800641a:	10a4      	asrs	r4, r4, #2
 800641c:	2600      	movs	r6, #0
 800641e:	42a6      	cmp	r6, r4
 8006420:	d105      	bne.n	800642e <__libc_init_array+0x2e>
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	f855 3b04 	ldr.w	r3, [r5], #4
 8006428:	4798      	blx	r3
 800642a:	3601      	adds	r6, #1
 800642c:	e7ee      	b.n	800640c <__libc_init_array+0xc>
 800642e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006432:	4798      	blx	r3
 8006434:	3601      	adds	r6, #1
 8006436:	e7f2      	b.n	800641e <__libc_init_array+0x1e>
 8006438:	0800787c 	.word	0x0800787c
 800643c:	0800787c 	.word	0x0800787c
 8006440:	0800787c 	.word	0x0800787c
 8006444:	08007880 	.word	0x08007880

08006448 <memset>:
 8006448:	4402      	add	r2, r0
 800644a:	4603      	mov	r3, r0
 800644c:	4293      	cmp	r3, r2
 800644e:	d100      	bne.n	8006452 <memset+0xa>
 8006450:	4770      	bx	lr
 8006452:	f803 1b01 	strb.w	r1, [r3], #1
 8006456:	e7f9      	b.n	800644c <memset+0x4>

08006458 <cosf>:
 8006458:	ee10 3a10 	vmov	r3, s0
 800645c:	b507      	push	{r0, r1, r2, lr}
 800645e:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <cosf+0x80>)
 8006460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006464:	4293      	cmp	r3, r2
 8006466:	dc06      	bgt.n	8006476 <cosf+0x1e>
 8006468:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80064dc <cosf+0x84>
 800646c:	b003      	add	sp, #12
 800646e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006472:	f000 bb1d 	b.w	8006ab0 <__kernel_cosf>
 8006476:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800647a:	db04      	blt.n	8006486 <cosf+0x2e>
 800647c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006480:	b003      	add	sp, #12
 8006482:	f85d fb04 	ldr.w	pc, [sp], #4
 8006486:	4668      	mov	r0, sp
 8006488:	f000 f9d2 	bl	8006830 <__ieee754_rem_pio2f>
 800648c:	f000 0003 	and.w	r0, r0, #3
 8006490:	2801      	cmp	r0, #1
 8006492:	d009      	beq.n	80064a8 <cosf+0x50>
 8006494:	2802      	cmp	r0, #2
 8006496:	d010      	beq.n	80064ba <cosf+0x62>
 8006498:	b9b0      	cbnz	r0, 80064c8 <cosf+0x70>
 800649a:	eddd 0a01 	vldr	s1, [sp, #4]
 800649e:	ed9d 0a00 	vldr	s0, [sp]
 80064a2:	f000 fb05 	bl	8006ab0 <__kernel_cosf>
 80064a6:	e7eb      	b.n	8006480 <cosf+0x28>
 80064a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80064ac:	ed9d 0a00 	vldr	s0, [sp]
 80064b0:	f000 fdd4 	bl	800705c <__kernel_sinf>
 80064b4:	eeb1 0a40 	vneg.f32	s0, s0
 80064b8:	e7e2      	b.n	8006480 <cosf+0x28>
 80064ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80064be:	ed9d 0a00 	vldr	s0, [sp]
 80064c2:	f000 faf5 	bl	8006ab0 <__kernel_cosf>
 80064c6:	e7f5      	b.n	80064b4 <cosf+0x5c>
 80064c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80064cc:	ed9d 0a00 	vldr	s0, [sp]
 80064d0:	2001      	movs	r0, #1
 80064d2:	f000 fdc3 	bl	800705c <__kernel_sinf>
 80064d6:	e7d3      	b.n	8006480 <cosf+0x28>
 80064d8:	3f490fd8 	.word	0x3f490fd8
 80064dc:	00000000 	.word	0x00000000

080064e0 <sinf>:
 80064e0:	ee10 3a10 	vmov	r3, s0
 80064e4:	b507      	push	{r0, r1, r2, lr}
 80064e6:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <sinf+0x84>)
 80064e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	4293      	cmp	r3, r2
 80064ee:	dc07      	bgt.n	8006500 <sinf+0x20>
 80064f0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006568 <sinf+0x88>
 80064f4:	2000      	movs	r0, #0
 80064f6:	b003      	add	sp, #12
 80064f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064fc:	f000 bdae 	b.w	800705c <__kernel_sinf>
 8006500:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006504:	db04      	blt.n	8006510 <sinf+0x30>
 8006506:	ee30 0a40 	vsub.f32	s0, s0, s0
 800650a:	b003      	add	sp, #12
 800650c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006510:	4668      	mov	r0, sp
 8006512:	f000 f98d 	bl	8006830 <__ieee754_rem_pio2f>
 8006516:	f000 0003 	and.w	r0, r0, #3
 800651a:	2801      	cmp	r0, #1
 800651c:	d00a      	beq.n	8006534 <sinf+0x54>
 800651e:	2802      	cmp	r0, #2
 8006520:	d00f      	beq.n	8006542 <sinf+0x62>
 8006522:	b9c0      	cbnz	r0, 8006556 <sinf+0x76>
 8006524:	eddd 0a01 	vldr	s1, [sp, #4]
 8006528:	ed9d 0a00 	vldr	s0, [sp]
 800652c:	2001      	movs	r0, #1
 800652e:	f000 fd95 	bl	800705c <__kernel_sinf>
 8006532:	e7ea      	b.n	800650a <sinf+0x2a>
 8006534:	eddd 0a01 	vldr	s1, [sp, #4]
 8006538:	ed9d 0a00 	vldr	s0, [sp]
 800653c:	f000 fab8 	bl	8006ab0 <__kernel_cosf>
 8006540:	e7e3      	b.n	800650a <sinf+0x2a>
 8006542:	eddd 0a01 	vldr	s1, [sp, #4]
 8006546:	ed9d 0a00 	vldr	s0, [sp]
 800654a:	2001      	movs	r0, #1
 800654c:	f000 fd86 	bl	800705c <__kernel_sinf>
 8006550:	eeb1 0a40 	vneg.f32	s0, s0
 8006554:	e7d9      	b.n	800650a <sinf+0x2a>
 8006556:	eddd 0a01 	vldr	s1, [sp, #4]
 800655a:	ed9d 0a00 	vldr	s0, [sp]
 800655e:	f000 faa7 	bl	8006ab0 <__kernel_cosf>
 8006562:	e7f5      	b.n	8006550 <sinf+0x70>
 8006564:	3f490fd8 	.word	0x3f490fd8
 8006568:	00000000 	.word	0x00000000

0800656c <atan2f>:
 800656c:	f000 b83e 	b.w	80065ec <__ieee754_atan2f>

08006570 <fmodf>:
 8006570:	b508      	push	{r3, lr}
 8006572:	ed2d 8b02 	vpush	{d8}
 8006576:	eef0 8a40 	vmov.f32	s17, s0
 800657a:	eeb0 8a60 	vmov.f32	s16, s1
 800657e:	f000 f8d5 	bl	800672c <__ieee754_fmodf>
 8006582:	eef4 8a48 	vcmp.f32	s17, s16
 8006586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658a:	d60c      	bvs.n	80065a6 <fmodf+0x36>
 800658c:	eddf 8a07 	vldr	s17, [pc, #28]	; 80065ac <fmodf+0x3c>
 8006590:	eeb4 8a68 	vcmp.f32	s16, s17
 8006594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006598:	d105      	bne.n	80065a6 <fmodf+0x36>
 800659a:	f7ff ff2b 	bl	80063f4 <__errno>
 800659e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80065a2:	2321      	movs	r3, #33	; 0x21
 80065a4:	6003      	str	r3, [r0, #0]
 80065a6:	ecbd 8b02 	vpop	{d8}
 80065aa:	bd08      	pop	{r3, pc}
 80065ac:	00000000 	.word	0x00000000

080065b0 <sqrtf>:
 80065b0:	b508      	push	{r3, lr}
 80065b2:	ed2d 8b02 	vpush	{d8}
 80065b6:	eeb0 8a40 	vmov.f32	s16, s0
 80065ba:	f000 fa75 	bl	8006aa8 <__ieee754_sqrtf>
 80065be:	eeb4 8a48 	vcmp.f32	s16, s16
 80065c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c6:	d60c      	bvs.n	80065e2 <sqrtf+0x32>
 80065c8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80065e8 <sqrtf+0x38>
 80065cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	d505      	bpl.n	80065e2 <sqrtf+0x32>
 80065d6:	f7ff ff0d 	bl	80063f4 <__errno>
 80065da:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80065de:	2321      	movs	r3, #33	; 0x21
 80065e0:	6003      	str	r3, [r0, #0]
 80065e2:	ecbd 8b02 	vpop	{d8}
 80065e6:	bd08      	pop	{r3, pc}
 80065e8:	00000000 	.word	0x00000000

080065ec <__ieee754_atan2f>:
 80065ec:	ee10 2a90 	vmov	r2, s1
 80065f0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80065f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80065f8:	b510      	push	{r4, lr}
 80065fa:	eef0 7a40 	vmov.f32	s15, s0
 80065fe:	dc06      	bgt.n	800660e <__ieee754_atan2f+0x22>
 8006600:	ee10 0a10 	vmov	r0, s0
 8006604:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006608:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800660c:	dd04      	ble.n	8006618 <__ieee754_atan2f+0x2c>
 800660e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006612:	eeb0 0a67 	vmov.f32	s0, s15
 8006616:	bd10      	pop	{r4, pc}
 8006618:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800661c:	d103      	bne.n	8006626 <__ieee754_atan2f+0x3a>
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006622:	f000 bd63 	b.w	80070ec <atanf>
 8006626:	1794      	asrs	r4, r2, #30
 8006628:	f004 0402 	and.w	r4, r4, #2
 800662c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006630:	b943      	cbnz	r3, 8006644 <__ieee754_atan2f+0x58>
 8006632:	2c02      	cmp	r4, #2
 8006634:	d05e      	beq.n	80066f4 <__ieee754_atan2f+0x108>
 8006636:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006708 <__ieee754_atan2f+0x11c>
 800663a:	2c03      	cmp	r4, #3
 800663c:	bf08      	it	eq
 800663e:	eef0 7a47 	vmoveq.f32	s15, s14
 8006642:	e7e6      	b.n	8006612 <__ieee754_atan2f+0x26>
 8006644:	b941      	cbnz	r1, 8006658 <__ieee754_atan2f+0x6c>
 8006646:	eddf 7a31 	vldr	s15, [pc, #196]	; 800670c <__ieee754_atan2f+0x120>
 800664a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8006710 <__ieee754_atan2f+0x124>
 800664e:	2800      	cmp	r0, #0
 8006650:	bfb8      	it	lt
 8006652:	eef0 7a40 	vmovlt.f32	s15, s0
 8006656:	e7dc      	b.n	8006612 <__ieee754_atan2f+0x26>
 8006658:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800665c:	d110      	bne.n	8006680 <__ieee754_atan2f+0x94>
 800665e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006662:	f104 34ff 	add.w	r4, r4, #4294967295
 8006666:	d107      	bne.n	8006678 <__ieee754_atan2f+0x8c>
 8006668:	2c02      	cmp	r4, #2
 800666a:	d846      	bhi.n	80066fa <__ieee754_atan2f+0x10e>
 800666c:	4b29      	ldr	r3, [pc, #164]	; (8006714 <__ieee754_atan2f+0x128>)
 800666e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006672:	edd4 7a00 	vldr	s15, [r4]
 8006676:	e7cc      	b.n	8006612 <__ieee754_atan2f+0x26>
 8006678:	2c02      	cmp	r4, #2
 800667a:	d841      	bhi.n	8006700 <__ieee754_atan2f+0x114>
 800667c:	4b26      	ldr	r3, [pc, #152]	; (8006718 <__ieee754_atan2f+0x12c>)
 800667e:	e7f6      	b.n	800666e <__ieee754_atan2f+0x82>
 8006680:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006684:	d0df      	beq.n	8006646 <__ieee754_atan2f+0x5a>
 8006686:	1a5b      	subs	r3, r3, r1
 8006688:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800668c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8006690:	da1a      	bge.n	80066c8 <__ieee754_atan2f+0xdc>
 8006692:	2a00      	cmp	r2, #0
 8006694:	da01      	bge.n	800669a <__ieee754_atan2f+0xae>
 8006696:	313c      	adds	r1, #60	; 0x3c
 8006698:	db19      	blt.n	80066ce <__ieee754_atan2f+0xe2>
 800669a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800669e:	f000 fdf9 	bl	8007294 <fabsf>
 80066a2:	f000 fd23 	bl	80070ec <atanf>
 80066a6:	eef0 7a40 	vmov.f32	s15, s0
 80066aa:	2c01      	cmp	r4, #1
 80066ac:	d012      	beq.n	80066d4 <__ieee754_atan2f+0xe8>
 80066ae:	2c02      	cmp	r4, #2
 80066b0:	d017      	beq.n	80066e2 <__ieee754_atan2f+0xf6>
 80066b2:	2c00      	cmp	r4, #0
 80066b4:	d0ad      	beq.n	8006612 <__ieee754_atan2f+0x26>
 80066b6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800671c <__ieee754_atan2f+0x130>
 80066ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80066be:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8006720 <__ieee754_atan2f+0x134>
 80066c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80066c6:	e7a4      	b.n	8006612 <__ieee754_atan2f+0x26>
 80066c8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800670c <__ieee754_atan2f+0x120>
 80066cc:	e7ed      	b.n	80066aa <__ieee754_atan2f+0xbe>
 80066ce:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006724 <__ieee754_atan2f+0x138>
 80066d2:	e7ea      	b.n	80066aa <__ieee754_atan2f+0xbe>
 80066d4:	ee17 3a90 	vmov	r3, s15
 80066d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	e797      	b.n	8006612 <__ieee754_atan2f+0x26>
 80066e2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800671c <__ieee754_atan2f+0x130>
 80066e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80066ea:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8006720 <__ieee754_atan2f+0x134>
 80066ee:	ee70 7a67 	vsub.f32	s15, s0, s15
 80066f2:	e78e      	b.n	8006612 <__ieee754_atan2f+0x26>
 80066f4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8006720 <__ieee754_atan2f+0x134>
 80066f8:	e78b      	b.n	8006612 <__ieee754_atan2f+0x26>
 80066fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006728 <__ieee754_atan2f+0x13c>
 80066fe:	e788      	b.n	8006612 <__ieee754_atan2f+0x26>
 8006700:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006724 <__ieee754_atan2f+0x138>
 8006704:	e785      	b.n	8006612 <__ieee754_atan2f+0x26>
 8006706:	bf00      	nop
 8006708:	c0490fdb 	.word	0xc0490fdb
 800670c:	3fc90fdb 	.word	0x3fc90fdb
 8006710:	bfc90fdb 	.word	0xbfc90fdb
 8006714:	08007464 	.word	0x08007464
 8006718:	08007470 	.word	0x08007470
 800671c:	33bbbd2e 	.word	0x33bbbd2e
 8006720:	40490fdb 	.word	0x40490fdb
 8006724:	00000000 	.word	0x00000000
 8006728:	3f490fdb 	.word	0x3f490fdb

0800672c <__ieee754_fmodf>:
 800672c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672e:	ee10 5a90 	vmov	r5, s1
 8006732:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8006736:	d009      	beq.n	800674c <__ieee754_fmodf+0x20>
 8006738:	ee10 2a10 	vmov	r2, s0
 800673c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006740:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006744:	da02      	bge.n	800674c <__ieee754_fmodf+0x20>
 8006746:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800674a:	dd04      	ble.n	8006756 <__ieee754_fmodf+0x2a>
 800674c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8006750:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8006754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006756:	42a3      	cmp	r3, r4
 8006758:	dbfc      	blt.n	8006754 <__ieee754_fmodf+0x28>
 800675a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800675e:	d105      	bne.n	800676c <__ieee754_fmodf+0x40>
 8006760:	4b32      	ldr	r3, [pc, #200]	; (800682c <__ieee754_fmodf+0x100>)
 8006762:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8006766:	ed93 0a00 	vldr	s0, [r3]
 800676a:	e7f3      	b.n	8006754 <__ieee754_fmodf+0x28>
 800676c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8006770:	d13f      	bne.n	80067f2 <__ieee754_fmodf+0xc6>
 8006772:	0219      	lsls	r1, r3, #8
 8006774:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8006778:	2900      	cmp	r1, #0
 800677a:	dc37      	bgt.n	80067ec <__ieee754_fmodf+0xc0>
 800677c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8006780:	d13d      	bne.n	80067fe <__ieee754_fmodf+0xd2>
 8006782:	0227      	lsls	r7, r4, #8
 8006784:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8006788:	2f00      	cmp	r7, #0
 800678a:	da35      	bge.n	80067f8 <__ieee754_fmodf+0xcc>
 800678c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8006790:	bfbb      	ittet	lt
 8006792:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8006796:	1a12      	sublt	r2, r2, r0
 8006798:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800679c:	4093      	lsllt	r3, r2
 800679e:	bfa8      	it	ge
 80067a0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80067a4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80067a8:	bfb5      	itete	lt
 80067aa:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80067ae:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80067b2:	1a52      	sublt	r2, r2, r1
 80067b4:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80067b8:	bfb8      	it	lt
 80067ba:	4094      	lsllt	r4, r2
 80067bc:	1a40      	subs	r0, r0, r1
 80067be:	1b1a      	subs	r2, r3, r4
 80067c0:	bb00      	cbnz	r0, 8006804 <__ieee754_fmodf+0xd8>
 80067c2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80067c6:	bf38      	it	cc
 80067c8:	4613      	movcc	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0c8      	beq.n	8006760 <__ieee754_fmodf+0x34>
 80067ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067d2:	db1f      	blt.n	8006814 <__ieee754_fmodf+0xe8>
 80067d4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80067d8:	db1f      	blt.n	800681a <__ieee754_fmodf+0xee>
 80067da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80067de:	317f      	adds	r1, #127	; 0x7f
 80067e0:	4333      	orrs	r3, r6
 80067e2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80067e6:	ee00 3a10 	vmov	s0, r3
 80067ea:	e7b3      	b.n	8006754 <__ieee754_fmodf+0x28>
 80067ec:	3801      	subs	r0, #1
 80067ee:	0049      	lsls	r1, r1, #1
 80067f0:	e7c2      	b.n	8006778 <__ieee754_fmodf+0x4c>
 80067f2:	15d8      	asrs	r0, r3, #23
 80067f4:	387f      	subs	r0, #127	; 0x7f
 80067f6:	e7c1      	b.n	800677c <__ieee754_fmodf+0x50>
 80067f8:	3901      	subs	r1, #1
 80067fa:	007f      	lsls	r7, r7, #1
 80067fc:	e7c4      	b.n	8006788 <__ieee754_fmodf+0x5c>
 80067fe:	15e1      	asrs	r1, r4, #23
 8006800:	397f      	subs	r1, #127	; 0x7f
 8006802:	e7c3      	b.n	800678c <__ieee754_fmodf+0x60>
 8006804:	2a00      	cmp	r2, #0
 8006806:	da02      	bge.n	800680e <__ieee754_fmodf+0xe2>
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	3801      	subs	r0, #1
 800680c:	e7d7      	b.n	80067be <__ieee754_fmodf+0x92>
 800680e:	d0a7      	beq.n	8006760 <__ieee754_fmodf+0x34>
 8006810:	0053      	lsls	r3, r2, #1
 8006812:	e7fa      	b.n	800680a <__ieee754_fmodf+0xde>
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	3901      	subs	r1, #1
 8006818:	e7d9      	b.n	80067ce <__ieee754_fmodf+0xa2>
 800681a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800681e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8006822:	3182      	adds	r1, #130	; 0x82
 8006824:	410b      	asrs	r3, r1
 8006826:	4333      	orrs	r3, r6
 8006828:	e7dd      	b.n	80067e6 <__ieee754_fmodf+0xba>
 800682a:	bf00      	nop
 800682c:	0800747c 	.word	0x0800747c

08006830 <__ieee754_rem_pio2f>:
 8006830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006832:	ee10 6a10 	vmov	r6, s0
 8006836:	4b8e      	ldr	r3, [pc, #568]	; (8006a70 <__ieee754_rem_pio2f+0x240>)
 8006838:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800683c:	429d      	cmp	r5, r3
 800683e:	b087      	sub	sp, #28
 8006840:	eef0 7a40 	vmov.f32	s15, s0
 8006844:	4604      	mov	r4, r0
 8006846:	dc05      	bgt.n	8006854 <__ieee754_rem_pio2f+0x24>
 8006848:	2300      	movs	r3, #0
 800684a:	ed80 0a00 	vstr	s0, [r0]
 800684e:	6043      	str	r3, [r0, #4]
 8006850:	2000      	movs	r0, #0
 8006852:	e01a      	b.n	800688a <__ieee754_rem_pio2f+0x5a>
 8006854:	4b87      	ldr	r3, [pc, #540]	; (8006a74 <__ieee754_rem_pio2f+0x244>)
 8006856:	429d      	cmp	r5, r3
 8006858:	dc46      	bgt.n	80068e8 <__ieee754_rem_pio2f+0xb8>
 800685a:	2e00      	cmp	r6, #0
 800685c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8006a78 <__ieee754_rem_pio2f+0x248>
 8006860:	4b86      	ldr	r3, [pc, #536]	; (8006a7c <__ieee754_rem_pio2f+0x24c>)
 8006862:	f025 050f 	bic.w	r5, r5, #15
 8006866:	dd1f      	ble.n	80068a8 <__ieee754_rem_pio2f+0x78>
 8006868:	429d      	cmp	r5, r3
 800686a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800686e:	d00e      	beq.n	800688e <__ieee754_rem_pio2f+0x5e>
 8006870:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8006a80 <__ieee754_rem_pio2f+0x250>
 8006874:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006878:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800687c:	ed80 0a00 	vstr	s0, [r0]
 8006880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006884:	2001      	movs	r0, #1
 8006886:	edc4 7a01 	vstr	s15, [r4, #4]
 800688a:	b007      	add	sp, #28
 800688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8006a84 <__ieee754_rem_pio2f+0x254>
 8006892:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8006a88 <__ieee754_rem_pio2f+0x258>
 8006896:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800689a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800689e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068a2:	edc0 6a00 	vstr	s13, [r0]
 80068a6:	e7eb      	b.n	8006880 <__ieee754_rem_pio2f+0x50>
 80068a8:	429d      	cmp	r5, r3
 80068aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80068ae:	d00e      	beq.n	80068ce <__ieee754_rem_pio2f+0x9e>
 80068b0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006a80 <__ieee754_rem_pio2f+0x250>
 80068b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80068b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80068bc:	ed80 0a00 	vstr	s0, [r0]
 80068c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	edc4 7a01 	vstr	s15, [r4, #4]
 80068cc:	e7dd      	b.n	800688a <__ieee754_rem_pio2f+0x5a>
 80068ce:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8006a84 <__ieee754_rem_pio2f+0x254>
 80068d2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8006a88 <__ieee754_rem_pio2f+0x258>
 80068d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80068da:	ee77 6a87 	vadd.f32	s13, s15, s14
 80068de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068e2:	edc0 6a00 	vstr	s13, [r0]
 80068e6:	e7eb      	b.n	80068c0 <__ieee754_rem_pio2f+0x90>
 80068e8:	4b68      	ldr	r3, [pc, #416]	; (8006a8c <__ieee754_rem_pio2f+0x25c>)
 80068ea:	429d      	cmp	r5, r3
 80068ec:	dc72      	bgt.n	80069d4 <__ieee754_rem_pio2f+0x1a4>
 80068ee:	f000 fcd1 	bl	8007294 <fabsf>
 80068f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006a90 <__ieee754_rem_pio2f+0x260>
 80068f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80068fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80068fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006906:	ee17 0a90 	vmov	r0, s15
 800690a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006a78 <__ieee754_rem_pio2f+0x248>
 800690e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006912:	281f      	cmp	r0, #31
 8006914:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8006a80 <__ieee754_rem_pio2f+0x250>
 8006918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691c:	eeb1 6a47 	vneg.f32	s12, s14
 8006920:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006924:	ee16 2a90 	vmov	r2, s13
 8006928:	dc1c      	bgt.n	8006964 <__ieee754_rem_pio2f+0x134>
 800692a:	495a      	ldr	r1, [pc, #360]	; (8006a94 <__ieee754_rem_pio2f+0x264>)
 800692c:	1e47      	subs	r7, r0, #1
 800692e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8006932:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006936:	428b      	cmp	r3, r1
 8006938:	d014      	beq.n	8006964 <__ieee754_rem_pio2f+0x134>
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	ed94 7a00 	vldr	s14, [r4]
 8006940:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006944:	2e00      	cmp	r6, #0
 8006946:	ee30 0a67 	vsub.f32	s0, s0, s15
 800694a:	ed84 0a01 	vstr	s0, [r4, #4]
 800694e:	da9c      	bge.n	800688a <__ieee754_rem_pio2f+0x5a>
 8006950:	eeb1 7a47 	vneg.f32	s14, s14
 8006954:	eeb1 0a40 	vneg.f32	s0, s0
 8006958:	ed84 7a00 	vstr	s14, [r4]
 800695c:	ed84 0a01 	vstr	s0, [r4, #4]
 8006960:	4240      	negs	r0, r0
 8006962:	e792      	b.n	800688a <__ieee754_rem_pio2f+0x5a>
 8006964:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006968:	15eb      	asrs	r3, r5, #23
 800696a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800696e:	2d08      	cmp	r5, #8
 8006970:	dde3      	ble.n	800693a <__ieee754_rem_pio2f+0x10a>
 8006972:	eddf 7a44 	vldr	s15, [pc, #272]	; 8006a84 <__ieee754_rem_pio2f+0x254>
 8006976:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006a88 <__ieee754_rem_pio2f+0x258>
 800697a:	eef0 6a40 	vmov.f32	s13, s0
 800697e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006982:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006986:	eea6 0a27 	vfma.f32	s0, s12, s15
 800698a:	eef0 7a40 	vmov.f32	s15, s0
 800698e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006992:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006996:	ee15 2a90 	vmov	r2, s11
 800699a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800699e:	1a5b      	subs	r3, r3, r1
 80069a0:	2b19      	cmp	r3, #25
 80069a2:	dc04      	bgt.n	80069ae <__ieee754_rem_pio2f+0x17e>
 80069a4:	edc4 5a00 	vstr	s11, [r4]
 80069a8:	eeb0 0a66 	vmov.f32	s0, s13
 80069ac:	e7c6      	b.n	800693c <__ieee754_rem_pio2f+0x10c>
 80069ae:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8006a98 <__ieee754_rem_pio2f+0x268>
 80069b2:	eeb0 0a66 	vmov.f32	s0, s13
 80069b6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80069ba:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80069be:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006a9c <__ieee754_rem_pio2f+0x26c>
 80069c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80069c6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80069ca:	ee30 7a67 	vsub.f32	s14, s0, s15
 80069ce:	ed84 7a00 	vstr	s14, [r4]
 80069d2:	e7b3      	b.n	800693c <__ieee754_rem_pio2f+0x10c>
 80069d4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80069d8:	db06      	blt.n	80069e8 <__ieee754_rem_pio2f+0x1b8>
 80069da:	ee70 7a40 	vsub.f32	s15, s0, s0
 80069de:	edc0 7a01 	vstr	s15, [r0, #4]
 80069e2:	edc0 7a00 	vstr	s15, [r0]
 80069e6:	e733      	b.n	8006850 <__ieee754_rem_pio2f+0x20>
 80069e8:	15ea      	asrs	r2, r5, #23
 80069ea:	3a86      	subs	r2, #134	; 0x86
 80069ec:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006aa0 <__ieee754_rem_pio2f+0x270>
 80069fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a04:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006a08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a0c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a18:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006a1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a28:	edcd 7a05 	vstr	s15, [sp, #20]
 8006a2c:	d11e      	bne.n	8006a6c <__ieee754_rem_pio2f+0x23c>
 8006a2e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a36:	bf14      	ite	ne
 8006a38:	2302      	movne	r3, #2
 8006a3a:	2301      	moveq	r3, #1
 8006a3c:	4919      	ldr	r1, [pc, #100]	; (8006aa4 <__ieee754_rem_pio2f+0x274>)
 8006a3e:	9101      	str	r1, [sp, #4]
 8006a40:	2102      	movs	r1, #2
 8006a42:	9100      	str	r1, [sp, #0]
 8006a44:	a803      	add	r0, sp, #12
 8006a46:	4621      	mov	r1, r4
 8006a48:	f000 f892 	bl	8006b70 <__kernel_rem_pio2f>
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	f6bf af1c 	bge.w	800688a <__ieee754_rem_pio2f+0x5a>
 8006a52:	edd4 7a00 	vldr	s15, [r4]
 8006a56:	eef1 7a67 	vneg.f32	s15, s15
 8006a5a:	edc4 7a00 	vstr	s15, [r4]
 8006a5e:	edd4 7a01 	vldr	s15, [r4, #4]
 8006a62:	eef1 7a67 	vneg.f32	s15, s15
 8006a66:	edc4 7a01 	vstr	s15, [r4, #4]
 8006a6a:	e779      	b.n	8006960 <__ieee754_rem_pio2f+0x130>
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e7e5      	b.n	8006a3c <__ieee754_rem_pio2f+0x20c>
 8006a70:	3f490fd8 	.word	0x3f490fd8
 8006a74:	4016cbe3 	.word	0x4016cbe3
 8006a78:	3fc90f80 	.word	0x3fc90f80
 8006a7c:	3fc90fd0 	.word	0x3fc90fd0
 8006a80:	37354443 	.word	0x37354443
 8006a84:	37354400 	.word	0x37354400
 8006a88:	2e85a308 	.word	0x2e85a308
 8006a8c:	43490f80 	.word	0x43490f80
 8006a90:	3f22f984 	.word	0x3f22f984
 8006a94:	08007484 	.word	0x08007484
 8006a98:	2e85a300 	.word	0x2e85a300
 8006a9c:	248d3132 	.word	0x248d3132
 8006aa0:	43800000 	.word	0x43800000
 8006aa4:	08007504 	.word	0x08007504

08006aa8 <__ieee754_sqrtf>:
 8006aa8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006aac:	4770      	bx	lr
	...

08006ab0 <__kernel_cosf>:
 8006ab0:	ee10 3a10 	vmov	r3, s0
 8006ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ab8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006abc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006ac0:	da05      	bge.n	8006ace <__kernel_cosf+0x1e>
 8006ac2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006ac6:	ee17 2a90 	vmov	r2, s15
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d03d      	beq.n	8006b4a <__kernel_cosf+0x9a>
 8006ace:	ee60 5a00 	vmul.f32	s11, s0, s0
 8006ad2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006b50 <__kernel_cosf+0xa0>
 8006ad6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006b54 <__kernel_cosf+0xa4>
 8006ada:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006b58 <__kernel_cosf+0xa8>
 8006ade:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <__kernel_cosf+0xac>)
 8006ae0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006b60 <__kernel_cosf+0xb0>
 8006aea:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006aee:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006b64 <__kernel_cosf+0xb4>
 8006af2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8006af6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006b68 <__kernel_cosf+0xb8>
 8006afa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006afe:	eeb0 7a66 	vmov.f32	s14, s13
 8006b02:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8006b06:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006b0a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8006b0e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8006b12:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8006b16:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b1a:	dc04      	bgt.n	8006b26 <__kernel_cosf+0x76>
 8006b1c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006b20:	ee36 0a47 	vsub.f32	s0, s12, s14
 8006b24:	4770      	bx	lr
 8006b26:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <__kernel_cosf+0xbc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	bfda      	itte	le
 8006b2c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8006b30:	ee06 3a90 	vmovle	s13, r3
 8006b34:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8006b38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b3c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8006b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b48:	4770      	bx	lr
 8006b4a:	eeb0 0a46 	vmov.f32	s0, s12
 8006b4e:	4770      	bx	lr
 8006b50:	ad47d74e 	.word	0xad47d74e
 8006b54:	310f74f6 	.word	0x310f74f6
 8006b58:	3d2aaaab 	.word	0x3d2aaaab
 8006b5c:	3e999999 	.word	0x3e999999
 8006b60:	b493f27c 	.word	0xb493f27c
 8006b64:	37d00d01 	.word	0x37d00d01
 8006b68:	bab60b61 	.word	0xbab60b61
 8006b6c:	3f480000 	.word	0x3f480000

08006b70 <__kernel_rem_pio2f>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	ed2d 8b04 	vpush	{d8-d9}
 8006b78:	b0d9      	sub	sp, #356	; 0x164
 8006b7a:	4688      	mov	r8, r1
 8006b7c:	9002      	str	r0, [sp, #8]
 8006b7e:	49bb      	ldr	r1, [pc, #748]	; (8006e6c <__kernel_rem_pio2f+0x2fc>)
 8006b80:	9866      	ldr	r0, [sp, #408]	; 0x198
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8006b88:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8006b8c:	1e59      	subs	r1, r3, #1
 8006b8e:	1d13      	adds	r3, r2, #4
 8006b90:	db27      	blt.n	8006be2 <__kernel_rem_pio2f+0x72>
 8006b92:	f1b2 0b03 	subs.w	fp, r2, #3
 8006b96:	bf48      	it	mi
 8006b98:	f102 0b04 	addmi.w	fp, r2, #4
 8006b9c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8006ba0:	1c45      	adds	r5, r0, #1
 8006ba2:	00ec      	lsls	r4, r5, #3
 8006ba4:	1a47      	subs	r7, r0, r1
 8006ba6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8006e7c <__kernel_rem_pio2f+0x30c>
 8006baa:	9403      	str	r4, [sp, #12]
 8006bac:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8006bb0:	eb0a 0c01 	add.w	ip, sl, r1
 8006bb4:	ae1c      	add	r6, sp, #112	; 0x70
 8006bb6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8006bba:	2400      	movs	r4, #0
 8006bbc:	4564      	cmp	r4, ip
 8006bbe:	dd12      	ble.n	8006be6 <__kernel_rem_pio2f+0x76>
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	ac1c      	add	r4, sp, #112	; 0x70
 8006bc4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006bc8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8006bcc:	f04f 0c00 	mov.w	ip, #0
 8006bd0:	45d4      	cmp	ip, sl
 8006bd2:	dc27      	bgt.n	8006c24 <__kernel_rem_pio2f+0xb4>
 8006bd4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006bd8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8006e7c <__kernel_rem_pio2f+0x30c>
 8006bdc:	4627      	mov	r7, r4
 8006bde:	2600      	movs	r6, #0
 8006be0:	e016      	b.n	8006c10 <__kernel_rem_pio2f+0xa0>
 8006be2:	2000      	movs	r0, #0
 8006be4:	e7dc      	b.n	8006ba0 <__kernel_rem_pio2f+0x30>
 8006be6:	42e7      	cmn	r7, r4
 8006be8:	bf5d      	ittte	pl
 8006bea:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8006bee:	ee07 3a90 	vmovpl	s15, r3
 8006bf2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006bf6:	eef0 7a47 	vmovmi.f32	s15, s14
 8006bfa:	ece6 7a01 	vstmia	r6!, {s15}
 8006bfe:	3401      	adds	r4, #1
 8006c00:	e7dc      	b.n	8006bbc <__kernel_rem_pio2f+0x4c>
 8006c02:	ecf9 6a01 	vldmia	r9!, {s13}
 8006c06:	ed97 7a00 	vldr	s14, [r7]
 8006c0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006c0e:	3601      	adds	r6, #1
 8006c10:	428e      	cmp	r6, r1
 8006c12:	f1a7 0704 	sub.w	r7, r7, #4
 8006c16:	ddf4      	ble.n	8006c02 <__kernel_rem_pio2f+0x92>
 8006c18:	eceb 7a01 	vstmia	fp!, {s15}
 8006c1c:	f10c 0c01 	add.w	ip, ip, #1
 8006c20:	3404      	adds	r4, #4
 8006c22:	e7d5      	b.n	8006bd0 <__kernel_rem_pio2f+0x60>
 8006c24:	ab08      	add	r3, sp, #32
 8006c26:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006c2a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8006e78 <__kernel_rem_pio2f+0x308>
 8006c2e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8006e74 <__kernel_rem_pio2f+0x304>
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8006c38:	4656      	mov	r6, sl
 8006c3a:	00b3      	lsls	r3, r6, #2
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	ab58      	add	r3, sp, #352	; 0x160
 8006c40:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8006c44:	ac08      	add	r4, sp, #32
 8006c46:	ab44      	add	r3, sp, #272	; 0x110
 8006c48:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8006c4c:	46a4      	mov	ip, r4
 8006c4e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8006c52:	4637      	mov	r7, r6
 8006c54:	2f00      	cmp	r7, #0
 8006c56:	f1a0 0004 	sub.w	r0, r0, #4
 8006c5a:	dc4f      	bgt.n	8006cfc <__kernel_rem_pio2f+0x18c>
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8006c62:	f000 fb61 	bl	8007328 <scalbnf>
 8006c66:	eeb0 8a40 	vmov.f32	s16, s0
 8006c6a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006c6e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006c72:	f000 fb17 	bl	80072a4 <floorf>
 8006c76:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8006c7a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006c7e:	2d00      	cmp	r5, #0
 8006c80:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006c84:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006c88:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8006c8c:	ee17 9a90 	vmov	r9, s15
 8006c90:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006c94:	dd44      	ble.n	8006d20 <__kernel_rem_pio2f+0x1b0>
 8006c96:	f106 3cff 	add.w	ip, r6, #4294967295
 8006c9a:	ab08      	add	r3, sp, #32
 8006c9c:	f1c5 0e08 	rsb	lr, r5, #8
 8006ca0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8006ca4:	fa47 f00e 	asr.w	r0, r7, lr
 8006ca8:	4481      	add	r9, r0
 8006caa:	fa00 f00e 	lsl.w	r0, r0, lr
 8006cae:	1a3f      	subs	r7, r7, r0
 8006cb0:	f1c5 0007 	rsb	r0, r5, #7
 8006cb4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8006cb8:	4107      	asrs	r7, r0
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	dd3f      	ble.n	8006d3e <__kernel_rem_pio2f+0x1ce>
 8006cbe:	f04f 0e00 	mov.w	lr, #0
 8006cc2:	f109 0901 	add.w	r9, r9, #1
 8006cc6:	4673      	mov	r3, lr
 8006cc8:	4576      	cmp	r6, lr
 8006cca:	dc6b      	bgt.n	8006da4 <__kernel_rem_pio2f+0x234>
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	dd04      	ble.n	8006cda <__kernel_rem_pio2f+0x16a>
 8006cd0:	2d01      	cmp	r5, #1
 8006cd2:	d078      	beq.n	8006dc6 <__kernel_rem_pio2f+0x256>
 8006cd4:	2d02      	cmp	r5, #2
 8006cd6:	f000 8081 	beq.w	8006ddc <__kernel_rem_pio2f+0x26c>
 8006cda:	2f02      	cmp	r7, #2
 8006cdc:	d12f      	bne.n	8006d3e <__kernel_rem_pio2f+0x1ce>
 8006cde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ce2:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006ce6:	b353      	cbz	r3, 8006d3e <__kernel_rem_pio2f+0x1ce>
 8006ce8:	4628      	mov	r0, r5
 8006cea:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8006cee:	f000 fb1b 	bl	8007328 <scalbnf>
 8006cf2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006cf6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006cfa:	e020      	b.n	8006d3e <__kernel_rem_pio2f+0x1ce>
 8006cfc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006d00:	3f01      	subs	r7, #1
 8006d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d0a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006d0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006d12:	ecac 0a01 	vstmia	ip!, {s0}
 8006d16:	ed90 0a00 	vldr	s0, [r0]
 8006d1a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006d1e:	e799      	b.n	8006c54 <__kernel_rem_pio2f+0xe4>
 8006d20:	d105      	bne.n	8006d2e <__kernel_rem_pio2f+0x1be>
 8006d22:	1e70      	subs	r0, r6, #1
 8006d24:	ab08      	add	r3, sp, #32
 8006d26:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8006d2a:	11ff      	asrs	r7, r7, #7
 8006d2c:	e7c5      	b.n	8006cba <__kernel_rem_pio2f+0x14a>
 8006d2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006d32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3a:	da31      	bge.n	8006da0 <__kernel_rem_pio2f+0x230>
 8006d3c:	2700      	movs	r7, #0
 8006d3e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d46:	f040 809b 	bne.w	8006e80 <__kernel_rem_pio2f+0x310>
 8006d4a:	1e74      	subs	r4, r6, #1
 8006d4c:	46a4      	mov	ip, r4
 8006d4e:	2000      	movs	r0, #0
 8006d50:	45d4      	cmp	ip, sl
 8006d52:	da4a      	bge.n	8006dea <__kernel_rem_pio2f+0x27a>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d07a      	beq.n	8006e4e <__kernel_rem_pio2f+0x2de>
 8006d58:	ab08      	add	r3, sp, #32
 8006d5a:	3d08      	subs	r5, #8
 8006d5c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8081 	beq.w	8006e68 <__kernel_rem_pio2f+0x2f8>
 8006d66:	4628      	mov	r0, r5
 8006d68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d6c:	00a5      	lsls	r5, r4, #2
 8006d6e:	f000 fadb 	bl	8007328 <scalbnf>
 8006d72:	aa44      	add	r2, sp, #272	; 0x110
 8006d74:	1d2b      	adds	r3, r5, #4
 8006d76:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006e78 <__kernel_rem_pio2f+0x308>
 8006d7a:	18d1      	adds	r1, r2, r3
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	f280 80ae 	bge.w	8006ee0 <__kernel_rem_pio2f+0x370>
 8006d84:	4622      	mov	r2, r4
 8006d86:	2a00      	cmp	r2, #0
 8006d88:	f2c0 80cc 	blt.w	8006f24 <__kernel_rem_pio2f+0x3b4>
 8006d8c:	a944      	add	r1, sp, #272	; 0x110
 8006d8e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8006d92:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8006e70 <__kernel_rem_pio2f+0x300>
 8006d96:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006e7c <__kernel_rem_pio2f+0x30c>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	1aa1      	subs	r1, r4, r2
 8006d9e:	e0b6      	b.n	8006f0e <__kernel_rem_pio2f+0x39e>
 8006da0:	2702      	movs	r7, #2
 8006da2:	e78c      	b.n	8006cbe <__kernel_rem_pio2f+0x14e>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	b94b      	cbnz	r3, 8006dbc <__kernel_rem_pio2f+0x24c>
 8006da8:	b118      	cbz	r0, 8006db2 <__kernel_rem_pio2f+0x242>
 8006daa:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	2001      	movs	r0, #1
 8006db2:	f10e 0e01 	add.w	lr, lr, #1
 8006db6:	3404      	adds	r4, #4
 8006db8:	4603      	mov	r3, r0
 8006dba:	e785      	b.n	8006cc8 <__kernel_rem_pio2f+0x158>
 8006dbc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8006dc0:	6020      	str	r0, [r4, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	e7f5      	b.n	8006db2 <__kernel_rem_pio2f+0x242>
 8006dc6:	1e74      	subs	r4, r6, #1
 8006dc8:	a808      	add	r0, sp, #32
 8006dca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006dce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006dd2:	f10d 0c20 	add.w	ip, sp, #32
 8006dd6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8006dda:	e77e      	b.n	8006cda <__kernel_rem_pio2f+0x16a>
 8006ddc:	1e74      	subs	r4, r6, #1
 8006dde:	a808      	add	r0, sp, #32
 8006de0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006de4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006de8:	e7f3      	b.n	8006dd2 <__kernel_rem_pio2f+0x262>
 8006dea:	ab08      	add	r3, sp, #32
 8006dec:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8006df0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006df4:	4318      	orrs	r0, r3
 8006df6:	e7ab      	b.n	8006d50 <__kernel_rem_pio2f+0x1e0>
 8006df8:	f10c 0c01 	add.w	ip, ip, #1
 8006dfc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8006e00:	2c00      	cmp	r4, #0
 8006e02:	d0f9      	beq.n	8006df8 <__kernel_rem_pio2f+0x288>
 8006e04:	9b05      	ldr	r3, [sp, #20]
 8006e06:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006e0a:	eb0d 0003 	add.w	r0, sp, r3
 8006e0e:	9b01      	ldr	r3, [sp, #4]
 8006e10:	18f4      	adds	r4, r6, r3
 8006e12:	ab1c      	add	r3, sp, #112	; 0x70
 8006e14:	1c77      	adds	r7, r6, #1
 8006e16:	384c      	subs	r0, #76	; 0x4c
 8006e18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e1c:	4466      	add	r6, ip
 8006e1e:	42be      	cmp	r6, r7
 8006e20:	f6ff af0b 	blt.w	8006c3a <__kernel_rem_pio2f+0xca>
 8006e24:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8006e28:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006e2c:	ee07 3a90 	vmov	s15, r3
 8006e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e34:	f04f 0c00 	mov.w	ip, #0
 8006e38:	ece4 7a01 	vstmia	r4!, {s15}
 8006e3c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006e7c <__kernel_rem_pio2f+0x30c>
 8006e40:	46a1      	mov	r9, r4
 8006e42:	458c      	cmp	ip, r1
 8006e44:	dd07      	ble.n	8006e56 <__kernel_rem_pio2f+0x2e6>
 8006e46:	ece0 7a01 	vstmia	r0!, {s15}
 8006e4a:	3701      	adds	r7, #1
 8006e4c:	e7e7      	b.n	8006e1e <__kernel_rem_pio2f+0x2ae>
 8006e4e:	9804      	ldr	r0, [sp, #16]
 8006e50:	f04f 0c01 	mov.w	ip, #1
 8006e54:	e7d2      	b.n	8006dfc <__kernel_rem_pio2f+0x28c>
 8006e56:	ecfe 6a01 	vldmia	lr!, {s13}
 8006e5a:	ed39 7a01 	vldmdb	r9!, {s14}
 8006e5e:	f10c 0c01 	add.w	ip, ip, #1
 8006e62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006e66:	e7ec      	b.n	8006e42 <__kernel_rem_pio2f+0x2d2>
 8006e68:	3c01      	subs	r4, #1
 8006e6a:	e775      	b.n	8006d58 <__kernel_rem_pio2f+0x1e8>
 8006e6c:	08007848 	.word	0x08007848
 8006e70:	0800781c 	.word	0x0800781c
 8006e74:	43800000 	.word	0x43800000
 8006e78:	3b800000 	.word	0x3b800000
 8006e7c:	00000000 	.word	0x00000000
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	eeb0 0a48 	vmov.f32	s0, s16
 8006e86:	1a98      	subs	r0, r3, r2
 8006e88:	f000 fa4e 	bl	8007328 <scalbnf>
 8006e8c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8006e74 <__kernel_rem_pio2f+0x304>
 8006e90:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e98:	db19      	blt.n	8006ece <__kernel_rem_pio2f+0x35e>
 8006e9a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8006e78 <__kernel_rem_pio2f+0x308>
 8006e9e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006ea2:	aa08      	add	r2, sp, #32
 8006ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ea8:	1c74      	adds	r4, r6, #1
 8006eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eae:	3508      	adds	r5, #8
 8006eb0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eb8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006ebc:	ee10 3a10 	vmov	r3, s0
 8006ec0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006ec4:	ee17 3a90 	vmov	r3, s15
 8006ec8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006ecc:	e74b      	b.n	8006d66 <__kernel_rem_pio2f+0x1f6>
 8006ece:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006ed2:	aa08      	add	r2, sp, #32
 8006ed4:	ee10 3a10 	vmov	r3, s0
 8006ed8:	4634      	mov	r4, r6
 8006eda:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006ede:	e742      	b.n	8006d66 <__kernel_rem_pio2f+0x1f6>
 8006ee0:	a808      	add	r0, sp, #32
 8006ee2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8006ee6:	9001      	str	r0, [sp, #4]
 8006ee8:	ee07 0a90 	vmov	s15, r0
 8006eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006ef6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006efa:	ed61 7a01 	vstmdb	r1!, {s15}
 8006efe:	e73e      	b.n	8006d7e <__kernel_rem_pio2f+0x20e>
 8006f00:	ecfc 6a01 	vldmia	ip!, {s13}
 8006f04:	ecb6 7a01 	vldmia	r6!, {s14}
 8006f08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	4550      	cmp	r0, sl
 8006f10:	dc01      	bgt.n	8006f16 <__kernel_rem_pio2f+0x3a6>
 8006f12:	4288      	cmp	r0, r1
 8006f14:	ddf4      	ble.n	8006f00 <__kernel_rem_pio2f+0x390>
 8006f16:	a858      	add	r0, sp, #352	; 0x160
 8006f18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f1c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8006f20:	3a01      	subs	r2, #1
 8006f22:	e730      	b.n	8006d86 <__kernel_rem_pio2f+0x216>
 8006f24:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8006f26:	2a02      	cmp	r2, #2
 8006f28:	dc09      	bgt.n	8006f3e <__kernel_rem_pio2f+0x3ce>
 8006f2a:	2a00      	cmp	r2, #0
 8006f2c:	dc2a      	bgt.n	8006f84 <__kernel_rem_pio2f+0x414>
 8006f2e:	d043      	beq.n	8006fb8 <__kernel_rem_pio2f+0x448>
 8006f30:	f009 0007 	and.w	r0, r9, #7
 8006f34:	b059      	add	sp, #356	; 0x164
 8006f36:	ecbd 8b04 	vpop	{d8-d9}
 8006f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d1f5      	bne.n	8006f30 <__kernel_rem_pio2f+0x3c0>
 8006f44:	ab30      	add	r3, sp, #192	; 0xc0
 8006f46:	442b      	add	r3, r5
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f1a1 0104 	sub.w	r1, r1, #4
 8006f54:	dc51      	bgt.n	8006ffa <__kernel_rem_pio2f+0x48a>
 8006f56:	4621      	mov	r1, r4
 8006f58:	2901      	cmp	r1, #1
 8006f5a:	f1a2 0204 	sub.w	r2, r2, #4
 8006f5e:	dc5c      	bgt.n	800701a <__kernel_rem_pio2f+0x4aa>
 8006f60:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8006e7c <__kernel_rem_pio2f+0x30c>
 8006f64:	3304      	adds	r3, #4
 8006f66:	2c01      	cmp	r4, #1
 8006f68:	dc67      	bgt.n	800703a <__kernel_rem_pio2f+0x4ca>
 8006f6a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8006f6e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8006f72:	2f00      	cmp	r7, #0
 8006f74:	d167      	bne.n	8007046 <__kernel_rem_pio2f+0x4d6>
 8006f76:	edc8 6a00 	vstr	s13, [r8]
 8006f7a:	ed88 7a01 	vstr	s14, [r8, #4]
 8006f7e:	edc8 7a02 	vstr	s15, [r8, #8]
 8006f82:	e7d5      	b.n	8006f30 <__kernel_rem_pio2f+0x3c0>
 8006f84:	aa30      	add	r2, sp, #192	; 0xc0
 8006f86:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8006e7c <__kernel_rem_pio2f+0x30c>
 8006f8a:	4413      	add	r3, r2
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	2a00      	cmp	r2, #0
 8006f90:	da24      	bge.n	8006fdc <__kernel_rem_pio2f+0x46c>
 8006f92:	b34f      	cbz	r7, 8006fe8 <__kernel_rem_pio2f+0x478>
 8006f94:	eef1 7a47 	vneg.f32	s15, s14
 8006f98:	edc8 7a00 	vstr	s15, [r8]
 8006f9c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8006fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fa4:	aa31      	add	r2, sp, #196	; 0xc4
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	429c      	cmp	r4, r3
 8006faa:	da20      	bge.n	8006fee <__kernel_rem_pio2f+0x47e>
 8006fac:	b10f      	cbz	r7, 8006fb2 <__kernel_rem_pio2f+0x442>
 8006fae:	eef1 7a67 	vneg.f32	s15, s15
 8006fb2:	edc8 7a01 	vstr	s15, [r8, #4]
 8006fb6:	e7bb      	b.n	8006f30 <__kernel_rem_pio2f+0x3c0>
 8006fb8:	aa30      	add	r2, sp, #192	; 0xc0
 8006fba:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8006e7c <__kernel_rem_pio2f+0x30c>
 8006fbe:	4413      	add	r3, r2
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	da05      	bge.n	8006fd0 <__kernel_rem_pio2f+0x460>
 8006fc4:	b10f      	cbz	r7, 8006fca <__kernel_rem_pio2f+0x45a>
 8006fc6:	eef1 7a67 	vneg.f32	s15, s15
 8006fca:	edc8 7a00 	vstr	s15, [r8]
 8006fce:	e7af      	b.n	8006f30 <__kernel_rem_pio2f+0x3c0>
 8006fd0:	ed33 7a01 	vldmdb	r3!, {s14}
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fda:	e7f1      	b.n	8006fc0 <__kernel_rem_pio2f+0x450>
 8006fdc:	ed73 7a01 	vldmdb	r3!, {s15}
 8006fe0:	3a01      	subs	r2, #1
 8006fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fe6:	e7d2      	b.n	8006f8e <__kernel_rem_pio2f+0x41e>
 8006fe8:	eef0 7a47 	vmov.f32	s15, s14
 8006fec:	e7d4      	b.n	8006f98 <__kernel_rem_pio2f+0x428>
 8006fee:	ecb2 7a01 	vldmia	r2!, {s14}
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ff8:	e7d6      	b.n	8006fa8 <__kernel_rem_pio2f+0x438>
 8006ffa:	edd1 7a00 	vldr	s15, [r1]
 8006ffe:	edd1 6a01 	vldr	s13, [r1, #4]
 8007002:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007006:	3801      	subs	r0, #1
 8007008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800700c:	ed81 7a00 	vstr	s14, [r1]
 8007010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007014:	edc1 7a01 	vstr	s15, [r1, #4]
 8007018:	e799      	b.n	8006f4e <__kernel_rem_pio2f+0x3de>
 800701a:	edd2 7a00 	vldr	s15, [r2]
 800701e:	edd2 6a01 	vldr	s13, [r2, #4]
 8007022:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007026:	3901      	subs	r1, #1
 8007028:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800702c:	ed82 7a00 	vstr	s14, [r2]
 8007030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007034:	edc2 7a01 	vstr	s15, [r2, #4]
 8007038:	e78e      	b.n	8006f58 <__kernel_rem_pio2f+0x3e8>
 800703a:	ed33 7a01 	vldmdb	r3!, {s14}
 800703e:	3c01      	subs	r4, #1
 8007040:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007044:	e78f      	b.n	8006f66 <__kernel_rem_pio2f+0x3f6>
 8007046:	eef1 6a66 	vneg.f32	s13, s13
 800704a:	eeb1 7a47 	vneg.f32	s14, s14
 800704e:	edc8 6a00 	vstr	s13, [r8]
 8007052:	ed88 7a01 	vstr	s14, [r8, #4]
 8007056:	eef1 7a67 	vneg.f32	s15, s15
 800705a:	e790      	b.n	8006f7e <__kernel_rem_pio2f+0x40e>

0800705c <__kernel_sinf>:
 800705c:	ee10 3a10 	vmov	r3, s0
 8007060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007064:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007068:	da04      	bge.n	8007074 <__kernel_sinf+0x18>
 800706a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800706e:	ee17 3a90 	vmov	r3, s15
 8007072:	b35b      	cbz	r3, 80070cc <__kernel_sinf+0x70>
 8007074:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007078:	eddf 7a15 	vldr	s15, [pc, #84]	; 80070d0 <__kernel_sinf+0x74>
 800707c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80070d4 <__kernel_sinf+0x78>
 8007080:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007084:	eddf 7a14 	vldr	s15, [pc, #80]	; 80070d8 <__kernel_sinf+0x7c>
 8007088:	eee6 7a07 	vfma.f32	s15, s12, s14
 800708c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80070dc <__kernel_sinf+0x80>
 8007090:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007094:	eddf 7a12 	vldr	s15, [pc, #72]	; 80070e0 <__kernel_sinf+0x84>
 8007098:	ee60 6a07 	vmul.f32	s13, s0, s14
 800709c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80070a0:	b930      	cbnz	r0, 80070b0 <__kernel_sinf+0x54>
 80070a2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80070e4 <__kernel_sinf+0x88>
 80070a6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80070aa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80070ae:	4770      	bx	lr
 80070b0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80070b4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80070b8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80070bc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80070c0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80070e8 <__kernel_sinf+0x8c>
 80070c4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80070c8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	2f2ec9d3 	.word	0x2f2ec9d3
 80070d4:	b2d72f34 	.word	0xb2d72f34
 80070d8:	3638ef1b 	.word	0x3638ef1b
 80070dc:	b9500d01 	.word	0xb9500d01
 80070e0:	3c088889 	.word	0x3c088889
 80070e4:	be2aaaab 	.word	0xbe2aaaab
 80070e8:	3e2aaaab 	.word	0x3e2aaaab

080070ec <atanf>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	ee10 5a10 	vmov	r5, s0
 80070f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80070f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80070fa:	eef0 7a40 	vmov.f32	s15, s0
 80070fe:	db10      	blt.n	8007122 <atanf+0x36>
 8007100:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007104:	dd04      	ble.n	8007110 <atanf+0x24>
 8007106:	ee70 7a00 	vadd.f32	s15, s0, s0
 800710a:	eeb0 0a67 	vmov.f32	s0, s15
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007248 <atanf+0x15c>
 8007114:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800724c <atanf+0x160>
 8007118:	2d00      	cmp	r5, #0
 800711a:	bfd8      	it	le
 800711c:	eef0 7a40 	vmovle.f32	s15, s0
 8007120:	e7f3      	b.n	800710a <atanf+0x1e>
 8007122:	4b4b      	ldr	r3, [pc, #300]	; (8007250 <atanf+0x164>)
 8007124:	429c      	cmp	r4, r3
 8007126:	dc10      	bgt.n	800714a <atanf+0x5e>
 8007128:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800712c:	da0a      	bge.n	8007144 <atanf+0x58>
 800712e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007254 <atanf+0x168>
 8007132:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	dce2      	bgt.n	800710a <atanf+0x1e>
 8007144:	f04f 33ff 	mov.w	r3, #4294967295
 8007148:	e013      	b.n	8007172 <atanf+0x86>
 800714a:	f000 f8a3 	bl	8007294 <fabsf>
 800714e:	4b42      	ldr	r3, [pc, #264]	; (8007258 <atanf+0x16c>)
 8007150:	429c      	cmp	r4, r3
 8007152:	dc4f      	bgt.n	80071f4 <atanf+0x108>
 8007154:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007158:	429c      	cmp	r4, r3
 800715a:	dc41      	bgt.n	80071e0 <atanf+0xf4>
 800715c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007160:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007164:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007168:	2300      	movs	r3, #0
 800716a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800716e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007178:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800725c <atanf+0x170>
 800717c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007260 <atanf+0x174>
 8007180:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007264 <atanf+0x178>
 8007184:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007188:	eee6 5a87 	vfma.f32	s11, s13, s14
 800718c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007268 <atanf+0x17c>
 8007190:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007194:	eddf 5a35 	vldr	s11, [pc, #212]	; 800726c <atanf+0x180>
 8007198:	eee7 5a26 	vfma.f32	s11, s14, s13
 800719c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007270 <atanf+0x184>
 80071a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80071a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007274 <atanf+0x188>
 80071a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80071ac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007278 <atanf+0x18c>
 80071b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80071b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800727c <atanf+0x190>
 80071b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80071bc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007280 <atanf+0x194>
 80071c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80071c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007284 <atanf+0x198>
 80071c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80071cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80071d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80071d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071d8:	d121      	bne.n	800721e <atanf+0x132>
 80071da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071de:	e794      	b.n	800710a <atanf+0x1e>
 80071e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80071e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80071e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80071ec:	2301      	movs	r3, #1
 80071ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80071f2:	e7be      	b.n	8007172 <atanf+0x86>
 80071f4:	4b24      	ldr	r3, [pc, #144]	; (8007288 <atanf+0x19c>)
 80071f6:	429c      	cmp	r4, r3
 80071f8:	dc0b      	bgt.n	8007212 <atanf+0x126>
 80071fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80071fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007202:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007206:	2302      	movs	r3, #2
 8007208:	ee70 6a67 	vsub.f32	s13, s0, s15
 800720c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007210:	e7af      	b.n	8007172 <atanf+0x86>
 8007212:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007216:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800721a:	2303      	movs	r3, #3
 800721c:	e7a9      	b.n	8007172 <atanf+0x86>
 800721e:	4a1b      	ldr	r2, [pc, #108]	; (800728c <atanf+0x1a0>)
 8007220:	491b      	ldr	r1, [pc, #108]	; (8007290 <atanf+0x1a4>)
 8007222:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007226:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800722a:	ed93 0a00 	vldr	s0, [r3]
 800722e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007232:	ed92 0a00 	vldr	s0, [r2]
 8007236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800723a:	2d00      	cmp	r5, #0
 800723c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007240:	bfb8      	it	lt
 8007242:	eef1 7a67 	vneglt.f32	s15, s15
 8007246:	e760      	b.n	800710a <atanf+0x1e>
 8007248:	3fc90fdb 	.word	0x3fc90fdb
 800724c:	bfc90fdb 	.word	0xbfc90fdb
 8007250:	3edfffff 	.word	0x3edfffff
 8007254:	7149f2ca 	.word	0x7149f2ca
 8007258:	3f97ffff 	.word	0x3f97ffff
 800725c:	3c8569d7 	.word	0x3c8569d7
 8007260:	3d4bda59 	.word	0x3d4bda59
 8007264:	bd6ef16b 	.word	0xbd6ef16b
 8007268:	3d886b35 	.word	0x3d886b35
 800726c:	3dba2e6e 	.word	0x3dba2e6e
 8007270:	3e124925 	.word	0x3e124925
 8007274:	3eaaaaab 	.word	0x3eaaaaab
 8007278:	bd15a221 	.word	0xbd15a221
 800727c:	bd9d8795 	.word	0xbd9d8795
 8007280:	bde38e38 	.word	0xbde38e38
 8007284:	be4ccccd 	.word	0xbe4ccccd
 8007288:	401bffff 	.word	0x401bffff
 800728c:	08007854 	.word	0x08007854
 8007290:	08007864 	.word	0x08007864

08007294 <fabsf>:
 8007294:	ee10 3a10 	vmov	r3, s0
 8007298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800729c:	ee00 3a10 	vmov	s0, r3
 80072a0:	4770      	bx	lr
	...

080072a4 <floorf>:
 80072a4:	ee10 3a10 	vmov	r3, s0
 80072a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80072ac:	3a7f      	subs	r2, #127	; 0x7f
 80072ae:	2a16      	cmp	r2, #22
 80072b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072b4:	dc2a      	bgt.n	800730c <floorf+0x68>
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	da11      	bge.n	80072de <floorf+0x3a>
 80072ba:	eddf 7a18 	vldr	s15, [pc, #96]	; 800731c <floorf+0x78>
 80072be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80072c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ca:	dd05      	ble.n	80072d8 <floorf+0x34>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da23      	bge.n	8007318 <floorf+0x74>
 80072d0:	4a13      	ldr	r2, [pc, #76]	; (8007320 <floorf+0x7c>)
 80072d2:	2900      	cmp	r1, #0
 80072d4:	bf18      	it	ne
 80072d6:	4613      	movne	r3, r2
 80072d8:	ee00 3a10 	vmov	s0, r3
 80072dc:	4770      	bx	lr
 80072de:	4911      	ldr	r1, [pc, #68]	; (8007324 <floorf+0x80>)
 80072e0:	4111      	asrs	r1, r2
 80072e2:	420b      	tst	r3, r1
 80072e4:	d0fa      	beq.n	80072dc <floorf+0x38>
 80072e6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800731c <floorf+0x78>
 80072ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80072f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f6:	ddef      	ble.n	80072d8 <floorf+0x34>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bfbe      	ittt	lt
 80072fc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007300:	fa40 f202 	asrlt.w	r2, r0, r2
 8007304:	189b      	addlt	r3, r3, r2
 8007306:	ea23 0301 	bic.w	r3, r3, r1
 800730a:	e7e5      	b.n	80072d8 <floorf+0x34>
 800730c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007310:	d3e4      	bcc.n	80072dc <floorf+0x38>
 8007312:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007316:	4770      	bx	lr
 8007318:	2300      	movs	r3, #0
 800731a:	e7dd      	b.n	80072d8 <floorf+0x34>
 800731c:	7149f2ca 	.word	0x7149f2ca
 8007320:	bf800000 	.word	0xbf800000
 8007324:	007fffff 	.word	0x007fffff

08007328 <scalbnf>:
 8007328:	ee10 3a10 	vmov	r3, s0
 800732c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007330:	d025      	beq.n	800737e <scalbnf+0x56>
 8007332:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007336:	d302      	bcc.n	800733e <scalbnf+0x16>
 8007338:	ee30 0a00 	vadd.f32	s0, s0, s0
 800733c:	4770      	bx	lr
 800733e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007342:	d122      	bne.n	800738a <scalbnf+0x62>
 8007344:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <scalbnf+0xc8>)
 8007346:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80073f4 <scalbnf+0xcc>
 800734a:	4298      	cmp	r0, r3
 800734c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007350:	db16      	blt.n	8007380 <scalbnf+0x58>
 8007352:	ee10 3a10 	vmov	r3, s0
 8007356:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800735a:	3a19      	subs	r2, #25
 800735c:	4402      	add	r2, r0
 800735e:	2afe      	cmp	r2, #254	; 0xfe
 8007360:	dd15      	ble.n	800738e <scalbnf+0x66>
 8007362:	ee10 3a10 	vmov	r3, s0
 8007366:	eddf 7a24 	vldr	s15, [pc, #144]	; 80073f8 <scalbnf+0xd0>
 800736a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80073fc <scalbnf+0xd4>
 800736e:	2b00      	cmp	r3, #0
 8007370:	eeb0 7a67 	vmov.f32	s14, s15
 8007374:	bfb8      	it	lt
 8007376:	eef0 7a66 	vmovlt.f32	s15, s13
 800737a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800737e:	4770      	bx	lr
 8007380:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007400 <scalbnf+0xd8>
 8007384:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007388:	4770      	bx	lr
 800738a:	0dd2      	lsrs	r2, r2, #23
 800738c:	e7e6      	b.n	800735c <scalbnf+0x34>
 800738e:	2a00      	cmp	r2, #0
 8007390:	dd06      	ble.n	80073a0 <scalbnf+0x78>
 8007392:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007396:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800739a:	ee00 3a10 	vmov	s0, r3
 800739e:	4770      	bx	lr
 80073a0:	f112 0f16 	cmn.w	r2, #22
 80073a4:	da1a      	bge.n	80073dc <scalbnf+0xb4>
 80073a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073aa:	4298      	cmp	r0, r3
 80073ac:	ee10 3a10 	vmov	r3, s0
 80073b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b4:	dd0a      	ble.n	80073cc <scalbnf+0xa4>
 80073b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80073f8 <scalbnf+0xd0>
 80073ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80073fc <scalbnf+0xd4>
 80073be:	eef0 7a40 	vmov.f32	s15, s0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bf18      	it	ne
 80073c6:	eeb0 0a47 	vmovne.f32	s0, s14
 80073ca:	e7db      	b.n	8007384 <scalbnf+0x5c>
 80073cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007400 <scalbnf+0xd8>
 80073d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007404 <scalbnf+0xdc>
 80073d4:	eef0 7a40 	vmov.f32	s15, s0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	e7f3      	b.n	80073c4 <scalbnf+0x9c>
 80073dc:	3219      	adds	r2, #25
 80073de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80073e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007408 <scalbnf+0xe0>
 80073ea:	ee07 3a10 	vmov	s14, r3
 80073ee:	e7c4      	b.n	800737a <scalbnf+0x52>
 80073f0:	ffff3cb0 	.word	0xffff3cb0
 80073f4:	4c000000 	.word	0x4c000000
 80073f8:	7149f2ca 	.word	0x7149f2ca
 80073fc:	f149f2ca 	.word	0xf149f2ca
 8007400:	0da24260 	.word	0x0da24260
 8007404:	8da24260 	.word	0x8da24260
 8007408:	33000000 	.word	0x33000000

0800740c <_init>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr

08007418 <_fini>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr
