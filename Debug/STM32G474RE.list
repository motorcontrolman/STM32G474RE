
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b478  0800b478  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b478  0800b478  0001b478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b480  0800b480  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b484  0800b484  0001b484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000070  0800b4f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800b4f8  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8f8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342e  00000000  00000000  0003b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00040518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dfc  00000000  00000000  00041af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3bb  00000000  00000000  0006b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115897  00000000  00000000  00087caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d546  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a8  00000000  00000000  0019d598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b010 	.word	0x0800b010

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800b010 	.word	0x0800b010

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	ed87 0a03 	vstr	s0, [r7, #12]
 8000526:	edc7 0a02 	vstr	s1, [r7, #8]
 800052a:	ed87 1a01 	vstr	s2, [r7, #4]
 800052e:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	ed93 7a00 	vldr	s14, [r3]
 8000536:	edd7 6a03 	vldr	s13, [r7, #12]
 800053a:	edd7 7a01 	vldr	s15, [r7, #4]
 800053e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 800054c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000550:	edd7 7a03 	vldr	s15, [r7, #12]
 8000554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	ee07 3a90 	vmov	s15, r3
}
 800056c:	eeb0 0a67 	vmov.f32	s0, s15
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	ed87 0a03 	vstr	s0, [r7, #12]
 8000584:	edc7 0a02 	vstr	s1, [r7, #8]
 8000588:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 800058c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	db0b      	blt.n	80005b2 <gfDivideAvoidZero+0x38>
 800059a:	ed97 7a02 	vldr	s14, [r7, #8]
 800059e:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	d502      	bpl.n	80005b2 <gfDivideAvoidZero+0x38>
		den = threshold;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e017      	b.n	80005e2 <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80005b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	d510      	bpl.n	80005e2 <gfDivideAvoidZero+0x68>
 80005c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c4:	eef1 7a67 	vneg.f32	s15, s15
 80005c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80005cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	dd05      	ble.n	80005e2 <gfDivideAvoidZero+0x68>
		den = -threshold;
 80005d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005da:	eef1 7a67 	vneg.f32	s15, s15
 80005de:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80005e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80005e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ee:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000612:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000678 <gfWrapTheta+0x70>
 8000616:	ed97 0a01 	vldr	s0, [r7, #4]
 800061a:	f009 fdab 	bl	800a174 <fmodf>
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800067c <gfWrapTheta+0x74>
 800062a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	dd08      	ble.n	8000646 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000634:	edd7 7a01 	vldr	s15, [r7, #4]
 8000638:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000678 <gfWrapTheta+0x70>
 800063c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000640:	edc7 7a01 	vstr	s15, [r7, #4]
 8000644:	e010      	b.n	8000668 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000646:	edd7 7a01 	vldr	s15, [r7, #4]
 800064a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000680 <gfWrapTheta+0x78>
 800064e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000656:	d507      	bpl.n	8000668 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000658:	edd7 7a01 	vldr	s15, [r7, #4]
 800065c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000678 <gfWrapTheta+0x70>
 8000660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000664:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	ee07 3a90 	vmov	s15, r3
}
 800066e:	eeb0 0a67 	vmov.f32	s0, s15
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40c90fdb 	.word	0x40c90fdb
 800067c:	40490fdb 	.word	0x40490fdb
 8000680:	c0490fdb 	.word	0xc0490fdb

08000684 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	ed87 0a03 	vstr	s0, [r7, #12]
 800068e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000692:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000696:	ed97 7a03 	vldr	s14, [r7, #12]
 800069a:	edd7 7a02 	vldr	s15, [r7, #8]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	dd01      	ble.n	80006ac <gUpperLowerLimit+0x28>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80006ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006bc:	d501      	bpl.n	80006c2 <gUpperLowerLimit+0x3e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
	return input;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	ee07 3a90 	vmov	s15, r3
}
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	3302      	adds	r3, #2
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f04f 0200 	mov.w	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3304      	adds	r3, #4
 8000702:	f04f 0200 	mov.w	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3308      	adds	r3, #8
 800070c:	f04f 0200 	mov.w	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800071e:	b480      	push	{r7}
 8000720:	b087      	sub	sp, #28
 8000722:	af00      	add	r7, sp, #0
 8000724:	ed87 0a03 	vstr	s0, [r7, #12]
 8000728:	edc7 0a02 	vstr	s1, [r7, #8]
 800072c:	ed87 1a01 	vstr	s2, [r7, #4]
 8000730:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 8000732:	ed97 7a02 	vldr	s14, [r7, #8]
 8000736:	edd7 7a01 	vldr	s15, [r7, #4]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800074c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000754:	edd7 7a04 	vldr	s15, [r7, #16]
 8000758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800075c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000760:	edd7 7a03 	vldr	s15, [r7, #12]
 8000764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	edc3 7a00 	vstr	s15, [r3]
}
 8000772:	bf00      	nop
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <gRateLimit>:

void gRateLimit(float r, float RateLimit, float Ts, float *y){
 800077e:	b480      	push	{r7}
 8000780:	b089      	sub	sp, #36	; 0x24
 8000782:	af00      	add	r7, sp, #0
 8000784:	ed87 0a03 	vstr	s0, [r7, #12]
 8000788:	edc7 0a02 	vstr	s1, [r7, #8]
 800078c:	ed87 1a01 	vstr	s2, [r7, #4]
 8000790:	6038      	str	r0, [r7, #0]
	// time constant tau = 1/wc
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 8000792:	ed97 7a02 	vldr	s14, [r7, #8]
 8000796:	edd7 7a01 	vldr	s15, [r7, #4]
 800079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079e:	edc7 7a06 	vstr	s15, [r7, #24]
	yn_1 = *y;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	617b      	str	r3, [r7, #20]

	if( r > yn_1 )
 80007a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80007ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b8:	dd08      	ble.n	80007cc <gRateLimit+0x4e>
		ytmp = yn_1 + dy;
 80007ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80007be:	edd7 7a06 	vldr	s15, [r7, #24]
 80007c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c6:	edc7 7a07 	vstr	s15, [r7, #28]
 80007ca:	e010      	b.n	80007ee <gRateLimit+0x70>
	else if( r < yn_1 )
 80007cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80007d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80007d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007dc:	d507      	bpl.n	80007ee <gRateLimit+0x70>
		ytmp = yn_1 - dy;
 80007de:	ed97 7a05 	vldr	s14, [r7, #20]
 80007e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80007e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ea:	edc7 7a07 	vstr	s15, [r7, #28]

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	601a      	str	r2, [r3, #0]

}
 80007f4:	bf00      	nop
 80007f6:	3724      	adds	r7, #36	; 0x24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <Sequence>:
static void slctPosModeForSensorless(uint8_t button, uint8_t* posMode);
static void slctDrvModeForSensorless(uint8_t button, uint8_t* drvMode);
static void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo);
static void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode);

void Sequence(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	float Vdc;
	//read IO signals
	gButton1 = readButton1();
 8000804:	f000 fa3a 	bl	8000c7c <readButton1>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b41      	ldr	r3, [pc, #260]	; (8000914 <Sequence+0x114>)
 800080e:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 8000810:	f000 fa9c 	bl	8000d4c <readVolume>
 8000814:	eef0 7a40 	vmov.f32	s15, s0
 8000818:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <Sequence+0x118>)
 800081a:	edc3 7a00 	vstr	s15, [r3]

	readHallSignal(gHall);
 800081e:	483f      	ldr	r0, [pc, #252]	; (800091c <Sequence+0x11c>)
 8000820:	f000 fb42 	bl	8000ea8 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 8000824:	483e      	ldr	r0, [pc, #248]	; (8000920 <Sequence+0x120>)
 8000826:	f000 fb65 	bl	8000ef4 <readElectFreqFromHallSignal>

	readCurrent(gIuvw_AD, sSensData.Iuvw);
 800082a:	493e      	ldr	r1, [pc, #248]	; (8000924 <Sequence+0x124>)
 800082c:	483e      	ldr	r0, [pc, #248]	; (8000928 <Sequence+0x128>)
 800082e:	f000 fad9 	bl	8000de4 <readCurrent>
	sSensData.Vdc = readVdc();
 8000832:	f000 fab7 	bl	8000da4 <readVdc>
 8000836:	eef0 7a40 	vmov.f32	s15, s0
 800083a:	4b3c      	ldr	r3, [pc, #240]	; (800092c <Sequence+0x12c>)
 800083c:	edc3 7a05 	vstr	s15, [r3, #20]
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc, 1.0f);;
 8000840:	4b3a      	ldr	r3, [pc, #232]	; (800092c <Sequence+0x12c>)
 8000842:	edd3 7a05 	vldr	s15, [r3, #20]
 8000846:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800084a:	eef0 0a67 	vmov.f32	s1, s15
 800084e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000852:	f7ff fe92 	bl	800057a <gfDivideAvoidZero>
 8000856:	eef0 7a40 	vmov.f32	s15, s0
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <Sequence+0x12c>)
 800085c:	edc3 7a06 	vstr	s15, [r3, #24]

	if(sInitCnt < 500){
 8000860:	4b33      	ldr	r3, [pc, #204]	; (8000930 <Sequence+0x130>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000868:	d210      	bcs.n	800088c <Sequence+0x8c>
		sInitCnt++;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <Sequence+0x130>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <Sequence+0x130>)
 8000874:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <Sequence+0x134>)
 8000878:	2202      	movs	r2, #2
 800087a:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <Sequence+0x138>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000882:	4b2e      	ldr	r3, [pc, #184]	; (800093c <Sequence+0x13c>)
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e025      	b.n	80008d8 <Sequence+0xd8>
	}
	else {
		slctPosMode(gElectFreq, &sPosMode);
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <Sequence+0x120>)
 800088e:	edd3 7a00 	vldr	s15, [r3]
 8000892:	4828      	ldr	r0, [pc, #160]	; (8000934 <Sequence+0x134>)
 8000894:	eeb0 0a67 	vmov.f32	s0, s15
 8000898:	f000 f862 	bl	8000960 <slctPosMode>
		slctDrvMode(gElectFreq, &sDrvMode);
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <Sequence+0x120>)
 800089e:	edd3 7a00 	vldr	s15, [r3]
 80008a2:	4825      	ldr	r0, [pc, #148]	; (8000938 <Sequence+0x138>)
 80008a4:	eeb0 0a67 	vmov.f32	s0, s15
 80008a8:	f000 f892 	bl	80009d0 <slctDrvMode>

		sElectAngVeloRef = 200.0f * gVolume;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <Sequence+0x118>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000940 <Sequence+0x140>
 80008b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <Sequence+0x144>)
 80008bc:	edc3 7a00 	vstr	s15, [r3]
		gRateLimit(sElectAngVeloRef, 100.0f, CARRIERCYCLE, &sElectAngVeloRefRateLimit);
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <Sequence+0x144>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <Sequence+0x13c>)
 80008c8:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8000948 <Sequence+0x148>
 80008cc:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800094c <Sequence+0x14c>
 80008d0:	eeb0 0a67 	vmov.f32	s0, s15
 80008d4:	f7ff ff53 	bl	800077e <gRateLimit>
	}

	slctElectAngleFromPosMode(sPosMode, &sElectAngle, &sElectAngVelo);
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <Sequence+0x134>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <Sequence+0x150>)
 80008de:	491d      	ldr	r1, [pc, #116]	; (8000954 <Sequence+0x154>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f8af 	bl	8000a44 <slctElectAngleFromPosMode>

	sSensData.electAngle = sElectAngle;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <Sequence+0x154>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <Sequence+0x12c>)
 80008ec:	6013      	str	r3, [r2, #0]
	sSensData.electAngVelo = sElectAngVelo;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <Sequence+0x150>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <Sequence+0x12c>)
 80008f4:	6053      	str	r3, [r2, #4]


	slctCntlFromDrvMode(sDrvMode, sDuty, sOutputMode);
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <Sequence+0x138>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <Sequence+0x158>)
 80008fc:	4917      	ldr	r1, [pc, #92]	; (800095c <Sequence+0x15c>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f93e 	bl	8000b80 <slctCntlFromDrvMode>

	writeOutputMode(sOutputMode);
 8000904:	4814      	ldr	r0, [pc, #80]	; (8000958 <Sequence+0x158>)
 8000906:	f000 fb4b 	bl	8000fa0 <writeOutputMode>
	writeDuty(sDuty);
 800090a:	4814      	ldr	r0, [pc, #80]	; (800095c <Sequence+0x15c>)
 800090c:	f000 fb8a 	bl	8001024 <writeDuty>
	//writeDuty8(sDuty);

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000093 	.word	0x20000093
 8000918:	20000098 	.word	0x20000098
 800091c:	20000090 	.word	0x20000090
 8000920:	20000094 	.word	0x20000094
 8000924:	200000d4 	.word	0x200000d4
 8000928:	2000009c 	.word	0x2000009c
 800092c:	200000cc 	.word	0x200000cc
 8000930:	200000a4 	.word	0x200000a4
 8000934:	200000a2 	.word	0x200000a2
 8000938:	200000a3 	.word	0x200000a3
 800093c:	200000b8 	.word	0x200000b8
 8000940:	43480000 	.word	0x43480000
 8000944:	200000b4 	.word	0x200000b4
 8000948:	3876b949 	.word	0x3876b949
 800094c:	42c80000 	.word	0x42c80000
 8000950:	200000b0 	.word	0x200000b0
 8000954:	200000a8 	.word	0x200000a8
 8000958:	200000bc 	.word	0x200000bc
 800095c:	200000c0 	.word	0x200000c0

08000960 <slctPosMode>:

void slctPosMode(float electFreq, uint8_t* posMode){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	ed87 0a01 	vstr	s0, [r7, #4]
 800096a:	6038      	str	r0, [r7, #0]

	*posMode = POSMODE_FREERUN;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]

	if(*posMode != POSMODE_HALL_PLL){
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d010      	beq.n	800099c <slctPosMode+0x3c>
		if (electFreq > ELECTFREQ_VALIDPLL)
 800097a:	edd7 7a01 	vldr	s15, [r7, #4]
 800097e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098a:	dd03      	ble.n	8000994 <slctPosMode+0x34>
			*posMode = POSMODE_HALL_PLL;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2203      	movs	r2, #3
 8000990:	701a      	strb	r2, [r3, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 8000992:	e017      	b.n	80009c4 <slctPosMode+0x64>
			*posMode = POSMODE_HALL;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2202      	movs	r2, #2
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	e013      	b.n	80009c4 <slctPosMode+0x64>
	else if(*posMode == POSMODE_HALL_PLL){
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d10f      	bne.n	80009c4 <slctPosMode+0x64>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 80009a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80009a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b4:	d503      	bpl.n	80009be <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2202      	movs	r2, #2
 80009ba:	701a      	strb	r2, [r3, #0]
}
 80009bc:	e002      	b.n	80009c4 <slctPosMode+0x64>
			*posMode = POSMODE_HALL_PLL;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	2203      	movs	r2, #3
 80009c2:	701a      	strb	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <slctDrvMode>:

void slctDrvMode(float electFreq, uint8_t* drvMode){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80009da:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d010      	beq.n	8000a06 <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 80009e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80009e8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000a3c <slctDrvMode+0x6c>
 80009ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f4:	dd03      	ble.n	80009fe <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	2204      	movs	r2, #4
 80009fa:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 80009fc:	e017      	b.n	8000a2e <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2202      	movs	r2, #2
 8000a02:	701a      	strb	r2, [r3, #0]
}
 8000a04:	e013      	b.n	8000a2e <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d10f      	bne.n	8000a2e <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 8000a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a12:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000a40 <slctDrvMode+0x70>
 8000a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1e:	d503      	bpl.n	8000a28 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	2202      	movs	r2, #2
 8000a24:	701a      	strb	r2, [r3, #0]
}
 8000a26:	e002      	b.n	8000a2e <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	701a      	strb	r2, [r3, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	42480000 	.word	0x42480000
 8000a40:	42200000 	.word	0x42200000

08000a44 <slctElectAngleFromPosMode>:
		*drvMode = DRVMODE_OPENLOOP_SENSORLESS;
	else
		*drvMode = DRVMODE_VECTORCONTROL;
}

void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	73fb      	strb	r3, [r7, #15]
	uint8_t flgPLL;

	switch(posMode){
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d878      	bhi.n	8000b4a <slctElectAngleFromPosMode+0x106>
 8000a58:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <slctElectAngleFromPosMode+0x1c>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000a75 	.word	0x08000a75
 8000a64:	08000a8f 	.word	0x08000a8f
 8000a68:	08000acf 	.word	0x08000acf
 8000a6c:	08000aeb 	.word	0x08000aeb
 8000a70:	08000b07 	.word	0x08000b07
	case POSMODE_STOP:
		*electAngle = 0.0f;
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0.0f;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
		sElectAngVeloRef = 0.0f;
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <slctElectAngleFromPosMode+0x120>)
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
		break;
 8000a8c:	e066      	b.n	8000b5c <slctElectAngleFromPosMode+0x118>

	case POSMODE_FREERUN:
		*electAngVelo = sElectAngVeloRefRateLimit;
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <slctElectAngleFromPosMode+0x124>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
		sElectAngleFreerun = sElectAngleFreerun + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <slctElectAngleFromPosMode+0x124>)
 8000a98:	edd3 7a00 	vldr	s15, [r3]
 8000a9c:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000b6c <slctElectAngleFromPosMode+0x128>
 8000aa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000aa4:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <slctElectAngleFromPosMode+0x12c>)
 8000aa6:	edd3 7a00 	vldr	s15, [r3]
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <slctElectAngleFromPosMode+0x12c>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]
		*electAngle = gfWrapTheta(sElectAngleFreerun);
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <slctElectAngleFromPosMode+0x12c>)
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	eeb0 0a67 	vmov.f32	s0, s15
 8000abe:	f7ff fda3 	bl	8000608 <gfWrapTheta>
 8000ac2:	eef0 7a40 	vmov.f32	s15, s0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	edc3 7a00 	vstr	s15, [r3]
		break;
 8000acc:	e046      	b.n	8000b5c <slctElectAngleFromPosMode+0x118>
	case POSMODE_HALL:
		flgPLL = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	75fb      	strb	r3, [r7, #23]
		calcElectAngle(gHall, gElectFreq, flgPLL, electAngle, electAngVelo);
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <slctElectAngleFromPosMode+0x130>)
 8000ad4:	edd3 7a00 	vldr	s15, [r3]
 8000ad8:	7df9      	ldrb	r1, [r7, #23]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae2:	4825      	ldr	r0, [pc, #148]	; (8000b78 <slctElectAngleFromPosMode+0x134>)
 8000ae4:	f000 fae0 	bl	80010a8 <calcElectAngle>
		break;
 8000ae8:	e038      	b.n	8000b5c <slctElectAngleFromPosMode+0x118>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	75fb      	strb	r3, [r7, #23]
		calcElectAngle(gHall, gElectFreq, flgPLL, electAngle, electAngVelo);
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <slctElectAngleFromPosMode+0x130>)
 8000af0:	edd3 7a00 	vldr	s15, [r3]
 8000af4:	7df9      	ldrb	r1, [r7, #23]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	eeb0 0a67 	vmov.f32	s0, s15
 8000afe:	481e      	ldr	r0, [pc, #120]	; (8000b78 <slctElectAngleFromPosMode+0x134>)
 8000b00:	f000 fad2 	bl	80010a8 <calcElectAngle>
		break;
 8000b04:	e02a      	b.n	8000b5c <slctElectAngleFromPosMode+0x118>
	case POSMODE_SENSORLESS:
		flgPLL = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	75fb      	strb	r3, [r7, #23]
		*electAngVelo = sElectAngVeloRefRateLimit;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <slctElectAngleFromPosMode+0x124>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
		sElectAngle = sElectAngle + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <slctElectAngleFromPosMode+0x124>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000b6c <slctElectAngleFromPosMode+0x128>
 8000b1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <slctElectAngleFromPosMode+0x138>)
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <slctElectAngleFromPosMode+0x138>)
 8000b2c:	edc3 7a00 	vstr	s15, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <slctElectAngleFromPosMode+0x138>)
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	eeb0 0a67 	vmov.f32	s0, s15
 8000b3a:	f7ff fd65 	bl	8000608 <gfWrapTheta>
 8000b3e:	eef0 7a40 	vmov.f32	s15, s0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	edc3 7a00 	vstr	s15, [r3]

		break;
 8000b48:	e008      	b.n	8000b5c <slctElectAngleFromPosMode+0x118>
	default:
		*electAngle = 0;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f04f 0200 	mov.w	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
		break;
 8000b5a:	bf00      	nop
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000b4 	.word	0x200000b4
 8000b68:	200000b8 	.word	0x200000b8
 8000b6c:	4684d000 	.word	0x4684d000
 8000b70:	200000ac 	.word	0x200000ac
 8000b74:	20000094 	.word	0x20000094
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	200000a8 	.word	0x200000a8

08000b80 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode){
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	b08f      	sub	sp, #60	; 0x3c
 8000b84:	af08      	add	r7, sp, #32
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]

	float Idq_ref[2];
	Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
	Idq_ref[1] = IQREFMAX * gVolume;
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <slctCntlFromDrvMode+0xec>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	617b      	str	r3, [r7, #20]

	switch(drvMode){
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d85b      	bhi.n	8000c58 <slctCntlFromDrvMode+0xd8>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <slctCntlFromDrvMode+0x28>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000c59 	.word	0x08000c59
 8000bb0:	08000bc7 	.word	0x08000bc7
 8000bb4:	08000c05 	.word	0x08000c05
 8000bb8:	08000c2f 	.word	0x08000c2f
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fd89 	bl	80006d6 <gOffDuty>
			break;
 8000bc4:	e04d      	b.n	8000c62 <slctCntlFromDrvMode+0xe2>
		case DRVMODE_OPENLOOP:
			//sVectorControlData.Vdq[1] = sSensData.Vdc * SQRT3DIV2_DIV2 * gVolume;
			OpenLoopTasks(sSensData.Vdc * SQRT3DIV2_DIV2 * gVolume, sSensData, &sVectorControlData, Duty, outputMode);
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <slctCntlFromDrvMode+0xf0>)
 8000bc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bcc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c74 <slctCntlFromDrvMode+0xf4>
 8000bd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <slctCntlFromDrvMode+0xec>)
 8000bd6:	edd3 7a00 	vldr	s15, [r3]
 8000bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <slctCntlFromDrvMode+0xf0>)
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	9205      	str	r2, [sp, #20]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	9204      	str	r2, [sp, #16]
 8000be8:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <slctCntlFromDrvMode+0xf8>)
 8000bea:	9203      	str	r2, [sp, #12]
 8000bec:	466c      	mov	r4, sp
 8000bee:	f103 0210 	add.w	r2, r3, #16
 8000bf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfe:	f000 fcff 	bl	8001600 <OpenLoopTasks>
			break;
 8000c02:	e02e      	b.n	8000c62 <slctCntlFromDrvMode+0xe2>
		case DRVMODE_OPENLOOP_SENSORLESS:
			VectorControlTasks(Idq_ref, sSensData, &sVectorControlData, Duty, outputMode);
 8000c04:	4c1a      	ldr	r4, [pc, #104]	; (8000c70 <slctCntlFromDrvMode+0xf0>)
 8000c06:	f107 0610 	add.w	r6, r7, #16
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	9306      	str	r3, [sp, #24]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <slctCntlFromDrvMode+0xf8>)
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	466d      	mov	r5, sp
 8000c18:	f104 030c 	add.w	r3, r4, #12
 8000c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c22:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c26:	4630      	mov	r0, r6
 8000c28:	f000 fc24 	bl	8001474 <VectorControlTasks>
			break;
 8000c2c:	e019      	b.n	8000c62 <slctCntlFromDrvMode+0xe2>
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(Idq_ref, sSensData, &sVectorControlData, Duty, outputMode);
 8000c2e:	4c10      	ldr	r4, [pc, #64]	; (8000c70 <slctCntlFromDrvMode+0xf0>)
 8000c30:	f107 0610 	add.w	r6, r7, #16
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	9306      	str	r3, [sp, #24]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	9305      	str	r3, [sp, #20]
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <slctCntlFromDrvMode+0xf8>)
 8000c3e:	9304      	str	r3, [sp, #16]
 8000c40:	466d      	mov	r5, sp
 8000c42:	f104 030c 	add.w	r3, r4, #12
 8000c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c4c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c50:	4630      	mov	r0, r6
 8000c52:	f000 fc0f 	bl	8001474 <VectorControlTasks>
			break;
 8000c56:	e004      	b.n	8000c62 <slctCntlFromDrvMode+0xe2>
		default :
			gOffDuty(Duty, outputMode);
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f7ff fd3b 	bl	80006d6 <gOffDuty>
	}
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000098 	.word	0x20000098
 8000c70:	200000cc 	.word	0x200000cc
 8000c74:	3f1cc471 	.word	0x3f1cc471
 8000c78:	200000e8 	.word	0x200000e8

08000c7c <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <readButton1+0x20>)
 8000c88:	f005 fd92 	bl	80067b0 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	return B1;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	48000800 	.word	0x48000800

08000ca0 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cee:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cfc:	eef1 7a67 	vneg.f32	s15, s15
 8000d00:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	d50a      	bpl.n	8000d24 <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d18:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d20:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000d24:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d28:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000d48 <readTimeInterval+0x8c>
 8000d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d30:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	ee07 3a90 	vmov	s15, r3
}
 8000d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	4d221fe8 	.word	0x4d221fe8

08000d4c <readVolume>:

float readVolume(void){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <readVolume+0x50>)
 8000d54:	885b      	ldrh	r3, [r3, #2]
 8000d56:	807b      	strh	r3, [r7, #2]

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 8000d58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d5c:	3b63      	subs	r3, #99	; 0x63
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d66:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000da0 <readVolume+0x54>
 8000d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d6e:	edc7 7a01 	vstr	s15, [r7, #4]
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 8000d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	d502      	bpl.n	8000d86 <readVolume+0x3a>
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
	return Volume;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ee07 3a90 	vmov	s15, r3
}
 8000d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	2000008c 	.word	0x2000008c
 8000da0:	398007f8 	.word	0x398007f8

08000da4 <readVdc>:

float readVdc(void){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <readVdc+0x38>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * AD2VOLTAGE;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000de0 <readVdc+0x3c>
 8000dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc2:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	ee07 3a90 	vmov	s15, r3
}
 8000dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2000008c 	.word	0x2000008c
 8000de0:	3c7cd035 	.word	0x3c7cd035

08000de4 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e00:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3302      	adds	r3, #2
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000e0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3304      	adds	r3, #4
 8000e18:	b292      	uxth	r2, r2
 8000e1a:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e28:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000e98 <readCurrent+0xb4>
 8000e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e30:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000e9c <readCurrent+0xb8>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3302      	adds	r3, #2
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ea0 <readCurrent+0xbc>
 8000e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3304      	adds	r3, #4
 8000e58:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e9c <readCurrent+0xb8>
 8000e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e60:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3304      	adds	r3, #4
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e72:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000ea4 <readCurrent+0xc0>
 8000e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e9c <readCurrent+0xb8>
 8000e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e86:	edc3 7a00 	vstr	s15, [r3]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	44ee0000 	.word	0x44ee0000
 8000e9c:	bafdbcc5 	.word	0xbafdbcc5
 8000ea0:	44efe000 	.word	0x44efe000
 8000ea4:	44ef8000 	.word	0x44ef8000

08000ea8 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f005 fc7a 	bl	80067b0 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1c5c      	adds	r4, r3, #1
 8000ec8:	2108      	movs	r1, #8
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <readHallSignal+0x48>)
 8000ecc:	f005 fc70 	bl	80067b0 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1c9c      	adds	r4, r3, #2
 8000ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <readHallSignal+0x48>)
 8000ede:	f005 fc67 	bl	80067b0 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	7023      	strb	r3, [r4, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <readElectFreqFromHallSignal+0x98>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <readElectFreqFromHallSignal+0x9c>)
 8000f02:	6013      	str	r3, [r2, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 8000f04:	f7ff fecc 	bl	8000ca0 <readInputCaptureCnt>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <readElectFreqFromHallSignal+0x98>)
 8000f0c:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <readElectFreqFromHallSignal+0x98>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <readElectFreqFromHallSignal+0x9c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d023      	beq.n	8000f62 <readElectFreqFromHallSignal+0x6e>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <readElectFreqFromHallSignal+0x98>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <readElectFreqFromHallSignal+0x9c>)
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fec9 	bl	8000cbc <readTimeInterval>
 8000f2a:	ed87 0a03 	vstr	s0, [r7, #12]
		if( timeInterval > 0.0001f)
 8000f2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f32:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f94 <readElectFreqFromHallSignal+0xa0>
 8000f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	dd0c      	ble.n	8000f5a <readElectFreqFromHallSignal+0x66>
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8000f40:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8000f98 <readElectFreqFromHallSignal+0xa4>
 8000f44:	edd7 0a03 	vldr	s1, [r7, #12]
 8000f48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f4c:	f7ff fb15 	bl	800057a <gfDivideAvoidZero>
 8000f50:	eef0 7a40 	vmov.f32	s15, s0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <readElectFreqFromHallSignal+0xa8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	801a      	strh	r2, [r3, #0]
	}
	else if(sNoInputCaptureCnt < 2000)
		sNoInputCaptureCnt ++;
	else
		*electFreq = 0;
}
 8000f60:	e00f      	b.n	8000f82 <readElectFreqFromHallSignal+0x8e>
	else if(sNoInputCaptureCnt < 2000)
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <readElectFreqFromHallSignal+0xa8>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f6a:	d206      	bcs.n	8000f7a <readElectFreqFromHallSignal+0x86>
		sNoInputCaptureCnt ++;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <readElectFreqFromHallSignal+0xa8>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <readElectFreqFromHallSignal+0xa8>)
 8000f76:	801a      	strh	r2, [r3, #0]
}
 8000f78:	e003      	b.n	8000f82 <readElectFreqFromHallSignal+0x8e>
		*electFreq = 0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000104 	.word	0x20000104
 8000f90:	20000108 	.word	0x20000108
 8000f94:	38d1b717 	.word	0x38d1b717
 8000f98:	31ca1db9 	.word	0x31ca1db9
 8000f9c:	20000100 	.word	0x20000100

08000fa0 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f993 3000 	ldrsb.w	r3, [r3]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb8:	4819      	ldr	r0, [pc, #100]	; (8001020 <writeOutputMode+0x80>)
 8000fba:	f005 fc11 	bl	80067e0 <HAL_GPIO_WritePin>
 8000fbe:	e005      	b.n	8000fcc <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4816      	ldr	r0, [pc, #88]	; (8001020 <writeOutputMode+0x80>)
 8000fc8:	f005 fc0a 	bl	80067e0 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d106      	bne.n	8000fe6 <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <writeOutputMode+0x80>)
 8000fe0:	f005 fbfe 	bl	80067e0 <HAL_GPIO_WritePin>
 8000fe4:	e005      	b.n	8000ff2 <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <writeOutputMode+0x80>)
 8000fee:	f005 fbf7 	bl	80067e0 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <writeOutputMode+0x80>)
 8001006:	f005 fbeb 	bl	80067e0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 800100a:	e005      	b.n	8001018 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <writeOutputMode+0x80>)
 8001014:	f005 fbe4 	bl	80067e0 <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	48000800 	.word	0x48000800

08001024 <writeDuty>:

void writeDuty(float* Duty){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	ed93 7a00 	vldr	s14, [r3]
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <writeDuty+0x80>)
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <writeDuty+0x80>)
 8001044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001048:	ee17 2a90 	vmov	r2, s15
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3304      	adds	r3, #4
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <writeDuty+0x80>)
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <writeDuty+0x80>)
 8001068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106c:	ee17 2a90 	vmov	r2, s15
 8001070:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3308      	adds	r3, #8
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <writeDuty+0x80>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <writeDuty+0x80>)
 800108c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001090:	ee17 2a90 	vmov	r2, s15
 8001094:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40012c00 	.word	0x40012c00

080010a8 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6178      	str	r0, [r7, #20]
 80010b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	73fb      	strb	r3, [r7, #15]
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80010bc:	4b76      	ldr	r3, [pc, #472]	; (8001298 <calcElectAngle+0x1f0>)
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 80010ce:	ed9f 1a73 	vldr	s2, [pc, #460]	; 800129c <calcElectAngle+0x1f4>
 80010d2:	eddf 0a73 	vldr	s1, [pc, #460]	; 80012a0 <calcElectAngle+0x1f8>
 80010d6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80010da:	f7ff fad3 	bl	8000684 <gUpperLowerLimit>
 80010de:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80010e2:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <calcElectAngle+0x1f0>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80012a4 <calcElectAngle+0x1fc>
 80010ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80010f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001100:	edc7 7a08 	vstr	s15, [r7, #32]
	Kp_PLL = wc_PLL;
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	61fb      	str	r3, [r7, #28]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001108:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800110c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80012a8 <calcElectAngle+0x200>
 8001110:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001114:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001124:	edc7 7a06 	vstr	s15, [r7, #24]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8001128:	4b60      	ldr	r3, [pc, #384]	; (80012ac <calcElectAngle+0x204>)
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4b60      	ldr	r3, [pc, #384]	; (80012b0 <calcElectAngle+0x208>)
 800112e:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8001130:	6978      	ldr	r0, [r7, #20]
 8001132:	f000 f8d3 	bl	80012dc <calcVoltageMode>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <calcElectAngle+0x204>)
 800113c:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <calcElectAngle+0x20c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a5d      	ldr	r2, [pc, #372]	; (80012b8 <calcElectAngle+0x210>)
 8001144:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <calcElectAngle+0x208>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4a58      	ldr	r2, [pc, #352]	; (80012ac <calcElectAngle+0x204>)
 800114c:	7811      	ldrb	r1, [r2, #0]
 800114e:	4a5b      	ldr	r2, [pc, #364]	; (80012bc <calcElectAngle+0x214>)
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f909 	bl	8001368 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8001156:	4b55      	ldr	r3, [pc, #340]	; (80012ac <calcElectAngle+0x204>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4a58      	ldr	r2, [pc, #352]	; (80012bc <calcElectAngle+0x214>)
 800115c:	f992 2000 	ldrsb.w	r2, [r2]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f92c 	bl	80013c0 <calcElectAngleFromVoltageMode>
 8001168:	eef0 7a40 	vmov.f32	s15, s0
 800116c:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <calcElectAngle+0x20c>)
 800116e:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8001172:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <calcElectAngle+0x20c>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	f7ff fa44 	bl	8000608 <gfWrapTheta>
 8001180:	eef0 7a40 	vmov.f32	s15, s0
 8001184:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <calcElectAngle+0x20c>)
 8001186:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 800118a:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <calcElectAngle+0x218>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <calcElectAngle+0x21c>)
 8001190:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 8001192:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <calcElectAngle+0x218>)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d163      	bne.n	8001266 <calcElectAngle+0x1be>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <calcElectAngle+0x21c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d110      	bne.n	80011c8 <calcElectAngle+0x120>
			sElectAngVeloEstimate = electFreq * TWOPI;
 80011a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011aa:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80012c8 <calcElectAngle+0x220>
 80011ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <calcElectAngle+0x1f0>)
 80011b4:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <calcElectAngle+0x1f0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a43      	ldr	r2, [pc, #268]	; (80012cc <calcElectAngle+0x224>)
 80011be:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <calcElectAngle+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a42      	ldr	r2, [pc, #264]	; (80012d0 <calcElectAngle+0x228>)
 80011c6:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <calcElectAngle+0x1f0>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eddf 6a41 	vldr	s13, [pc, #260]	; 80012d4 <calcElectAngle+0x22c>
 80011d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011d6:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <calcElectAngle+0x228>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <calcElectAngle+0x228>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <calcElectAngle+0x228>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f7ff fa0a 	bl	8000608 <gfWrapTheta>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <calcElectAngle+0x228>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]

		if( sElectAngleActual != sElectAngleActual_pre){
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <calcElectAngle+0x20c>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <calcElectAngle+0x210>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	eeb4 7a67 	vcmp.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d035      	beq.n	8001280 <calcElectAngle+0x1d8>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <calcElectAngle+0x20c>)
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <calcElectAngle+0x228>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <calcElectAngle+0x230>)
 8001226:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <calcElectAngle+0x230>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eeb0 0a67 	vmov.f32	s0, s15
 8001234:	f7ff f9e8 	bl	8000608 <gfWrapTheta>
 8001238:	eef0 7a40 	vmov.f32	s15, s0
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <calcElectAngle+0x230>)
 800123e:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <calcElectAngle+0x230>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <calcElectAngle+0x224>)
 800124a:	ed97 1a06 	vldr	s2, [r7, #24]
 800124e:	edd7 0a07 	vldr	s1, [r7, #28]
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	f7ff f961 	bl	800051c <cfPhaseLockedLoop>
 800125a:	eef0 7a40 	vmov.f32	s15, s0
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <calcElectAngle+0x1f0>)
 8001260:	edc3 7a00 	vstr	s15, [r3]
 8001264:	e00c      	b.n	8001280 <calcElectAngle+0x1d8>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <calcElectAngle+0x20c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <calcElectAngle+0x228>)
 800126c:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 800126e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001272:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012c8 <calcElectAngle+0x220>
 8001276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <calcElectAngle+0x1f0>)
 800127c:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <calcElectAngle+0x228>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <calcElectAngle+0x1f0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]


}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000124 	.word	0x20000124
 800129c:	00000000 	.word	0x00000000
 80012a0:	43fa0000 	.word	0x43fa0000
 80012a4:	3e22f983 	.word	0x3e22f983
 80012a8:	3e4ccccd 	.word	0x3e4ccccd
 80012ac:	2000010c 	.word	0x2000010c
 80012b0:	2000010d 	.word	0x2000010d
 80012b4:	20000114 	.word	0x20000114
 80012b8:	20000118 	.word	0x20000118
 80012bc:	2000010e 	.word	0x2000010e
 80012c0:	2000010f 	.word	0x2000010f
 80012c4:	20000110 	.word	0x20000110
 80012c8:	40c90fdb 	.word	0x40c90fdb
 80012cc:	20000120 	.word	0x20000120
 80012d0:	2000011c 	.word	0x2000011c
 80012d4:	4684d000 	.word	0x4684d000
 80012d8:	20000128 	.word	0x20000128

080012dc <calcVoltageMode>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

//static uint8_t calcVoltageMode(uint8_t* Hall){
uint8_t calcVoltageMode(uint8_t* Hall){
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	uint8_t hallInput;
	uint8_t voltageMode = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3302      	adds	r3, #2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	3b01      	subs	r3, #1
 800130c:	2b05      	cmp	r3, #5
 800130e:	d821      	bhi.n	8001354 <calcVoltageMode+0x78>
 8001310:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <calcVoltageMode+0x3c>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	0800134f 	.word	0x0800134f
 800131c:	08001337 	.word	0x08001337
 8001320:	08001331 	.word	0x08001331
 8001324:	08001343 	.word	0x08001343
 8001328:	08001349 	.word	0x08001349
 800132c:	0800133d 	.word	0x0800133d
	  case 3:
		voltageMode = 3;
 8001330:	2303      	movs	r3, #3
 8001332:	73fb      	strb	r3, [r7, #15]
		break;
 8001334:	e011      	b.n	800135a <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 8001336:	2304      	movs	r3, #4
 8001338:	73fb      	strb	r3, [r7, #15]
		break;
 800133a:	e00e      	b.n	800135a <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 800133c:	2305      	movs	r3, #5
 800133e:	73fb      	strb	r3, [r7, #15]
		break;
 8001340:	e00b      	b.n	800135a <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 8001342:	2306      	movs	r3, #6
 8001344:	73fb      	strb	r3, [r7, #15]
		break;
 8001346:	e008      	b.n	800135a <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
		break;
 800134c:	e005      	b.n	800135a <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	73fb      	strb	r3, [r7, #15]
		break;
 8001352:	e002      	b.n	800135a <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
	  break;
 8001358:	bf00      	nop
	}
	return voltageMode;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <calcRotDirFromVoltageMode>:

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	603a      	str	r2, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	460b      	mov	r3, r1
 8001376:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8001378:	79ba      	ldrb	r2, [r7, #6]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	2b01      	cmp	r3, #1
 8001388:	dd04      	ble.n	8001394 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3b06      	subs	r3, #6
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e008      	b.n	80013a6 <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	da03      	bge.n	80013a6 <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3306      	adds	r3, #6
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	701a      	strb	r2, [r3, #0]

}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	460a      	mov	r2, r1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d822      	bhi.n	800141e <calcElectAngleFromVoltageMode+0x5e>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <calcElectAngleFromVoltageMode+0x20>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001413 	.word	0x08001413
 80013e4:	08001419 	.word	0x08001419
 80013e8:	080013f9 	.word	0x080013f9
 80013ec:	08001401 	.word	0x08001401
 80013f0:	08001407 	.word	0x08001407
 80013f4:	0800140d 	.word	0x0800140d
		  case 3:
			  electAngle_Center = 0.0f;
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
			break;
 80013fe:	e012      	b.n	8001426 <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <calcElectAngleFromVoltageMode+0x9c>)
 8001402:	60fb      	str	r3, [r7, #12]
			break;
 8001404:	e00f      	b.n	8001426 <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <calcElectAngleFromVoltageMode+0xa0>)
 8001408:	60fb      	str	r3, [r7, #12]
			break;
 800140a:	e00c      	b.n	8001426 <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <calcElectAngleFromVoltageMode+0xa4>)
 800140e:	60fb      	str	r3, [r7, #12]
			break;
 8001410:	e009      	b.n	8001426 <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <calcElectAngleFromVoltageMode+0xa8>)
 8001414:	60fb      	str	r3, [r7, #12]
			break;
 8001416:	e006      	b.n	8001426 <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <calcElectAngleFromVoltageMode+0xac>)
 800141a:	60fb      	str	r3, [r7, #12]
			break;
 800141c:	e003      	b.n	8001426 <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
		  break;
 8001424:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8001426:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001432:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001470 <calcElectAngleFromVoltageMode+0xb0>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	ed97 7a03 	vldr	s14, [r7, #12]
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	ee07 3a90 	vmov	s15, r3
}
 800144c:	eeb0 0a67 	vmov.f32	s0, s15
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	3f860a92 	.word	0x3f860a92
 8001460:	40060a92 	.word	0x40060a92
 8001464:	40490fdb 	.word	0x40490fdb
 8001468:	c0060a92 	.word	0xc0060a92
 800146c:	bf860a92 	.word	0xbf860a92
 8001470:	3f060a92 	.word	0x3f060a92

08001474 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Vamp);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo, float* Egd);
static inline void calcElectAngleEstimate(uint8_t flgPLL, float electAngle, float electAngVelo, float *electAngleEstimate, float *electAngVeloEstimate);

void VectorControlTasks(float *Idq_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001474:	b084      	sub	sp, #16
 8001476:	b590      	push	{r4, r7, lr}
 8001478:	b08b      	sub	sp, #44	; 0x2c
 800147a:	af06      	add	r7, sp, #24
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001482:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800148c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800148e:	3301      	adds	r3, #1
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001496:	3302      	adds	r3, #2
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]

	//calcElectAngleEstimate(flgPLL, electAngle, electAngVelo, &sElectAngleEstimate, &sElectAngVeloEstimate);

	//theta = sElectAngleEstimate;
	//omega = sElectAngVeloEstimate;
	theta = sensData.electAngle;
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	60fb      	str	r3, [r7, #12]
	omega = sensData.electAngVelo;
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	60bb      	str	r3, [r7, #8]


	uvw2ab(sensData.Iuvw, sIab);
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	3308      	adds	r3, #8
 80014aa:	4948      	ldr	r1, [pc, #288]	; (80015cc <VectorControlTasks+0x158>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f917 	bl	80016e0 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 80014b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b8:	4619      	mov	r1, r3
 80014ba:	4844      	ldr	r0, [pc, #272]	; (80015cc <VectorControlTasks+0x158>)
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f000 f9b0 	bl	8001824 <ab2dq>

	gLPF(Idq_ref[1], 62.8f, CARRIERCYCLE, &sIq_ref_LPF);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	4840      	ldr	r0, [pc, #256]	; (80015d0 <VectorControlTasks+0x15c>)
 80014ce:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80015d4 <VectorControlTasks+0x160>
 80014d2:	eddf 0a41 	vldr	s1, [pc, #260]	; 80015d8 <VectorControlTasks+0x164>
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	f7ff f920 	bl	800071e <gLPF>
	Idq_ref[1] = sIq_ref_LPF; // zanteisyori
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	4a3b      	ldr	r2, [pc, #236]	; (80015d0 <VectorControlTasks+0x15c>)
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	601a      	str	r2, [r3, #0]
	CurrentFbControl(Idq_ref, sensData, vectorControlData, &sVamp);
 80014e8:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <VectorControlTasks+0x168>)
 80014ea:	9305      	str	r3, [sp, #20]
 80014ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014ee:	9304      	str	r3, [sp, #16]
 80014f0:	466c      	mov	r4, sp
 80014f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fb54 	bl	8001bb0 <CurrentFbControl>
	sMod = calcModFromVamp(sVamp, sensData.twoDivVdc);
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <VectorControlTasks+0x168>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001512:	eef0 0a47 	vmov.f32	s1, s14
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f000 f9ed 	bl	80018f8 <calcModFromVamp>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
 8001522:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <VectorControlTasks+0x16c>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001528:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800152c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152e:	3308      	adds	r3, #8
 8001530:	492c      	ldr	r1, [pc, #176]	; (80015e4 <VectorControlTasks+0x170>)
 8001532:	4618      	mov	r0, r3
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f000 f9fe 	bl	8001938 <dq2ab>
	ab2uvw(sVab, sVuvw);
 800153c:	492a      	ldr	r1, [pc, #168]	; (80015e8 <VectorControlTasks+0x174>)
 800153e:	4829      	ldr	r0, [pc, #164]	; (80015e4 <VectorControlTasks+0x170>)
 8001540:	f000 f92e 	bl	80017a0 <ab2uvw>

	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8001544:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001548:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800154a:	4827      	ldr	r0, [pc, #156]	; (80015e8 <VectorControlTasks+0x174>)
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	f000 fa32 	bl	80019b8 <Vuvw2Duty>


	sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80015ec <VectorControlTasks+0x178>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <VectorControlTasks+0x17c>)
 8001564:	edc3 7a00 	vstr	s15, [r3]
	sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3304      	adds	r3, #4
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80015ec <VectorControlTasks+0x178>
 8001574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <VectorControlTasks+0x17c>)
 800157a:	edc3 7a01 	vstr	s15, [r3, #4]
	sIdq_1000[0] = vectorControlData->Idq[0] * 1000.0f;
 800157e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80015ec <VectorControlTasks+0x178>
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <VectorControlTasks+0x180>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = vectorControlData->Idq[1] * 1000.0f;
 8001592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001594:	edd3 7a01 	vldr	s15, [r3, #4]
 8001598:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80015ec <VectorControlTasks+0x178>
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <VectorControlTasks+0x180>)
 80015a2:	edc3 7a01 	vstr	s15, [r3, #4]

	gLPF(vectorControlData->Idq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 80015a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ac:	4812      	ldr	r0, [pc, #72]	; (80015f8 <VectorControlTasks+0x184>)
 80015ae:	ed9f 1a09 	vldr	s2, [pc, #36]	; 80015d4 <VectorControlTasks+0x160>
 80015b2:	eddf 0a12 	vldr	s1, [pc, #72]	; 80015fc <VectorControlTasks+0x188>
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	f7ff f8b0 	bl	800071e <gLPF>

}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015c8:	b004      	add	sp, #16
 80015ca:	4770      	bx	lr
 80015cc:	2000012c 	.word	0x2000012c
 80015d0:	20000144 	.word	0x20000144
 80015d4:	3876b949 	.word	0x3876b949
 80015d8:	427b3333 	.word	0x427b3333
 80015dc:	2000016c 	.word	0x2000016c
 80015e0:	20000170 	.word	0x20000170
 80015e4:	20000158 	.word	0x20000158
 80015e8:	20000160 	.word	0x20000160
 80015ec:	447a0000 	.word	0x447a0000
 80015f0:	20000148 	.word	0x20000148
 80015f4:	20000150 	.word	0x20000150
 80015f8:	20000140 	.word	0x20000140
 80015fc:	42fb3333 	.word	0x42fb3333

08001600 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001600:	b084      	sub	sp, #16
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	ed87 0a01 	vstr	s0, [r7, #4]
 800160c:	f107 0c10 	add.w	ip, r7, #16
 8001610:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	3301      	adds	r3, #1
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001624:	3302      	adds	r3, #2
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	4926      	ldr	r1, [pc, #152]	; (80016c8 <OpenLoopTasks+0xc8>)
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f855 	bl	80016e0 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001636:	edd7 7a04 	vldr	s15, [r7, #16]
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	4619      	mov	r1, r3
 800163e:	4822      	ldr	r0, [pc, #136]	; (80016c8 <OpenLoopTasks+0xc8>)
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	f000 f8ee 	bl	8001824 <ab2dq>
	vectorControlData->Vdq[0] = 0.0f;
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
	vectorControlData->Vdq[1] = VamRef;
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	60da      	str	r2, [r3, #12]
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	611a      	str	r2, [r3, #16]
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	615a      	str	r2, [r3, #20]

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001666:	edd7 7a04 	vldr	s15, [r7, #16]
 800166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166c:	3308      	adds	r3, #8
 800166e:	4917      	ldr	r1, [pc, #92]	; (80016cc <OpenLoopTasks+0xcc>)
 8001670:	4618      	mov	r0, r3
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	f000 f95f 	bl	8001938 <dq2ab>
	ab2uvw(sVab, sVuvw);
 800167a:	4915      	ldr	r1, [pc, #84]	; (80016d0 <OpenLoopTasks+0xd0>)
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <OpenLoopTasks+0xcc>)
 800167e:	f000 f88f 	bl	80017a0 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8001682:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001688:	4811      	ldr	r0, [pc, #68]	; (80016d0 <OpenLoopTasks+0xd0>)
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	f000 f993 	bl	80019b8 <Vuvw2Duty>

	sIdq_1000[0] = sIdq[0] * 1000.0f;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <OpenLoopTasks+0xd4>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80016d8 <OpenLoopTasks+0xd8>
 800169c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <OpenLoopTasks+0xdc>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <OpenLoopTasks+0xd4>)
 80016a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80016d8 <OpenLoopTasks+0xd8>
 80016b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <OpenLoopTasks+0xdc>)
 80016b6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016c4:	b004      	add	sp, #16
 80016c6:	4770      	bx	lr
 80016c8:	2000012c 	.word	0x2000012c
 80016cc:	20000158 	.word	0x20000158
 80016d0:	20000160 	.word	0x20000160
 80016d4:	20000138 	.word	0x20000138
 80016d8:	447a0000 	.word	0x447a0000
 80016dc:	20000150 	.word	0x20000150

080016e0 <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	ed93 7a00 	vldr	s14, [r3]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3304      	adds	r3, #4
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3308      	adds	r3, #8
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001710:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001794 <uvw2ab+0xb4>
 800171c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3304      	adds	r3, #4
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001798 <uvw2ab+0xb8>
 8001732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3308      	adds	r3, #8
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001798 <uvw2ab+0xb8>
 8001742:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3304      	adds	r3, #4
 800174e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001794 <uvw2ab+0xb4>
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	ed93 7a00 	vldr	s14, [r3]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3304      	adds	r3, #4
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3308      	adds	r3, #8
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	3308      	adds	r3, #8
 800177c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800179c <uvw2ab+0xbc>
 8001780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001784:	edc3 7a00 	vstr	s15, [r3]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	3f5105ec 	.word	0x3f5105ec
 8001798:	3f5db3d7 	.word	0x3f5db3d7
 800179c:	3f13cd3a 	.word	0x3f13cd3a

080017a0 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800181c <ab2uvw+0x7c>
 80017b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80017c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001820 <ab2uvw+0x80>
 80017d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3304      	adds	r3, #4
 80017e4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800181c <ab2uvw+0x7c>
 80017e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ec:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eeb1 7a67 	vneg.f32	s14, s15
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3304      	adds	r3, #4
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3308      	adds	r3, #8
 8001806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180a:	edc3 7a00 	vstr	s15, [r3]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	3f5105ec 	.word	0x3f5105ec
 8001820:	3f5db3d7 	.word	0x3f5db3d7

08001824 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	ed87 0a03 	vstr	s0, [r7, #12]
 800182e:	60b8      	str	r0, [r7, #8]
 8001830:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001832:	ed97 0a03 	vldr	s0, [r7, #12]
 8001836:	f008 fc55 	bl	800a0e4 <sinf>
 800183a:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 800183e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001842:	f008 fc0b 	bl	800a05c <cosf>
 8001846:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	edd7 7a04 	vldr	s15, [r7, #16]
 8001854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3304      	adds	r3, #4
 800185c:	edd3 6a00 	vldr	s13, [r3]
 8001860:	edd7 7a05 	vldr	s15, [r7, #20]
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	eeb1 7a67 	vneg.f32	s14, s15
 800187c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3304      	adds	r3, #4
 8001888:	edd3 6a00 	vldr	s13, [r3]
 800188c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3304      	adds	r3, #4
 8001898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189c:	edc3 7a00 	vstr	s15, [r3]
}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	edd3 6a00 	vldr	s13, [r3]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d8:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 80018dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018e0:	f008 fc68 	bl	800a1b4 <sqrtf>
 80018e4:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	ee07 3a90 	vmov	s15, r3
}
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001902:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001906:	ed97 7a01 	vldr	s14, [r7, #4]
 800190a:	edd7 7a00 	vldr	s15, [r7]
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001934 <calcModFromVamp+0x3c>
 8001916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191a:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	ee07 3a90 	vmov	s15, r3
}
 8001924:	eeb0 0a67 	vmov.f32	s0, s15
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	3f5105ec 	.word	0x3f5105ec

08001938 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001942:	60b8      	str	r0, [r7, #8]
 8001944:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001946:	ed97 0a03 	vldr	s0, [r7, #12]
 800194a:	f008 fbcb 	bl	800a0e4 <sinf>
 800194e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001952:	ed97 0a03 	vldr	s0, [r7, #12]
 8001956:	f008 fb81 	bl	800a05c <cosf>
 800195a:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	ed93 7a00 	vldr	s14, [r3]
 8001964:	edd7 7a04 	vldr	s15, [r7, #16]
 8001968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3304      	adds	r3, #4
 8001970:	edd3 6a00 	vldr	s13, [r3]
 8001974:	edd7 7a05 	vldr	s15, [r7, #20]
 8001978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3304      	adds	r3, #4
 8001998:	edd3 6a00 	vldr	s13, [r3]
 800199c:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3304      	adds	r3, #4
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	edc3 7a00 	vstr	s15, [r3]
}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	ed87 0a03 	vstr	s0, [r7, #12]
 80019c2:	60b8      	str	r0, [r7, #8]
 80019c4:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3304      	adds	r3, #4
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d502      	bpl.n	80019e8 <Vuvw2Duty+0x30>
		max = Vuvw[1];
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3308      	adds	r3, #8
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80019f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	d502      	bpl.n	8001a04 <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	dd02      	ble.n	8001a26 <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3308      	adds	r3, #8
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	dd02      	ble.n	8001a42 <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	61bb      	str	r3, [r7, #24]

	vo = (max + min) * 0.5f;
 8001a42:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a56:	edc7 7a05 	vstr	s15, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	ed93 7a00 	vldr	s14, [r3]
 8001a60:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3304      	adds	r3, #4
 8001a72:	ed93 7a00 	vldr	s14, [r3]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3308      	adds	r3, #8
 8001a8a:	ed93 7a00 	vldr	s14, [r3]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3308      	adds	r3, #8
 8001a92:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9a:	edc3 7a00 	vstr	s15, [r3]



	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	ed93 7a00 	vldr	s14, [r3]
 8001aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3308      	adds	r3, #8
 8001ace:	ed93 7a00 	vldr	s14, [r3]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3308      	adds	r3, #8
 8001ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ade:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001aec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	f7fe fdc6 	bl	8000684 <gUpperLowerLimit>
 8001af8:	eef0 7a40 	vmov.f32	s15, s0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3304      	adds	r3, #4
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	1d1c      	adds	r4, r3, #4
 8001b0e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001b12:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	f7fe fdb3 	bl	8000684 <gUpperLowerLimit>
 8001b1e:	eef0 7a40 	vmov.f32	s15, s0
 8001b22:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3308      	adds	r3, #8
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f103 0408 	add.w	r4, r3, #8
 8001b34:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001b38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	f7fe fda0 	bl	8000684 <gUpperLowerLimit>
 8001b44:	eef0 7a40 	vmov.f32	s15, s0
 8001b48:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b84:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba4:	edc3 7a00 	vstr	s15, [r3]

}
 8001ba8:	bf00      	nop
 8001baa:	3724      	adds	r7, #36	; 0x24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <CurrentFbControl>:
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);

}


static void CurrentFbControl(float *Igd_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Vamp){
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b08a      	sub	sp, #40	; 0x28
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	float Kid;
	float VampLimit;
	float Vphase;
	float wc;

	wc = 10.0f * TWOPI;
 8001bc2:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <CurrentFbControl+0x18c>)
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24

	Kp = La * wc;
 8001bc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bca:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001d40 <CurrentFbControl+0x190>
 8001bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd2:	edc7 7a08 	vstr	s15, [r7, #32]
	Kig = Ra * wc * CARRIERCYCLE;
 8001bd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bda:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001d44 <CurrentFbControl+0x194>
 8001bde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001be2:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001d48 <CurrentFbControl+0x198>
 8001be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bea:	edc7 7a07 	vstr	s15, [r7, #28]
	Kid = Kig;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	61bb      	str	r3, [r7, #24]

	Ierr[0] = Igd_ref[0] - vectorControlData->Idq[0];
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	ed93 7a00 	vldr	s14, [r3]
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c02:	edc7 7a02 	vstr	s15, [r7, #8]
	Ierr[1] = Igd_ref[1] - vectorControlData->Idq[1];
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	ed93 7a00 	vldr	s14, [r3]
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c10:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c18:	edc7 7a03 	vstr	s15, [r7, #12]

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c22:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c26:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c34:	edc3 7a04 	vstr	s15, [r3, #16]
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c3e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c50:	edc3 7a05 	vstr	s15, [r3, #20]

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0];
 8001c54:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c58:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c62:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6c:	edc3 7a02 	vstr	s15, [r3, #8]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1];// + Ke * electAngVelo;// + Vgd[1] + Kid * Ierr[1] + ;
 8001c70:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c74:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c88:	edc3 7a03 	vstr	s15, [r3, #12]

	Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8001c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c94:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c98:	eef0 0a47 	vmov.f32	s1, s14
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	f008 fa66 	bl	800a170 <atan2f>
 8001ca4:	ed87 0a05 	vstr	s0, [r7, #20]

	*Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001caa:	3308      	adds	r3, #8
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fdfb 	bl	80018a8 <calcAmpFromVect>
 8001cb2:	eef0 7a40 	vmov.f32	s15, s0
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * 1.15f;
 8001cbc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cc0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001d4c <CurrentFbControl+0x19c>
 8001cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d50 <CurrentFbControl+0x1a0>
 8001ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd0:	edc7 7a04 	vstr	s15, [r7, #16]
	if( *Vamp > VampLimit ){
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	d400      	bmi.n	8001cea <CurrentFbControl+0x13a>
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
		vectorControlData->Vdq[1] = VampLimit * sinf(Vphase);
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];// -  Ke * sensData.electAngVelo;

	}
}
 8001ce8:	e021      	b.n	8001d2e <CurrentFbControl+0x17e>
		vectorControlData->Vdq[0] = VampLimit * cosf(Vphase);
 8001cea:	ed97 0a05 	vldr	s0, [r7, #20]
 8001cee:	f008 f9b5 	bl	800a05c <cosf>
 8001cf2:	eeb0 7a40 	vmov.f32	s14, s0
 8001cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d00:	edc3 7a02 	vstr	s15, [r3, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
 8001d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0a:	611a      	str	r2, [r3, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(Vphase);
 8001d0c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d10:	f008 f9e8 	bl	800a0e4 <sinf>
 8001d14:	eeb0 7a40 	vmov.f32	s14, s0
 8001d18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d22:	edc3 7a03 	vstr	s15, [r3, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];// -  Ke * sensData.electAngVelo;
 8001d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2c:	615a      	str	r2, [r3, #20]
}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d38:	b004      	add	sp, #16
 8001d3a:	4770      	bx	lr
 8001d3c:	427b53d2 	.word	0x427b53d2
 8001d40:	39fba882 	.word	0x39fba882
 8001d44:	3fd71dc9 	.word	0x3fd71dc9
 8001d48:	4684d000 	.word	0x4684d000
 8001d4c:	3f1cc471 	.word	0x3f1cc471
 8001d50:	3f933333 	.word	0x3f933333

08001d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5a:	f000 ffcc 	bl	8002cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5e:	f000 f8a3 	bl	8001ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d62:	f000 fbd9 	bl	8002518 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d66:	f000 fba5 	bl	80024b4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001d6a:	f000 f9ff 	bl	800216c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001d6e:	f000 f8e7 	bl	8001f40 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d72:	f000 fa45 	bl	8002200 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d76:	f000 fafd 	bl	8002374 <MX_TIM2_Init>
  MX_DAC1_Init();
 8001d7a:	f000 f9bd 	bl	80020f8 <MX_DAC1_Init>
  MX_TIM7_Init();
 8001d7e:	f000 fb63 	bl	8002448 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001d82:	4841      	ldr	r0, [pc, #260]	; (8001e88 <main+0x134>)
 8001d84:	f005 fe80 	bl	8007a88 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001d88:	4840      	ldr	r0, [pc, #256]	; (8001e8c <main+0x138>)
 8001d8a:	f002 fe5d 	bl	8004a48 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d94:	483e      	ldr	r0, [pc, #248]	; (8001e90 <main+0x13c>)
 8001d96:	f004 fd23 	bl	80067e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da0:	483b      	ldr	r0, [pc, #236]	; (8001e90 <main+0x13c>)
 8001da2:	f004 fd1d 	bl	80067e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dac:	4838      	ldr	r0, [pc, #224]	; (8001e90 <main+0x13c>)
 8001dae:	f004 fd17 	bl	80067e0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001db2:	2100      	movs	r1, #0
 8001db4:	4834      	ldr	r0, [pc, #208]	; (8001e88 <main+0x134>)
 8001db6:	f005 ff37 	bl	8007c28 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4832      	ldr	r0, [pc, #200]	; (8001e88 <main+0x134>)
 8001dbe:	f007 f8e7 	bl	8008f90 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4830      	ldr	r0, [pc, #192]	; (8001e88 <main+0x134>)
 8001dc6:	f005 ff2f 	bl	8007c28 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001dca:	2104      	movs	r1, #4
 8001dcc:	482e      	ldr	r0, [pc, #184]	; (8001e88 <main+0x134>)
 8001dce:	f007 f8df 	bl	8008f90 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001dd2:	2108      	movs	r1, #8
 8001dd4:	482c      	ldr	r0, [pc, #176]	; (8001e88 <main+0x134>)
 8001dd6:	f005 ff27 	bl	8007c28 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001dda:	2108      	movs	r1, #8
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <main+0x134>)
 8001dde:	f007 f8d7 	bl	8008f90 <HAL_TIMEx_PWMN_Start>

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <main+0x140>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <main+0x140>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <main+0x140>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <main+0x140>)
 8001df6:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <main+0x140>)
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <main+0x140>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <main+0x140>)
 8001e02:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e06:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <main+0x140>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <main+0x140>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <main+0x140>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <main+0x140>)
 8001e1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e1e:	6013      	str	r3, [r2, #0]

  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <main+0x140>)
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <main+0x140>)
 8001e26:	3b28      	subs	r3, #40	; 0x28
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8001e2a:	481b      	ldr	r0, [pc, #108]	; (8001e98 <main+0x144>)
 8001e2c:	f005 fe2c 	bl	8007a88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001e30:	2100      	movs	r1, #0
 8001e32:	4819      	ldr	r0, [pc, #100]	; (8001e98 <main+0x144>)
 8001e34:	f006 f862 	bl	8007efc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4817      	ldr	r0, [pc, #92]	; (8001e98 <main+0x144>)
 8001e3c:	f006 f85e 	bl	8007efc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001e40:	2108      	movs	r1, #8
 8001e42:	4815      	ldr	r0, [pc, #84]	; (8001e98 <main+0x144>)
 8001e44:	f006 f85a 	bl	8007efc <HAL_TIM_IC_Start_IT>

  // Start TIM7 for DAC
  HAL_TIM_Base_Start(&htim7);
 8001e48:	4814      	ldr	r0, [pc, #80]	; (8001e9c <main+0x148>)
 8001e4a:	f005 fdad 	bl	80079a8 <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4812      	ldr	r0, [pc, #72]	; (8001e9c <main+0x148>)
 8001e52:	f006 fb53 	bl	80084fc <HAL_TIM_GenerateEvent>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001e56:	2202      	movs	r2, #2
 8001e58:	4911      	ldr	r1, [pc, #68]	; (8001ea0 <main+0x14c>)
 8001e5a:	480c      	ldr	r0, [pc, #48]	; (8001e8c <main+0x138>)
 8001e5c:	f001 fbe4 	bl	8003628 <HAL_ADC_Start_DMA>
  uint16_t data = 2048;
 8001e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e64:	80fb      	strh	r3, [r7, #6]
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001e66:	2100      	movs	r1, #0
 8001e68:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <main+0x150>)
 8001e6a:	f003 fe8a 	bl	8005b82 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <main+0x150>)
 8001e76:	f003 fed7 	bl	8005c28 <HAL_DAC_SetValue>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <main+0x150>)
 8001e82:	f003 fed1 	bl	8005c28 <HAL_DAC_SetValue>
 8001e86:	e7f8      	b.n	8001e7a <main+0x126>
 8001e88:	20000344 	.word	0x20000344
 8001e8c:	20000174 	.word	0x20000174
 8001e90:	48000800 	.word	0x48000800
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	20000390 	.word	0x20000390
 8001e9c:	200003dc 	.word	0x200003dc
 8001ea0:	2000008c 	.word	0x2000008c
 8001ea4:	20000240 	.word	0x20000240

08001ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b094      	sub	sp, #80	; 0x50
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	2238      	movs	r2, #56	; 0x38
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f008 f8c8 	bl	800a04c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f004 fcde 	bl	800688c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eda:	2340      	movs	r3, #64	; 0x40
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001eea:	2355      	movs	r3, #85	; 0x55
 8001eec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fd78 	bl	80069f4 <HAL_RCC_OscConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f0a:	f000 fb89 	bl	8002620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0e:	230f      	movs	r3, #15
 8001f10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f12:	2303      	movs	r3, #3
 8001f14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2104      	movs	r1, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 f87c 	bl	8007024 <HAL_RCC_ClockConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f32:	f000 fb75 	bl	8002620 <Error_Handler>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3750      	adds	r7, #80	; 0x50
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09a      	sub	sp, #104	; 0x68
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f56:	2220      	movs	r2, #32
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f008 f876 	bl	800a04c <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	223c      	movs	r2, #60	; 0x3c
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f008 f870 	bl	800a04c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f6c:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f74:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f7c:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f82:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f88:	4b55      	ldr	r3, [pc, #340]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f8e:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f94:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f9a:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fa0:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fac:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fc0:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fc8:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fd6:	4842      	ldr	r0, [pc, #264]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001fd8:	f001 f964 	bl	80032a4 <HAL_ADC_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001fe2:	f000 fb1d 	bl	8002620 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	483b      	ldr	r0, [pc, #236]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8001ff2:	f003 fb8d 	bl	8005710 <HAL_ADCEx_MultiModeConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001ffc:	f000 fb10 	bl	8002620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002000:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <MX_ADC1_Init+0x1a4>)
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002004:	2306      	movs	r3, #6
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002008:	2300      	movs	r3, #0
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800200c:	237f      	movs	r3, #127	; 0x7f
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002010:	2304      	movs	r3, #4
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002018:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201c:	4619      	mov	r1, r3
 800201e:	4830      	ldr	r0, [pc, #192]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 8002020:	f001 fe5e 	bl	8003ce0 <HAL_ADC_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800202a:	f000 faf9 	bl	8002620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <MX_ADC1_Init+0x1a8>)
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002032:	230c      	movs	r3, #12
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002036:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800203a:	4619      	mov	r1, r3
 800203c:	4828      	ldr	r0, [pc, #160]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 800203e:	f001 fe4f 	bl	8003ce0 <HAL_ADC_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002048:	f000 faea 	bl	8002620 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <MX_ADC1_Init+0x1ac>)
 800204e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002050:	2309      	movs	r3, #9
 8002052:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002058:	237f      	movs	r3, #127	; 0x7f
 800205a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800205c:	2304      	movs	r3, #4
 800205e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002088:	463b      	mov	r3, r7
 800208a:	4619      	mov	r1, r3
 800208c:	4814      	ldr	r0, [pc, #80]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 800208e:	f002 fe13 	bl	8004cb8 <HAL_ADCEx_InjectedConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8002098:	f000 fac2 	bl	8002620 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_ADC1_Init+0x1b0>)
 800209e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80020a0:	f240 130f 	movw	r3, #271	; 0x10f
 80020a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020a6:	463b      	mov	r3, r7
 80020a8:	4619      	mov	r1, r3
 80020aa:	480d      	ldr	r0, [pc, #52]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 80020ac:	f002 fe04 	bl	8004cb8 <HAL_ADCEx_InjectedConfigChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80020b6:	f000 fab3 	bl	8002620 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MX_ADC1_Init+0x1b4>)
 80020bc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80020be:	f240 2315 	movw	r3, #533	; 0x215
 80020c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020c4:	463b      	mov	r3, r7
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_ADC1_Init+0x1a0>)
 80020ca:	f002 fdf5 	bl	8004cb8 <HAL_ADCEx_InjectedConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 80020d4:	f000 faa4 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3768      	adds	r7, #104	; 0x68
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000174 	.word	0x20000174
 80020e4:	08600004 	.word	0x08600004
 80020e8:	32601000 	.word	0x32601000
 80020ec:	04300002 	.word	0x04300002
 80020f0:	1d500080 	.word	0x1d500080
 80020f4:	19200040 	.word	0x19200040

080020f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020fe:	463b      	mov	r3, r7
 8002100:	2230      	movs	r2, #48	; 0x30
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f007 ffa1 	bl	800a04c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <MX_DAC1_Init+0x6c>)
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <MX_DAC1_Init+0x70>)
 800210e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002110:	4814      	ldr	r0, [pc, #80]	; (8002164 <MX_DAC1_Init+0x6c>)
 8002112:	f003 fd14 	bl	8005b3e <HAL_DAC_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800211c:	f000 fa80 	bl	8002620 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002120:	2302      	movs	r3, #2
 8002122:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8002130:	2302      	movs	r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800213c:	2301      	movs	r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_DAC1_Init+0x6c>)
 800214c:	f003 fd94 	bl	8005c78 <HAL_DAC_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002156:	f000 fa63 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000240 	.word	0x20000240
 8002168:	50000800 	.word	0x50000800

0800216c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 8002172:	4a22      	ldr	r2, [pc, #136]	; (80021fc <MX_LPUART1_UART_Init+0x90>)
 8002174:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80021ae:	4812      	ldr	r0, [pc, #72]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 80021b0:	f007 f91d 	bl	80093ee <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80021ba:	f000 fa31 	bl	8002620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021be:	2100      	movs	r1, #0
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 80021c2:	f007 fe4f 	bl	8009e64 <HAL_UARTEx_SetTxFifoThreshold>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80021cc:	f000 fa28 	bl	8002620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d0:	2100      	movs	r1, #0
 80021d2:	4809      	ldr	r0, [pc, #36]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 80021d4:	f007 fe84 	bl	8009ee0 <HAL_UARTEx_SetRxFifoThreshold>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80021de:	f000 fa1f 	bl	8002620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_LPUART1_UART_Init+0x8c>)
 80021e4:	f007 fe05 	bl	8009df2 <HAL_UARTEx_DisableFifoMode>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80021ee:	f000 fa17 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200002b4 	.word	0x200002b4
 80021fc:	40008000 	.word	0x40008000

08002200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b098      	sub	sp, #96	; 0x60
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002212:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	615a      	str	r2, [r3, #20]
 8002224:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2234      	movs	r2, #52	; 0x34
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f007 ff0d 	bl	800a04c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002232:	4b4e      	ldr	r3, [pc, #312]	; (800236c <MX_TIM1_Init+0x16c>)
 8002234:	4a4e      	ldr	r2, [pc, #312]	; (8002370 <MX_TIM1_Init+0x170>)
 8002236:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002238:	4b4c      	ldr	r3, [pc, #304]	; (800236c <MX_TIM1_Init+0x16c>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800223e:	4b4b      	ldr	r3, [pc, #300]	; (800236c <MX_TIM1_Init+0x16c>)
 8002240:	2220      	movs	r2, #32
 8002242:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8002244:	4b49      	ldr	r3, [pc, #292]	; (800236c <MX_TIM1_Init+0x16c>)
 8002246:	f241 3287 	movw	r2, #4999	; 0x1387
 800224a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b47      	ldr	r3, [pc, #284]	; (800236c <MX_TIM1_Init+0x16c>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002252:	4b46      	ldr	r3, [pc, #280]	; (800236c <MX_TIM1_Init+0x16c>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002258:	4b44      	ldr	r3, [pc, #272]	; (800236c <MX_TIM1_Init+0x16c>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800225e:	4843      	ldr	r0, [pc, #268]	; (800236c <MX_TIM1_Init+0x16c>)
 8002260:	f005 fc8a 	bl	8007b78 <HAL_TIM_PWM_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800226a:	f000 f9d9 	bl	8002620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800226e:	2370      	movs	r3, #112	; 0x70
 8002270:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800227a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800227e:	4619      	mov	r1, r3
 8002280:	483a      	ldr	r0, [pc, #232]	; (800236c <MX_TIM1_Init+0x16c>)
 8002282:	f006 ff47 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800228c:	f000 f9c8 	bl	8002620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002290:	2360      	movs	r3, #96	; 0x60
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002298:	2300      	movs	r3, #0
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800229c:	2300      	movs	r3, #0
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022b0:	2200      	movs	r2, #0
 80022b2:	4619      	mov	r1, r3
 80022b4:	482d      	ldr	r0, [pc, #180]	; (800236c <MX_TIM1_Init+0x16c>)
 80022b6:	f006 f80d 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022c0:	f000 f9ae 	bl	8002620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022c8:	2204      	movs	r2, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4827      	ldr	r0, [pc, #156]	; (800236c <MX_TIM1_Init+0x16c>)
 80022ce:	f006 f801 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80022d8:	f000 f9a2 	bl	8002620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022e0:	2208      	movs	r2, #8
 80022e2:	4619      	mov	r1, r3
 80022e4:	4821      	ldr	r0, [pc, #132]	; (800236c <MX_TIM1_Init+0x16c>)
 80022e6:	f005 fff5 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80022f0:	f000 f996 	bl	8002620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022f4:	2370      	movs	r3, #112	; 0x70
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022fc:	220c      	movs	r2, #12
 80022fe:	4619      	mov	r1, r3
 8002300:	481a      	ldr	r0, [pc, #104]	; (800236c <MX_TIM1_Init+0x16c>)
 8002302:	f005 ffe7 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800230c:	f000 f988 	bl	8002620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800231c:	2364      	movs	r3, #100	; 0x64
 800231e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002328:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4807      	ldr	r0, [pc, #28]	; (800236c <MX_TIM1_Init+0x16c>)
 800234e:	f006 ff77 	bl	8009240 <HAL_TIMEx_ConfigBreakDeadTime>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002358:	f000 f962 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <MX_TIM1_Init+0x16c>)
 800235e:	f000 fbaf 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 8002362:	bf00      	nop
 8002364:	3760      	adds	r7, #96	; 0x60
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000344 	.word	0x20000344
 8002370:	40012c00 	.word	0x40012c00

08002374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <MX_TIM2_Init+0xd0>)
 8002394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002398:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <MX_TIM2_Init+0xd0>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <MX_TIM2_Init+0xd0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <MX_TIM2_Init+0xd0>)
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <MX_TIM2_Init+0xd0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <MX_TIM2_Init+0xd0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023ba:	4822      	ldr	r0, [pc, #136]	; (8002444 <MX_TIM2_Init+0xd0>)
 80023bc:	f005 fd46 	bl	8007e4c <HAL_TIM_IC_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023c6:	f000 f92b 	bl	8002620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	481a      	ldr	r0, [pc, #104]	; (8002444 <MX_TIM2_Init+0xd0>)
 80023da:	f006 fe9b 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80023e4:	f000 f91c 	bl	8002620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023ec:	2301      	movs	r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	4619      	mov	r1, r3
 80023fe:	4811      	ldr	r0, [pc, #68]	; (8002444 <MX_TIM2_Init+0xd0>)
 8002400:	f005 fecc 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800240a:	f000 f909 	bl	8002620 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2204      	movs	r2, #4
 8002412:	4619      	mov	r1, r3
 8002414:	480b      	ldr	r0, [pc, #44]	; (8002444 <MX_TIM2_Init+0xd0>)
 8002416:	f005 fec1 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002420:	f000 f8fe 	bl	8002620 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2208      	movs	r2, #8
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_TIM2_Init+0xd0>)
 800242c:	f005 feb6 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002436:	f000 f8f3 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000390 	.word	0x20000390

08002448 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <MX_TIM7_Init+0x64>)
 800245a:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <MX_TIM7_Init+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_TIM7_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_TIM7_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_TIM7_Init+0x64>)
 800246c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002470:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_TIM7_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <MX_TIM7_Init+0x64>)
 800247a:	f005 fa3d 	bl	80078f8 <HAL_TIM_Base_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002484:	f000 f8cc 	bl	8002620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002488:	2320      	movs	r3, #32
 800248a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_TIM7_Init+0x64>)
 8002496:	f006 fe3d 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80024a0:	f000 f8be 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200003dc 	.word	0x200003dc
 80024b0:	40001400 	.word	0x40001400

080024b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_DMA_Init+0x60>)
 80024bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <MX_DMA_Init+0x60>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	6493      	str	r3, [r2, #72]	; 0x48
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_DMA_Init+0x60>)
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <MX_DMA_Init+0x60>)
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <MX_DMA_Init+0x60>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6493      	str	r3, [r2, #72]	; 0x48
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <MX_DMA_Init+0x60>)
 80024e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	200b      	movs	r0, #11
 80024f0:	f003 faf1 	bl	8005ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024f4:	200b      	movs	r0, #11
 80024f6:	f003 fb08 	bl	8005b0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	200c      	movs	r0, #12
 8002500:	f003 fae9 	bl	8005ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002504:	200c      	movs	r0, #12
 8002506:	f003 fb00 	bl	8005b0a <HAL_NVIC_EnableIRQ>

}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <MX_GPIO_Init+0x100>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	4a39      	ldr	r2, [pc, #228]	; (8002618 <MX_GPIO_Init+0x100>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <MX_GPIO_Init+0x100>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <MX_GPIO_Init+0x100>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	4a33      	ldr	r2, [pc, #204]	; (8002618 <MX_GPIO_Init+0x100>)
 800254c:	f043 0320 	orr.w	r3, r3, #32
 8002550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <MX_GPIO_Init+0x100>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <MX_GPIO_Init+0x100>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <MX_GPIO_Init+0x100>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <MX_GPIO_Init+0x100>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <MX_GPIO_Init+0x100>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <MX_GPIO_Init+0x100>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <MX_GPIO_Init+0x100>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	2120      	movs	r1, #32
 8002592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002596:	f004 f923 	bl	80067e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80025a0:	481e      	ldr	r0, [pc, #120]	; (800261c <MX_GPIO_Init+0x104>)
 80025a2:	f004 f91d 	bl	80067e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4817      	ldr	r0, [pc, #92]	; (800261c <MX_GPIO_Init+0x104>)
 80025be:	f003 ff75 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025c2:	2320      	movs	r3, #32
 80025c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f003 ff66 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 80025e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80025e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4619      	mov	r1, r3
 80025f8:	4808      	ldr	r0, [pc, #32]	; (800261c <MX_GPIO_Init+0x104>)
 80025fa:	f003 ff57 	bl	80064ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2028      	movs	r0, #40	; 0x28
 8002604:	f003 fa67 	bl	8005ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002608:	2028      	movs	r0, #40	; 0x28
 800260a:	f003 fa7e 	bl	8005b0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	48000800 	.word	0x48000800

08002620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002624:	b672      	cpsid	i
}
 8002626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002628:	e7fe      	b.n	8002628 <Error_Handler+0x8>
	...

0800262c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_MspInit+0x44>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <HAL_MspInit+0x44>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6613      	str	r3, [r2, #96]	; 0x60
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_MspInit+0x44>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_MspInit+0x44>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_MspInit+0x44>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	; 0x58
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_MspInit+0x44>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002662:	f004 f9b7 	bl	80069d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0a0      	sub	sp, #128	; 0x80
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268c:	f107 0318 	add.w	r3, r7, #24
 8002690:	2254      	movs	r2, #84	; 0x54
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f007 fcd9 	bl	800a04c <memset>
  if(hadc->Instance==ADC1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a2:	f040 8098 	bne.w	80027d6 <HAL_ADC_MspInit+0x162>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80026a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80026ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b2:	f107 0318 	add.w	r3, r7, #24
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fed0 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80026c2:	f7ff ffad 	bl	8002620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4a45      	ldr	r2, [pc, #276]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	4a3f      	ldr	r2, [pc, #252]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	4a39      	ldr	r2, [pc, #228]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_ADC_MspInit+0x16c>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002726:	2307      	movs	r3, #7
 8002728:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272a:	2303      	movs	r3, #3
 800272c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002732:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002736:	4619      	mov	r1, r3
 8002738:	482a      	ldr	r0, [pc, #168]	; (80027e4 <HAL_ADC_MspInit+0x170>)
 800273a:	f003 feb7 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800273e:	2303      	movs	r3, #3
 8002740:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002742:	2303      	movs	r3, #3
 8002744:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	f003 feaa 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002758:	2302      	movs	r3, #2
 800275a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800275c:	2303      	movs	r3, #3
 800275e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002768:	4619      	mov	r1, r3
 800276a:	481f      	ldr	r0, [pc, #124]	; (80027e8 <HAL_ADC_MspInit+0x174>)
 800276c:	f003 fe9e 	bl	80064ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_ADC_MspInit+0x178>)
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_ADC_MspInit+0x17c>)
 8002774:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_ADC_MspInit+0x178>)
 8002778:	2205      	movs	r2, #5
 800277a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_ADC_MspInit+0x178>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_ADC_MspInit+0x178>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_ADC_MspInit+0x178>)
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_ADC_MspInit+0x178>)
 8002790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002794:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_ADC_MspInit+0x178>)
 8002798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_ADC_MspInit+0x178>)
 80027a0:	2220      	movs	r2, #32
 80027a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_ADC_MspInit+0x178>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027aa:	4810      	ldr	r0, [pc, #64]	; (80027ec <HAL_ADC_MspInit+0x178>)
 80027ac:	f003 fc0c 	bl	8005fc8 <HAL_DMA_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80027b6:	f7ff ff33 	bl	8002620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_ADC_MspInit+0x178>)
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_ADC_MspInit+0x178>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2012      	movs	r0, #18
 80027cc:	f003 f983 	bl	8005ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80027d0:	2012      	movs	r0, #18
 80027d2:	f003 f99a 	bl	8005b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027d6:	bf00      	nop
 80027d8:	3780      	adds	r7, #128	; 0x80
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	48000800 	.word	0x48000800
 80027e8:	48000400 	.word	0x48000400
 80027ec:	200001e0 	.word	0x200001e0
 80027f0:	40020008 	.word	0x40020008

080027f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2b      	ldr	r2, [pc, #172]	; (80028c0 <HAL_DAC_MspInit+0xcc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d14f      	bne.n	80028b6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_DAC_MspInit+0xd0>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <HAL_DAC_MspInit+0xd0>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_DAC_MspInit+0xd0>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_DAC_MspInit+0xd0>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_DAC_MspInit+0xd0>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_DAC_MspInit+0xd0>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002846:	2310      	movs	r3, #16
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800284a:	2303      	movs	r3, #3
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285c:	f003 fe26 	bl	80064ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_DAC_MspInit+0xd8>)
 8002864:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 8002868:	2206      	movs	r2, #6
 800286a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 800286e:	2210      	movs	r2, #16
 8002870:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 8002880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002884:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 8002888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 8002890:	2220      	movs	r2, #32
 8002892:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800289a:	480b      	ldr	r0, [pc, #44]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 800289c:	f003 fb94 	bl	8005fc8 <HAL_DMA_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80028a6:	f7ff febb 	bl	8002620 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a06      	ldr	r2, [pc, #24]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_DAC_MspInit+0xd4>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80028b6:	bf00      	nop
 80028b8:	3728      	adds	r7, #40	; 0x28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	50000800 	.word	0x50000800
 80028c4:	40021000 	.word	0x40021000
 80028c8:	20000254 	.word	0x20000254
 80028cc:	4002001c 	.word	0x4002001c

080028d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b09e      	sub	sp, #120	; 0x78
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	2254      	movs	r2, #84	; 0x54
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f007 fbab 	bl	800a04c <memset>
  if(huart->Instance==LPUART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_UART_MspInit+0xa8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d136      	bne.n	800296e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002900:	2320      	movs	r3, #32
 8002902:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002904:	2300      	movs	r3, #0
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fda5 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002918:	f7ff fe82 	bl	8002620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_UART_MspInit+0xac>)
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <HAL_UART_MspInit+0xac>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_UART_MspInit+0xac>)
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_UART_MspInit+0xac>)
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_UART_MspInit+0xac>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_UART_MspInit+0xac>)
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800294c:	230c      	movs	r3, #12
 800294e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800295c:	230c      	movs	r3, #12
 800295e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002964:	4619      	mov	r1, r3
 8002966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296a:	f003 fd9f 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800296e:	bf00      	nop
 8002970:	3778      	adds	r7, #120	; 0x78
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40008000 	.word	0x40008000
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_TIM_PWM_MspInit+0x38>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10b      	bne.n	80029aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800299c:	6613      	str	r3, [r2, #96]	; 0x60
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_TIM_PWM_MspInit+0x3c>)
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d146      	bne.n	8002a70 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e2:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_TIM_IC_MspInit+0xb8>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8002a2a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	; (8002a7c <HAL_TIM_IC_MspInit+0xbc>)
 8002a48:	f003 fd30 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 8002a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6c:	f003 fd1e 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	48000400 	.word	0x48000400

08002a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_TIM_Base_MspInit+0x38>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10b      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_TIM_Base_MspInit+0x3c>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_TIM_Base_MspInit+0x3c>)
 8002a98:	f043 0320 	orr.w	r3, r3, #32
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_TIM_Base_MspInit+0x3c>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40001400 	.word	0x40001400
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a36      	ldr	r2, [pc, #216]	; (8002bb8 <HAL_TIM_MspPostInit+0xf8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d166      	bne.n	8002bb0 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aee:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b06:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_TIM_MspPostInit+0xfc>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	481e      	ldr	r0, [pc, #120]	; (8002bc0 <HAL_TIM_MspPostInit+0x100>)
 8002b46:	f003 fcb1 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b4a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b5c:	2306      	movs	r3, #6
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	4619      	mov	r1, r3
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6a:	f003 fc9f 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b7e:	2306      	movs	r3, #6
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	480e      	ldr	r0, [pc, #56]	; (8002bc4 <HAL_TIM_MspPostInit+0x104>)
 8002b8a:	f003 fc8f 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <HAL_TIM_MspPostInit+0x104>)
 8002bac:	f003 fc7e 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	; 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	48000800 	.word	0x48000800
 8002bc4:	48000400 	.word	0x48000400

08002bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <NMI_Handler+0x4>

08002bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <HardFault_Handler+0x4>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <MemManage_Handler+0x4>

08002bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <BusFault_Handler+0x4>

08002be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <UsageFault_Handler+0x4>

08002be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c14:	f000 f8c2 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <DMA1_Channel1_IRQHandler+0x10>)
 8002c22:	f003 faf4 	bl	800620e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200001e0 	.word	0x200001e0

08002c30 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <DMA1_Channel2_IRQHandler+0x10>)
 8002c36:	f003 faea 	bl	800620e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000254 	.word	0x20000254

08002c44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c48:	4808      	ldr	r0, [pc, #32]	; (8002c6c <ADC1_2_IRQHandler+0x28>)
 8002c4a:	f000 fdc1 	bl	80037d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002c4e:	2120      	movs	r1, #32
 8002c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c54:	f003 fddc 	bl	8006810 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence();
 8002c58:	f7fd fdd2 	bl	8000800 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c62:	f003 fdd5 	bl	8006810 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000174 	.word	0x20000174

08002c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c78:	f003 fde4 	bl	8006844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <SystemInit+0x20>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <SystemInit+0x20>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ca4:	480d      	ldr	r0, [pc, #52]	; (8002cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ca6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002caa:	490e      	ldr	r1, [pc, #56]	; (8002ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <LoopForever+0xe>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc0:	4c0b      	ldr	r4, [pc, #44]	; (8002cf0 <LoopForever+0x16>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cce:	f7ff ffd7 	bl	8002c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f007 f997 	bl	800a004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cd6:	f7ff f83d 	bl	8001d54 <main>

08002cda <LoopForever>:

LoopForever:
    b LoopForever
 8002cda:	e7fe      	b.n	8002cda <LoopForever>
  ldr   r0, =_estack
 8002cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ce8:	0800b488 	.word	0x0800b488
  ldr r2, =_sbss
 8002cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002cf0:	2000042c 	.word	0x2000042c

08002cf4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC3_IRQHandler>

08002cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f002 fedd 	bl	8005ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d06:	2000      	movs	r0, #0
 8002d08:	f000 f80e 	bl	8002d28 <HAL_InitTick>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	71fb      	strb	r3, [r7, #7]
 8002d16:	e001      	b.n	8002d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d18:	f7ff fc88 	bl	800262c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d1c:	79fb      	ldrb	r3, [r7, #7]

}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_InitTick+0x68>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d022      	beq.n	8002d82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d3c:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_InitTick+0x6c>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_InitTick+0x68>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 fee8 	bl	8005b26 <HAL_SYSTICK_Config>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	d809      	bhi.n	8002d76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d62:	2200      	movs	r2, #0
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6a:	f002 feb4 	bl	8005ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_InitTick+0x70>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e007      	b.n	8002d86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e004      	b.n	8002d86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e001      	b.n	8002d86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000008 	.word	0x20000008
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_IncTick+0x1c>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_IncTick+0x20>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4413      	add	r3, r2
 8002daa:	4a03      	ldr	r2, [pc, #12]	; (8002db8 <HAL_IncTick+0x1c>)
 8002dac:	6013      	str	r3, [r2, #0]
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	20000428 	.word	0x20000428
 8002dbc:	20000008 	.word	0x20000008

08002dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_GetTick+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000428 	.word	0x20000428

08002dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de0:	f7ff ffee 	bl	8002dc0 <HAL_GetTick>
 8002de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d004      	beq.n	8002dfc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_Delay+0x40>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfc:	bf00      	nop
 8002dfe:	f7ff ffdf 	bl	8002dc0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d8f7      	bhi.n	8002dfe <HAL_Delay+0x26>
  {
  }
}
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000008 	.word	0x20000008

08002e1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3360      	adds	r3, #96	; 0x60
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <LL_ADC_SetOffset+0x44>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	03fff000 	.word	0x03fff000

08002ecc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3360      	adds	r3, #96	; 0x60
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3360      	adds	r3, #96	; 0x60
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	615a      	str	r2, [r3, #20]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3330      	adds	r3, #48	; 0x30
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	4413      	add	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	211f      	movs	r1, #31
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	401a      	ands	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	f003 011f 	and.w	r1, r3, #31
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	431a      	orrs	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3314      	adds	r3, #20
 8003074:	461a      	mov	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	0e5b      	lsrs	r3, r3, #25
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	4413      	add	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	0d1b      	lsrs	r3, r3, #20
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2107      	movs	r1, #7
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	401a      	ands	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	0d1b      	lsrs	r3, r3, #20
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	431a      	orrs	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0f      	ldr	r2, [pc, #60]	; (8003108 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10a      	bne.n	80030e6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80030e4:	e00a      	b.n	80030fc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	43db      	mvns	r3, r3
 80030f4:	401a      	ands	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	407f0000 	.word	0x407f0000

0800310c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 031f 	and.w	r3, r3, #31
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6093      	str	r3, [r2, #8]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317c:	d101      	bne.n	8003182 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031cc:	d101      	bne.n	80031d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <LL_ADC_IsEnabled+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <LL_ADC_IsEnabled+0x1a>
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800323e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d101      	bne.n	800326e <LL_ADC_REG_IsConversionOngoing+0x18>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b08      	cmp	r3, #8
 800328e:	d101      	bne.n	8003294 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e1af      	b.n	800361e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff f9d1 	bl	8002674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff3f 	bl	8003168 <LL_ADC_IsDeepPowerDownEnabled>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff25 	bl	8003144 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff5a 	bl	80031b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d115      	bne.n	8003336 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff3e 	bl	8003190 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003314:	4b9f      	ldr	r3, [pc, #636]	; (8003594 <HAL_ADC_Init+0x2f0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	4a9f      	ldr	r2, [pc, #636]	; (8003598 <HAL_ADC_Init+0x2f4>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003328:	e002      	b.n	8003330 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3b01      	subs	r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f9      	bne.n	800332a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff3c 	bl	80031b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10d      	bne.n	8003362 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	f043 0210 	orr.w	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff75 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 800336c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 8148 	bne.w	800360c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8144 	bne.w	800360c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800338c:	f043 0202 	orr.w	r2, r3, #2
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff35 	bl	8003208 <LL_ADC_IsEnabled>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d141      	bne.n	8003428 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ac:	d004      	beq.n	80033b8 <HAL_ADC_Init+0x114>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7a      	ldr	r2, [pc, #488]	; (800359c <HAL_ADC_Init+0x2f8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10f      	bne.n	80033d8 <HAL_ADC_Init+0x134>
 80033b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033bc:	f7ff ff24 	bl	8003208 <LL_ADC_IsEnabled>
 80033c0:	4604      	mov	r4, r0
 80033c2:	4876      	ldr	r0, [pc, #472]	; (800359c <HAL_ADC_Init+0x2f8>)
 80033c4:	f7ff ff20 	bl	8003208 <LL_ADC_IsEnabled>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4323      	orrs	r3, r4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e012      	b.n	80033fe <HAL_ADC_Init+0x15a>
 80033d8:	4871      	ldr	r0, [pc, #452]	; (80035a0 <HAL_ADC_Init+0x2fc>)
 80033da:	f7ff ff15 	bl	8003208 <LL_ADC_IsEnabled>
 80033de:	4604      	mov	r4, r0
 80033e0:	4870      	ldr	r0, [pc, #448]	; (80035a4 <HAL_ADC_Init+0x300>)
 80033e2:	f7ff ff11 	bl	8003208 <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	431c      	orrs	r4, r3
 80033ea:	486f      	ldr	r0, [pc, #444]	; (80035a8 <HAL_ADC_Init+0x304>)
 80033ec:	f7ff ff0c 	bl	8003208 <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4323      	orrs	r3, r4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d012      	beq.n	8003428 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340a:	d004      	beq.n	8003416 <HAL_ADC_Init+0x172>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a62      	ldr	r2, [pc, #392]	; (800359c <HAL_ADC_Init+0x2f8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_ADC_Init+0x176>
 8003416:	4a65      	ldr	r2, [pc, #404]	; (80035ac <HAL_ADC_Init+0x308>)
 8003418:	e000      	b.n	800341c <HAL_ADC_Init+0x178>
 800341a:	4a65      	ldr	r2, [pc, #404]	; (80035b0 <HAL_ADC_Init+0x30c>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f7ff fcfa 	bl	8002e1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7f5b      	ldrb	r3, [r3, #29]
 800342c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003432:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003438:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800343e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003446:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003452:	2b01      	cmp	r3, #1
 8003454:	d106      	bne.n	8003464 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	045b      	lsls	r3, r3, #17
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <HAL_ADC_Init+0x310>)
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	69b9      	ldr	r1, [r7, #24]
 8003490:	430b      	orrs	r3, r1
 8003492:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fed1 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 80034b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fede 	bl	800327c <LL_ADC_INJ_IsConversionOngoing>
 80034c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d17f      	bne.n	80035c8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d17c      	bne.n	80035c8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034d2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034da:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ea:	f023 0302 	bic.w	r3, r3, #2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800350e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003518:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800351c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6911      	ldr	r1, [r2, #16]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800352e:	e013      	b.n	8003558 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800353e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003550:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003554:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800355e:	2b01      	cmp	r3, #1
 8003560:	d12a      	bne.n	80035b8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003584:	430a      	orrs	r2, r1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	e019      	b.n	80035c8 <HAL_ADC_Init+0x324>
 8003594:	20000000 	.word	0x20000000
 8003598:	053e2d63 	.word	0x053e2d63
 800359c:	50000100 	.word	0x50000100
 80035a0:	50000400 	.word	0x50000400
 80035a4:	50000500 	.word	0x50000500
 80035a8:	50000600 	.word	0x50000600
 80035ac:	50000300 	.word	0x50000300
 80035b0:	50000700 	.word	0x50000700
 80035b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10c      	bne.n	80035ea <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f023 010f 	bic.w	r1, r3, #15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
 80035e8:	e007      	b.n	80035fa <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 020f 	bic.w	r2, r2, #15
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	65da      	str	r2, [r3, #92]	; 0x5c
 800360a:	e007      	b.n	800361c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800361c:	7ffb      	ldrb	r3, [r7, #31]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	; 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop

08003628 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800363c:	d004      	beq.n	8003648 <HAL_ADC_Start_DMA+0x20>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a5a      	ldr	r2, [pc, #360]	; (80037ac <HAL_ADC_Start_DMA+0x184>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_ADC_Start_DMA+0x24>
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_ADC_Start_DMA+0x188>)
 800364a:	e000      	b.n	800364e <HAL_ADC_Start_DMA+0x26>
 800364c:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <HAL_ADC_Start_DMA+0x18c>)
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fd5c 	bl	800310c <LL_ADC_GetMultimode>
 8003654:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fdfb 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 809b 	bne.w	800379e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ADC_Start_DMA+0x4e>
 8003672:	2302      	movs	r3, #2
 8003674:	e096      	b.n	80037a4 <HAL_ADC_Start_DMA+0x17c>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4d      	ldr	r2, [pc, #308]	; (80037b8 <HAL_ADC_Start_DMA+0x190>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d008      	beq.n	800369a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d002      	beq.n	800369a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b09      	cmp	r3, #9
 8003698:	d17a      	bne.n	8003790 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 ff60 	bl	8004560 <ADC_Enable>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d16d      	bne.n	8003786 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3a      	ldr	r2, [pc, #232]	; (80037ac <HAL_ADC_Start_DMA+0x184>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_ADC_Start_DMA+0xb4>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_ADC_Start_DMA+0x194>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d002      	beq.n	80036d8 <HAL_ADC_Start_DMA+0xb0>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_Start_DMA+0xb8>
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_ADC_Start_DMA+0x198>)
 80036da:	e001      	b.n	80036e0 <HAL_ADC_Start_DMA+0xb8>
 80036dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d002      	beq.n	80036ee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	f023 0206 	bic.w	r2, r3, #6
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	661a      	str	r2, [r3, #96]	; 0x60
 8003712:	e002      	b.n	800371a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <HAL_ADC_Start_DMA+0x19c>)
 8003720:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	4a28      	ldr	r2, [pc, #160]	; (80037c8 <HAL_ADC_Start_DMA+0x1a0>)
 8003728:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	4a27      	ldr	r2, [pc, #156]	; (80037cc <HAL_ADC_Start_DMA+0x1a4>)
 8003730:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	221c      	movs	r2, #28
 8003738:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0210 	orr.w	r2, r2, #16
 8003750:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3340      	adds	r3, #64	; 0x40
 800376c:	4619      	mov	r1, r3
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f002 fcd1 	bl	8006118 <HAL_DMA_Start_IT>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fd55 	bl	800322e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003784:	e00d      	b.n	80037a2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800378e:	e008      	b.n	80037a2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800379c:	e001      	b.n	80037a2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	50000100 	.word	0x50000100
 80037b0:	50000300 	.word	0x50000300
 80037b4:	50000700 	.word	0x50000700
 80037b8:	50000600 	.word	0x50000600
 80037bc:	50000500 	.word	0x50000500
 80037c0:	50000400 	.word	0x50000400
 80037c4:	08004625 	.word	0x08004625
 80037c8:	080046fd 	.word	0x080046fd
 80037cc:	08004719 	.word	0x08004719

080037d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_IRQHandler+0x30>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a8e      	ldr	r2, [pc, #568]	; (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_IRQHandler+0x34>
 8003800:	4b8d      	ldr	r3, [pc, #564]	; (8003a38 <HAL_ADC_IRQHandler+0x268>)
 8003802:	e000      	b.n	8003806 <HAL_ADC_IRQHandler+0x36>
 8003804:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <HAL_ADC_IRQHandler+0x26c>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fc80 	bl	800310c <LL_ADC_GetMultimode>
 800380c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_ADC_IRQHandler+0x78>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 fa32 	bl	8004ca4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_ADC_IRQHandler+0x8c>
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8094 	beq.w	8003990 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 808e 	beq.w	8003990 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fb95 	bl	8002fc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d072      	beq.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a64      	ldr	r2, [pc, #400]	; (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_ADC_IRQHandler+0xea>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d002      	beq.n	80038b6 <HAL_ADC_IRQHandler+0xe6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e003      	b.n	80038be <HAL_ADC_IRQHandler+0xee>
 80038b6:	4b63      	ldr	r3, [pc, #396]	; (8003a44 <HAL_ADC_IRQHandler+0x274>)
 80038b8:	e001      	b.n	80038be <HAL_ADC_IRQHandler+0xee>
 80038ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d008      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d002      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	d104      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	e014      	b.n	800390c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a53      	ldr	r2, [pc, #332]	; (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_ADC_IRQHandler+0x130>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a53      	ldr	r2, [pc, #332]	; (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d002      	beq.n	80038fc <HAL_ADC_IRQHandler+0x12c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e003      	b.n	8003904 <HAL_ADC_IRQHandler+0x134>
 80038fc:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <HAL_ADC_IRQHandler+0x274>)
 80038fe:	e001      	b.n	8003904 <HAL_ADC_IRQHandler+0x134>
 8003900:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003904:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d135      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d12e      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fc94 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11a      	bne.n	800396a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020c 	bic.w	r2, r2, #12
 8003942:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d112      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	; 0x5c
 8003968:	e00b      	b.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f984 	bl	8003c90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	220c      	movs	r2, #12
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_ADC_IRQHandler+0x1d4>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80b3 	beq.w	8003b16 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80ad 	beq.w	8003b16 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fb30 	bl	800303e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039de:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff faeb 	bl	8002fc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039ea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_ADC_IRQHandler+0x23a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d002      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x236>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e003      	b.n	8003a0e <HAL_ADC_IRQHandler+0x23e>
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_ADC_IRQHandler+0x274>)
 8003a08:	e001      	b.n	8003a0e <HAL_ADC_IRQHandler+0x23e>
 8003a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d008      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d002      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	d10f      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	e01f      	b.n	8003a72 <HAL_ADC_IRQHandler+0x2a2>
 8003a32:	bf00      	nop
 8003a34:	50000100 	.word	0x50000100
 8003a38:	50000300 	.word	0x50000300
 8003a3c:	50000700 	.word	0x50000700
 8003a40:	50000500 	.word	0x50000500
 8003a44:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a8b      	ldr	r2, [pc, #556]	; (8003c7c <HAL_ADC_IRQHandler+0x4ac>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_ADC_IRQHandler+0x296>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a8a      	ldr	r2, [pc, #552]	; (8003c80 <HAL_ADC_IRQHandler+0x4b0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x292>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	e003      	b.n	8003a6a <HAL_ADC_IRQHandler+0x29a>
 8003a62:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_ADC_IRQHandler+0x4b4>)
 8003a64:	e001      	b.n	8003a6a <HAL_ADC_IRQHandler+0x29a>
 8003a66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a6a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d047      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_ADC_IRQHandler+0x2c2>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d03f      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d13a      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d133      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12e      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fbe4 	bl	800327c <LL_ADC_INJ_IsConversionOngoing>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11a      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d112      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	; 0x5c
 8003aee:	e00b      	b.n	8003b08 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f043 0210 	orr.w	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f001 f8a3 	bl	8004c54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2260      	movs	r2, #96	; 0x60
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d011      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x374>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8be 	bl	8003cb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x3a4>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f001 f889 	bl	8004c7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3d4>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f001 f87b 	bl	8004c90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d043      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x466>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03e      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	e021      	b.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x410>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <HAL_ADC_IRQHandler+0x4ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_IRQHandler+0x414>
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_ADC_IRQHandler+0x4b8>)
 8003be2:	e000      	b.n	8003be6 <HAL_ADC_IRQHandler+0x416>
 8003be4:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <HAL_ADC_IRQHandler+0x4bc>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fa9e 	bl	8003128 <LL_ADC_GetMultiDMATransfer>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	e008      	b.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003c06:	2301      	movs	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10e      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	f043 0202 	orr.w	r2, r3, #2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f84f 	bl	8003ccc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x4a2>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d013      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	f043 0208 	orr.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fffb 	bl	8004c68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	; 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	50000100 	.word	0x50000100
 8003c80:	50000500 	.word	0x50000500
 8003c84:	50000400 	.word	0x50000400
 8003c88:	50000300 	.word	0x50000300
 8003c8c:	50000700 	.word	0x50000700

08003c90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0b6      	sub	sp, #216	; 0xd8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d102      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x24>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f000 bc13 	b.w	800452a <HAL_ADC_ConfigChannel+0x84a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff faa0 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 83f3 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7ff f95b 	bl	8002fe6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fa8e 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 8003d3a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fa9a 	bl	800327c <LL_ADC_INJ_IsConversionOngoing>
 8003d48:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 81d9 	bne.w	8004108 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 81d4 	bne.w	8004108 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d68:	d10f      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7ff f975 	bl	8003064 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff f909 	bl	8002f9a <LL_ADC_SetSamplingTimeCommonConfig>
 8003d88:	e00e      	b.n	8003da8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7ff f964 	bl	8003064 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f8f9 	bl	8002f9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	08db      	lsrs	r3, r3, #3
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d022      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dda:	f7ff f853 	bl	8002e84 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f7ff f89f 	bl	8002f2e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6919      	ldr	r1, [r3, #16]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	7f1b      	ldrb	r3, [r3, #28]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x126>
 8003e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e04:	e000      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x128>
 8003e06:	2300      	movs	r3, #0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f7ff f8ab 	bl	8002f64 <LL_ADC_SetOffsetSaturation>
 8003e0e:	e17b      	b.n	8004108 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff f858 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x15c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff f84d 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003e32:	4603      	mov	r3, r0
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	f003 021f 	and.w	r2, r3, #31
 8003e3a:	e01e      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x19a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f842 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	e004      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d105      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x1b2>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0e9b      	lsrs	r3, r3, #26
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	e018      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1e4>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	e004      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d106      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff f811 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2101      	movs	r1, #1
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe fff5 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x222>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe ffea 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	0e9b      	lsrs	r3, r3, #26
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	e01e      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x260>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe ffdf 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e004      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f38:	fab3 f383 	clz	r3, r3
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x278>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	e018      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x2aa>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	e004      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d106      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe ffae 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe ff92 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x2e8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe ff87 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	f003 021f 	and.w	r2, r3, #31
 8003fc6:	e01e      	b.n	8004006 <HAL_ADC_ConfigChannel+0x326>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe ff7c 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e004      	b.n	8004004 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_ADC_ConfigChannel+0x33e>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	e016      	b.n	800404c <HAL_ADC_ConfigChannel+0x36c>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004030:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800403e:	2320      	movs	r3, #32
 8004040:	e004      	b.n	800404c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004042:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800404c:	429a      	cmp	r2, r3
 800404e:	d106      	bne.n	800405e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe ff4d 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2103      	movs	r1, #3
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe ff31 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_ADC_ConfigChannel+0x3aa>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2103      	movs	r1, #3
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ff26 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	e017      	b.n	80040ba <HAL_ADC_ConfigChannel+0x3da>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2103      	movs	r1, #3
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ff1b 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80040a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80040a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040ac:	2320      	movs	r3, #32
 80040ae:	e003      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x3f2>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	e011      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x416>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80040e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d106      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	2103      	movs	r1, #3
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fef8 	bl	8002ef8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff f87b 	bl	8003208 <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 813d 	bne.w	8004394 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fe ffc8 	bl	80030bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4aa2      	ldr	r2, [pc, #648]	; (80043bc <HAL_ADC_ConfigChannel+0x6dc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 812e 	bne.w	8004394 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x480>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	3301      	adds	r3, #1
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2b09      	cmp	r3, #9
 8004156:	bf94      	ite	ls
 8004158:	2301      	movls	r3, #1
 800415a:	2300      	movhi	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e019      	b.n	8004194 <HAL_ADC_ConfigChannel+0x4b4>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800416e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004170:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800417c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2b09      	cmp	r3, #9
 800418c:	bf94      	ite	ls
 800418e:	2301      	movls	r3, #1
 8004190:	2300      	movhi	r3, #0
 8004192:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004194:	2b00      	cmp	r3, #0
 8004196:	d079      	beq.n	800428c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x4d4>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0e9b      	lsrs	r3, r3, #26
 80041aa:	3301      	adds	r3, #1
 80041ac:	069b      	lsls	r3, r3, #26
 80041ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041b2:	e015      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x500>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041cc:	2320      	movs	r3, #32
 80041ce:	e003      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	069b      	lsls	r3, r3, #26
 80041dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x520>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	e017      	b.n	8004230 <HAL_ADC_ConfigChannel+0x550>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800420e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004210:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e003      	b.n	8004224 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800421c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	ea42 0103 	orr.w	r1, r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x576>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	3301      	adds	r3, #1
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	051b      	lsls	r3, r3, #20
 8004254:	e018      	b.n	8004288 <HAL_ADC_ConfigChannel+0x5a8>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e003      	b.n	800427a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	3301      	adds	r3, #1
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004288:	430b      	orrs	r3, r1
 800428a:	e07e      	b.n	800438a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x5c8>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	069b      	lsls	r3, r3, #26
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042a6:	e015      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x5f4>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x614>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	3301      	adds	r3, #1
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	e017      	b.n	8004324 <HAL_ADC_ConfigChannel+0x644>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	61fb      	str	r3, [r7, #28]
  return result;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x670>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 021f 	and.w	r2, r3, #31
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	3b1e      	subs	r3, #30
 8004348:	051b      	lsls	r3, r3, #20
 800434a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800434e:	e01b      	b.n	8004388 <HAL_ADC_ConfigChannel+0x6a8>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	613b      	str	r3, [r7, #16]
  return result;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004368:	2320      	movs	r3, #32
 800436a:	e003      	b.n	8004374 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3301      	adds	r3, #1
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	3b1e      	subs	r3, #30
 8004382:	051b      	lsls	r3, r3, #20
 8004384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004388:	430b      	orrs	r3, r1
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	6892      	ldr	r2, [r2, #8]
 800438e:	4619      	mov	r1, r3
 8004390:	f7fe fe68 	bl	8003064 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80be 	beq.w	800451e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043aa:	d004      	beq.n	80043b6 <HAL_ADC_ConfigChannel+0x6d6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10a      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x6ec>
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80043b8:	e009      	b.n	80043ce <HAL_ADC_ConfigChannel+0x6ee>
 80043ba:	bf00      	nop
 80043bc:	407f0000 	.word	0x407f0000
 80043c0:	80080000 	.word	0x80080000
 80043c4:	50000100 	.word	0x50000100
 80043c8:	50000300 	.word	0x50000300
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fd4a 	bl	8002e68 <LL_ADC_GetCommonPathInternalCh>
 80043d4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a56      	ldr	r2, [pc, #344]	; (8004538 <HAL_ADC_ConfigChannel+0x858>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_ADC_ConfigChannel+0x70c>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a55      	ldr	r2, [pc, #340]	; (800453c <HAL_ADC_ConfigChannel+0x85c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d13a      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d134      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004400:	d005      	beq.n	800440e <HAL_ADC_ConfigChannel+0x72e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4e      	ldr	r2, [pc, #312]	; (8004540 <HAL_ADC_ConfigChannel+0x860>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f040 8085 	bne.w	8004518 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004416:	d004      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x742>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a49      	ldr	r2, [pc, #292]	; (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x746>
 8004422:	4a49      	ldr	r2, [pc, #292]	; (8004548 <HAL_ADC_ConfigChannel+0x868>)
 8004424:	e000      	b.n	8004428 <HAL_ADC_ConfigChannel+0x748>
 8004426:	4a43      	ldr	r2, [pc, #268]	; (8004534 <HAL_ADC_ConfigChannel+0x854>)
 8004428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800442c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe fd05 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004438:	4b44      	ldr	r3, [pc, #272]	; (800454c <HAL_ADC_ConfigChannel+0x86c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	4a44      	ldr	r2, [pc, #272]	; (8004550 <HAL_ADC_ConfigChannel+0x870>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004452:	e002      	b.n	800445a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004460:	e05a      	b.n	8004518 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <HAL_ADC_ConfigChannel+0x874>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d125      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7d8>
 800446c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11f      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a31      	ldr	r2, [pc, #196]	; (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d104      	bne.n	800448c <HAL_ADC_ConfigChannel+0x7ac>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a34      	ldr	r2, [pc, #208]	; (8004558 <HAL_ADC_ConfigChannel+0x878>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d047      	beq.n	800451c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004494:	d004      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x7c0>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x7c4>
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_ADC_ConfigChannel+0x868>)
 80044a2:	e000      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x7c6>
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80044a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f7fe fcc6 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044b6:	e031      	b.n	800451c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a27      	ldr	r2, [pc, #156]	; (800455c <HAL_ADC_ConfigChannel+0x87c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d12d      	bne.n	800451e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d127      	bne.n	800451e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <HAL_ADC_ConfigChannel+0x864>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x80c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_ADC_ConfigChannel+0x864>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x810>
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_ADC_ConfigChannel+0x868>)
 80044ee:	e000      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x812>
 80044f0:	4a10      	ldr	r2, [pc, #64]	; (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80044f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7fe fca0 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
 8004502:	e00c      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004516:	e002      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800451c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004526:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800452a:	4618      	mov	r0, r3
 800452c:	37d8      	adds	r7, #216	; 0xd8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	50000700 	.word	0x50000700
 8004538:	c3210000 	.word	0xc3210000
 800453c:	90c00010 	.word	0x90c00010
 8004540:	50000600 	.word	0x50000600
 8004544:	50000100 	.word	0x50000100
 8004548:	50000300 	.word	0x50000300
 800454c:	20000000 	.word	0x20000000
 8004550:	053e2d63 	.word	0x053e2d63
 8004554:	c7520000 	.word	0xc7520000
 8004558:	50000500 	.word	0x50000500
 800455c:	cb840000 	.word	0xcb840000

08004560 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fe fe4b 	bl	8003208 <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d14d      	bne.n	8004614 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <ADC_Enable+0xc0>)
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458a:	f043 0210 	orr.w	r2, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e039      	b.n	8004616 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fe1a 	bl	80031e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045ac:	f7fe fc08 	bl	8002dc0 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b2:	e028      	b.n	8004606 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fe25 	bl	8003208 <LL_ADC_IsEnabled>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fe09 	bl	80031e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045ce:	f7fe fbf7 	bl	8002dc0 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d914      	bls.n	8004606 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d00d      	beq.n	8004606 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ee:	f043 0210 	orr.w	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e007      	b.n	8004616 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d1cf      	bne.n	80045b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	8000003f 	.word	0x8000003f

08004624 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d14b      	bne.n	80046d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004642:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d021      	beq.n	800469c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fcaf 	bl	8002fc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d032      	beq.n	80046ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d12b      	bne.n	80046ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11f      	bne.n	80046ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	65da      	str	r2, [r3, #92]	; 0x5c
 800469a:	e018      	b.n	80046ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d111      	bne.n	80046ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	f043 0201 	orr.w	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fade 	bl	8003c90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046d4:	e00e      	b.n	80046f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff faf2 	bl	8003ccc <HAL_ADC_ErrorCallback>
}
 80046e8:	e004      	b.n	80046f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4798      	blx	r3
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff faca 	bl	8003ca4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	f043 0204 	orr.w	r2, r3, #4
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff fac4 	bl	8003ccc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <LL_ADC_SetCommonPathInternalCh>:
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	609a      	str	r2, [r3, #8]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_ADC_GetCommonPathInternalCh>:
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <LL_ADC_SetOffset>:
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3360      	adds	r3, #96	; 0x60
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <LL_ADC_SetOffset+0x44>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	601a      	str	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	03fff000 	.word	0x03fff000

080047d8 <LL_ADC_GetOffsetChannel>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3360      	adds	r3, #96	; 0x60
 80047e6:	461a      	mov	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_SetOffsetState>:
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3360      	adds	r3, #96	; 0x60
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	431a      	orrs	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_ADC_SetOffsetSign>:
{
 800483a:	b480      	push	{r7}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3360      	adds	r3, #96	; 0x60
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	431a      	orrs	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_SetOffsetSaturation>:
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3360      	adds	r3, #96	; 0x60
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	431a      	orrs	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	615a      	str	r2, [r3, #20]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_ADC_INJ_GetTrigAuto>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <LL_ADC_SetChannelSamplingTime>:
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3314      	adds	r3, #20
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	0e5b      	lsrs	r3, r3, #25
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	4413      	add	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	0d1b      	lsrs	r3, r3, #20
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2107      	movs	r1, #7
 8004916:	fa01 f303 	lsl.w	r3, r1, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	401a      	ands	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0d1b      	lsrs	r3, r3, #20
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	431a      	orrs	r2, r3
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <LL_ADC_SetChannelSingleDiff>:
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a0f      	ldr	r2, [pc, #60]	; (800498c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10a      	bne.n	800496a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004968:	e00a      	b.n	8004980 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004976:	43db      	mvns	r3, r3
 8004978:	401a      	ands	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	407f0000 	.word	0x407f0000

08004990 <LL_ADC_GetMultimode>:
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 031f 	and.w	r3, r3, #31
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <LL_ADC_IsEnabled>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <LL_ADC_IsEnabled+0x18>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <LL_ADC_IsEnabled+0x1a>
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d101      	bne.n	80049ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_ADC_INJ_StartConversion>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a0c:	f043 0208 	orr.w	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_INJ_IsConversionOngoing>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d101      	bne.n	8004a38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a58:	d004      	beq.n	8004a64 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a78      	ldr	r2, [pc, #480]	; (8004c40 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <HAL_ADCEx_InjectedStart_IT+0x20>
 8004a64:	4b77      	ldr	r3, [pc, #476]	; (8004c44 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8004a66:	e000      	b.n	8004a6a <HAL_ADCEx_InjectedStart_IT+0x22>
 8004a68:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ff90 	bl	8004990 <LL_ADC_GetMultimode>
 8004a70:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ffd2 	bl	8004a20 <LL_ADC_INJ_IsConversionOngoing>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
 8004a84:	e0d8      	b.n	8004c38 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a90:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a98:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d107      	bne.n	8004ab6 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aaa:	f043 0220 	orr.w	r2, r3, #32
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0c0      	b.n	8004c38 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e0b9      	b.n	8004c38 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff fd47 	bl	8004560 <ADC_Enable>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 80a8 	bne.w	8004c2e <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d006      	beq.n	8004af8 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aee:	f023 0208 	bic.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	661a      	str	r2, [r3, #96]	; 0x60
 8004af6:	e002      	b.n	8004afe <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a4a      	ldr	r2, [pc, #296]	; (8004c40 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a4a      	ldr	r2, [pc, #296]	; (8004c4c <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d002      	beq.n	8004b2c <HAL_ADCEx_InjectedStart_IT+0xe4>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e003      	b.n	8004b34 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004b2c:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004b2e:	e001      	b.n	8004b34 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d002      	beq.n	8004b42 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2260      	movs	r2, #96	; 0x60
 8004b54:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b7a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d110      	bne.n	8004ba6 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0220 	bic.w	r2, r2, #32
 8004b92:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba2:	605a      	str	r2, [r3, #4]
          break;
 8004ba4:	e010      	b.n	8004bc8 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0220 	orr.w	r2, r2, #32
 8004bc4:	605a      	str	r2, [r3, #4]
          break;
 8004bc6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_ADCEx_InjectedStart_IT+0x19e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1d      	ldr	r2, [pc, #116]	; (8004c4c <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d002      	beq.n	8004be2 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	e003      	b.n	8004bea <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004be2:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004be4:	e001      	b.n	8004bea <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d008      	beq.n	8004c04 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d002      	beq.n	8004c04 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b07      	cmp	r3, #7
 8004c02:	d10d      	bne.n	8004c20 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fe5f 	bl	80048cc <LL_ADC_INJ_GetTrigAuto>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d110      	bne.n	8004c36 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff feed 	bl	80049f8 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004c1e:	e00a      	b.n	8004c36 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c2c:	e003      	b.n	8004c36 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	50000100 	.word	0x50000100
 8004c44:	50000300 	.word	0x50000300
 8004c48:	50000700 	.word	0x50000700
 8004c4c:	50000500 	.word	0x50000500
 8004c50:	50000400 	.word	0x50000400

08004c54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b0b6      	sub	sp, #216	; 0xd8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f000 bcfd 	b.w	80056dc <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d130      	bne.n	8004d5c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d179      	bne.n	8004df6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d010      	beq.n	8004d2c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	0e9b      	lsrs	r3, r3, #26
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004d1e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d2a:	e007      	b.n	8004d3c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0e9b      	lsrs	r3, r3, #26
 8004d32:	025b      	lsls	r3, r3, #9
 8004d34:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d42:	4b84      	ldr	r3, [pc, #528]	; (8004f54 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d58:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004d5a:	e04c      	b.n	8004df6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11d      	bne.n	8004da0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004d88:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d94:	e004      	b.n	8004da0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	0e9b      	lsrs	r3, r3, #26
 8004da6:	f003 021f 	and.w	r2, r3, #31
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc4:	1e5a      	subs	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004dce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de6:	4b5b      	ldr	r3, [pc, #364]	; (8004f54 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	430b      	orrs	r3, r1
 8004df4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fe10 	bl	8004a20 <LL_ADC_INJ_IsConversionOngoing>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d124      	bne.n	8004e50 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d112      	bne.n	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004e20:	055a      	lsls	r2, r3, #21
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e28:	051b      	lsls	r3, r3, #20
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e00c      	b.n	8004e50 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004e46:	055a      	lsls	r2, r3, #21
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fdbc 	bl	80049d2 <LL_ADC_REG_IsConversionOngoing>
 8004e5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fddc 	bl	8004a20 <LL_ADC_INJ_IsConversionOngoing>
 8004e68:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 822e 	bne.w	80052d2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 8229 	bne.w	80052d2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d116      	bne.n	8004ebe <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d108      	bne.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004ea8:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004eaa:	e01f      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004eba:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004ebc:	e016      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d109      	bne.n	8004edc <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004eda:	e007      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004eea:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d110      	bne.n	8004f18 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0202 	orr.w	r2, r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
 8004f16:	e007      	b.n	8004f28 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0202 	bic.w	r2, r2, #2
 8004f26:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f30:	d112      	bne.n	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7ff fcd3 	bl	80048e8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fcab 	bl	80048a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004f50:	e011      	b.n	8004f76 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004f52:	bf00      	nop
 8004f54:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	461a      	mov	r2, r3
 8004f66:	f7ff fcbf 	bl	80048e8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fc98 	bl	80048a6 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	08db      	lsrs	r3, r3, #3
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d022      	beq.n	8004fde <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6919      	ldr	r1, [r3, #16]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fa8:	f7ff fbf2 	bl	8004790 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6919      	ldr	r1, [r3, #16]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f7ff fc3e 	bl	800483a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d102      	bne.n	8004fd4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd2:	e000      	b.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f7ff fc4a 	bl	8004870 <LL_ADC_SetOffsetSaturation>
 8004fdc:	e179      	b.n	80052d2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fbf7 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fbec 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005000:	4603      	mov	r3, r0
 8005002:	0e9b      	lsrs	r3, r3, #26
 8005004:	f003 021f 	and.w	r2, r3, #31
 8005008:	e01e      	b.n	8005048 <HAL_ADCEx_InjectedConfigChannel+0x390>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fbe1 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005016:	4603      	mov	r3, r0
 8005018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800502c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8005038:	2320      	movs	r3, #32
 800503a:	e004      	b.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 800503c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005040:	fab3 f383 	clz	r3, r3
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	0e9b      	lsrs	r3, r3, #26
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	e018      	b.n	8005092 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800507c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8005084:	2320      	movs	r3, #32
 8005086:	e004      	b.n	8005092 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8005088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800508c:	fab3 f383 	clz	r3, r3
 8005090:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005092:	429a      	cmp	r2, r3
 8005094:	d106      	bne.n	80050a4 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fbb0 	bl	8004804 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2101      	movs	r1, #1
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fb94 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2101      	movs	r1, #1
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fb89 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80050c6:	4603      	mov	r3, r0
 80050c8:	0e9b      	lsrs	r3, r3, #26
 80050ca:	f003 021f 	and.w	r2, r3, #31
 80050ce:	e01e      	b.n	800510e <HAL_ADCEx_InjectedConfigChannel+0x456>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2101      	movs	r1, #1
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fb7e 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80050dc:	4603      	mov	r3, r0
 80050de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80050ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80050f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80050fe:	2320      	movs	r3, #32
 8005100:	e004      	b.n	800510c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8005102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005106:	fab3 f383 	clz	r3, r3
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	0e9b      	lsrs	r3, r3, #26
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	e018      	b.n	8005158 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800513a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800513e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800514a:	2320      	movs	r3, #32
 800514c:	e004      	b.n	8005158 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800514e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005152:	fab3 f383 	clz	r3, r3
 8005156:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2200      	movs	r2, #0
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fb4d 	bl	8004804 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2102      	movs	r1, #2
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fb31 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2102      	movs	r1, #2
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fb26 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	0e9b      	lsrs	r3, r3, #26
 8005190:	f003 021f 	and.w	r2, r3, #31
 8005194:	e01e      	b.n	80051d4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2102      	movs	r1, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fb1b 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051ac:	fa93 f3a3 	rbit	r3, r3
 80051b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80051b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80051bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80051c4:	2320      	movs	r3, #32
 80051c6:	e004      	b.n	80051d2 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80051c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051cc:	fab3 f383 	clz	r3, r3
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <HAL_ADCEx_InjectedConfigChannel+0x534>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	0e9b      	lsrs	r3, r3, #26
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	e014      	b.n	8005216 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051f4:	fa93 f3a3 	rbit	r3, r3
 80051f8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80051fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005208:	2320      	movs	r3, #32
 800520a:	e004      	b.n	8005216 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 800520c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005210:	fab3 f383 	clz	r3, r3
 8005214:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005216:	429a      	cmp	r2, r3
 8005218:	d106      	bne.n	8005228 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	2102      	movs	r1, #2
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff faee 	bl	8004804 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2103      	movs	r1, #3
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fad2 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005234:	4603      	mov	r3, r0
 8005236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2103      	movs	r1, #3
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fac7 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 800524a:	4603      	mov	r3, r0
 800524c:	0e9b      	lsrs	r3, r3, #26
 800524e:	f003 021f 	and.w	r2, r3, #31
 8005252:	e017      	b.n	8005284 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2103      	movs	r1, #3
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fabc 	bl	80047d8 <LL_ADC_GetOffsetChannel>
 8005260:	4603      	mov	r3, r0
 8005262:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005266:	fa93 f3a3 	rbit	r3, r3
 800526a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8005276:	2320      	movs	r3, #32
 8005278:	e003      	b.n	8005282 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800527a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800527c:	fab3 f383 	clz	r3, r3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0e9b      	lsrs	r3, r3, #26
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	e011      	b.n	80052c0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80052aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80052ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80052b4:	2320      	movs	r3, #32
 80052b6:	e003      	b.n	80052c0 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80052b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052ba:	fab3 f383 	clz	r3, r3
 80052be:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d106      	bne.n	80052d2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2103      	movs	r1, #3
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fa99 	bl	8004804 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fb68 	bl	80049ac <LL_ADC_IsEnabled>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 813d 	bne.w	800555e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6819      	ldr	r1, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	461a      	mov	r2, r3
 80052f2:	f7ff fb25 	bl	8004940 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4aa2      	ldr	r2, [pc, #648]	; (8005584 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	f040 812e 	bne.w	800555e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10b      	bne.n	800532a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	0e9b      	lsrs	r3, r3, #26
 8005318:	3301      	adds	r3, #1
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2b09      	cmp	r3, #9
 8005320:	bf94      	ite	ls
 8005322:	2301      	movls	r3, #1
 8005324:	2300      	movhi	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e019      	b.n	800535e <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800533a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800533c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005342:	2320      	movs	r3, #32
 8005344:	e003      	b.n	800534e <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8005346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	b2db      	uxtb	r3, r3
 800534e:	3301      	adds	r3, #1
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2b09      	cmp	r3, #9
 8005356:	bf94      	ite	ls
 8005358:	2301      	movls	r3, #1
 800535a:	2300      	movhi	r3, #0
 800535c:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800535e:	2b00      	cmp	r3, #0
 8005360:	d079      	beq.n	8005456 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	0e9b      	lsrs	r3, r3, #26
 8005374:	3301      	adds	r3, #1
 8005376:	069b      	lsls	r3, r3, #26
 8005378:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800537c:	e015      	b.n	80053aa <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	fa93 f3a3 	rbit	r3, r3
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800538c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8005396:	2320      	movs	r3, #32
 8005398:	e003      	b.n	80053a2 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800539a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	3301      	adds	r3, #1
 80053a4:	069b      	lsls	r3, r3, #26
 80053a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_ADCEx_InjectedConfigChannel+0x712>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	0e9b      	lsrs	r3, r3, #26
 80053bc:	3301      	adds	r3, #1
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	2101      	movs	r1, #1
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	e017      	b.n	80053fa <HAL_ADCEx_InjectedConfigChannel+0x742>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80053d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053da:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80053dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80053e2:	2320      	movs	r3, #32
 80053e4:	e003      	b.n	80053ee <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80053e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e8:	fab3 f383 	clz	r3, r3
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	ea42 0103 	orr.w	r1, r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0e9b      	lsrs	r3, r3, #26
 8005410:	3301      	adds	r3, #1
 8005412:	f003 021f 	and.w	r2, r3, #31
 8005416:	4613      	mov	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4413      	add	r3, r2
 800541c:	051b      	lsls	r3, r3, #20
 800541e:	e018      	b.n	8005452 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	fa93 f3a3 	rbit	r3, r3
 800542c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005438:	2320      	movs	r3, #32
 800543a:	e003      	b.n	8005444 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	fab3 f383 	clz	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	3301      	adds	r3, #1
 8005446:	f003 021f 	and.w	r2, r3, #31
 800544a:	4613      	mov	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	4413      	add	r3, r2
 8005450:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005452:	430b      	orrs	r3, r1
 8005454:	e07e      	b.n	8005554 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	0e9b      	lsrs	r3, r3, #26
 8005468:	3301      	adds	r3, #1
 800546a:	069b      	lsls	r3, r3, #26
 800546c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005470:	e015      	b.n	800549e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800548a:	2320      	movs	r3, #32
 800548c:	e003      	b.n	8005496 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	fab3 f383 	clz	r3, r3
 8005494:	b2db      	uxtb	r3, r3
 8005496:	3301      	adds	r3, #1
 8005498:	069b      	lsls	r3, r3, #26
 800549a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <HAL_ADCEx_InjectedConfigChannel+0x806>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	0e9b      	lsrs	r3, r3, #26
 80054b0:	3301      	adds	r3, #1
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2101      	movs	r1, #1
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	e017      	b.n	80054ee <HAL_ADCEx_InjectedConfigChannel+0x836>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	fa93 f3a3 	rbit	r3, r3
 80054ca:	61bb      	str	r3, [r7, #24]
  return result;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80054d6:	2320      	movs	r3, #32
 80054d8:	e003      	b.n	80054e2 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	fab3 f383 	clz	r3, r3
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	3301      	adds	r3, #1
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2101      	movs	r1, #1
 80054ea:	fa01 f303 	lsl.w	r3, r1, r3
 80054ee:	ea42 0103 	orr.w	r1, r2, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <HAL_ADCEx_InjectedConfigChannel+0x862>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	0e9b      	lsrs	r3, r3, #26
 8005504:	3301      	adds	r3, #1
 8005506:	f003 021f 	and.w	r2, r3, #31
 800550a:	4613      	mov	r3, r2
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	4413      	add	r3, r2
 8005510:	3b1e      	subs	r3, #30
 8005512:	051b      	lsls	r3, r3, #20
 8005514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005518:	e01b      	b.n	8005552 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	fa93 f3a3 	rbit	r3, r3
 8005526:	60fb      	str	r3, [r7, #12]
  return result;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8005532:	2320      	movs	r3, #32
 8005534:	e003      	b.n	800553e <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	fab3 f383 	clz	r3, r3
 800553c:	b2db      	uxtb	r3, r3
 800553e:	3301      	adds	r3, #1
 8005540:	f003 021f 	and.w	r2, r3, #31
 8005544:	4613      	mov	r3, r2
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	4413      	add	r3, r2
 800554a:	3b1e      	subs	r3, #30
 800554c:	051b      	lsls	r3, r3, #20
 800554e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005552:	430b      	orrs	r3, r1
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	6892      	ldr	r2, [r2, #8]
 8005558:	4619      	mov	r1, r3
 800555a:	f7ff f9c5 	bl	80048e8 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80b2 	beq.w	80056d0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005574:	d004      	beq.n	8005580 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d109      	bne.n	8005594 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8005582:	e008      	b.n	8005596 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8005584:	407f0000 	.word	0x407f0000
 8005588:	80080000 	.word	0x80080000
 800558c:	50000100 	.word	0x50000100
 8005590:	50000300 	.word	0x50000300
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f8eb 	bl	8004772 <LL_ADC_GetCommonPathInternalCh>
 800559c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a50      	ldr	r2, [pc, #320]	; (80056e8 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4f      	ldr	r2, [pc, #316]	; (80056ec <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d139      	bne.n	8005628 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d133      	bne.n	8005628 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c8:	d004      	beq.n	80055d4 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a48      	ldr	r2, [pc, #288]	; (80056f0 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d17a      	bne.n	80056ca <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055dc:	d004      	beq.n	80055e8 <HAL_ADCEx_InjectedConfigChannel+0x930>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a44      	ldr	r2, [pc, #272]	; (80056f4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_ADCEx_InjectedConfigChannel+0x934>
 80055e8:	4a43      	ldr	r2, [pc, #268]	; (80056f8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80055ea:	e000      	b.n	80055ee <HAL_ADCEx_InjectedConfigChannel+0x936>
 80055ec:	4a3d      	ldr	r2, [pc, #244]	; (80056e4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80055ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7ff f8a7 	bl	800474c <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80055fe:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	099b      	lsrs	r3, r3, #6
 8005604:	4a3e      	ldr	r2, [pc, #248]	; (8005700 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	099a      	lsrs	r2, r3, #6
 800560c:	4613      	mov	r3, r2
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	3318      	adds	r3, #24
 8005616:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005618:	e002      	b.n	8005620 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3b01      	subs	r3, #1
 800561e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f9      	bne.n	800561a <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005626:	e050      	b.n	80056ca <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a35      	ldr	r2, [pc, #212]	; (8005704 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d125      	bne.n	800567e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11f      	bne.n	800567e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d104      	bne.n	8005652 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2e      	ldr	r2, [pc, #184]	; (8005708 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d03d      	beq.n	80056ce <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800565a:	d004      	beq.n	8005666 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8005666:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005668:	e000      	b.n	800566c <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800566a:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800566c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7ff f868 	bl	800474c <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800567c:	e027      	b.n	80056ce <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d123      	bne.n	80056d0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800568c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11d      	bne.n	80056d0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056a6:	d004      	beq.n	80056b2 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80056b4:	e000      	b.n	80056b8 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80056b6:	4a0b      	ldr	r2, [pc, #44]	; (80056e4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80056b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f7ff f842 	bl	800474c <LL_ADC_SetCommonPathInternalCh>
 80056c8:	e002      	b.n	80056d0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056ca:	bf00      	nop
 80056cc:	e000      	b.n	80056d0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056ce:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80056d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80056dc:	4618      	mov	r0, r3
 80056de:	37d8      	adds	r7, #216	; 0xd8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	50000700 	.word	0x50000700
 80056e8:	c3210000 	.word	0xc3210000
 80056ec:	90c00010 	.word	0x90c00010
 80056f0:	50000600 	.word	0x50000600
 80056f4:	50000100 	.word	0x50000100
 80056f8:	50000300 	.word	0x50000300
 80056fc:	20000000 	.word	0x20000000
 8005700:	053e2d63 	.word	0x053e2d63
 8005704:	c7520000 	.word	0xc7520000
 8005708:	50000500 	.word	0x50000500
 800570c:	cb840000 	.word	0xcb840000

08005710 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b0a1      	sub	sp, #132	; 0x84
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800572a:	2302      	movs	r3, #2
 800572c:	e0e7      	b.n	80058fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005736:	2300      	movs	r3, #0
 8005738:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800573a:	2300      	movs	r3, #0
 800573c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005746:	d102      	bne.n	800574e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005748:	4b6f      	ldr	r3, [pc, #444]	; (8005908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	e009      	b.n	8005762 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6e      	ldr	r2, [pc, #440]	; (800590c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d102      	bne.n	800575e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005758:	4b6d      	ldr	r3, [pc, #436]	; (8005910 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	e001      	b.n	8005762 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	f043 0220 	orr.w	r2, r3, #32
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e0be      	b.n	80058fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff f925 	bl	80049d2 <LL_ADC_REG_IsConversionOngoing>
 8005788:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff f91f 	bl	80049d2 <LL_ADC_REG_IsConversionOngoing>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 80a0 	bne.w	80058dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800579c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 809c 	bne.w	80058dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ac:	d004      	beq.n	80057b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a55      	ldr	r2, [pc, #340]	; (8005908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d101      	bne.n	80057bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80057b8:	4b56      	ldr	r3, [pc, #344]	; (8005914 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80057ba:	e000      	b.n	80057be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80057bc:	4b56      	ldr	r3, [pc, #344]	; (8005918 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80057be:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d04b      	beq.n	8005860 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80057c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057da:	035b      	lsls	r3, r3, #13
 80057dc:	430b      	orrs	r3, r1
 80057de:	431a      	orrs	r2, r3
 80057e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ec:	d004      	beq.n	80057f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a45      	ldr	r2, [pc, #276]	; (8005908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10f      	bne.n	8005818 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80057f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80057fc:	f7ff f8d6 	bl	80049ac <LL_ADC_IsEnabled>
 8005800:	4604      	mov	r4, r0
 8005802:	4841      	ldr	r0, [pc, #260]	; (8005908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005804:	f7ff f8d2 	bl	80049ac <LL_ADC_IsEnabled>
 8005808:	4603      	mov	r3, r0
 800580a:	4323      	orrs	r3, r4
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e012      	b.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005818:	483c      	ldr	r0, [pc, #240]	; (800590c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800581a:	f7ff f8c7 	bl	80049ac <LL_ADC_IsEnabled>
 800581e:	4604      	mov	r4, r0
 8005820:	483b      	ldr	r0, [pc, #236]	; (8005910 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005822:	f7ff f8c3 	bl	80049ac <LL_ADC_IsEnabled>
 8005826:	4603      	mov	r3, r0
 8005828:	431c      	orrs	r4, r3
 800582a:	483c      	ldr	r0, [pc, #240]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800582c:	f7ff f8be 	bl	80049ac <LL_ADC_IsEnabled>
 8005830:	4603      	mov	r3, r0
 8005832:	4323      	orrs	r3, r4
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d056      	beq.n	80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800584a:	f023 030f 	bic.w	r3, r3, #15
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	6811      	ldr	r1, [r2, #0]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	6892      	ldr	r2, [r2, #8]
 8005856:	430a      	orrs	r2, r1
 8005858:	431a      	orrs	r2, r3
 800585a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800585e:	e047      	b.n	80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800586a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005874:	d004      	beq.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a23      	ldr	r2, [pc, #140]	; (8005908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10f      	bne.n	80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005880:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005884:	f7ff f892 	bl	80049ac <LL_ADC_IsEnabled>
 8005888:	4604      	mov	r4, r0
 800588a:	481f      	ldr	r0, [pc, #124]	; (8005908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800588c:	f7ff f88e 	bl	80049ac <LL_ADC_IsEnabled>
 8005890:	4603      	mov	r3, r0
 8005892:	4323      	orrs	r3, r4
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf0c      	ite	eq
 8005898:	2301      	moveq	r3, #1
 800589a:	2300      	movne	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e012      	b.n	80058c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80058a0:	481a      	ldr	r0, [pc, #104]	; (800590c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80058a2:	f7ff f883 	bl	80049ac <LL_ADC_IsEnabled>
 80058a6:	4604      	mov	r4, r0
 80058a8:	4819      	ldr	r0, [pc, #100]	; (8005910 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80058aa:	f7ff f87f 	bl	80049ac <LL_ADC_IsEnabled>
 80058ae:	4603      	mov	r3, r0
 80058b0:	431c      	orrs	r4, r3
 80058b2:	481a      	ldr	r0, [pc, #104]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80058b4:	f7ff f87a 	bl	80049ac <LL_ADC_IsEnabled>
 80058b8:	4603      	mov	r3, r0
 80058ba:	4323      	orrs	r3, r4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d012      	beq.n	80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80058d2:	f023 030f 	bic.w	r3, r3, #15
 80058d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80058d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058da:	e009      	b.n	80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80058ee:	e000      	b.n	80058f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80058fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3784      	adds	r7, #132	; 0x84
 8005902:	46bd      	mov	sp, r7
 8005904:	bd90      	pop	{r4, r7, pc}
 8005906:	bf00      	nop
 8005908:	50000100 	.word	0x50000100
 800590c:	50000400 	.word	0x50000400
 8005910:	50000500 	.word	0x50000500
 8005914:	50000300 	.word	0x50000300
 8005918:	50000700 	.word	0x50000700
 800591c:	50000600 	.word	0x50000600

08005920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <__NVIC_SetPriorityGrouping+0x44>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800593c:	4013      	ands	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800594c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005952:	4a04      	ldr	r2, [pc, #16]	; (8005964 <__NVIC_SetPriorityGrouping+0x44>)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	60d3      	str	r3, [r2, #12]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	e000ed00 	.word	0xe000ed00

08005968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <__NVIC_GetPriorityGrouping+0x18>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	0a1b      	lsrs	r3, r3, #8
 8005972:	f003 0307 	and.w	r3, r3, #7
}
 8005976:	4618      	mov	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	e000ed00 	.word	0xe000ed00

08005984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	2b00      	cmp	r3, #0
 8005994:	db0b      	blt.n	80059ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	f003 021f 	and.w	r2, r3, #31
 800599c:	4907      	ldr	r1, [pc, #28]	; (80059bc <__NVIC_EnableIRQ+0x38>)
 800599e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2001      	movs	r0, #1
 80059a6:	fa00 f202 	lsl.w	r2, r0, r2
 80059aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	e000e100 	.word	0xe000e100

080059c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	6039      	str	r1, [r7, #0]
 80059ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	db0a      	blt.n	80059ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	490c      	ldr	r1, [pc, #48]	; (8005a0c <__NVIC_SetPriority+0x4c>)
 80059da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059de:	0112      	lsls	r2, r2, #4
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	440b      	add	r3, r1
 80059e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059e8:	e00a      	b.n	8005a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	4908      	ldr	r1, [pc, #32]	; (8005a10 <__NVIC_SetPriority+0x50>)
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	3b04      	subs	r3, #4
 80059f8:	0112      	lsls	r2, r2, #4
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	440b      	add	r3, r1
 80059fe:	761a      	strb	r2, [r3, #24]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	e000e100 	.word	0xe000e100
 8005a10:	e000ed00 	.word	0xe000ed00

08005a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b089      	sub	sp, #36	; 0x24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f1c3 0307 	rsb	r3, r3, #7
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	bf28      	it	cs
 8005a32:	2304      	movcs	r3, #4
 8005a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	2b06      	cmp	r3, #6
 8005a3c:	d902      	bls.n	8005a44 <NVIC_EncodePriority+0x30>
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3b03      	subs	r3, #3
 8005a42:	e000      	b.n	8005a46 <NVIC_EncodePriority+0x32>
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a48:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43da      	mvns	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	401a      	ands	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	fa01 f303 	lsl.w	r3, r1, r3
 8005a66:	43d9      	mvns	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a6c:	4313      	orrs	r3, r2
         );
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3724      	adds	r7, #36	; 0x24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a8c:	d301      	bcc.n	8005a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e00f      	b.n	8005ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a92:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <SysTick_Config+0x40>)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a9a:	210f      	movs	r1, #15
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	f7ff ff8e 	bl	80059c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <SysTick_Config+0x40>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aaa:	4b04      	ldr	r3, [pc, #16]	; (8005abc <SysTick_Config+0x40>)
 8005aac:	2207      	movs	r2, #7
 8005aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	e000e010 	.word	0xe000e010

08005ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff29 	bl	8005920 <__NVIC_SetPriorityGrouping>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	4603      	mov	r3, r0
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ae4:	f7ff ff40 	bl	8005968 <__NVIC_GetPriorityGrouping>
 8005ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f7ff ff90 	bl	8005a14 <NVIC_EncodePriority>
 8005af4:	4602      	mov	r2, r0
 8005af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005afa:	4611      	mov	r1, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff ff5f 	bl	80059c0 <__NVIC_SetPriority>
}
 8005b02:	bf00      	nop
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	4603      	mov	r3, r0
 8005b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff ff33 	bl	8005984 <__NVIC_EnableIRQ>
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff ffa4 	bl	8005a7c <SysTick_Config>
 8005b34:	4603      	mov	r3, r0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e014      	b.n	8005b7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	791b      	ldrb	r3, [r3, #4]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d105      	bne.n	8005b66 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fc fe47 	bl	80027f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	795b      	ldrb	r3, [r3, #5]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_DAC_Start+0x16>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e043      	b.n	8005c20 <HAL_DAC_Start+0x9e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6819      	ldr	r1, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	409a      	lsls	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	f7fd f90b 	bl	8002dd8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10f      	bne.n	8005be8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d11d      	bne.n	8005c12 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	e014      	b.n	8005c12 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d107      	bne.n	8005c12 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0202 	orr.w	r2, r2, #2
 8005c10:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	3308      	adds	r3, #8
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e004      	b.n	8005c62 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3314      	adds	r3, #20
 8005c60:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	461a      	mov	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	795b      	ldrb	r3, [r3, #5]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_DAC_ConfigChannel+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e192      	b.n	8005fb6 <HAL_DAC_ConfigChannel+0x33e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d174      	bne.n	8005d8e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005ca4:	f7fd f88c 	bl	8002dc0 <HAL_GetTick>
 8005ca8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d134      	bne.n	8005d1a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cb0:	e011      	b.n	8005cd6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cb2:	f7fd f885 	bl	8002dc0 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d90a      	bls.n	8005cd6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f043 0208 	orr.w	r2, r3, #8
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2203      	movs	r2, #3
 8005cd0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e16f      	b.n	8005fb6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e6      	bne.n	8005cb2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	f7fd f877 	bl	8002dd8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40
 8005cf4:	e01e      	b.n	8005d34 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cf6:	f7fd f863 	bl	8002dc0 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d90a      	bls.n	8005d1a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f043 0208 	orr.w	r2, r3, #8
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2203      	movs	r2, #3
 8005d14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e14d      	b.n	8005fb6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dbe8      	blt.n	8005cf6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005d24:	2001      	movs	r0, #1
 8005d26:	f7fd f857 	bl	8002dd8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d32:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	ea02 0103 	and.w	r1, r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	21ff      	movs	r1, #255	; 0xff
 8005d70:	fa01 f303 	lsl.w	r3, r1, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	ea02 0103 	and.w	r1, r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	409a      	lsls	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d11d      	bne.n	8005dd2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	221f      	movs	r2, #31
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dae:	4013      	ands	r3, r2
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2207      	movs	r2, #7
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	4013      	ands	r3, r2
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d102      	bne.n	8005dfc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	e00f      	b.n	8005e1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d102      	bne.n	8005e0a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005e04:	2301      	movs	r3, #1
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	e008      	b.n	8005e1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005e12:	2301      	movs	r3, #1
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	e001      	b.n	8005e1c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	6a3a      	ldr	r2, [r7, #32]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3e:	4013      	ands	r3, r2
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	791b      	ldrb	r3, [r3, #4]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <HAL_DAC_ConfigChannel+0x1d8>
 8005e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e4e:	e000      	b.n	8005e52 <HAL_DAC_ConfigChannel+0x1da>
 8005e50:	2300      	movs	r3, #0
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	795b      	ldrb	r3, [r3, #5]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d102      	bne.n	8005e7c <HAL_DAC_ConfigChannel+0x204>
 8005e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7a:	e000      	b.n	8005e7e <HAL_DAC_ConfigChannel+0x206>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d114      	bne.n	8005ebe <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005e94:	f001 fa64 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 8005e98:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4a48      	ldr	r2, [pc, #288]	; (8005fc0 <HAL_DAC_ConfigChannel+0x348>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d904      	bls.n	8005eac <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	e00f      	b.n	8005ecc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4a45      	ldr	r2, [pc, #276]	; (8005fc4 <HAL_DAC_ConfigChannel+0x34c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d90a      	bls.n	8005eca <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	e006      	b.n	8005ecc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec8:	e000      	b.n	8005ecc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005eca:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eda:	4313      	orrs	r3, r2
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6819      	ldr	r1, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43da      	mvns	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	400a      	ands	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1e:	4013      	ands	r3, r2
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f36:	4313      	orrs	r3, r2
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6819      	ldr	r1, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	22c0      	movs	r2, #192	; 0xc0
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43da      	mvns	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	400a      	ands	r2, r1
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	089b      	lsrs	r3, r3, #2
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	ea02 0103 	and.w	r1, r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3728      	adds	r7, #40	; 0x28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	09896800 	.word	0x09896800
 8005fc4:	04c4b400 	.word	0x04c4b400

08005fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e08d      	b.n	80060f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4b47      	ldr	r3, [pc, #284]	; (8006100 <HAL_DMA_Init+0x138>)
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d80f      	bhi.n	8006006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b45      	ldr	r3, [pc, #276]	; (8006104 <HAL_DMA_Init+0x13c>)
 8005fee:	4413      	add	r3, r2
 8005ff0:	4a45      	ldr	r2, [pc, #276]	; (8006108 <HAL_DMA_Init+0x140>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	009a      	lsls	r2, r3, #2
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a42      	ldr	r2, [pc, #264]	; (800610c <HAL_DMA_Init+0x144>)
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
 8006004:	e00e      	b.n	8006024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	4b40      	ldr	r3, [pc, #256]	; (8006110 <HAL_DMA_Init+0x148>)
 800600e:	4413      	add	r3, r2
 8006010:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <HAL_DMA_Init+0x140>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	009a      	lsls	r2, r3, #2
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a3c      	ldr	r2, [pc, #240]	; (8006114 <HAL_DMA_Init+0x14c>)
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9b6 	bl	80063e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006084:	d102      	bne.n	800608c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80060a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d010      	beq.n	80060cc <HAL_DMA_Init+0x104>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d80c      	bhi.n	80060cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9d6 	bl	8006464 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	e008      	b.n	80060de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40020407 	.word	0x40020407
 8006104:	bffdfff8 	.word	0xbffdfff8
 8006108:	cccccccd 	.word	0xcccccccd
 800610c:	40020000 	.word	0x40020000
 8006110:	bffdfbf8 	.word	0xbffdfbf8
 8006114:	40020400 	.word	0x40020400

08006118 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_DMA_Start_IT+0x20>
 8006134:	2302      	movs	r3, #2
 8006136:	e066      	b.n	8006206 <HAL_DMA_Start_IT+0xee>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d155      	bne.n	80061f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f8fb 	bl	800636c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 020e 	orr.w	r2, r2, #14
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e00f      	b.n	80061b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0204 	bic.w	r2, r2, #4
 800619e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 020a 	orr.w	r2, r2, #10
 80061ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	e005      	b.n	8006204 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006200:	2302      	movs	r3, #2
 8006202:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	2204      	movs	r2, #4
 8006230:	409a      	lsls	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4013      	ands	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d026      	beq.n	8006288 <HAL_DMA_IRQHandler+0x7a>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d021      	beq.n	8006288 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0204 	bic.w	r2, r2, #4
 8006260:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006266:	f003 021f 	and.w	r2, r3, #31
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	2104      	movs	r1, #4
 8006270:	fa01 f202 	lsl.w	r2, r1, r2
 8006274:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	2b00      	cmp	r3, #0
 800627c:	d071      	beq.n	8006362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006286:	e06c      	b.n	8006362 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2202      	movs	r2, #2
 8006292:	409a      	lsls	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d02e      	beq.n	80062fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d029      	beq.n	80062fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 020a 	bic.w	r2, r2, #10
 80062c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	f003 021f 	and.w	r2, r3, #31
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	2102      	movs	r1, #2
 80062da:	fa01 f202 	lsl.w	r2, r1, r2
 80062de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d038      	beq.n	8006362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80062f8:	e033      	b.n	8006362 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2208      	movs	r2, #8
 8006304:	409a      	lsls	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d02a      	beq.n	8006364 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d025      	beq.n	8006364 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 020e 	bic.w	r2, r2, #14
 8006326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632c:	f003 021f 	and.w	r2, r3, #31
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	2101      	movs	r1, #1
 8006336:	fa01 f202 	lsl.w	r2, r1, r2
 800633a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006362:	bf00      	nop
 8006364:	bf00      	nop
}
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006382:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006394:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	f003 021f 	and.w	r2, r3, #31
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	2101      	movs	r1, #1
 80063a4:	fa01 f202 	lsl.w	r2, r1, r2
 80063a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d108      	bne.n	80063cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063ca:	e007      	b.n	80063dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b16      	ldr	r3, [pc, #88]	; (8006450 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d802      	bhi.n	8006402 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e001      	b.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006404:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	3b08      	subs	r3, #8
 8006412:	4a12      	ldr	r2, [pc, #72]	; (800645c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006414:	fba2 2303 	umull	r2, r3, r2, r3
 8006418:	091b      	lsrs	r3, r3, #4
 800641a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	009a      	lsls	r2, r3, #2
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4413      	add	r3, r2
 8006428:	461a      	mov	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006432:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	2201      	movs	r2, #1
 800643c:	409a      	lsls	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40020407 	.word	0x40020407
 8006454:	40020800 	.word	0x40020800
 8006458:	40020820 	.word	0x40020820
 800645c:	cccccccd 	.word	0xcccccccd
 8006460:	40020880 	.word	0x40020880

08006464 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006486:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3b01      	subs	r3, #1
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2201      	movs	r2, #1
 8006492:	409a      	lsls	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	1000823f 	.word	0x1000823f
 80064a8:	40020940 	.word	0x40020940

080064ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064ba:	e15a      	b.n	8006772 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	2101      	movs	r1, #1
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	fa01 f303 	lsl.w	r3, r1, r3
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 814c 	beq.w	800676c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d005      	beq.n	80064ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d130      	bne.n	800654e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	2203      	movs	r2, #3
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4013      	ands	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006522:	2201      	movs	r2, #1
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43db      	mvns	r3, r3
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4013      	ands	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	f003 0201 	and.w	r2, r3, #1
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d017      	beq.n	800658a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	2203      	movs	r2, #3
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	43db      	mvns	r3, r3
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4013      	ands	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d123      	bne.n	80065de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	08da      	lsrs	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3208      	adds	r2, #8
 800659e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	220f      	movs	r2, #15
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43db      	mvns	r3, r3
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4013      	ands	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	08da      	lsrs	r2, r3, #3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3208      	adds	r2, #8
 80065d8:	6939      	ldr	r1, [r7, #16]
 80065da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	2203      	movs	r2, #3
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	43db      	mvns	r3, r3
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4013      	ands	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f003 0203 	and.w	r2, r3, #3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80a6 	beq.w	800676c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006620:	4b5b      	ldr	r3, [pc, #364]	; (8006790 <HAL_GPIO_Init+0x2e4>)
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	4a5a      	ldr	r2, [pc, #360]	; (8006790 <HAL_GPIO_Init+0x2e4>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6613      	str	r3, [r2, #96]	; 0x60
 800662c:	4b58      	ldr	r3, [pc, #352]	; (8006790 <HAL_GPIO_Init+0x2e4>)
 800662e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006638:	4a56      	ldr	r2, [pc, #344]	; (8006794 <HAL_GPIO_Init+0x2e8>)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	089b      	lsrs	r3, r3, #2
 800663e:	3302      	adds	r3, #2
 8006640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	220f      	movs	r2, #15
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4013      	ands	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006662:	d01f      	beq.n	80066a4 <HAL_GPIO_Init+0x1f8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a4c      	ldr	r2, [pc, #304]	; (8006798 <HAL_GPIO_Init+0x2ec>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d019      	beq.n	80066a0 <HAL_GPIO_Init+0x1f4>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a4b      	ldr	r2, [pc, #300]	; (800679c <HAL_GPIO_Init+0x2f0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <HAL_GPIO_Init+0x1f0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a4a      	ldr	r2, [pc, #296]	; (80067a0 <HAL_GPIO_Init+0x2f4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00d      	beq.n	8006698 <HAL_GPIO_Init+0x1ec>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a49      	ldr	r2, [pc, #292]	; (80067a4 <HAL_GPIO_Init+0x2f8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <HAL_GPIO_Init+0x1e8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a48      	ldr	r2, [pc, #288]	; (80067a8 <HAL_GPIO_Init+0x2fc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <HAL_GPIO_Init+0x1e4>
 800668c:	2305      	movs	r3, #5
 800668e:	e00a      	b.n	80066a6 <HAL_GPIO_Init+0x1fa>
 8006690:	2306      	movs	r3, #6
 8006692:	e008      	b.n	80066a6 <HAL_GPIO_Init+0x1fa>
 8006694:	2304      	movs	r3, #4
 8006696:	e006      	b.n	80066a6 <HAL_GPIO_Init+0x1fa>
 8006698:	2303      	movs	r3, #3
 800669a:	e004      	b.n	80066a6 <HAL_GPIO_Init+0x1fa>
 800669c:	2302      	movs	r3, #2
 800669e:	e002      	b.n	80066a6 <HAL_GPIO_Init+0x1fa>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <HAL_GPIO_Init+0x1fa>
 80066a4:	2300      	movs	r3, #0
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	f002 0203 	and.w	r2, r2, #3
 80066ac:	0092      	lsls	r2, r2, #2
 80066ae:	4093      	lsls	r3, r2
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066b6:	4937      	ldr	r1, [pc, #220]	; (8006794 <HAL_GPIO_Init+0x2e8>)
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	089b      	lsrs	r3, r3, #2
 80066bc:	3302      	adds	r3, #2
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066c4:	4b39      	ldr	r3, [pc, #228]	; (80067ac <HAL_GPIO_Init+0x300>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	43db      	mvns	r3, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4013      	ands	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066e8:	4a30      	ldr	r2, [pc, #192]	; (80067ac <HAL_GPIO_Init+0x300>)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066ee:	4b2f      	ldr	r3, [pc, #188]	; (80067ac <HAL_GPIO_Init+0x300>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	43db      	mvns	r3, r3
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006712:	4a26      	ldr	r2, [pc, #152]	; (80067ac <HAL_GPIO_Init+0x300>)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006718:	4b24      	ldr	r3, [pc, #144]	; (80067ac <HAL_GPIO_Init+0x300>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	43db      	mvns	r3, r3
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4013      	ands	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800673c:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <HAL_GPIO_Init+0x300>)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006742:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <HAL_GPIO_Init+0x300>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	43db      	mvns	r3, r3
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4013      	ands	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006766:	4a11      	ldr	r2, [pc, #68]	; (80067ac <HAL_GPIO_Init+0x300>)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	3301      	adds	r3, #1
 8006770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	f47f ae9d 	bne.w	80064bc <HAL_GPIO_Init+0x10>
  }
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40021000 	.word	0x40021000
 8006794:	40010000 	.word	0x40010000
 8006798:	48000400 	.word	0x48000400
 800679c:	48000800 	.word	0x48000800
 80067a0:	48000c00 	.word	0x48000c00
 80067a4:	48001000 	.word	0x48001000
 80067a8:	48001400 	.word	0x48001400
 80067ac:	40010400 	.word	0x40010400

080067b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	887b      	ldrh	r3, [r7, #2]
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
 80067cc:	e001      	b.n	80067d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	807b      	strh	r3, [r7, #2]
 80067ec:	4613      	mov	r3, r2
 80067ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067f0:	787b      	ldrb	r3, [r7, #1]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067f6:	887a      	ldrh	r2, [r7, #2]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067fc:	e002      	b.n	8006804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067fe:	887a      	ldrh	r2, [r7, #2]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006822:	887a      	ldrh	r2, [r7, #2]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4013      	ands	r3, r2
 8006828:	041a      	lsls	r2, r3, #16
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	43d9      	mvns	r1, r3
 800682e:	887b      	ldrh	r3, [r7, #2]
 8006830:	400b      	ands	r3, r1
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	619a      	str	r2, [r3, #24]
}
 8006838:	bf00      	nop
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800684e:	4b08      	ldr	r3, [pc, #32]	; (8006870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	4013      	ands	r3, r2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800685a:	4a05      	ldr	r2, [pc, #20]	; (8006870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f806 	bl	8006874 <HAL_GPIO_EXTI_Callback>
  }
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40010400 	.word	0x40010400

08006874 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d141      	bne.n	800691e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800689a:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a6:	d131      	bne.n	800690c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068a8:	4b47      	ldr	r3, [pc, #284]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ae:	4a46      	ldr	r2, [pc, #280]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068b8:	4b43      	ldr	r3, [pc, #268]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068c0:	4a41      	ldr	r2, [pc, #260]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068c8:	4b40      	ldr	r3, [pc, #256]	; (80069cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2232      	movs	r2, #50	; 0x32
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	4a3f      	ldr	r2, [pc, #252]	; (80069d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	0c9b      	lsrs	r3, r3, #18
 80068da:	3301      	adds	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068de:	e002      	b.n	80068e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068e6:	4b38      	ldr	r3, [pc, #224]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f2:	d102      	bne.n	80068fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f2      	bne.n	80068e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068fa:	4b33      	ldr	r3, [pc, #204]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006906:	d158      	bne.n	80069ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e057      	b.n	80069bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800690c:	4b2e      	ldr	r3, [pc, #184]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006912:	4a2d      	ldr	r2, [pc, #180]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800691c:	e04d      	b.n	80069ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d141      	bne.n	80069aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006926:	4b28      	ldr	r3, [pc, #160]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800692e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006932:	d131      	bne.n	8006998 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006934:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693a:	4a23      	ldr	r2, [pc, #140]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800693c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006944:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800694c:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800694e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006954:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2232      	movs	r2, #50	; 0x32
 800695a:	fb02 f303 	mul.w	r3, r2, r3
 800695e:	4a1c      	ldr	r2, [pc, #112]	; (80069d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006960:	fba2 2303 	umull	r2, r3, r2, r3
 8006964:	0c9b      	lsrs	r3, r3, #18
 8006966:	3301      	adds	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800696a:	e002      	b.n	8006972 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3b01      	subs	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697e:	d102      	bne.n	8006986 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f2      	bne.n	800696c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006992:	d112      	bne.n	80069ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e011      	b.n	80069bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006998:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800699a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699e:	4a0a      	ldr	r2, [pc, #40]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80069a8:	e007      	b.n	80069ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069b2:	4a05      	ldr	r2, [pc, #20]	; (80069c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40007000 	.word	0x40007000
 80069cc:	20000000 	.word	0x20000000
 80069d0:	431bde83 	.word	0x431bde83

080069d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069e2:	6093      	str	r3, [r2, #8]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40007000 	.word	0x40007000

080069f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e306      	b.n	8007014 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d075      	beq.n	8006afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a12:	4b97      	ldr	r3, [pc, #604]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a1c:	4b94      	ldr	r3, [pc, #592]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCC_OscConfig+0x3e>
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d002      	beq.n	8006a38 <HAL_RCC_OscConfig+0x44>
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d10b      	bne.n	8006a50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a38:	4b8d      	ldr	r3, [pc, #564]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d05b      	beq.n	8006afc <HAL_RCC_OscConfig+0x108>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d157      	bne.n	8006afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e2e1      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a58:	d106      	bne.n	8006a68 <HAL_RCC_OscConfig+0x74>
 8006a5a:	4b85      	ldr	r3, [pc, #532]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a84      	ldr	r2, [pc, #528]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e01d      	b.n	8006aa4 <HAL_RCC_OscConfig+0xb0>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a70:	d10c      	bne.n	8006a8c <HAL_RCC_OscConfig+0x98>
 8006a72:	4b7f      	ldr	r3, [pc, #508]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a7e      	ldr	r2, [pc, #504]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	4b7c      	ldr	r3, [pc, #496]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a7b      	ldr	r2, [pc, #492]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	e00b      	b.n	8006aa4 <HAL_RCC_OscConfig+0xb0>
 8006a8c:	4b78      	ldr	r3, [pc, #480]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a77      	ldr	r2, [pc, #476]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	4b75      	ldr	r3, [pc, #468]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a74      	ldr	r2, [pc, #464]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d013      	beq.n	8006ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fc f988 	bl	8002dc0 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab4:	f7fc f984 	bl	8002dc0 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	; 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e2a6      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ac6:	4b6a      	ldr	r3, [pc, #424]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCC_OscConfig+0xc0>
 8006ad2:	e014      	b.n	8006afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fc f974 	bl	8002dc0 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006adc:	f7fc f970 	bl	8002dc0 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b64      	cmp	r3, #100	; 0x64
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e292      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aee:	4b60      	ldr	r3, [pc, #384]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0xe8>
 8006afa:	e000      	b.n	8006afe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d075      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b0a:	4b59      	ldr	r3, [pc, #356]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 030c 	and.w	r3, r3, #12
 8006b12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b14:	4b56      	ldr	r3, [pc, #344]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d102      	bne.n	8006b2a <HAL_RCC_OscConfig+0x136>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d002      	beq.n	8006b30 <HAL_RCC_OscConfig+0x13c>
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d11f      	bne.n	8006b70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b30:	4b4f      	ldr	r3, [pc, #316]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_RCC_OscConfig+0x154>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e265      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b48:	4b49      	ldr	r3, [pc, #292]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	061b      	lsls	r3, r3, #24
 8006b56:	4946      	ldr	r1, [pc, #280]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b5c:	4b45      	ldr	r3, [pc, #276]	; (8006c74 <HAL_RCC_OscConfig+0x280>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fc f8e1 	bl	8002d28 <HAL_InitTick>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d043      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e251      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d023      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b78:	4b3d      	ldr	r3, [pc, #244]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a3c      	ldr	r2, [pc, #240]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fc f91c 	bl	8002dc0 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8c:	f7fc f918 	bl	8002dc0 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e23a      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b9e:	4b34      	ldr	r3, [pc, #208]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006baa:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	061b      	lsls	r3, r3, #24
 8006bb8:	492d      	ldr	r1, [pc, #180]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	604b      	str	r3, [r1, #4]
 8006bbe:	e01a      	b.n	8006bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2a      	ldr	r2, [pc, #168]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bcc:	f7fc f8f8 	bl	8002dc0 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bd4:	f7fc f8f4 	bl	8002dc0 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e216      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006be6:	4b22      	ldr	r3, [pc, #136]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x1e0>
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0308 	and.w	r3, r3, #8
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d041      	beq.n	8006c86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01c      	beq.n	8006c44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c0a:	4b19      	ldr	r3, [pc, #100]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c10:	4a17      	ldr	r2, [pc, #92]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1a:	f7fc f8d1 	bl	8002dc0 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c22:	f7fc f8cd 	bl	8002dc0 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e1ef      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c34:	4b0e      	ldr	r3, [pc, #56]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0ef      	beq.n	8006c22 <HAL_RCC_OscConfig+0x22e>
 8006c42:	e020      	b.n	8006c86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c44:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4a:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <HAL_RCC_OscConfig+0x27c>)
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c54:	f7fc f8b4 	bl	8002dc0 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c5a:	e00d      	b.n	8006c78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c5c:	f7fc f8b0 	bl	8002dc0 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d906      	bls.n	8006c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e1d2      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
 8006c6e:	bf00      	nop
 8006c70:	40021000 	.word	0x40021000
 8006c74:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c78:	4b8c      	ldr	r3, [pc, #560]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1ea      	bne.n	8006c5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80a6 	beq.w	8006de0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c94:	2300      	movs	r3, #0
 8006c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c98:	4b84      	ldr	r3, [pc, #528]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x2b4>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <HAL_RCC_OscConfig+0x2b6>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cae:	4b7f      	ldr	r3, [pc, #508]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	4a7e      	ldr	r2, [pc, #504]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8006cba:	4b7c      	ldr	r3, [pc, #496]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cca:	4b79      	ldr	r3, [pc, #484]	; (8006eb0 <HAL_RCC_OscConfig+0x4bc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d118      	bne.n	8006d08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd6:	4b76      	ldr	r3, [pc, #472]	; (8006eb0 <HAL_RCC_OscConfig+0x4bc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a75      	ldr	r2, [pc, #468]	; (8006eb0 <HAL_RCC_OscConfig+0x4bc>)
 8006cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ce2:	f7fc f86d 	bl	8002dc0 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cea:	f7fc f869 	bl	8002dc0 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e18b      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cfc:	4b6c      	ldr	r3, [pc, #432]	; (8006eb0 <HAL_RCC_OscConfig+0x4bc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f0      	beq.n	8006cea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d108      	bne.n	8006d22 <HAL_RCC_OscConfig+0x32e>
 8006d10:	4b66      	ldr	r3, [pc, #408]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d16:	4a65      	ldr	r2, [pc, #404]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d20:	e024      	b.n	8006d6c <HAL_RCC_OscConfig+0x378>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d110      	bne.n	8006d4c <HAL_RCC_OscConfig+0x358>
 8006d2a:	4b60      	ldr	r3, [pc, #384]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d30:	4a5e      	ldr	r2, [pc, #376]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d32:	f043 0304 	orr.w	r3, r3, #4
 8006d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d3a:	4b5c      	ldr	r3, [pc, #368]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d40:	4a5a      	ldr	r2, [pc, #360]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d4a:	e00f      	b.n	8006d6c <HAL_RCC_OscConfig+0x378>
 8006d4c:	4b57      	ldr	r3, [pc, #348]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d52:	4a56      	ldr	r2, [pc, #344]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d5c:	4b53      	ldr	r3, [pc, #332]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d62:	4a52      	ldr	r2, [pc, #328]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d016      	beq.n	8006da2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d74:	f7fc f824 	bl	8002dc0 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d7a:	e00a      	b.n	8006d92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7c:	f7fc f820 	bl	8002dc0 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e140      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d92:	4b46      	ldr	r3, [pc, #280]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0ed      	beq.n	8006d7c <HAL_RCC_OscConfig+0x388>
 8006da0:	e015      	b.n	8006dce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da2:	f7fc f80d 	bl	8002dc0 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006daa:	f7fc f809 	bl	8002dc0 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e129      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dc0:	4b3a      	ldr	r3, [pc, #232]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1ed      	bne.n	8006daa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dce:	7ffb      	ldrb	r3, [r7, #31]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d105      	bne.n	8006de0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dd4:	4b35      	ldr	r3, [pc, #212]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd8:	4a34      	ldr	r2, [pc, #208]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d03c      	beq.n	8006e66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01c      	beq.n	8006e2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dfa:	4a2c      	ldr	r2, [pc, #176]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006dfc:	f043 0301 	orr.w	r3, r3, #1
 8006e00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e04:	f7fb ffdc 	bl	8002dc0 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e0c:	f7fb ffd8 	bl	8002dc0 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e0fa      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e1e:	4b23      	ldr	r3, [pc, #140]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0ef      	beq.n	8006e0c <HAL_RCC_OscConfig+0x418>
 8006e2c:	e01b      	b.n	8006e66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e34:	4a1d      	ldr	r2, [pc, #116]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3e:	f7fb ffbf 	bl	8002dc0 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e46:	f7fb ffbb 	bl	8002dc0 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e0dd      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e58:	4b14      	ldr	r3, [pc, #80]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1ef      	bne.n	8006e46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 80d1 	beq.w	8007012 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	f000 808b 	beq.w	8006f94 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d15e      	bne.n	8006f44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a08      	ldr	r2, [pc, #32]	; (8006eac <HAL_RCC_OscConfig+0x4b8>)
 8006e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e92:	f7fb ff95 	bl	8002dc0 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e98:	e00c      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9a:	f7fb ff91 	bl	8002dc0 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d905      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e0b3      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eb4:	4b59      	ldr	r3, [pc, #356]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1ec      	bne.n	8006e9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ec0:	4b56      	ldr	r3, [pc, #344]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	4b56      	ldr	r3, [pc, #344]	; (8007020 <HAL_RCC_OscConfig+0x62c>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6a11      	ldr	r1, [r2, #32]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ed0:	3a01      	subs	r2, #1
 8006ed2:	0112      	lsls	r2, r2, #4
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006eda:	0212      	lsls	r2, r2, #8
 8006edc:	4311      	orrs	r1, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ee2:	0852      	lsrs	r2, r2, #1
 8006ee4:	3a01      	subs	r2, #1
 8006ee6:	0552      	lsls	r2, r2, #21
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006eee:	0852      	lsrs	r2, r2, #1
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	0652      	lsls	r2, r2, #25
 8006ef4:	4311      	orrs	r1, r2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006efa:	06d2      	lsls	r2, r2, #27
 8006efc:	430a      	orrs	r2, r1
 8006efe:	4947      	ldr	r1, [pc, #284]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f04:	4b45      	ldr	r3, [pc, #276]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a44      	ldr	r2, [pc, #272]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f10:	4b42      	ldr	r3, [pc, #264]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	4a41      	ldr	r2, [pc, #260]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1c:	f7fb ff50 	bl	8002dc0 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f24:	f7fb ff4c 	bl	8002dc0 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e06e      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f36:	4b39      	ldr	r3, [pc, #228]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0x530>
 8006f42:	e066      	b.n	8007012 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f44:	4b35      	ldr	r3, [pc, #212]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a34      	ldr	r2, [pc, #208]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f50:	4b32      	ldr	r3, [pc, #200]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4a31      	ldr	r2, [pc, #196]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f5c:	4b2f      	ldr	r3, [pc, #188]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	4a2e      	ldr	r2, [pc, #184]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fb ff28 	bl	8002dc0 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f74:	f7fb ff24 	bl	8002dc0 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e046      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f86:	4b25      	ldr	r3, [pc, #148]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f0      	bne.n	8006f74 <HAL_RCC_OscConfig+0x580>
 8006f92:	e03e      	b.n	8007012 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e039      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006fa0:	4b1e      	ldr	r3, [pc, #120]	; (800701c <HAL_RCC_OscConfig+0x628>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f003 0203 	and.w	r2, r3, #3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d12c      	bne.n	800700e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d123      	bne.n	800700e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d11b      	bne.n	800700e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d113      	bne.n	800700e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d109      	bne.n	800700e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	3b01      	subs	r3, #1
 8007008:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800700a:	429a      	cmp	r2, r3
 800700c:	d001      	beq.n	8007012 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3720      	adds	r7, #32
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	40021000 	.word	0x40021000
 8007020:	019f800c 	.word	0x019f800c

08007024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e11e      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800703c:	4b91      	ldr	r3, [pc, #580]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d910      	bls.n	800706c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b8e      	ldr	r3, [pc, #568]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f023 020f 	bic.w	r2, r3, #15
 8007052:	498c      	ldr	r1, [pc, #560]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	4313      	orrs	r3, r2
 8007058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800705a:	4b8a      	ldr	r3, [pc, #552]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d001      	beq.n	800706c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e106      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d073      	beq.n	8007160 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d129      	bne.n	80070d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007080:	4b81      	ldr	r3, [pc, #516]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e0f4      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007090:	f000 f99e 	bl	80073d0 <RCC_GetSysClockFreqFromPLLSource>
 8007094:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4a7c      	ldr	r2, [pc, #496]	; (800728c <HAL_RCC_ClockConfig+0x268>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d93f      	bls.n	800711e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800709e:	4b7a      	ldr	r3, [pc, #488]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d033      	beq.n	800711e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d12f      	bne.n	800711e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070be:	4b72      	ldr	r3, [pc, #456]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070c6:	4a70      	ldr	r2, [pc, #448]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070ce:	2380      	movs	r3, #128	; 0x80
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	e024      	b.n	800711e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d107      	bne.n	80070ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070dc:	4b6a      	ldr	r3, [pc, #424]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0c6      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ec:	4b66      	ldr	r3, [pc, #408]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0be      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070fc:	f000 f8ce 	bl	800729c <HAL_RCC_GetSysClockFreq>
 8007100:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4a61      	ldr	r2, [pc, #388]	; (800728c <HAL_RCC_ClockConfig+0x268>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d909      	bls.n	800711e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800710a:	4b5f      	ldr	r3, [pc, #380]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007112:	4a5d      	ldr	r2, [pc, #372]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800711a:	2380      	movs	r3, #128	; 0x80
 800711c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800711e:	4b5a      	ldr	r3, [pc, #360]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 0203 	bic.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4957      	ldr	r1, [pc, #348]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800712c:	4313      	orrs	r3, r2
 800712e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007130:	f7fb fe46 	bl	8002dc0 <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	e00a      	b.n	800714e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007138:	f7fb fe42 	bl	8002dc0 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	; 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e095      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	4b4e      	ldr	r3, [pc, #312]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 020c 	and.w	r2, r3, #12
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	429a      	cmp	r2, r3
 800715e:	d1eb      	bne.n	8007138 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d023      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007178:	4b43      	ldr	r3, [pc, #268]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a42      	ldr	r2, [pc, #264]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800717e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007182:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007190:	4b3d      	ldr	r3, [pc, #244]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007198:	4a3b      	ldr	r2, [pc, #236]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800719a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800719e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a0:	4b39      	ldr	r3, [pc, #228]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	4936      	ldr	r1, [pc, #216]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b80      	cmp	r3, #128	; 0x80
 80071b8:	d105      	bne.n	80071c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80071ba:	4b33      	ldr	r3, [pc, #204]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	4a32      	ldr	r2, [pc, #200]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071c6:	4b2f      	ldr	r3, [pc, #188]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d21d      	bcs.n	8007210 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d4:	4b2b      	ldr	r3, [pc, #172]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f023 020f 	bic.w	r2, r3, #15
 80071dc:	4929      	ldr	r1, [pc, #164]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071e4:	f7fb fdec 	bl	8002dc0 <HAL_GetTick>
 80071e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	e00a      	b.n	8007202 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ec:	f7fb fde8 	bl	8002dc0 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e03b      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007202:	4b20      	ldr	r3, [pc, #128]	; (8007284 <HAL_RCC_ClockConfig+0x260>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d1ed      	bne.n	80071ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4917      	ldr	r1, [pc, #92]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800722a:	4313      	orrs	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800723a:	4b13      	ldr	r3, [pc, #76]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	490f      	ldr	r1, [pc, #60]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 800724a:	4313      	orrs	r3, r2
 800724c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800724e:	f000 f825 	bl	800729c <HAL_RCC_GetSysClockFreq>
 8007252:	4602      	mov	r2, r0
 8007254:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	490c      	ldr	r1, [pc, #48]	; (8007290 <HAL_RCC_ClockConfig+0x26c>)
 8007260:	5ccb      	ldrb	r3, [r1, r3]
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	fa22 f303 	lsr.w	r3, r2, r3
 800726a:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <HAL_RCC_ClockConfig+0x270>)
 800726c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <HAL_RCC_ClockConfig+0x274>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fb fd58 	bl	8002d28 <HAL_InitTick>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40022000 	.word	0x40022000
 8007288:	40021000 	.word	0x40021000
 800728c:	04c4b400 	.word	0x04c4b400
 8007290:	0800b028 	.word	0x0800b028
 8007294:	20000000 	.word	0x20000000
 8007298:	20000004 	.word	0x20000004

0800729c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80072a2:	4b2c      	ldr	r3, [pc, #176]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d102      	bne.n	80072b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072ae:	4b2a      	ldr	r3, [pc, #168]	; (8007358 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	e047      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80072b4:	4b27      	ldr	r3, [pc, #156]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 030c 	and.w	r3, r3, #12
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d102      	bne.n	80072c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072c0:	4b26      	ldr	r3, [pc, #152]	; (800735c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	e03e      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80072c6:	4b23      	ldr	r3, [pc, #140]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 030c 	and.w	r3, r3, #12
 80072ce:	2b0c      	cmp	r3, #12
 80072d0:	d136      	bne.n	8007340 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072d2:	4b20      	ldr	r3, [pc, #128]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072dc:	4b1d      	ldr	r3, [pc, #116]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	091b      	lsrs	r3, r3, #4
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	3301      	adds	r3, #1
 80072e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d10c      	bne.n	800730a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072f0:	4a1a      	ldr	r2, [pc, #104]	; (800735c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	4a16      	ldr	r2, [pc, #88]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072fa:	68d2      	ldr	r2, [r2, #12]
 80072fc:	0a12      	lsrs	r2, r2, #8
 80072fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	617b      	str	r3, [r7, #20]
      break;
 8007308:	e00c      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800730a:	4a13      	ldr	r2, [pc, #76]	; (8007358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007314:	68d2      	ldr	r2, [r2, #12]
 8007316:	0a12      	lsrs	r2, r2, #8
 8007318:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800731c:	fb02 f303 	mul.w	r3, r2, r3
 8007320:	617b      	str	r3, [r7, #20]
      break;
 8007322:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	0e5b      	lsrs	r3, r3, #25
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	3301      	adds	r3, #1
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	fbb2 f3f3 	udiv	r3, r2, r3
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	e001      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007344:	693b      	ldr	r3, [r7, #16]
}
 8007346:	4618      	mov	r0, r3
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40021000 	.word	0x40021000
 8007358:	00f42400 	.word	0x00f42400
 800735c:	016e3600 	.word	0x016e3600

08007360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007364:	4b03      	ldr	r3, [pc, #12]	; (8007374 <HAL_RCC_GetHCLKFreq+0x14>)
 8007366:	681b      	ldr	r3, [r3, #0]
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000000 	.word	0x20000000

08007378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800737c:	f7ff fff0 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4904      	ldr	r1, [pc, #16]	; (80073a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40021000 	.word	0x40021000
 80073a0:	0800b038 	.word	0x0800b038

080073a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073a8:	f7ff ffda 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80073ac:	4602      	mov	r2, r0
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	0adb      	lsrs	r3, r3, #11
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	4904      	ldr	r1, [pc, #16]	; (80073cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ba:	5ccb      	ldrb	r3, [r1, r3]
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40021000 	.word	0x40021000
 80073cc:	0800b038 	.word	0x0800b038

080073d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073d6:	4b1e      	ldr	r3, [pc, #120]	; (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073e0:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	091b      	lsrs	r3, r3, #4
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d10c      	bne.n	800740e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073f4:	4a17      	ldr	r2, [pc, #92]	; (8007454 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fc:	4a14      	ldr	r2, [pc, #80]	; (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073fe:	68d2      	ldr	r2, [r2, #12]
 8007400:	0a12      	lsrs	r2, r2, #8
 8007402:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	617b      	str	r3, [r7, #20]
    break;
 800740c:	e00c      	b.n	8007428 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800740e:	4a12      	ldr	r2, [pc, #72]	; (8007458 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	fbb2 f3f3 	udiv	r3, r2, r3
 8007416:	4a0e      	ldr	r2, [pc, #56]	; (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007418:	68d2      	ldr	r2, [r2, #12]
 800741a:	0a12      	lsrs	r2, r2, #8
 800741c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]
    break;
 8007426:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007428:	4b09      	ldr	r3, [pc, #36]	; (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	0e5b      	lsrs	r3, r3, #25
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	3301      	adds	r3, #1
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007442:	687b      	ldr	r3, [r7, #4]
}
 8007444:	4618      	mov	r0, r3
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40021000 	.word	0x40021000
 8007454:	016e3600 	.word	0x016e3600
 8007458:	00f42400 	.word	0x00f42400

0800745c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007464:	2300      	movs	r3, #0
 8007466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007468:	2300      	movs	r3, #0
 800746a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8098 	beq.w	80075aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800747a:	2300      	movs	r3, #0
 800747c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800747e:	4b43      	ldr	r3, [pc, #268]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10d      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800748a:	4b40      	ldr	r3, [pc, #256]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748e:	4a3f      	ldr	r2, [pc, #252]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007494:	6593      	str	r3, [r2, #88]	; 0x58
 8007496:	4b3d      	ldr	r3, [pc, #244]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800749e:	60bb      	str	r3, [r7, #8]
 80074a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074a2:	2301      	movs	r3, #1
 80074a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074a6:	4b3a      	ldr	r3, [pc, #232]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a39      	ldr	r2, [pc, #228]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074b2:	f7fb fc85 	bl	8002dc0 <HAL_GetTick>
 80074b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b8:	e009      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ba:	f7fb fc81 	bl	8002dc0 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d902      	bls.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	74fb      	strb	r3, [r7, #19]
        break;
 80074cc:	e005      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ce:	4b30      	ldr	r3, [pc, #192]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0ef      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d159      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074e0:	4b2a      	ldr	r3, [pc, #168]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d01e      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d019      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074fc:	4b23      	ldr	r3, [pc, #140]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007508:	4b20      	ldr	r3, [pc, #128]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750e:	4a1f      	ldr	r2, [pc, #124]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007518:	4b1c      	ldr	r3, [pc, #112]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751e:	4a1b      	ldr	r2, [pc, #108]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007528:	4a18      	ldr	r2, [pc, #96]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d016      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753a:	f7fb fc41 	bl	8002dc0 <HAL_GetTick>
 800753e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007540:	e00b      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007542:	f7fb fc3d 	bl	8002dc0 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007550:	4293      	cmp	r3, r2
 8007552:	d902      	bls.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	74fb      	strb	r3, [r7, #19]
            break;
 8007558:	e006      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0ec      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757c:	4903      	ldr	r1, [pc, #12]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007584:	e008      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007586:	7cfb      	ldrb	r3, [r7, #19]
 8007588:	74bb      	strb	r3, [r7, #18]
 800758a:	e005      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800758c:	40021000 	.word	0x40021000
 8007590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	7cfb      	ldrb	r3, [r7, #19]
 8007596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007598:	7c7b      	ldrb	r3, [r7, #17]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d105      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800759e:	4ba7      	ldr	r3, [pc, #668]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a2:	4aa6      	ldr	r2, [pc, #664]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075b6:	4ba1      	ldr	r3, [pc, #644]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075bc:	f023 0203 	bic.w	r2, r3, #3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	499d      	ldr	r1, [pc, #628]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075d8:	4b98      	ldr	r3, [pc, #608]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075de:	f023 020c 	bic.w	r2, r3, #12
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	4995      	ldr	r1, [pc, #596]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075fa:	4b90      	ldr	r3, [pc, #576]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	498c      	ldr	r1, [pc, #560]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760a:	4313      	orrs	r3, r2
 800760c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800761c:	4b87      	ldr	r3, [pc, #540]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	4984      	ldr	r1, [pc, #528]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800763e:	4b7f      	ldr	r3, [pc, #508]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	497b      	ldr	r1, [pc, #492]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007660:	4b76      	ldr	r3, [pc, #472]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	4973      	ldr	r1, [pc, #460]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007670:	4313      	orrs	r3, r2
 8007672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007682:	4b6e      	ldr	r3, [pc, #440]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007688:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	496a      	ldr	r1, [pc, #424]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076a4:	4b65      	ldr	r3, [pc, #404]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	4962      	ldr	r1, [pc, #392]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076c6:	4b5d      	ldr	r3, [pc, #372]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	4959      	ldr	r1, [pc, #356]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076e8:	4b54      	ldr	r3, [pc, #336]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ee:	f023 0203 	bic.w	r2, r3, #3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	4951      	ldr	r1, [pc, #324]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800770a:	4b4c      	ldr	r3, [pc, #304]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007710:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	4948      	ldr	r1, [pc, #288]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007728:	2b00      	cmp	r3, #0
 800772a:	d015      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800772c:	4b43      	ldr	r3, [pc, #268]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007732:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	4940      	ldr	r1, [pc, #256]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774a:	d105      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800774c:	4b3b      	ldr	r3, [pc, #236]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	4a3a      	ldr	r2, [pc, #232]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007756:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007760:	2b00      	cmp	r3, #0
 8007762:	d015      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007764:	4b35      	ldr	r3, [pc, #212]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007772:	4932      	ldr	r1, [pc, #200]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007774:	4313      	orrs	r3, r2
 8007776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007782:	d105      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007784:	4b2d      	ldr	r3, [pc, #180]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	4a2c      	ldr	r2, [pc, #176]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800778e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d015      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800779c:	4b27      	ldr	r3, [pc, #156]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	4924      	ldr	r1, [pc, #144]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ba:	d105      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077bc:	4b1f      	ldr	r3, [pc, #124]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a1e      	ldr	r2, [pc, #120]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d015      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077d4:	4b19      	ldr	r3, [pc, #100]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e2:	4916      	ldr	r1, [pc, #88]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f2:	d105      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	4a10      	ldr	r2, [pc, #64]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d019      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800780c:	4b0b      	ldr	r3, [pc, #44]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	4908      	ldr	r1, [pc, #32]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781c:	4313      	orrs	r3, r2
 800781e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800782a:	d109      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800782c:	4b03      	ldr	r3, [pc, #12]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4a02      	ldr	r2, [pc, #8]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007836:	60d3      	str	r3, [r2, #12]
 8007838:	e002      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800783a:	bf00      	nop
 800783c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d015      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800784c:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	4926      	ldr	r1, [pc, #152]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800785c:	4313      	orrs	r3, r2
 800785e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786a:	d105      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800786c:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	4a20      	ldr	r2, [pc, #128]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007876:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d015      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007884:	4b1b      	ldr	r3, [pc, #108]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800788a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007892:	4918      	ldr	r1, [pc, #96]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007894:	4313      	orrs	r3, r2
 8007896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a2:	d105      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	4a12      	ldr	r2, [pc, #72]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d015      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078bc:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	490a      	ldr	r1, [pc, #40]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078da:	d105      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078dc:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	4a04      	ldr	r2, [pc, #16]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80078e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40021000 	.word	0x40021000

080078f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e049      	b.n	800799e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fb f8ae 	bl	8002a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f000 fe08 	bl	800854c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d001      	beq.n	80079c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e04c      	b.n	8007a5a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a26      	ldr	r2, [pc, #152]	; (8007a68 <HAL_TIM_Base_Start+0xc0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d022      	beq.n	8007a18 <HAL_TIM_Base_Start+0x70>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079da:	d01d      	beq.n	8007a18 <HAL_TIM_Base_Start+0x70>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a22      	ldr	r2, [pc, #136]	; (8007a6c <HAL_TIM_Base_Start+0xc4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d018      	beq.n	8007a18 <HAL_TIM_Base_Start+0x70>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a21      	ldr	r2, [pc, #132]	; (8007a70 <HAL_TIM_Base_Start+0xc8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <HAL_TIM_Base_Start+0x70>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1f      	ldr	r2, [pc, #124]	; (8007a74 <HAL_TIM_Base_Start+0xcc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00e      	beq.n	8007a18 <HAL_TIM_Base_Start+0x70>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <HAL_TIM_Base_Start+0xd0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d009      	beq.n	8007a18 <HAL_TIM_Base_Start+0x70>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1c      	ldr	r2, [pc, #112]	; (8007a7c <HAL_TIM_Base_Start+0xd4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d004      	beq.n	8007a18 <HAL_TIM_Base_Start+0x70>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <HAL_TIM_Base_Start+0xd8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d115      	bne.n	8007a44 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	4b19      	ldr	r3, [pc, #100]	; (8007a84 <HAL_TIM_Base_Start+0xdc>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b06      	cmp	r3, #6
 8007a28:	d015      	beq.n	8007a56 <HAL_TIM_Base_Start+0xae>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a30:	d011      	beq.n	8007a56 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0201 	orr.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a42:	e008      	b.n	8007a56 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e000      	b.n	8007a58 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40012c00 	.word	0x40012c00
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40013400 	.word	0x40013400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40015000 	.word	0x40015000
 8007a84:	00010007 	.word	0x00010007

08007a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d001      	beq.n	8007aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e054      	b.n	8007b4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a26      	ldr	r2, [pc, #152]	; (8007b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d022      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d01d      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a22      	ldr	r2, [pc, #136]	; (8007b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d018      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a21      	ldr	r2, [pc, #132]	; (8007b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1f      	ldr	r2, [pc, #124]	; (8007b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00e      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1e      	ldr	r2, [pc, #120]	; (8007b68 <HAL_TIM_Base_Start_IT+0xe0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a1c      	ldr	r2, [pc, #112]	; (8007b6c <HAL_TIM_Base_Start_IT+0xe4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a1b      	ldr	r2, [pc, #108]	; (8007b70 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d115      	bne.n	8007b34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	4b19      	ldr	r3, [pc, #100]	; (8007b74 <HAL_TIM_Base_Start_IT+0xec>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	d015      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0xbe>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b20:	d011      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0201 	orr.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b32:	e008      	b.n	8007b46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	e000      	b.n	8007b48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40015000 	.word	0x40015000
 8007b74:	00010007 	.word	0x00010007

08007b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e049      	b.n	8007c1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fa feee 	bl	8002980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f000 fcc8 	bl	800854c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <HAL_TIM_PWM_Start+0x24>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	bf14      	ite	ne
 8007c44:	2301      	movne	r3, #1
 8007c46:	2300      	moveq	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	e03c      	b.n	8007cc6 <HAL_TIM_PWM_Start+0x9e>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d109      	bne.n	8007c66 <HAL_TIM_PWM_Start+0x3e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	bf14      	ite	ne
 8007c5e:	2301      	movne	r3, #1
 8007c60:	2300      	moveq	r3, #0
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	e02f      	b.n	8007cc6 <HAL_TIM_PWM_Start+0x9e>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d109      	bne.n	8007c80 <HAL_TIM_PWM_Start+0x58>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	bf14      	ite	ne
 8007c78:	2301      	movne	r3, #1
 8007c7a:	2300      	moveq	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	e022      	b.n	8007cc6 <HAL_TIM_PWM_Start+0x9e>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b0c      	cmp	r3, #12
 8007c84:	d109      	bne.n	8007c9a <HAL_TIM_PWM_Start+0x72>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	bf14      	ite	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	2300      	moveq	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	e015      	b.n	8007cc6 <HAL_TIM_PWM_Start+0x9e>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d109      	bne.n	8007cb4 <HAL_TIM_PWM_Start+0x8c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	bf14      	ite	ne
 8007cac:	2301      	movne	r3, #1
 8007cae:	2300      	moveq	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	e008      	b.n	8007cc6 <HAL_TIM_PWM_Start+0x9e>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	bf14      	ite	ne
 8007cc0:	2301      	movne	r3, #1
 8007cc2:	2300      	moveq	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e0a6      	b.n	8007e1c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_PWM_Start+0xb6>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cdc:	e023      	b.n	8007d26 <HAL_TIM_PWM_Start+0xfe>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_PWM_Start+0xc6>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cec:	e01b      	b.n	8007d26 <HAL_TIM_PWM_Start+0xfe>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_PWM_Start+0xd6>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cfc:	e013      	b.n	8007d26 <HAL_TIM_PWM_Start+0xfe>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b0c      	cmp	r3, #12
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_PWM_Start+0xe6>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d0c:	e00b      	b.n	8007d26 <HAL_TIM_PWM_Start+0xfe>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d104      	bne.n	8007d1e <HAL_TIM_PWM_Start+0xf6>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d1c:	e003      	b.n	8007d26 <HAL_TIM_PWM_Start+0xfe>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 f908 	bl	8008f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3a      	ldr	r2, [pc, #232]	; (8007e24 <HAL_TIM_PWM_Start+0x1fc>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d018      	beq.n	8007d70 <HAL_TIM_PWM_Start+0x148>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a39      	ldr	r2, [pc, #228]	; (8007e28 <HAL_TIM_PWM_Start+0x200>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d013      	beq.n	8007d70 <HAL_TIM_PWM_Start+0x148>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a37      	ldr	r2, [pc, #220]	; (8007e2c <HAL_TIM_PWM_Start+0x204>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00e      	beq.n	8007d70 <HAL_TIM_PWM_Start+0x148>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a36      	ldr	r2, [pc, #216]	; (8007e30 <HAL_TIM_PWM_Start+0x208>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d009      	beq.n	8007d70 <HAL_TIM_PWM_Start+0x148>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a34      	ldr	r2, [pc, #208]	; (8007e34 <HAL_TIM_PWM_Start+0x20c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d004      	beq.n	8007d70 <HAL_TIM_PWM_Start+0x148>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a33      	ldr	r2, [pc, #204]	; (8007e38 <HAL_TIM_PWM_Start+0x210>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d101      	bne.n	8007d74 <HAL_TIM_PWM_Start+0x14c>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <HAL_TIM_PWM_Start+0x14e>
 8007d74:	2300      	movs	r3, #0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d007      	beq.n	8007d8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a25      	ldr	r2, [pc, #148]	; (8007e24 <HAL_TIM_PWM_Start+0x1fc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d022      	beq.n	8007dda <HAL_TIM_PWM_Start+0x1b2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9c:	d01d      	beq.n	8007dda <HAL_TIM_PWM_Start+0x1b2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a26      	ldr	r2, [pc, #152]	; (8007e3c <HAL_TIM_PWM_Start+0x214>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d018      	beq.n	8007dda <HAL_TIM_PWM_Start+0x1b2>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a24      	ldr	r2, [pc, #144]	; (8007e40 <HAL_TIM_PWM_Start+0x218>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <HAL_TIM_PWM_Start+0x1b2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a23      	ldr	r2, [pc, #140]	; (8007e44 <HAL_TIM_PWM_Start+0x21c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00e      	beq.n	8007dda <HAL_TIM_PWM_Start+0x1b2>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <HAL_TIM_PWM_Start+0x200>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d009      	beq.n	8007dda <HAL_TIM_PWM_Start+0x1b2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a18      	ldr	r2, [pc, #96]	; (8007e2c <HAL_TIM_PWM_Start+0x204>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d004      	beq.n	8007dda <HAL_TIM_PWM_Start+0x1b2>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a18      	ldr	r2, [pc, #96]	; (8007e38 <HAL_TIM_PWM_Start+0x210>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d115      	bne.n	8007e06 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	4b19      	ldr	r3, [pc, #100]	; (8007e48 <HAL_TIM_PWM_Start+0x220>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b06      	cmp	r3, #6
 8007dea:	d015      	beq.n	8007e18 <HAL_TIM_PWM_Start+0x1f0>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df2:	d011      	beq.n	8007e18 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0201 	orr.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e04:	e008      	b.n	8007e18 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0201 	orr.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e000      	b.n	8007e1a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40013400 	.word	0x40013400
 8007e2c:	40014000 	.word	0x40014000
 8007e30:	40014400 	.word	0x40014400
 8007e34:	40014800 	.word	0x40014800
 8007e38:	40015000 	.word	0x40015000
 8007e3c:	40000400 	.word	0x40000400
 8007e40:	40000800 	.word	0x40000800
 8007e44:	40000c00 	.word	0x40000c00
 8007e48:	00010007 	.word	0x00010007

08007e4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e049      	b.n	8007ef2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7fa fda4 	bl	80029c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	f000 fb5e 	bl	800854c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d104      	bne.n	8007f1a <HAL_TIM_IC_Start_IT+0x1e>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	e023      	b.n	8007f62 <HAL_TIM_IC_Start_IT+0x66>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d104      	bne.n	8007f2a <HAL_TIM_IC_Start_IT+0x2e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	e01b      	b.n	8007f62 <HAL_TIM_IC_Start_IT+0x66>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d104      	bne.n	8007f3a <HAL_TIM_IC_Start_IT+0x3e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	e013      	b.n	8007f62 <HAL_TIM_IC_Start_IT+0x66>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b0c      	cmp	r3, #12
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIM_IC_Start_IT+0x4e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	e00b      	b.n	8007f62 <HAL_TIM_IC_Start_IT+0x66>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b10      	cmp	r3, #16
 8007f4e:	d104      	bne.n	8007f5a <HAL_TIM_IC_Start_IT+0x5e>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	e003      	b.n	8007f62 <HAL_TIM_IC_Start_IT+0x66>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d104      	bne.n	8007f74 <HAL_TIM_IC_Start_IT+0x78>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	e013      	b.n	8007f9c <HAL_TIM_IC_Start_IT+0xa0>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	d104      	bne.n	8007f84 <HAL_TIM_IC_Start_IT+0x88>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	e00b      	b.n	8007f9c <HAL_TIM_IC_Start_IT+0xa0>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d104      	bne.n	8007f94 <HAL_TIM_IC_Start_IT+0x98>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	e003      	b.n	8007f9c <HAL_TIM_IC_Start_IT+0xa0>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d102      	bne.n	8007faa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fa4:	7b7b      	ldrb	r3, [r7, #13]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d001      	beq.n	8007fae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e0e2      	b.n	8008174 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <HAL_TIM_IC_Start_IT+0xc2>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fbc:	e023      	b.n	8008006 <HAL_TIM_IC_Start_IT+0x10a>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d104      	bne.n	8007fce <HAL_TIM_IC_Start_IT+0xd2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fcc:	e01b      	b.n	8008006 <HAL_TIM_IC_Start_IT+0x10a>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d104      	bne.n	8007fde <HAL_TIM_IC_Start_IT+0xe2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fdc:	e013      	b.n	8008006 <HAL_TIM_IC_Start_IT+0x10a>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b0c      	cmp	r3, #12
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_IC_Start_IT+0xf2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fec:	e00b      	b.n	8008006 <HAL_TIM_IC_Start_IT+0x10a>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_IC_Start_IT+0x102>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ffc:	e003      	b.n	8008006 <HAL_TIM_IC_Start_IT+0x10a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2202      	movs	r2, #2
 8008002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <HAL_TIM_IC_Start_IT+0x11a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008014:	e013      	b.n	800803e <HAL_TIM_IC_Start_IT+0x142>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b04      	cmp	r3, #4
 800801a:	d104      	bne.n	8008026 <HAL_TIM_IC_Start_IT+0x12a>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008024:	e00b      	b.n	800803e <HAL_TIM_IC_Start_IT+0x142>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b08      	cmp	r3, #8
 800802a:	d104      	bne.n	8008036 <HAL_TIM_IC_Start_IT+0x13a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008034:	e003      	b.n	800803e <HAL_TIM_IC_Start_IT+0x142>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b0c      	cmp	r3, #12
 8008042:	d841      	bhi.n	80080c8 <HAL_TIM_IC_Start_IT+0x1cc>
 8008044:	a201      	add	r2, pc, #4	; (adr r2, 800804c <HAL_TIM_IC_Start_IT+0x150>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	08008081 	.word	0x08008081
 8008050:	080080c9 	.word	0x080080c9
 8008054:	080080c9 	.word	0x080080c9
 8008058:	080080c9 	.word	0x080080c9
 800805c:	08008093 	.word	0x08008093
 8008060:	080080c9 	.word	0x080080c9
 8008064:	080080c9 	.word	0x080080c9
 8008068:	080080c9 	.word	0x080080c9
 800806c:	080080a5 	.word	0x080080a5
 8008070:	080080c9 	.word	0x080080c9
 8008074:	080080c9 	.word	0x080080c9
 8008078:	080080c9 	.word	0x080080c9
 800807c:	080080b7 	.word	0x080080b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0202 	orr.w	r2, r2, #2
 800808e:	60da      	str	r2, [r3, #12]
      break;
 8008090:	e01d      	b.n	80080ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0204 	orr.w	r2, r2, #4
 80080a0:	60da      	str	r2, [r3, #12]
      break;
 80080a2:	e014      	b.n	80080ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0208 	orr.w	r2, r2, #8
 80080b2:	60da      	str	r2, [r3, #12]
      break;
 80080b4:	e00b      	b.n	80080ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 0210 	orr.w	r2, r2, #16
 80080c4:	60da      	str	r2, [r3, #12]
      break;
 80080c6:	e002      	b.n	80080ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
      break;
 80080cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d14e      	bne.n	8008172 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2201      	movs	r2, #1
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 ff31 	bl	8008f44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a25      	ldr	r2, [pc, #148]	; (800817c <HAL_TIM_IC_Start_IT+0x280>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d022      	beq.n	8008132 <HAL_TIM_IC_Start_IT+0x236>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f4:	d01d      	beq.n	8008132 <HAL_TIM_IC_Start_IT+0x236>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a21      	ldr	r2, [pc, #132]	; (8008180 <HAL_TIM_IC_Start_IT+0x284>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d018      	beq.n	8008132 <HAL_TIM_IC_Start_IT+0x236>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1f      	ldr	r2, [pc, #124]	; (8008184 <HAL_TIM_IC_Start_IT+0x288>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d013      	beq.n	8008132 <HAL_TIM_IC_Start_IT+0x236>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1e      	ldr	r2, [pc, #120]	; (8008188 <HAL_TIM_IC_Start_IT+0x28c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00e      	beq.n	8008132 <HAL_TIM_IC_Start_IT+0x236>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a1c      	ldr	r2, [pc, #112]	; (800818c <HAL_TIM_IC_Start_IT+0x290>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d009      	beq.n	8008132 <HAL_TIM_IC_Start_IT+0x236>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <HAL_TIM_IC_Start_IT+0x294>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d004      	beq.n	8008132 <HAL_TIM_IC_Start_IT+0x236>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a19      	ldr	r2, [pc, #100]	; (8008194 <HAL_TIM_IC_Start_IT+0x298>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d115      	bne.n	800815e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	4b17      	ldr	r3, [pc, #92]	; (8008198 <HAL_TIM_IC_Start_IT+0x29c>)
 800813a:	4013      	ands	r3, r2
 800813c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b06      	cmp	r3, #6
 8008142:	d015      	beq.n	8008170 <HAL_TIM_IC_Start_IT+0x274>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800814a:	d011      	beq.n	8008170 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815c:	e008      	b.n	8008170 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0201 	orr.w	r2, r2, #1
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e000      	b.n	8008172 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008170:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40012c00 	.word	0x40012c00
 8008180:	40000400 	.word	0x40000400
 8008184:	40000800 	.word	0x40000800
 8008188:	40000c00 	.word	0x40000c00
 800818c:	40013400 	.word	0x40013400
 8008190:	40014000 	.word	0x40014000
 8008194:	40015000 	.word	0x40015000
 8008198:	00010007 	.word	0x00010007

0800819c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80081b6:	2302      	movs	r3, #2
 80081b8:	e088      	b.n	80082cc <HAL_TIM_IC_ConfigChannel+0x130>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11b      	bne.n	8008200 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f000 fd8a 	bl	8008cf0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 020c 	bic.w	r2, r2, #12
 80081ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6999      	ldr	r1, [r3, #24]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	619a      	str	r2, [r3, #24]
 80081fe:	e060      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b04      	cmp	r3, #4
 8008204:	d11c      	bne.n	8008240 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6819      	ldr	r1, [r3, #0]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f000 fddf 	bl	8008dd8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008228:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6999      	ldr	r1, [r3, #24]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	021a      	lsls	r2, r3, #8
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	619a      	str	r2, [r3, #24]
 800823e:	e040      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b08      	cmp	r3, #8
 8008244:	d11b      	bne.n	800827e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f000 fdfc 	bl	8008e52 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 020c 	bic.w	r2, r2, #12
 8008268:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69d9      	ldr	r1, [r3, #28]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	61da      	str	r2, [r3, #28]
 800827c:	e021      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b0c      	cmp	r3, #12
 8008282:	d11c      	bne.n	80082be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f000 fe19 	bl	8008eca <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69d9      	ldr	r1, [r3, #28]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	61da      	str	r2, [r3, #28]
 80082bc:	e001      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e0ff      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b14      	cmp	r3, #20
 80082fe:	f200 80f0 	bhi.w	80084e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080084e3 	.word	0x080084e3
 8008310:	080084e3 	.word	0x080084e3
 8008314:	080084e3 	.word	0x080084e3
 8008318:	0800839d 	.word	0x0800839d
 800831c:	080084e3 	.word	0x080084e3
 8008320:	080084e3 	.word	0x080084e3
 8008324:	080084e3 	.word	0x080084e3
 8008328:	080083df 	.word	0x080083df
 800832c:	080084e3 	.word	0x080084e3
 8008330:	080084e3 	.word	0x080084e3
 8008334:	080084e3 	.word	0x080084e3
 8008338:	0800841f 	.word	0x0800841f
 800833c:	080084e3 	.word	0x080084e3
 8008340:	080084e3 	.word	0x080084e3
 8008344:	080084e3 	.word	0x080084e3
 8008348:	08008461 	.word	0x08008461
 800834c:	080084e3 	.word	0x080084e3
 8008350:	080084e3 	.word	0x080084e3
 8008354:	080084e3 	.word	0x080084e3
 8008358:	080084a1 	.word	0x080084a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f99a 	bl	800869c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0208 	orr.w	r2, r2, #8
 8008376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0204 	bic.w	r2, r2, #4
 8008386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6999      	ldr	r1, [r3, #24]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	691a      	ldr	r2, [r3, #16]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	619a      	str	r2, [r3, #24]
      break;
 800839a:	e0a5      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fa14 	bl	80087d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6999      	ldr	r1, [r3, #24]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	021a      	lsls	r2, r3, #8
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	619a      	str	r2, [r3, #24]
      break;
 80083dc:	e084      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fa87 	bl	80088f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f042 0208 	orr.w	r2, r2, #8
 80083f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69da      	ldr	r2, [r3, #28]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0204 	bic.w	r2, r2, #4
 8008408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69d9      	ldr	r1, [r3, #28]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	61da      	str	r2, [r3, #28]
      break;
 800841c:	e064      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 faf9 	bl	8008a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69d9      	ldr	r1, [r3, #28]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	021a      	lsls	r2, r3, #8
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	61da      	str	r2, [r3, #28]
      break;
 800845e:	e043      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fb6c 	bl	8008b44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0208 	orr.w	r2, r2, #8
 800847a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0204 	bic.w	r2, r2, #4
 800848a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800849e:	e023      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68b9      	ldr	r1, [r7, #8]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fbb6 	bl	8008c18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80084e0:	e002      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
      break;
 80084e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop

080084fc <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_TIM_GenerateEvent+0x18>
 8008510:	2302      	movs	r3, #2
 8008512:	e014      	b.n	800853e <HAL_TIM_GenerateEvent+0x42>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a46      	ldr	r2, [pc, #280]	; (8008678 <TIM_Base_SetConfig+0x12c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d017      	beq.n	8008594 <TIM_Base_SetConfig+0x48>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856a:	d013      	beq.n	8008594 <TIM_Base_SetConfig+0x48>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a43      	ldr	r2, [pc, #268]	; (800867c <TIM_Base_SetConfig+0x130>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00f      	beq.n	8008594 <TIM_Base_SetConfig+0x48>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a42      	ldr	r2, [pc, #264]	; (8008680 <TIM_Base_SetConfig+0x134>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00b      	beq.n	8008594 <TIM_Base_SetConfig+0x48>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a41      	ldr	r2, [pc, #260]	; (8008684 <TIM_Base_SetConfig+0x138>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d007      	beq.n	8008594 <TIM_Base_SetConfig+0x48>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a40      	ldr	r2, [pc, #256]	; (8008688 <TIM_Base_SetConfig+0x13c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d003      	beq.n	8008594 <TIM_Base_SetConfig+0x48>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a3f      	ldr	r2, [pc, #252]	; (800868c <TIM_Base_SetConfig+0x140>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d108      	bne.n	80085a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a33      	ldr	r2, [pc, #204]	; (8008678 <TIM_Base_SetConfig+0x12c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d023      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b4:	d01f      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a30      	ldr	r2, [pc, #192]	; (800867c <TIM_Base_SetConfig+0x130>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d01b      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a2f      	ldr	r2, [pc, #188]	; (8008680 <TIM_Base_SetConfig+0x134>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d017      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a2e      	ldr	r2, [pc, #184]	; (8008684 <TIM_Base_SetConfig+0x138>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d013      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a2d      	ldr	r2, [pc, #180]	; (8008688 <TIM_Base_SetConfig+0x13c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d00f      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a2d      	ldr	r2, [pc, #180]	; (8008690 <TIM_Base_SetConfig+0x144>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a2c      	ldr	r2, [pc, #176]	; (8008694 <TIM_Base_SetConfig+0x148>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d007      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a2b      	ldr	r2, [pc, #172]	; (8008698 <TIM_Base_SetConfig+0x14c>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d003      	beq.n	80085f6 <TIM_Base_SetConfig+0xaa>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a26      	ldr	r2, [pc, #152]	; (800868c <TIM_Base_SetConfig+0x140>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d108      	bne.n	8008608 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a12      	ldr	r2, [pc, #72]	; (8008678 <TIM_Base_SetConfig+0x12c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d013      	beq.n	800865c <TIM_Base_SetConfig+0x110>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a14      	ldr	r2, [pc, #80]	; (8008688 <TIM_Base_SetConfig+0x13c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00f      	beq.n	800865c <TIM_Base_SetConfig+0x110>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a14      	ldr	r2, [pc, #80]	; (8008690 <TIM_Base_SetConfig+0x144>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00b      	beq.n	800865c <TIM_Base_SetConfig+0x110>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a13      	ldr	r2, [pc, #76]	; (8008694 <TIM_Base_SetConfig+0x148>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d007      	beq.n	800865c <TIM_Base_SetConfig+0x110>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a12      	ldr	r2, [pc, #72]	; (8008698 <TIM_Base_SetConfig+0x14c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_Base_SetConfig+0x110>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a0d      	ldr	r2, [pc, #52]	; (800868c <TIM_Base_SetConfig+0x140>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d103      	bne.n	8008664 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	615a      	str	r2, [r3, #20]
}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40012c00 	.word	0x40012c00
 800867c:	40000400 	.word	0x40000400
 8008680:	40000800 	.word	0x40000800
 8008684:	40000c00 	.word	0x40000c00
 8008688:	40013400 	.word	0x40013400
 800868c:	40015000 	.word	0x40015000
 8008690:	40014000 	.word	0x40014000
 8008694:	40014400 	.word	0x40014400
 8008698:	40014800 	.word	0x40014800

0800869c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	f023 0201 	bic.w	r2, r3, #1
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f023 0302 	bic.w	r3, r3, #2
 80086e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a30      	ldr	r2, [pc, #192]	; (80087b8 <TIM_OC1_SetConfig+0x11c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a2f      	ldr	r2, [pc, #188]	; (80087bc <TIM_OC1_SetConfig+0x120>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00f      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a2e      	ldr	r2, [pc, #184]	; (80087c0 <TIM_OC1_SetConfig+0x124>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d00b      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a2d      	ldr	r2, [pc, #180]	; (80087c4 <TIM_OC1_SetConfig+0x128>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d007      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a2c      	ldr	r2, [pc, #176]	; (80087c8 <TIM_OC1_SetConfig+0x12c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a2b      	ldr	r2, [pc, #172]	; (80087cc <TIM_OC1_SetConfig+0x130>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10c      	bne.n	800873e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0308 	bic.w	r3, r3, #8
 800872a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 0304 	bic.w	r3, r3, #4
 800873c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a1d      	ldr	r2, [pc, #116]	; (80087b8 <TIM_OC1_SetConfig+0x11c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a1c      	ldr	r2, [pc, #112]	; (80087bc <TIM_OC1_SetConfig+0x120>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d00f      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a1b      	ldr	r2, [pc, #108]	; (80087c0 <TIM_OC1_SetConfig+0x124>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00b      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a1a      	ldr	r2, [pc, #104]	; (80087c4 <TIM_OC1_SetConfig+0x128>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d007      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a19      	ldr	r2, [pc, #100]	; (80087c8 <TIM_OC1_SetConfig+0x12c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a18      	ldr	r2, [pc, #96]	; (80087cc <TIM_OC1_SetConfig+0x130>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d111      	bne.n	8008792 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800877c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	621a      	str	r2, [r3, #32]
}
 80087ac:	bf00      	nop
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	40012c00 	.word	0x40012c00
 80087bc:	40013400 	.word	0x40013400
 80087c0:	40014000 	.word	0x40014000
 80087c4:	40014400 	.word	0x40014400
 80087c8:	40014800 	.word	0x40014800
 80087cc:	40015000 	.word	0x40015000

080087d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f023 0210 	bic.w	r2, r3, #16
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800880a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f023 0320 	bic.w	r3, r3, #32
 800881e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a2c      	ldr	r2, [pc, #176]	; (80088e0 <TIM_OC2_SetConfig+0x110>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC2_SetConfig+0x74>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a2b      	ldr	r2, [pc, #172]	; (80088e4 <TIM_OC2_SetConfig+0x114>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC2_SetConfig+0x74>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a2a      	ldr	r2, [pc, #168]	; (80088e8 <TIM_OC2_SetConfig+0x118>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10d      	bne.n	8008860 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800885e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1f      	ldr	r2, [pc, #124]	; (80088e0 <TIM_OC2_SetConfig+0x110>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d013      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1e      	ldr	r2, [pc, #120]	; (80088e4 <TIM_OC2_SetConfig+0x114>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00f      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a1e      	ldr	r2, [pc, #120]	; (80088ec <TIM_OC2_SetConfig+0x11c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00b      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a1d      	ldr	r2, [pc, #116]	; (80088f0 <TIM_OC2_SetConfig+0x120>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d007      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a1c      	ldr	r2, [pc, #112]	; (80088f4 <TIM_OC2_SetConfig+0x124>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d003      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a17      	ldr	r2, [pc, #92]	; (80088e8 <TIM_OC2_SetConfig+0x118>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d113      	bne.n	80088b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800889e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
}
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	40012c00 	.word	0x40012c00
 80088e4:	40013400 	.word	0x40013400
 80088e8:	40015000 	.word	0x40015000
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400
 80088f4:	40014800 	.word	0x40014800

080088f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0303 	bic.w	r3, r3, #3
 8008932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2b      	ldr	r2, [pc, #172]	; (8008a04 <TIM_OC3_SetConfig+0x10c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d007      	beq.n	800896a <TIM_OC3_SetConfig+0x72>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a2a      	ldr	r2, [pc, #168]	; (8008a08 <TIM_OC3_SetConfig+0x110>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d003      	beq.n	800896a <TIM_OC3_SetConfig+0x72>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <TIM_OC3_SetConfig+0x114>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d10d      	bne.n	8008986 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a1e      	ldr	r2, [pc, #120]	; (8008a04 <TIM_OC3_SetConfig+0x10c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d013      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1d      	ldr	r2, [pc, #116]	; (8008a08 <TIM_OC3_SetConfig+0x110>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00f      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1d      	ldr	r2, [pc, #116]	; (8008a10 <TIM_OC3_SetConfig+0x118>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00b      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a1c      	ldr	r2, [pc, #112]	; (8008a14 <TIM_OC3_SetConfig+0x11c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d007      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1b      	ldr	r2, [pc, #108]	; (8008a18 <TIM_OC3_SetConfig+0x120>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d003      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a16      	ldr	r2, [pc, #88]	; (8008a0c <TIM_OC3_SetConfig+0x114>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d113      	bne.n	80089de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	40012c00 	.word	0x40012c00
 8008a08:	40013400 	.word	0x40013400
 8008a0c:	40015000 	.word	0x40015000
 8008a10:	40014000 	.word	0x40014000
 8008a14:	40014400 	.word	0x40014400
 8008a18:	40014800 	.word	0x40014800

08008a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	021b      	lsls	r3, r3, #8
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	031b      	lsls	r3, r3, #12
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a2c      	ldr	r2, [pc, #176]	; (8008b2c <TIM_OC4_SetConfig+0x110>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d007      	beq.n	8008a90 <TIM_OC4_SetConfig+0x74>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a2b      	ldr	r2, [pc, #172]	; (8008b30 <TIM_OC4_SetConfig+0x114>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_OC4_SetConfig+0x74>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a2a      	ldr	r2, [pc, #168]	; (8008b34 <TIM_OC4_SetConfig+0x118>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10d      	bne.n	8008aac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	031b      	lsls	r3, r3, #12
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <TIM_OC4_SetConfig+0x110>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d013      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a1e      	ldr	r2, [pc, #120]	; (8008b30 <TIM_OC4_SetConfig+0x114>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00f      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <TIM_OC4_SetConfig+0x11c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d00b      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a1d      	ldr	r2, [pc, #116]	; (8008b3c <TIM_OC4_SetConfig+0x120>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d007      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <TIM_OC4_SetConfig+0x124>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d003      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	; (8008b34 <TIM_OC4_SetConfig+0x118>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d113      	bne.n	8008b04 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ae2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	019b      	lsls	r3, r3, #6
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	019b      	lsls	r3, r3, #6
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	621a      	str	r2, [r3, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40013400 	.word	0x40013400
 8008b34:	40015000 	.word	0x40015000
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800

08008b44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a19      	ldr	r2, [pc, #100]	; (8008c00 <TIM_OC5_SetConfig+0xbc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a18      	ldr	r2, [pc, #96]	; (8008c04 <TIM_OC5_SetConfig+0xc0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00f      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a17      	ldr	r2, [pc, #92]	; (8008c08 <TIM_OC5_SetConfig+0xc4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a16      	ldr	r2, [pc, #88]	; (8008c0c <TIM_OC5_SetConfig+0xc8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a15      	ldr	r2, [pc, #84]	; (8008c10 <TIM_OC5_SetConfig+0xcc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <TIM_OC5_SetConfig+0xd0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d109      	bne.n	8008bda <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	621a      	str	r2, [r3, #32]
}
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	40012c00 	.word	0x40012c00
 8008c04:	40013400 	.word	0x40013400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400
 8008c10:	40014800 	.word	0x40014800
 8008c14:	40015000 	.word	0x40015000

08008c18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	021b      	lsls	r3, r3, #8
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a1a      	ldr	r2, [pc, #104]	; (8008cd8 <TIM_OC6_SetConfig+0xc0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d013      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <TIM_OC6_SetConfig+0xc4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00f      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a18      	ldr	r2, [pc, #96]	; (8008ce0 <TIM_OC6_SetConfig+0xc8>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00b      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a17      	ldr	r2, [pc, #92]	; (8008ce4 <TIM_OC6_SetConfig+0xcc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d007      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a16      	ldr	r2, [pc, #88]	; (8008ce8 <TIM_OC6_SetConfig+0xd0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d003      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a15      	ldr	r2, [pc, #84]	; (8008cec <TIM_OC6_SetConfig+0xd4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d109      	bne.n	8008cb0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	029b      	lsls	r3, r3, #10
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	621a      	str	r2, [r3, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40013400 	.word	0x40013400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40014400 	.word	0x40014400
 8008ce8:	40014800 	.word	0x40014800
 8008cec:	40015000 	.word	0x40015000

08008cf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	f023 0201 	bic.w	r2, r3, #1
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a28      	ldr	r2, [pc, #160]	; (8008dbc <TIM_TI1_SetConfig+0xcc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d01b      	beq.n	8008d56 <TIM_TI1_SetConfig+0x66>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d24:	d017      	beq.n	8008d56 <TIM_TI1_SetConfig+0x66>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4a25      	ldr	r2, [pc, #148]	; (8008dc0 <TIM_TI1_SetConfig+0xd0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <TIM_TI1_SetConfig+0x66>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4a24      	ldr	r2, [pc, #144]	; (8008dc4 <TIM_TI1_SetConfig+0xd4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00f      	beq.n	8008d56 <TIM_TI1_SetConfig+0x66>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4a23      	ldr	r2, [pc, #140]	; (8008dc8 <TIM_TI1_SetConfig+0xd8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00b      	beq.n	8008d56 <TIM_TI1_SetConfig+0x66>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4a22      	ldr	r2, [pc, #136]	; (8008dcc <TIM_TI1_SetConfig+0xdc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <TIM_TI1_SetConfig+0x66>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4a21      	ldr	r2, [pc, #132]	; (8008dd0 <TIM_TI1_SetConfig+0xe0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <TIM_TI1_SetConfig+0x66>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4a20      	ldr	r2, [pc, #128]	; (8008dd4 <TIM_TI1_SetConfig+0xe4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d101      	bne.n	8008d5a <TIM_TI1_SetConfig+0x6a>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <TIM_TI1_SetConfig+0x6c>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0303 	bic.w	r3, r3, #3
 8008d66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]
 8008d70:	e003      	b.n	8008d7a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f023 030a 	bic.w	r3, r3, #10
 8008d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f003 030a 	and.w	r3, r3, #10
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	621a      	str	r2, [r3, #32]
}
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	40012c00 	.word	0x40012c00
 8008dc0:	40000400 	.word	0x40000400
 8008dc4:	40000800 	.word	0x40000800
 8008dc8:	40000c00 	.word	0x40000c00
 8008dcc:	40013400 	.word	0x40013400
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40015000 	.word	0x40015000

08008dd8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f023 0210 	bic.w	r2, r3, #16
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	021b      	lsls	r3, r3, #8
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	031b      	lsls	r3, r3, #12
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b087      	sub	sp, #28
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f023 0303 	bic.w	r3, r3, #3
 8008e7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	621a      	str	r2, [r3, #32]
}
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b087      	sub	sp, #28
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	021b      	lsls	r3, r3, #8
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	031b      	lsls	r3, r3, #12
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008f1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	031b      	lsls	r3, r3, #12
 8008f22:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	621a      	str	r2, [r3, #32]
}
 8008f38:	bf00      	nop
 8008f3a:	371c      	adds	r7, #28
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 031f 	and.w	r3, r3, #31
 8008f56:	2201      	movs	r2, #1
 8008f58:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6a1a      	ldr	r2, [r3, #32]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	43db      	mvns	r3, r3
 8008f66:	401a      	ands	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a1a      	ldr	r2, [r3, #32]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f003 031f 	and.w	r3, r3, #31
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	621a      	str	r2, [r3, #32]
}
 8008f82:	bf00      	nop
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
	...

08008f90 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d109      	bne.n	8008fb4 <HAL_TIMEx_PWMN_Start+0x24>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	bf14      	ite	ne
 8008fac:	2301      	movne	r3, #1
 8008fae:	2300      	moveq	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	e022      	b.n	8008ffa <HAL_TIMEx_PWMN_Start+0x6a>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d109      	bne.n	8008fce <HAL_TIMEx_PWMN_Start+0x3e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	bf14      	ite	ne
 8008fc6:	2301      	movne	r3, #1
 8008fc8:	2300      	moveq	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	e015      	b.n	8008ffa <HAL_TIMEx_PWMN_Start+0x6a>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d109      	bne.n	8008fe8 <HAL_TIMEx_PWMN_Start+0x58>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	bf14      	ite	ne
 8008fe0:	2301      	movne	r3, #1
 8008fe2:	2300      	moveq	r3, #0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	e008      	b.n	8008ffa <HAL_TIMEx_PWMN_Start+0x6a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	bf14      	ite	ne
 8008ff4:	2301      	movne	r3, #1
 8008ff6:	2300      	moveq	r3, #0
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e073      	b.n	80090ea <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <HAL_TIMEx_PWMN_Start+0x82>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009010:	e013      	b.n	800903a <HAL_TIMEx_PWMN_Start+0xaa>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b04      	cmp	r3, #4
 8009016:	d104      	bne.n	8009022 <HAL_TIMEx_PWMN_Start+0x92>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009020:	e00b      	b.n	800903a <HAL_TIMEx_PWMN_Start+0xaa>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b08      	cmp	r3, #8
 8009026:	d104      	bne.n	8009032 <HAL_TIMEx_PWMN_Start+0xa2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009030:	e003      	b.n	800903a <HAL_TIMEx_PWMN_Start+0xaa>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2204      	movs	r2, #4
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f9ae 	bl	80093a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009056:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a25      	ldr	r2, [pc, #148]	; (80090f4 <HAL_TIMEx_PWMN_Start+0x164>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d022      	beq.n	80090a8 <HAL_TIMEx_PWMN_Start+0x118>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906a:	d01d      	beq.n	80090a8 <HAL_TIMEx_PWMN_Start+0x118>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a21      	ldr	r2, [pc, #132]	; (80090f8 <HAL_TIMEx_PWMN_Start+0x168>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d018      	beq.n	80090a8 <HAL_TIMEx_PWMN_Start+0x118>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a20      	ldr	r2, [pc, #128]	; (80090fc <HAL_TIMEx_PWMN_Start+0x16c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d013      	beq.n	80090a8 <HAL_TIMEx_PWMN_Start+0x118>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <HAL_TIMEx_PWMN_Start+0x170>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00e      	beq.n	80090a8 <HAL_TIMEx_PWMN_Start+0x118>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1d      	ldr	r2, [pc, #116]	; (8009104 <HAL_TIMEx_PWMN_Start+0x174>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d009      	beq.n	80090a8 <HAL_TIMEx_PWMN_Start+0x118>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1b      	ldr	r2, [pc, #108]	; (8009108 <HAL_TIMEx_PWMN_Start+0x178>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d004      	beq.n	80090a8 <HAL_TIMEx_PWMN_Start+0x118>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a1a      	ldr	r2, [pc, #104]	; (800910c <HAL_TIMEx_PWMN_Start+0x17c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d115      	bne.n	80090d4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	4b18      	ldr	r3, [pc, #96]	; (8009110 <HAL_TIMEx_PWMN_Start+0x180>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d015      	beq.n	80090e6 <HAL_TIMEx_PWMN_Start+0x156>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c0:	d011      	beq.n	80090e6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	e008      	b.n	80090e6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	e000      	b.n	80090e8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	40012c00 	.word	0x40012c00
 80090f8:	40000400 	.word	0x40000400
 80090fc:	40000800 	.word	0x40000800
 8009100:	40000c00 	.word	0x40000c00
 8009104:	40013400 	.word	0x40013400
 8009108:	40014000 	.word	0x40014000
 800910c:	40015000 	.word	0x40015000
 8009110:	00010007 	.word	0x00010007

08009114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009128:	2302      	movs	r3, #2
 800912a:	e074      	b.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a34      	ldr	r2, [pc, #208]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d009      	beq.n	800916a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a33      	ldr	r2, [pc, #204]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d004      	beq.n	800916a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a31      	ldr	r2, [pc, #196]	; (800922c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d108      	bne.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009170:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a21      	ldr	r2, [pc, #132]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d022      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ac:	d01d      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d018      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d013      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00e      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a15      	ldr	r2, [pc, #84]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d009      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a18      	ldr	r2, [pc, #96]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d004      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a11      	ldr	r2, [pc, #68]	; (800922c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d10c      	bne.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	40012c00 	.word	0x40012c00
 8009228:	40013400 	.word	0x40013400
 800922c:	40015000 	.word	0x40015000
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40000c00 	.word	0x40000c00
 800923c:	40014000 	.word	0x40014000

08009240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009258:	2302      	movs	r3, #2
 800925a:	e096      	b.n	800938a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a2f      	ldr	r2, [pc, #188]	; (8009398 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d009      	beq.n	80092f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a2d      	ldr	r2, [pc, #180]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d004      	beq.n	80092f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a2c      	ldr	r2, [pc, #176]	; (80093a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d106      	bne.n	8009302 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a24      	ldr	r2, [pc, #144]	; (8009398 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d009      	beq.n	8009320 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a22      	ldr	r2, [pc, #136]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d004      	beq.n	8009320 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a21      	ldr	r2, [pc, #132]	; (80093a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d12b      	bne.n	8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	051b      	lsls	r3, r3, #20
 800932c:	4313      	orrs	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	4313      	orrs	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a11      	ldr	r2, [pc, #68]	; (8009398 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d009      	beq.n	800936a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a10      	ldr	r2, [pc, #64]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d004      	beq.n	800936a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a0e      	ldr	r2, [pc, #56]	; (80093a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d106      	bne.n	8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	4313      	orrs	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40012c00 	.word	0x40012c00
 800939c:	40013400 	.word	0x40013400
 80093a0:	40015000 	.word	0x40015000

080093a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f003 031f 	and.w	r3, r3, #31
 80093b6:	2204      	movs	r2, #4
 80093b8:	fa02 f303 	lsl.w	r3, r2, r3
 80093bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a1a      	ldr	r2, [r3, #32]
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	43db      	mvns	r3, r3
 80093c6:	401a      	ands	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6a1a      	ldr	r2, [r3, #32]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f003 031f 	and.w	r3, r3, #31
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	fa01 f303 	lsl.w	r3, r1, r3
 80093dc:	431a      	orrs	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	621a      	str	r2, [r3, #32]
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e042      	b.n	8009486 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7f9 fa5c 	bl	80028d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2224      	movs	r2, #36	; 0x24
 800941c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0201 	bic.w	r2, r2, #1
 800942e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f82d 	bl	8009490 <UART_SetConfig>
 8009436:	4603      	mov	r3, r0
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e022      	b.n	8009486 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fb1d 	bl	8009a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800945c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800946c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0201 	orr.w	r2, r2, #1
 800947c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fba4 	bl	8009bcc <UART_CheckIdleState>
 8009484:	4603      	mov	r3, r0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009494:	b08c      	sub	sp, #48	; 0x30
 8009496:	af00      	add	r7, sp, #0
 8009498:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	431a      	orrs	r2, r3
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	431a      	orrs	r2, r3
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	4baa      	ldr	r3, [pc, #680]	; (8009768 <UART_SetConfig+0x2d8>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	6812      	ldr	r2, [r2, #0]
 80094c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a9f      	ldr	r2, [pc, #636]	; (800976c <UART_SetConfig+0x2dc>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d004      	beq.n	80094fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f8:	4313      	orrs	r3, r2
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009506:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	6812      	ldr	r2, [r2, #0]
 800950e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009510:	430b      	orrs	r3, r1
 8009512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	f023 010f 	bic.w	r1, r3, #15
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a90      	ldr	r2, [pc, #576]	; (8009770 <UART_SetConfig+0x2e0>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d125      	bne.n	8009580 <UART_SetConfig+0xf0>
 8009534:	4b8f      	ldr	r3, [pc, #572]	; (8009774 <UART_SetConfig+0x2e4>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	2b03      	cmp	r3, #3
 8009540:	d81a      	bhi.n	8009578 <UART_SetConfig+0xe8>
 8009542:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <UART_SetConfig+0xb8>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	08009559 	.word	0x08009559
 800954c:	08009569 	.word	0x08009569
 8009550:	08009561 	.word	0x08009561
 8009554:	08009571 	.word	0x08009571
 8009558:	2301      	movs	r3, #1
 800955a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800955e:	e116      	b.n	800978e <UART_SetConfig+0x2fe>
 8009560:	2302      	movs	r3, #2
 8009562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009566:	e112      	b.n	800978e <UART_SetConfig+0x2fe>
 8009568:	2304      	movs	r3, #4
 800956a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800956e:	e10e      	b.n	800978e <UART_SetConfig+0x2fe>
 8009570:	2308      	movs	r3, #8
 8009572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009576:	e10a      	b.n	800978e <UART_SetConfig+0x2fe>
 8009578:	2310      	movs	r3, #16
 800957a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800957e:	e106      	b.n	800978e <UART_SetConfig+0x2fe>
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a7c      	ldr	r2, [pc, #496]	; (8009778 <UART_SetConfig+0x2e8>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d138      	bne.n	80095fc <UART_SetConfig+0x16c>
 800958a:	4b7a      	ldr	r3, [pc, #488]	; (8009774 <UART_SetConfig+0x2e4>)
 800958c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009590:	f003 030c 	and.w	r3, r3, #12
 8009594:	2b0c      	cmp	r3, #12
 8009596:	d82d      	bhi.n	80095f4 <UART_SetConfig+0x164>
 8009598:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <UART_SetConfig+0x110>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095d5 	.word	0x080095d5
 80095a4:	080095f5 	.word	0x080095f5
 80095a8:	080095f5 	.word	0x080095f5
 80095ac:	080095f5 	.word	0x080095f5
 80095b0:	080095e5 	.word	0x080095e5
 80095b4:	080095f5 	.word	0x080095f5
 80095b8:	080095f5 	.word	0x080095f5
 80095bc:	080095f5 	.word	0x080095f5
 80095c0:	080095dd 	.word	0x080095dd
 80095c4:	080095f5 	.word	0x080095f5
 80095c8:	080095f5 	.word	0x080095f5
 80095cc:	080095f5 	.word	0x080095f5
 80095d0:	080095ed 	.word	0x080095ed
 80095d4:	2300      	movs	r3, #0
 80095d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095da:	e0d8      	b.n	800978e <UART_SetConfig+0x2fe>
 80095dc:	2302      	movs	r3, #2
 80095de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095e2:	e0d4      	b.n	800978e <UART_SetConfig+0x2fe>
 80095e4:	2304      	movs	r3, #4
 80095e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ea:	e0d0      	b.n	800978e <UART_SetConfig+0x2fe>
 80095ec:	2308      	movs	r3, #8
 80095ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095f2:	e0cc      	b.n	800978e <UART_SetConfig+0x2fe>
 80095f4:	2310      	movs	r3, #16
 80095f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095fa:	e0c8      	b.n	800978e <UART_SetConfig+0x2fe>
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a5e      	ldr	r2, [pc, #376]	; (800977c <UART_SetConfig+0x2ec>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d125      	bne.n	8009652 <UART_SetConfig+0x1c2>
 8009606:	4b5b      	ldr	r3, [pc, #364]	; (8009774 <UART_SetConfig+0x2e4>)
 8009608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009610:	2b30      	cmp	r3, #48	; 0x30
 8009612:	d016      	beq.n	8009642 <UART_SetConfig+0x1b2>
 8009614:	2b30      	cmp	r3, #48	; 0x30
 8009616:	d818      	bhi.n	800964a <UART_SetConfig+0x1ba>
 8009618:	2b20      	cmp	r3, #32
 800961a:	d00a      	beq.n	8009632 <UART_SetConfig+0x1a2>
 800961c:	2b20      	cmp	r3, #32
 800961e:	d814      	bhi.n	800964a <UART_SetConfig+0x1ba>
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <UART_SetConfig+0x19a>
 8009624:	2b10      	cmp	r3, #16
 8009626:	d008      	beq.n	800963a <UART_SetConfig+0x1aa>
 8009628:	e00f      	b.n	800964a <UART_SetConfig+0x1ba>
 800962a:	2300      	movs	r3, #0
 800962c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009630:	e0ad      	b.n	800978e <UART_SetConfig+0x2fe>
 8009632:	2302      	movs	r3, #2
 8009634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009638:	e0a9      	b.n	800978e <UART_SetConfig+0x2fe>
 800963a:	2304      	movs	r3, #4
 800963c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009640:	e0a5      	b.n	800978e <UART_SetConfig+0x2fe>
 8009642:	2308      	movs	r3, #8
 8009644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009648:	e0a1      	b.n	800978e <UART_SetConfig+0x2fe>
 800964a:	2310      	movs	r3, #16
 800964c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009650:	e09d      	b.n	800978e <UART_SetConfig+0x2fe>
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a4a      	ldr	r2, [pc, #296]	; (8009780 <UART_SetConfig+0x2f0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d125      	bne.n	80096a8 <UART_SetConfig+0x218>
 800965c:	4b45      	ldr	r3, [pc, #276]	; (8009774 <UART_SetConfig+0x2e4>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009662:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009666:	2bc0      	cmp	r3, #192	; 0xc0
 8009668:	d016      	beq.n	8009698 <UART_SetConfig+0x208>
 800966a:	2bc0      	cmp	r3, #192	; 0xc0
 800966c:	d818      	bhi.n	80096a0 <UART_SetConfig+0x210>
 800966e:	2b80      	cmp	r3, #128	; 0x80
 8009670:	d00a      	beq.n	8009688 <UART_SetConfig+0x1f8>
 8009672:	2b80      	cmp	r3, #128	; 0x80
 8009674:	d814      	bhi.n	80096a0 <UART_SetConfig+0x210>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <UART_SetConfig+0x1f0>
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	d008      	beq.n	8009690 <UART_SetConfig+0x200>
 800967e:	e00f      	b.n	80096a0 <UART_SetConfig+0x210>
 8009680:	2300      	movs	r3, #0
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009686:	e082      	b.n	800978e <UART_SetConfig+0x2fe>
 8009688:	2302      	movs	r3, #2
 800968a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800968e:	e07e      	b.n	800978e <UART_SetConfig+0x2fe>
 8009690:	2304      	movs	r3, #4
 8009692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009696:	e07a      	b.n	800978e <UART_SetConfig+0x2fe>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800969e:	e076      	b.n	800978e <UART_SetConfig+0x2fe>
 80096a0:	2310      	movs	r3, #16
 80096a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a6:	e072      	b.n	800978e <UART_SetConfig+0x2fe>
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a35      	ldr	r2, [pc, #212]	; (8009784 <UART_SetConfig+0x2f4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d12a      	bne.n	8009708 <UART_SetConfig+0x278>
 80096b2:	4b30      	ldr	r3, [pc, #192]	; (8009774 <UART_SetConfig+0x2e4>)
 80096b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096c0:	d01a      	beq.n	80096f8 <UART_SetConfig+0x268>
 80096c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096c6:	d81b      	bhi.n	8009700 <UART_SetConfig+0x270>
 80096c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096cc:	d00c      	beq.n	80096e8 <UART_SetConfig+0x258>
 80096ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d2:	d815      	bhi.n	8009700 <UART_SetConfig+0x270>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <UART_SetConfig+0x250>
 80096d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096dc:	d008      	beq.n	80096f0 <UART_SetConfig+0x260>
 80096de:	e00f      	b.n	8009700 <UART_SetConfig+0x270>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e6:	e052      	b.n	800978e <UART_SetConfig+0x2fe>
 80096e8:	2302      	movs	r3, #2
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ee:	e04e      	b.n	800978e <UART_SetConfig+0x2fe>
 80096f0:	2304      	movs	r3, #4
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f6:	e04a      	b.n	800978e <UART_SetConfig+0x2fe>
 80096f8:	2308      	movs	r3, #8
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fe:	e046      	b.n	800978e <UART_SetConfig+0x2fe>
 8009700:	2310      	movs	r3, #16
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009706:	e042      	b.n	800978e <UART_SetConfig+0x2fe>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a17      	ldr	r2, [pc, #92]	; (800976c <UART_SetConfig+0x2dc>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d13a      	bne.n	8009788 <UART_SetConfig+0x2f8>
 8009712:	4b18      	ldr	r3, [pc, #96]	; (8009774 <UART_SetConfig+0x2e4>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800971c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009720:	d01a      	beq.n	8009758 <UART_SetConfig+0x2c8>
 8009722:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009726:	d81b      	bhi.n	8009760 <UART_SetConfig+0x2d0>
 8009728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800972c:	d00c      	beq.n	8009748 <UART_SetConfig+0x2b8>
 800972e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009732:	d815      	bhi.n	8009760 <UART_SetConfig+0x2d0>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <UART_SetConfig+0x2b0>
 8009738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800973c:	d008      	beq.n	8009750 <UART_SetConfig+0x2c0>
 800973e:	e00f      	b.n	8009760 <UART_SetConfig+0x2d0>
 8009740:	2300      	movs	r3, #0
 8009742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009746:	e022      	b.n	800978e <UART_SetConfig+0x2fe>
 8009748:	2302      	movs	r3, #2
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974e:	e01e      	b.n	800978e <UART_SetConfig+0x2fe>
 8009750:	2304      	movs	r3, #4
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009756:	e01a      	b.n	800978e <UART_SetConfig+0x2fe>
 8009758:	2308      	movs	r3, #8
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975e:	e016      	b.n	800978e <UART_SetConfig+0x2fe>
 8009760:	2310      	movs	r3, #16
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009766:	e012      	b.n	800978e <UART_SetConfig+0x2fe>
 8009768:	cfff69f3 	.word	0xcfff69f3
 800976c:	40008000 	.word	0x40008000
 8009770:	40013800 	.word	0x40013800
 8009774:	40021000 	.word	0x40021000
 8009778:	40004400 	.word	0x40004400
 800977c:	40004800 	.word	0x40004800
 8009780:	40004c00 	.word	0x40004c00
 8009784:	40005000 	.word	0x40005000
 8009788:	2310      	movs	r3, #16
 800978a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4aae      	ldr	r2, [pc, #696]	; (8009a4c <UART_SetConfig+0x5bc>)
 8009794:	4293      	cmp	r3, r2
 8009796:	f040 8097 	bne.w	80098c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800979a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800979e:	2b08      	cmp	r3, #8
 80097a0:	d823      	bhi.n	80097ea <UART_SetConfig+0x35a>
 80097a2:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <UART_SetConfig+0x318>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	080097cd 	.word	0x080097cd
 80097ac:	080097eb 	.word	0x080097eb
 80097b0:	080097d5 	.word	0x080097d5
 80097b4:	080097eb 	.word	0x080097eb
 80097b8:	080097db 	.word	0x080097db
 80097bc:	080097eb 	.word	0x080097eb
 80097c0:	080097eb 	.word	0x080097eb
 80097c4:	080097eb 	.word	0x080097eb
 80097c8:	080097e3 	.word	0x080097e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097cc:	f7fd fdd4 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 80097d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097d2:	e010      	b.n	80097f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097d4:	4b9e      	ldr	r3, [pc, #632]	; (8009a50 <UART_SetConfig+0x5c0>)
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097d8:	e00d      	b.n	80097f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097da:	f7fd fd5f 	bl	800729c <HAL_RCC_GetSysClockFreq>
 80097de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097e0:	e009      	b.n	80097f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097e8:	e005      	b.n	80097f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80097f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 8130 	beq.w	8009a5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009802:	4a94      	ldr	r2, [pc, #592]	; (8009a54 <UART_SetConfig+0x5c4>)
 8009804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009808:	461a      	mov	r2, r3
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009810:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	4613      	mov	r3, r2
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	4413      	add	r3, r2
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	429a      	cmp	r2, r3
 8009820:	d305      	bcc.n	800982e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	429a      	cmp	r2, r3
 800982c:	d903      	bls.n	8009836 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009834:	e113      	b.n	8009a5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	2200      	movs	r2, #0
 800983a:	60bb      	str	r3, [r7, #8]
 800983c:	60fa      	str	r2, [r7, #12]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	4a84      	ldr	r2, [pc, #528]	; (8009a54 <UART_SetConfig+0x5c4>)
 8009844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009848:	b29b      	uxth	r3, r3
 800984a:	2200      	movs	r2, #0
 800984c:	603b      	str	r3, [r7, #0]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009858:	f7f6 fcde 	bl	8000218 <__aeabi_uldivmod>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4610      	mov	r0, r2
 8009862:	4619      	mov	r1, r3
 8009864:	f04f 0200 	mov.w	r2, #0
 8009868:	f04f 0300 	mov.w	r3, #0
 800986c:	020b      	lsls	r3, r1, #8
 800986e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009872:	0202      	lsls	r2, r0, #8
 8009874:	6979      	ldr	r1, [r7, #20]
 8009876:	6849      	ldr	r1, [r1, #4]
 8009878:	0849      	lsrs	r1, r1, #1
 800987a:	2000      	movs	r0, #0
 800987c:	460c      	mov	r4, r1
 800987e:	4605      	mov	r5, r0
 8009880:	eb12 0804 	adds.w	r8, r2, r4
 8009884:	eb43 0905 	adc.w	r9, r3, r5
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	469a      	mov	sl, r3
 8009890:	4693      	mov	fp, r2
 8009892:	4652      	mov	r2, sl
 8009894:	465b      	mov	r3, fp
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f6 fcbd 	bl	8000218 <__aeabi_uldivmod>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4613      	mov	r3, r2
 80098a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098ac:	d308      	bcc.n	80098c0 <UART_SetConfig+0x430>
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098b4:	d204      	bcs.n	80098c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6a3a      	ldr	r2, [r7, #32]
 80098bc:	60da      	str	r2, [r3, #12]
 80098be:	e0ce      	b.n	8009a5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80098c6:	e0ca      	b.n	8009a5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098d0:	d166      	bne.n	80099a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80098d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098d6:	2b08      	cmp	r3, #8
 80098d8:	d827      	bhi.n	800992a <UART_SetConfig+0x49a>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <UART_SetConfig+0x450>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009905 	.word	0x08009905
 80098e4:	0800990d 	.word	0x0800990d
 80098e8:	08009915 	.word	0x08009915
 80098ec:	0800992b 	.word	0x0800992b
 80098f0:	0800991b 	.word	0x0800991b
 80098f4:	0800992b 	.word	0x0800992b
 80098f8:	0800992b 	.word	0x0800992b
 80098fc:	0800992b 	.word	0x0800992b
 8009900:	08009923 	.word	0x08009923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009904:	f7fd fd38 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8009908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800990a:	e014      	b.n	8009936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800990c:	f7fd fd4a 	bl	80073a4 <HAL_RCC_GetPCLK2Freq>
 8009910:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009912:	e010      	b.n	8009936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009914:	4b4e      	ldr	r3, [pc, #312]	; (8009a50 <UART_SetConfig+0x5c0>)
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009918:	e00d      	b.n	8009936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800991a:	f7fd fcbf 	bl	800729c <HAL_RCC_GetSysClockFreq>
 800991e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009920:	e009      	b.n	8009936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009928:	e005      	b.n	8009936 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800992a:	2300      	movs	r3, #0
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 8090 	beq.w	8009a5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	4a44      	ldr	r2, [pc, #272]	; (8009a54 <UART_SetConfig+0x5c4>)
 8009944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009948:	461a      	mov	r2, r3
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009950:	005a      	lsls	r2, r3, #1
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	085b      	lsrs	r3, r3, #1
 8009958:	441a      	add	r2, r3
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	2b0f      	cmp	r3, #15
 8009968:	d916      	bls.n	8009998 <UART_SetConfig+0x508>
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009970:	d212      	bcs.n	8009998 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	b29b      	uxth	r3, r3
 8009976:	f023 030f 	bic.w	r3, r3, #15
 800997a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	085b      	lsrs	r3, r3, #1
 8009980:	b29b      	uxth	r3, r3
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	b29a      	uxth	r2, r3
 8009988:	8bfb      	ldrh	r3, [r7, #30]
 800998a:	4313      	orrs	r3, r2
 800998c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	8bfa      	ldrh	r2, [r7, #30]
 8009994:	60da      	str	r2, [r3, #12]
 8009996:	e062      	b.n	8009a5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800999e:	e05e      	b.n	8009a5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d828      	bhi.n	80099fa <UART_SetConfig+0x56a>
 80099a8:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <UART_SetConfig+0x520>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099d5 	.word	0x080099d5
 80099b4:	080099dd 	.word	0x080099dd
 80099b8:	080099e5 	.word	0x080099e5
 80099bc:	080099fb 	.word	0x080099fb
 80099c0:	080099eb 	.word	0x080099eb
 80099c4:	080099fb 	.word	0x080099fb
 80099c8:	080099fb 	.word	0x080099fb
 80099cc:	080099fb 	.word	0x080099fb
 80099d0:	080099f3 	.word	0x080099f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d4:	f7fd fcd0 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 80099d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099da:	e014      	b.n	8009a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099dc:	f7fd fce2 	bl	80073a4 <HAL_RCC_GetPCLK2Freq>
 80099e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099e2:	e010      	b.n	8009a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099e4:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <UART_SetConfig+0x5c0>)
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099e8:	e00d      	b.n	8009a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ea:	f7fd fc57 	bl	800729c <HAL_RCC_GetSysClockFreq>
 80099ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099f0:	e009      	b.n	8009a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099f8:	e005      	b.n	8009a06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a04:	bf00      	nop
    }

    if (pclk != 0U)
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d028      	beq.n	8009a5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	4a10      	ldr	r2, [pc, #64]	; (8009a54 <UART_SetConfig+0x5c4>)
 8009a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a16:	461a      	mov	r2, r3
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	085b      	lsrs	r3, r3, #1
 8009a24:	441a      	add	r2, r3
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	2b0f      	cmp	r3, #15
 8009a34:	d910      	bls.n	8009a58 <UART_SetConfig+0x5c8>
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a3c:	d20c      	bcs.n	8009a58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	60da      	str	r2, [r3, #12]
 8009a48:	e009      	b.n	8009a5e <UART_SetConfig+0x5ce>
 8009a4a:	bf00      	nop
 8009a4c:	40008000 	.word	0x40008000
 8009a50:	00f42400 	.word	0x00f42400
 8009a54:	0800b040 	.word	0x0800b040
      }
      else
      {
        ret = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2200      	movs	r2, #0
 8009a72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2200      	movs	r2, #0
 8009a78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009a7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3730      	adds	r7, #48	; 0x30
 8009a82:	46bd      	mov	sp, r7
 8009a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00a      	beq.n	8009af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	f003 0308 	and.w	r3, r3, #8
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00a      	beq.n	8009b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3e:	f003 0320 	and.w	r3, r3, #32
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00a      	beq.n	8009b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01a      	beq.n	8009b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b86:	d10a      	bne.n	8009b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	605a      	str	r2, [r3, #4]
  }
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bdc:	f7f9 f8f0 	bl	8002dc0 <HAL_GetTick>
 8009be0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0308 	and.w	r3, r3, #8
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d10e      	bne.n	8009c0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f82f 	bl	8009c62 <UART_WaitOnFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e025      	b.n	8009c5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d10e      	bne.n	8009c3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f819 	bl	8009c62 <UART_WaitOnFlagUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e00f      	b.n	8009c5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2220      	movs	r2, #32
 8009c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b09c      	sub	sp, #112	; 0x70
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	603b      	str	r3, [r7, #0]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c72:	e0a9      	b.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7a:	f000 80a5 	beq.w	8009dc8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c7e:	f7f9 f89f 	bl	8002dc0 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d302      	bcc.n	8009c94 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d140      	bne.n	8009d16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e6      	bne.n	8009c94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3308      	adds	r3, #8
 8009ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd8:	f023 0301 	bic.w	r3, r3, #1
 8009cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ce6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ce8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e5      	bne.n	8009cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2220      	movs	r2, #32
 8009d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e069      	b.n	8009dea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d051      	beq.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d32:	d149      	bne.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e6      	bne.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f023 0301 	bic.w	r3, r3, #1
 8009d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d90:	623a      	str	r2, [r7, #32]
 8009d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	69f9      	ldr	r1, [r7, #28]
 8009d96:	6a3a      	ldr	r2, [r7, #32]
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e5      	bne.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e010      	b.n	8009dea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	69da      	ldr	r2, [r3, #28]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	bf0c      	ite	eq
 8009dd8:	2301      	moveq	r3, #1
 8009dda:	2300      	movne	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	461a      	mov	r2, r3
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	f43f af46 	beq.w	8009c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3770      	adds	r7, #112	; 0x70
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e027      	b.n	8009e58 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2224      	movs	r2, #36	; 0x24
 8009e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0201 	bic.w	r2, r2, #1
 8009e2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2220      	movs	r2, #32
 8009e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e02d      	b.n	8009ed8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2224      	movs	r2, #36	; 0x24
 8009e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f84f 	bl	8009f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d101      	bne.n	8009ef8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e02d      	b.n	8009f54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2224      	movs	r2, #36	; 0x24
 8009f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0201 	bic.w	r2, r2, #1
 8009f1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f811 	bl	8009f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d108      	bne.n	8009f7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f7c:	e031      	b.n	8009fe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f7e:	2308      	movs	r3, #8
 8009f80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f82:	2308      	movs	r3, #8
 8009f84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	0e5b      	lsrs	r3, r3, #25
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	f003 0307 	and.w	r3, r3, #7
 8009f94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	0f5b      	lsrs	r3, r3, #29
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f003 0307 	and.w	r3, r3, #7
 8009fa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	7b3a      	ldrb	r2, [r7, #12]
 8009faa:	4911      	ldr	r1, [pc, #68]	; (8009ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8009fac:	5c8a      	ldrb	r2, [r1, r2]
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fb2:	7b3a      	ldrb	r2, [r7, #12]
 8009fb4:	490f      	ldr	r1, [pc, #60]	; (8009ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8009fb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	7b7a      	ldrb	r2, [r7, #13]
 8009fc8:	4909      	ldr	r1, [pc, #36]	; (8009ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8009fca:	5c8a      	ldrb	r2, [r1, r2]
 8009fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fd0:	7b7a      	ldrb	r2, [r7, #13]
 8009fd2:	4908      	ldr	r1, [pc, #32]	; (8009ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8009fd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	0800b058 	.word	0x0800b058
 8009ff4:	0800b060 	.word	0x0800b060

08009ff8 <__errno>:
 8009ff8:	4b01      	ldr	r3, [pc, #4]	; (800a000 <__errno+0x8>)
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	2000000c 	.word	0x2000000c

0800a004 <__libc_init_array>:
 800a004:	b570      	push	{r4, r5, r6, lr}
 800a006:	4d0d      	ldr	r5, [pc, #52]	; (800a03c <__libc_init_array+0x38>)
 800a008:	4c0d      	ldr	r4, [pc, #52]	; (800a040 <__libc_init_array+0x3c>)
 800a00a:	1b64      	subs	r4, r4, r5
 800a00c:	10a4      	asrs	r4, r4, #2
 800a00e:	2600      	movs	r6, #0
 800a010:	42a6      	cmp	r6, r4
 800a012:	d109      	bne.n	800a028 <__libc_init_array+0x24>
 800a014:	4d0b      	ldr	r5, [pc, #44]	; (800a044 <__libc_init_array+0x40>)
 800a016:	4c0c      	ldr	r4, [pc, #48]	; (800a048 <__libc_init_array+0x44>)
 800a018:	f000 fffa 	bl	800b010 <_init>
 800a01c:	1b64      	subs	r4, r4, r5
 800a01e:	10a4      	asrs	r4, r4, #2
 800a020:	2600      	movs	r6, #0
 800a022:	42a6      	cmp	r6, r4
 800a024:	d105      	bne.n	800a032 <__libc_init_array+0x2e>
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02c:	4798      	blx	r3
 800a02e:	3601      	adds	r6, #1
 800a030:	e7ee      	b.n	800a010 <__libc_init_array+0xc>
 800a032:	f855 3b04 	ldr.w	r3, [r5], #4
 800a036:	4798      	blx	r3
 800a038:	3601      	adds	r6, #1
 800a03a:	e7f2      	b.n	800a022 <__libc_init_array+0x1e>
 800a03c:	0800b480 	.word	0x0800b480
 800a040:	0800b480 	.word	0x0800b480
 800a044:	0800b480 	.word	0x0800b480
 800a048:	0800b484 	.word	0x0800b484

0800a04c <memset>:
 800a04c:	4402      	add	r2, r0
 800a04e:	4603      	mov	r3, r0
 800a050:	4293      	cmp	r3, r2
 800a052:	d100      	bne.n	800a056 <memset+0xa>
 800a054:	4770      	bx	lr
 800a056:	f803 1b01 	strb.w	r1, [r3], #1
 800a05a:	e7f9      	b.n	800a050 <memset+0x4>

0800a05c <cosf>:
 800a05c:	ee10 3a10 	vmov	r3, s0
 800a060:	b507      	push	{r0, r1, r2, lr}
 800a062:	4a1e      	ldr	r2, [pc, #120]	; (800a0dc <cosf+0x80>)
 800a064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a068:	4293      	cmp	r3, r2
 800a06a:	dc06      	bgt.n	800a07a <cosf+0x1e>
 800a06c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a0e0 <cosf+0x84>
 800a070:	b003      	add	sp, #12
 800a072:	f85d eb04 	ldr.w	lr, [sp], #4
 800a076:	f000 bb1d 	b.w	800a6b4 <__kernel_cosf>
 800a07a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a07e:	db04      	blt.n	800a08a <cosf+0x2e>
 800a080:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a084:	b003      	add	sp, #12
 800a086:	f85d fb04 	ldr.w	pc, [sp], #4
 800a08a:	4668      	mov	r0, sp
 800a08c:	f000 f9d2 	bl	800a434 <__ieee754_rem_pio2f>
 800a090:	f000 0003 	and.w	r0, r0, #3
 800a094:	2801      	cmp	r0, #1
 800a096:	d009      	beq.n	800a0ac <cosf+0x50>
 800a098:	2802      	cmp	r0, #2
 800a09a:	d010      	beq.n	800a0be <cosf+0x62>
 800a09c:	b9b0      	cbnz	r0, 800a0cc <cosf+0x70>
 800a09e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0a2:	ed9d 0a00 	vldr	s0, [sp]
 800a0a6:	f000 fb05 	bl	800a6b4 <__kernel_cosf>
 800a0aa:	e7eb      	b.n	800a084 <cosf+0x28>
 800a0ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0b0:	ed9d 0a00 	vldr	s0, [sp]
 800a0b4:	f000 fdd4 	bl	800ac60 <__kernel_sinf>
 800a0b8:	eeb1 0a40 	vneg.f32	s0, s0
 800a0bc:	e7e2      	b.n	800a084 <cosf+0x28>
 800a0be:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0c2:	ed9d 0a00 	vldr	s0, [sp]
 800a0c6:	f000 faf5 	bl	800a6b4 <__kernel_cosf>
 800a0ca:	e7f5      	b.n	800a0b8 <cosf+0x5c>
 800a0cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0d0:	ed9d 0a00 	vldr	s0, [sp]
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	f000 fdc3 	bl	800ac60 <__kernel_sinf>
 800a0da:	e7d3      	b.n	800a084 <cosf+0x28>
 800a0dc:	3f490fd8 	.word	0x3f490fd8
 800a0e0:	00000000 	.word	0x00000000

0800a0e4 <sinf>:
 800a0e4:	ee10 3a10 	vmov	r3, s0
 800a0e8:	b507      	push	{r0, r1, r2, lr}
 800a0ea:	4a1f      	ldr	r2, [pc, #124]	; (800a168 <sinf+0x84>)
 800a0ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	dc07      	bgt.n	800a104 <sinf+0x20>
 800a0f4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a16c <sinf+0x88>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	b003      	add	sp, #12
 800a0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a100:	f000 bdae 	b.w	800ac60 <__kernel_sinf>
 800a104:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a108:	db04      	blt.n	800a114 <sinf+0x30>
 800a10a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a10e:	b003      	add	sp, #12
 800a110:	f85d fb04 	ldr.w	pc, [sp], #4
 800a114:	4668      	mov	r0, sp
 800a116:	f000 f98d 	bl	800a434 <__ieee754_rem_pio2f>
 800a11a:	f000 0003 	and.w	r0, r0, #3
 800a11e:	2801      	cmp	r0, #1
 800a120:	d00a      	beq.n	800a138 <sinf+0x54>
 800a122:	2802      	cmp	r0, #2
 800a124:	d00f      	beq.n	800a146 <sinf+0x62>
 800a126:	b9c0      	cbnz	r0, 800a15a <sinf+0x76>
 800a128:	eddd 0a01 	vldr	s1, [sp, #4]
 800a12c:	ed9d 0a00 	vldr	s0, [sp]
 800a130:	2001      	movs	r0, #1
 800a132:	f000 fd95 	bl	800ac60 <__kernel_sinf>
 800a136:	e7ea      	b.n	800a10e <sinf+0x2a>
 800a138:	eddd 0a01 	vldr	s1, [sp, #4]
 800a13c:	ed9d 0a00 	vldr	s0, [sp]
 800a140:	f000 fab8 	bl	800a6b4 <__kernel_cosf>
 800a144:	e7e3      	b.n	800a10e <sinf+0x2a>
 800a146:	eddd 0a01 	vldr	s1, [sp, #4]
 800a14a:	ed9d 0a00 	vldr	s0, [sp]
 800a14e:	2001      	movs	r0, #1
 800a150:	f000 fd86 	bl	800ac60 <__kernel_sinf>
 800a154:	eeb1 0a40 	vneg.f32	s0, s0
 800a158:	e7d9      	b.n	800a10e <sinf+0x2a>
 800a15a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a15e:	ed9d 0a00 	vldr	s0, [sp]
 800a162:	f000 faa7 	bl	800a6b4 <__kernel_cosf>
 800a166:	e7f5      	b.n	800a154 <sinf+0x70>
 800a168:	3f490fd8 	.word	0x3f490fd8
 800a16c:	00000000 	.word	0x00000000

0800a170 <atan2f>:
 800a170:	f000 b83e 	b.w	800a1f0 <__ieee754_atan2f>

0800a174 <fmodf>:
 800a174:	b508      	push	{r3, lr}
 800a176:	ed2d 8b02 	vpush	{d8}
 800a17a:	eef0 8a40 	vmov.f32	s17, s0
 800a17e:	eeb0 8a60 	vmov.f32	s16, s1
 800a182:	f000 f8d5 	bl	800a330 <__ieee754_fmodf>
 800a186:	eef4 8a48 	vcmp.f32	s17, s16
 800a18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18e:	d60c      	bvs.n	800a1aa <fmodf+0x36>
 800a190:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a1b0 <fmodf+0x3c>
 800a194:	eeb4 8a68 	vcmp.f32	s16, s17
 800a198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19c:	d105      	bne.n	800a1aa <fmodf+0x36>
 800a19e:	f7ff ff2b 	bl	8009ff8 <__errno>
 800a1a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a1a6:	2321      	movs	r3, #33	; 0x21
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	ecbd 8b02 	vpop	{d8}
 800a1ae:	bd08      	pop	{r3, pc}
 800a1b0:	00000000 	.word	0x00000000

0800a1b4 <sqrtf>:
 800a1b4:	b508      	push	{r3, lr}
 800a1b6:	ed2d 8b02 	vpush	{d8}
 800a1ba:	eeb0 8a40 	vmov.f32	s16, s0
 800a1be:	f000 fa75 	bl	800a6ac <__ieee754_sqrtf>
 800a1c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ca:	d60c      	bvs.n	800a1e6 <sqrtf+0x32>
 800a1cc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a1ec <sqrtf+0x38>
 800a1d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d8:	d505      	bpl.n	800a1e6 <sqrtf+0x32>
 800a1da:	f7ff ff0d 	bl	8009ff8 <__errno>
 800a1de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a1e2:	2321      	movs	r3, #33	; 0x21
 800a1e4:	6003      	str	r3, [r0, #0]
 800a1e6:	ecbd 8b02 	vpop	{d8}
 800a1ea:	bd08      	pop	{r3, pc}
 800a1ec:	00000000 	.word	0x00000000

0800a1f0 <__ieee754_atan2f>:
 800a1f0:	ee10 2a90 	vmov	r2, s1
 800a1f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a1f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	eef0 7a40 	vmov.f32	s15, s0
 800a202:	dc06      	bgt.n	800a212 <__ieee754_atan2f+0x22>
 800a204:	ee10 0a10 	vmov	r0, s0
 800a208:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a20c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a210:	dd04      	ble.n	800a21c <__ieee754_atan2f+0x2c>
 800a212:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a216:	eeb0 0a67 	vmov.f32	s0, s15
 800a21a:	bd10      	pop	{r4, pc}
 800a21c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a220:	d103      	bne.n	800a22a <__ieee754_atan2f+0x3a>
 800a222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a226:	f000 bd63 	b.w	800acf0 <atanf>
 800a22a:	1794      	asrs	r4, r2, #30
 800a22c:	f004 0402 	and.w	r4, r4, #2
 800a230:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a234:	b943      	cbnz	r3, 800a248 <__ieee754_atan2f+0x58>
 800a236:	2c02      	cmp	r4, #2
 800a238:	d05e      	beq.n	800a2f8 <__ieee754_atan2f+0x108>
 800a23a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a30c <__ieee754_atan2f+0x11c>
 800a23e:	2c03      	cmp	r4, #3
 800a240:	bf08      	it	eq
 800a242:	eef0 7a47 	vmoveq.f32	s15, s14
 800a246:	e7e6      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a248:	b941      	cbnz	r1, 800a25c <__ieee754_atan2f+0x6c>
 800a24a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a310 <__ieee754_atan2f+0x120>
 800a24e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a314 <__ieee754_atan2f+0x124>
 800a252:	2800      	cmp	r0, #0
 800a254:	bfb8      	it	lt
 800a256:	eef0 7a40 	vmovlt.f32	s15, s0
 800a25a:	e7dc      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a25c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a260:	d110      	bne.n	800a284 <__ieee754_atan2f+0x94>
 800a262:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a266:	f104 34ff 	add.w	r4, r4, #4294967295
 800a26a:	d107      	bne.n	800a27c <__ieee754_atan2f+0x8c>
 800a26c:	2c02      	cmp	r4, #2
 800a26e:	d846      	bhi.n	800a2fe <__ieee754_atan2f+0x10e>
 800a270:	4b29      	ldr	r3, [pc, #164]	; (800a318 <__ieee754_atan2f+0x128>)
 800a272:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a276:	edd4 7a00 	vldr	s15, [r4]
 800a27a:	e7cc      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a27c:	2c02      	cmp	r4, #2
 800a27e:	d841      	bhi.n	800a304 <__ieee754_atan2f+0x114>
 800a280:	4b26      	ldr	r3, [pc, #152]	; (800a31c <__ieee754_atan2f+0x12c>)
 800a282:	e7f6      	b.n	800a272 <__ieee754_atan2f+0x82>
 800a284:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a288:	d0df      	beq.n	800a24a <__ieee754_atan2f+0x5a>
 800a28a:	1a5b      	subs	r3, r3, r1
 800a28c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a290:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a294:	da1a      	bge.n	800a2cc <__ieee754_atan2f+0xdc>
 800a296:	2a00      	cmp	r2, #0
 800a298:	da01      	bge.n	800a29e <__ieee754_atan2f+0xae>
 800a29a:	313c      	adds	r1, #60	; 0x3c
 800a29c:	db19      	blt.n	800a2d2 <__ieee754_atan2f+0xe2>
 800a29e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a2a2:	f000 fdf9 	bl	800ae98 <fabsf>
 800a2a6:	f000 fd23 	bl	800acf0 <atanf>
 800a2aa:	eef0 7a40 	vmov.f32	s15, s0
 800a2ae:	2c01      	cmp	r4, #1
 800a2b0:	d012      	beq.n	800a2d8 <__ieee754_atan2f+0xe8>
 800a2b2:	2c02      	cmp	r4, #2
 800a2b4:	d017      	beq.n	800a2e6 <__ieee754_atan2f+0xf6>
 800a2b6:	2c00      	cmp	r4, #0
 800a2b8:	d0ad      	beq.n	800a216 <__ieee754_atan2f+0x26>
 800a2ba:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a320 <__ieee754_atan2f+0x130>
 800a2be:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2c2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a324 <__ieee754_atan2f+0x134>
 800a2c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2ca:	e7a4      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a2cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a310 <__ieee754_atan2f+0x120>
 800a2d0:	e7ed      	b.n	800a2ae <__ieee754_atan2f+0xbe>
 800a2d2:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a328 <__ieee754_atan2f+0x138>
 800a2d6:	e7ea      	b.n	800a2ae <__ieee754_atan2f+0xbe>
 800a2d8:	ee17 3a90 	vmov	r3, s15
 800a2dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2e0:	ee07 3a90 	vmov	s15, r3
 800a2e4:	e797      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a2e6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a320 <__ieee754_atan2f+0x130>
 800a2ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2ee:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a324 <__ieee754_atan2f+0x134>
 800a2f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a2f6:	e78e      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a2f8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a324 <__ieee754_atan2f+0x134>
 800a2fc:	e78b      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a2fe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a32c <__ieee754_atan2f+0x13c>
 800a302:	e788      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a304:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a328 <__ieee754_atan2f+0x138>
 800a308:	e785      	b.n	800a216 <__ieee754_atan2f+0x26>
 800a30a:	bf00      	nop
 800a30c:	c0490fdb 	.word	0xc0490fdb
 800a310:	3fc90fdb 	.word	0x3fc90fdb
 800a314:	bfc90fdb 	.word	0xbfc90fdb
 800a318:	0800b068 	.word	0x0800b068
 800a31c:	0800b074 	.word	0x0800b074
 800a320:	33bbbd2e 	.word	0x33bbbd2e
 800a324:	40490fdb 	.word	0x40490fdb
 800a328:	00000000 	.word	0x00000000
 800a32c:	3f490fdb 	.word	0x3f490fdb

0800a330 <__ieee754_fmodf>:
 800a330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a332:	ee10 5a90 	vmov	r5, s1
 800a336:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800a33a:	d009      	beq.n	800a350 <__ieee754_fmodf+0x20>
 800a33c:	ee10 2a10 	vmov	r2, s0
 800a340:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a344:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a348:	da02      	bge.n	800a350 <__ieee754_fmodf+0x20>
 800a34a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a34e:	dd04      	ble.n	800a35a <__ieee754_fmodf+0x2a>
 800a350:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a354:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	dbfc      	blt.n	800a358 <__ieee754_fmodf+0x28>
 800a35e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800a362:	d105      	bne.n	800a370 <__ieee754_fmodf+0x40>
 800a364:	4b32      	ldr	r3, [pc, #200]	; (800a430 <__ieee754_fmodf+0x100>)
 800a366:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800a36a:	ed93 0a00 	vldr	s0, [r3]
 800a36e:	e7f3      	b.n	800a358 <__ieee754_fmodf+0x28>
 800a370:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800a374:	d13f      	bne.n	800a3f6 <__ieee754_fmodf+0xc6>
 800a376:	0219      	lsls	r1, r3, #8
 800a378:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800a37c:	2900      	cmp	r1, #0
 800a37e:	dc37      	bgt.n	800a3f0 <__ieee754_fmodf+0xc0>
 800a380:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800a384:	d13d      	bne.n	800a402 <__ieee754_fmodf+0xd2>
 800a386:	0227      	lsls	r7, r4, #8
 800a388:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a38c:	2f00      	cmp	r7, #0
 800a38e:	da35      	bge.n	800a3fc <__ieee754_fmodf+0xcc>
 800a390:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a394:	bfbb      	ittet	lt
 800a396:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a39a:	1a12      	sublt	r2, r2, r0
 800a39c:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a3a0:	4093      	lsllt	r3, r2
 800a3a2:	bfa8      	it	ge
 800a3a4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a3a8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a3ac:	bfb5      	itete	lt
 800a3ae:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a3b2:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800a3b6:	1a52      	sublt	r2, r2, r1
 800a3b8:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800a3bc:	bfb8      	it	lt
 800a3be:	4094      	lsllt	r4, r2
 800a3c0:	1a40      	subs	r0, r0, r1
 800a3c2:	1b1a      	subs	r2, r3, r4
 800a3c4:	bb00      	cbnz	r0, 800a408 <__ieee754_fmodf+0xd8>
 800a3c6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a3ca:	bf38      	it	cc
 800a3cc:	4613      	movcc	r3, r2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d0c8      	beq.n	800a364 <__ieee754_fmodf+0x34>
 800a3d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3d6:	db1f      	blt.n	800a418 <__ieee754_fmodf+0xe8>
 800a3d8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a3dc:	db1f      	blt.n	800a41e <__ieee754_fmodf+0xee>
 800a3de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a3e2:	317f      	adds	r1, #127	; 0x7f
 800a3e4:	4333      	orrs	r3, r6
 800a3e6:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a3ea:	ee00 3a10 	vmov	s0, r3
 800a3ee:	e7b3      	b.n	800a358 <__ieee754_fmodf+0x28>
 800a3f0:	3801      	subs	r0, #1
 800a3f2:	0049      	lsls	r1, r1, #1
 800a3f4:	e7c2      	b.n	800a37c <__ieee754_fmodf+0x4c>
 800a3f6:	15d8      	asrs	r0, r3, #23
 800a3f8:	387f      	subs	r0, #127	; 0x7f
 800a3fa:	e7c1      	b.n	800a380 <__ieee754_fmodf+0x50>
 800a3fc:	3901      	subs	r1, #1
 800a3fe:	007f      	lsls	r7, r7, #1
 800a400:	e7c4      	b.n	800a38c <__ieee754_fmodf+0x5c>
 800a402:	15e1      	asrs	r1, r4, #23
 800a404:	397f      	subs	r1, #127	; 0x7f
 800a406:	e7c3      	b.n	800a390 <__ieee754_fmodf+0x60>
 800a408:	2a00      	cmp	r2, #0
 800a40a:	da02      	bge.n	800a412 <__ieee754_fmodf+0xe2>
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	3801      	subs	r0, #1
 800a410:	e7d7      	b.n	800a3c2 <__ieee754_fmodf+0x92>
 800a412:	d0a7      	beq.n	800a364 <__ieee754_fmodf+0x34>
 800a414:	0053      	lsls	r3, r2, #1
 800a416:	e7fa      	b.n	800a40e <__ieee754_fmodf+0xde>
 800a418:	005b      	lsls	r3, r3, #1
 800a41a:	3901      	subs	r1, #1
 800a41c:	e7d9      	b.n	800a3d2 <__ieee754_fmodf+0xa2>
 800a41e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800a422:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800a426:	3182      	adds	r1, #130	; 0x82
 800a428:	410b      	asrs	r3, r1
 800a42a:	4333      	orrs	r3, r6
 800a42c:	e7dd      	b.n	800a3ea <__ieee754_fmodf+0xba>
 800a42e:	bf00      	nop
 800a430:	0800b080 	.word	0x0800b080

0800a434 <__ieee754_rem_pio2f>:
 800a434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a436:	ee10 6a10 	vmov	r6, s0
 800a43a:	4b8e      	ldr	r3, [pc, #568]	; (800a674 <__ieee754_rem_pio2f+0x240>)
 800a43c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a440:	429d      	cmp	r5, r3
 800a442:	b087      	sub	sp, #28
 800a444:	eef0 7a40 	vmov.f32	s15, s0
 800a448:	4604      	mov	r4, r0
 800a44a:	dc05      	bgt.n	800a458 <__ieee754_rem_pio2f+0x24>
 800a44c:	2300      	movs	r3, #0
 800a44e:	ed80 0a00 	vstr	s0, [r0]
 800a452:	6043      	str	r3, [r0, #4]
 800a454:	2000      	movs	r0, #0
 800a456:	e01a      	b.n	800a48e <__ieee754_rem_pio2f+0x5a>
 800a458:	4b87      	ldr	r3, [pc, #540]	; (800a678 <__ieee754_rem_pio2f+0x244>)
 800a45a:	429d      	cmp	r5, r3
 800a45c:	dc46      	bgt.n	800a4ec <__ieee754_rem_pio2f+0xb8>
 800a45e:	2e00      	cmp	r6, #0
 800a460:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a67c <__ieee754_rem_pio2f+0x248>
 800a464:	4b86      	ldr	r3, [pc, #536]	; (800a680 <__ieee754_rem_pio2f+0x24c>)
 800a466:	f025 050f 	bic.w	r5, r5, #15
 800a46a:	dd1f      	ble.n	800a4ac <__ieee754_rem_pio2f+0x78>
 800a46c:	429d      	cmp	r5, r3
 800a46e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a472:	d00e      	beq.n	800a492 <__ieee754_rem_pio2f+0x5e>
 800a474:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a684 <__ieee754_rem_pio2f+0x250>
 800a478:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a47c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a480:	ed80 0a00 	vstr	s0, [r0]
 800a484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a488:	2001      	movs	r0, #1
 800a48a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a48e:	b007      	add	sp, #28
 800a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a492:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a688 <__ieee754_rem_pio2f+0x254>
 800a496:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a68c <__ieee754_rem_pio2f+0x258>
 800a49a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a49e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a4a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a4a6:	edc0 6a00 	vstr	s13, [r0]
 800a4aa:	e7eb      	b.n	800a484 <__ieee754_rem_pio2f+0x50>
 800a4ac:	429d      	cmp	r5, r3
 800a4ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a4b2:	d00e      	beq.n	800a4d2 <__ieee754_rem_pio2f+0x9e>
 800a4b4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a684 <__ieee754_rem_pio2f+0x250>
 800a4b8:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a4bc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a4c0:	ed80 0a00 	vstr	s0, [r0]
 800a4c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	edc4 7a01 	vstr	s15, [r4, #4]
 800a4d0:	e7dd      	b.n	800a48e <__ieee754_rem_pio2f+0x5a>
 800a4d2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a688 <__ieee754_rem_pio2f+0x254>
 800a4d6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a68c <__ieee754_rem_pio2f+0x258>
 800a4da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a4de:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a4e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a4e6:	edc0 6a00 	vstr	s13, [r0]
 800a4ea:	e7eb      	b.n	800a4c4 <__ieee754_rem_pio2f+0x90>
 800a4ec:	4b68      	ldr	r3, [pc, #416]	; (800a690 <__ieee754_rem_pio2f+0x25c>)
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	dc72      	bgt.n	800a5d8 <__ieee754_rem_pio2f+0x1a4>
 800a4f2:	f000 fcd1 	bl	800ae98 <fabsf>
 800a4f6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a694 <__ieee754_rem_pio2f+0x260>
 800a4fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a4fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a50a:	ee17 0a90 	vmov	r0, s15
 800a50e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a67c <__ieee754_rem_pio2f+0x248>
 800a512:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a516:	281f      	cmp	r0, #31
 800a518:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a684 <__ieee754_rem_pio2f+0x250>
 800a51c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a520:	eeb1 6a47 	vneg.f32	s12, s14
 800a524:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a528:	ee16 2a90 	vmov	r2, s13
 800a52c:	dc1c      	bgt.n	800a568 <__ieee754_rem_pio2f+0x134>
 800a52e:	495a      	ldr	r1, [pc, #360]	; (800a698 <__ieee754_rem_pio2f+0x264>)
 800a530:	1e47      	subs	r7, r0, #1
 800a532:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a536:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a53a:	428b      	cmp	r3, r1
 800a53c:	d014      	beq.n	800a568 <__ieee754_rem_pio2f+0x134>
 800a53e:	6022      	str	r2, [r4, #0]
 800a540:	ed94 7a00 	vldr	s14, [r4]
 800a544:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a548:	2e00      	cmp	r6, #0
 800a54a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a54e:	ed84 0a01 	vstr	s0, [r4, #4]
 800a552:	da9c      	bge.n	800a48e <__ieee754_rem_pio2f+0x5a>
 800a554:	eeb1 7a47 	vneg.f32	s14, s14
 800a558:	eeb1 0a40 	vneg.f32	s0, s0
 800a55c:	ed84 7a00 	vstr	s14, [r4]
 800a560:	ed84 0a01 	vstr	s0, [r4, #4]
 800a564:	4240      	negs	r0, r0
 800a566:	e792      	b.n	800a48e <__ieee754_rem_pio2f+0x5a>
 800a568:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a56c:	15eb      	asrs	r3, r5, #23
 800a56e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a572:	2d08      	cmp	r5, #8
 800a574:	dde3      	ble.n	800a53e <__ieee754_rem_pio2f+0x10a>
 800a576:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a688 <__ieee754_rem_pio2f+0x254>
 800a57a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a68c <__ieee754_rem_pio2f+0x258>
 800a57e:	eef0 6a40 	vmov.f32	s13, s0
 800a582:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a586:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a58a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a58e:	eef0 7a40 	vmov.f32	s15, s0
 800a592:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a596:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a59a:	ee15 2a90 	vmov	r2, s11
 800a59e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a5a2:	1a5b      	subs	r3, r3, r1
 800a5a4:	2b19      	cmp	r3, #25
 800a5a6:	dc04      	bgt.n	800a5b2 <__ieee754_rem_pio2f+0x17e>
 800a5a8:	edc4 5a00 	vstr	s11, [r4]
 800a5ac:	eeb0 0a66 	vmov.f32	s0, s13
 800a5b0:	e7c6      	b.n	800a540 <__ieee754_rem_pio2f+0x10c>
 800a5b2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a69c <__ieee754_rem_pio2f+0x268>
 800a5b6:	eeb0 0a66 	vmov.f32	s0, s13
 800a5ba:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a5be:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a5c2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a6a0 <__ieee754_rem_pio2f+0x26c>
 800a5c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a5ca:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a5ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a5d2:	ed84 7a00 	vstr	s14, [r4]
 800a5d6:	e7b3      	b.n	800a540 <__ieee754_rem_pio2f+0x10c>
 800a5d8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a5dc:	db06      	blt.n	800a5ec <__ieee754_rem_pio2f+0x1b8>
 800a5de:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a5e2:	edc0 7a01 	vstr	s15, [r0, #4]
 800a5e6:	edc0 7a00 	vstr	s15, [r0]
 800a5ea:	e733      	b.n	800a454 <__ieee754_rem_pio2f+0x20>
 800a5ec:	15ea      	asrs	r2, r5, #23
 800a5ee:	3a86      	subs	r2, #134	; 0x86
 800a5f0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a5fc:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a6a4 <__ieee754_rem_pio2f+0x270>
 800a600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a608:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a60c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a610:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a61c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a620:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a624:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62c:	edcd 7a05 	vstr	s15, [sp, #20]
 800a630:	d11e      	bne.n	800a670 <__ieee754_rem_pio2f+0x23c>
 800a632:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63a:	bf14      	ite	ne
 800a63c:	2302      	movne	r3, #2
 800a63e:	2301      	moveq	r3, #1
 800a640:	4919      	ldr	r1, [pc, #100]	; (800a6a8 <__ieee754_rem_pio2f+0x274>)
 800a642:	9101      	str	r1, [sp, #4]
 800a644:	2102      	movs	r1, #2
 800a646:	9100      	str	r1, [sp, #0]
 800a648:	a803      	add	r0, sp, #12
 800a64a:	4621      	mov	r1, r4
 800a64c:	f000 f892 	bl	800a774 <__kernel_rem_pio2f>
 800a650:	2e00      	cmp	r6, #0
 800a652:	f6bf af1c 	bge.w	800a48e <__ieee754_rem_pio2f+0x5a>
 800a656:	edd4 7a00 	vldr	s15, [r4]
 800a65a:	eef1 7a67 	vneg.f32	s15, s15
 800a65e:	edc4 7a00 	vstr	s15, [r4]
 800a662:	edd4 7a01 	vldr	s15, [r4, #4]
 800a666:	eef1 7a67 	vneg.f32	s15, s15
 800a66a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a66e:	e779      	b.n	800a564 <__ieee754_rem_pio2f+0x130>
 800a670:	2303      	movs	r3, #3
 800a672:	e7e5      	b.n	800a640 <__ieee754_rem_pio2f+0x20c>
 800a674:	3f490fd8 	.word	0x3f490fd8
 800a678:	4016cbe3 	.word	0x4016cbe3
 800a67c:	3fc90f80 	.word	0x3fc90f80
 800a680:	3fc90fd0 	.word	0x3fc90fd0
 800a684:	37354443 	.word	0x37354443
 800a688:	37354400 	.word	0x37354400
 800a68c:	2e85a308 	.word	0x2e85a308
 800a690:	43490f80 	.word	0x43490f80
 800a694:	3f22f984 	.word	0x3f22f984
 800a698:	0800b088 	.word	0x0800b088
 800a69c:	2e85a300 	.word	0x2e85a300
 800a6a0:	248d3132 	.word	0x248d3132
 800a6a4:	43800000 	.word	0x43800000
 800a6a8:	0800b108 	.word	0x0800b108

0800a6ac <__ieee754_sqrtf>:
 800a6ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <__kernel_cosf>:
 800a6b4:	ee10 3a10 	vmov	r3, s0
 800a6b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a6c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a6c4:	da05      	bge.n	800a6d2 <__kernel_cosf+0x1e>
 800a6c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a6ca:	ee17 2a90 	vmov	r2, s15
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d03d      	beq.n	800a74e <__kernel_cosf+0x9a>
 800a6d2:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a6d6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a754 <__kernel_cosf+0xa0>
 800a6da:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a758 <__kernel_cosf+0xa4>
 800a6de:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a75c <__kernel_cosf+0xa8>
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	; (800a760 <__kernel_cosf+0xac>)
 800a6e4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a764 <__kernel_cosf+0xb0>
 800a6ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a6f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a768 <__kernel_cosf+0xb4>
 800a6f6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a6fa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a76c <__kernel_cosf+0xb8>
 800a6fe:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a702:	eeb0 7a66 	vmov.f32	s14, s13
 800a706:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a70a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a70e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a712:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a716:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a71a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a71e:	dc04      	bgt.n	800a72a <__kernel_cosf+0x76>
 800a720:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a724:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a728:	4770      	bx	lr
 800a72a:	4a11      	ldr	r2, [pc, #68]	; (800a770 <__kernel_cosf+0xbc>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	bfda      	itte	le
 800a730:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a734:	ee06 3a90 	vmovle	s13, r3
 800a738:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a73c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a740:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a748:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a74c:	4770      	bx	lr
 800a74e:	eeb0 0a46 	vmov.f32	s0, s12
 800a752:	4770      	bx	lr
 800a754:	ad47d74e 	.word	0xad47d74e
 800a758:	310f74f6 	.word	0x310f74f6
 800a75c:	3d2aaaab 	.word	0x3d2aaaab
 800a760:	3e999999 	.word	0x3e999999
 800a764:	b493f27c 	.word	0xb493f27c
 800a768:	37d00d01 	.word	0x37d00d01
 800a76c:	bab60b61 	.word	0xbab60b61
 800a770:	3f480000 	.word	0x3f480000

0800a774 <__kernel_rem_pio2f>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	ed2d 8b04 	vpush	{d8-d9}
 800a77c:	b0d9      	sub	sp, #356	; 0x164
 800a77e:	4688      	mov	r8, r1
 800a780:	9002      	str	r0, [sp, #8]
 800a782:	49bb      	ldr	r1, [pc, #748]	; (800aa70 <__kernel_rem_pio2f+0x2fc>)
 800a784:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a78c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a790:	1e59      	subs	r1, r3, #1
 800a792:	1d13      	adds	r3, r2, #4
 800a794:	db27      	blt.n	800a7e6 <__kernel_rem_pio2f+0x72>
 800a796:	f1b2 0b03 	subs.w	fp, r2, #3
 800a79a:	bf48      	it	mi
 800a79c:	f102 0b04 	addmi.w	fp, r2, #4
 800a7a0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a7a4:	1c45      	adds	r5, r0, #1
 800a7a6:	00ec      	lsls	r4, r5, #3
 800a7a8:	1a47      	subs	r7, r0, r1
 800a7aa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800aa80 <__kernel_rem_pio2f+0x30c>
 800a7ae:	9403      	str	r4, [sp, #12]
 800a7b0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a7b4:	eb0a 0c01 	add.w	ip, sl, r1
 800a7b8:	ae1c      	add	r6, sp, #112	; 0x70
 800a7ba:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a7be:	2400      	movs	r4, #0
 800a7c0:	4564      	cmp	r4, ip
 800a7c2:	dd12      	ble.n	800a7ea <__kernel_rem_pio2f+0x76>
 800a7c4:	9b01      	ldr	r3, [sp, #4]
 800a7c6:	ac1c      	add	r4, sp, #112	; 0x70
 800a7c8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a7cc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a7d0:	f04f 0c00 	mov.w	ip, #0
 800a7d4:	45d4      	cmp	ip, sl
 800a7d6:	dc27      	bgt.n	800a828 <__kernel_rem_pio2f+0xb4>
 800a7d8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a7dc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800aa80 <__kernel_rem_pio2f+0x30c>
 800a7e0:	4627      	mov	r7, r4
 800a7e2:	2600      	movs	r6, #0
 800a7e4:	e016      	b.n	800a814 <__kernel_rem_pio2f+0xa0>
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	e7dc      	b.n	800a7a4 <__kernel_rem_pio2f+0x30>
 800a7ea:	42e7      	cmn	r7, r4
 800a7ec:	bf5d      	ittte	pl
 800a7ee:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a7f2:	ee07 3a90 	vmovpl	s15, r3
 800a7f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a7fa:	eef0 7a47 	vmovmi.f32	s15, s14
 800a7fe:	ece6 7a01 	vstmia	r6!, {s15}
 800a802:	3401      	adds	r4, #1
 800a804:	e7dc      	b.n	800a7c0 <__kernel_rem_pio2f+0x4c>
 800a806:	ecf9 6a01 	vldmia	r9!, {s13}
 800a80a:	ed97 7a00 	vldr	s14, [r7]
 800a80e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a812:	3601      	adds	r6, #1
 800a814:	428e      	cmp	r6, r1
 800a816:	f1a7 0704 	sub.w	r7, r7, #4
 800a81a:	ddf4      	ble.n	800a806 <__kernel_rem_pio2f+0x92>
 800a81c:	eceb 7a01 	vstmia	fp!, {s15}
 800a820:	f10c 0c01 	add.w	ip, ip, #1
 800a824:	3404      	adds	r4, #4
 800a826:	e7d5      	b.n	800a7d4 <__kernel_rem_pio2f+0x60>
 800a828:	ab08      	add	r3, sp, #32
 800a82a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a82e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800aa7c <__kernel_rem_pio2f+0x308>
 800a832:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800aa78 <__kernel_rem_pio2f+0x304>
 800a836:	9304      	str	r3, [sp, #16]
 800a838:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a83c:	4656      	mov	r6, sl
 800a83e:	00b3      	lsls	r3, r6, #2
 800a840:	9305      	str	r3, [sp, #20]
 800a842:	ab58      	add	r3, sp, #352	; 0x160
 800a844:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a848:	ac08      	add	r4, sp, #32
 800a84a:	ab44      	add	r3, sp, #272	; 0x110
 800a84c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a850:	46a4      	mov	ip, r4
 800a852:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a856:	4637      	mov	r7, r6
 800a858:	2f00      	cmp	r7, #0
 800a85a:	f1a0 0004 	sub.w	r0, r0, #4
 800a85e:	dc4f      	bgt.n	800a900 <__kernel_rem_pio2f+0x18c>
 800a860:	4628      	mov	r0, r5
 800a862:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a866:	f000 fb61 	bl	800af2c <scalbnf>
 800a86a:	eeb0 8a40 	vmov.f32	s16, s0
 800a86e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a872:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a876:	f000 fb17 	bl	800aea8 <floorf>
 800a87a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a87e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a882:	2d00      	cmp	r5, #0
 800a884:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a888:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a88c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a890:	ee17 9a90 	vmov	r9, s15
 800a894:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a898:	dd44      	ble.n	800a924 <__kernel_rem_pio2f+0x1b0>
 800a89a:	f106 3cff 	add.w	ip, r6, #4294967295
 800a89e:	ab08      	add	r3, sp, #32
 800a8a0:	f1c5 0e08 	rsb	lr, r5, #8
 800a8a4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a8a8:	fa47 f00e 	asr.w	r0, r7, lr
 800a8ac:	4481      	add	r9, r0
 800a8ae:	fa00 f00e 	lsl.w	r0, r0, lr
 800a8b2:	1a3f      	subs	r7, r7, r0
 800a8b4:	f1c5 0007 	rsb	r0, r5, #7
 800a8b8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a8bc:	4107      	asrs	r7, r0
 800a8be:	2f00      	cmp	r7, #0
 800a8c0:	dd3f      	ble.n	800a942 <__kernel_rem_pio2f+0x1ce>
 800a8c2:	f04f 0e00 	mov.w	lr, #0
 800a8c6:	f109 0901 	add.w	r9, r9, #1
 800a8ca:	4673      	mov	r3, lr
 800a8cc:	4576      	cmp	r6, lr
 800a8ce:	dc6b      	bgt.n	800a9a8 <__kernel_rem_pio2f+0x234>
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	dd04      	ble.n	800a8de <__kernel_rem_pio2f+0x16a>
 800a8d4:	2d01      	cmp	r5, #1
 800a8d6:	d078      	beq.n	800a9ca <__kernel_rem_pio2f+0x256>
 800a8d8:	2d02      	cmp	r5, #2
 800a8da:	f000 8081 	beq.w	800a9e0 <__kernel_rem_pio2f+0x26c>
 800a8de:	2f02      	cmp	r7, #2
 800a8e0:	d12f      	bne.n	800a942 <__kernel_rem_pio2f+0x1ce>
 800a8e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a8e6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a8ea:	b353      	cbz	r3, 800a942 <__kernel_rem_pio2f+0x1ce>
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a8f2:	f000 fb1b 	bl	800af2c <scalbnf>
 800a8f6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a8fa:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a8fe:	e020      	b.n	800a942 <__kernel_rem_pio2f+0x1ce>
 800a900:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a904:	3f01      	subs	r7, #1
 800a906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a90a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a90e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a912:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a916:	ecac 0a01 	vstmia	ip!, {s0}
 800a91a:	ed90 0a00 	vldr	s0, [r0]
 800a91e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a922:	e799      	b.n	800a858 <__kernel_rem_pio2f+0xe4>
 800a924:	d105      	bne.n	800a932 <__kernel_rem_pio2f+0x1be>
 800a926:	1e70      	subs	r0, r6, #1
 800a928:	ab08      	add	r3, sp, #32
 800a92a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a92e:	11ff      	asrs	r7, r7, #7
 800a930:	e7c5      	b.n	800a8be <__kernel_rem_pio2f+0x14a>
 800a932:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a936:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a93e:	da31      	bge.n	800a9a4 <__kernel_rem_pio2f+0x230>
 800a940:	2700      	movs	r7, #0
 800a942:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94a:	f040 809b 	bne.w	800aa84 <__kernel_rem_pio2f+0x310>
 800a94e:	1e74      	subs	r4, r6, #1
 800a950:	46a4      	mov	ip, r4
 800a952:	2000      	movs	r0, #0
 800a954:	45d4      	cmp	ip, sl
 800a956:	da4a      	bge.n	800a9ee <__kernel_rem_pio2f+0x27a>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d07a      	beq.n	800aa52 <__kernel_rem_pio2f+0x2de>
 800a95c:	ab08      	add	r3, sp, #32
 800a95e:	3d08      	subs	r5, #8
 800a960:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 8081 	beq.w	800aa6c <__kernel_rem_pio2f+0x2f8>
 800a96a:	4628      	mov	r0, r5
 800a96c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a970:	00a5      	lsls	r5, r4, #2
 800a972:	f000 fadb 	bl	800af2c <scalbnf>
 800a976:	aa44      	add	r2, sp, #272	; 0x110
 800a978:	1d2b      	adds	r3, r5, #4
 800a97a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800aa7c <__kernel_rem_pio2f+0x308>
 800a97e:	18d1      	adds	r1, r2, r3
 800a980:	4622      	mov	r2, r4
 800a982:	2a00      	cmp	r2, #0
 800a984:	f280 80ae 	bge.w	800aae4 <__kernel_rem_pio2f+0x370>
 800a988:	4622      	mov	r2, r4
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	f2c0 80cc 	blt.w	800ab28 <__kernel_rem_pio2f+0x3b4>
 800a990:	a944      	add	r1, sp, #272	; 0x110
 800a992:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a996:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800aa74 <__kernel_rem_pio2f+0x300>
 800a99a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800aa80 <__kernel_rem_pio2f+0x30c>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	1aa1      	subs	r1, r4, r2
 800a9a2:	e0b6      	b.n	800ab12 <__kernel_rem_pio2f+0x39e>
 800a9a4:	2702      	movs	r7, #2
 800a9a6:	e78c      	b.n	800a8c2 <__kernel_rem_pio2f+0x14e>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	b94b      	cbnz	r3, 800a9c0 <__kernel_rem_pio2f+0x24c>
 800a9ac:	b118      	cbz	r0, 800a9b6 <__kernel_rem_pio2f+0x242>
 800a9ae:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a9b2:	6020      	str	r0, [r4, #0]
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	f10e 0e01 	add.w	lr, lr, #1
 800a9ba:	3404      	adds	r4, #4
 800a9bc:	4603      	mov	r3, r0
 800a9be:	e785      	b.n	800a8cc <__kernel_rem_pio2f+0x158>
 800a9c0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a9c4:	6020      	str	r0, [r4, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	e7f5      	b.n	800a9b6 <__kernel_rem_pio2f+0x242>
 800a9ca:	1e74      	subs	r4, r6, #1
 800a9cc:	a808      	add	r0, sp, #32
 800a9ce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a9d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a9d6:	f10d 0c20 	add.w	ip, sp, #32
 800a9da:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a9de:	e77e      	b.n	800a8de <__kernel_rem_pio2f+0x16a>
 800a9e0:	1e74      	subs	r4, r6, #1
 800a9e2:	a808      	add	r0, sp, #32
 800a9e4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a9e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a9ec:	e7f3      	b.n	800a9d6 <__kernel_rem_pio2f+0x262>
 800a9ee:	ab08      	add	r3, sp, #32
 800a9f0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a9f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a9f8:	4318      	orrs	r0, r3
 800a9fa:	e7ab      	b.n	800a954 <__kernel_rem_pio2f+0x1e0>
 800a9fc:	f10c 0c01 	add.w	ip, ip, #1
 800aa00:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800aa04:	2c00      	cmp	r4, #0
 800aa06:	d0f9      	beq.n	800a9fc <__kernel_rem_pio2f+0x288>
 800aa08:	9b05      	ldr	r3, [sp, #20]
 800aa0a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800aa0e:	eb0d 0003 	add.w	r0, sp, r3
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	18f4      	adds	r4, r6, r3
 800aa16:	ab1c      	add	r3, sp, #112	; 0x70
 800aa18:	1c77      	adds	r7, r6, #1
 800aa1a:	384c      	subs	r0, #76	; 0x4c
 800aa1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa20:	4466      	add	r6, ip
 800aa22:	42be      	cmp	r6, r7
 800aa24:	f6ff af0b 	blt.w	800a83e <__kernel_rem_pio2f+0xca>
 800aa28:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800aa2c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800aa30:	ee07 3a90 	vmov	s15, r3
 800aa34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa38:	f04f 0c00 	mov.w	ip, #0
 800aa3c:	ece4 7a01 	vstmia	r4!, {s15}
 800aa40:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800aa80 <__kernel_rem_pio2f+0x30c>
 800aa44:	46a1      	mov	r9, r4
 800aa46:	458c      	cmp	ip, r1
 800aa48:	dd07      	ble.n	800aa5a <__kernel_rem_pio2f+0x2e6>
 800aa4a:	ece0 7a01 	vstmia	r0!, {s15}
 800aa4e:	3701      	adds	r7, #1
 800aa50:	e7e7      	b.n	800aa22 <__kernel_rem_pio2f+0x2ae>
 800aa52:	9804      	ldr	r0, [sp, #16]
 800aa54:	f04f 0c01 	mov.w	ip, #1
 800aa58:	e7d2      	b.n	800aa00 <__kernel_rem_pio2f+0x28c>
 800aa5a:	ecfe 6a01 	vldmia	lr!, {s13}
 800aa5e:	ed39 7a01 	vldmdb	r9!, {s14}
 800aa62:	f10c 0c01 	add.w	ip, ip, #1
 800aa66:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aa6a:	e7ec      	b.n	800aa46 <__kernel_rem_pio2f+0x2d2>
 800aa6c:	3c01      	subs	r4, #1
 800aa6e:	e775      	b.n	800a95c <__kernel_rem_pio2f+0x1e8>
 800aa70:	0800b44c 	.word	0x0800b44c
 800aa74:	0800b420 	.word	0x0800b420
 800aa78:	43800000 	.word	0x43800000
 800aa7c:	3b800000 	.word	0x3b800000
 800aa80:	00000000 	.word	0x00000000
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	eeb0 0a48 	vmov.f32	s0, s16
 800aa8a:	1a98      	subs	r0, r3, r2
 800aa8c:	f000 fa4e 	bl	800af2c <scalbnf>
 800aa90:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800aa78 <__kernel_rem_pio2f+0x304>
 800aa94:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800aa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9c:	db19      	blt.n	800aad2 <__kernel_rem_pio2f+0x35e>
 800aa9e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800aa7c <__kernel_rem_pio2f+0x308>
 800aaa2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800aaa6:	aa08      	add	r2, sp, #32
 800aaa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aaac:	1c74      	adds	r4, r6, #1
 800aaae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aab2:	3508      	adds	r5, #8
 800aab4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800aab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aabc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aac0:	ee10 3a10 	vmov	r3, s0
 800aac4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aac8:	ee17 3a90 	vmov	r3, s15
 800aacc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aad0:	e74b      	b.n	800a96a <__kernel_rem_pio2f+0x1f6>
 800aad2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aad6:	aa08      	add	r2, sp, #32
 800aad8:	ee10 3a10 	vmov	r3, s0
 800aadc:	4634      	mov	r4, r6
 800aade:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aae2:	e742      	b.n	800a96a <__kernel_rem_pio2f+0x1f6>
 800aae4:	a808      	add	r0, sp, #32
 800aae6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800aaea:	9001      	str	r0, [sp, #4]
 800aaec:	ee07 0a90 	vmov	s15, r0
 800aaf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaf4:	3a01      	subs	r2, #1
 800aaf6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aafa:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aafe:	ed61 7a01 	vstmdb	r1!, {s15}
 800ab02:	e73e      	b.n	800a982 <__kernel_rem_pio2f+0x20e>
 800ab04:	ecfc 6a01 	vldmia	ip!, {s13}
 800ab08:	ecb6 7a01 	vldmia	r6!, {s14}
 800ab0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ab10:	3001      	adds	r0, #1
 800ab12:	4550      	cmp	r0, sl
 800ab14:	dc01      	bgt.n	800ab1a <__kernel_rem_pio2f+0x3a6>
 800ab16:	4288      	cmp	r0, r1
 800ab18:	ddf4      	ble.n	800ab04 <__kernel_rem_pio2f+0x390>
 800ab1a:	a858      	add	r0, sp, #352	; 0x160
 800ab1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab20:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ab24:	3a01      	subs	r2, #1
 800ab26:	e730      	b.n	800a98a <__kernel_rem_pio2f+0x216>
 800ab28:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800ab2a:	2a02      	cmp	r2, #2
 800ab2c:	dc09      	bgt.n	800ab42 <__kernel_rem_pio2f+0x3ce>
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	dc2a      	bgt.n	800ab88 <__kernel_rem_pio2f+0x414>
 800ab32:	d043      	beq.n	800abbc <__kernel_rem_pio2f+0x448>
 800ab34:	f009 0007 	and.w	r0, r9, #7
 800ab38:	b059      	add	sp, #356	; 0x164
 800ab3a:	ecbd 8b04 	vpop	{d8-d9}
 800ab3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab42:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d1f5      	bne.n	800ab34 <__kernel_rem_pio2f+0x3c0>
 800ab48:	ab30      	add	r3, sp, #192	; 0xc0
 800ab4a:	442b      	add	r3, r5
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4620      	mov	r0, r4
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f1a1 0104 	sub.w	r1, r1, #4
 800ab58:	dc51      	bgt.n	800abfe <__kernel_rem_pio2f+0x48a>
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	2901      	cmp	r1, #1
 800ab5e:	f1a2 0204 	sub.w	r2, r2, #4
 800ab62:	dc5c      	bgt.n	800ac1e <__kernel_rem_pio2f+0x4aa>
 800ab64:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800aa80 <__kernel_rem_pio2f+0x30c>
 800ab68:	3304      	adds	r3, #4
 800ab6a:	2c01      	cmp	r4, #1
 800ab6c:	dc67      	bgt.n	800ac3e <__kernel_rem_pio2f+0x4ca>
 800ab6e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ab72:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ab76:	2f00      	cmp	r7, #0
 800ab78:	d167      	bne.n	800ac4a <__kernel_rem_pio2f+0x4d6>
 800ab7a:	edc8 6a00 	vstr	s13, [r8]
 800ab7e:	ed88 7a01 	vstr	s14, [r8, #4]
 800ab82:	edc8 7a02 	vstr	s15, [r8, #8]
 800ab86:	e7d5      	b.n	800ab34 <__kernel_rem_pio2f+0x3c0>
 800ab88:	aa30      	add	r2, sp, #192	; 0xc0
 800ab8a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800aa80 <__kernel_rem_pio2f+0x30c>
 800ab8e:	4413      	add	r3, r2
 800ab90:	4622      	mov	r2, r4
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	da24      	bge.n	800abe0 <__kernel_rem_pio2f+0x46c>
 800ab96:	b34f      	cbz	r7, 800abec <__kernel_rem_pio2f+0x478>
 800ab98:	eef1 7a47 	vneg.f32	s15, s14
 800ab9c:	edc8 7a00 	vstr	s15, [r8]
 800aba0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800aba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aba8:	aa31      	add	r2, sp, #196	; 0xc4
 800abaa:	2301      	movs	r3, #1
 800abac:	429c      	cmp	r4, r3
 800abae:	da20      	bge.n	800abf2 <__kernel_rem_pio2f+0x47e>
 800abb0:	b10f      	cbz	r7, 800abb6 <__kernel_rem_pio2f+0x442>
 800abb2:	eef1 7a67 	vneg.f32	s15, s15
 800abb6:	edc8 7a01 	vstr	s15, [r8, #4]
 800abba:	e7bb      	b.n	800ab34 <__kernel_rem_pio2f+0x3c0>
 800abbc:	aa30      	add	r2, sp, #192	; 0xc0
 800abbe:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800aa80 <__kernel_rem_pio2f+0x30c>
 800abc2:	4413      	add	r3, r2
 800abc4:	2c00      	cmp	r4, #0
 800abc6:	da05      	bge.n	800abd4 <__kernel_rem_pio2f+0x460>
 800abc8:	b10f      	cbz	r7, 800abce <__kernel_rem_pio2f+0x45a>
 800abca:	eef1 7a67 	vneg.f32	s15, s15
 800abce:	edc8 7a00 	vstr	s15, [r8]
 800abd2:	e7af      	b.n	800ab34 <__kernel_rem_pio2f+0x3c0>
 800abd4:	ed33 7a01 	vldmdb	r3!, {s14}
 800abd8:	3c01      	subs	r4, #1
 800abda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abde:	e7f1      	b.n	800abc4 <__kernel_rem_pio2f+0x450>
 800abe0:	ed73 7a01 	vldmdb	r3!, {s15}
 800abe4:	3a01      	subs	r2, #1
 800abe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800abea:	e7d2      	b.n	800ab92 <__kernel_rem_pio2f+0x41e>
 800abec:	eef0 7a47 	vmov.f32	s15, s14
 800abf0:	e7d4      	b.n	800ab9c <__kernel_rem_pio2f+0x428>
 800abf2:	ecb2 7a01 	vldmia	r2!, {s14}
 800abf6:	3301      	adds	r3, #1
 800abf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abfc:	e7d6      	b.n	800abac <__kernel_rem_pio2f+0x438>
 800abfe:	edd1 7a00 	vldr	s15, [r1]
 800ac02:	edd1 6a01 	vldr	s13, [r1, #4]
 800ac06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ac0a:	3801      	subs	r0, #1
 800ac0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac10:	ed81 7a00 	vstr	s14, [r1]
 800ac14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac18:	edc1 7a01 	vstr	s15, [r1, #4]
 800ac1c:	e799      	b.n	800ab52 <__kernel_rem_pio2f+0x3de>
 800ac1e:	edd2 7a00 	vldr	s15, [r2]
 800ac22:	edd2 6a01 	vldr	s13, [r2, #4]
 800ac26:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ac2a:	3901      	subs	r1, #1
 800ac2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac30:	ed82 7a00 	vstr	s14, [r2]
 800ac34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac38:	edc2 7a01 	vstr	s15, [r2, #4]
 800ac3c:	e78e      	b.n	800ab5c <__kernel_rem_pio2f+0x3e8>
 800ac3e:	ed33 7a01 	vldmdb	r3!, {s14}
 800ac42:	3c01      	subs	r4, #1
 800ac44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac48:	e78f      	b.n	800ab6a <__kernel_rem_pio2f+0x3f6>
 800ac4a:	eef1 6a66 	vneg.f32	s13, s13
 800ac4e:	eeb1 7a47 	vneg.f32	s14, s14
 800ac52:	edc8 6a00 	vstr	s13, [r8]
 800ac56:	ed88 7a01 	vstr	s14, [r8, #4]
 800ac5a:	eef1 7a67 	vneg.f32	s15, s15
 800ac5e:	e790      	b.n	800ab82 <__kernel_rem_pio2f+0x40e>

0800ac60 <__kernel_sinf>:
 800ac60:	ee10 3a10 	vmov	r3, s0
 800ac64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac68:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ac6c:	da04      	bge.n	800ac78 <__kernel_sinf+0x18>
 800ac6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ac72:	ee17 3a90 	vmov	r3, s15
 800ac76:	b35b      	cbz	r3, 800acd0 <__kernel_sinf+0x70>
 800ac78:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ac7c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800acd4 <__kernel_sinf+0x74>
 800ac80:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800acd8 <__kernel_sinf+0x78>
 800ac84:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac88:	eddf 7a14 	vldr	s15, [pc, #80]	; 800acdc <__kernel_sinf+0x7c>
 800ac8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac90:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ace0 <__kernel_sinf+0x80>
 800ac94:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ac98:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ace4 <__kernel_sinf+0x84>
 800ac9c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800aca0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aca4:	b930      	cbnz	r0, 800acb4 <__kernel_sinf+0x54>
 800aca6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ace8 <__kernel_sinf+0x88>
 800acaa:	eea7 6a27 	vfma.f32	s12, s14, s15
 800acae:	eea6 0a26 	vfma.f32	s0, s12, s13
 800acb2:	4770      	bx	lr
 800acb4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800acb8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800acbc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800acc0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800acc4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800acec <__kernel_sinf+0x8c>
 800acc8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800accc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	2f2ec9d3 	.word	0x2f2ec9d3
 800acd8:	b2d72f34 	.word	0xb2d72f34
 800acdc:	3638ef1b 	.word	0x3638ef1b
 800ace0:	b9500d01 	.word	0xb9500d01
 800ace4:	3c088889 	.word	0x3c088889
 800ace8:	be2aaaab 	.word	0xbe2aaaab
 800acec:	3e2aaaab 	.word	0x3e2aaaab

0800acf0 <atanf>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	ee10 5a10 	vmov	r5, s0
 800acf6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800acfa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800acfe:	eef0 7a40 	vmov.f32	s15, s0
 800ad02:	db10      	blt.n	800ad26 <atanf+0x36>
 800ad04:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ad08:	dd04      	ble.n	800ad14 <atanf+0x24>
 800ad0a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ad0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ae4c <atanf+0x15c>
 800ad18:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ae50 <atanf+0x160>
 800ad1c:	2d00      	cmp	r5, #0
 800ad1e:	bfd8      	it	le
 800ad20:	eef0 7a40 	vmovle.f32	s15, s0
 800ad24:	e7f3      	b.n	800ad0e <atanf+0x1e>
 800ad26:	4b4b      	ldr	r3, [pc, #300]	; (800ae54 <atanf+0x164>)
 800ad28:	429c      	cmp	r4, r3
 800ad2a:	dc10      	bgt.n	800ad4e <atanf+0x5e>
 800ad2c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ad30:	da0a      	bge.n	800ad48 <atanf+0x58>
 800ad32:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ae58 <atanf+0x168>
 800ad36:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ad3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ad42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad46:	dce2      	bgt.n	800ad0e <atanf+0x1e>
 800ad48:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4c:	e013      	b.n	800ad76 <atanf+0x86>
 800ad4e:	f000 f8a3 	bl	800ae98 <fabsf>
 800ad52:	4b42      	ldr	r3, [pc, #264]	; (800ae5c <atanf+0x16c>)
 800ad54:	429c      	cmp	r4, r3
 800ad56:	dc4f      	bgt.n	800adf8 <atanf+0x108>
 800ad58:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ad5c:	429c      	cmp	r4, r3
 800ad5e:	dc41      	bgt.n	800ade4 <atanf+0xf4>
 800ad60:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ad64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ad68:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ad72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ad7c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ae60 <atanf+0x170>
 800ad80:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ae64 <atanf+0x174>
 800ad84:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ae68 <atanf+0x178>
 800ad88:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ad8c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ad90:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae6c <atanf+0x17c>
 800ad94:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ad98:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ae70 <atanf+0x180>
 800ad9c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ada0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ae74 <atanf+0x184>
 800ada4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ada8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ae78 <atanf+0x188>
 800adac:	eee7 5a26 	vfma.f32	s11, s14, s13
 800adb0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ae7c <atanf+0x18c>
 800adb4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800adb8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ae80 <atanf+0x190>
 800adbc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800adc0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ae84 <atanf+0x194>
 800adc4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800adc8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ae88 <atanf+0x198>
 800adcc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800add0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800add4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800add8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800addc:	d121      	bne.n	800ae22 <atanf+0x132>
 800adde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ade2:	e794      	b.n	800ad0e <atanf+0x1e>
 800ade4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ade8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800adec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800adf0:	2301      	movs	r3, #1
 800adf2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800adf6:	e7be      	b.n	800ad76 <atanf+0x86>
 800adf8:	4b24      	ldr	r3, [pc, #144]	; (800ae8c <atanf+0x19c>)
 800adfa:	429c      	cmp	r4, r3
 800adfc:	dc0b      	bgt.n	800ae16 <atanf+0x126>
 800adfe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ae02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae06:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ae10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae14:	e7af      	b.n	800ad76 <atanf+0x86>
 800ae16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ae1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e7a9      	b.n	800ad76 <atanf+0x86>
 800ae22:	4a1b      	ldr	r2, [pc, #108]	; (800ae90 <atanf+0x1a0>)
 800ae24:	491b      	ldr	r1, [pc, #108]	; (800ae94 <atanf+0x1a4>)
 800ae26:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ae2a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ae2e:	ed93 0a00 	vldr	s0, [r3]
 800ae32:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ae36:	ed92 0a00 	vldr	s0, [r2]
 800ae3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ae44:	bfb8      	it	lt
 800ae46:	eef1 7a67 	vneglt.f32	s15, s15
 800ae4a:	e760      	b.n	800ad0e <atanf+0x1e>
 800ae4c:	3fc90fdb 	.word	0x3fc90fdb
 800ae50:	bfc90fdb 	.word	0xbfc90fdb
 800ae54:	3edfffff 	.word	0x3edfffff
 800ae58:	7149f2ca 	.word	0x7149f2ca
 800ae5c:	3f97ffff 	.word	0x3f97ffff
 800ae60:	3c8569d7 	.word	0x3c8569d7
 800ae64:	3d4bda59 	.word	0x3d4bda59
 800ae68:	bd6ef16b 	.word	0xbd6ef16b
 800ae6c:	3d886b35 	.word	0x3d886b35
 800ae70:	3dba2e6e 	.word	0x3dba2e6e
 800ae74:	3e124925 	.word	0x3e124925
 800ae78:	3eaaaaab 	.word	0x3eaaaaab
 800ae7c:	bd15a221 	.word	0xbd15a221
 800ae80:	bd9d8795 	.word	0xbd9d8795
 800ae84:	bde38e38 	.word	0xbde38e38
 800ae88:	be4ccccd 	.word	0xbe4ccccd
 800ae8c:	401bffff 	.word	0x401bffff
 800ae90:	0800b458 	.word	0x0800b458
 800ae94:	0800b468 	.word	0x0800b468

0800ae98 <fabsf>:
 800ae98:	ee10 3a10 	vmov	r3, s0
 800ae9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aea0:	ee00 3a10 	vmov	s0, r3
 800aea4:	4770      	bx	lr
	...

0800aea8 <floorf>:
 800aea8:	ee10 3a10 	vmov	r3, s0
 800aeac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aeb0:	3a7f      	subs	r2, #127	; 0x7f
 800aeb2:	2a16      	cmp	r2, #22
 800aeb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aeb8:	dc2a      	bgt.n	800af10 <floorf+0x68>
 800aeba:	2a00      	cmp	r2, #0
 800aebc:	da11      	bge.n	800aee2 <floorf+0x3a>
 800aebe:	eddf 7a18 	vldr	s15, [pc, #96]	; 800af20 <floorf+0x78>
 800aec2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aec6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aece:	dd05      	ble.n	800aedc <floorf+0x34>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	da23      	bge.n	800af1c <floorf+0x74>
 800aed4:	4a13      	ldr	r2, [pc, #76]	; (800af24 <floorf+0x7c>)
 800aed6:	2900      	cmp	r1, #0
 800aed8:	bf18      	it	ne
 800aeda:	4613      	movne	r3, r2
 800aedc:	ee00 3a10 	vmov	s0, r3
 800aee0:	4770      	bx	lr
 800aee2:	4911      	ldr	r1, [pc, #68]	; (800af28 <floorf+0x80>)
 800aee4:	4111      	asrs	r1, r2
 800aee6:	420b      	tst	r3, r1
 800aee8:	d0fa      	beq.n	800aee0 <floorf+0x38>
 800aeea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800af20 <floorf+0x78>
 800aeee:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aef2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefa:	ddef      	ble.n	800aedc <floorf+0x34>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	bfbe      	ittt	lt
 800af00:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800af04:	fa40 f202 	asrlt.w	r2, r0, r2
 800af08:	189b      	addlt	r3, r3, r2
 800af0a:	ea23 0301 	bic.w	r3, r3, r1
 800af0e:	e7e5      	b.n	800aedc <floorf+0x34>
 800af10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800af14:	d3e4      	bcc.n	800aee0 <floorf+0x38>
 800af16:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af1a:	4770      	bx	lr
 800af1c:	2300      	movs	r3, #0
 800af1e:	e7dd      	b.n	800aedc <floorf+0x34>
 800af20:	7149f2ca 	.word	0x7149f2ca
 800af24:	bf800000 	.word	0xbf800000
 800af28:	007fffff 	.word	0x007fffff

0800af2c <scalbnf>:
 800af2c:	ee10 3a10 	vmov	r3, s0
 800af30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800af34:	d025      	beq.n	800af82 <scalbnf+0x56>
 800af36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af3a:	d302      	bcc.n	800af42 <scalbnf+0x16>
 800af3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af40:	4770      	bx	lr
 800af42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800af46:	d122      	bne.n	800af8e <scalbnf+0x62>
 800af48:	4b2a      	ldr	r3, [pc, #168]	; (800aff4 <scalbnf+0xc8>)
 800af4a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800aff8 <scalbnf+0xcc>
 800af4e:	4298      	cmp	r0, r3
 800af50:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af54:	db16      	blt.n	800af84 <scalbnf+0x58>
 800af56:	ee10 3a10 	vmov	r3, s0
 800af5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800af5e:	3a19      	subs	r2, #25
 800af60:	4402      	add	r2, r0
 800af62:	2afe      	cmp	r2, #254	; 0xfe
 800af64:	dd15      	ble.n	800af92 <scalbnf+0x66>
 800af66:	ee10 3a10 	vmov	r3, s0
 800af6a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800affc <scalbnf+0xd0>
 800af6e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b000 <scalbnf+0xd4>
 800af72:	2b00      	cmp	r3, #0
 800af74:	eeb0 7a67 	vmov.f32	s14, s15
 800af78:	bfb8      	it	lt
 800af7a:	eef0 7a66 	vmovlt.f32	s15, s13
 800af7e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800af82:	4770      	bx	lr
 800af84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b004 <scalbnf+0xd8>
 800af88:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af8c:	4770      	bx	lr
 800af8e:	0dd2      	lsrs	r2, r2, #23
 800af90:	e7e6      	b.n	800af60 <scalbnf+0x34>
 800af92:	2a00      	cmp	r2, #0
 800af94:	dd06      	ble.n	800afa4 <scalbnf+0x78>
 800af96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af9e:	ee00 3a10 	vmov	s0, r3
 800afa2:	4770      	bx	lr
 800afa4:	f112 0f16 	cmn.w	r2, #22
 800afa8:	da1a      	bge.n	800afe0 <scalbnf+0xb4>
 800afaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afae:	4298      	cmp	r0, r3
 800afb0:	ee10 3a10 	vmov	r3, s0
 800afb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afb8:	dd0a      	ble.n	800afd0 <scalbnf+0xa4>
 800afba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800affc <scalbnf+0xd0>
 800afbe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b000 <scalbnf+0xd4>
 800afc2:	eef0 7a40 	vmov.f32	s15, s0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bf18      	it	ne
 800afca:	eeb0 0a47 	vmovne.f32	s0, s14
 800afce:	e7db      	b.n	800af88 <scalbnf+0x5c>
 800afd0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b004 <scalbnf+0xd8>
 800afd4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b008 <scalbnf+0xdc>
 800afd8:	eef0 7a40 	vmov.f32	s15, s0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	e7f3      	b.n	800afc8 <scalbnf+0x9c>
 800afe0:	3219      	adds	r2, #25
 800afe2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afe6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800afea:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b00c <scalbnf+0xe0>
 800afee:	ee07 3a10 	vmov	s14, r3
 800aff2:	e7c4      	b.n	800af7e <scalbnf+0x52>
 800aff4:	ffff3cb0 	.word	0xffff3cb0
 800aff8:	4c000000 	.word	0x4c000000
 800affc:	7149f2ca 	.word	0x7149f2ca
 800b000:	f149f2ca 	.word	0xf149f2ca
 800b004:	0da24260 	.word	0x0da24260
 800b008:	8da24260 	.word	0x8da24260
 800b00c:	33000000 	.word	0x33000000

0800b010 <_init>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	bf00      	nop
 800b014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b016:	bc08      	pop	{r3}
 800b018:	469e      	mov	lr, r3
 800b01a:	4770      	bx	lr

0800b01c <_fini>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	bf00      	nop
 800b020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b022:	bc08      	pop	{r3}
 800b024:	469e      	mov	lr, r3
 800b026:	4770      	bx	lr
