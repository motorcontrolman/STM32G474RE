
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bac  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d4  080081d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081dc  080081dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080081e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000070  08008254  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08008254  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002405d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395a  00000000  00000000  000440fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00019b32  00000000  00000000  00047a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00061590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a0  00000000  00000000  000629f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e1a  00000000  00000000  00064090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025237  00000000  00000000  0008deaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115a30  00000000  00000000  000b30e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c8b11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039d4  00000000  00000000  001c8b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d6c 	.word	0x08007d6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08007d6c 	.word	0x08007d6c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b974 	b.w	8000b84 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468e      	mov	lr, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d14d      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c2:	428a      	cmp	r2, r1
 80008c4:	4694      	mov	ip, r2
 80008c6:	d969      	bls.n	800099c <__udivmoddi4+0xe8>
 80008c8:	fab2 f282 	clz	r2, r2
 80008cc:	b152      	cbz	r2, 80008e4 <__udivmoddi4+0x30>
 80008ce:	fa01 f302 	lsl.w	r3, r1, r2
 80008d2:	f1c2 0120 	rsb	r1, r2, #32
 80008d6:	fa20 f101 	lsr.w	r1, r0, r1
 80008da:	fa0c fc02 	lsl.w	ip, ip, r2
 80008de:	ea41 0e03 	orr.w	lr, r1, r3
 80008e2:	4094      	lsls	r4, r2
 80008e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e8:	0c21      	lsrs	r1, r4, #16
 80008ea:	fbbe f6f8 	udiv	r6, lr, r8
 80008ee:	fa1f f78c 	uxth.w	r7, ip
 80008f2:	fb08 e316 	mls	r3, r8, r6, lr
 80008f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008fa:	fb06 f107 	mul.w	r1, r6, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 30ff 	add.w	r0, r6, #4294967295
 800090a:	f080 811f 	bcs.w	8000b4c <__udivmoddi4+0x298>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 811c 	bls.w	8000b4c <__udivmoddi4+0x298>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a5b      	subs	r3, r3, r1
 800091a:	b2a4      	uxth	r4, r4
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3310 	mls	r3, r8, r0, r3
 8000924:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000928:	fb00 f707 	mul.w	r7, r0, r7
 800092c:	42a7      	cmp	r7, r4
 800092e:	d90a      	bls.n	8000946 <__udivmoddi4+0x92>
 8000930:	eb1c 0404 	adds.w	r4, ip, r4
 8000934:	f100 33ff 	add.w	r3, r0, #4294967295
 8000938:	f080 810a 	bcs.w	8000b50 <__udivmoddi4+0x29c>
 800093c:	42a7      	cmp	r7, r4
 800093e:	f240 8107 	bls.w	8000b50 <__udivmoddi4+0x29c>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094a:	1be4      	subs	r4, r4, r7
 800094c:	2600      	movs	r6, #0
 800094e:	b11d      	cbz	r5, 8000958 <__udivmoddi4+0xa4>
 8000950:	40d4      	lsrs	r4, r2
 8000952:	2300      	movs	r3, #0
 8000954:	e9c5 4300 	strd	r4, r3, [r5]
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d909      	bls.n	8000976 <__udivmoddi4+0xc2>
 8000962:	2d00      	cmp	r5, #0
 8000964:	f000 80ef 	beq.w	8000b46 <__udivmoddi4+0x292>
 8000968:	2600      	movs	r6, #0
 800096a:	e9c5 0100 	strd	r0, r1, [r5]
 800096e:	4630      	mov	r0, r6
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	fab3 f683 	clz	r6, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d14a      	bne.n	8000a14 <__udivmoddi4+0x160>
 800097e:	428b      	cmp	r3, r1
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xd4>
 8000982:	4282      	cmp	r2, r0
 8000984:	f200 80f9 	bhi.w	8000b7a <__udivmoddi4+0x2c6>
 8000988:	1a84      	subs	r4, r0, r2
 800098a:	eb61 0303 	sbc.w	r3, r1, r3
 800098e:	2001      	movs	r0, #1
 8000990:	469e      	mov	lr, r3
 8000992:	2d00      	cmp	r5, #0
 8000994:	d0e0      	beq.n	8000958 <__udivmoddi4+0xa4>
 8000996:	e9c5 4e00 	strd	r4, lr, [r5]
 800099a:	e7dd      	b.n	8000958 <__udivmoddi4+0xa4>
 800099c:	b902      	cbnz	r2, 80009a0 <__udivmoddi4+0xec>
 800099e:	deff      	udf	#255	; 0xff
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	f040 8092 	bne.w	8000ace <__udivmoddi4+0x21a>
 80009aa:	eba1 010c 	sub.w	r1, r1, ip
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2601      	movs	r6, #1
 80009b8:	0c20      	lsrs	r0, r4, #16
 80009ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80009be:	fb07 1113 	mls	r1, r7, r3, r1
 80009c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c6:	fb0e f003 	mul.w	r0, lr, r3
 80009ca:	4288      	cmp	r0, r1
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x12c>
 80009ce:	eb1c 0101 	adds.w	r1, ip, r1
 80009d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x12a>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 80009de:	4643      	mov	r3, r8
 80009e0:	1a09      	subs	r1, r1, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x156>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x154>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2ca>
 8000a08:	4608      	mov	r0, r1
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a12:	e79c      	b.n	800094e <__udivmoddi4+0x9a>
 8000a14:	f1c6 0720 	rsb	r7, r6, #32
 8000a18:	40b3      	lsls	r3, r6
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa20 f407 	lsr.w	r4, r0, r7
 8000a26:	fa01 f306 	lsl.w	r3, r1, r6
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	40f9      	lsrs	r1, r7
 8000a2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a32:	fa00 f306 	lsl.w	r3, r0, r6
 8000a36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a3a:	0c20      	lsrs	r0, r4, #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fb09 1118 	mls	r1, r9, r8, r1
 8000a44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a48:	fb08 f00e 	mul.w	r0, r8, lr
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b8>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2bc>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2bc>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a74:	fb09 1110 	mls	r1, r9, r0, r1
 8000a78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a80:	458e      	cmp	lr, r1
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1e2>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2b4>
 8000a8e:	458e      	cmp	lr, r1
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2b4>
 8000a92:	3802      	subs	r0, #2
 8000a94:	4461      	add	r1, ip
 8000a96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9e:	eba1 010e 	sub.w	r1, r1, lr
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46a6      	mov	lr, r4
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x2a4>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x2a0>
 8000aac:	b15d      	cbz	r5, 8000ac6 <__udivmoddi4+0x212>
 8000aae:	ebb3 0208 	subs.w	r2, r3, r8
 8000ab2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aba:	fa22 f306 	lsr.w	r3, r2, r6
 8000abe:	40f1      	lsrs	r1, r6
 8000ac0:	431f      	orrs	r7, r3
 8000ac2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	40d8      	lsrs	r0, r3
 8000ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad8:	fa21 f303 	lsr.w	r3, r1, r3
 8000adc:	4091      	lsls	r1, r2
 8000ade:	4301      	orrs	r1, r0
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aec:	fb07 3610 	mls	r6, r7, r0, r3
 8000af0:	0c0b      	lsrs	r3, r1, #16
 8000af2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af6:	fb00 f60e 	mul.w	r6, r0, lr
 8000afa:	429e      	cmp	r6, r3
 8000afc:	fa04 f402 	lsl.w	r4, r4, r2
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x260>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b8>
 8000b0c:	429e      	cmp	r6, r3
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b8>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	1b9b      	subs	r3, r3, r6
 8000b16:	b289      	uxth	r1, r1
 8000b18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b24:	fb06 f30e 	mul.w	r3, r6, lr
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x28a>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b3a:	3e02      	subs	r6, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0x104>
 8000b46:	462e      	mov	r6, r5
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e705      	b.n	8000958 <__udivmoddi4+0xa4>
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	e6e3      	b.n	8000918 <__udivmoddi4+0x64>
 8000b50:	4618      	mov	r0, r3
 8000b52:	e6f8      	b.n	8000946 <__udivmoddi4+0x92>
 8000b54:	454b      	cmp	r3, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f8>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b60:	3801      	subs	r0, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f8>
 8000b64:	4646      	mov	r6, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x28a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1e2>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b8>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4461      	add	r1, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x12c>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e709      	b.n	8000992 <__udivmoddi4+0xde>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x156>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <cfPhaseLockedLoop>:

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000b88:	ee20 1a01 	vmul.f32	s2, s0, s2
 8000b8c:	edd0 7a00 	vldr	s15, [r0]
 8000b90:	ee31 1a27 	vadd.f32	s2, s2, s15
 8000b94:	ed80 1a00 	vstr	s2, [r0]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000b98:	ee20 0a20 	vmul.f32	s0, s0, s1

	return ElectAngVeloEstimate;
}
 8000b9c:	ee31 0a00 	vadd.f32	s0, s2, s0
 8000ba0:	4770      	bx	lr

08000ba2 <gfDivideAvoidZero>:
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
	float result;
	if ( den >= 0 && den < threshold )
 8000ba2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000baa:	db04      	blt.n	8000bb6 <gfDivideAvoidZero+0x14>
 8000bac:	eef4 0ac1 	vcmpe.f32	s1, s2
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	d411      	bmi.n	8000bda <gfDivideAvoidZero+0x38>
		den = threshold;
	else if( den < 0 && den > -threshold)
 8000bb6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	d402      	bmi.n	8000bc6 <gfDivideAvoidZero+0x24>
		den = -threshold;

	result = num / den;
	return result;
}
 8000bc0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8000bc4:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 8000bc6:	eeb1 1a41 	vneg.f32	s2, s2
 8000bca:	eeb4 1ae0 	vcmpe.f32	s2, s1
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	d5f5      	bpl.n	8000bc0 <gfDivideAvoidZero+0x1e>
		den = -threshold;
 8000bd4:	eef0 0a41 	vmov.f32	s1, s2
 8000bd8:	e7f2      	b.n	8000bc0 <gfDivideAvoidZero+0x1e>
		den = threshold;
 8000bda:	eef0 0a41 	vmov.f32	s1, s2
 8000bde:	e7ef      	b.n	8000bc0 <gfDivideAvoidZero+0x1e>

08000be0 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000be0:	b508      	push	{r3, lr}
	theta = fmodf(theta, TWOPI);
 8000be2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000c1c <gfWrapTheta+0x3c>
 8000be6:	f006 f973 	bl	8006ed0 <fmodf>
	if( theta > PI)
 8000bea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000c20 <gfWrapTheta+0x40>
 8000bee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf6:	dd04      	ble.n	8000c02 <gfWrapTheta+0x22>
		theta -= TWOPI;
 8000bf8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000c1c <gfWrapTheta+0x3c>
 8000bfc:	ee30 0a67 	vsub.f32	s0, s0, s15
	else if( theta < -PI)
		theta += TWOPI;

	return theta;
}
 8000c00:	bd08      	pop	{r3, pc}
	else if( theta < -PI)
 8000c02:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000c24 <gfWrapTheta+0x44>
 8000c06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	d5f7      	bpl.n	8000c00 <gfWrapTheta+0x20>
		theta += TWOPI;
 8000c10:	eddf 7a02 	vldr	s15, [pc, #8]	; 8000c1c <gfWrapTheta+0x3c>
 8000c14:	ee30 0a27 	vadd.f32	s0, s0, s15
	return theta;
 8000c18:	e7f2      	b.n	8000c00 <gfWrapTheta+0x20>
 8000c1a:	bf00      	nop
 8000c1c:	40c90fdb 	.word	0x40c90fdb
 8000c20:	40490fdb 	.word	0x40490fdb
 8000c24:	c0490fdb 	.word	0xc0490fdb

08000c28 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000c28:	eef0 7a40 	vmov.f32	s15, s0
 8000c2c:	eeb0 0a41 	vmov.f32	s0, s2
	if(input > Upper) input = Upper;
 8000c30:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c38:	dc01      	bgt.n	8000c3e <gUpperLowerLimit+0x16>
 8000c3a:	eef0 0a67 	vmov.f32	s1, s15
	if(input < Lower) input = Lower;
 8000c3e:	eef4 0ac0 	vcmpe.f32	s1, s0
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d401      	bmi.n	8000c4c <gUpperLowerLimit+0x24>
 8000c48:	eeb0 0a60 	vmov.f32	s0, s1
	return input;
}
 8000c4c:	4770      	bx	lr

08000c4e <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	outputMode[0] = OUTPUTMODE_OPEN;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	700b      	strb	r3, [r1, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 8000c52:	704b      	strb	r3, [r1, #1]
	outputMode[2] = OUTPUTMODE_OPEN;
 8000c54:	708b      	strb	r3, [r1, #2]
	Duty[0] = 0.0f;
 8000c56:	2300      	movs	r3, #0
 8000c58:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 8000c5a:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 8000c5c:	6083      	str	r3, [r0, #8]
}
 8000c5e:	4770      	bx	lr

08000c60 <gLPF>:
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 8000c60:	ee20 1a81 	vmul.f32	s2, s1, s2
	yn_1 = *y;
 8000c64:	ed90 7a00 	vldr	s14, [r0]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000c68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c6c:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8000c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c74:	ee21 1a00 	vmul.f32	s2, s2, s0
 8000c78:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000c7c:	edc0 7a00 	vstr	s15, [r0]
}
 8000c80:	4770      	bx	lr

08000c82 <gRateLimit>:
	// time constant tau = 1/wc
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 8000c82:	ee60 0a81 	vmul.f32	s1, s1, s2
	yn_1 = *y;
 8000c86:	edd0 7a00 	vldr	s15, [r0]

	if( r > yn_1 )
 8000c8a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	d504      	bpl.n	8000c9e <gRateLimit+0x1c>
		ytmp = yn_1 + dy;
 8000c94:	ee30 7aa7 	vadd.f32	s14, s1, s15
	else if( r < yn_1 )
		ytmp = yn_1 - dy;

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 8000c98:	ed80 7a00 	vstr	s14, [r0]

}
 8000c9c:	4770      	bx	lr
	else if( r < yn_1 )
 8000c9e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	ddf7      	ble.n	8000c98 <gRateLimit+0x16>
		ytmp = yn_1 - dy;
 8000ca8:	ee37 7ae0 	vsub.f32	s14, s15, s1
 8000cac:	e7f4      	b.n	8000c98 <gRateLimit+0x16>
	...

08000cb0 <slctPosModeForSensorless>:
	}
}

static void slctPosModeForSensorless(float electAngVelo, uint8_t* posMode){

	if(*posMode != POSMODE_SENSORLESS){
 8000cb0:	7803      	ldrb	r3, [r0, #0]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d00c      	beq.n	8000cd0 <slctPosModeForSensorless+0x20>
		if (electAngVelo > ELECTANGVELO_FREERUN2SENSORLESS)
 8000cb6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000cec <slctPosModeForSensorless+0x3c>
 8000cba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	dd02      	ble.n	8000cca <slctPosModeForSensorless+0x1a>
			*posMode = POSMODE_SENSORLESS;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	7003      	strb	r3, [r0, #0]
 8000cc8:	4770      	bx	lr
		else
			*posMode = POSMODE_FREERUN;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	7003      	strb	r3, [r0, #0]
 8000cce:	4770      	bx	lr
	}
	else if(*posMode == POSMODE_SENSORLESS){
		if (electAngVelo < ELECTANGVELO_SENSORLESS2FREERUN)
 8000cd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000cf0 <slctPosModeForSensorless+0x40>
 8000cd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	d502      	bpl.n	8000ce4 <slctPosModeForSensorless+0x34>
			*posMode = POSMODE_FREERUN;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	7003      	strb	r3, [r0, #0]
 8000ce2:	4770      	bx	lr
		else
			*posMode = POSMODE_SENSORLESS;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	7003      	strb	r3, [r0, #0]
	}
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	43fa0000 	.word	0x43fa0000
 8000cf0:	43c80000 	.word	0x43c80000

08000cf4 <slctDrvModeForSensorless>:

static void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode){

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000cf4:	7803      	ldrb	r3, [r0, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d00c      	beq.n	8000d14 <slctDrvModeForSensorless+0x20>
		if (electAngVelo > ELECTANGVELO_OPENLOOP2VECTORCONTROL)
 8000cfa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000d30 <slctDrvModeForSensorless+0x3c>
 8000cfe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	dd02      	ble.n	8000d0e <slctDrvModeForSensorless+0x1a>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	7003      	strb	r3, [r0, #0]
 8000d0c:	4770      	bx	lr
		else
			*drvMode = DRVMODE_OPENLOOP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	7003      	strb	r3, [r0, #0]
 8000d12:	4770      	bx	lr
	}
	else if(*drvMode == DRVMODE_VECTORCONTROL){
		if (electAngVelo < ELECTANGVELO_VECTORCONTROL2OPENLOOP)
 8000d14:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000d34 <slctDrvModeForSensorless+0x40>
 8000d18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	d502      	bpl.n	8000d28 <slctDrvModeForSensorless+0x34>
			*drvMode = DRVMODE_OPENLOOP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	7003      	strb	r3, [r0, #0]
 8000d26:	4770      	bx	lr
		else
			*drvMode = DRVMODE_VECTORCONTROL;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	7003      	strb	r3, [r0, #0]
	}
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	43fa0000 	.word	0x43fa0000
 8000d34:	43c80000 	.word	0x43c80000

08000d38 <slctElectAngleFromPosMode>:

static void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b093      	sub	sp, #76	; 0x4c
 8000d3c:	460c      	mov	r4, r1
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 8000d3e:	2804      	cmp	r0, #4
 8000d40:	d870      	bhi.n	8000e24 <slctElectAngleFromPosMode+0xec>
 8000d42:	e8df f000 	tbb	[pc, r0]
 8000d46:	0803      	.short	0x0803
 8000d48:	4234      	.short	0x4234
 8000d4a:	50          	.byte	0x50
 8000d4b:	00          	.byte	0x00
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	600b      	str	r3, [r1, #0]
		sensData->electAngVelo = 0.0f;
 8000d50:	604b      	str	r3, [r1, #4]
	default:
		sensData->electAngle = 0.0f;
		sensData->electAngVelo = 0.0f;
		break;
	}
}
 8000d52:	b013      	add	sp, #76	; 0x4c
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000d56:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <slctElectAngleFromPosMode+0xf4>)
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	edc1 7a01 	vstr	s15, [r1, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000d60:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000e30 <slctElectAngleFromPosMode+0xf8>
 8000d64:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <slctElectAngleFromPosMode+0xfc>)
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d72:	ed83 0a00 	vstr	s0, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 8000d76:	f7ff ff33 	bl	8000be0 <gfWrapTheta>
 8000d7a:	ed84 0a00 	vstr	s0, [r4]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000d7e:	4e2e      	ldr	r6, [pc, #184]	; (8000e38 <slctElectAngleFromPosMode+0x100>)
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <slctElectAngleFromPosMode+0x104>)
 8000d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d84:	ac04      	add	r4, sp, #16
 8000d86:	4d2e      	ldr	r5, [pc, #184]	; (8000e40 <slctElectAngleFromPosMode+0x108>)
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d98:	f106 030c 	add.w	r3, r6, #12
 8000d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000da2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 ff9c 	bl	8001ce4 <calcElectAngleEstimate>
		break;
 8000dac:	e7d1      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000dae:	ab10      	add	r3, sp, #64	; 0x40
 8000db0:	aa11      	add	r2, sp, #68	; 0x44
 8000db2:	2100      	movs	r1, #0
 8000db4:	4823      	ldr	r0, [pc, #140]	; (8000e44 <slctElectAngleFromPosMode+0x10c>)
 8000db6:	ed90 0a00 	vldr	s0, [r0]
 8000dba:	4823      	ldr	r0, [pc, #140]	; (8000e48 <slctElectAngleFromPosMode+0x110>)
 8000dbc:	f000 faf6 	bl	80013ac <calcElectAngle>
		sensData->electAngle = electAngle;
 8000dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000dc2:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = electAngVelo;
 8000dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000dc6:	6063      	str	r3, [r4, #4]
		break;
 8000dc8:	e7c3      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000dca:	ab10      	add	r3, sp, #64	; 0x40
 8000dcc:	aa11      	add	r2, sp, #68	; 0x44
 8000dce:	2101      	movs	r1, #1
 8000dd0:	481c      	ldr	r0, [pc, #112]	; (8000e44 <slctElectAngleFromPosMode+0x10c>)
 8000dd2:	ed90 0a00 	vldr	s0, [r0]
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <slctElectAngleFromPosMode+0x110>)
 8000dd8:	f000 fae8 	bl	80013ac <calcElectAngle>
		sensData->electAngle = electAngle;
 8000ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000dde:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = electAngVelo;
 8000de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000de2:	6063      	str	r3, [r4, #4]
		break;
 8000de4:	e7b5      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000de6:	4e14      	ldr	r6, [pc, #80]	; (8000e38 <slctElectAngleFromPosMode+0x100>)
 8000de8:	4f14      	ldr	r7, [pc, #80]	; (8000e3c <slctElectAngleFromPosMode+0x104>)
 8000dea:	970f      	str	r7, [sp, #60]	; 0x3c
 8000dec:	f10d 0c10 	add.w	ip, sp, #16
 8000df0:	4d13      	ldr	r5, [pc, #76]	; (8000e40 <slctElectAngleFromPosMode+0x108>)
 8000df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8000e06:	f106 030c 	add.w	r3, r6, #12
 8000e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000e10:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 ff65 	bl	8001ce4 <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6063      	str	r3, [r4, #4]
		break;
 8000e22:	e796      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		sensData->electAngle = 0.0f;
 8000e24:	2300      	movs	r3, #0
 8000e26:	600b      	str	r3, [r1, #0]
		sensData->electAngVelo = 0.0f;
 8000e28:	604b      	str	r3, [r1, #4]
}
 8000e2a:	e792      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
 8000e2c:	200000bc 	.word	0x200000bc
 8000e30:	4684d000 	.word	0x4684d000
 8000e34:	200000d0 	.word	0x200000d0
 8000e38:	200000e0 	.word	0x200000e0
 8000e3c:	200000c0 	.word	0x200000c0
 8000e40:	200000fc 	.word	0x200000fc
 8000e44:	20000094 	.word	0x20000094
 8000e48:	20000098 	.word	0x20000098
 8000e4c:	00000000 	.word	0x00000000

08000e50 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000e50:	b084      	sub	sp, #16
 8000e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	4604      	mov	r4, r0
 8000e5a:	a811      	add	r0, sp, #68	; 0x44
 8000e5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e60:	9d18      	ldr	r5, [sp, #96]	; 0x60
	float VamRef;
	float ModRef = 1.13;
	float ModErr;

	//Idq_ref[0] = 0.0f;
	ModErr = ModRef - vectorControlData->Mod;
 8000e62:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
	sId_ref_i = sId_ref_i + 0.0003 * ModErr;
 8000e66:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000f88 <slctCntlFromDrvMode+0x138>
 8000e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6e:	ee17 0a90 	vmov	r0, s15
 8000e72:	f7ff fc5f 	bl	8000734 <__aeabi_f2d>
 8000e76:	a342      	add	r3, pc, #264	; (adr r3, 8000f80 <slctCntlFromDrvMode+0x130>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff f9cc 	bl	8000218 <__aeabi_dmul>
 8000e80:	4606      	mov	r6, r0
 8000e82:	460f      	mov	r7, r1
 8000e84:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8000f8c <slctCntlFromDrvMode+0x13c>
 8000e88:	f8d8 0000 	ldr.w	r0, [r8]
 8000e8c:	f7ff fc52 	bl	8000734 <__aeabi_f2d>
 8000e90:	4632      	mov	r2, r6
 8000e92:	463b      	mov	r3, r7
 8000e94:	f7ff faf0 	bl	8000478 <__adddf3>
 8000e98:	f7ff fca4 	bl	80007e4 <__aeabi_d2f>
 8000e9c:	ee07 0a90 	vmov	s15, r0
 8000ea0:	f8c8 0000 	str.w	r0, [r8]

	if( sId_ref_i > 0)
 8000ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	dd02      	ble.n	8000eb4 <slctCntlFromDrvMode+0x64>
			sId_ref_i = 0;
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f8c8 2000 	str.w	r2, [r8]
	if( sId_ref_i < -1.0f)
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <slctCntlFromDrvMode+0x13c>)
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8000ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	d418      	bmi.n	8000efa <slctCntlFromDrvMode+0xaa>
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <slctCntlFromDrvMode+0x13c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	9308      	str	r3, [sp, #32]

	Idq_ref[1] = IQREFMAX * gButton1;// * gVolume;
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <slctCntlFromDrvMode+0x140>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee2:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

	switch(drvMode){
 8000ee6:	2c02      	cmp	r4, #2
 8000ee8:	d013      	beq.n	8000f12 <slctCntlFromDrvMode+0xc2>
 8000eea:	2c04      	cmp	r4, #4
 8000eec:	d038      	beq.n	8000f60 <slctCntlFromDrvMode+0x110>
 8000eee:	b13c      	cbz	r4, 8000f00 <slctCntlFromDrvMode+0xb0>
			break;
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(Idq_ref, sensData, vectorControlData, Duty, outputMode);
			break;
		default :
			gOffDuty(Duty, outputMode);
 8000ef0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000ef2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8000ef4:	f7ff feab 	bl	8000c4e <gOffDuty>
	}
}
 8000ef8:	e006      	b.n	8000f08 <slctCntlFromDrvMode+0xb8>
				sId_ref_i = -1.0f;
 8000efa:	edc3 7a00 	vstr	s15, [r3]
 8000efe:	e7e3      	b.n	8000ec8 <slctCntlFromDrvMode+0x78>
			gOffDuty(Duty, outputMode);
 8000f00:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000f02:	9819      	ldr	r0, [sp, #100]	; 0x64
 8000f04:	f7ff fea3 	bl	8000c4e <gOffDuty>
}
 8000f08:	b00a      	add	sp, #40	; 0x28
 8000f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0e:	b004      	add	sp, #16
 8000f10:	4770      	bx	lr
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * ( 0.2f + 0.8f * sElectAngVeloRefRateLimit*0.001f);//sElectAngVeloRefRateLimit * 0.001 );
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <slctCntlFromDrvMode+0x144>)
 8000f14:	ed93 0a05 	vldr	s0, [r3, #20]
 8000f18:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8000f98 <slctCntlFromDrvMode+0x148>
 8000f1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <slctCntlFromDrvMode+0x14c>)
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000fa0 <slctCntlFromDrvMode+0x150>
 8000f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000fa4 <slctCntlFromDrvMode+0x154>
 8000f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f36:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000fa8 <slctCntlFromDrvMode+0x158>
 8000f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 8000f3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000f40:	9305      	str	r3, [sp, #20]
 8000f42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000f44:	9304      	str	r3, [sp, #16]
 8000f46:	9503      	str	r5, [sp, #12]
 8000f48:	ab15      	add	r3, sp, #84	; 0x54
 8000f4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8000f52:	ab11      	add	r3, sp, #68	; 0x44
 8000f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f56:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000f5a:	f000 fd21 	bl	80019a0 <OpenLoopTasks>
			break;
 8000f5e:	e7d3      	b.n	8000f08 <slctCntlFromDrvMode+0xb8>
			VectorControlTasks(Idq_ref, sensData, vectorControlData, Duty, outputMode);
 8000f60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000f62:	9306      	str	r3, [sp, #24]
 8000f64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000f66:	9305      	str	r3, [sp, #20]
 8000f68:	9504      	str	r5, [sp, #16]
 8000f6a:	ab14      	add	r3, sp, #80	; 0x50
 8000f6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000f72:	ab11      	add	r3, sp, #68	; 0x44
 8000f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f76:	a808      	add	r0, sp, #32
 8000f78:	f000 fb1c 	bl	80015b4 <VectorControlTasks>
			break;
 8000f7c:	e7c4      	b.n	8000f08 <slctCntlFromDrvMode+0xb8>
 8000f7e:	bf00      	nop
 8000f80:	30553261 	.word	0x30553261
 8000f84:	3f33a92a 	.word	0x3f33a92a
 8000f88:	3f90a3d7 	.word	0x3f90a3d7
 8000f8c:	200000d4 	.word	0x200000d4
 8000f90:	20000090 	.word	0x20000090
 8000f94:	200000e0 	.word	0x200000e0
 8000f98:	3f1cc471 	.word	0x3f1cc471
 8000f9c:	200000bc 	.word	0x200000bc
 8000fa0:	3f4ccccd 	.word	0x3f4ccccd
 8000fa4:	3a83126f 	.word	0x3a83126f
 8000fa8:	3e4ccccd 	.word	0x3e4ccccd

08000fac <Sequence>:
void Sequence(void){
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	b088      	sub	sp, #32
	gButton1 = readButton1();
 8000fb0:	f000 f890 	bl	80010d4 <readButton1>
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <Sequence+0xe8>)
 8000fb6:	7018      	strb	r0, [r3, #0]
	gVolume = readVolume();
 8000fb8:	f000 f8cc 	bl	8001154 <readVolume>
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <Sequence+0xec>)
 8000fbe:	ed83 0a00 	vstr	s0, [r3]
	readHallSignal(gHall);
 8000fc2:	4836      	ldr	r0, [pc, #216]	; (800109c <Sequence+0xf0>)
 8000fc4:	f000 f922 	bl	800120c <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 8000fc8:	4835      	ldr	r0, [pc, #212]	; (80010a0 <Sequence+0xf4>)
 8000fca:	f000 f937 	bl	800123c <readElectFreqFromHallSignal>
	readCurrent(gIuvw_AD, sSensData.Iuvw);
 8000fce:	4c35      	ldr	r4, [pc, #212]	; (80010a4 <Sequence+0xf8>)
 8000fd0:	f104 0108 	add.w	r1, r4, #8
 8000fd4:	4834      	ldr	r0, [pc, #208]	; (80010a8 <Sequence+0xfc>)
 8000fd6:	f000 f8d9 	bl	800118c <readCurrent>
	sSensData.Vdc = 10.0f;//readVdc();
 8000fda:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000fde:	edc4 0a05 	vstr	s1, [r4, #20]
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc, 1.0f);;
 8000fe2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000fe6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000fea:	f7ff fdda 	bl	8000ba2 <gfDivideAvoidZero>
 8000fee:	ed84 0a06 	vstr	s0, [r4, #24]
	if(sInitCnt < 500){
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <Sequence+0x100>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ffa:	d22a      	bcs.n	8001052 <Sequence+0xa6>
		sInitCnt++;
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a2b      	ldr	r2, [pc, #172]	; (80010ac <Sequence+0x100>)
 8001000:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <Sequence+0x104>)
 8001004:	2202      	movs	r2, #2
 8001006:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <Sequence+0x108>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <Sequence+0x10c>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
	slctElectAngleFromPosMode(sPosMode, &sSensData);
 8001014:	4c23      	ldr	r4, [pc, #140]	; (80010a4 <Sequence+0xf8>)
 8001016:	4621      	mov	r1, r4
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <Sequence+0x104>)
 800101a:	7818      	ldrb	r0, [r3, #0]
 800101c:	f7ff fe8c 	bl	8000d38 <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 8001020:	4e26      	ldr	r6, [pc, #152]	; (80010bc <Sequence+0x110>)
 8001022:	9606      	str	r6, [sp, #24]
 8001024:	4d26      	ldr	r5, [pc, #152]	; (80010c0 <Sequence+0x114>)
 8001026:	9505      	str	r5, [sp, #20]
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <Sequence+0x118>)
 800102a:	9304      	str	r3, [sp, #16]
 800102c:	f104 030c 	add.w	r3, r4, #12
 8001030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001032:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001036:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800103a:	481e      	ldr	r0, [pc, #120]	; (80010b4 <Sequence+0x108>)
 800103c:	7800      	ldrb	r0, [r0, #0]
 800103e:	f7ff ff07 	bl	8000e50 <slctCntlFromDrvMode>
	writeOutputMode(sOutputMode);
 8001042:	4630      	mov	r0, r6
 8001044:	f000 f934 	bl	80012b0 <writeOutputMode>
	writeDuty(sDuty);
 8001048:	4628      	mov	r0, r5
 800104a:	f000 f967 	bl	800131c <writeDuty>
}
 800104e:	b008      	add	sp, #32
 8001050:	bd70      	pop	{r4, r5, r6, pc}
		if(gButton1 == 1)
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <Sequence+0xe8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d00e      	beq.n	8001078 <Sequence+0xcc>
			sElectAngVeloRefRateLimit = 0;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <Sequence+0x10c>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
		slctPosModeForSensorless(sSensData.electAngVelo, &sPosMode);
 8001060:	4c10      	ldr	r4, [pc, #64]	; (80010a4 <Sequence+0xf8>)
 8001062:	4813      	ldr	r0, [pc, #76]	; (80010b0 <Sequence+0x104>)
 8001064:	ed94 0a01 	vldr	s0, [r4, #4]
 8001068:	f7ff fe22 	bl	8000cb0 <slctPosModeForSensorless>
		slctDrvModeForSensorless(sSensData.electAngVelo, &sDrvMode);
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <Sequence+0x108>)
 800106e:	ed94 0a01 	vldr	s0, [r4, #4]
 8001072:	f7ff fe3f 	bl	8000cf4 <slctDrvModeForSensorless>
 8001076:	e7cd      	b.n	8001014 <Sequence+0x68>
			sElectAngVeloRef = 1000.0f;
 8001078:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80010c8 <Sequence+0x11c>
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <Sequence+0x120>)
 800107e:	ed83 0a00 	vstr	s0, [r3]
			gRateLimit(sElectAngVeloRef, 1000.0f, CARRIERCYCLE, &sElectAngVeloRefRateLimit);
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <Sequence+0x10c>)
 8001084:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80010d0 <Sequence+0x124>
 8001088:	eef0 0a40 	vmov.f32	s1, s0
 800108c:	f7ff fdf9 	bl	8000c82 <gRateLimit>
 8001090:	e7e6      	b.n	8001060 <Sequence+0xb4>
 8001092:	bf00      	nop
 8001094:	20000090 	.word	0x20000090
 8001098:	200000a4 	.word	0x200000a4
 800109c:	20000098 	.word	0x20000098
 80010a0:	20000094 	.word	0x20000094
 80010a4:	200000e0 	.word	0x200000e0
 80010a8:	2000009c 	.word	0x2000009c
 80010ac:	200000d8 	.word	0x200000d8
 80010b0:	200000df 	.word	0x200000df
 80010b4:	200000a8 	.word	0x200000a8
 80010b8:	200000bc 	.word	0x200000bc
 80010bc:	200000dc 	.word	0x200000dc
 80010c0:	200000ac 	.word	0x200000ac
 80010c4:	200000fc 	.word	0x200000fc
 80010c8:	447a0000 	.word	0x447a0000
 80010cc:	200000b8 	.word	0x200000b8
 80010d0:	3876b949 	.word	0x3876b949

080010d4 <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 80010d4:	b500      	push	{lr}
 80010d6:	b083      	sub	sp, #12
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <readButton1+0x1c>)
 80010de:	f003 fc4d 	bl	800497c <HAL_GPIO_ReadPin>
 80010e2:	f88d 0007 	strb.w	r0, [sp, #7]
	return B1;
 80010e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010ea:	b003      	add	sp, #12
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f0:	48000800 	.word	0x48000800

080010f4 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 80010f4:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 80010f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	9301      	str	r3, [sp, #4]

	return inputCaptureCnt;
 80010fe:	9801      	ldr	r0, [sp, #4]
}
 8001100:	b002      	add	sp, #8
 8001102:	4770      	bx	lr

08001104 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8001104:	ee07 0a90 	vmov	s15, r0
 8001108:	ee00 1a10 	vmov	s0, r1
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 800110c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8001112:	1c53      	adds	r3, r2, #1
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	ee07 3a10 	vmov	s14, r3


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 800111a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001122:	ee77 7ac0 	vsub.f32	s15, s15, s0

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8001126:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800112a:	eeb1 7a47 	vneg.f32	s14, s14
 800112e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	dd05      	ble.n	8001144 <readTimeInterval+0x40>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8001138:	ee07 2a10 	vmov	s14, r2
 800113c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001140:	ee77 7a87 	vadd.f32	s15, s15, s14

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}
 8001144:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001150 <readTimeInterval+0x4c>
 8001148:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	4d221fe8 	.word	0x4d221fe8

08001154 <readVolume>:
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <readVolume+0x2c>)
 8001156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800115a:	3b63      	subs	r3, #99	; 0x63
 800115c:	ee00 3a10 	vmov	s0, r3
 8001160:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001164:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001184 <readVolume+0x30>
 8001168:	ee20 0a27 	vmul.f32	s0, s0, s15
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 800116c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d400      	bmi.n	8001178 <readVolume+0x24>
	return Volume;
}
 8001176:	4770      	bx	lr
	if( Volume < 0) Volume = 0;
 8001178:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001188 <readVolume+0x34>
	return Volume;
 800117c:	e7fb      	b.n	8001176 <readVolume+0x22>
 800117e:	bf00      	nop
 8001180:	2000008c 	.word	0x2000008c
 8001184:	398007f8 	.word	0x398007f8
 8001188:	00000000 	.word	0x00000000

0800118c <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 800118c:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 800118e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001192:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001196:	b29b      	uxth	r3, r3
 8001198:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 800119a:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 800119e:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 80011a0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80011a4:	8082      	strh	r2, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ae:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011fc <readCurrent+0x70>
 80011b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001200 <readCurrent+0x74>
 80011ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011be:	edc1 7a00 	vstr	s15, [r1]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 80011c2:	8843      	ldrh	r3, [r0, #2]
 80011c4:	ee07 3a10 	vmov	s14, r3
 80011c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011cc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001204 <readCurrent+0x78>
 80011d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80011d8:	ed81 7a01 	vstr	s14, [r1, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 80011dc:	8883      	ldrh	r3, [r0, #4]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001208 <readCurrent+0x7c>
 80011ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011f2:	edc1 7a02 	vstr	s15, [r1, #8]
}
 80011f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	44ee0000 	.word	0x44ee0000
 8001200:	bc71f4bc 	.word	0xbc71f4bc
 8001204:	44efe000 	.word	0x44efe000
 8001208:	44ef8000 	.word	0x44ef8000

0800120c <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 800120c:	b538      	push	{r3, r4, r5, lr}
 800120e:	4604      	mov	r4, r0
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8001210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f003 fbb0 	bl	800497c <HAL_GPIO_ReadPin>
 800121c:	7020      	strb	r0, [r4, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 800121e:	4d06      	ldr	r5, [pc, #24]	; (8001238 <readHallSignal+0x2c>)
 8001220:	2108      	movs	r1, #8
 8001222:	4628      	mov	r0, r5
 8001224:	f003 fbaa 	bl	800497c <HAL_GPIO_ReadPin>
 8001228:	7060      	strb	r0, [r4, #1]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 800122a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122e:	4628      	mov	r0, r5
 8001230:	f003 fba4 	bl	800497c <HAL_GPIO_ReadPin>
 8001234:	70a0      	strb	r0, [r4, #2]
}
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	48000400 	.word	0x48000400

0800123c <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	4606      	mov	r6, r0
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 8001240:	4c16      	ldr	r4, [pc, #88]	; (800129c <readElectFreqFromHallSignal+0x60>)
 8001242:	4d17      	ldr	r5, [pc, #92]	; (80012a0 <readElectFreqFromHallSignal+0x64>)
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	6023      	str	r3, [r4, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 8001248:	f7ff ff54 	bl	80010f4 <readInputCaptureCnt>
 800124c:	6028      	str	r0, [r5, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 800124e:	6821      	ldr	r1, [r4, #0]
 8001250:	4288      	cmp	r0, r1
 8001252:	d108      	bne.n	8001266 <readElectFreqFromHallSignal+0x2a>
		if( timeInterval > 0.0001f)
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);

		sNoInputCaptureCnt = 0;
	}
	else if(sNoInputCaptureCnt < 2000)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <readElectFreqFromHallSignal+0x68>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800125c:	d21b      	bcs.n	8001296 <readElectFreqFromHallSignal+0x5a>
		sNoInputCaptureCnt ++;
 800125e:	3301      	adds	r3, #1
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <readElectFreqFromHallSignal+0x68>)
 8001262:	8013      	strh	r3, [r2, #0]
 8001264:	e00b      	b.n	800127e <readElectFreqFromHallSignal+0x42>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 8001266:	f7ff ff4d 	bl	8001104 <readTimeInterval>
		if( timeInterval > 0.0001f)
 800126a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80012a8 <readElectFreqFromHallSignal+0x6c>
 800126e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	dc03      	bgt.n	8001280 <readElectFreqFromHallSignal+0x44>
		sNoInputCaptureCnt = 0;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <readElectFreqFromHallSignal+0x68>)
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]
	else
		*electFreq = 0;
}
 800127e:	bd70      	pop	{r4, r5, r6, pc}
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8001280:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80012ac <readElectFreqFromHallSignal+0x70>
 8001284:	eef0 0a40 	vmov.f32	s1, s0
 8001288:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800128c:	f7ff fc89 	bl	8000ba2 <gfDivideAvoidZero>
 8001290:	ed86 0a00 	vstr	s0, [r6]
 8001294:	e7f0      	b.n	8001278 <readElectFreqFromHallSignal+0x3c>
		*electFreq = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	6033      	str	r3, [r6, #0]
}
 800129a:	e7f0      	b.n	800127e <readElectFreqFromHallSignal+0x42>
 800129c:	2000012c 	.word	0x2000012c
 80012a0:	20000128 	.word	0x20000128
 80012a4:	20000130 	.word	0x20000130
 80012a8:	38d1b717 	.word	0x38d1b717
 80012ac:	31ca1db9 	.word	0x31ca1db9

080012b0 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 80012b0:	b510      	push	{r4, lr}
 80012b2:	4604      	mov	r4, r0

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 80012b4:	f990 3000 	ldrsb.w	r3, [r0]
 80012b8:	b9c3      	cbnz	r3, 80012ec <writeOutputMode+0x3c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c0:	4815      	ldr	r0, [pc, #84]	; (8001318 <writeOutputMode+0x68>)
 80012c2:	f003 fb62 	bl	800498a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);

	if(outputMode[1] == OUTPUTMODE_OPEN )
 80012c6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80012ca:	b9b3      	cbnz	r3, 80012fa <writeOutputMode+0x4a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <writeOutputMode+0x68>)
 80012d4:	f003 fb59 	bl	800498a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);

	if(outputMode[2] == OUTPUTMODE_OPEN )
 80012d8:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80012dc:	b9a3      	cbnz	r3, 8001308 <writeOutputMode+0x58>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <writeOutputMode+0x68>)
 80012e6:	f003 fb50 	bl	800498a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 80012ea:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <writeOutputMode+0x68>)
 80012f4:	f003 fb49 	bl	800498a <HAL_GPIO_WritePin>
 80012f8:	e7e5      	b.n	80012c6 <writeOutputMode+0x16>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <writeOutputMode+0x68>)
 8001302:	f003 fb42 	bl	800498a <HAL_GPIO_WritePin>
 8001306:	e7e7      	b.n	80012d8 <writeOutputMode+0x28>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	4802      	ldr	r0, [pc, #8]	; (8001318 <writeOutputMode+0x68>)
 8001310:	f003 fb3b 	bl	800498a <HAL_GPIO_WritePin>
}
 8001314:	e7e9      	b.n	80012ea <writeOutputMode+0x3a>
 8001316:	bf00      	nop
 8001318:	48000800 	.word	0x48000800

0800131c <writeDuty>:

void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 800131c:	ed90 7a00 	vldr	s14, [r0]
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <writeDuty+0x4c>)
 8001322:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8001336:	ed90 7a01 	vldr	s14, [r0, #4]
 800133a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 800134e:	ed90 7a02 	vldr	s14, [r0, #8]
 8001352:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001362:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001366:	4770      	bx	lr
 8001368:	40012c00 	.word	0x40012c00

0800136c <calcVoltageMode>:

	uint8_t hallInput;
	uint8_t voltageMode = 0;

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 800136c:	7883      	ldrb	r3, [r0, #2]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	7842      	ldrb	r2, [r0, #1]
 8001374:	0052      	lsls	r2, r2, #1
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	4413      	add	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	7800      	ldrb	r0, [r0, #0]
 800137e:	4418      	add	r0, r3
 8001380:	b2c0      	uxtb	r0, r0

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001382:	1e43      	subs	r3, r0, #1
 8001384:	2b05      	cmp	r3, #5
 8001386:	d80c      	bhi.n	80013a2 <calcVoltageMode+0x36>
 8001388:	e8df f003 	tbb	[pc, r3]
 800138c:	050e0d09 	.word	0x050e0d09
 8001390:	0307      	.short	0x0307
		break;
	  case 2:
		voltageMode = 4;
		break;
	  case 6:
		voltageMode = 5;
 8001392:	2005      	movs	r0, #5
		break;
 8001394:	4770      	bx	lr
	  case 4:
		voltageMode = 6;
 8001396:	2006      	movs	r0, #6
		break;
 8001398:	4770      	bx	lr
	  case 5:
		voltageMode = 1;
 800139a:	2001      	movs	r0, #1
		break;
 800139c:	4770      	bx	lr
	  case 1:
		voltageMode = 2;
 800139e:	2002      	movs	r0, #2
		break;
 80013a0:	4770      	bx	lr
	  default :
		voltageMode = 0;
 80013a2:	2000      	movs	r0, #0
	  break;
 80013a4:	4770      	bx	lr
		voltageMode = 4;
 80013a6:	2004      	movs	r0, #4
	}
	return voltageMode;
}
 80013a8:	4770      	bx	lr
	...

080013ac <calcElectAngle>:
void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 80013ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013b0:	ed2d 8b04 	vpush	{d8-d9}
 80013b4:	4680      	mov	r8, r0
 80013b6:	eef0 8a40 	vmov.f32	s17, s0
 80013ba:	460d      	mov	r5, r1
 80013bc:	4617      	mov	r7, r2
 80013be:	461e      	mov	r6, r3
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80013c0:	4c65      	ldr	r4, [pc, #404]	; (8001558 <calcElectAngle+0x1ac>)
 80013c2:	ed94 0a00 	vldr	s0, [r4]
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 80013c6:	ed9f 1a65 	vldr	s2, [pc, #404]	; 800155c <calcElectAngle+0x1b0>
 80013ca:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001560 <calcElectAngle+0x1b4>
 80013ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80013d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80013d6:	f7ff fc27 	bl	8000c28 <gUpperLowerLimit>
 80013da:	eeb0 9a40 	vmov.f32	s18, s0
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80013de:	ed94 7a00 	vldr	s14, [r4]
 80013e2:	eddf 7a60 	vldr	s15, [pc, #384]	; 8001564 <calcElectAngle+0x1b8>
 80013e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ea:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80013ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013f6:	ee87 8a87 	vdiv.f32	s16, s15, s14
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 80013fa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001568 <calcElectAngle+0x1bc>
 80013fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001402:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001406:	ee27 8a88 	vmul.f32	s16, s15, s16
	sVoltageMode_pre = sVoltageMode;
 800140a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80015b0 <calcElectAngle+0x204>
 800140e:	f899 4000 	ldrb.w	r4, [r9]
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <calcElectAngle+0x1c0>)
 8001414:	701c      	strb	r4, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8001416:	4640      	mov	r0, r8
 8001418:	f7ff ffa8 	bl	800136c <calcVoltageMode>
 800141c:	f889 0000 	strb.w	r0, [r9]
	sElectAngleActual_pre = sElectAngleActual;
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <calcElectAngle+0x1c4>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b53      	ldr	r3, [pc, #332]	; (8001574 <calcElectAngle+0x1c8>)
 8001426:	601a      	str	r2, [r3, #0]

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8001428:	1b04      	subs	r4, r0, r4
 800142a:	b2e3      	uxtb	r3, r4
 800142c:	b264      	sxtb	r4, r4

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 800142e:	2c01      	cmp	r4, #1
 8001430:	dd11      	ble.n	8001456 <calcElectAngle+0xaa>
		voltageMode_Diff -= 6;
 8001432:	3b06      	subs	r3, #6
 8001434:	b25c      	sxtb	r4, r3
	else if(voltageMode_Diff < -1)
		voltageMode_Diff += 6;

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8001436:	b10c      	cbz	r4, 800143c <calcElectAngle+0x90>
		*rotDir = voltageMode_Diff;
 8001438:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <calcElectAngle+0x1cc>)
 800143a:	701c      	strb	r4, [r3, #0]
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 800143c:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <calcElectAngle+0x1cc>)
 800143e:	f993 3000 	ldrsb.w	r3, [r3]
 8001442:	ee07 3a90 	vmov	s15, r3
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 8001446:	3801      	subs	r0, #1
 8001448:	2805      	cmp	r0, #5
 800144a:	d80a      	bhi.n	8001462 <calcElectAngle+0xb6>
 800144c:	e8df f000 	tbb	[pc, r0]
 8001450:	18091512 	.word	0x18091512
 8001454:	0f0c      	.short	0x0f0c
	else if(voltageMode_Diff < -1)
 8001456:	f1b4 3fff 	cmp.w	r4, #4294967295
 800145a:	daec      	bge.n	8001436 <calcElectAngle+0x8a>
		voltageMode_Diff += 6;
 800145c:	3306      	adds	r3, #6
 800145e:	b25c      	sxtb	r4, r3
 8001460:	e7e9      	b.n	8001436 <calcElectAngle+0x8a>
		switch(voltageMode){
 8001462:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800155c <calcElectAngle+0x1b0>
 8001466:	e00d      	b.n	8001484 <calcElectAngle+0xd8>
			break;
		  case 4:
			  electAngle_Center = PIDIV3;
			break;
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8001468:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800157c <calcElectAngle+0x1d0>
			break;
 800146c:	e00a      	b.n	8001484 <calcElectAngle+0xd8>
		  case 6:
			  electAngle_Center = PI;
 800146e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001580 <calcElectAngle+0x1d4>
			break;
 8001472:	e007      	b.n	8001484 <calcElectAngle+0xd8>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 8001474:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001584 <calcElectAngle+0x1d8>
			break;
 8001478:	e004      	b.n	8001484 <calcElectAngle+0xd8>
		  case 2:
			  electAngle_Center = -PIDIV3;
 800147a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001588 <calcElectAngle+0x1dc>
			break;
 800147e:	e001      	b.n	8001484 <calcElectAngle+0xd8>
			  electAngle_Center = PIDIV3;
 8001480:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800158c <calcElectAngle+0x1e0>
		  default :
			  electAngle_Center = 0.0f;
		  break;
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001590 <calcElectAngle+0x1e4>
 800148c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001490:	ee37 0a67 	vsub.f32	s0, s14, s15
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8001494:	4c36      	ldr	r4, [pc, #216]	; (8001570 <calcElectAngle+0x1c4>)
 8001496:	ed84 0a00 	vstr	s0, [r4]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 800149a:	f7ff fba1 	bl	8000be0 <gfWrapTheta>
 800149e:	ed84 0a00 	vstr	s0, [r4]
	sFlgPLL_pre = sFlgPLL;
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <calcElectAngle+0x1e8>)
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	493c      	ldr	r1, [pc, #240]	; (8001598 <calcElectAngle+0x1ec>)
 80014a8:	700a      	strb	r2, [r1, #0]
	sFlgPLL = flgPLL;
 80014aa:	701d      	strb	r5, [r3, #0]
	if(flgPLL == 1){
 80014ac:	2d01      	cmp	r5, #1
 80014ae:	d013      	beq.n	80014d8 <calcElectAngle+0x12c>
		sElectAngleEstimate = sElectAngleActual;
 80014b0:	4b3a      	ldr	r3, [pc, #232]	; (800159c <calcElectAngle+0x1f0>)
 80014b2:	ed83 0a00 	vstr	s0, [r3]
		sElectAngVeloEstimate = electFreq * TWOPI;
 80014b6:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80015a0 <calcElectAngle+0x1f4>
 80014ba:	ee68 8a80 	vmul.f32	s17, s17, s0
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <calcElectAngle+0x1ac>)
 80014c0:	edc3 8a00 	vstr	s17, [r3]
	*electAngle = sElectAngleEstimate;
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <calcElectAngle+0x1f0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	603b      	str	r3, [r7, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <calcElectAngle+0x1ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6033      	str	r3, [r6, #0]
}
 80014d0:	ecbd 8b04 	vpop	{d8-d9}
 80014d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ( sFlgPLL_pre == 0 ){
 80014d8:	b962      	cbnz	r2, 80014f4 <calcElectAngle+0x148>
			sElectAngVeloEstimate = electFreq * TWOPI;
 80014da:	eddf 7a31 	vldr	s15, [pc, #196]	; 80015a0 <calcElectAngle+0x1f4>
 80014de:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <calcElectAngle+0x1ac>)
 80014e4:	edc3 8a00 	vstr	s17, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <calcElectAngle+0x1f8>)
 80014ea:	edc3 8a00 	vstr	s17, [r3]
			sElectAngleEstimate = sElectAngleActual;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <calcElectAngle+0x1f0>)
 80014f0:	ed83 0a00 	vstr	s0, [r3]
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <calcElectAngle+0x1ac>)
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80015a8 <calcElectAngle+0x1fc>
 80014fe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8001502:	4c26      	ldr	r4, [pc, #152]	; (800159c <calcElectAngle+0x1f0>)
 8001504:	edd4 7a00 	vldr	s15, [r4]
 8001508:	ee30 0a27 	vadd.f32	s0, s0, s15
 800150c:	ed84 0a00 	vstr	s0, [r4]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8001510:	f7ff fb66 	bl	8000be0 <gfWrapTheta>
 8001514:	ed84 0a00 	vstr	s0, [r4]
		if( sElectAngleActual != sElectAngleActual_pre){
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <calcElectAngle+0x1c4>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <calcElectAngle+0x1c8>)
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	eef4 7a47 	vcmp.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d0ca      	beq.n	80014c4 <calcElectAngle+0x118>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 800152e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8001532:	4c1e      	ldr	r4, [pc, #120]	; (80015ac <calcElectAngle+0x200>)
 8001534:	ed84 0a00 	vstr	s0, [r4]
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001538:	f7ff fb52 	bl	8000be0 <gfWrapTheta>
 800153c:	ed84 0a00 	vstr	s0, [r4]
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <calcElectAngle+0x1f8>)
 8001542:	eeb0 1a48 	vmov.f32	s2, s16
 8001546:	eef0 0a49 	vmov.f32	s1, s18
 800154a:	f7ff fb1d 	bl	8000b88 <cfPhaseLockedLoop>
 800154e:	4b02      	ldr	r3, [pc, #8]	; (8001558 <calcElectAngle+0x1ac>)
 8001550:	ed83 0a00 	vstr	s0, [r3]
 8001554:	e7b6      	b.n	80014c4 <calcElectAngle+0x118>
 8001556:	bf00      	nop
 8001558:	20000134 	.word	0x20000134
 800155c:	00000000 	.word	0x00000000
 8001560:	43fa0000 	.word	0x43fa0000
 8001564:	3e22f983 	.word	0x3e22f983
 8001568:	3e4ccccd 	.word	0x3e4ccccd
 800156c:	20000152 	.word	0x20000152
 8001570:	20000138 	.word	0x20000138
 8001574:	2000013c 	.word	0x2000013c
 8001578:	20000150 	.word	0x20000150
 800157c:	40060a92 	.word	0x40060a92
 8001580:	40490fdb 	.word	0x40490fdb
 8001584:	c0060a92 	.word	0xc0060a92
 8001588:	bf860a92 	.word	0xbf860a92
 800158c:	3f860a92 	.word	0x3f860a92
 8001590:	3f060a92 	.word	0x3f060a92
 8001594:	20000148 	.word	0x20000148
 8001598:	20000149 	.word	0x20000149
 800159c:	20000144 	.word	0x20000144
 80015a0:	40c90fdb 	.word	0x40c90fdb
 80015a4:	2000014c 	.word	0x2000014c
 80015a8:	4684d000 	.word	0x4684d000
 80015ac:	20000140 	.word	0x20000140
 80015b0:	20000151 	.word	0x20000151

080015b4 <VectorControlTasks>:
static inline void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(float *Idq_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80015b4:	b084      	sub	sp, #16
 80015b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ba:	ed2d 8b06 	vpush	{d8-d10}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	4680      	mov	r8, r0
 80015c2:	ad17      	add	r5, sp, #92	; 0x5c
 80015c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80015c8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80015ca:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80015cc:	9b20      	ldr	r3, [sp, #128]	; 0x80

	outputMode[0] = OUTPUTMODE_POSITIVE;
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80015d2:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80015d4:	709a      	strb	r2, [r3, #2]
	ab2uvw(sVab, sVuvw);
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
}

static void uvw2ab(float* uvw, float* ab){
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80015d6:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 80015da:	ed9d 6a1a 	vldr	s12, [sp, #104]	; 0x68
 80015de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80015e2:	ee26 8a27 	vmul.f32	s16, s12, s15
 80015e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80015ea:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 80015ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80015f6:	eddf 8adb 	vldr	s17, [pc, #876]	; 8001964 <VectorControlTasks+0x3b0>
 80015fa:	ee28 8a28 	vmul.f32	s16, s16, s17
 80015fe:	4fda      	ldr	r7, [pc, #872]	; (8001968 <VectorControlTasks+0x3b4>)
 8001600:	ed87 8a00 	vstr	s16, [r7]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001604:	eddf 7ad9 	vldr	s15, [pc, #868]	; 800196c <VectorControlTasks+0x3b8>
 8001608:	ee26 9a27 	vmul.f32	s18, s12, s15
 800160c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001610:	ee39 9a67 	vsub.f32	s18, s18, s15
 8001614:	ee29 9a28 	vmul.f32	s18, s18, s17
 8001618:	ed87 9a01 	vstr	s18, [r7, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 800161c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001620:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001624:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8001970 <VectorControlTasks+0x3bc>
 8001628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162c:	ed87 7a02 	vstr	s14, [r7, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001630:	ed9d aa17 	vldr	s20, [sp, #92]	; 0x5c
}

static void ab2dq(float theta, float* ab, float* dq){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001634:	eeb0 0a4a 	vmov.f32	s0, s20
 8001638:	f005 fc02 	bl	8006e40 <sinf>
 800163c:	eef0 9a40 	vmov.f32	s19, s0
	cosTheta = cosf(theta);
 8001640:	eeb0 0a4a 	vmov.f32	s0, s20
 8001644:	f005 fbb8 	bl	8006db8 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001648:	ee60 7a08 	vmul.f32	s15, s0, s16
 800164c:	ee29 9a89 	vmul.f32	s18, s19, s18
 8001650:	ee77 7a89 	vadd.f32	s15, s15, s18
 8001654:	edc4 7a00 	vstr	s15, [r4]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001658:	edd7 0a00 	vldr	s1, [r7]
 800165c:	ee60 0ae9 	vnmul.f32	s1, s1, s19
 8001660:	ed97 7a01 	vldr	s14, [r7, #4]
 8001664:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001668:	ee70 0a80 	vadd.f32	s1, s1, s0
 800166c:	edc4 0a01 	vstr	s1, [r4, #4]
	CurrentFbControl(Idq_ref, sensData, vectorControlData);
 8001670:	f10d 0c0c 	add.w	ip, sp, #12
 8001674:	46ae      	mov	lr, r5
 8001676:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800167a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800167e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001682:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
	Kid = Kig;

	Ierr[0] = Igd_ref[0] - vectorControlData->Idq[0];
 8001686:	ed98 6a00 	vldr	s12, [r8]
 800168a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800168e:	ed8d 6a01 	vstr	s12, [sp, #4]
	Ierr[1] = Igd_ref[1] - vectorControlData->Idq[1];
 8001692:	edd8 6a01 	vldr	s13, [r8, #4]
 8001696:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800169a:	edcd 6a02 	vstr	s13, [sp, #8]

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 800169e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001974 <VectorControlTasks+0x3c0>
 80016a2:	ee66 5a07 	vmul.f32	s11, s12, s14
 80016a6:	ed94 5a04 	vldr	s10, [r4, #16]
 80016aa:	ee75 5a85 	vadd.f32	s11, s11, s10
 80016ae:	edc4 5a04 	vstr	s11, [r4, #16]
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 80016b2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80016b6:	ed94 0a05 	vldr	s0, [r4, #20]
 80016ba:	ee37 7a00 	vadd.f32	s14, s14, s0
 80016be:	ed84 7a05 	vstr	s14, [r4, #20]

	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 80016c2:	ed9d 0a04 	vldr	s0, [sp, #16]
 80016c6:	ed9f 5aac 	vldr	s10, [pc, #688]	; 8001978 <VectorControlTasks+0x3c4>
 80016ca:	ee60 4a45 	vnmul.f32	s9, s0, s10
 80016ce:	ee60 0aa4 	vmul.f32	s1, s1, s9
 80016d2:	edc4 0a06 	vstr	s1, [r4, #24]
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 80016d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80016da:	ed9f 5aa8 	vldr	s10, [pc, #672]	; 800197c <VectorControlTasks+0x3c8>
 80016de:	ee77 7a85 	vadd.f32	s15, s15, s10
 80016e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80016e6:	edc4 7a07 	vstr	s15, [r4, #28]

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 80016ea:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8001980 <VectorControlTasks+0x3cc>
 80016ee:	ee26 6a00 	vmul.f32	s12, s12, s0
 80016f2:	ee35 6a86 	vadd.f32	s12, s11, s12
 80016f6:	ee70 0a86 	vadd.f32	s1, s1, s12
 80016fa:	edc4 0a02 	vstr	s1, [r4, #8]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 80016fe:	ee66 6a80 	vmul.f32	s13, s13, s0
 8001702:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001706:	ee37 0a87 	vadd.f32	s0, s15, s14
 800170a:	ed84 0a03 	vstr	s0, [r4, #12]
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 800170e:	f10d 0c0c 	add.w	ip, sp, #12
 8001712:	46ae      	mov	lr, r5
 8001714:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800171c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001720:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8001724:	f005 fbd2 	bl	8006ecc <atan2f>
 8001728:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 800172c:	ed94 0a02 	vldr	s0, [r4, #8]
 8001730:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001734:	edd4 7a03 	vldr	s15, [r4, #12]
 8001738:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 800173c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001740:	f005 fbe6 	bl	8006f10 <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001744:	ed84 0a08 	vstr	s0, [r4, #32]
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001748:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 800174c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001750:	ee60 8a28 	vmul.f32	s17, s0, s17
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001754:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	limitVoltVectAmp(sensData, vectorControlData);
 8001758:	f10d 0e0c 	add.w	lr, sp, #12
 800175c:	46ac      	mov	ip, r5
 800175e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001762:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001766:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800176a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
	if( vectorControlData->Mod > MODLIMIT ){
 800176e:	eddf 7a85 	vldr	s15, [pc, #532]	; 8001984 <VectorControlTasks+0x3d0>
 8001772:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dd29      	ble.n	80017d0 <VectorControlTasks+0x21c>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 800177c:	ed9d 8a08 	vldr	s16, [sp, #32]
 8001780:	eddf 7a81 	vldr	s15, [pc, #516]	; 8001988 <VectorControlTasks+0x3d4>
 8001784:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001788:	eddf 8a7e 	vldr	s17, [pc, #504]	; 8001984 <VectorControlTasks+0x3d0>
 800178c:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8001790:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8001794:	eeb0 0a49 	vmov.f32	s0, s18
 8001798:	f005 fb0e 	bl	8006db8 <cosf>
 800179c:	ee28 0a00 	vmul.f32	s0, s16, s0
 80017a0:	ed84 0a02 	vstr	s0, [r4, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 80017a4:	edd4 7a06 	vldr	s15, [r4, #24]
 80017a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80017ac:	ed84 0a04 	vstr	s0, [r4, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 80017b0:	eeb0 0a49 	vmov.f32	s0, s18
 80017b4:	f005 fb44 	bl	8006e40 <sinf>
 80017b8:	ee28 8a00 	vmul.f32	s16, s16, s0
 80017bc:	ed84 8a03 	vstr	s16, [r4, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 80017c0:	ed94 0a07 	vldr	s0, [r4, #28]
 80017c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80017c8:	ed84 8a05 	vstr	s16, [r4, #20]
		vectorControlData->Mod = MODLIMIT;
 80017cc:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 80017d0:	eddd 8a17 	vldr	s17, [sp, #92]	; 0x5c
	sinTheta = sinf(theta);
 80017d4:	eeb0 0a68 	vmov.f32	s0, s17
 80017d8:	f005 fb32 	bl	8006e40 <sinf>
 80017dc:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 80017e0:	eeb0 0a68 	vmov.f32	s0, s17
 80017e4:	f005 fae8 	bl	8006db8 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 80017e8:	ed94 7a02 	vldr	s14, [r4, #8]
 80017ec:	ee20 7a07 	vmul.f32	s14, s0, s14
 80017f0:	edd4 7a03 	vldr	s15, [r4, #12]
 80017f4:	ee68 6a27 	vmul.f32	s13, s16, s15
 80017f8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80017fc:	4b63      	ldr	r3, [pc, #396]	; (800198c <VectorControlTasks+0x3d8>)
 80017fe:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001802:	edd4 6a02 	vldr	s13, [r4, #8]
 8001806:	ee28 8a26 	vmul.f32	s16, s16, s13
 800180a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800180e:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001812:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001816:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001964 <VectorControlTasks+0x3b0>
 800181a:	ee27 0a26 	vmul.f32	s0, s14, s13
 800181e:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <VectorControlTasks+0x3dc>)
 8001820:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8001824:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800196c <VectorControlTasks+0x3b8>
 8001830:	ee28 8a07 	vmul.f32	s16, s16, s14
 8001834:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001838:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800183c:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8001840:	eeb1 7a40 	vneg.f32	s14, s0
 8001844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001848:	ed83 7a02 	vstr	s14, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800184c:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
	if(Vuvw[1] > max)
 8001850:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	d47e      	bmi.n	8001958 <VectorControlTasks+0x3a4>
	max = Vuvw[0];
 800185a:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 800185e:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <VectorControlTasks+0x3dc>)
 8001860:	edd3 6a02 	vldr	s13, [r3, #8]
 8001864:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	dd01      	ble.n	8001872 <VectorControlTasks+0x2be>
		max = Vuvw[2];
 800186e:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 8001872:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	dc70      	bgt.n	800195e <VectorControlTasks+0x3aa>
	min = Vuvw[0];
 800187c:	eef0 5a40 	vmov.f32	s11, s0
	if(Vuvw[2] < min)
 8001880:	eef4 6ae5 	vcmpe.f32	s13, s11
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	d501      	bpl.n	800188e <VectorControlTasks+0x2da>
		min = Vuvw[2];
 800188a:	eef0 5a66 	vmov.f32	s11, s13
	vo = (max + min) * 0.5f;
 800188e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001892:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001896:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 800189a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <VectorControlTasks+0x3dc>)
 80018a0:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 80018a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018a8:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 80018ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80018b0:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 80018b4:	ee26 0a00 	vmul.f32	s0, s12, s0
 80018b8:	ed86 0a00 	vstr	s0, [r6]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 80018bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018c4:	edc6 7a01 	vstr	s15, [r6, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 80018c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018d0:	ed86 6a02 	vstr	s12, [r6, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 80018d4:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018d8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80018dc:	f7ff f9a4 	bl	8000c28 <gUpperLowerLimit>
 80018e0:	ed86 0a00 	vstr	s0, [r6]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 80018e4:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018e8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80018ec:	ed96 0a01 	vldr	s0, [r6, #4]
 80018f0:	f7ff f99a 	bl	8000c28 <gUpperLowerLimit>
 80018f4:	ed86 0a01 	vstr	s0, [r6, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 80018f8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001900:	ed96 0a02 	vldr	s0, [r6, #8]
 8001904:	f7ff f990 	bl	8000c28 <gUpperLowerLimit>
 8001908:	ed86 0a02 	vstr	s0, [r6, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 800190c:	edd6 7a00 	vldr	s15, [r6]
 8001910:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001914:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001918:	edc6 7a00 	vstr	s15, [r6]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 800191c:	edd6 7a01 	vldr	s15, [r6, #4]
 8001920:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001924:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001928:	edc6 7a01 	vstr	s15, [r6, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 800192c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8001930:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001934:	ed86 0a02 	vstr	s0, [r6, #8]
	gLPF(vectorControlData->Idq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 8001938:	4816      	ldr	r0, [pc, #88]	; (8001994 <VectorControlTasks+0x3e0>)
 800193a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8001998 <VectorControlTasks+0x3e4>
 800193e:	eddf 0a17 	vldr	s1, [pc, #92]	; 800199c <VectorControlTasks+0x3e8>
 8001942:	ed94 0a01 	vldr	s0, [r4, #4]
 8001946:	f7ff f98b 	bl	8000c60 <gLPF>
}
 800194a:	b00a      	add	sp, #40	; 0x28
 800194c:	ecbd 8b06 	vpop	{d8-d10}
 8001950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001954:	b004      	add	sp, #16
 8001956:	4770      	bx	lr
		max = Vuvw[1];
 8001958:	eeb0 7a67 	vmov.f32	s14, s15
 800195c:	e77f      	b.n	800185e <VectorControlTasks+0x2aa>
		min = Vuvw[1];
 800195e:	eef0 5a67 	vmov.f32	s11, s15
 8001962:	e78d      	b.n	8001880 <VectorControlTasks+0x2cc>
 8001964:	3f5105ec 	.word	0x3f5105ec
 8001968:	20000154 	.word	0x20000154
 800196c:	3f5db3d7 	.word	0x3f5db3d7
 8001970:	3f13cd3a 	.word	0x3f13cd3a
 8001974:	3bcb8997 	.word	0x3bcb8997
 8001978:	39fba882 	.word	0x39fba882
 800197c:	3a870111 	.word	0x3a870111
 8001980:	3cf7109e 	.word	0x3cf7109e
 8001984:	3f933333 	.word	0x3f933333
 8001988:	3f1cc471 	.word	0x3f1cc471
 800198c:	20000168 	.word	0x20000168
 8001990:	20000170 	.word	0x20000170
 8001994:	20000164 	.word	0x20000164
 8001998:	3876b949 	.word	0x3876b949
 800199c:	42fb3333 	.word	0x42fb3333

080019a0 <OpenLoopTasks>:
void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80019a0:	b084      	sub	sp, #16
 80019a2:	b570      	push	{r4, r5, r6, lr}
 80019a4:	ed2d 8b06 	vpush	{d8-d10}
 80019a8:	b088      	sub	sp, #32
 80019aa:	eeb0 9a40 	vmov.f32	s18, s0
 80019ae:	ac12      	add	r4, sp, #72	; 0x48
 80019b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019b4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80019b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80019b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	outputMode[0] = OUTPUTMODE_POSITIVE;
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80019be:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80019c0:	709a      	strb	r2, [r3, #2]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80019c2:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80019c6:	ed9d 6a15 	vldr	s12, [sp, #84]	; 0x54
 80019ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019ce:	ee26 8a07 	vmul.f32	s16, s12, s14
 80019d2:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80019d6:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 80019da:	ee26 7a87 	vmul.f32	s14, s13, s14
 80019de:	ee38 8a47 	vsub.f32	s16, s16, s14
 80019e2:	eddf 9ab7 	vldr	s19, [pc, #732]	; 8001cc0 <OpenLoopTasks+0x320>
 80019e6:	ee28 8a29 	vmul.f32	s16, s16, s19
 80019ea:	4eb6      	ldr	r6, [pc, #728]	; (8001cc4 <OpenLoopTasks+0x324>)
 80019ec:	ed86 8a00 	vstr	s16, [r6]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 80019f0:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001cc8 <OpenLoopTasks+0x328>
 80019f4:	ee66 8a07 	vmul.f32	s17, s12, s14
 80019f8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80019fc:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8001a00:	ee67 8a29 	vmul.f32	s17, s14, s19
 8001a04:	edc6 8a01 	vstr	s17, [r6, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001a08:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a10:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001ccc <OpenLoopTasks+0x32c>
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	edc6 7a02 	vstr	s15, [r6, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001a1c:	eddd aa12 	vldr	s21, [sp, #72]	; 0x48
	sinTheta = sinf(theta);
 8001a20:	eeb0 0a6a 	vmov.f32	s0, s21
 8001a24:	f005 fa0c 	bl	8006e40 <sinf>
 8001a28:	eeb0 aa40 	vmov.f32	s20, s0
	cosTheta = cosf(theta);
 8001a2c:	eeb0 0a6a 	vmov.f32	s0, s21
 8001a30:	f005 f9c2 	bl	8006db8 <cosf>
 8001a34:	eef0 7a40 	vmov.f32	s15, s0
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001a38:	ee20 8a08 	vmul.f32	s16, s0, s16
 8001a3c:	ee6a 8a28 	vmul.f32	s17, s20, s17
 8001a40:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001a44:	ed84 8a00 	vstr	s16, [r4]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001a48:	ed96 7a00 	vldr	s14, [r6]
 8001a4c:	ee27 0a4a 	vnmul.f32	s0, s14, s20
 8001a50:	ed96 7a01 	vldr	s14, [r6, #4]
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	ee70 7a27 	vadd.f32	s15, s0, s15
 8001a5c:	edc4 7a01 	vstr	s15, [r4, #4]
	vectorControlData->Vdq[0] = 0.0f;
 8001a60:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001cd0 <OpenLoopTasks+0x330>
 8001a64:	edc4 0a02 	vstr	s1, [r4, #8]
	vectorControlData->Vdq[1] = VamRef;
 8001a68:	ed84 9a03 	vstr	s18, [r4, #12]
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
 8001a6c:	edc4 0a04 	vstr	s1, [r4, #16]
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];
 8001a70:	ed84 9a05 	vstr	s18, [r4, #20]
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001a74:	f10d 0c04 	add.w	ip, sp, #4
 8001a78:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001a7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001a80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001a84:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001a88:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8001a8c:	eeb0 0a49 	vmov.f32	s0, s18
 8001a90:	f005 fa1c 	bl	8006ecc <atan2f>
 8001a94:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001a98:	ed94 0a02 	vldr	s0, [r4, #8]
 8001a9c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001aa0:	edd4 7a03 	vldr	s15, [r4, #12]
 8001aa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8001aa8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001aac:	f005 fa30 	bl	8006f10 <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001ab0:	ed84 0a08 	vstr	s0, [r4, #32]
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001ab4:	eddd 7a07 	vldr	s15, [sp, #28]
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001ab8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001abc:	ee20 0a29 	vmul.f32	s0, s0, s19
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001ac0:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	limitVoltVectAmp(sensData, vectorControlData);
 8001ac4:	f10d 0c04 	add.w	ip, sp, #4
 8001ac8:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001acc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001ad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ad4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001ad8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	if( vectorControlData->Mod > MODLIMIT ){
 8001adc:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8001cd4 <OpenLoopTasks+0x334>
 8001ae0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	dd29      	ble.n	8001b3e <OpenLoopTasks+0x19e>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8001aea:	ed9d 8a06 	vldr	s16, [sp, #24]
 8001aee:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8001cd8 <OpenLoopTasks+0x338>
 8001af2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001af6:	eddf 8a77 	vldr	s17, [pc, #476]	; 8001cd4 <OpenLoopTasks+0x334>
 8001afa:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8001afe:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8001b02:	eeb0 0a49 	vmov.f32	s0, s18
 8001b06:	f005 f957 	bl	8006db8 <cosf>
 8001b0a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001b0e:	ed84 0a02 	vstr	s0, [r4, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 8001b12:	edd4 7a06 	vldr	s15, [r4, #24]
 8001b16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001b1a:	ed84 0a04 	vstr	s0, [r4, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8001b1e:	eeb0 0a49 	vmov.f32	s0, s18
 8001b22:	f005 f98d 	bl	8006e40 <sinf>
 8001b26:	ee28 8a00 	vmul.f32	s16, s16, s0
 8001b2a:	ed84 8a03 	vstr	s16, [r4, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 8001b2e:	ed94 0a07 	vldr	s0, [r4, #28]
 8001b32:	ee38 8a40 	vsub.f32	s16, s16, s0
 8001b36:	ed84 8a05 	vstr	s16, [r4, #20]
		vectorControlData->Mod = MODLIMIT;
 8001b3a:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001b3e:	eddd 8a12 	vldr	s17, [sp, #72]	; 0x48
	sinTheta = sinf(theta);
 8001b42:	eeb0 0a68 	vmov.f32	s0, s17
 8001b46:	f005 f97b 	bl	8006e40 <sinf>
 8001b4a:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8001b4e:	eeb0 0a68 	vmov.f32	s0, s17
 8001b52:	f005 f931 	bl	8006db8 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001b56:	ed94 7a02 	vldr	s14, [r4, #8]
 8001b5a:	ee20 7a07 	vmul.f32	s14, s0, s14
 8001b5e:	edd4 7a03 	vldr	s15, [r4, #12]
 8001b62:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001b66:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <OpenLoopTasks+0x33c>)
 8001b6c:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001b70:	edd4 6a02 	vldr	s13, [r4, #8]
 8001b74:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001b78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001b7c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001b80:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001b84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001cc0 <OpenLoopTasks+0x320>
 8001b88:	ee27 0a26 	vmul.f32	s0, s14, s13
 8001b8c:	4b54      	ldr	r3, [pc, #336]	; (8001ce0 <OpenLoopTasks+0x340>)
 8001b8e:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8001b92:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8001b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001cc8 <OpenLoopTasks+0x328>
 8001b9e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8001ba2:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001baa:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8001bae:	eeb1 7a40 	vneg.f32	s14, s0
 8001bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb6:	ed83 7a02 	vstr	s14, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8001bba:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
	if(Vuvw[1] > max)
 8001bbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc6:	d475      	bmi.n	8001cb4 <OpenLoopTasks+0x314>
	max = Vuvw[0];
 8001bc8:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 8001bcc:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <OpenLoopTasks+0x340>)
 8001bce:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bd2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd01      	ble.n	8001be0 <OpenLoopTasks+0x240>
		max = Vuvw[2];
 8001bdc:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 8001be0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	dc67      	bgt.n	8001cba <OpenLoopTasks+0x31a>
	min = Vuvw[0];
 8001bea:	eef0 5a40 	vmov.f32	s11, s0
	if(Vuvw[2] < min)
 8001bee:	eef4 6ae5 	vcmpe.f32	s13, s11
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	d501      	bpl.n	8001bfc <OpenLoopTasks+0x25c>
		min = Vuvw[2];
 8001bf8:	eef0 5a66 	vmov.f32	s11, s13
	vo = (max + min) * 0.5f;
 8001bfc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001c00:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001c04:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 8001c08:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <OpenLoopTasks+0x340>)
 8001c0e:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001c12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c16:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 8001c1a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001c1e:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001c22:	ee26 0a00 	vmul.f32	s0, s12, s0
 8001c26:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001c2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c2e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c32:	edc5 7a01 	vstr	s15, [r5, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001c36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c3e:	ed85 6a02 	vstr	s12, [r5, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001c42:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c46:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c4a:	f7fe ffed 	bl	8000c28 <gUpperLowerLimit>
 8001c4e:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001c52:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c56:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c5a:	ed95 0a01 	vldr	s0, [r5, #4]
 8001c5e:	f7fe ffe3 	bl	8000c28 <gUpperLowerLimit>
 8001c62:	ed85 0a01 	vstr	s0, [r5, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001c66:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c6a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c6e:	ed95 0a02 	vldr	s0, [r5, #8]
 8001c72:	f7fe ffd9 	bl	8000c28 <gUpperLowerLimit>
 8001c76:	ed85 0a02 	vstr	s0, [r5, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001c7a:	edd5 7a00 	vldr	s15, [r5]
 8001c7e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c82:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001c86:	edc5 7a00 	vstr	s15, [r5]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001c8a:	edd5 7a01 	vldr	s15, [r5, #4]
 8001c8e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c92:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001c96:	edc5 7a01 	vstr	s15, [r5, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001c9a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8001c9e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001ca2:	ed85 0a02 	vstr	s0, [r5, #8]
}
 8001ca6:	b008      	add	sp, #32
 8001ca8:	ecbd 8b06 	vpop	{d8-d10}
 8001cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001cb0:	b004      	add	sp, #16
 8001cb2:	4770      	bx	lr
		max = Vuvw[1];
 8001cb4:	eeb0 7a67 	vmov.f32	s14, s15
 8001cb8:	e788      	b.n	8001bcc <OpenLoopTasks+0x22c>
		min = Vuvw[1];
 8001cba:	eef0 5a67 	vmov.f32	s11, s15
 8001cbe:	e796      	b.n	8001bee <OpenLoopTasks+0x24e>
 8001cc0:	3f5105ec 	.word	0x3f5105ec
 8001cc4:	20000154 	.word	0x20000154
 8001cc8:	3f5db3d7 	.word	0x3f5db3d7
 8001ccc:	3f13cd3a 	.word	0x3f13cd3a
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	3f933333 	.word	0x3f933333
 8001cd8:	3f1cc471 	.word	0x3f1cc471
 8001cdc:	20000168 	.word	0x20000168
 8001ce0:	20000170 	.word	0x20000170

08001ce4 <calcElectAngleEstimate>:
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
	return angleErr;
}

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	b530      	push	{r4, r5, lr}
 8001ce8:	ed2d 8b04 	vpush	{d8-d9}
 8001cec:	b085      	sub	sp, #20
 8001cee:	4605      	mov	r5, r0
 8001cf0:	a80d      	add	r0, sp, #52	; 0x34
 8001cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001cf6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001cf8:	ed94 7a03 	vldr	s14, [r4, #12]
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001cfc:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 8001d00:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001de0 <calcElectAngleEstimate+0xfc>
 8001d04:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001d08:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
 8001d0c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8001d10:	eddf 0a34 	vldr	s1, [pc, #208]	; 8001de4 <calcElectAngleEstimate+0x100>
 8001d14:	ee27 7a20 	vmul.f32	s14, s14, s1
 8001d18:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 8001d1c:	ee27 6a20 	vmul.f32	s12, s14, s1
 8001d20:	ee30 0a06 	vadd.f32	s0, s0, s12
 8001d24:	ed8d 0a01 	vstr	s0, [sp, #4]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001d28:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001d2c:	eddd 0a17 	vldr	s1, [sp, #92]	; 0x5c
 8001d30:	ee70 0ae6 	vsub.f32	s1, s1, s13
 8001d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d38:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8001d3c:	edcd 0a02 	vstr	s1, [sp, #8]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001d40:	eeb1 0a40 	vneg.f32	s0, s0
 8001d44:	f005 f8c2 	bl	8006ecc <atan2f>
	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001d48:	ed84 0a01 	vstr	s0, [r4, #4]


	if( flgInit == 0){ // 初期化処理
 8001d4c:	b975      	cbnz	r5, 8001d6c <calcElectAngleEstimate+0x88>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d50:	60a3      	str	r3, [r4, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d54:	60e3      	str	r3, [r4, #12]
		electAngleEstimateData->wc_PLL = 0;
 8001d56:	2200      	movs	r2, #0
 8001d58:	6022      	str	r2, [r4, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001d5a:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <calcElectAngleEstimate+0x104>)
 8001d5c:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001d5e:	b005      	add	sp, #20
 8001d60:	ecbd 8b04 	vpop	{d8-d9}
 8001d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d68:	b004      	add	sp, #16
 8001d6a:	4770      	bx	lr
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	9303      	str	r3, [sp, #12]
		gRateLimit(100.0f * TWOPI, 100.0f, CARRIERCYCLE, &wc_PLL);
 8001d70:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 8001dec <calcElectAngleEstimate+0x108>
 8001d74:	a803      	add	r0, sp, #12
 8001d76:	eeb0 1a49 	vmov.f32	s2, s18
 8001d7a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001df0 <calcElectAngleEstimate+0x10c>
 8001d7e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001df4 <calcElectAngleEstimate+0x110>
 8001d82:	f7fe ff7e 	bl	8000c82 <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001d86:	eddd 8a03 	vldr	s17, [sp, #12]
 8001d8a:	edc4 8a00 	vstr	s17, [r4]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001d8e:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 8001df8 <calcElectAngleEstimate+0x114>
 8001d92:	ee28 8a88 	vmul.f32	s16, s17, s16
 8001d96:	ee28 8a88 	vmul.f32	s16, s17, s16
 8001d9a:	ee28 8a09 	vmul.f32	s16, s16, s18
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001d9e:	ed94 7a03 	vldr	s14, [r4, #12]
 8001da2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8001dfc <calcElectAngleEstimate+0x118>
 8001da6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8001daa:	edd4 7a02 	vldr	s15, [r4, #8]
 8001dae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001db2:	ed84 0a02 	vstr	s0, [r4, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001db6:	f7fe ff13 	bl	8000be0 <gfWrapTheta>
 8001dba:	ed84 0a02 	vstr	s0, [r4, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001dbe:	ed94 0a01 	vldr	s0, [r4, #4]
 8001dc2:	f7fe ff0d 	bl	8000be0 <gfWrapTheta>
 8001dc6:	ed84 0a01 	vstr	s0, [r4, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001dca:	4807      	ldr	r0, [pc, #28]	; (8001de8 <calcElectAngleEstimate+0x104>)
 8001dcc:	eeb0 1a48 	vmov.f32	s2, s16
 8001dd0:	eef0 0a68 	vmov.f32	s1, s17
 8001dd4:	f7fe fed8 	bl	8000b88 <cfPhaseLockedLoop>
 8001dd8:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8001ddc:	e7bf      	b.n	8001d5e <calcElectAngleEstimate+0x7a>
 8001dde:	bf00      	nop
 8001de0:	3fd71dc9 	.word	0x3fd71dc9
 8001de4:	39fba882 	.word	0x39fba882
 8001de8:	20000160 	.word	0x20000160
 8001dec:	3876b949 	.word	0x3876b949
 8001df0:	42c80000 	.word	0x42c80000
 8001df4:	441d1463 	.word	0x441d1463
 8001df8:	3e4ccccd 	.word	0x3e4ccccd
 8001dfc:	4684d000 	.word	0x4684d000

08001e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	2400      	movs	r4, #0
 8001e06:	9405      	str	r4, [sp, #20]
 8001e08:	9406      	str	r4, [sp, #24]
 8001e0a:	9407      	str	r4, [sp, #28]
 8001e0c:	9408      	str	r4, [sp, #32]
 8001e0e:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <MX_GPIO_Init+0xc8>)
 8001e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e14:	f042 0204 	orr.w	r2, r2, #4
 8001e18:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e1c:	f002 0204 	and.w	r2, r2, #4
 8001e20:	9201      	str	r2, [sp, #4]
 8001e22:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e2e:	f002 0220 	and.w	r2, r2, #32
 8001e32:	9202      	str	r2, [sp, #8]
 8001e34:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e40:	f002 0201 	and.w	r2, r2, #1
 8001e44:	9203      	str	r2, [sp, #12]
 8001e46:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e4a:	f042 0202 	orr.w	r2, r2, #2
 8001e4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	9304      	str	r3, [sp, #16]
 8001e58:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e62:	f002 fd92 	bl	800498a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001e66:	4d19      	ldr	r5, [pc, #100]	; (8001ecc <MX_GPIO_Init+0xcc>)
 8001e68:	4622      	mov	r2, r4
 8001e6a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001e6e:	4628      	mov	r0, r5
 8001e70:	f002 fd8b 	bl	800498a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e78:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e7e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e82:	a905      	add	r1, sp, #20
 8001e84:	4628      	mov	r0, r5
 8001e86:	f002 fc8f 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2601      	movs	r6, #1
 8001e90:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e96:	a905      	add	r1, sp, #20
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f002 fc84 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8001ea0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ea4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eac:	a905      	add	r1, sp, #20
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f002 fc7a 	bl	80047a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	2028      	movs	r0, #40	; 0x28
 8001eba:	f002 f94b 	bl	8004154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ebe:	2028      	movs	r0, #40	; 0x28
 8001ec0:	f002 f980 	bl	80041c4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec4:	b00a      	add	sp, #40	; 0x28
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000800 	.word	0x48000800

08001ed0 <MX_DMA_Init>:
{
 8001ed0:	b500      	push	{lr}
 8001ed2:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <MX_DMA_Init+0x50>)
 8001ed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ed8:	f042 0204 	orr.w	r2, r2, #4
 8001edc:	649a      	str	r2, [r3, #72]	; 0x48
 8001ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ee0:	f002 0204 	and.w	r2, r2, #4
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	649a      	str	r2, [r3, #72]	; 0x48
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	4611      	mov	r1, r2
 8001efe:	200b      	movs	r0, #11
 8001f00:	f002 f928 	bl	8004154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f04:	200b      	movs	r0, #11
 8001f06:	f002 f95d 	bl	80041c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	200c      	movs	r0, #12
 8001f10:	f002 f920 	bl	8004154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f14:	200c      	movs	r0, #12
 8001f16:	f002 f955 	bl	80041c4 <HAL_NVIC_EnableIRQ>
}
 8001f1a:	b003      	add	sp, #12
 8001f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f20:	40021000 	.word	0x40021000

08001f24 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <Error_Handler+0x2>

08001f28 <MX_LPUART1_UART_Init>:
{
 8001f28:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 8001f2a:	4815      	ldr	r0, [pc, #84]	; (8001f80 <MX_LPUART1_UART_Init+0x58>)
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_LPUART1_UART_Init+0x5c>)
 8001f2e:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001f30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f34:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	2300      	movs	r3, #0
 8001f38:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f3a:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f3c:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f3e:	220c      	movs	r2, #12
 8001f40:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f44:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f46:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f48:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f4a:	f004 fe40 	bl	8006bce <HAL_UART_Init>
 8001f4e:	b970      	cbnz	r0, 8001f6e <MX_LPUART1_UART_Init+0x46>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <MX_LPUART1_UART_Init+0x58>)
 8001f54:	f004 feb3 	bl	8006cbe <HAL_UARTEx_SetTxFifoThreshold>
 8001f58:	b958      	cbnz	r0, 8001f72 <MX_LPUART1_UART_Init+0x4a>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4808      	ldr	r0, [pc, #32]	; (8001f80 <MX_LPUART1_UART_Init+0x58>)
 8001f5e:	f004 fed3 	bl	8006d08 <HAL_UARTEx_SetRxFifoThreshold>
 8001f62:	b940      	cbnz	r0, 8001f76 <MX_LPUART1_UART_Init+0x4e>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f64:	4806      	ldr	r0, [pc, #24]	; (8001f80 <MX_LPUART1_UART_Init+0x58>)
 8001f66:	f004 fe8b 	bl	8006c80 <HAL_UARTEx_DisableFifoMode>
 8001f6a:	b930      	cbnz	r0, 8001f7a <MX_LPUART1_UART_Init+0x52>
}
 8001f6c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f6e:	f7ff ffd9 	bl	8001f24 <Error_Handler>
    Error_Handler();
 8001f72:	f7ff ffd7 	bl	8001f24 <Error_Handler>
    Error_Handler();
 8001f76:	f7ff ffd5 	bl	8001f24 <Error_Handler>
    Error_Handler();
 8001f7a:	f7ff ffd3 	bl	8001f24 <Error_Handler>
 8001f7e:	bf00      	nop
 8001f80:	200002bc 	.word	0x200002bc
 8001f84:	40008000 	.word	0x40008000

08001f88 <MX_ADC1_Init>:
{
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	b09a      	sub	sp, #104	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	9417      	str	r4, [sp, #92]	; 0x5c
 8001f90:	9418      	str	r4, [sp, #96]	; 0x60
 8001f92:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f94:	2220      	movs	r2, #32
 8001f96:	4621      	mov	r1, r4
 8001f98:	a80f      	add	r0, sp, #60	; 0x3c
 8001f9a:	f004 ff05 	bl	8006da8 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001f9e:	223c      	movs	r2, #60	; 0x3c
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	4668      	mov	r0, sp
 8001fa4:	f004 ff00 	bl	8006da8 <memset>
  hadc1.Instance = ADC1;
 8001fa8:	4841      	ldr	r0, [pc, #260]	; (80020b0 <MX_ADC1_Init+0x128>)
 8001faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fae:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fb0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001fb4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fb6:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb8:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001fba:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fc4:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fc6:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001fc8:	2202      	movs	r2, #2
 8001fca:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fcc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd0:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd2:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fd4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fd8:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fda:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fde:	f000 fd21 	bl	8002a24 <HAL_ADC_Init>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d155      	bne.n	8002092 <MX_ADC1_Init+0x10a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fea:	a917      	add	r1, sp, #92	; 0x5c
 8001fec:	4830      	ldr	r0, [pc, #192]	; (80020b0 <MX_ADC1_Init+0x128>)
 8001fee:	f001 ffb5 	bl	8003f5c <HAL_ADCEx_MultiModeConfigChannel>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d14f      	bne.n	8002096 <MX_ADC1_Init+0x10e>
  sConfig.Channel = ADC_CHANNEL_2;
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <MX_ADC1_Init+0x12c>)
 8001ff8:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ffe:	2300      	movs	r3, #0
 8002000:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002002:	227f      	movs	r2, #127	; 0x7f
 8002004:	9212      	str	r2, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002006:	2204      	movs	r2, #4
 8002008:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 800200a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200c:	a90f      	add	r1, sp, #60	; 0x3c
 800200e:	4828      	ldr	r0, [pc, #160]	; (80020b0 <MX_ADC1_Init+0x128>)
 8002010:	f001 f82a 	bl	8003068 <HAL_ADC_ConfigChannel>
 8002014:	2800      	cmp	r0, #0
 8002016:	d140      	bne.n	800209a <MX_ADC1_Init+0x112>
  sConfig.Channel = ADC_CHANNEL_8;
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <MX_ADC1_Init+0x130>)
 800201a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800201c:	230c      	movs	r3, #12
 800201e:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002020:	a90f      	add	r1, sp, #60	; 0x3c
 8002022:	4823      	ldr	r0, [pc, #140]	; (80020b0 <MX_ADC1_Init+0x128>)
 8002024:	f001 f820 	bl	8003068 <HAL_ADC_ConfigChannel>
 8002028:	2800      	cmp	r0, #0
 800202a:	d138      	bne.n	800209e <MX_ADC1_Init+0x116>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <MX_ADC1_Init+0x134>)
 800202e:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002030:	2309      	movs	r3, #9
 8002032:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002034:	2300      	movs	r3, #0
 8002036:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002038:	227f      	movs	r2, #127	; 0x7f
 800203a:	9203      	str	r2, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800203c:	2204      	movs	r2, #4
 800203e:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedOffset = 0;
 8002040:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8002042:	2203      	movs	r2, #3
 8002044:	9208      	str	r2, [sp, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002046:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800204a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800204e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002056:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002058:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800205c:	4669      	mov	r1, sp
 800205e:	4814      	ldr	r0, [pc, #80]	; (80020b0 <MX_ADC1_Init+0x128>)
 8002060:	f001 fc44 	bl	80038ec <HAL_ADCEx_InjectedConfigChannel>
 8002064:	b9e8      	cbnz	r0, 80020a2 <MX_ADC1_Init+0x11a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_ADC1_Init+0x138>)
 8002068:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800206a:	f240 130f 	movw	r3, #271	; 0x10f
 800206e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002070:	4669      	mov	r1, sp
 8002072:	480f      	ldr	r0, [pc, #60]	; (80020b0 <MX_ADC1_Init+0x128>)
 8002074:	f001 fc3a 	bl	80038ec <HAL_ADCEx_InjectedConfigChannel>
 8002078:	b9a8      	cbnz	r0, 80020a6 <MX_ADC1_Init+0x11e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_ADC1_Init+0x13c>)
 800207c:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800207e:	f240 2315 	movw	r3, #533	; 0x215
 8002082:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002084:	4669      	mov	r1, sp
 8002086:	480a      	ldr	r0, [pc, #40]	; (80020b0 <MX_ADC1_Init+0x128>)
 8002088:	f001 fc30 	bl	80038ec <HAL_ADCEx_InjectedConfigChannel>
 800208c:	b968      	cbnz	r0, 80020aa <MX_ADC1_Init+0x122>
}
 800208e:	b01a      	add	sp, #104	; 0x68
 8002090:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002092:	f7ff ff47 	bl	8001f24 <Error_Handler>
    Error_Handler();
 8002096:	f7ff ff45 	bl	8001f24 <Error_Handler>
    Error_Handler();
 800209a:	f7ff ff43 	bl	8001f24 <Error_Handler>
    Error_Handler();
 800209e:	f7ff ff41 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80020a2:	f7ff ff3f 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80020a6:	f7ff ff3d 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80020aa:	f7ff ff3b 	bl	8001f24 <Error_Handler>
 80020ae:	bf00      	nop
 80020b0:	2000017c 	.word	0x2000017c
 80020b4:	08600004 	.word	0x08600004
 80020b8:	21800100 	.word	0x21800100
 80020bc:	04300002 	.word	0x04300002
 80020c0:	1d500080 	.word	0x1d500080
 80020c4:	19200040 	.word	0x19200040

080020c8 <MX_TIM1_Init>:
{
 80020c8:	b510      	push	{r4, lr}
 80020ca:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020cc:	2400      	movs	r4, #0
 80020ce:	9415      	str	r4, [sp, #84]	; 0x54
 80020d0:	9416      	str	r4, [sp, #88]	; 0x58
 80020d2:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d4:	940e      	str	r4, [sp, #56]	; 0x38
 80020d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80020d8:	9410      	str	r4, [sp, #64]	; 0x40
 80020da:	9411      	str	r4, [sp, #68]	; 0x44
 80020dc:	9412      	str	r4, [sp, #72]	; 0x48
 80020de:	9413      	str	r4, [sp, #76]	; 0x4c
 80020e0:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e2:	2234      	movs	r2, #52	; 0x34
 80020e4:	4621      	mov	r1, r4
 80020e6:	a801      	add	r0, sp, #4
 80020e8:	f004 fe5e 	bl	8006da8 <memset>
  htim1.Instance = TIM1;
 80020ec:	4835      	ldr	r0, [pc, #212]	; (80021c4 <MX_TIM1_Init+0xfc>)
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <MX_TIM1_Init+0x100>)
 80020f0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80020f2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020f4:	2320      	movs	r3, #32
 80020f6:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 4999;
 80020f8:	f241 3387 	movw	r3, #4999	; 0x1387
 80020fc:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fe:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002100:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002104:	f003 fdb0 	bl	8005c68 <HAL_TIM_PWM_Init>
 8002108:	2800      	cmp	r0, #0
 800210a:	d14c      	bne.n	80021a6 <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800210c:	2370      	movs	r3, #112	; 0x70
 800210e:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002116:	a915      	add	r1, sp, #84	; 0x54
 8002118:	482a      	ldr	r0, [pc, #168]	; (80021c4 <MX_TIM1_Init+0xfc>)
 800211a:	f004 f9c7 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	2800      	cmp	r0, #0
 8002120:	d143      	bne.n	80021aa <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002122:	2360      	movs	r3, #96	; 0x60
 8002124:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002126:	2200      	movs	r2, #0
 8002128:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212a:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800212c:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800212e:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002130:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002132:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002134:	a90e      	add	r1, sp, #56	; 0x38
 8002136:	4823      	ldr	r0, [pc, #140]	; (80021c4 <MX_TIM1_Init+0xfc>)
 8002138:	f003 fe44 	bl	8005dc4 <HAL_TIM_PWM_ConfigChannel>
 800213c:	2800      	cmp	r0, #0
 800213e:	d136      	bne.n	80021ae <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002140:	2204      	movs	r2, #4
 8002142:	a90e      	add	r1, sp, #56	; 0x38
 8002144:	481f      	ldr	r0, [pc, #124]	; (80021c4 <MX_TIM1_Init+0xfc>)
 8002146:	f003 fe3d 	bl	8005dc4 <HAL_TIM_PWM_ConfigChannel>
 800214a:	2800      	cmp	r0, #0
 800214c:	d131      	bne.n	80021b2 <MX_TIM1_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800214e:	2208      	movs	r2, #8
 8002150:	a90e      	add	r1, sp, #56	; 0x38
 8002152:	481c      	ldr	r0, [pc, #112]	; (80021c4 <MX_TIM1_Init+0xfc>)
 8002154:	f003 fe36 	bl	8005dc4 <HAL_TIM_PWM_ConfigChannel>
 8002158:	2800      	cmp	r0, #0
 800215a:	d12c      	bne.n	80021b6 <MX_TIM1_Init+0xee>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800215c:	2370      	movs	r3, #112	; 0x70
 800215e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002160:	220c      	movs	r2, #12
 8002162:	a90e      	add	r1, sp, #56	; 0x38
 8002164:	4817      	ldr	r0, [pc, #92]	; (80021c4 <MX_TIM1_Init+0xfc>)
 8002166:	f003 fe2d 	bl	8005dc4 <HAL_TIM_PWM_ConfigChannel>
 800216a:	bb30      	cbnz	r0, 80021ba <MX_TIM1_Init+0xf2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002170:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002172:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8002174:	2264      	movs	r2, #100	; 0x64
 8002176:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002178:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800217a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800217e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002180:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002182:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002184:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218a:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800218c:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800218e:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002190:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002192:	a901      	add	r1, sp, #4
 8002194:	480b      	ldr	r0, [pc, #44]	; (80021c4 <MX_TIM1_Init+0xfc>)
 8002196:	f004 f9df 	bl	8006558 <HAL_TIMEx_ConfigBreakDeadTime>
 800219a:	b980      	cbnz	r0, 80021be <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 800219c:	4809      	ldr	r0, [pc, #36]	; (80021c4 <MX_TIM1_Init+0xfc>)
 800219e:	f000 fb25 	bl	80027ec <HAL_TIM_MspPostInit>
}
 80021a2:	b018      	add	sp, #96	; 0x60
 80021a4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80021a6:	f7ff febd 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80021aa:	f7ff febb 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80021ae:	f7ff feb9 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80021b2:	f7ff feb7 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80021b6:	f7ff feb5 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80021ba:	f7ff feb3 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80021be:	f7ff feb1 	bl	8001f24 <Error_Handler>
 80021c2:	bf00      	nop
 80021c4:	2000034c 	.word	0x2000034c
 80021c8:	40012c00 	.word	0x40012c00

080021cc <MX_TIM2_Init>:
{
 80021cc:	b500      	push	{lr}
 80021ce:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	2300      	movs	r3, #0
 80021d2:	9305      	str	r3, [sp, #20]
 80021d4:	9306      	str	r3, [sp, #24]
 80021d6:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	9303      	str	r3, [sp, #12]
 80021de:	9304      	str	r3, [sp, #16]
  htim2.Instance = TIM2;
 80021e0:	481d      	ldr	r0, [pc, #116]	; (8002258 <MX_TIM2_Init+0x8c>)
 80021e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80021e8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4.294967295E9;
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80021f6:	f003 fd67 	bl	8005cc8 <HAL_TIM_IC_Init>
 80021fa:	bb10      	cbnz	r0, 8002242 <MX_TIM2_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002202:	a905      	add	r1, sp, #20
 8002204:	4814      	ldr	r0, [pc, #80]	; (8002258 <MX_TIM2_Init+0x8c>)
 8002206:	f004 f951 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	b9e0      	cbnz	r0, 8002246 <MX_TIM2_Init+0x7a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800220c:	2200      	movs	r2, #0
 800220e:	9201      	str	r2, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002210:	2301      	movs	r3, #1
 8002212:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002214:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 1;
 8002216:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002218:	a901      	add	r1, sp, #4
 800221a:	480f      	ldr	r0, [pc, #60]	; (8002258 <MX_TIM2_Init+0x8c>)
 800221c:	f003 feae 	bl	8005f7c <HAL_TIM_IC_ConfigChannel>
 8002220:	b998      	cbnz	r0, 800224a <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002222:	2204      	movs	r2, #4
 8002224:	eb0d 0102 	add.w	r1, sp, r2
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <MX_TIM2_Init+0x8c>)
 800222a:	f003 fea7 	bl	8005f7c <HAL_TIM_IC_ConfigChannel>
 800222e:	b970      	cbnz	r0, 800224e <MX_TIM2_Init+0x82>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002230:	2208      	movs	r2, #8
 8002232:	a901      	add	r1, sp, #4
 8002234:	4808      	ldr	r0, [pc, #32]	; (8002258 <MX_TIM2_Init+0x8c>)
 8002236:	f003 fea1 	bl	8005f7c <HAL_TIM_IC_ConfigChannel>
 800223a:	b950      	cbnz	r0, 8002252 <MX_TIM2_Init+0x86>
}
 800223c:	b009      	add	sp, #36	; 0x24
 800223e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002242:	f7ff fe6f 	bl	8001f24 <Error_Handler>
    Error_Handler();
 8002246:	f7ff fe6d 	bl	8001f24 <Error_Handler>
    Error_Handler();
 800224a:	f7ff fe6b 	bl	8001f24 <Error_Handler>
    Error_Handler();
 800224e:	f7ff fe69 	bl	8001f24 <Error_Handler>
    Error_Handler();
 8002252:	f7ff fe67 	bl	8001f24 <Error_Handler>
 8002256:	bf00      	nop
 8002258:	20000398 	.word	0x20000398

0800225c <MX_DAC1_Init>:
{
 800225c:	b500      	push	{lr}
 800225e:	b08d      	sub	sp, #52	; 0x34
  DAC_ChannelConfTypeDef sConfig = {0};
 8002260:	2230      	movs	r2, #48	; 0x30
 8002262:	2100      	movs	r1, #0
 8002264:	4668      	mov	r0, sp
 8002266:	f004 fd9f 	bl	8006da8 <memset>
  hdac1.Instance = DAC1;
 800226a:	4810      	ldr	r0, [pc, #64]	; (80022ac <MX_DAC1_Init+0x50>)
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <MX_DAC1_Init+0x54>)
 800226e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002270:	f001 ffca 	bl	8004208 <HAL_DAC_Init>
 8002274:	b9a8      	cbnz	r0, 80022a2 <MX_DAC1_Init+0x46>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002276:	2302      	movs	r3, #2
 8002278:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800227a:	2200      	movs	r2, #0
 800227c:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002280:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002284:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8002286:	9303      	str	r3, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002288:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800228a:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800228c:	2301      	movs	r3, #1
 800228e:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002290:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002292:	4669      	mov	r1, sp
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_DAC1_Init+0x50>)
 8002296:	f002 f817 	bl	80042c8 <HAL_DAC_ConfigChannel>
 800229a:	b920      	cbnz	r0, 80022a6 <MX_DAC1_Init+0x4a>
}
 800229c:	b00d      	add	sp, #52	; 0x34
 800229e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022a2:	f7ff fe3f 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80022a6:	f7ff fe3d 	bl	8001f24 <Error_Handler>
 80022aa:	bf00      	nop
 80022ac:	200001e8 	.word	0x200001e8
 80022b0:	50000800 	.word	0x50000800

080022b4 <MX_TIM7_Init>:
{
 80022b4:	b500      	push	{lr}
 80022b6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	9303      	str	r3, [sp, #12]
  htim7.Instance = TIM7;
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <MX_TIM7_Init+0x44>)
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <MX_TIM7_Init+0x48>)
 80022c4:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 80022c6:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 4999;
 80022ca:	f241 3287 	movw	r2, #4999	; 0x1387
 80022ce:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022d2:	f003 fc99 	bl	8005c08 <HAL_TIM_Base_Init>
 80022d6:	b958      	cbnz	r0, 80022f0 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022d8:	2320      	movs	r3, #32
 80022da:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022e0:	a901      	add	r1, sp, #4
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_TIM7_Init+0x44>)
 80022e4:	f004 f8e2 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 80022e8:	b920      	cbnz	r0, 80022f4 <MX_TIM7_Init+0x40>
}
 80022ea:	b005      	add	sp, #20
 80022ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022f0:	f7ff fe18 	bl	8001f24 <Error_Handler>
    Error_Handler();
 80022f4:	f7ff fe16 	bl	8001f24 <Error_Handler>
 80022f8:	200003e4 	.word	0x200003e4
 80022fc:	40001400 	.word	0x40001400

08002300 <SystemClock_Config>:
{
 8002300:	b500      	push	{lr}
 8002302:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002304:	2238      	movs	r2, #56	; 0x38
 8002306:	2100      	movs	r1, #0
 8002308:	a806      	add	r0, sp, #24
 800230a:	f004 fd4d 	bl	8006da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800230e:	2000      	movs	r0, #0
 8002310:	9001      	str	r0, [sp, #4]
 8002312:	9002      	str	r0, [sp, #8]
 8002314:	9003      	str	r0, [sp, #12]
 8002316:	9004      	str	r0, [sp, #16]
 8002318:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800231a:	f002 fb53 	bl	80049c4 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800231e:	2302      	movs	r3, #2
 8002320:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002326:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800232e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002330:	2204      	movs	r2, #4
 8002332:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002334:	2255      	movs	r2, #85	; 0x55
 8002336:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002338:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800233a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800233c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233e:	a806      	add	r0, sp, #24
 8002340:	f002 fbfa 	bl	8004b38 <HAL_RCC_OscConfig>
 8002344:	b980      	cbnz	r0, 8002368 <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002346:	230f      	movs	r3, #15
 8002348:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234a:	2303      	movs	r3, #3
 800234c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002352:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002354:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002356:	2104      	movs	r1, #4
 8002358:	eb0d 0001 	add.w	r0, sp, r1
 800235c:	f002 fea4 	bl	80050a8 <HAL_RCC_ClockConfig>
 8002360:	b920      	cbnz	r0, 800236c <SystemClock_Config+0x6c>
}
 8002362:	b015      	add	sp, #84	; 0x54
 8002364:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002368:	f7ff fddc 	bl	8001f24 <Error_Handler>
    Error_Handler();
 800236c:	f7ff fdda 	bl	8001f24 <Error_Handler>

08002370 <main>:
{
 8002370:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8002372:	f000 fb21 	bl	80029b8 <HAL_Init>
  SystemClock_Config();
 8002376:	f7ff ffc3 	bl	8002300 <SystemClock_Config>
  MX_GPIO_Init();
 800237a:	f7ff fd41 	bl	8001e00 <MX_GPIO_Init>
  MX_DMA_Init();
 800237e:	f7ff fda7 	bl	8001ed0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002382:	f7ff fdd1 	bl	8001f28 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8002386:	f7ff fdff 	bl	8001f88 <MX_ADC1_Init>
  MX_TIM1_Init();
 800238a:	f7ff fe9d 	bl	80020c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800238e:	f7ff ff1d 	bl	80021cc <MX_TIM2_Init>
  MX_DAC1_Init();
 8002392:	f7ff ff63 	bl	800225c <MX_DAC1_Init>
  MX_TIM7_Init();
 8002396:	f7ff ff8d 	bl	80022b4 <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800239a:	4c3d      	ldr	r4, [pc, #244]	; (8002490 <main+0x120>)
 800239c:	4620      	mov	r0, r4
 800239e:	f003 fb63 	bl	8005a68 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80023a2:	4d3c      	ldr	r5, [pc, #240]	; (8002494 <main+0x124>)
 80023a4:	4628      	mov	r0, r5
 80023a6:	f001 f9e3 	bl	8003770 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80023aa:	4e3b      	ldr	r6, [pc, #236]	; (8002498 <main+0x128>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b2:	4630      	mov	r0, r6
 80023b4:	f002 fae9 	bl	800498a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023be:	4630      	mov	r0, r6
 80023c0:	f002 fae3 	bl	800498a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ca:	4630      	mov	r0, r6
 80023cc:	f002 fadd 	bl	800498a <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80023d0:	2100      	movs	r1, #0
 80023d2:	4620      	mov	r0, r4
 80023d4:	f003 fe44 	bl	8006060 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80023d8:	2100      	movs	r1, #0
 80023da:	4620      	mov	r0, r4
 80023dc:	f003 ffe4 	bl	80063a8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80023e0:	2104      	movs	r1, #4
 80023e2:	4620      	mov	r0, r4
 80023e4:	f003 fe3c 	bl	8006060 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80023e8:	2104      	movs	r1, #4
 80023ea:	4620      	mov	r0, r4
 80023ec:	f003 ffdc 	bl	80063a8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80023f0:	2108      	movs	r1, #8
 80023f2:	4620      	mov	r0, r4
 80023f4:	f003 fe34 	bl	8006060 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80023f8:	2108      	movs	r1, #8
 80023fa:	4620      	mov	r0, r4
 80023fc:	f003 ffd4 	bl	80063a8 <HAL_TIMEx_PWMN_Start>
  TIM1 -> RCR = 1;
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <main+0x12c>)
 8002402:	2601      	movs	r6, #1
 8002404:	631e      	str	r6, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	4332      	orrs	r2, r6
 800240a:	615a      	str	r2, [r3, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 800240c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002416:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	f042 0210 	orr.w	r2, r2, #16
 800241e:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002426:	601a      	str	r2, [r3, #0]
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8002428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242a:	3a28      	subs	r2, #40	; 0x28
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_Base_Start_IT(&htim2);
 800242e:	4c1c      	ldr	r4, [pc, #112]	; (80024a0 <main+0x130>)
 8002430:	4620      	mov	r0, r4
 8002432:	f003 fb19 	bl	8005a68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002436:	2100      	movs	r1, #0
 8002438:	4620      	mov	r0, r4
 800243a:	f003 fec9 	bl	80061d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800243e:	2104      	movs	r1, #4
 8002440:	4620      	mov	r0, r4
 8002442:	f003 fec5 	bl	80061d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002446:	2108      	movs	r1, #8
 8002448:	4620      	mov	r0, r4
 800244a:	f003 fec1 	bl	80061d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 800244e:	4c15      	ldr	r4, [pc, #84]	; (80024a4 <main+0x134>)
 8002450:	4620      	mov	r0, r4
 8002452:	f003 fac3 	bl	80059dc <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8002456:	4631      	mov	r1, r6
 8002458:	4620      	mov	r0, r4
 800245a:	f003 fb4f 	bl	8005afc <HAL_TIM_GenerateEvent>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 800245e:	2202      	movs	r2, #2
 8002460:	4911      	ldr	r1, [pc, #68]	; (80024a8 <main+0x138>)
 8002462:	4628      	mov	r0, r5
 8002464:	f001 f8e8 	bl	8003638 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002468:	4c10      	ldr	r4, [pc, #64]	; (80024ac <main+0x13c>)
 800246a:	2100      	movs	r1, #0
 800246c:	4620      	mov	r0, r4
 800246e:	f001 fedd 	bl	800422c <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8002472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002476:	2200      	movs	r2, #0
 8002478:	4611      	mov	r1, r2
 800247a:	4620      	mov	r0, r4
 800247c:	f001 ff0b 	bl	8004296 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8002480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002484:	2200      	movs	r2, #0
 8002486:	4611      	mov	r1, r2
 8002488:	4808      	ldr	r0, [pc, #32]	; (80024ac <main+0x13c>)
 800248a:	f001 ff04 	bl	8004296 <HAL_DAC_SetValue>
  while (1)
 800248e:	e7f7      	b.n	8002480 <main+0x110>
 8002490:	2000034c 	.word	0x2000034c
 8002494:	2000017c 	.word	0x2000017c
 8002498:	48000800 	.word	0x48000800
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	20000398 	.word	0x20000398
 80024a4:	200003e4 	.word	0x200003e4
 80024a8:	2000008c 	.word	0x2000008c
 80024ac:	200001e8 	.word	0x200001e8

080024b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b500      	push	{lr}
 80024b2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_MspInit+0x34>)
 80024b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	661a      	str	r2, [r3, #96]	; 0x60
 80024be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024c0:	f002 0201 	and.w	r2, r2, #1
 80024c4:	9200      	str	r2, [sp, #0]
 80024c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ce:	659a      	str	r2, [r3, #88]	; 0x58
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024da:	f002 faf9 	bl	8004ad0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	b003      	add	sp, #12
 80024e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	b09e      	sub	sp, #120	; 0x78
 80024ec:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ee:	2100      	movs	r1, #0
 80024f0:	9119      	str	r1, [sp, #100]	; 0x64
 80024f2:	911a      	str	r1, [sp, #104]	; 0x68
 80024f4:	911b      	str	r1, [sp, #108]	; 0x6c
 80024f6:	911c      	str	r1, [sp, #112]	; 0x70
 80024f8:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024fa:	2254      	movs	r2, #84	; 0x54
 80024fc:	a804      	add	r0, sp, #16
 80024fe:	f004 fc53 	bl	8006da8 <memset>
  if(hadc->Instance==ADC1)
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002508:	d001      	beq.n	800250e <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800250a:	b01e      	add	sp, #120	; 0x78
 800250c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800250e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002512:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002514:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002518:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800251a:	a804      	add	r0, sp, #16
 800251c:	f002 feea 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 8002520:	2800      	cmp	r0, #0
 8002522:	d14e      	bne.n	80025c2 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_ADC_MspInit+0xe8>)
 8002526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800252c:	64da      	str	r2, [r3, #76]	; 0x4c
 800252e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002530:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002534:	9201      	str	r2, [sp, #4]
 8002536:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800253a:	f042 0204 	orr.w	r2, r2, #4
 800253e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002542:	f002 0204 	and.w	r2, r2, #4
 8002546:	9202      	str	r2, [sp, #8]
 8002548:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800255c:	2307      	movs	r3, #7
 800255e:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002560:	2603      	movs	r6, #3
 8002562:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2500      	movs	r5, #0
 8002566:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002568:	a919      	add	r1, sp, #100	; 0x64
 800256a:	481a      	ldr	r0, [pc, #104]	; (80025d4 <HAL_ADC_MspInit+0xec>)
 800256c:	f002 f91c 	bl	80047a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002570:	9619      	str	r6, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002572:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	a919      	add	r1, sp, #100	; 0x64
 8002578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257c:	f002 f914 	bl	80047a8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002580:	4815      	ldr	r0, [pc, #84]	; (80025d8 <HAL_ADC_MspInit+0xf0>)
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <HAL_ADC_MspInit+0xf4>)
 8002584:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002586:	2305      	movs	r3, #5
 8002588:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258a:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002596:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800259e:	2320      	movs	r3, #32
 80025a0:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025a2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025a4:	f001 ffe8 	bl	8004578 <HAL_DMA_Init>
 80025a8:	b970      	cbnz	r0, 80025c8 <HAL_ADC_MspInit+0xe0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_ADC_MspInit+0xf0>)
 80025ac:	6563      	str	r3, [r4, #84]	; 0x54
 80025ae:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	4611      	mov	r1, r2
 80025b4:	2012      	movs	r0, #18
 80025b6:	f001 fdcd 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025ba:	2012      	movs	r0, #18
 80025bc:	f001 fe02 	bl	80041c4 <HAL_NVIC_EnableIRQ>
}
 80025c0:	e7a3      	b.n	800250a <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80025c2:	f7ff fcaf 	bl	8001f24 <Error_Handler>
 80025c6:	e7ad      	b.n	8002524 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80025c8:	f7ff fcac 	bl	8001f24 <Error_Handler>
 80025cc:	e7ed      	b.n	80025aa <HAL_ADC_MspInit+0xc2>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	48000800 	.word	0x48000800
 80025d8:	200001fc 	.word	0x200001fc
 80025dc:	40020008 	.word	0x40020008

080025e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80025e0:	b530      	push	{r4, r5, lr}
 80025e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	2300      	movs	r3, #0
 80025e6:	9303      	str	r3, [sp, #12]
 80025e8:	9304      	str	r3, [sp, #16]
 80025ea:	9305      	str	r3, [sp, #20]
 80025ec:	9306      	str	r3, [sp, #24]
 80025ee:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 80025f0:	6802      	ldr	r2, [r0, #0]
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <HAL_DAC_MspInit+0x98>)
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80025f8:	b009      	add	sp, #36	; 0x24
 80025fa:	bd30      	pop	{r4, r5, pc}
 80025fc:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 80025fe:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002602:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002608:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800260c:	64da      	str	r2, [r3, #76]	; 0x4c
 800260e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002610:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002614:	9201      	str	r2, [sp, #4]
 8002616:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800262a:	2510      	movs	r5, #16
 800262c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262e:	2303      	movs	r3, #3
 8002630:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	a903      	add	r1, sp, #12
 8002634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002638:	f002 f8b6 	bl	80047a8 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800263c:	480f      	ldr	r0, [pc, #60]	; (800267c <HAL_DAC_MspInit+0x9c>)
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_DAC_MspInit+0xa0>)
 8002640:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002642:	2306      	movs	r3, #6
 8002644:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002646:	6085      	str	r5, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002654:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265a:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800265c:	2220      	movs	r2, #32
 800265e:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002660:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002662:	f001 ff89 	bl	8004578 <HAL_DMA_Init>
 8002666:	b918      	cbnz	r0, 8002670 <HAL_DAC_MspInit+0x90>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <HAL_DAC_MspInit+0x9c>)
 800266a:	60a3      	str	r3, [r4, #8]
 800266c:	629c      	str	r4, [r3, #40]	; 0x28
}
 800266e:	e7c3      	b.n	80025f8 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8002670:	f7ff fc58 	bl	8001f24 <Error_Handler>
 8002674:	e7f8      	b.n	8002668 <HAL_DAC_MspInit+0x88>
 8002676:	bf00      	nop
 8002678:	50000800 	.word	0x50000800
 800267c:	2000025c 	.word	0x2000025c
 8002680:	4002001c 	.word	0x4002001c

08002684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002684:	b510      	push	{r4, lr}
 8002686:	b09c      	sub	sp, #112	; 0x70
 8002688:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	2100      	movs	r1, #0
 800268c:	9117      	str	r1, [sp, #92]	; 0x5c
 800268e:	9118      	str	r1, [sp, #96]	; 0x60
 8002690:	9119      	str	r1, [sp, #100]	; 0x64
 8002692:	911a      	str	r1, [sp, #104]	; 0x68
 8002694:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002696:	2254      	movs	r2, #84	; 0x54
 8002698:	a802      	add	r0, sp, #8
 800269a:	f004 fb85 	bl	8006da8 <memset>
  if(huart->Instance==LPUART1)
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_UART_MspInit+0x7c>)
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d001      	beq.n	80026aa <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80026a6:	b01c      	add	sp, #112	; 0x70
 80026a8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026aa:	2320      	movs	r3, #32
 80026ac:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ae:	a802      	add	r0, sp, #8
 80026b0:	f002 fe20 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 80026b4:	bb00      	cbnz	r0, 80026f8 <HAL_UART_MspInit+0x74>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_UART_MspInit+0x80>)
 80026b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c
 80026c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026c2:	f002 0201 	and.w	r2, r2, #1
 80026c6:	9200      	str	r2, [sp, #0]
 80026c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80026dc:	230c      	movs	r3, #12
 80026de:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2202      	movs	r2, #2
 80026e2:	9218      	str	r2, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2200      	movs	r2, #0
 80026e6:	9219      	str	r2, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	921a      	str	r2, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80026ea:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	a917      	add	r1, sp, #92	; 0x5c
 80026ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f2:	f002 f859 	bl	80047a8 <HAL_GPIO_Init>
}
 80026f6:	e7d6      	b.n	80026a6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80026f8:	f7ff fc14 	bl	8001f24 <Error_Handler>
 80026fc:	e7db      	b.n	80026b6 <HAL_UART_MspInit+0x32>
 80026fe:	bf00      	nop
 8002700:	40008000 	.word	0x40008000
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8002708:	6802      	ldr	r2, [r0, #0]
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_TIM_PWM_MspInit+0x28>)
 800270c:	429a      	cmp	r2, r3
 800270e:	d000      	beq.n	8002712 <HAL_TIM_PWM_MspInit+0xa>
 8002710:	4770      	bx	lr
{
 8002712:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002714:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002718:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	661a      	str	r2, [r3, #96]	; 0x60
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800272a:	b002      	add	sp, #8
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40012c00 	.word	0x40012c00

08002734 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002734:	b530      	push	{r4, r5, lr}
 8002736:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	2300      	movs	r3, #0
 800273a:	9303      	str	r3, [sp, #12]
 800273c:	9304      	str	r3, [sp, #16]
 800273e:	9305      	str	r3, [sp, #20]
 8002740:	9306      	str	r3, [sp, #24]
 8002742:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM2)
 8002744:	6803      	ldr	r3, [r0, #0]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d001      	beq.n	8002750 <HAL_TIM_IC_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800274c:	b009      	add	sp, #36	; 0x24
 800274e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002750:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002754:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	659a      	str	r2, [r3, #88]	; 0x58
 800275c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800275e:	f002 0201 	and.w	r2, r2, #1
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002768:	f042 0202 	orr.w	r2, r2, #2
 800276c:	64da      	str	r2, [r3, #76]	; 0x4c
 800276e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002770:	f002 0202 	and.w	r2, r2, #2
 8002774:	9201      	str	r2, [sp, #4]
 8002776:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 800278a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800278e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2502      	movs	r5, #2
 8002792:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002794:	2401      	movs	r4, #1
 8002796:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	a903      	add	r1, sp, #12
 800279a:	4808      	ldr	r0, [pc, #32]	; (80027bc <HAL_TIM_IC_MspInit+0x88>)
 800279c:	f002 f804 	bl	80047a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H1_Pin;
 80027a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ae:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80027b0:	a903      	add	r1, sp, #12
 80027b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b6:	f001 fff7 	bl	80047a8 <HAL_GPIO_Init>
}
 80027ba:	e7c7      	b.n	800274c <HAL_TIM_IC_MspInit+0x18>
 80027bc:	48000400 	.word	0x48000400

080027c0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 80027c0:	6802      	ldr	r2, [r0, #0]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_TIM_Base_MspInit+0x28>)
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d000      	beq.n	80027ca <HAL_TIM_Base_MspInit+0xa>
 80027c8:	4770      	bx	lr
{
 80027ca:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027cc:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80027d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	659a      	str	r2, [r3, #88]	; 0x58
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80027e2:	b002      	add	sp, #8
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40001400 	.word	0x40001400

080027ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	2300      	movs	r3, #0
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	9304      	str	r3, [sp, #16]
 80027f6:	9305      	str	r3, [sp, #20]
 80027f8:	9306      	str	r3, [sp, #24]
 80027fa:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80027fc:	6802      	ldr	r2, [r0, #0]
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_TIM_MspPostInit+0x9c>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002804:	b008      	add	sp, #32
 8002806:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002808:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800280c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800280e:	f042 0204 	orr.w	r2, r2, #4
 8002812:	64da      	str	r2, [r3, #76]	; 0x4c
 8002814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002816:	f002 0204 	and.w	r2, r2, #4
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	64da      	str	r2, [r3, #76]	; 0x4c
 8002826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002828:	f002 0201 	and.w	r2, r2, #1
 800282c:	9201      	str	r2, [sp, #4]
 800282e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002832:	f042 0202 	orr.w	r2, r2, #2
 8002836:	64da      	str	r2, [r3, #76]	; 0x4c
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002842:	2308      	movs	r3, #8
 8002844:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2502      	movs	r5, #2
 8002848:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800284a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	a903      	add	r1, sp, #12
 800284e:	480f      	ldr	r0, [pc, #60]	; (800288c <HAL_TIM_MspPostInit+0xa0>)
 8002850:	f001 ffaa 	bl	80047a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002854:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002858:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2400      	movs	r4, #0
 800285e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002862:	2606      	movs	r6, #6
 8002864:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	a903      	add	r1, sp, #12
 8002868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286c:	f001 ff9c 	bl	80047a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002870:	2303      	movs	r3, #3
 8002872:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800287a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	a903      	add	r1, sp, #12
 800287e:	4804      	ldr	r0, [pc, #16]	; (8002890 <HAL_TIM_MspPostInit+0xa4>)
 8002880:	f001 ff92 	bl	80047a8 <HAL_GPIO_Init>
}
 8002884:	e7be      	b.n	8002804 <HAL_TIM_MspPostInit+0x18>
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	48000800 	.word	0x48000800
 8002890:	48000400 	.word	0x48000400

08002894 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <NMI_Handler>

08002896 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <HardFault_Handler>

08002898 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <MemManage_Handler>

0800289a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <BusFault_Handler>

0800289c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler>

0800289e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800289e:	4770      	bx	lr

080028a0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	4770      	bx	lr

080028a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	4770      	bx	lr

080028a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a6:	f000 f897 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028aa:	bd08      	pop	{r3, pc}

080028ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028ae:	4802      	ldr	r0, [pc, #8]	; (80028b8 <DMA1_Channel1_IRQHandler+0xc>)
 80028b0:	f001 ff18 	bl	80046e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028b4:	bd08      	pop	{r3, pc}
 80028b6:	bf00      	nop
 80028b8:	200001fc 	.word	0x200001fc

080028bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80028bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80028be:	4802      	ldr	r0, [pc, #8]	; (80028c8 <DMA1_Channel2_IRQHandler+0xc>)
 80028c0:	f001 ff10 	bl	80046e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80028c4:	bd08      	pop	{r3, pc}
 80028c6:	bf00      	nop
 80028c8:	2000025c 	.word	0x2000025c

080028cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80028cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028ce:	4808      	ldr	r0, [pc, #32]	; (80028f0 <ADC1_2_IRQHandler+0x24>)
 80028d0:	f000 fa06 	bl	8002ce0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80028d4:	2120      	movs	r1, #32
 80028d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028da:	f002 f85b 	bl	8004994 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence();
 80028de:	f7fe fb65 	bl	8000fac <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80028e2:	2120      	movs	r1, #32
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e8:	f002 f854 	bl	8004994 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80028ec:	bd08      	pop	{r3, pc}
 80028ee:	bf00      	nop
 80028f0:	2000017c 	.word	0x2000017c

080028f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80028f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028fa:	f002 f855 	bl	80049a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028fe:	bd08      	pop	{r3, pc}

08002900 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002900:	4a03      	ldr	r2, [pc, #12]	; (8002910 <SystemInit+0x10>)
 8002902:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800290a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002916:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <LoopForever+0x6>)
  ldr r1, =_edata
 800291a:	490e      	ldr	r1, [pc, #56]	; (8002954 <LoopForever+0xa>)
  ldr r2, =_sidata
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <LoopForever+0xe>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002930:	4c0b      	ldr	r4, [pc, #44]	; (8002960 <LoopForever+0x16>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800293e:	f7ff ffdf 	bl	8002900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f004 fa0d 	bl	8006d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002946:	f7ff fd13 	bl	8002370 <main>

0800294a <LoopForever>:

LoopForever:
    b LoopForever
 800294a:	e7fe      	b.n	800294a <LoopForever>
  ldr   r0, =_estack
 800294c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002954:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002958:	080081e4 	.word	0x080081e4
  ldr r2, =_sbss
 800295c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002960:	20000434 	.word	0x20000434

08002964 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC3_IRQHandler>
	...

08002968 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_InitTick+0x44>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b90b      	cbnz	r3, 8002972 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800296e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002970:	4770      	bx	lr
{
 8002972:	b510      	push	{r4, lr}
 8002974:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_InitTick+0x48>)
 8002980:	6810      	ldr	r0, [r2, #0]
 8002982:	fbb0 f0f3 	udiv	r0, r0, r3
 8002986:	f001 fc2b 	bl	80041e0 <HAL_SYSTICK_Config>
 800298a:	b968      	cbnz	r0, 80029a8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298c:	2c0f      	cmp	r4, #15
 800298e:	d901      	bls.n	8002994 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002990:	2001      	movs	r0, #1
 8002992:	e00a      	b.n	80029aa <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002994:	2200      	movs	r2, #0
 8002996:	4621      	mov	r1, r4
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f001 fbda 	bl	8004154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_InitTick+0x4c>)
 80029a2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80029a4:	2000      	movs	r0, #0
 80029a6:	e000      	b.n	80029aa <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80029a8:	2001      	movs	r0, #1
}
 80029aa:	bd10      	pop	{r4, pc}
 80029ac:	20000004 	.word	0x20000004
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000008 	.word	0x20000008

080029b8 <HAL_Init>:
{
 80029b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ba:	2003      	movs	r0, #3
 80029bc:	f001 fbb8 	bl	8004130 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7ff ffd1 	bl	8002968 <HAL_InitTick>
 80029c6:	b110      	cbz	r0, 80029ce <HAL_Init+0x16>
    status = HAL_ERROR;
 80029c8:	2401      	movs	r4, #1
}
 80029ca:	4620      	mov	r0, r4
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	4604      	mov	r4, r0
    HAL_MspInit();
 80029d0:	f7ff fd6e 	bl	80024b0 <HAL_MspInit>
 80029d4:	e7f9      	b.n	80029ca <HAL_Init+0x12>
	...

080029d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029d8:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_IncTick+0x10>)
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_IncTick+0x14>)
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	440b      	add	r3, r1
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000430 	.word	0x20000430
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029f0:	4b01      	ldr	r3, [pc, #4]	; (80029f8 <HAL_GetTick+0x8>)
 80029f2:	6818      	ldr	r0, [r3, #0]
}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000430 	.word	0x20000430

080029fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029fc:	b538      	push	{r3, r4, r5, lr}
 80029fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff fff6 	bl	80029f0 <HAL_GetTick>
 8002a04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a06:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002a0a:	d002      	beq.n	8002a12 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_Delay+0x24>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a12:	f7ff ffed 	bl	80029f0 <HAL_GetTick>
 8002a16:	1b40      	subs	r0, r0, r5
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d3fa      	bcc.n	8002a12 <HAL_Delay+0x16>
  {
  }
}
 8002a1c:	bd38      	pop	{r3, r4, r5, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a24:	b530      	push	{r4, r5, lr}
 8002a26:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	f000 8138 	beq.w	8002ca2 <HAL_ADC_Init+0x27e>
 8002a32:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a34:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002a36:	b313      	cbz	r3, 8002a7e <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a38:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002a40:	d005      	beq.n	8002a4e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002a48:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002a4c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a4e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a50:	6893      	ldr	r3, [r2, #8]
 8002a52:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a56:	d11f      	bne.n	8002a98 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8002a58:	6893      	ldr	r3, [r2, #8]
 8002a5a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a68:	4b8f      	ldr	r3, [pc, #572]	; (8002ca8 <HAL_ADC_Init+0x284>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	4a8f      	ldr	r2, [pc, #572]	; (8002cac <HAL_ADC_Init+0x288>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a7c:	e009      	b.n	8002a92 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8002a7e:	f7ff fd33 	bl	80024e8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a82:	2300      	movs	r3, #0
 8002a84:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8002a86:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8002a8a:	e7d5      	b.n	8002a38 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002a8c:	9b01      	ldr	r3, [sp, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f9      	bne.n	8002a8c <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a98:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a9a:	6893      	ldr	r3, [r2, #8]
 8002a9c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002aa0:	d13d      	bne.n	8002b1e <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ab2:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ab4:	6893      	ldr	r3, [r2, #8]
 8002ab6:	f013 0304 	ands.w	r3, r3, #4
 8002aba:	d000      	beq.n	8002abe <HAL_ADC_Init+0x9a>
 8002abc:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002abe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002ac0:	f011 0f10 	tst.w	r1, #16
 8002ac4:	f040 80e6 	bne.w	8002c94 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 80e3 	bne.w	8002c94 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ad0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ada:	6893      	ldr	r3, [r2, #8]
 8002adc:	f013 0f01 	tst.w	r3, #1
 8002ae0:	d13e      	bne.n	8002b60 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002ae6:	d01c      	beq.n	8002b22 <HAL_ADC_Init+0xfe>
 8002ae8:	4b71      	ldr	r3, [pc, #452]	; (8002cb0 <HAL_ADC_Init+0x28c>)
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d019      	beq.n	8002b22 <HAL_ADC_Init+0xfe>
 8002aee:	4b71      	ldr	r3, [pc, #452]	; (8002cb4 <HAL_ADC_Init+0x290>)
 8002af0:	6899      	ldr	r1, [r3, #8]
 8002af2:	f011 0101 	ands.w	r1, r1, #1
 8002af6:	d000      	beq.n	8002afa <HAL_ADC_Init+0xd6>
 8002af8:	2101      	movs	r1, #1
 8002afa:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_ADC_Init+0x294>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f013 0301 	ands.w	r3, r3, #1
 8002b02:	d000      	beq.n	8002b06 <HAL_ADC_Init+0xe2>
 8002b04:	2301      	movs	r3, #1
 8002b06:	430b      	orrs	r3, r1
 8002b08:	496c      	ldr	r1, [pc, #432]	; (8002cbc <HAL_ADC_Init+0x298>)
 8002b0a:	6889      	ldr	r1, [r1, #8]
 8002b0c:	f011 0101 	ands.w	r1, r1, #1
 8002b10:	d000      	beq.n	8002b14 <HAL_ADC_Init+0xf0>
 8002b12:	2101      	movs	r1, #1
 8002b14:	430b      	orrs	r3, r1
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	e012      	b.n	8002b44 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1e:	2000      	movs	r0, #0
 8002b20:	e7c8      	b.n	8002ab4 <HAL_ADC_Init+0x90>
 8002b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f013 0301 	ands.w	r3, r3, #1
 8002b2c:	d000      	beq.n	8002b30 <HAL_ADC_Init+0x10c>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	495f      	ldr	r1, [pc, #380]	; (8002cb0 <HAL_ADC_Init+0x28c>)
 8002b32:	6889      	ldr	r1, [r1, #8]
 8002b34:	f011 0101 	ands.w	r1, r1, #1
 8002b38:	d000      	beq.n	8002b3c <HAL_ADC_Init+0x118>
 8002b3a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b163      	cbz	r3, 8002b60 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b46:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002b4a:	d072      	beq.n	8002c32 <HAL_ADC_Init+0x20e>
 8002b4c:	4b58      	ldr	r3, [pc, #352]	; (8002cb0 <HAL_ADC_Init+0x28c>)
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d06d      	beq.n	8002c2e <HAL_ADC_Init+0x20a>
 8002b52:	495b      	ldr	r1, [pc, #364]	; (8002cc0 <HAL_ADC_Init+0x29c>)
 8002b54:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b56:	688a      	ldr	r2, [r1, #8]
 8002b58:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b60:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 8002b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b64:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8002b68:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8002b6a:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8002b6c:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8002b6e:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b70:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b78:	2a01      	cmp	r2, #1
 8002b7a:	d05c      	beq.n	8002c36 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b7e:	b122      	cbz	r2, 8002b8a <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b80:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b84:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002b86:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b88:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b8a:	6821      	ldr	r1, [r4, #0]
 8002b8c:	68cd      	ldr	r5, [r1, #12]
 8002b8e:	4a4d      	ldr	r2, [pc, #308]	; (8002cc4 <HAL_ADC_Init+0x2a0>)
 8002b90:	402a      	ands	r2, r5
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	6913      	ldr	r3, [r2, #16]
 8002b9a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba4:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ba6:	688b      	ldr	r3, [r1, #8]
 8002ba8:	f013 0304 	ands.w	r3, r3, #4
 8002bac:	d000      	beq.n	8002bb0 <HAL_ADC_Init+0x18c>
 8002bae:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bb0:	688a      	ldr	r2, [r1, #8]
 8002bb2:	f012 0208 	ands.w	r2, r2, #8
 8002bb6:	d000      	beq.n	8002bba <HAL_ADC_Init+0x196>
 8002bb8:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bba:	bb4b      	cbnz	r3, 8002c10 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bbc:	bb42      	cbnz	r2, 8002c10 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bbe:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bc0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002bc4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bc6:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bca:	68cb      	ldr	r3, [r1, #12]
 8002bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd0:	f023 0302 	bic.w	r3, r3, #2
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bd8:	6923      	ldr	r3, [r4, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d030      	beq.n	8002c40 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bde:	6822      	ldr	r2, [r4, #0]
 8002be0:	6913      	ldr	r3, [r2, #16]
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002bee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bf2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf6:	6921      	ldr	r1, [r4, #16]
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bfe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d02b      	beq.n	8002c5e <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	6913      	ldr	r3, [r2, #16]
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c10:	6963      	ldr	r3, [r4, #20]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d035      	beq.n	8002c82 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002c1a:	f023 030f 	bic.w	r3, r3, #15
 8002c1e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002c2c:	e037      	b.n	8002c9e <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c2e:	4926      	ldr	r1, [pc, #152]	; (8002cc8 <HAL_ADC_Init+0x2a4>)
 8002c30:	e790      	b.n	8002b54 <HAL_ADC_Init+0x130>
 8002c32:	4925      	ldr	r1, [pc, #148]	; (8002cc8 <HAL_ADC_Init+0x2a4>)
 8002c34:	e78e      	b.n	8002b54 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002c3e:	e79d      	b.n	8002b7c <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	6913      	ldr	r3, [r2, #16]
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c48:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002c50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c58:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002c5c:	e7cf      	b.n	8002bfe <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c5e:	6821      	ldr	r1, [r4, #0]
 8002c60:	690b      	ldr	r3, [r1, #16]
 8002c62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c66:	f023 0304 	bic.w	r3, r3, #4
 8002c6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002c6c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002c6e:	432a      	orrs	r2, r5
 8002c70:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8002c72:	432a      	orrs	r2, r5
 8002c74:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8002c76:	432a      	orrs	r2, r5
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	610b      	str	r3, [r1, #16]
 8002c80:	e7c6      	b.n	8002c10 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c82:	6821      	ldr	r1, [r4, #0]
 8002c84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002c86:	f023 030f 	bic.w	r3, r3, #15
 8002c8a:	6a22      	ldr	r2, [r4, #32]
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	630b      	str	r3, [r1, #48]	; 0x30
 8002c92:	e7c5      	b.n	8002c20 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c96:	f043 0310 	orr.w	r3, r3, #16
 8002c9a:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002c9e:	b003      	add	sp, #12
 8002ca0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	e7fb      	b.n	8002c9e <HAL_ADC_Init+0x27a>
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	053e2d63 	.word	0x053e2d63
 8002cb0:	50000100 	.word	0x50000100
 8002cb4:	50000400 	.word	0x50000400
 8002cb8:	50000500 	.word	0x50000500
 8002cbc:	50000600 	.word	0x50000600
 8002cc0:	50000700 	.word	0x50000700
 8002cc4:	fff04007 	.word	0xfff04007
 8002cc8:	50000300 	.word	0x50000300

08002ccc <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ccc:	4770      	bx	lr

08002cce <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cce:	4770      	bx	lr

08002cd0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cd2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002cd4:	f7ff fffb 	bl	8002cce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd8:	bd08      	pop	{r3, pc}

08002cda <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_ErrorCallback>:
}
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_ADC_IRQHandler>:
{
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ce4:	6803      	ldr	r3, [r0, #0]
 8002ce6:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ce8:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cee:	d046      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x9e>
 8002cf0:	4a97      	ldr	r2, [pc, #604]	; (8002f50 <HAL_ADC_IRQHandler+0x270>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d041      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x9a>
 8002cf6:	4b97      	ldr	r3, [pc, #604]	; (8002f54 <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cf8:	689d      	ldr	r5, [r3, #8]
 8002cfa:	f005 051f 	and.w	r5, r5, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002cfe:	f016 0f02 	tst.w	r6, #2
 8002d02:	d010      	beq.n	8002d26 <HAL_ADC_IRQHandler+0x46>
 8002d04:	f017 0f02 	tst.w	r7, #2
 8002d08:	d00d      	beq.n	8002d26 <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d0c:	f013 0f10 	tst.w	r3, #16
 8002d10:	d103      	bne.n	8002d1a <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d18:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f000 fde4 	bl	80038e8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	2202      	movs	r2, #2
 8002d24:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d26:	f016 0f04 	tst.w	r6, #4
 8002d2a:	d002      	beq.n	8002d32 <HAL_ADC_IRQHandler+0x52>
 8002d2c:	f017 0f04 	tst.w	r7, #4
 8002d30:	d105      	bne.n	8002d3e <HAL_ADC_IRQHandler+0x5e>
 8002d32:	f016 0f08 	tst.w	r6, #8
 8002d36:	d055      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x104>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d38:	f017 0f08 	tst.w	r7, #8
 8002d3c:	d052      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x104>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d40:	f013 0f10 	tst.w	r3, #16
 8002d44:	d103      	bne.n	8002d4e <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4c:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d4e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002d56:	d13f      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0xf8>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d58:	4a7d      	ldr	r2, [pc, #500]	; (8002f50 <HAL_ADC_IRQHandler+0x270>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d014      	beq.n	8002d88 <HAL_ADC_IRQHandler+0xa8>
 8002d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00d      	beq.n	8002d82 <HAL_ADC_IRQHandler+0xa2>
 8002d66:	461a      	mov	r2, r3
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d010      	beq.n	8002d8e <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d6c:	b17d      	cbz	r5, 8002d8e <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d6e:	2d05      	cmp	r5, #5
 8002d70:	d00d      	beq.n	8002d8e <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d72:	2d09      	cmp	r5, #9
 8002d74:	d00b      	beq.n	8002d8e <HAL_ADC_IRQHandler+0xae>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d76:	68d2      	ldr	r2, [r2, #12]
 8002d78:	e00a      	b.n	8002d90 <HAL_ADC_IRQHandler+0xb0>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d7a:	4b77      	ldr	r3, [pc, #476]	; (8002f58 <HAL_ADC_IRQHandler+0x278>)
 8002d7c:	e7bc      	b.n	8002cf8 <HAL_ADC_IRQHandler+0x18>
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_ADC_IRQHandler+0x278>)
 8002d80:	e7ba      	b.n	8002cf8 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d82:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002d86:	e7ef      	b.n	8002d68 <HAL_ADC_IRQHandler+0x88>
 8002d88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002d8c:	e7ec      	b.n	8002d68 <HAL_ADC_IRQHandler+0x88>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d8e:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d90:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002d94:	d120      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0xf8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	f012 0f08 	tst.w	r2, #8
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0xf8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	f012 0f04 	tst.w	r2, #4
 8002da4:	d110      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0xe8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	f022 020c 	bic.w	r2, r2, #12
 8002dac:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db4:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002db8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0xf8>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002dc6:	e007      	b.n	8002dd8 <HAL_ADC_IRQHandler+0xf8>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f7ff ff77 	bl	8002ccc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	220c      	movs	r2, #12
 8002de2:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002de4:	f016 0f20 	tst.w	r6, #32
 8002de8:	d002      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x110>
 8002dea:	f017 0f20 	tst.w	r7, #32
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x11c>
 8002df0:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002df4:	d063      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x1de>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002df6:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002dfa:	d060      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x1de>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dfc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002dfe:	f013 0f10 	tst.w	r3, #16
 8002e02:	d103      	bne.n	8002e0c <HAL_ADC_IRQHandler+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e0a:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e0c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e10:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8002e14:	d116      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x164>
 8002e16:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002e1e:	d113      	bne.n	8002e48 <HAL_ADC_IRQHandler+0x168>
 8002e20:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e22:	4a4b      	ldr	r2, [pc, #300]	; (8002f50 <HAL_ADC_IRQHandler+0x270>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d014      	beq.n	8002e52 <HAL_ADC_IRQHandler+0x172>
 8002e28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x16c>
 8002e30:	461a      	mov	r2, r3
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d010      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e36:	b17d      	cbz	r5, 8002e58 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e38:	2d06      	cmp	r5, #6
 8002e3a:	d00d      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e3c:	2d07      	cmp	r5, #7
 8002e3e:	d00b      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x178>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	e00a      	b.n	8002e5a <HAL_ADC_IRQHandler+0x17a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e44:	2100      	movs	r1, #0
 8002e46:	e7e7      	b.n	8002e18 <HAL_ADC_IRQHandler+0x138>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	e7ea      	b.n	8002e22 <HAL_ADC_IRQHandler+0x142>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e4c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002e50:	e7ef      	b.n	8002e32 <HAL_ADC_IRQHandler+0x152>
 8002e52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e56:	e7ec      	b.n	8002e32 <HAL_ADC_IRQHandler+0x152>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e58:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e5a:	b351      	cbz	r1, 8002eb2 <HAL_ADC_IRQHandler+0x1d2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e5c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002e60:	d003      	beq.n	8002e6a <HAL_ADC_IRQHandler+0x18a>
 8002e62:	b330      	cbz	r0, 8002eb2 <HAL_ADC_IRQHandler+0x1d2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e64:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002e68:	d123      	bne.n	8002eb2 <HAL_ADC_IRQHandler+0x1d2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e6a:	6819      	ldr	r1, [r3, #0]
 8002e6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e70:	d01f      	beq.n	8002eb2 <HAL_ADC_IRQHandler+0x1d2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e72:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002e76:	d11c      	bne.n	8002eb2 <HAL_ADC_IRQHandler+0x1d2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	f012 0f08 	tst.w	r2, #8
 8002e7e:	d110      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x1c2>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e86:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e8e:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e96:	d10c      	bne.n	8002eb2 <HAL_ADC_IRQHandler+0x1d2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002ea0:	e007      	b.n	8002eb2 <HAL_ADC_IRQHandler+0x1d2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ea4:	f043 0310 	orr.w	r3, r3, #16
 8002ea8:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 fd14 	bl	80038e0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	2260      	movs	r2, #96	; 0x60
 8002ebc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ebe:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002ec2:	d002      	beq.n	8002eca <HAL_ADC_IRQHandler+0x1ea>
 8002ec4:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002ec8:	d136      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x258>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002eca:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002ece:	d002      	beq.n	8002ed6 <HAL_ADC_IRQHandler+0x1f6>
 8002ed0:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002ed4:	d142      	bne.n	8002f5c <HAL_ADC_IRQHandler+0x27c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ed6:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002eda:	d002      	beq.n	8002ee2 <HAL_ADC_IRQHandler+0x202>
 8002edc:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002ee0:	d148      	bne.n	8002f74 <HAL_ADC_IRQHandler+0x294>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ee2:	f016 0f10 	tst.w	r6, #16
 8002ee6:	d020      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x24a>
 8002ee8:	f017 0f10 	tst.w	r7, #16
 8002eec:	d01d      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x24a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ef0:	b16b      	cbz	r3, 8002f0e <HAL_ADC_IRQHandler+0x22e>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ef2:	2d00      	cmp	r5, #0
 8002ef4:	d04e      	beq.n	8002f94 <HAL_ADC_IRQHandler+0x2b4>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d048      	beq.n	8002f90 <HAL_ADC_IRQHandler+0x2b0>
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_ADC_IRQHandler+0x270>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d043      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x2ac>
 8002f04:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8002f0c:	d00a      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x244>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f14:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fedc 	bl	8002cdc <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	2210      	movs	r2, #16
 8002f28:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f2a:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002f2e:	d002      	beq.n	8002f36 <HAL_ADC_IRQHandler+0x256>
 8002f30:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8002f34:	d134      	bne.n	8002fa0 <HAL_ADC_IRQHandler+0x2c0>
}
 8002f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff feca 	bl	8002cda <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e7bd      	b.n	8002eca <HAL_ADC_IRQHandler+0x1ea>
 8002f4e:	bf00      	nop
 8002f50:	50000100 	.word	0x50000100
 8002f54:	50000700 	.word	0x50000700
 8002f58:	50000300 	.word	0x50000300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f62:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f64:	4620      	mov	r0, r4
 8002f66:	f000 fcbd 	bl	80038e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e7b0      	b.n	8002ed6 <HAL_ADC_IRQHandler+0x1f6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f7a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f000 fcb2 	bl	80038e6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e7aa      	b.n	8002ee2 <HAL_ADC_IRQHandler+0x202>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_ADC_IRQHandler+0x2e0>)
 8002f8e:	e7ba      	b.n	8002f06 <HAL_ADC_IRQHandler+0x226>
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_ADC_IRQHandler+0x2e0>)
 8002f92:	e7b8      	b.n	8002f06 <HAL_ADC_IRQHandler+0x226>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f013 0f01 	tst.w	r3, #1
 8002f9c:	d0c2      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x244>
 8002f9e:	e7b6      	b.n	8002f0e <HAL_ADC_IRQHandler+0x22e>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fa0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa6:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002faa:	f043 0308 	orr.w	r3, r3, #8
 8002fae:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 fc92 	bl	80038e2 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002fbe:	e7ba      	b.n	8002f36 <HAL_ADC_IRQHandler+0x256>
 8002fc0:	50000300 	.word	0x50000300

08002fc4 <ADC_DMAConvCplt>:
{
 8002fc4:	b508      	push	{r3, lr}
 8002fc6:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002fcc:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002fd0:	d130      	bne.n	8003034 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd8:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fda:	6803      	ldr	r3, [r0, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f012 0f08 	tst.w	r2, #8
 8002fe2:	d014      	beq.n	800300e <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002fea:	d120      	bne.n	800302e <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002ff2:	d11c      	bne.n	800302e <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ff4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ffa:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ffc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002ffe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003002:	d114      	bne.n	800302e <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003004:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800300c:	e00f      	b.n	800302e <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f013 0f02 	tst.w	r3, #2
 8003014:	d10b      	bne.n	800302e <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003016:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301c:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800301e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003020:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003024:	d103      	bne.n	800302e <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003026:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 800302e:	f7ff fe4d 	bl	8002ccc <HAL_ADC_ConvCpltCallback>
}
 8003032:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003034:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003036:	f012 0f10 	tst.w	r2, #16
 800303a:	d104      	bne.n	8003046 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800303c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800303e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003040:	4618      	mov	r0, r3
 8003042:	4790      	blx	r2
}
 8003044:	e7f5      	b.n	8003032 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8003046:	f7ff fe49 	bl	8002cdc <HAL_ADC_ErrorCallback>
 800304a:	e7f2      	b.n	8003032 <ADC_DMAConvCplt+0x6e>

0800304c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800304c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304e:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003050:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003056:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003058:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003060:	f7ff fe3c 	bl	8002cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003064:	bd08      	pop	{r3, pc}
	...

08003068 <HAL_ADC_ConfigChannel>:
{
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2200      	movs	r2, #0
 800306e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003070:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003074:	2a01      	cmp	r2, #1
 8003076:	f000 8284 	beq.w	8003582 <HAL_ADC_ConfigChannel+0x51a>
 800307a:	4603      	mov	r3, r0
 800307c:	2201      	movs	r2, #1
 800307e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003082:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003084:	68a8      	ldr	r0, [r5, #8]
 8003086:	f010 0f04 	tst.w	r0, #4
 800308a:	d009      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800308e:	f042 0220 	orr.w	r2, r2, #32
 8003092:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003094:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800309c:	b003      	add	sp, #12
 800309e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030a0:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030a2:	3530      	adds	r5, #48	; 0x30
 80030a4:	0a22      	lsrs	r2, r4, #8
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80030ac:	58a8      	ldr	r0, [r5, r2]
 80030ae:	f004 0e1f 	and.w	lr, r4, #31
 80030b2:	241f      	movs	r4, #31
 80030b4:	fa04 f40e 	lsl.w	r4, r4, lr
 80030b8:	ea20 0004 	bic.w	r0, r0, r4
 80030bc:	680c      	ldr	r4, [r1, #0]
 80030be:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80030c2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80030c6:	ea40 000c 	orr.w	r0, r0, ip
 80030ca:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030cc:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030ce:	6882      	ldr	r2, [r0, #8]
 80030d0:	f012 0204 	ands.w	r2, r2, #4
 80030d4:	d000      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x70>
 80030d6:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030d8:	6884      	ldr	r4, [r0, #8]
 80030da:	f014 0408 	ands.w	r4, r4, #8
 80030de:	d000      	beq.n	80030e2 <HAL_ADC_ConfigChannel+0x7a>
 80030e0:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d150      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030e6:	2c00      	cmp	r4, #0
 80030e8:	d14e      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030ea:	688f      	ldr	r7, [r1, #8]
 80030ec:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 80030f0:	f000 8086 	beq.w	8003200 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030f4:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030f6:	3014      	adds	r0, #20
 80030f8:	0e72      	lsrs	r2, r6, #25
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003100:	5885      	ldr	r5, [r0, r2]
 8003102:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 8003106:	f04f 0c07 	mov.w	ip, #7
 800310a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800310e:	ea25 0c0c 	bic.w	ip, r5, ip
 8003112:	fa07 f50e 	lsl.w	r5, r7, lr
 8003116:	ea4c 0505 	orr.w	r5, ip, r5
 800311a:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800311c:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800311e:	6942      	ldr	r2, [r0, #20]
 8003120:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003124:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003126:	694d      	ldr	r5, [r1, #20]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	68c2      	ldr	r2, [r0, #12]
 800312c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003130:	0052      	lsls	r2, r2, #1
 8003132:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003136:	690e      	ldr	r6, [r1, #16]
 8003138:	2e04      	cmp	r6, #4
 800313a:	d079      	beq.n	8003230 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800313c:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800313e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8003142:	4dae      	ldr	r5, [pc, #696]	; (80033fc <HAL_ADC_ConfigChannel+0x394>)
 8003144:	403d      	ands	r5, r7
 8003146:	680f      	ldr	r7, [r1, #0]
 8003148:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 800314c:	433a      	orrs	r2, r7
 800314e:	4315      	orrs	r5, r2
 8003150:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003154:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	690e      	ldr	r6, [r1, #16]
 800315c:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800315e:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003160:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8003164:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8003168:	4328      	orrs	r0, r5
 800316a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	690d      	ldr	r5, [r1, #16]
 8003172:	7f08      	ldrb	r0, [r1, #28]
 8003174:	2801      	cmp	r0, #1
 8003176:	d058      	beq.n	800322a <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003178:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 800317a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800317e:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8003182:	4304      	orrs	r4, r0
 8003184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003188:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800318a:	6890      	ldr	r0, [r2, #8]
 800318c:	f010 0f01 	tst.w	r0, #1
 8003190:	d112      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003192:	6808      	ldr	r0, [r1, #0]
 8003194:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003196:	4c9a      	ldr	r4, [pc, #616]	; (8003400 <HAL_ADC_ConfigChannel+0x398>)
 8003198:	42a5      	cmp	r5, r4
 800319a:	f000 80b1 	beq.w	8003300 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 800319e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80031a2:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80031a6:	ea24 0000 	bic.w	r0, r4, r0
 80031aa:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031ae:	68c8      	ldr	r0, [r1, #12]
 80031b0:	4a93      	ldr	r2, [pc, #588]	; (8003400 <HAL_ADC_ConfigChannel+0x398>)
 80031b2:	4290      	cmp	r0, r2
 80031b4:	f000 80ac 	beq.w	8003310 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031b8:	680a      	ldr	r2, [r1, #0]
 80031ba:	4992      	ldr	r1, [pc, #584]	; (8003404 <HAL_ADC_ConfigChannel+0x39c>)
 80031bc:	420a      	tst	r2, r1
 80031be:	f000 81da 	beq.w	8003576 <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80031c8:	f000 8173 	beq.w	80034b2 <HAL_ADC_ConfigChannel+0x44a>
 80031cc:	488e      	ldr	r0, [pc, #568]	; (8003408 <HAL_ADC_ConfigChannel+0x3a0>)
 80031ce:	4281      	cmp	r1, r0
 80031d0:	f000 816c 	beq.w	80034ac <HAL_ADC_ConfigChannel+0x444>
 80031d4:	488d      	ldr	r0, [pc, #564]	; (800340c <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80031d6:	6880      	ldr	r0, [r0, #8]
 80031d8:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031dc:	4d8c      	ldr	r5, [pc, #560]	; (8003410 <HAL_ADC_ConfigChannel+0x3a8>)
 80031de:	42aa      	cmp	r2, r5
 80031e0:	f000 8169 	beq.w	80034b6 <HAL_ADC_ConfigChannel+0x44e>
 80031e4:	4d8b      	ldr	r5, [pc, #556]	; (8003414 <HAL_ADC_ConfigChannel+0x3ac>)
 80031e6:	42aa      	cmp	r2, r5
 80031e8:	f000 8165 	beq.w	80034b6 <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ec:	4d8a      	ldr	r5, [pc, #552]	; (8003418 <HAL_ADC_ConfigChannel+0x3b0>)
 80031ee:	42aa      	cmp	r2, r5
 80031f0:	f000 8194 	beq.w	800351c <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031f4:	4d89      	ldr	r5, [pc, #548]	; (800341c <HAL_ADC_ConfigChannel+0x3b4>)
 80031f6:	42aa      	cmp	r2, r5
 80031f8:	f000 81a8 	beq.w	800354c <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fc:	2000      	movs	r0, #0
 80031fe:	e74a      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003200:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003202:	3014      	adds	r0, #20
 8003204:	0e6a      	lsrs	r2, r5, #25
 8003206:	0092      	lsls	r2, r2, #2
 8003208:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 800320c:	5886      	ldr	r6, [r0, r2]
 800320e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8003212:	2707      	movs	r7, #7
 8003214:	fa07 f505 	lsl.w	r5, r7, r5
 8003218:	ea26 0505 	bic.w	r5, r6, r5
 800321c:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800321e:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003220:	6942      	ldr	r2, [r0, #20]
 8003222:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003226:	6142      	str	r2, [r0, #20]
}
 8003228:	e77d      	b.n	8003126 <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800322a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800322e:	e7a3      	b.n	8003178 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003230:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003232:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003234:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003238:	680a      	ldr	r2, [r1, #0]
 800323a:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800323e:	bb85      	cbnz	r5, 80032a2 <HAL_ADC_ConfigChannel+0x23a>
 8003240:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003244:	4294      	cmp	r4, r2
 8003246:	d034      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003248:	681c      	ldr	r4, [r3, #0]
 800324a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800324c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800324e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003252:	680a      	ldr	r2, [r1, #0]
 8003254:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003258:	bb85      	cbnz	r5, 80032bc <HAL_ADC_ConfigChannel+0x254>
 800325a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800325e:	4290      	cmp	r0, r2
 8003260:	d034      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003262:	681c      	ldr	r4, [r3, #0]
 8003264:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003266:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003268:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800326c:	680a      	ldr	r2, [r1, #0]
 800326e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003272:	bb85      	cbnz	r5, 80032d6 <HAL_ADC_ConfigChannel+0x26e>
 8003274:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003278:	4290      	cmp	r0, r2
 800327a:	d034      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800327c:	681c      	ldr	r4, [r3, #0]
 800327e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003280:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003282:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003286:	680a      	ldr	r2, [r1, #0]
 8003288:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800328c:	bb85      	cbnz	r5, 80032f0 <HAL_ADC_ConfigChannel+0x288>
 800328e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003292:	4290      	cmp	r0, r2
 8003294:	f47f af78 	bne.w	8003188 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8003298:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800329a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800329e:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 80032a0:	e772      	b.n	8003188 <HAL_ADC_ConfigChannel+0x120>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032a6:	b112      	cbz	r2, 80032ae <HAL_ADC_ConfigChannel+0x246>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80032a8:	fab2 f282 	clz	r2, r2
 80032ac:	e7ca      	b.n	8003244 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 80032ae:	2220      	movs	r2, #32
 80032b0:	e7c8      	b.n	8003244 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 80032b2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80032b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032b8:	6602      	str	r2, [r0, #96]	; 0x60
}
 80032ba:	e7c5      	b.n	8003248 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80032c0:	b112      	cbz	r2, 80032c8 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	e7ca      	b.n	800325e <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 80032c8:	2220      	movs	r2, #32
 80032ca:	e7c8      	b.n	800325e <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 80032cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032d2:	6662      	str	r2, [r4, #100]	; 0x64
}
 80032d4:	e7c5      	b.n	8003262 <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80032da:	b112      	cbz	r2, 80032e2 <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 80032dc:	fab2 f282 	clz	r2, r2
 80032e0:	e7ca      	b.n	8003278 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 80032e2:	2220      	movs	r2, #32
 80032e4:	e7c8      	b.n	8003278 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 80032e6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80032e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ec:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80032ee:	e7c5      	b.n	800327c <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80032f4:	b112      	cbz	r2, 80032fc <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	e7ca      	b.n	8003292 <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 80032fc:	2220      	movs	r2, #32
 80032fe:	e7c8      	b.n	8003292 <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8003300:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003304:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003308:	4320      	orrs	r0, r4
 800330a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 800330e:	e74e      	b.n	80031ae <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003310:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003312:	680a      	ldr	r2, [r1, #0]
 8003314:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003318:	2d00      	cmp	r5, #0
 800331a:	d138      	bne.n	800338e <HAL_ADC_ConfigChannel+0x326>
 800331c:	0e90      	lsrs	r0, r2, #26
 800331e:	3001      	adds	r0, #1
 8003320:	f000 001f 	and.w	r0, r0, #31
 8003324:	2809      	cmp	r0, #9
 8003326:	bf8c      	ite	hi
 8003328:	2000      	movhi	r0, #0
 800332a:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332c:	2800      	cmp	r0, #0
 800332e:	d077      	beq.n	8003420 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003330:	2d00      	cmp	r5, #0
 8003332:	d13b      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x344>
 8003334:	0e90      	lsrs	r0, r2, #26
 8003336:	3001      	adds	r0, #1
 8003338:	0680      	lsls	r0, r0, #26
 800333a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800333e:	2d00      	cmp	r5, #0
 8003340:	d140      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x35c>
 8003342:	0e96      	lsrs	r6, r2, #26
 8003344:	3601      	adds	r6, #1
 8003346:	f006 071f 	and.w	r7, r6, #31
 800334a:	2601      	movs	r6, #1
 800334c:	40be      	lsls	r6, r7
 800334e:	4330      	orrs	r0, r6
 8003350:	2d00      	cmp	r5, #0
 8003352:	d145      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x378>
 8003354:	0e92      	lsrs	r2, r2, #26
 8003356:	3201      	adds	r2, #1
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003360:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003362:	4302      	orrs	r2, r0
 8003364:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003366:	f104 0614 	add.w	r6, r4, #20
 800336a:	0e55      	lsrs	r5, r2, #25
 800336c:	00ad      	lsls	r5, r5, #2
 800336e:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003372:	5974      	ldr	r4, [r6, r5]
 8003374:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003378:	f04f 0c07 	mov.w	ip, #7
 800337c:	fa0c fc02 	lsl.w	ip, ip, r2
 8003380:	ea24 0c0c 	bic.w	ip, r4, ip
 8003384:	4090      	lsls	r0, r2
 8003386:	ea4c 0000 	orr.w	r0, ip, r0
 800338a:	5170      	str	r0, [r6, r5]
}
 800338c:	e714      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003392:	b148      	cbz	r0, 80033a8 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8003394:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003398:	3001      	adds	r0, #1
 800339a:	f000 001f 	and.w	r0, r0, #31
 800339e:	2809      	cmp	r0, #9
 80033a0:	bf8c      	ite	hi
 80033a2:	2000      	movhi	r0, #0
 80033a4:	2001      	movls	r0, #1
 80033a6:	e7c1      	b.n	800332c <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 80033a8:	2020      	movs	r0, #32
 80033aa:	e7f5      	b.n	8003398 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80033b0:	b130      	cbz	r0, 80033c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80033b2:	fab0 f080 	clz	r0, r0
 80033b6:	3001      	adds	r0, #1
 80033b8:	0680      	lsls	r0, r0, #26
 80033ba:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80033be:	e7be      	b.n	800333e <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 80033c0:	2020      	movs	r0, #32
 80033c2:	e7f8      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80033c8:	b146      	cbz	r6, 80033dc <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 80033ca:	fab6 f686 	clz	r6, r6
 80033ce:	3601      	adds	r6, #1
 80033d0:	f006 061f 	and.w	r6, r6, #31
 80033d4:	2701      	movs	r7, #1
 80033d6:	fa07 f606 	lsl.w	r6, r7, r6
 80033da:	e7b8      	b.n	800334e <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 80033dc:	2620      	movs	r6, #32
 80033de:	e7f6      	b.n	80033ce <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80033e4:	b142      	cbz	r2, 80033f8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80033e6:	fab2 f282 	clz	r2, r2
 80033ea:	3201      	adds	r2, #1
 80033ec:	f002 021f 	and.w	r2, r2, #31
 80033f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80033f4:	0512      	lsls	r2, r2, #20
 80033f6:	e7b4      	b.n	8003362 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80033f8:	2220      	movs	r2, #32
 80033fa:	e7f6      	b.n	80033ea <HAL_ADC_ConfigChannel+0x382>
 80033fc:	03fff000 	.word	0x03fff000
 8003400:	407f0000 	.word	0x407f0000
 8003404:	80080000 	.word	0x80080000
 8003408:	50000100 	.word	0x50000100
 800340c:	50000700 	.word	0x50000700
 8003410:	c3210000 	.word	0xc3210000
 8003414:	90c00010 	.word	0x90c00010
 8003418:	c7520000 	.word	0xc7520000
 800341c:	cb840000 	.word	0xcb840000
 8003420:	b9cd      	cbnz	r5, 8003456 <HAL_ADC_ConfigChannel+0x3ee>
 8003422:	0e90      	lsrs	r0, r2, #26
 8003424:	3001      	adds	r0, #1
 8003426:	0680      	lsls	r0, r0, #26
 8003428:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800342c:	b9fd      	cbnz	r5, 800346e <HAL_ADC_ConfigChannel+0x406>
 800342e:	0e96      	lsrs	r6, r2, #26
 8003430:	3601      	adds	r6, #1
 8003432:	f006 071f 	and.w	r7, r6, #31
 8003436:	2601      	movs	r6, #1
 8003438:	40be      	lsls	r6, r7
 800343a:	4330      	orrs	r0, r6
 800343c:	bb2d      	cbnz	r5, 800348a <HAL_ADC_ConfigChannel+0x422>
 800343e:	0e92      	lsrs	r2, r2, #26
 8003440:	3201      	adds	r2, #1
 8003442:	f002 021f 	and.w	r2, r2, #31
 8003446:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800344a:	3a1e      	subs	r2, #30
 800344c:	0512      	lsls	r2, r2, #20
 800344e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003452:	4302      	orrs	r2, r0
 8003454:	e786      	b.n	8003364 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800345a:	b130      	cbz	r0, 800346a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800345c:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003460:	3001      	adds	r0, #1
 8003462:	0680      	lsls	r0, r0, #26
 8003464:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003468:	e7e0      	b.n	800342c <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 800346a:	2020      	movs	r0, #32
 800346c:	e7f8      	b.n	8003460 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003472:	b146      	cbz	r6, 8003486 <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 8003474:	fab6 f686 	clz	r6, r6
 8003478:	3601      	adds	r6, #1
 800347a:	f006 061f 	and.w	r6, r6, #31
 800347e:	2701      	movs	r7, #1
 8003480:	fa07 f606 	lsl.w	r6, r7, r6
 8003484:	e7d9      	b.n	800343a <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 8003486:	2620      	movs	r6, #32
 8003488:	e7f6      	b.n	8003478 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800348e:	b15a      	cbz	r2, 80034a8 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	3201      	adds	r2, #1
 8003496:	f002 021f 	and.w	r2, r2, #31
 800349a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800349e:	3a1e      	subs	r2, #30
 80034a0:	0512      	lsls	r2, r2, #20
 80034a2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80034a6:	e7d4      	b.n	8003452 <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 80034a8:	2220      	movs	r2, #32
 80034aa:	e7f3      	b.n	8003494 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ac:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80034b0:	e691      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x16e>
 80034b2:	4835      	ldr	r0, [pc, #212]	; (8003588 <HAL_ADC_ConfigChannel+0x520>)
 80034b4:	e68f      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034b6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80034ba:	f47f ae97 	bne.w	80031ec <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034be:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x466>
 80034c4:	4a31      	ldr	r2, [pc, #196]	; (800358c <HAL_ADC_ConfigChannel+0x524>)
 80034c6:	4291      	cmp	r1, r2
 80034c8:	d001      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ca:	2000      	movs	r0, #0
 80034cc:	e5e3      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ce:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80034d2:	d019      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x4a0>
 80034d4:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <HAL_ADC_ConfigChannel+0x528>)
 80034d6:	4291      	cmp	r1, r2
 80034d8:	d014      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x49c>
 80034da:	492e      	ldr	r1, [pc, #184]	; (8003594 <HAL_ADC_ConfigChannel+0x52c>)
 80034dc:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034e0:	688a      	ldr	r2, [r1, #8]
 80034e2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80034e6:	4314      	orrs	r4, r2
 80034e8:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ea:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <HAL_ADC_ConfigChannel+0x530>)
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	0992      	lsrs	r2, r2, #6
 80034f0:	492a      	ldr	r1, [pc, #168]	; (800359c <HAL_ADC_ConfigChannel+0x534>)
 80034f2:	fba1 1202 	umull	r1, r2, r1, r2
 80034f6:	0992      	lsrs	r2, r2, #6
 80034f8:	3201      	adds	r2, #1
 80034fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034fe:	0092      	lsls	r2, r2, #2
 8003500:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003502:	e006      	b.n	8003512 <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003504:	4920      	ldr	r1, [pc, #128]	; (8003588 <HAL_ADC_ConfigChannel+0x520>)
 8003506:	e7e9      	b.n	80034dc <HAL_ADC_ConfigChannel+0x474>
 8003508:	491f      	ldr	r1, [pc, #124]	; (8003588 <HAL_ADC_ConfigChannel+0x520>)
 800350a:	e7e7      	b.n	80034dc <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 800350c:	9a01      	ldr	r2, [sp, #4]
 800350e:	3a01      	subs	r2, #1
 8003510:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003512:	9a01      	ldr	r2, [sp, #4]
 8003514:	2a00      	cmp	r2, #0
 8003516:	d1f9      	bne.n	800350c <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003518:	2000      	movs	r0, #0
 800351a:	e5bc      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800351c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003520:	f47f ae68 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003524:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003528:	d00e      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x4e0>
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_ADC_ConfigChannel+0x528>)
 800352c:	4291      	cmp	r1, r2
 800352e:	d009      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x4dc>
 8003530:	4918      	ldr	r1, [pc, #96]	; (8003594 <HAL_ADC_ConfigChannel+0x52c>)
 8003532:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8003536:	688a      	ldr	r2, [r1, #8]
 8003538:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800353c:	4314      	orrs	r4, r2
 800353e:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003540:	2000      	movs	r0, #0
}
 8003542:	e5a8      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003544:	4910      	ldr	r1, [pc, #64]	; (8003588 <HAL_ADC_ConfigChannel+0x520>)
 8003546:	e7f4      	b.n	8003532 <HAL_ADC_ConfigChannel+0x4ca>
 8003548:	490f      	ldr	r1, [pc, #60]	; (8003588 <HAL_ADC_ConfigChannel+0x520>)
 800354a:	e7f2      	b.n	8003532 <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800354c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003550:	d113      	bne.n	800357a <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003552:	4a0f      	ldr	r2, [pc, #60]	; (8003590 <HAL_ADC_ConfigChannel+0x528>)
 8003554:	4291      	cmp	r1, r2
 8003556:	d012      	beq.n	800357e <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003558:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800355c:	d009      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x50a>
 800355e:	480d      	ldr	r0, [pc, #52]	; (8003594 <HAL_ADC_ConfigChannel+0x52c>)
 8003560:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003564:	6881      	ldr	r1, [r0, #8]
 8003566:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800356a:	430a      	orrs	r2, r1
 800356c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356e:	2000      	movs	r0, #0
}
 8003570:	e591      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <HAL_ADC_ConfigChannel+0x520>)
 8003574:	e7f4      	b.n	8003560 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003576:	2000      	movs	r0, #0
 8003578:	e58d      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
 800357a:	2000      	movs	r0, #0
 800357c:	e58b      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
 800357e:	2000      	movs	r0, #0
 8003580:	e589      	b.n	8003096 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003582:	2002      	movs	r0, #2
 8003584:	e58a      	b.n	800309c <HAL_ADC_ConfigChannel+0x34>
 8003586:	bf00      	nop
 8003588:	50000300 	.word	0x50000300
 800358c:	50000600 	.word	0x50000600
 8003590:	50000100 	.word	0x50000100
 8003594:	50000700 	.word	0x50000700
 8003598:	20000000 	.word	0x20000000
 800359c:	053e2d63 	.word	0x053e2d63

080035a0 <ADC_Enable>:
{
 80035a0:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	f012 0f01 	tst.w	r2, #1
 80035aa:	d140      	bne.n	800362e <ADC_Enable+0x8e>
 80035ac:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	4a20      	ldr	r2, [pc, #128]	; (8003634 <ADC_Enable+0x94>)
 80035b2:	4211      	tst	r1, r2
 80035b4:	d009      	beq.n	80035ca <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80035b8:	f043 0310 	orr.w	r3, r3, #16
 80035bc:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035be:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80035c6:	2001      	movs	r0, #1
 80035c8:	e032      	b.n	8003630 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80035da:	f7ff fa09 	bl	80029f0 <HAL_GetTick>
 80035de:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	f012 0f01 	tst.w	r2, #1
 80035e8:	d11f      	bne.n	800362a <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	f012 0f01 	tst.w	r2, #1
 80035f0:	d107      	bne.n	8003602 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003602:	f7ff f9f5 	bl	80029f0 <HAL_GetTick>
 8003606:	1b43      	subs	r3, r0, r5
 8003608:	2b02      	cmp	r3, #2
 800360a:	d9e9      	bls.n	80035e0 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f013 0f01 	tst.w	r3, #1
 8003614:	d1e4      	bne.n	80035e0 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003616:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003618:	f043 0310 	orr.w	r3, r3, #16
 800361c:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8003626:	2001      	movs	r0, #1
 8003628:	e002      	b.n	8003630 <ADC_Enable+0x90>
  return HAL_OK;
 800362a:	2000      	movs	r0, #0
 800362c:	e000      	b.n	8003630 <ADC_Enable+0x90>
 800362e:	2000      	movs	r0, #0
}
 8003630:	bd38      	pop	{r3, r4, r5, pc}
 8003632:	bf00      	nop
 8003634:	8000003f 	.word	0x8000003f

08003638 <HAL_ADC_Start_DMA>:
{
 8003638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	460f      	mov	r7, r1
 8003640:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003642:	6800      	ldr	r0, [r0, #0]
 8003644:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003648:	d021      	beq.n	800368e <HAL_ADC_Start_DMA+0x56>
 800364a:	4b42      	ldr	r3, [pc, #264]	; (8003754 <HAL_ADC_Start_DMA+0x11c>)
 800364c:	4298      	cmp	r0, r3
 800364e:	d01b      	beq.n	8003688 <HAL_ADC_Start_DMA+0x50>
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003652:	689e      	ldr	r6, [r3, #8]
 8003654:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003658:	6885      	ldr	r5, [r0, #8]
 800365a:	f015 0f04 	tst.w	r5, #4
 800365e:	d174      	bne.n	800374a <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8003660:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8003664:	2b01      	cmp	r3, #1
 8003666:	d073      	beq.n	8003750 <HAL_ADC_Start_DMA+0x118>
 8003668:	2301      	movs	r3, #1
 800366a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_ADC_Start_DMA+0x124>)
 8003670:	4298      	cmp	r0, r3
 8003672:	d00e      	beq.n	8003692 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003674:	b16e      	cbz	r6, 8003692 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003676:	2e05      	cmp	r6, #5
 8003678:	d00b      	beq.n	8003692 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800367a:	2e09      	cmp	r6, #9
 800367c:	d009      	beq.n	8003692 <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 800367e:	2300      	movs	r3, #0
 8003680:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e061      	b.n	800374c <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003688:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800368c:	e7e1      	b.n	8003652 <HAL_ADC_Start_DMA+0x1a>
 800368e:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_ADC_Start_DMA+0x128>)
 8003690:	e7df      	b.n	8003652 <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8003692:	4620      	mov	r0, r4
 8003694:	f7ff ff84 	bl	80035a0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003698:	2800      	cmp	r0, #0
 800369a:	d152      	bne.n	8003742 <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 800369c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800369e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_ADC_Start_DMA+0x11c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d040      	beq.n	8003736 <HAL_ADC_Start_DMA+0xfe>
 80036b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d039      	beq.n	8003730 <HAL_ADC_Start_DMA+0xf8>
 80036bc:	461a      	mov	r2, r3
 80036be:	4293      	cmp	r3, r2
 80036c0:	d000      	beq.n	80036c4 <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036c2:	b91e      	cbnz	r6, 80036cc <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036ca:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80036d2:	d033      	beq.n	800373c <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80036d6:	f023 0306 	bic.w	r3, r3, #6
 80036da:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_ADC_Start_DMA+0x12c>)
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036e4:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_ADC_Start_DMA+0x130>)
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036ea:	4a20      	ldr	r2, [pc, #128]	; (800376c <HAL_ADC_Start_DMA+0x134>)
 80036ec:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	221c      	movs	r2, #28
 80036f2:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80036f4:	2300      	movs	r3, #0
 80036f6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036fa:	6822      	ldr	r2, [r4, #0]
 80036fc:	6853      	ldr	r3, [r2, #4]
 80036fe:	f043 0310 	orr.w	r3, r3, #16
 8003702:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	68d3      	ldr	r3, [r2, #12]
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	4643      	mov	r3, r8
 8003712:	463a      	mov	r2, r7
 8003714:	3140      	adds	r1, #64	; 0x40
 8003716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003718:	f000 ff9a 	bl	8004650 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800371c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800371e:	6893      	ldr	r3, [r2, #8]
 8003720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6093      	str	r3, [r2, #8]
}
 800372e:	e00d      	b.n	800374c <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003730:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003734:	e7c3      	b.n	80036be <HAL_ADC_Start_DMA+0x86>
 8003736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800373a:	e7c0      	b.n	80036be <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 800373c:	2300      	movs	r3, #0
 800373e:	6623      	str	r3, [r4, #96]	; 0x60
 8003740:	e7cc      	b.n	80036dc <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 8003742:	2300      	movs	r3, #0
 8003744:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003748:	e000      	b.n	800374c <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 800374a:	2002      	movs	r0, #2
}
 800374c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003750:	2002      	movs	r0, #2
 8003752:	e7fb      	b.n	800374c <HAL_ADC_Start_DMA+0x114>
 8003754:	50000100 	.word	0x50000100
 8003758:	50000700 	.word	0x50000700
 800375c:	50000600 	.word	0x50000600
 8003760:	50000300 	.word	0x50000300
 8003764:	08002fc5 	.word	0x08002fc5
 8003768:	08002cd1 	.word	0x08002cd1
 800376c:	0800304d 	.word	0x0800304d

08003770 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003774:	6803      	ldr	r3, [r0, #0]
 8003776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800377a:	d073      	beq.n	8003864 <HAL_ADCEx_InjectedStart_IT+0xf4>
 800377c:	4a55      	ldr	r2, [pc, #340]	; (80038d4 <HAL_ADCEx_InjectedStart_IT+0x164>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d06d      	beq.n	800385e <HAL_ADCEx_InjectedStart_IT+0xee>
 8003782:	4a55      	ldr	r2, [pc, #340]	; (80038d8 <HAL_ADCEx_InjectedStart_IT+0x168>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003784:	6895      	ldr	r5, [r2, #8]
 8003786:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	f012 0f08 	tst.w	r2, #8
 8003790:	f040 809b 	bne.w	80038ca <HAL_ADCEx_InjectedStart_IT+0x15a>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003794:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003798:	f413 7fc0 	tst.w	r3, #384	; 0x180
 800379c:	d101      	bne.n	80037a2 <HAL_ADCEx_InjectedStart_IT+0x32>
        && (tmp_config_injected_queue == 0UL)
 800379e:	2a00      	cmp	r2, #0
 80037a0:	da62      	bge.n	8003868 <HAL_ADCEx_InjectedStart_IT+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80037a2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	f000 8091 	beq.w	80038ce <HAL_ADCEx_InjectedStart_IT+0x15e>
 80037ac:	2301      	movs	r3, #1
 80037ae:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037b2:	4620      	mov	r0, r4
 80037b4:	f7ff fef4 	bl	80035a0 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f040 8082 	bne.w	80038c2 <HAL_ADCEx_InjectedStart_IT+0x152>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80037be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037c4:	d056      	beq.n	8003874 <HAL_ADCEx_InjectedStart_IT+0x104>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80037c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037c8:	f023 0308 	bic.w	r3, r3, #8
 80037cc:	6623      	str	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80037ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037dc:	65e3      	str	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	4a3c      	ldr	r2, [pc, #240]	; (80038d4 <HAL_ADCEx_InjectedStart_IT+0x164>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04c      	beq.n	8003880 <HAL_ADCEx_InjectedStart_IT+0x110>
 80037e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d045      	beq.n	800387a <HAL_ADCEx_InjectedStart_IT+0x10a>
 80037ee:	461a      	mov	r2, r3
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d000      	beq.n	80037f6 <HAL_ADCEx_InjectedStart_IT+0x86>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f4:	b91d      	cbnz	r5, 80037fe <HAL_ADCEx_InjectedStart_IT+0x8e>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80037f8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80037fc:	65e2      	str	r2, [r4, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80037fe:	2260      	movs	r2, #96	; 0x60
 8003800:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003802:	2300      	movs	r3, #0
 8003804:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8003810:	d003      	beq.n	800381a <HAL_ADCEx_InjectedStart_IT+0xaa>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003818:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800381a:	69a3      	ldr	r3, [r4, #24]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d032      	beq.n	8003886 <HAL_ADCEx_InjectedStart_IT+0x116>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	6853      	ldr	r3, [r2, #4]
 8003824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003828:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	6853      	ldr	r3, [r2, #4]
 800382e:	f043 0320 	orr.w	r3, r3, #32
 8003832:	6053      	str	r3, [r2, #4]
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	4a27      	ldr	r2, [pc, #156]	; (80038d4 <HAL_ADCEx_InjectedStart_IT+0x164>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d032      	beq.n	80038a2 <HAL_ADCEx_InjectedStart_IT+0x132>
 800383c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003840:	4293      	cmp	r3, r2
 8003842:	d02b      	beq.n	800389c <HAL_ADCEx_InjectedStart_IT+0x12c>
 8003844:	461a      	mov	r2, r3
 8003846:	4293      	cmp	r3, r2
 8003848:	d02e      	beq.n	80038a8 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800384a:	b36d      	cbz	r5, 80038a8 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800384c:	2d06      	cmp	r5, #6
 800384e:	d02b      	beq.n	80038a8 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003850:	2d07      	cmp	r5, #7
 8003852:	d029      	beq.n	80038a8 <HAL_ADCEx_InjectedStart_IT+0x138>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800385a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800385c:	e036      	b.n	80038cc <HAL_ADCEx_InjectedStart_IT+0x15c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800385e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003862:	e78f      	b.n	8003784 <HAL_ADCEx_InjectedStart_IT+0x14>
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_ADCEx_InjectedStart_IT+0x16c>)
 8003866:	e78d      	b.n	8003784 <HAL_ADCEx_InjectedStart_IT+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003868:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800386a:	f043 0320 	orr.w	r3, r3, #32
 800386e:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8003870:	2001      	movs	r0, #1
 8003872:	e02b      	b.n	80038cc <HAL_ADCEx_InjectedStart_IT+0x15c>
        ADC_CLEAR_ERRORCODE(hadc);
 8003874:	2300      	movs	r3, #0
 8003876:	6623      	str	r3, [r4, #96]	; 0x60
 8003878:	e7a9      	b.n	80037ce <HAL_ADCEx_InjectedStart_IT+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800387a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800387e:	e7b7      	b.n	80037f0 <HAL_ADCEx_InjectedStart_IT+0x80>
 8003880:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003884:	e7b4      	b.n	80037f0 <HAL_ADCEx_InjectedStart_IT+0x80>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003886:	6822      	ldr	r2, [r4, #0]
 8003888:	6853      	ldr	r3, [r2, #4]
 800388a:	f023 0320 	bic.w	r3, r3, #32
 800388e:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	6853      	ldr	r3, [r2, #4]
 8003894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003898:	6053      	str	r3, [r2, #4]
          break;
 800389a:	e7cb      	b.n	8003834 <HAL_ADCEx_InjectedStart_IT+0xc4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800389c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80038a0:	e7d1      	b.n	8003846 <HAL_ADCEx_InjectedStart_IT+0xd6>
 80038a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80038a6:	e7ce      	b.n	8003846 <HAL_ADCEx_InjectedStart_IT+0xd6>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80038a8:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80038aa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80038ae:	d10d      	bne.n	80038cc <HAL_ADCEx_InjectedStart_IT+0x15c>
  MODIFY_REG(ADCx->CR,
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038b6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	e004      	b.n	80038cc <HAL_ADCEx_InjectedStart_IT+0x15c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038c2:	2300      	movs	r3, #0
 80038c4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80038c8:	e000      	b.n	80038cc <HAL_ADCEx_InjectedStart_IT+0x15c>
    return HAL_BUSY;
 80038ca:	2002      	movs	r0, #2
  }
}
 80038cc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80038ce:	2002      	movs	r0, #2
 80038d0:	e7fc      	b.n	80038cc <HAL_ADCEx_InjectedStart_IT+0x15c>
 80038d2:	bf00      	nop
 80038d4:	50000100 	.word	0x50000100
 80038d8:	50000700 	.word	0x50000700
 80038dc:	50000300 	.word	0x50000300

080038e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038e0:	4770      	bx	lr

080038e2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038e2:	4770      	bx	lr

080038e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038e4:	4770      	bx	lr

080038e6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80038ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ee:	b083      	sub	sp, #12
 80038f0:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80038f2:	2200      	movs	r2, #0
 80038f4:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
  assert_param(IS_ADC_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038f6:	6940      	ldr	r0, [r0, #20]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80038fc:	2a01      	cmp	r2, #1
 80038fe:	f000 831f 	beq.w	8003f40 <HAL_ADCEx_InjectedConfigChannel+0x654>
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003908:	b1a8      	cbz	r0, 8003936 <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800390a:	6a0a      	ldr	r2, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800390c:	2a01      	cmp	r2, #1
 800390e:	d012      	beq.n	8003936 <HAL_ADCEx_InjectedConfigChannel+0x4a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003910:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003912:	2800      	cmp	r0, #0
 8003914:	f040 80cd 	bne.w	8003ab2 <HAL_ADCEx_InjectedConfigChannel+0x1c6>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003918:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800391a:	2200      	movs	r2, #0
 800391c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800391e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003920:	2c00      	cmp	r4, #0
 8003922:	f000 80c3 	beq.w	8003aac <HAL_ADCEx_InjectedConfigChannel+0x1c0>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003926:	6a0a      	ldr	r2, [r1, #32]
 8003928:	3a01      	subs	r2, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800392a:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 800392e:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003930:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003932:	4314      	orrs	r4, r2
 8003934:	e0be      	b.n	8003ab4 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003936:	684a      	ldr	r2, [r1, #4]
 8003938:	2a09      	cmp	r2, #9
 800393a:	f000 8097 	beq.w	8003a6c <HAL_ADCEx_InjectedConfigChannel+0x180>
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800393e:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003940:	6890      	ldr	r0, [r2, #8]
 8003942:	f010 0f08 	tst.w	r0, #8
 8003946:	d110      	bne.n	800396a <HAL_ADCEx_InjectedConfigChannel+0x7e>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003948:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 800394c:	2800      	cmp	r0, #0
 800394e:	f040 80d0 	bne.w	8003af2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003952:	68d0      	ldr	r0, [r2, #12]
 8003954:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003958:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800395c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003960:	0524      	lsls	r4, r4, #20
 8003962:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8003966:	4320      	orrs	r0, r4
 8003968:	60d0      	str	r0, [r2, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800396a:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800396c:	68a2      	ldr	r2, [r4, #8]
 800396e:	f012 0204 	ands.w	r2, r2, #4
 8003972:	d000      	beq.n	8003976 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8003974:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003976:	68a5      	ldr	r5, [r4, #8]
 8003978:	f015 0508 	ands.w	r5, r5, #8
 800397c:	d000      	beq.n	8003980 <HAL_ADCEx_InjectedConfigChannel+0x94>
 800397e:	2501      	movs	r5, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003980:	2a00      	cmp	r2, #0
 8003982:	f040 8161 	bne.w	8003c48 <HAL_ADCEx_InjectedConfigChannel+0x35c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003986:	2d00      	cmp	r5, #0
 8003988:	f040 819b 	bne.w	8003cc2 <HAL_ADCEx_InjectedConfigChannel+0x3d6>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800398c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800398e:	b11a      	cbz	r2, 8003998 <HAL_ADCEx_InjectedConfigChannel+0xac>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003990:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003992:	2a00      	cmp	r2, #0
 8003994:	f040 80bc 	bne.w	8003b10 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003998:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 800399c:	2a01      	cmp	r2, #1
 800399e:	f000 80b1 	beq.w	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80039a2:	68e2      	ldr	r2, [r4, #12]
 80039a4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80039a8:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039aa:	2000      	movs	r0, #0
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80039ac:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80039b0:	2a01      	cmp	r2, #1
 80039b2:	f000 80bc 	beq.w	8003b2e <HAL_ADCEx_InjectedConfigChannel+0x242>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80039b6:	681c      	ldr	r4, [r3, #0]
 80039b8:	6922      	ldr	r2, [r4, #16]
 80039ba:	f022 0202 	bic.w	r2, r2, #2
 80039be:	6122      	str	r2, [r4, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039c0:	688a      	ldr	r2, [r1, #8]
 80039c2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80039c6:	f000 80be 	beq.w	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x25a>
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80039ca:	681c      	ldr	r4, [r3, #0]
 80039cc:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039ce:	f104 0c14 	add.w	ip, r4, #20
 80039d2:	0e77      	lsrs	r7, r6, #25
 80039d4:	00bf      	lsls	r7, r7, #2
 80039d6:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 80039da:	f85c 4007 	ldr.w	r4, [ip, r7]
 80039de:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80039e2:	f04f 0e07 	mov.w	lr, #7
 80039e6:	fa0e fe06 	lsl.w	lr, lr, r6
 80039ea:	ea24 040e 	bic.w	r4, r4, lr
 80039ee:	40b2      	lsls	r2, r6
 80039f0:	4322      	orrs	r2, r4
 80039f2:	f84c 2007 	str.w	r2, [ip, r7]

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80039f6:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039f8:	6962      	ldr	r2, [r4, #20]
 80039fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039fe:	6162      	str	r2, [r4, #20]

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003a00:	694c      	ldr	r4, [r1, #20]
 8003a02:	681e      	ldr	r6, [r3, #0]
 8003a04:	68f2      	ldr	r2, [r6, #12]
 8003a06:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a0a:	0052      	lsls	r2, r2, #1
 8003a0c:	fa04 f202 	lsl.w	r2, r4, r2

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003a10:	f8d1 c010 	ldr.w	ip, [r1, #16]
 8003a14:	f1bc 0f04 	cmp.w	ip, #4
 8003a18:	f000 80af 	beq.w	8003b7a <HAL_ADCEx_InjectedConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1c:	3660      	adds	r6, #96	; 0x60
  MODIFY_REG(*preg,
 8003a1e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8003a22:	4fa9      	ldr	r7, [pc, #676]	; (8003cc8 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8003a24:	4027      	ands	r7, r4
 8003a26:	680c      	ldr	r4, [r1, #0]
 8003a28:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003a2c:	4322      	orrs	r2, r4
 8003a2e:	4317      	orrs	r7, r2
 8003a30:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8003a34:	f846 702c 	str.w	r7, [r6, ip, lsl #2]
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	690f      	ldr	r7, [r1, #16]
 8003a3c:	698c      	ldr	r4, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3e:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003a40:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8003a44:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8003a48:	4334      	orrs	r4, r6
 8003a4a:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	690e      	ldr	r6, [r1, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a52:	7f0c      	ldrb	r4, [r1, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003a54:	2c01      	cmp	r4, #1
 8003a56:	f000 808d 	beq.w	8003b74 <HAL_ADCEx_InjectedConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5a:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003a5c:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8003a60:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003a64:	4325      	orrs	r5, r4
 8003a66:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
}
 8003a6a:	e0ee      	b.n	8003c4a <HAL_ADCEx_InjectedConfigChannel+0x35e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003a6c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003a6e:	b1bc      	cbz	r4, 8003aa0 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003a70:	6808      	ldr	r0, [r1, #0]
 8003a72:	0e82      	lsrs	r2, r0, #26
 8003a74:	0252      	lsls	r2, r2, #9
 8003a76:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003a7a:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 8003a7e:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003a80:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003a82:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003a88:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8003a8c:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003a90:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003a94:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003a98:	4310      	orrs	r0, r2
 8003a9a:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003a9c:	665a      	str	r2, [r3, #100]	; 0x64
 8003a9e:	e74e      	b.n	800393e <HAL_ADCEx_InjectedConfigChannel+0x52>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003aa0:	680a      	ldr	r2, [r1, #0]
 8003aa2:	0e92      	lsrs	r2, r2, #26
 8003aa4:	0252      	lsls	r2, r2, #9
 8003aa6:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
 8003aaa:	e7eb      	b.n	8003a84 <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003aac:	6a0a      	ldr	r2, [r1, #32]
 8003aae:	1e54      	subs	r4, r2, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003ab2:	2400      	movs	r4, #0
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003ab4:	6808      	ldr	r0, [r1, #0]
 8003ab6:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003aba:	684a      	ldr	r2, [r1, #4]
 8003abc:	f002 021f 	and.w	r2, r2, #31
 8003ac0:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac4:	4322      	orrs	r2, r4
    hadc->InjectionConfig.ChannelCount--;
 8003ac6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003ac8:	3801      	subs	r0, #1
 8003aca:	6698      	str	r0, [r3, #104]	; 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003acc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003ace:	4322      	orrs	r2, r4
 8003ad0:	665a      	str	r2, [r3, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	f47f af33 	bne.w	800393e <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003ad8:	681c      	ldr	r4, [r3, #0]
 8003ada:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003adc:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8003ae0:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003ae4:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003ae8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003aec:	4302      	orrs	r2, r0
 8003aee:	64e2      	str	r2, [r4, #76]	; 0x4c
 8003af0:	e725      	b.n	800393e <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->CFGR,
 8003af2:	68d0      	ldr	r0, [r2, #12]
 8003af4:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003af8:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 8003afc:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8003b00:	60d0      	str	r0, [r2, #12]
 8003b02:	e732      	b.n	800396a <HAL_ADCEx_InjectedConfigChannel+0x7e>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003b04:	68e2      	ldr	r2, [r4, #12]
 8003b06:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003b0a:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e74d      	b.n	80039ac <HAL_ADCEx_InjectedConfigChannel+0xc0>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003b10:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8003b14:	2801      	cmp	r0, #1
 8003b16:	d005      	beq.n	8003b24 <HAL_ADCEx_InjectedConfigChannel+0x238>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003b18:	68e2      	ldr	r2, [r4, #12]
 8003b1a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003b1e:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b20:	2000      	movs	r0, #0
 8003b22:	e743      	b.n	80039ac <HAL_ADCEx_InjectedConfigChannel+0xc0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b26:	f042 0220 	orr.w	r2, r2, #32
 8003b2a:	65da      	str	r2, [r3, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8003b2c:	e73e      	b.n	80039ac <HAL_ADCEx_InjectedConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->CFGR2,
 8003b2e:	681e      	ldr	r6, [r3, #0]
 8003b30:	6932      	ldr	r2, [r6, #16]
 8003b32:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003b36:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8003b38:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8003b3a:	433c      	orrs	r4, r7
 8003b3c:	4322      	orrs	r2, r4
 8003b3e:	f042 0202 	orr.w	r2, r2, #2
 8003b42:	6132      	str	r2, [r6, #16]
 8003b44:	e73c      	b.n	80039c0 <HAL_ADCEx_InjectedConfigChannel+0xd4>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b46:	681c      	ldr	r4, [r3, #0]
 8003b48:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b4a:	3414      	adds	r4, #20
 8003b4c:	0e72      	lsrs	r2, r6, #25
 8003b4e:	0092      	lsls	r2, r2, #2
 8003b50:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003b54:	58a7      	ldr	r7, [r4, r2]
 8003b56:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003b5a:	f04f 0c07 	mov.w	ip, #7
 8003b5e:	fa0c f606 	lsl.w	r6, ip, r6
 8003b62:	ea27 0606 	bic.w	r6, r7, r6
 8003b66:	50a6      	str	r6, [r4, r2]
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b68:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b6a:	6962      	ldr	r2, [r4, #20]
 8003b6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b70:	6162      	str	r2, [r4, #20]
}
 8003b72:	e745      	b.n	8003a00 <HAL_ADCEx_InjectedConfigChannel+0x114>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003b74:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8003b78:	e76f      	b.n	8003a5a <HAL_ADCEx_InjectedConfigChannel+0x16e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b7a:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003b7c:	6e34      	ldr	r4, [r6, #96]	; 0x60
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b7e:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003b82:	680a      	ldr	r2, [r1, #0]
 8003b84:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003b88:	bb7d      	cbnz	r5, 8003bea <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8003b8a:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b8e:	4294      	cmp	r4, r2
 8003b90:	d033      	beq.n	8003bfa <HAL_ADCEx_InjectedConfigChannel+0x30e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b92:	681d      	ldr	r5, [r3, #0]
 8003b94:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003b96:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8003b98:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003b9c:	680a      	ldr	r2, [r1, #0]
 8003b9e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003ba2:	bb7e      	cbnz	r6, 8003c04 <HAL_ADCEx_InjectedConfigChannel+0x318>
 8003ba4:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ba8:	4294      	cmp	r4, r2
 8003baa:	d033      	beq.n	8003c14 <HAL_ADCEx_InjectedConfigChannel+0x328>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bac:	681d      	ldr	r5, [r3, #0]
 8003bae:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003bb0:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8003bb2:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003bb6:	680a      	ldr	r2, [r1, #0]
 8003bb8:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003bbc:	bb7e      	cbnz	r6, 8003c1e <HAL_ADCEx_InjectedConfigChannel+0x332>
 8003bbe:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bc2:	4294      	cmp	r4, r2
 8003bc4:	d033      	beq.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x342>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bc6:	681d      	ldr	r5, [r3, #0]
 8003bc8:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003bca:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8003bcc:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003bd0:	680a      	ldr	r2, [r1, #0]
 8003bd2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003bd6:	bb7e      	cbnz	r6, 8003c38 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8003bd8:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bdc:	4294      	cmp	r4, r2
 8003bde:	d134      	bne.n	8003c4a <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 8003be0:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003be2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003be6:	66ea      	str	r2, [r5, #108]	; 0x6c
}
 8003be8:	e02f      	b.n	8003c4a <HAL_ADCEx_InjectedConfigChannel+0x35e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003bee:	b112      	cbz	r2, 8003bf6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  return __builtin_clz(value);
 8003bf0:	fab2 f282 	clz	r2, r2
 8003bf4:	e7cb      	b.n	8003b8e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
    return 32U;
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	e7c9      	b.n	8003b8e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
  MODIFY_REG(*preg,
 8003bfa:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003bfc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c00:	6632      	str	r2, [r6, #96]	; 0x60
}
 8003c02:	e7c6      	b.n	8003b92 <HAL_ADCEx_InjectedConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c08:	b112      	cbz	r2, 8003c10 <HAL_ADCEx_InjectedConfigChannel+0x324>
  return __builtin_clz(value);
 8003c0a:	fab2 f282 	clz	r2, r2
 8003c0e:	e7cb      	b.n	8003ba8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    return 32U;
 8003c10:	2220      	movs	r2, #32
 8003c12:	e7c9      	b.n	8003ba8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
  MODIFY_REG(*preg,
 8003c14:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003c16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c1a:	666a      	str	r2, [r5, #100]	; 0x64
}
 8003c1c:	e7c6      	b.n	8003bac <HAL_ADCEx_InjectedConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c22:	b112      	cbz	r2, 8003c2a <HAL_ADCEx_InjectedConfigChannel+0x33e>
  return __builtin_clz(value);
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	e7cb      	b.n	8003bc2 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
    return 32U;
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	e7c9      	b.n	8003bc2 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  MODIFY_REG(*preg,
 8003c2e:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003c30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c34:	66aa      	str	r2, [r5, #104]	; 0x68
}
 8003c36:	e7c6      	b.n	8003bc6 <HAL_ADCEx_InjectedConfigChannel+0x2da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c3c:	b112      	cbz	r2, 8003c44 <HAL_ADCEx_InjectedConfigChannel+0x358>
  return __builtin_clz(value);
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	e7cb      	b.n	8003bdc <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    return 32U;
 8003c44:	2220      	movs	r2, #32
 8003c46:	e7c9      	b.n	8003bdc <HAL_ADCEx_InjectedConfigChannel+0x2f0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c48:	2000      	movs	r0, #0
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c4a:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c4c:	6894      	ldr	r4, [r2, #8]
 8003c4e:	f014 0f01 	tst.w	r4, #1
 8003c52:	d110      	bne.n	8003c76 <HAL_ADCEx_InjectedConfigChannel+0x38a>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003c54:	680c      	ldr	r4, [r1, #0]
 8003c56:	68ce      	ldr	r6, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003c58:	4d1c      	ldr	r5, [pc, #112]	; (8003ccc <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8003c5a:	42ae      	cmp	r6, r5
 8003c5c:	d046      	beq.n	8003cec <HAL_ADCEx_InjectedConfigChannel+0x400>
    CLEAR_BIT(ADCx->DIFSEL,
 8003c5e:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003c62:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003c66:	ea25 0404 	bic.w	r4, r5, r4
 8003c6a:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c6e:	68cc      	ldr	r4, [r1, #12]
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8003c72:	4294      	cmp	r4, r2
 8003c74:	d042      	beq.n	8003cfc <HAL_ADCEx_InjectedConfigChannel+0x410>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003c76:	680a      	ldr	r2, [r1, #0]
 8003c78:	4915      	ldr	r1, [pc, #84]	; (8003cd0 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8003c7a:	420a      	tst	r2, r1
 8003c7c:	d01c      	beq.n	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003c84:	f000 80fb 	beq.w	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x592>
 8003c88:	4c12      	ldr	r4, [pc, #72]	; (8003cd4 <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8003c8a:	42a1      	cmp	r1, r4
 8003c8c:	f000 80f4 	beq.w	8003e78 <HAL_ADCEx_InjectedConfigChannel+0x58c>
 8003c90:	4c11      	ldr	r4, [pc, #68]	; (8003cd8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003c92:	68a4      	ldr	r4, [r4, #8]
 8003c94:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003c98:	4e10      	ldr	r6, [pc, #64]	; (8003cdc <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
 8003c9a:	42b2      	cmp	r2, r6
 8003c9c:	f000 80f1 	beq.w	8003e82 <HAL_ADCEx_InjectedConfigChannel+0x596>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ca0:	4e0f      	ldr	r6, [pc, #60]	; (8003ce0 <HAL_ADCEx_InjectedConfigChannel+0x3f4>)
 8003ca2:	42b2      	cmp	r2, r6
 8003ca4:	f000 80ed 	beq.w	8003e82 <HAL_ADCEx_InjectedConfigChannel+0x596>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003ca8:	4e0e      	ldr	r6, [pc, #56]	; (8003ce4 <HAL_ADCEx_InjectedConfigChannel+0x3f8>)
 8003caa:	42b2      	cmp	r2, r6
 8003cac:	f000 811a 	beq.w	8003ee4 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003cb0:	4e0d      	ldr	r6, [pc, #52]	; (8003ce8 <HAL_ADCEx_InjectedConfigChannel+0x3fc>)
 8003cb2:	42b2      	cmp	r2, r6
 8003cb4:	f000 812d 	beq.w	8003f12 <HAL_ADCEx_InjectedConfigChannel+0x626>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003cbe:	b003      	add	sp, #12
 8003cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e7c1      	b.n	8003c4a <HAL_ADCEx_InjectedConfigChannel+0x35e>
 8003cc6:	bf00      	nop
 8003cc8:	03fff000 	.word	0x03fff000
 8003ccc:	407f0000 	.word	0x407f0000
 8003cd0:	80080000 	.word	0x80080000
 8003cd4:	50000100 	.word	0x50000100
 8003cd8:	50000700 	.word	0x50000700
 8003cdc:	c3210000 	.word	0xc3210000
 8003ce0:	90c00010 	.word	0x90c00010
 8003ce4:	c7520000 	.word	0xc7520000
 8003ce8:	cb840000 	.word	0xcb840000
    SET_BIT(ADCx->DIFSEL,
 8003cec:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003cf0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003cf4:	432c      	orrs	r4, r5
 8003cf6:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
 8003cfa:	e7b8      	b.n	8003c6e <HAL_ADCEx_InjectedConfigChannel+0x382>
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfc:	681d      	ldr	r5, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003cfe:	680a      	ldr	r2, [r1, #0]
 8003d00:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003d04:	2e00      	cmp	r6, #0
 8003d06:	d137      	bne.n	8003d78 <HAL_ADCEx_InjectedConfigChannel+0x48c>
 8003d08:	0e94      	lsrs	r4, r2, #26
 8003d0a:	3401      	adds	r4, #1
 8003d0c:	f004 041f 	and.w	r4, r4, #31
 8003d10:	2c09      	cmp	r4, #9
 8003d12:	bf8c      	ite	hi
 8003d14:	2400      	movhi	r4, #0
 8003d16:	2401      	movls	r4, #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d18:	2c00      	cmp	r4, #0
 8003d1a:	d065      	beq.n	8003de8 <HAL_ADCEx_InjectedConfigChannel+0x4fc>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	d13a      	bne.n	8003d96 <HAL_ADCEx_InjectedConfigChannel+0x4aa>
 8003d20:	0e94      	lsrs	r4, r2, #26
 8003d22:	3401      	adds	r4, #1
 8003d24:	06a4      	lsls	r4, r4, #26
 8003d26:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003d2a:	2e00      	cmp	r6, #0
 8003d2c:	d13f      	bne.n	8003dae <HAL_ADCEx_InjectedConfigChannel+0x4c2>
 8003d2e:	0e97      	lsrs	r7, r2, #26
 8003d30:	3701      	adds	r7, #1
 8003d32:	f007 0c1f 	and.w	ip, r7, #31
 8003d36:	2701      	movs	r7, #1
 8003d38:	fa07 f70c 	lsl.w	r7, r7, ip
 8003d3c:	433c      	orrs	r4, r7
 8003d3e:	2e00      	cmp	r6, #0
 8003d40:	d144      	bne.n	8003dcc <HAL_ADCEx_InjectedConfigChannel+0x4e0>
 8003d42:	0e92      	lsrs	r2, r2, #26
 8003d44:	3201      	adds	r2, #1
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003d4e:	0512      	lsls	r2, r2, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d50:	4322      	orrs	r2, r4
 8003d52:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d54:	3514      	adds	r5, #20
 8003d56:	0e56      	lsrs	r6, r2, #25
 8003d58:	00b6      	lsls	r6, r6, #2
 8003d5a:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8003d5e:	59af      	ldr	r7, [r5, r6]
 8003d60:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003d64:	f04f 0c07 	mov.w	ip, #7
 8003d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8003d6c:	ea27 070c 	bic.w	r7, r7, ip
 8003d70:	4094      	lsls	r4, r2
 8003d72:	433c      	orrs	r4, r7
 8003d74:	51ac      	str	r4, [r5, r6]
}
 8003d76:	e77e      	b.n	8003c76 <HAL_ADCEx_InjectedConfigChannel+0x38a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003d7c:	b14c      	cbz	r4, 8003d92 <HAL_ADCEx_InjectedConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003d7e:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003d82:	3401      	adds	r4, #1
 8003d84:	f004 041f 	and.w	r4, r4, #31
 8003d88:	2c09      	cmp	r4, #9
 8003d8a:	bf8c      	ite	hi
 8003d8c:	2400      	movhi	r4, #0
 8003d8e:	2401      	movls	r4, #1
 8003d90:	e7c2      	b.n	8003d18 <HAL_ADCEx_InjectedConfigChannel+0x42c>
    return 32U;
 8003d92:	2420      	movs	r4, #32
 8003d94:	e7f5      	b.n	8003d82 <HAL_ADCEx_InjectedConfigChannel+0x496>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003d9a:	b134      	cbz	r4, 8003daa <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 8003d9c:	fab4 f484 	clz	r4, r4
 8003da0:	3401      	adds	r4, #1
 8003da2:	06a4      	lsls	r4, r4, #26
 8003da4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003da8:	e7bf      	b.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x43e>
    return 32U;
 8003daa:	2420      	movs	r4, #32
 8003dac:	e7f8      	b.n	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8003db2:	b14f      	cbz	r7, 8003dc8 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003db4:	fab7 f787 	clz	r7, r7
 8003db8:	3701      	adds	r7, #1
 8003dba:	f007 071f 	and.w	r7, r7, #31
 8003dbe:	f04f 0c01 	mov.w	ip, #1
 8003dc2:	fa0c f707 	lsl.w	r7, ip, r7
 8003dc6:	e7b9      	b.n	8003d3c <HAL_ADCEx_InjectedConfigChannel+0x450>
    return 32U;
 8003dc8:	2720      	movs	r7, #32
 8003dca:	e7f5      	b.n	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x4cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003dd0:	b142      	cbz	r2, 8003de4 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003dd2:	fab2 f282 	clz	r2, r2
 8003dd6:	3201      	adds	r2, #1
 8003dd8:	f002 021f 	and.w	r2, r2, #31
 8003ddc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003de0:	0512      	lsls	r2, r2, #20
 8003de2:	e7b5      	b.n	8003d50 <HAL_ADCEx_InjectedConfigChannel+0x464>
    return 32U;
 8003de4:	2220      	movs	r2, #32
 8003de6:	e7f6      	b.n	8003dd6 <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8003de8:	b9d6      	cbnz	r6, 8003e20 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003dea:	0e94      	lsrs	r4, r2, #26
 8003dec:	3401      	adds	r4, #1
 8003dee:	06a4      	lsls	r4, r4, #26
 8003df0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003df4:	bb06      	cbnz	r6, 8003e38 <HAL_ADCEx_InjectedConfigChannel+0x54c>
 8003df6:	0e97      	lsrs	r7, r2, #26
 8003df8:	3701      	adds	r7, #1
 8003dfa:	f007 0c1f 	and.w	ip, r7, #31
 8003dfe:	2701      	movs	r7, #1
 8003e00:	fa07 f70c 	lsl.w	r7, r7, ip
 8003e04:	433c      	orrs	r4, r7
 8003e06:	bb36      	cbnz	r6, 8003e56 <HAL_ADCEx_InjectedConfigChannel+0x56a>
 8003e08:	0e92      	lsrs	r2, r2, #26
 8003e0a:	3201      	adds	r2, #1
 8003e0c:	f002 021f 	and.w	r2, r2, #31
 8003e10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e14:	3a1e      	subs	r2, #30
 8003e16:	0512      	lsls	r2, r2, #20
 8003e18:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e1c:	4322      	orrs	r2, r4
 8003e1e:	e798      	b.n	8003d52 <HAL_ADCEx_InjectedConfigChannel+0x466>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003e24:	b134      	cbz	r4, 8003e34 <HAL_ADCEx_InjectedConfigChannel+0x548>
  return __builtin_clz(value);
 8003e26:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003e2a:	3401      	adds	r4, #1
 8003e2c:	06a4      	lsls	r4, r4, #26
 8003e2e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e32:	e7df      	b.n	8003df4 <HAL_ADCEx_InjectedConfigChannel+0x508>
    return 32U;
 8003e34:	2420      	movs	r4, #32
 8003e36:	e7f8      	b.n	8003e2a <HAL_ADCEx_InjectedConfigChannel+0x53e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8003e3c:	b14f      	cbz	r7, 8003e52 <HAL_ADCEx_InjectedConfigChannel+0x566>
  return __builtin_clz(value);
 8003e3e:	fab7 f787 	clz	r7, r7
 8003e42:	3701      	adds	r7, #1
 8003e44:	f007 071f 	and.w	r7, r7, #31
 8003e48:	f04f 0c01 	mov.w	ip, #1
 8003e4c:	fa0c f707 	lsl.w	r7, ip, r7
 8003e50:	e7d8      	b.n	8003e04 <HAL_ADCEx_InjectedConfigChannel+0x518>
    return 32U;
 8003e52:	2720      	movs	r7, #32
 8003e54:	e7f5      	b.n	8003e42 <HAL_ADCEx_InjectedConfigChannel+0x556>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003e5a:	b15a      	cbz	r2, 8003e74 <HAL_ADCEx_InjectedConfigChannel+0x588>
  return __builtin_clz(value);
 8003e5c:	fab2 f282 	clz	r2, r2
 8003e60:	3201      	adds	r2, #1
 8003e62:	f002 021f 	and.w	r2, r2, #31
 8003e66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e6a:	3a1e      	subs	r2, #30
 8003e6c:	0512      	lsls	r2, r2, #20
 8003e6e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003e72:	e7d3      	b.n	8003e1c <HAL_ADCEx_InjectedConfigChannel+0x530>
    return 32U;
 8003e74:	2220      	movs	r2, #32
 8003e76:	e7f3      	b.n	8003e60 <HAL_ADCEx_InjectedConfigChannel+0x574>
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e78:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8003e7c:	e709      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8003e7e:	4c31      	ldr	r4, [pc, #196]	; (8003f44 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003e80:	e707      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e82:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8003e86:	f47f af0f 	bne.w	8003ca8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e8a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003e8e:	d003      	beq.n	8003e98 <HAL_ADCEx_InjectedConfigChannel+0x5ac>
 8003e90:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <HAL_ADCEx_InjectedConfigChannel+0x65c>)
 8003e92:	4291      	cmp	r1, r2
 8003e94:	f47f af10 	bne.w	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e98:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003e9c:	d019      	beq.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
 8003e9e:	4a2b      	ldr	r2, [pc, #172]	; (8003f4c <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003ea0:	4291      	cmp	r1, r2
 8003ea2:	d014      	beq.n	8003ece <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8003ea4:	492a      	ldr	r1, [pc, #168]	; (8003f50 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003ea6:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003eaa:	688a      	ldr	r2, [r1, #8]
 8003eac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003eb0:	4315      	orrs	r5, r2
 8003eb2:	608d      	str	r5, [r1, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <HAL_ADCEx_InjectedConfigChannel+0x668>)
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	0992      	lsrs	r2, r2, #6
 8003eba:	4927      	ldr	r1, [pc, #156]	; (8003f58 <HAL_ADCEx_InjectedConfigChannel+0x66c>)
 8003ebc:	fba1 1202 	umull	r1, r2, r1, r2
 8003ec0:	0992      	lsrs	r2, r2, #6
 8003ec2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	3218      	adds	r2, #24
 8003eca:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8003ecc:	e006      	b.n	8003edc <HAL_ADCEx_InjectedConfigChannel+0x5f0>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ece:	491d      	ldr	r1, [pc, #116]	; (8003f44 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003ed0:	e7e9      	b.n	8003ea6 <HAL_ADCEx_InjectedConfigChannel+0x5ba>
 8003ed2:	491c      	ldr	r1, [pc, #112]	; (8003f44 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003ed4:	e7e7      	b.n	8003ea6 <HAL_ADCEx_InjectedConfigChannel+0x5ba>
          wait_loop_index--;
 8003ed6:	9a01      	ldr	r2, [sp, #4]
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8003edc:	9a01      	ldr	r2, [sp, #4]
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d1f9      	bne.n	8003ed6 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
 8003ee2:	e6e9      	b.n	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ee4:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8003ee8:	f47f aee2 	bne.w	8003cb0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eec:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003ef0:	d00d      	beq.n	8003f0e <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003ef4:	4291      	cmp	r1, r2
 8003ef6:	d008      	beq.n	8003f0a <HAL_ADCEx_InjectedConfigChannel+0x61e>
 8003ef8:	4915      	ldr	r1, [pc, #84]	; (8003f50 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003efa:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 8003efe:	688a      	ldr	r2, [r1, #8]
 8003f00:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f04:	4315      	orrs	r5, r2
 8003f06:	608d      	str	r5, [r1, #8]
}
 8003f08:	e6d6      	b.n	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8003f0a:	490e      	ldr	r1, [pc, #56]	; (8003f44 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003f0c:	e7f5      	b.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x60e>
 8003f0e:	490d      	ldr	r1, [pc, #52]	; (8003f44 <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003f10:	e7f3      	b.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x60e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f12:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8003f16:	f47f aecf 	bne.w	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
      if (ADC_VREFINT_INSTANCE(hadc))
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003f1c:	4291      	cmp	r1, r2
 8003f1e:	f43f aecb 	beq.w	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f22:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003f26:	d008      	beq.n	8003f3a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8003f28:	4909      	ldr	r1, [pc, #36]	; (8003f50 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003f2a:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f2e:	688a      	ldr	r2, [r1, #8]
 8003f30:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f34:	4315      	orrs	r5, r2
 8003f36:	608d      	str	r5, [r1, #8]
}
 8003f38:	e6be      	b.n	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8003f3a:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8003f3e:	e7f4      	b.n	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x63e>
  __HAL_LOCK(hadc);
 8003f40:	2002      	movs	r0, #2
 8003f42:	e6bc      	b.n	8003cbe <HAL_ADCEx_InjectedConfigChannel+0x3d2>
 8003f44:	50000300 	.word	0x50000300
 8003f48:	50000600 	.word	0x50000600
 8003f4c:	50000100 	.word	0x50000100
 8003f50:	50000700 	.word	0x50000700
 8003f54:	20000000 	.word	0x20000000
 8003f58:	053e2d63 	.word	0x053e2d63

08003f5c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003f60:	2a01      	cmp	r2, #1
 8003f62:	f000 80d6 	beq.w	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8003f66:	b410      	push	{r4}
 8003f68:	b09d      	sub	sp, #116	; 0x74
 8003f6a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f72:	2200      	movs	r2, #0
 8003f74:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f76:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f78:	6800      	ldr	r0, [r0, #0]
 8003f7a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003f7e:	d047      	beq.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003f80:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003f82:	4290      	cmp	r0, r2
 8003f84:	d047      	beq.n	8004016 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003f86:	2200      	movs	r2, #0
 8003f88:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003f8a:	9a01      	ldr	r2, [sp, #4]
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	d046      	beq.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	f012 0204 	ands.w	r2, r2, #4
 8003f96:	d000      	beq.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f98:	2201      	movs	r2, #1
 8003f9a:	6884      	ldr	r4, [r0, #8]
 8003f9c:	f014 0f04 	tst.w	r4, #4
 8003fa0:	f040 80a7 	bne.w	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	f040 80a4 	bne.w	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003faa:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003fae:	d042      	beq.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8003fb0:	4a5a      	ldr	r2, [pc, #360]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003fb2:	4290      	cmp	r0, r2
 8003fb4:	d03c      	beq.n	8004030 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003fb6:	4a5a      	ldr	r2, [pc, #360]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb8:	6808      	ldr	r0, [r1, #0]
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d05c      	beq.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003fbe:	6890      	ldr	r0, [r2, #8]
 8003fc0:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003fc4:	684c      	ldr	r4, [r1, #4]
 8003fc6:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8003fca:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8003fce:	4320      	orrs	r0, r4
 8003fd0:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003fd8:	d02f      	beq.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8003fda:	4c50      	ldr	r4, [pc, #320]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003fdc:	42a0      	cmp	r0, r4
 8003fde:	d02c      	beq.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fe0:	484d      	ldr	r0, [pc, #308]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003fe2:	6884      	ldr	r4, [r0, #8]
 8003fe4:	f014 0401 	ands.w	r4, r4, #1
 8003fe8:	d000      	beq.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003fea:	2401      	movs	r4, #1
 8003fec:	484d      	ldr	r0, [pc, #308]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003fee:	6880      	ldr	r0, [r0, #8]
 8003ff0:	f010 0001 	ands.w	r0, r0, #1
 8003ff4:	d000      	beq.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	4320      	orrs	r0, r4
 8003ffa:	4c4b      	ldr	r4, [pc, #300]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003ffc:	68a4      	ldr	r4, [r4, #8]
 8003ffe:	f014 0401 	ands.w	r4, r4, #1
 8004002:	d000      	beq.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8004004:	2401      	movs	r4, #1
 8004006:	4320      	orrs	r0, r4
 8004008:	bf0c      	ite	eq
 800400a:	2001      	moveq	r0, #1
 800400c:	2000      	movne	r0, #0
 800400e:	e025      	b.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004010:	4a42      	ldr	r2, [pc, #264]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004012:	9201      	str	r2, [sp, #4]
 8004014:	e7b9      	b.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8004016:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800401a:	9201      	str	r2, [sp, #4]
 800401c:	e7b5      	b.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800401e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004020:	f042 0220 	orr.w	r2, r2, #32
 8004024:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 800402c:	2001      	movs	r0, #1
 800402e:	e068      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004030:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8004034:	e7c0      	b.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8004036:	4a3d      	ldr	r2, [pc, #244]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004038:	e7be      	b.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 800403a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800403e:	6880      	ldr	r0, [r0, #8]
 8004040:	f010 0001 	ands.w	r0, r0, #1
 8004044:	d000      	beq.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8004046:	2001      	movs	r0, #1
 8004048:	4c34      	ldr	r4, [pc, #208]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800404a:	68a4      	ldr	r4, [r4, #8]
 800404c:	f014 0401 	ands.w	r4, r4, #1
 8004050:	d000      	beq.n	8004054 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8004052:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004054:	4320      	orrs	r0, r4
 8004056:	bf0c      	ite	eq
 8004058:	2001      	moveq	r0, #1
 800405a:	2000      	movne	r0, #0
 800405c:	2800      	cmp	r0, #0
 800405e:	d054      	beq.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004060:	6890      	ldr	r0, [r2, #8]
 8004062:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 8004066:	f020 000f 	bic.w	r0, r0, #15
 800406a:	680c      	ldr	r4, [r1, #0]
 800406c:	6889      	ldr	r1, [r1, #8]
 800406e:	4321      	orrs	r1, r4
 8004070:	4308      	orrs	r0, r1
 8004072:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004074:	2000      	movs	r0, #0
 8004076:	e041      	b.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004078:	6891      	ldr	r1, [r2, #8]
 800407a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800407e:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8004086:	d01a      	beq.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8004088:	4824      	ldr	r0, [pc, #144]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800408a:	4281      	cmp	r1, r0
 800408c:	d017      	beq.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x162>
 800408e:	4922      	ldr	r1, [pc, #136]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004090:	6888      	ldr	r0, [r1, #8]
 8004092:	f010 0001 	ands.w	r0, r0, #1
 8004096:	d000      	beq.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004098:	2001      	movs	r0, #1
 800409a:	4922      	ldr	r1, [pc, #136]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800409c:	6889      	ldr	r1, [r1, #8]
 800409e:	f011 0101 	ands.w	r1, r1, #1
 80040a2:	d000      	beq.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 80040a4:	2101      	movs	r1, #1
 80040a6:	4301      	orrs	r1, r0
 80040a8:	481f      	ldr	r0, [pc, #124]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80040aa:	6880      	ldr	r0, [r0, #8]
 80040ac:	f010 0001 	ands.w	r0, r0, #1
 80040b0:	d000      	beq.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 80040b2:	2001      	movs	r0, #1
 80040b4:	4301      	orrs	r1, r0
 80040b6:	bf0c      	ite	eq
 80040b8:	2101      	moveq	r1, #1
 80040ba:	2100      	movne	r1, #0
 80040bc:	e010      	b.n	80040e0 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 80040be:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80040c2:	6889      	ldr	r1, [r1, #8]
 80040c4:	f011 0101 	ands.w	r1, r1, #1
 80040c8:	d000      	beq.n	80040cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040ca:	2101      	movs	r1, #1
 80040cc:	4813      	ldr	r0, [pc, #76]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040ce:	6880      	ldr	r0, [r0, #8]
 80040d0:	f010 0001 	ands.w	r0, r0, #1
 80040d4:	d000      	beq.n	80040d8 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 80040d6:	2001      	movs	r0, #1
 80040d8:	4301      	orrs	r1, r0
 80040da:	bf0c      	ite	eq
 80040dc:	2101      	moveq	r1, #1
 80040de:	2100      	movne	r1, #0
 80040e0:	b1a9      	cbz	r1, 800410e <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040e2:	6891      	ldr	r1, [r2, #8]
 80040e4:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80040e8:	f021 010f 	bic.w	r1, r1, #15
 80040ec:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ee:	2000      	movs	r0, #0
 80040f0:	e004      	b.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040f4:	f042 0220 	orr.w	r2, r2, #32
 80040f8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040fa:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004102:	b01d      	add	sp, #116	; 0x74
 8004104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004108:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800410a:	2000      	movs	r0, #0
 800410c:	e7f6      	b.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 800410e:	2000      	movs	r0, #0
 8004110:	e7f4      	b.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 8004112:	2002      	movs	r0, #2
}
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	50000400 	.word	0x50000400
 800411c:	50000100 	.word	0x50000100
 8004120:	50000700 	.word	0x50000700
 8004124:	50000500 	.word	0x50000500
 8004128:	50000600 	.word	0x50000600
 800412c:	50000300 	.word	0x50000300

08004130 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004130:	4a07      	ldr	r2, [pc, #28]	; (8004150 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004132:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004134:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800413c:	0200      	lsls	r0, r0, #8
 800413e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004142:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800414c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800414e:	4770      	bx	lr
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004154:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004156:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_NVIC_SetPriority+0x68>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800415e:	f1c3 0c07 	rsb	ip, r3, #7
 8004162:	f1bc 0f04 	cmp.w	ip, #4
 8004166:	bf28      	it	cs
 8004168:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800416c:	f103 0e04 	add.w	lr, r3, #4
 8004170:	f1be 0f06 	cmp.w	lr, #6
 8004174:	d918      	bls.n	80041a8 <HAL_NVIC_SetPriority+0x54>
 8004176:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	f04f 3eff 	mov.w	lr, #4294967295
 800417c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004180:	ea21 010c 	bic.w	r1, r1, ip
 8004184:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004186:	fa0e f303 	lsl.w	r3, lr, r3
 800418a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004190:	2800      	cmp	r0, #0
 8004192:	db0b      	blt.n	80041ac <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004194:	0109      	lsls	r1, r1, #4
 8004196:	b2c9      	uxtb	r1, r1
 8004198:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800419c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80041a0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80041a4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a8:	2300      	movs	r3, #0
 80041aa:	e7e5      	b.n	8004178 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ac:	f000 000f 	and.w	r0, r0, #15
 80041b0:	0109      	lsls	r1, r1, #4
 80041b2:	b2c9      	uxtb	r1, r1
 80041b4:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <HAL_NVIC_SetPriority+0x6c>)
 80041b6:	5419      	strb	r1, [r3, r0]
 80041b8:	e7f4      	b.n	80041a4 <HAL_NVIC_SetPriority+0x50>
 80041ba:	bf00      	nop
 80041bc:	e000ed00 	.word	0xe000ed00
 80041c0:	e000ed14 	.word	0xe000ed14

080041c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80041c4:	2800      	cmp	r0, #0
 80041c6:	db07      	blt.n	80041d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c8:	f000 021f 	and.w	r2, r0, #31
 80041cc:	0940      	lsrs	r0, r0, #5
 80041ce:	2301      	movs	r3, #1
 80041d0:	4093      	lsls	r3, r2
 80041d2:	4a02      	ldr	r2, [pc, #8]	; (80041dc <HAL_NVIC_EnableIRQ+0x18>)
 80041d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000e100 	.word	0xe000e100

080041e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041e0:	3801      	subs	r0, #1
 80041e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80041e6:	d20b      	bcs.n	8004200 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80041ec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ee:	4a05      	ldr	r2, [pc, #20]	; (8004204 <HAL_SYSTICK_Config+0x24>)
 80041f0:	21f0      	movs	r1, #240	; 0xf0
 80041f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041f6:	2000      	movs	r0, #0
 80041f8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041fa:	2207      	movs	r2, #7
 80041fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004200:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004208:	b170      	cbz	r0, 8004228 <HAL_DAC_Init+0x20>
{
 800420a:	b510      	push	{r4, lr}
 800420c:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800420e:	7903      	ldrb	r3, [r0, #4]
 8004210:	b133      	cbz	r3, 8004220 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004212:	2302      	movs	r3, #2
 8004214:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004216:	2000      	movs	r0, #0
 8004218:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800421a:	2301      	movs	r3, #1
 800421c:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 800421e:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004220:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004222:	f7fe f9dd 	bl	80025e0 <HAL_DAC_MspInit>
 8004226:	e7f4      	b.n	8004212 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8004228:	2001      	movs	r0, #1
}
 800422a:	4770      	bx	lr

0800422c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800422c:	7943      	ldrb	r3, [r0, #5]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d02f      	beq.n	8004292 <HAL_DAC_Start+0x66>
{
 8004232:	b570      	push	{r4, r5, r6, lr}
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8004238:	2001      	movs	r0, #1
 800423a:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	f001 0610 	and.w	r6, r1, #16
 8004248:	fa00 f106 	lsl.w	r1, r0, r6
 800424c:	430b      	orrs	r3, r1
 800424e:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004250:	f7fe fbd4 	bl	80029fc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004254:	b97d      	cbnz	r5, 8004276 <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800425e:	2b02      	cmp	r3, #2
 8004260:	d004      	beq.n	800426c <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004262:	2301      	movs	r3, #1
 8004264:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004266:	2000      	movs	r0, #0
 8004268:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 800426a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800426c:	6853      	ldr	r3, [r2, #4]
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6053      	str	r3, [r2, #4]
 8004274:	e7f5      	b.n	8004262 <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004276:	6821      	ldr	r1, [r4, #0]
 8004278:	680a      	ldr	r2, [r1, #0]
 800427a:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 800427e:	2302      	movs	r3, #2
 8004280:	fa03 f606 	lsl.w	r6, r3, r6
 8004284:	42b2      	cmp	r2, r6
 8004286:	d1ec      	bne.n	8004262 <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004288:	684b      	ldr	r3, [r1, #4]
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	604b      	str	r3, [r1, #4]
 8004290:	e7e7      	b.n	8004262 <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 8004292:	2002      	movs	r0, #2
}
 8004294:	4770      	bx	lr

08004296 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004296:	b410      	push	{r4}
 8004298:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 800429a:	2400      	movs	r4, #0
 800429c:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800429e:	6800      	ldr	r0, [r0, #0]
 80042a0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80042a2:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80042a4:	b951      	cbnz	r1, 80042bc <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80042a6:	9901      	ldr	r1, [sp, #4]
 80042a8:	440a      	add	r2, r1
 80042aa:	3208      	adds	r2, #8
 80042ac:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80042ae:	9a01      	ldr	r2, [sp, #4]
 80042b0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 80042b2:	2000      	movs	r0, #0
 80042b4:	b003      	add	sp, #12
 80042b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ba:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80042bc:	9901      	ldr	r1, [sp, #4]
 80042be:	440a      	add	r2, r1
 80042c0:	3214      	adds	r2, #20
 80042c2:	9201      	str	r2, [sp, #4]
 80042c4:	e7f3      	b.n	80042ae <HAL_DAC_SetValue+0x18>
	...

080042c8 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042c8:	7943      	ldrb	r3, [r0, #5]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	f000 80f4 	beq.w	80044b8 <HAL_DAC_ConfigChannel+0x1f0>
{
 80042d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d4:	4604      	mov	r4, r0
 80042d6:	460e      	mov	r6, r1
 80042d8:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 80042da:	2301      	movs	r3, #1
 80042dc:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80042e2:	688b      	ldr	r3, [r1, #8]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d017      	beq.n	8004318 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80042e8:	69f3      	ldr	r3, [r6, #28]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d05e      	beq.n	80043ac <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80042f2:	f005 0510 	and.w	r5, r5, #16
 80042f6:	2307      	movs	r3, #7
 80042f8:	40ab      	lsls	r3, r5
 80042fa:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80042fe:	69b3      	ldr	r3, [r6, #24]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d060      	beq.n	80043c6 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004304:	2b02      	cmp	r3, #2
 8004306:	f000 80bd 	beq.w	8004484 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800430a:	6973      	ldr	r3, [r6, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 80bc 	bne.w	800448a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004312:	f04f 0801 	mov.w	r8, #1
 8004316:	e058      	b.n	80043ca <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8004318:	f7fe fb6a 	bl	80029f0 <HAL_GetTick>
 800431c:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800431e:	b17d      	cbz	r5, 8004340 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	2b00      	cmp	r3, #0
 8004326:	da3a      	bge.n	800439e <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004328:	f7fe fb62 	bl	80029f0 <HAL_GetTick>
 800432c:	1bc0      	subs	r0, r0, r7
 800432e:	2801      	cmp	r0, #1
 8004330:	d9f6      	bls.n	8004320 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004332:	6923      	ldr	r3, [r4, #16]
 8004334:	f043 0308 	orr.w	r3, r3, #8
 8004338:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800433a:	2003      	movs	r0, #3
 800433c:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800433e:	e09f      	b.n	8004480 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004348:	d00b      	beq.n	8004362 <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800434a:	f7fe fb51 	bl	80029f0 <HAL_GetTick>
 800434e:	1bc0      	subs	r0, r0, r7
 8004350:	2801      	cmp	r0, #1
 8004352:	d9f5      	bls.n	8004340 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004354:	6923      	ldr	r3, [r4, #16]
 8004356:	f043 0308 	orr.w	r3, r3, #8
 800435a:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800435c:	2003      	movs	r0, #3
 800435e:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8004360:	e08e      	b.n	8004480 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 8004362:	2001      	movs	r0, #1
 8004364:	f7fe fb4a 	bl	80029fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004372:	f005 0110 	and.w	r1, r5, #16
 8004376:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800437a:	408b      	lsls	r3, r1
 800437c:	ea22 0203 	bic.w	r2, r2, r3
 8004380:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004382:	408b      	lsls	r3, r1
 8004384:	431a      	orrs	r2, r3
 8004386:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004388:	6820      	ldr	r0, [r4, #0]
 800438a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	408a      	lsls	r2, r1
 8004390:	ea23 0302 	bic.w	r3, r3, r2
 8004394:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004396:	408a      	lsls	r2, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800439c:	e7a4      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 800439e:	2001      	movs	r0, #1
 80043a0:	f7fe fb2c 	bl	80029fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
 80043aa:	e7e0      	b.n	800436e <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 80043ac:	6821      	ldr	r1, [r4, #0]
 80043ae:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043b0:	f005 0010 	and.w	r0, r5, #16
 80043b4:	231f      	movs	r3, #31
 80043b6:	4083      	lsls	r3, r0
 80043b8:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80043bc:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043be:	4083      	lsls	r3, r0
 80043c0:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80043c2:	638b      	str	r3, [r1, #56]	; 0x38
 80043c4:	e793      	b.n	80042ee <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 80043c6:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80043ca:	68b3      	ldr	r3, [r6, #8]
 80043cc:	6972      	ldr	r2, [r6, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80043d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d8:	40aa      	lsls	r2, r5
 80043da:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80043de:	7932      	ldrb	r2, [r6, #4]
 80043e0:	2a01      	cmp	r2, #1
 80043e2:	d055      	beq.n	8004490 <HAL_DAC_ConfigChannel+0x1c8>
 80043e4:	f04f 0800 	mov.w	r8, #0
 80043e8:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80043ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f0:	40aa      	lsls	r2, r5
 80043f2:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80043f6:	7972      	ldrb	r2, [r6, #5]
 80043f8:	2a01      	cmp	r2, #1
 80043fa:	d04c      	beq.n	8004496 <HAL_DAC_ConfigChannel+0x1ce>
 80043fc:	f04f 0800 	mov.w	r8, #0
 8004400:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004404:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004408:	6833      	ldr	r3, [r6, #0]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d046      	beq.n	800449c <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800440e:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004410:	fa08 f805 	lsl.w	r8, r8, r5
 8004414:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800441c:	6821      	ldr	r1, [r4, #0]
 800441e:	680b      	ldr	r3, [r1, #0]
 8004420:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004424:	40aa      	lsls	r2, r5
 8004426:	ea23 0302 	bic.w	r3, r3, r2
 800442a:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800442c:	6821      	ldr	r1, [r4, #0]
 800442e:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004430:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004434:	40aa      	lsls	r2, r5
 8004436:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800443a:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800443c:	40ab      	lsls	r3, r5
 800443e:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004440:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	680b      	ldr	r3, [r1, #0]
 8004446:	22c0      	movs	r2, #192	; 0xc0
 8004448:	40aa      	lsls	r2, r5
 800444a:	ea23 0302 	bic.w	r3, r3, r2
 800444e:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004450:	68f2      	ldr	r2, [r6, #12]
 8004452:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004456:	6932      	ldr	r2, [r6, #16]
 8004458:	0892      	lsrs	r2, r2, #2
 800445a:	0212      	lsls	r2, r2, #8
 800445c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004460:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004466:	f640 710f 	movw	r1, #3855	; 0xf0f
 800446a:	40a9      	lsls	r1, r5
 800446c:	ea23 0301 	bic.w	r3, r3, r1
 8004470:	fa02 f505 	lsl.w	r5, r2, r5
 8004474:	431d      	orrs	r5, r3
 8004476:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004478:	2301      	movs	r3, #1
 800447a:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800447c:	2000      	movs	r0, #0
 800447e:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8004480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8004484:	f04f 0801 	mov.w	r8, #1
 8004488:	e79f      	b.n	80043ca <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 800448a:	f04f 0800 	mov.w	r8, #0
 800448e:	e79c      	b.n	80043ca <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004490:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004494:	e7a8      	b.n	80043e8 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004496:	f44f 7800 	mov.w	r8, #512	; 0x200
 800449a:	e7b1      	b.n	8004400 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800449c:	f000 ff00 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_DAC_ConfigChannel+0x1f4>)
 80044a2:	4298      	cmp	r0, r3
 80044a4:	d902      	bls.n	80044ac <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80044a6:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80044aa:	e7b1      	b.n	8004410 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_DAC_ConfigChannel+0x1f8>)
 80044ae:	4298      	cmp	r0, r3
 80044b0:	d9ae      	bls.n	8004410 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80044b2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80044b6:	e7ab      	b.n	8004410 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 80044b8:	2002      	movs	r0, #2
}
 80044ba:	4770      	bx	lr
 80044bc:	09896800 	.word	0x09896800
 80044c0:	04c4b400 	.word	0x04c4b400

080044c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c4:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044c6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80044c8:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80044ca:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044cc:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80044ce:	b114      	cbz	r4, 80044d6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80044d2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80044d4:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80044d8:	f004 0c1f 	and.w	ip, r4, #31
 80044dc:	2401      	movs	r4, #1
 80044de:	fa04 f40c 	lsl.w	r4, r4, ip
 80044e2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80044e4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044e6:	6804      	ldr	r4, [r0, #0]
 80044e8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ea:	6883      	ldr	r3, [r0, #8]
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d005      	beq.n	80044fc <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80044f0:	6803      	ldr	r3, [r0, #0]
 80044f2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80044f4:	6803      	ldr	r3, [r0, #0]
 80044f6:	60da      	str	r2, [r3, #12]
  }
}
 80044f8:	bc30      	pop	{r4, r5}
 80044fa:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80044fc:	6803      	ldr	r3, [r0, #0]
 80044fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004500:	6803      	ldr	r3, [r0, #0]
 8004502:	60d9      	str	r1, [r3, #12]
 8004504:	e7f8      	b.n	80044f8 <DMA_SetConfig+0x34>
	...

08004508 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004508:	6803      	ldr	r3, [r0, #0]
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d813      	bhi.n	8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004510:	490b      	ldr	r1, [pc, #44]	; (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004512:	b2db      	uxtb	r3, r3
 8004514:	3b08      	subs	r3, #8
 8004516:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800451c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800451e:	f022 0203 	bic.w	r2, r2, #3
 8004522:	440a      	add	r2, r1
 8004524:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8004528:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800452a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800452e:	2201      	movs	r2, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004536:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004538:	4904      	ldr	r1, [pc, #16]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800453a:	e7ea      	b.n	8004512 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 800453c:	40020407 	.word	0x40020407
 8004540:	40020800 	.word	0x40020800
 8004544:	cccccccd 	.word	0xcccccccd
 8004548:	40020880 	.word	0x40020880
 800454c:	40020820 	.word	0x40020820

08004550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004550:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004552:	4a07      	ldr	r2, [pc, #28]	; (8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8004554:	441a      	add	r2, r3
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800455a:	4a06      	ldr	r2, [pc, #24]	; (8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800455c:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800455e:	3b01      	subs	r3, #1
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2201      	movs	r2, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	1000823f 	.word	0x1000823f
 8004574:	40020940 	.word	0x40020940

08004578 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004578:	2800      	cmp	r0, #0
 800457a:	d05b      	beq.n	8004634 <HAL_DMA_Init+0xbc>
{
 800457c:	b510      	push	{r4, lr}
 800457e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004580:	6801      	ldr	r1, [r0, #0]
 8004582:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <HAL_DMA_Init+0xc0>)
 8004584:	4299      	cmp	r1, r3
 8004586:	d83d      	bhi.n	8004604 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004588:	4b2c      	ldr	r3, [pc, #176]	; (800463c <HAL_DMA_Init+0xc4>)
 800458a:	440b      	add	r3, r1
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <HAL_DMA_Init+0xc8>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004598:	4b2a      	ldr	r3, [pc, #168]	; (8004644 <HAL_DMA_Init+0xcc>)
 800459a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800459c:	2302      	movs	r3, #2
 800459e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80045a2:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045a4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80045a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80045ac:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ae:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80045b0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b2:	6920      	ldr	r0, [r4, #16]
 80045b4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b6:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ba:	69a0      	ldr	r0, [r4, #24]
 80045bc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80045be:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c2:	6a20      	ldr	r0, [r4, #32]
 80045c4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80045c6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80045c8:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7ff ff9c 	bl	8004508 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045d0:	68a3      	ldr	r3, [r4, #8]
 80045d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d6:	d020      	beq.n	800461a <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80045da:	7922      	ldrb	r2, [r4, #4]
 80045dc:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80045e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80045e2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d919      	bls.n	8004620 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045f0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045f2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f4:	2000      	movs	r0, #0
 80045f6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80045fe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004602:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004604:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_DMA_Init+0xd0>)
 8004606:	440b      	add	r3, r1
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <HAL_DMA_Init+0xc8>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <HAL_DMA_Init+0xd4>)
 8004616:	6403      	str	r3, [r0, #64]	; 0x40
 8004618:	e7c0      	b.n	800459c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800461a:	2300      	movs	r3, #0
 800461c:	6063      	str	r3, [r4, #4]
 800461e:	e7db      	b.n	80045d8 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004620:	4620      	mov	r0, r4
 8004622:	f7ff ff95 	bl	8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004626:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800462c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800462e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e7df      	b.n	80045f4 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004634:	2001      	movs	r0, #1
}
 8004636:	4770      	bx	lr
 8004638:	40020407 	.word	0x40020407
 800463c:	bffdfff8 	.word	0xbffdfff8
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	40020000 	.word	0x40020000
 8004648:	bffdfbf8 	.word	0xbffdfbf8
 800464c:	40020400 	.word	0x40020400

08004650 <HAL_DMA_Start_IT>:
{
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004654:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004658:	2801      	cmp	r0, #1
 800465a:	d041      	beq.n	80046e0 <HAL_DMA_Start_IT+0x90>
 800465c:	2001      	movs	r0, #1
 800465e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8004662:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004666:	b2c0      	uxtb	r0, r0
 8004668:	2801      	cmp	r0, #1
 800466a:	d004      	beq.n	8004676 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 800466c:	2300      	movs	r3, #0
 800466e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8004672:	2002      	movs	r0, #2
}
 8004674:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004676:	2002      	movs	r0, #2
 8004678:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800467c:	2000      	movs	r0, #0
 800467e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004680:	6825      	ldr	r5, [r4, #0]
 8004682:	6828      	ldr	r0, [r5, #0]
 8004684:	f020 0001 	bic.w	r0, r0, #1
 8004688:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff ff1a 	bl	80044c4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004690:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004692:	b1d3      	cbz	r3, 80046ca <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	f043 030e 	orr.w	r3, r3, #14
 800469c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800469e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80046a6:	d003      	beq.n	80046b0 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ae:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80046b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046b2:	b11b      	cbz	r3, 80046bc <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ba:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2000      	movs	r0, #0
 80046c8:	e7d4      	b.n	8004674 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	f023 0304 	bic.w	r3, r3, #4
 80046d2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	f043 030a 	orr.w	r3, r3, #10
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e7de      	b.n	800469e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80046e0:	2002      	movs	r0, #2
 80046e2:	e7c7      	b.n	8004674 <HAL_DMA_Start_IT+0x24>

080046e4 <HAL_DMA_IRQHandler>:
{
 80046e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80046e8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80046ea:	6804      	ldr	r4, [r0, #0]
 80046ec:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80046ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2204      	movs	r2, #4
 80046f6:	409a      	lsls	r2, r3
 80046f8:	420a      	tst	r2, r1
 80046fa:	d015      	beq.n	8004728 <HAL_DMA_IRQHandler+0x44>
 80046fc:	f015 0f04 	tst.w	r5, #4
 8004700:	d012      	beq.n	8004728 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	f013 0f20 	tst.w	r3, #32
 8004708:	d103      	bne.n	8004712 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004712:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004714:	f003 021f 	and.w	r2, r3, #31
 8004718:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800471a:	2304      	movs	r3, #4
 800471c:	4093      	lsls	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004720:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004722:	b103      	cbz	r3, 8004726 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8004724:	4798      	blx	r3
}
 8004726:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004728:	2202      	movs	r2, #2
 800472a:	409a      	lsls	r2, r3
 800472c:	420a      	tst	r2, r1
 800472e:	d01c      	beq.n	800476a <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8004730:	f015 0f02 	tst.w	r5, #2
 8004734:	d019      	beq.n	800476a <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	f013 0f20 	tst.w	r3, #32
 800473c:	d106      	bne.n	800474c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f023 030a 	bic.w	r3, r3, #10
 8004744:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004746:	2301      	movs	r3, #1
 8004748:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800474c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800474e:	f003 021f 	and.w	r2, r3, #31
 8004752:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004754:	2302      	movs	r3, #2
 8004756:	4093      	lsls	r3, r2
 8004758:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800475a:	2300      	movs	r3, #0
 800475c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8004760:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0df      	beq.n	8004726 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004766:	4798      	blx	r3
 8004768:	e7dd      	b.n	8004726 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800476a:	2208      	movs	r2, #8
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	420b      	tst	r3, r1
 8004772:	d0d8      	beq.n	8004726 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8004774:	f015 0f08 	tst.w	r5, #8
 8004778:	d0d5      	beq.n	8004726 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	f023 030e 	bic.w	r3, r3, #14
 8004780:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004782:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004792:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004794:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004798:	2300      	movs	r3, #0
 800479a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800479e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0c0      	beq.n	8004726 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80047a4:	4798      	blx	r3
  return;
 80047a6:	e7be      	b.n	8004726 <HAL_DMA_IRQHandler+0x42>

080047a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047aa:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80047ac:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ae:	e062      	b.n	8004876 <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047b0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047b2:	005e      	lsls	r6, r3, #1
 80047b4:	2403      	movs	r4, #3
 80047b6:	40b4      	lsls	r4, r6
 80047b8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047bc:	68cc      	ldr	r4, [r1, #12]
 80047be:	40b4      	lsls	r4, r6
 80047c0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80047c2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047c6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ca:	684c      	ldr	r4, [r1, #4]
 80047cc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80047d0:	409c      	lsls	r4, r3
 80047d2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80047d6:	6044      	str	r4, [r0, #4]
 80047d8:	e05e      	b.n	8004898 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047da:	08dd      	lsrs	r5, r3, #3
 80047dc:	3508      	adds	r5, #8
 80047de:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047e2:	f003 0407 	and.w	r4, r3, #7
 80047e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80047ea:	240f      	movs	r4, #15
 80047ec:	fa04 f40c 	lsl.w	r4, r4, ip
 80047f0:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047f4:	690c      	ldr	r4, [r1, #16]
 80047f6:	fa04 f40c 	lsl.w	r4, r4, ip
 80047fa:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80047fe:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004802:	e060      	b.n	80048c6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004804:	2405      	movs	r4, #5
 8004806:	e000      	b.n	800480a <HAL_GPIO_Init+0x62>
 8004808:	2400      	movs	r4, #0
 800480a:	fa04 f40e 	lsl.w	r4, r4, lr
 800480e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004810:	f10c 0c02 	add.w	ip, ip, #2
 8004814:	4d55      	ldr	r5, [pc, #340]	; (800496c <HAL_GPIO_Init+0x1c4>)
 8004816:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800481a:	4c55      	ldr	r4, [pc, #340]	; (8004970 <HAL_GPIO_Init+0x1c8>)
 800481c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800481e:	43d4      	mvns	r4, r2
 8004820:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004824:	684f      	ldr	r7, [r1, #4]
 8004826:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800482a:	d001      	beq.n	8004830 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800482c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004830:	4d4f      	ldr	r5, [pc, #316]	; (8004970 <HAL_GPIO_Init+0x1c8>)
 8004832:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8004834:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8004836:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800483a:	684f      	ldr	r7, [r1, #4]
 800483c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004840:	d001      	beq.n	8004846 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8004842:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004846:	4d4a      	ldr	r5, [pc, #296]	; (8004970 <HAL_GPIO_Init+0x1c8>)
 8004848:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 800484a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800484c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004850:	684f      	ldr	r7, [r1, #4]
 8004852:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004856:	d001      	beq.n	800485c <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8004858:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800485c:	4d44      	ldr	r5, [pc, #272]	; (8004970 <HAL_GPIO_Init+0x1c8>)
 800485e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004860:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8004862:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004864:	684e      	ldr	r6, [r1, #4]
 8004866:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800486a:	d001      	beq.n	8004870 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800486c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8004870:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <HAL_GPIO_Init+0x1c8>)
 8004872:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8004874:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004876:	680a      	ldr	r2, [r1, #0]
 8004878:	fa32 f403 	lsrs.w	r4, r2, r3
 800487c:	d074      	beq.n	8004968 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800487e:	f04f 0c01 	mov.w	ip, #1
 8004882:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004886:	ea1c 0202 	ands.w	r2, ip, r2
 800488a:	d0f3      	beq.n	8004874 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800488c:	684c      	ldr	r4, [r1, #4]
 800488e:	f004 0403 	and.w	r4, r4, #3
 8004892:	3c01      	subs	r4, #1
 8004894:	2c01      	cmp	r4, #1
 8004896:	d98b      	bls.n	80047b0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004898:	684c      	ldr	r4, [r1, #4]
 800489a:	f004 0403 	and.w	r4, r4, #3
 800489e:	2c03      	cmp	r4, #3
 80048a0:	d00c      	beq.n	80048bc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80048a2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048a4:	005d      	lsls	r5, r3, #1
 80048a6:	f04f 0c03 	mov.w	ip, #3
 80048aa:	fa0c fc05 	lsl.w	ip, ip, r5
 80048ae:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048b2:	688c      	ldr	r4, [r1, #8]
 80048b4:	40ac      	lsls	r4, r5
 80048b6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80048ba:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048bc:	684c      	ldr	r4, [r1, #4]
 80048be:	f004 0403 	and.w	r4, r4, #3
 80048c2:	2c02      	cmp	r4, #2
 80048c4:	d089      	beq.n	80047da <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80048c6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80048cc:	f04f 0c03 	mov.w	ip, #3
 80048d0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80048d4:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048d8:	684c      	ldr	r4, [r1, #4]
 80048da:	f004 0403 	and.w	r4, r4, #3
 80048de:	fa04 f40e 	lsl.w	r4, r4, lr
 80048e2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80048e6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048e8:	684c      	ldr	r4, [r1, #4]
 80048ea:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80048ee:	d0c1      	beq.n	8004874 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f0:	4c20      	ldr	r4, [pc, #128]	; (8004974 <HAL_GPIO_Init+0x1cc>)
 80048f2:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80048f4:	f045 0501 	orr.w	r5, r5, #1
 80048f8:	6625      	str	r5, [r4, #96]	; 0x60
 80048fa:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80048fc:	f004 0401 	and.w	r4, r4, #1
 8004900:	9401      	str	r4, [sp, #4]
 8004902:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004904:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004908:	f10c 0502 	add.w	r5, ip, #2
 800490c:	4c17      	ldr	r4, [pc, #92]	; (800496c <HAL_GPIO_Init+0x1c4>)
 800490e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004912:	f003 0403 	and.w	r4, r3, #3
 8004916:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800491a:	240f      	movs	r4, #15
 800491c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004920:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004924:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004928:	f43f af6e 	beq.w	8004808 <HAL_GPIO_Init+0x60>
 800492c:	4c12      	ldr	r4, [pc, #72]	; (8004978 <HAL_GPIO_Init+0x1d0>)
 800492e:	42a0      	cmp	r0, r4
 8004930:	d012      	beq.n	8004958 <HAL_GPIO_Init+0x1b0>
 8004932:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004936:	42a0      	cmp	r0, r4
 8004938:	d010      	beq.n	800495c <HAL_GPIO_Init+0x1b4>
 800493a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800493e:	42a0      	cmp	r0, r4
 8004940:	d00e      	beq.n	8004960 <HAL_GPIO_Init+0x1b8>
 8004942:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004946:	42a0      	cmp	r0, r4
 8004948:	d00c      	beq.n	8004964 <HAL_GPIO_Init+0x1bc>
 800494a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800494e:	42a0      	cmp	r0, r4
 8004950:	f43f af58 	beq.w	8004804 <HAL_GPIO_Init+0x5c>
 8004954:	2406      	movs	r4, #6
 8004956:	e758      	b.n	800480a <HAL_GPIO_Init+0x62>
 8004958:	2401      	movs	r4, #1
 800495a:	e756      	b.n	800480a <HAL_GPIO_Init+0x62>
 800495c:	2402      	movs	r4, #2
 800495e:	e754      	b.n	800480a <HAL_GPIO_Init+0x62>
 8004960:	2403      	movs	r4, #3
 8004962:	e752      	b.n	800480a <HAL_GPIO_Init+0x62>
 8004964:	2404      	movs	r4, #4
 8004966:	e750      	b.n	800480a <HAL_GPIO_Init+0x62>
  }
}
 8004968:	b003      	add	sp, #12
 800496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496c:	40010000 	.word	0x40010000
 8004970:	40010400 	.word	0x40010400
 8004974:	40021000 	.word	0x40021000
 8004978:	48000400 	.word	0x48000400

0800497c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800497c:	6903      	ldr	r3, [r0, #16]
 800497e:	4219      	tst	r1, r3
 8004980:	d001      	beq.n	8004986 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004982:	2001      	movs	r0, #1
 8004984:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004986:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004988:	4770      	bx	lr

0800498a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800498a:	b10a      	cbz	r2, 8004990 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800498c:	6181      	str	r1, [r0, #24]
 800498e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004990:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004992:	4770      	bx	lr

08004994 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004994:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004996:	ea01 0203 	and.w	r2, r1, r3
 800499a:	ea21 0103 	bic.w	r1, r1, r3
 800499e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049a2:	6181      	str	r1, [r0, #24]
}
 80049a4:	4770      	bx	lr

080049a6 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80049a6:	4770      	bx	lr

080049a8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80049a8:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4203      	tst	r3, r0
 80049b0:	d100      	bne.n	80049b4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80049b2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80049b6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049b8:	f7ff fff5 	bl	80049a6 <HAL_GPIO_EXTI_Callback>
}
 80049bc:	e7f9      	b.n	80049b2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80049be:	bf00      	nop
 80049c0:	40010400 	.word	0x40010400

080049c4 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d136      	bne.n	8004a36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049c8:	4b3e      	ldr	r3, [pc, #248]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d008      	beq.n	80049e8 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049d6:	4a3b      	ldr	r2, [pc, #236]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80049d8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80049dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049e4:	2000      	movs	r0, #0
 80049e6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e8:	4a36      	ldr	r2, [pc, #216]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80049ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80049ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a00:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a02:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2232      	movs	r2, #50	; 0x32
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0c9b      	lsrs	r3, r3, #18
 8004a14:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a16:	e000      	b.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8004a18:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1a:	4a2a      	ldr	r2, [pc, #168]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a1c:	6952      	ldr	r2, [r2, #20]
 8004a1e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004a22:	d001      	beq.n	8004a28 <HAL_PWREx_ControlVoltageScaling+0x64>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f7      	bne.n	8004a18 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a28:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a30:	d144      	bne.n	8004abc <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8004a32:	2000      	movs	r0, #0
 8004a34:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004a3a:	d008      	beq.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a3c:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a48:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5a:	d008      	beq.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a5c:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a5e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a86:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2232      	movs	r2, #50	; 0x32
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	0c9b      	lsrs	r3, r3, #18
 8004a9a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a9c:	e000      	b.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8004a9e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aa0:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004aa2:	6952      	ldr	r2, [r2, #20]
 8004aa4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004aa8:	d001      	beq.n	8004aae <HAL_PWREx_ControlVoltageScaling+0xea>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f7      	bne.n	8004a9e <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ab6:	d103      	bne.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8004ab8:	2000      	movs	r0, #0
 8004aba:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004abc:	2003      	movs	r0, #3
 8004abe:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004ac0:	2003      	movs	r0, #3
}
 8004ac2:	4770      	bx	lr
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	431bde83 	.word	0x431bde83

08004ad0 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ad0:	4a02      	ldr	r2, [pc, #8]	; (8004adc <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004ad2:	6893      	ldr	r3, [r2, #8]
 8004ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad8:	6093      	str	r3, [r2, #8]
}
 8004ada:	4770      	bx	lr
 8004adc:	40007000 	.word	0x40007000

08004ae0 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ae8:	68d8      	ldr	r0, [r3, #12]
 8004aea:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004aee:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8004af0:	2a03      	cmp	r2, #3
 8004af2:	d011      	beq.n	8004b18 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004af4:	480e      	ldr	r0, [pc, #56]	; (8004b30 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004af6:	fbb0 f0f3 	udiv	r0, r0, r3
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8004b02:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004b0e:	3301      	adds	r3, #1
 8004b10:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8004b12:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b16:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b18:	4806      	ldr	r0, [pc, #24]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8004b1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b1e:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8004b26:	fb03 f000 	mul.w	r0, r3, r0
    break;
 8004b2a:	e7ec      	b.n	8004b06 <RCC_GetSysClockFreqFromPLLSource+0x26>
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	00f42400 	.word	0x00f42400
 8004b34:	016e3600 	.word	0x016e3600

08004b38 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f000 8254 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x4ae>
{
 8004b3e:	b570      	push	{r4, r5, r6, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b44:	6803      	ldr	r3, [r0, #0]
 8004b46:	f013 0f01 	tst.w	r3, #1
 8004b4a:	d037      	beq.n	8004bbc <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b4c:	4aa4      	ldr	r2, [pc, #656]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004b4e:	6893      	ldr	r3, [r2, #8]
 8004b50:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b5a:	2b0c      	cmp	r3, #12
 8004b5c:	d023      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x6e>
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d023      	beq.n	8004baa <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d04e      	beq.n	8004c08 <HAL_RCC_OscConfig+0xd0>
 8004b6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6e:	d051      	beq.n	8004c14 <HAL_RCC_OscConfig+0xdc>
 8004b70:	4b9b      	ldr	r3, [pc, #620]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b80:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d052      	beq.n	8004c2e <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8004b88:	f7fd ff32 	bl	80029f0 <HAL_GetTick>
 8004b8c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b8e:	4b94      	ldr	r3, [pc, #592]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b96:	d111      	bne.n	8004bbc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fd ff2a 	bl	80029f0 <HAL_GetTick>
 8004b9c:	1b40      	subs	r0, r0, r5
 8004b9e:	2864      	cmp	r0, #100	; 0x64
 8004ba0:	d9f5      	bls.n	8004b8e <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8004ba2:	2003      	movs	r0, #3
 8004ba4:	e228      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ba6:	2a03      	cmp	r2, #3
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004baa:	4b8d      	ldr	r3, [pc, #564]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCC_OscConfig+0x84>
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8217 	beq.w	8004fea <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	f013 0f02 	tst.w	r3, #2
 8004bc2:	d05d      	beq.n	8004c80 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc4:	4a86      	ldr	r2, [pc, #536]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004bc6:	6893      	ldr	r3, [r2, #8]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bcc:	68d2      	ldr	r2, [r2, #12]
 8004bce:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d03a      	beq.n	8004c4c <HAL_RCC_OscConfig+0x114>
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d03a      	beq.n	8004c50 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d075      	beq.n	8004ccc <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8004be0:	4a7f      	ldr	r2, [pc, #508]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004bea:	f7fd ff01 	bl	80029f0 <HAL_GetTick>
 8004bee:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf0:	4b7b      	ldr	r3, [pc, #492]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004bf8:	d15f      	bne.n	8004cba <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfa:	f7fd fef9 	bl	80029f0 <HAL_GetTick>
 8004bfe:	1b40      	subs	r0, r0, r5
 8004c00:	2802      	cmp	r0, #2
 8004c02:	d9f5      	bls.n	8004bf0 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8004c04:	2003      	movs	r0, #3
 8004c06:	e1f7      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	4a75      	ldr	r2, [pc, #468]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e7b6      	b.n	8004b82 <HAL_RCC_OscConfig+0x4a>
 8004c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c18:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e7a9      	b.n	8004b82 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8004c2e:	f7fd fedf 	bl	80029f0 <HAL_GetTick>
 8004c32:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c34:	4b6a      	ldr	r3, [pc, #424]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c3c:	d0be      	beq.n	8004bbc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3e:	f7fd fed7 	bl	80029f0 <HAL_GetTick>
 8004c42:	1b40      	subs	r0, r0, r5
 8004c44:	2864      	cmp	r0, #100	; 0x64
 8004c46:	d9f5      	bls.n	8004c34 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8004c48:	2003      	movs	r0, #3
 8004c4a:	e1d5      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c4c:	2a02      	cmp	r2, #2
 8004c4e:	d1c2      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c50:	4b63      	ldr	r3, [pc, #396]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c58:	d003      	beq.n	8004c62 <HAL_RCC_OscConfig+0x12a>
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 81c6 	beq.w	8004fee <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c62:	4a5f      	ldr	r2, [pc, #380]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004c64:	6853      	ldr	r3, [r2, #4]
 8004c66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c6a:	6921      	ldr	r1, [r4, #16]
 8004c6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c70:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c72:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	f7fd fe77 	bl	8002968 <HAL_InitTick>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	f040 81b9 	bne.w	8004ff2 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	f013 0f08 	tst.w	r3, #8
 8004c86:	d04c      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c88:	6963      	ldr	r3, [r4, #20]
 8004c8a:	b39b      	cbz	r3, 8004cf4 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8004c8c:	4a54      	ldr	r2, [pc, #336]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004c8e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004c9a:	f7fd fea9 	bl	80029f0 <HAL_GetTick>
 8004c9e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca0:	4b4f      	ldr	r3, [pc, #316]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca6:	f013 0f02 	tst.w	r3, #2
 8004caa:	d13a      	bne.n	8004d22 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cac:	f7fd fea0 	bl	80029f0 <HAL_GetTick>
 8004cb0:	1b40      	subs	r0, r0, r5
 8004cb2:	2802      	cmp	r0, #2
 8004cb4:	d9f4      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8004cb6:	2003      	movs	r0, #3
 8004cb8:	e19e      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4a49      	ldr	r2, [pc, #292]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004cbc:	6853      	ldr	r3, [r2, #4]
 8004cbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cc2:	6921      	ldr	r1, [r4, #16]
 8004cc4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004cc8:	6053      	str	r3, [r2, #4]
 8004cca:	e7d9      	b.n	8004c80 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8004ccc:	4a44      	ldr	r2, [pc, #272]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cd6:	f7fd fe8b 	bl	80029f0 <HAL_GetTick>
 8004cda:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cdc:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ce4:	d0cc      	beq.n	8004c80 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce6:	f7fd fe83 	bl	80029f0 <HAL_GetTick>
 8004cea:	1b40      	subs	r0, r0, r5
 8004cec:	2802      	cmp	r0, #2
 8004cee:	d9f5      	bls.n	8004cdc <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8004cf0:	2003      	movs	r0, #3
 8004cf2:	e181      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8004cf4:	4a3a      	ldr	r2, [pc, #232]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004cf6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d02:	f7fd fe75 	bl	80029f0 <HAL_GetTick>
 8004d06:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d08:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0e:	f013 0f02 	tst.w	r3, #2
 8004d12:	d006      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d14:	f7fd fe6c 	bl	80029f0 <HAL_GetTick>
 8004d18:	1b40      	subs	r0, r0, r5
 8004d1a:	2802      	cmp	r0, #2
 8004d1c:	d9f4      	bls.n	8004d08 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8004d1e:	2003      	movs	r0, #3
 8004d20:	e16a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f013 0f04 	tst.w	r3, #4
 8004d28:	f000 8081 	beq.w	8004e2e <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d2c:	4b2c      	ldr	r3, [pc, #176]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004d34:	d136      	bne.n	8004da4 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d4a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4c:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <HAL_RCC_OscConfig+0x2b0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d54:	d028      	beq.n	8004da8 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d039      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x298>
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	d045      	beq.n	8004dec <HAL_RCC_OscConfig+0x2b4>
 8004d60:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004d62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004d6e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d043      	beq.n	8004e08 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8004d80:	f7fd fe36 	bl	80029f0 <HAL_GetTick>
 8004d84:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f013 0f02 	tst.w	r3, #2
 8004d90:	d14c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fd fe2d 	bl	80029f0 <HAL_GetTick>
 8004d96:	1b80      	subs	r0, r0, r6
 8004d98:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d9c:	4298      	cmp	r0, r3
 8004d9e:	d9f2      	bls.n	8004d86 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8004da0:	2003      	movs	r0, #3
 8004da2:	e129      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8004da4:	2500      	movs	r5, #0
 8004da6:	e7d1      	b.n	8004d4c <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da8:	4a0f      	ldr	r2, [pc, #60]	; (8004de8 <HAL_RCC_OscConfig+0x2b0>)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004db2:	f7fd fe1d 	bl	80029f0 <HAL_GetTick>
 8004db6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_OscConfig+0x2b0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004dc0:	d1c9      	bne.n	8004d56 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fd fe15 	bl	80029f0 <HAL_GetTick>
 8004dc6:	1b80      	subs	r0, r0, r6
 8004dc8:	2802      	cmp	r0, #2
 8004dca:	d9f5      	bls.n	8004db8 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8004dcc:	2003      	movs	r0, #3
 8004dce:	e113      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <HAL_RCC_OscConfig+0x2a8>)
 8004dd2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dde:	e7cc      	b.n	8004d7a <HAL_RCC_OscConfig+0x242>
 8004de0:	40021000 	.word	0x40021000
 8004de4:	20000008 	.word	0x20000008
 8004de8:	40007000 	.word	0x40007000
 8004dec:	4b8a      	ldr	r3, [pc, #552]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004dee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004df2:	f042 0204 	orr.w	r2, r2, #4
 8004df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004dfa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004e06:	e7b8      	b.n	8004d7a <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8004e08:	f7fd fdf2 	bl	80029f0 <HAL_GetTick>
 8004e0c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e0e:	4b82      	ldr	r3, [pc, #520]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	f013 0f02 	tst.w	r3, #2
 8004e18:	d008      	beq.n	8004e2c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fd fde9 	bl	80029f0 <HAL_GetTick>
 8004e1e:	1b80      	subs	r0, r0, r6
 8004e20:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e24:	4298      	cmp	r0, r3
 8004e26:	d9f2      	bls.n	8004e0e <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8004e28:	2003      	movs	r0, #3
 8004e2a:	e0e5      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8004e2c:	b9e5      	cbnz	r5, 8004e68 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	f013 0f20 	tst.w	r3, #32
 8004e34:	d035      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e36:	69a3      	ldr	r3, [r4, #24]
 8004e38:	b1e3      	cbz	r3, 8004e74 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8004e3a:	4a77      	ldr	r2, [pc, #476]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004e3c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004e48:	f7fd fdd2 	bl	80029f0 <HAL_GetTick>
 8004e4c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e4e:	4b72      	ldr	r3, [pc, #456]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e54:	f013 0f02 	tst.w	r3, #2
 8004e58:	d123      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e5a:	f7fd fdc9 	bl	80029f0 <HAL_GetTick>
 8004e5e:	1b40      	subs	r0, r0, r5
 8004e60:	2802      	cmp	r0, #2
 8004e62:	d9f4      	bls.n	8004e4e <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8004e64:	2003      	movs	r0, #3
 8004e66:	e0c7      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e68:	4a6b      	ldr	r2, [pc, #428]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004e6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6593      	str	r3, [r2, #88]	; 0x58
 8004e72:	e7dc      	b.n	8004e2e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8004e74:	4a68      	ldr	r2, [pc, #416]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004e76:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004e82:	f7fd fdb5 	bl	80029f0 <HAL_GetTick>
 8004e86:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e88:	4b63      	ldr	r3, [pc, #396]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e8e:	f013 0f02 	tst.w	r3, #2
 8004e92:	d006      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e94:	f7fd fdac 	bl	80029f0 <HAL_GetTick>
 8004e98:	1b40      	subs	r0, r0, r5
 8004e9a:	2802      	cmp	r0, #2
 8004e9c:	d9f4      	bls.n	8004e88 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8004e9e:	2003      	movs	r0, #3
 8004ea0:	e0aa      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ea2:	69e3      	ldr	r3, [r4, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80a6 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eaa:	4a5b      	ldr	r2, [pc, #364]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	f002 020c 	and.w	r2, r2, #12
 8004eb2:	2a0c      	cmp	r2, #12
 8004eb4:	d069      	beq.n	8004f8a <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d01d      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8004eba:	4b57      	ldr	r3, [pc, #348]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004ec2:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	f022 0203 	bic.w	r2, r2, #3
 8004eca:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8004ed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ed6:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fd8a 	bl	80029f0 <HAL_GetTick>
 8004edc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ede:	4b4e      	ldr	r3, [pc, #312]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ee6:	d04e      	beq.n	8004f86 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fd fd82 	bl	80029f0 <HAL_GetTick>
 8004eec:	1b00      	subs	r0, r0, r4
 8004eee:	2802      	cmp	r0, #2
 8004ef0:	d9f5      	bls.n	8004ede <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	e080      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	4a48      	ldr	r2, [pc, #288]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f00:	f7fd fd76 	bl	80029f0 <HAL_GetTick>
 8004f04:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f06:	4b44      	ldr	r3, [pc, #272]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f0e:	d006      	beq.n	8004f1e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fd fd6e 	bl	80029f0 <HAL_GetTick>
 8004f14:	1b40      	subs	r0, r0, r5
 8004f16:	2802      	cmp	r0, #2
 8004f18:	d9f5      	bls.n	8004f06 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8004f1a:	2003      	movs	r0, #3
 8004f1c:	e06c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f1e:	4a3e      	ldr	r2, [pc, #248]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004f20:	68d3      	ldr	r3, [r2, #12]
 8004f22:	493e      	ldr	r1, [pc, #248]	; (800501c <HAL_RCC_OscConfig+0x4e4>)
 8004f24:	4019      	ands	r1, r3
 8004f26:	6a23      	ldr	r3, [r4, #32]
 8004f28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004f2a:	3801      	subs	r0, #1
 8004f2c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004f30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004f32:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004f36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004f38:	0840      	lsrs	r0, r0, #1
 8004f3a:	3801      	subs	r0, #1
 8004f3c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004f40:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004f42:	0840      	lsrs	r0, r0, #1
 8004f44:	3801      	subs	r0, #1
 8004f46:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004f4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f4c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8004f50:	430b      	orrs	r3, r1
 8004f52:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004f54:	6813      	ldr	r3, [r2, #0]
 8004f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f5a:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f5c:	68d3      	ldr	r3, [r2, #12]
 8004f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f62:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004f64:	f7fd fd44 	bl	80029f0 <HAL_GetTick>
 8004f68:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f72:	d106      	bne.n	8004f82 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fd fd3c 	bl	80029f0 <HAL_GetTick>
 8004f78:	1b00      	subs	r0, r0, r4
 8004f7a:	2802      	cmp	r0, #2
 8004f7c:	d9f5      	bls.n	8004f6a <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8004f7e:	2003      	movs	r0, #3
 8004f80:	e03a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8004f82:	2000      	movs	r0, #0
 8004f84:	e038      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e036      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d036      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <HAL_RCC_OscConfig+0x4e0>)
 8004f90:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	f003 0103 	and.w	r1, r3, #3
 8004f96:	6a22      	ldr	r2, [r4, #32]
 8004f98:	4291      	cmp	r1, r2
 8004f9a:	d131      	bne.n	8005000 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fa2:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004fa8:	d12c      	bne.n	8005004 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004faa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fb0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004fb4:	d128      	bne.n	8005008 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fbc:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004fc0:	d124      	bne.n	800500c <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004fc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fc8:	0852      	lsrs	r2, r2, #1
 8004fca:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fcc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004fd0:	d11e      	bne.n	8005010 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fd2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004fd6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004fd8:	0852      	lsrs	r2, r2, #1
 8004fda:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fdc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004fe0:	d118      	bne.n	8005014 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8004fe6:	2001      	movs	r0, #1
}
 8004fe8:	4770      	bx	lr
        return HAL_ERROR;
 8004fea:	2001      	movs	r0, #1
 8004fec:	e004      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8004fee:	2001      	movs	r0, #1
 8004ff0:	e002      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8004ff6:	2000      	movs	r0, #0
}
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	e7fb      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8005000:	2001      	movs	r0, #1
 8005002:	e7f9      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
 8005004:	2001      	movs	r0, #1
 8005006:	e7f7      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
 8005008:	2001      	movs	r0, #1
 800500a:	e7f5      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
 800500c:	2001      	movs	r0, #1
 800500e:	e7f3      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
 8005010:	2001      	movs	r0, #1
 8005012:	e7f1      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
 8005014:	2001      	movs	r0, #1
 8005016:	e7ef      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4c0>
 8005018:	40021000 	.word	0x40021000
 800501c:	019f800c 	.word	0x019f800c

08005020 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005020:	4b1e      	ldr	r3, [pc, #120]	; (800509c <HAL_RCC_GetSysClockFreq+0x7c>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b04      	cmp	r3, #4
 800502a:	d033      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_RCC_GetSysClockFreq+0x7c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 030c 	and.w	r3, r3, #12
 8005034:	2b08      	cmp	r3, #8
 8005036:	d02f      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005038:	4b18      	ldr	r3, [pc, #96]	; (800509c <HAL_RCC_GetSysClockFreq+0x7c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	2b0c      	cmp	r3, #12
 8005042:	d001      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8005044:	2000      	movs	r0, #0
}
 8005046:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005048:	4b14      	ldr	r3, [pc, #80]	; (800509c <HAL_RCC_GetSysClockFreq+0x7c>)
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005050:	68d8      	ldr	r0, [r3, #12]
 8005052:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005056:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8005058:	2a03      	cmp	r2, #3
 800505a:	d011      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800505c:	4810      	ldr	r0, [pc, #64]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x80>)
 800505e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <HAL_RCC_GetSysClockFreq+0x7c>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800506a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_GetSysClockFreq+0x7c>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005076:	3301      	adds	r3, #1
 8005078:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800507a:	fbb0 f0f3 	udiv	r0, r0, r3
 800507e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005080:	4808      	ldr	r0, [pc, #32]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x84>)
 8005082:	fbb0 f0f3 	udiv	r0, r0, r3
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetSysClockFreq+0x7c>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800508e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8005092:	e7ec      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x80>)
 8005096:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x84>)
 800509a:	4770      	bx	lr
 800509c:	40021000 	.word	0x40021000
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	016e3600 	.word	0x016e3600

080050a8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80050a8:	2800      	cmp	r0, #0
 80050aa:	f000 80e6 	beq.w	800527a <HAL_RCC_ClockConfig+0x1d2>
{
 80050ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b0:	460c      	mov	r4, r1
 80050b2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b74      	ldr	r3, [pc, #464]	; (8005288 <HAL_RCC_ClockConfig+0x1e0>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	428b      	cmp	r3, r1
 80050be:	d20b      	bcs.n	80050d8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c0:	4a71      	ldr	r2, [pc, #452]	; (8005288 <HAL_RCC_ClockConfig+0x1e0>)
 80050c2:	6813      	ldr	r3, [r2, #0]
 80050c4:	f023 030f 	bic.w	r3, r3, #15
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050cc:	6813      	ldr	r3, [r2, #0]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	428b      	cmp	r3, r1
 80050d4:	f040 80d3 	bne.w	800527e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d8:	682e      	ldr	r6, [r5, #0]
 80050da:	f016 0601 	ands.w	r6, r6, #1
 80050de:	d05f      	beq.n	80051a0 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e0:	686b      	ldr	r3, [r5, #4]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d02f      	beq.n	8005146 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d04d      	beq.n	8005186 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ea:	4b68      	ldr	r3, [pc, #416]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80050f2:	f000 80c6 	beq.w	8005282 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050f6:	f7ff ff93 	bl	8005020 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80050fa:	4b65      	ldr	r3, [pc, #404]	; (8005290 <HAL_RCC_ClockConfig+0x1e8>)
 80050fc:	4298      	cmp	r0, r3
 80050fe:	d94d      	bls.n	800519c <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005100:	4a62      	ldr	r2, [pc, #392]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005102:	6893      	ldr	r3, [r2, #8]
 8005104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800510e:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005110:	4a5e      	ldr	r2, [pc, #376]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005112:	6893      	ldr	r3, [r2, #8]
 8005114:	f023 0303 	bic.w	r3, r3, #3
 8005118:	6869      	ldr	r1, [r5, #4]
 800511a:	430b      	orrs	r3, r1
 800511c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800511e:	f7fd fc67 	bl	80029f0 <HAL_GetTick>
 8005122:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005124:	4b59      	ldr	r3, [pc, #356]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	686a      	ldr	r2, [r5, #4]
 800512e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005132:	d035      	beq.n	80051a0 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005134:	f7fd fc5c 	bl	80029f0 <HAL_GetTick>
 8005138:	1bc0      	subs	r0, r0, r7
 800513a:	f241 3388 	movw	r3, #5000	; 0x1388
 800513e:	4298      	cmp	r0, r3
 8005140:	d9f0      	bls.n	8005124 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8005142:	2003      	movs	r0, #3
 8005144:	e078      	b.n	8005238 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005146:	4b51      	ldr	r3, [pc, #324]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800514e:	d101      	bne.n	8005154 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8005150:	2001      	movs	r0, #1
 8005152:	e071      	b.n	8005238 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005154:	f7ff fcc4 	bl	8004ae0 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8005158:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <HAL_RCC_ClockConfig+0x1e8>)
 800515a:	4298      	cmp	r0, r3
 800515c:	d91a      	bls.n	8005194 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800515e:	4b4b      	ldr	r3, [pc, #300]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005168:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800516a:	f016 0602 	ands.w	r6, r6, #2
 800516e:	d0cf      	beq.n	8005110 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005170:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005172:	b98b      	cbnz	r3, 8005198 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005174:	4a45      	ldr	r2, [pc, #276]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005176:	6893      	ldr	r3, [r2, #8]
 8005178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800517c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005180:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005182:	2680      	movs	r6, #128	; 0x80
 8005184:	e7c4      	b.n	8005110 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005186:	4b41      	ldr	r3, [pc, #260]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800518e:	d1b2      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8005190:	2001      	movs	r0, #1
 8005192:	e051      	b.n	8005238 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005194:	2600      	movs	r6, #0
 8005196:	e7bb      	b.n	8005110 <HAL_RCC_ClockConfig+0x68>
 8005198:	2600      	movs	r6, #0
 800519a:	e7b9      	b.n	8005110 <HAL_RCC_ClockConfig+0x68>
 800519c:	2600      	movs	r6, #0
 800519e:	e7b7      	b.n	8005110 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	f013 0f02 	tst.w	r3, #2
 80051a6:	d048      	beq.n	800523a <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a8:	f013 0f04 	tst.w	r3, #4
 80051ac:	d004      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ae:	4a37      	ldr	r2, [pc, #220]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 80051b0:	6893      	ldr	r3, [r2, #8]
 80051b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051b6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	f013 0f08 	tst.w	r3, #8
 80051be:	d006      	beq.n	80051ce <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051c0:	4a32      	ldr	r2, [pc, #200]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 80051c2:	6893      	ldr	r3, [r2, #8]
 80051c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80051c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051cc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 80051d0:	6893      	ldr	r3, [r2, #8]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d6:	68a9      	ldr	r1, [r5, #8]
 80051d8:	430b      	orrs	r3, r1
 80051da:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <HAL_RCC_ClockConfig+0x1e0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d830      	bhi.n	800524a <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	f013 0f04 	tst.w	r3, #4
 80051ee:	d006      	beq.n	80051fe <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f0:	4a26      	ldr	r2, [pc, #152]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 80051f2:	6893      	ldr	r3, [r2, #8]
 80051f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051f8:	68e9      	ldr	r1, [r5, #12]
 80051fa:	430b      	orrs	r3, r1
 80051fc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	f013 0f08 	tst.w	r3, #8
 8005204:	d007      	beq.n	8005216 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005206:	4a21      	ldr	r2, [pc, #132]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005208:	6893      	ldr	r3, [r2, #8]
 800520a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800520e:	6929      	ldr	r1, [r5, #16]
 8005210:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005214:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005216:	f7ff ff03 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 800521a:	4b1c      	ldr	r3, [pc, #112]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_RCC_ClockConfig+0x1ec>)
 8005224:	5cd3      	ldrb	r3, [r2, r3]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	40d8      	lsrs	r0, r3
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <HAL_RCC_ClockConfig+0x1f0>)
 800522e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005230:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_RCC_ClockConfig+0x1f4>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	f7fd fb98 	bl	8002968 <HAL_InitTick>
}
 8005238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800523a:	2e80      	cmp	r6, #128	; 0x80
 800523c:	d1ce      	bne.n	80051dc <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800523e:	4a13      	ldr	r2, [pc, #76]	; (800528c <HAL_RCC_ClockConfig+0x1e4>)
 8005240:	6893      	ldr	r3, [r2, #8]
 8005242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005246:	6093      	str	r3, [r2, #8]
 8005248:	e7c8      	b.n	80051dc <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4a0f      	ldr	r2, [pc, #60]	; (8005288 <HAL_RCC_ClockConfig+0x1e0>)
 800524c:	6813      	ldr	r3, [r2, #0]
 800524e:	f023 030f 	bic.w	r3, r3, #15
 8005252:	4323      	orrs	r3, r4
 8005254:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005256:	f7fd fbcb 	bl	80029f0 <HAL_GetTick>
 800525a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x1e0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	42a3      	cmp	r3, r4
 8005266:	d0bf      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fd fbc2 	bl	80029f0 <HAL_GetTick>
 800526c:	1b80      	subs	r0, r0, r6
 800526e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005272:	4298      	cmp	r0, r3
 8005274:	d9f2      	bls.n	800525c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8005276:	2003      	movs	r0, #3
 8005278:	e7de      	b.n	8005238 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800527a:	2001      	movs	r0, #1
}
 800527c:	4770      	bx	lr
      return HAL_ERROR;
 800527e:	2001      	movs	r0, #1
 8005280:	e7da      	b.n	8005238 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8005282:	2001      	movs	r0, #1
 8005284:	e7d8      	b.n	8005238 <HAL_RCC_ClockConfig+0x190>
 8005286:	bf00      	nop
 8005288:	40022000 	.word	0x40022000
 800528c:	40021000 	.word	0x40021000
 8005290:	04c4b400 	.word	0x04c4b400
 8005294:	08007d84 	.word	0x08007d84
 8005298:	20000000 	.word	0x20000000
 800529c:	20000008 	.word	0x20000008

080052a0 <HAL_RCC_GetHCLKFreq>:
}
 80052a0:	4b01      	ldr	r3, [pc, #4]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	20000000 	.word	0x20000000

080052ac <HAL_RCC_GetPCLK1Freq>:
{
 80052ac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052ae:	f7ff fff7 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80052ba:	4a04      	ldr	r2, [pc, #16]	; (80052cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052bc:	5cd3      	ldrb	r3, [r2, r3]
 80052be:	f003 031f 	and.w	r3, r3, #31
}
 80052c2:	40d8      	lsrs	r0, r3
 80052c4:	bd08      	pop	{r3, pc}
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000
 80052cc:	08007d94 	.word	0x08007d94

080052d0 <HAL_RCC_GetPCLK2Freq>:
{
 80052d0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052d2:	f7ff ffe5 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80052de:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052e0:	5cd3      	ldrb	r3, [r2, r3]
 80052e2:	f003 031f 	and.w	r3, r3, #31
}
 80052e6:	40d8      	lsrs	r0, r3
 80052e8:	bd08      	pop	{r3, pc}
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	08007d94 	.word	0x08007d94

080052f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f6:	b083      	sub	sp, #12
 80052f8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052fa:	6803      	ldr	r3, [r0, #0]
 80052fc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005300:	d06e      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005302:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800530a:	d11e      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800530c:	4b32      	ldr	r3, [pc, #200]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800530e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005314:	659a      	str	r2, [r3, #88]	; 0x58
 8005316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005320:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005322:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800532c:	f7fd fb60 	bl	80029f0 <HAL_GetTick>
 8005330:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005332:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f413 7f80 	tst.w	r3, #256	; 0x100
 800533a:	d108      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533c:	f7fd fb58 	bl	80029f0 <HAL_GetTick>
 8005340:	1b40      	subs	r0, r0, r5
 8005342:	2802      	cmp	r0, #2
 8005344:	d9f5      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8005346:	2503      	movs	r5, #3
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800534a:	2600      	movs	r6, #0
 800534c:	e7e9      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800534e:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8005350:	bb45      	cbnz	r5, 80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005352:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005358:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800535c:	d015      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x96>
 800535e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005360:	429a      	cmp	r2, r3
 8005362:	d012      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005364:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005366:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800536e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005372:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005376:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800537a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800537e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005382:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800538a:	f013 0f01 	tst.w	r3, #1
 800538e:	d110      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8005390:	b945      	cbnz	r5, 80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005392:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005394:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800539e:	430b      	orrs	r3, r1
 80053a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053a4:	b1ee      	cbz	r6, 80053e2 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80053a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80053aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ae:	6593      	str	r3, [r2, #88]	; 0x58
 80053b0:	e017      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 80053b2:	f7fd fb1d 	bl	80029f0 <HAL_GetTick>
 80053b6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	f013 0f02 	tst.w	r3, #2
 80053c2:	d1e5      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c4:	f7fd fb14 	bl	80029f0 <HAL_GetTick>
 80053c8:	1bc0      	subs	r0, r0, r7
 80053ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80053ce:	4298      	cmp	r0, r3
 80053d0:	d9f2      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 80053d2:	2503      	movs	r5, #3
 80053d4:	e7dc      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053e0:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f013 0f01 	tst.w	r3, #1
 80053e8:	d008      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ea:	4a9f      	ldr	r2, [pc, #636]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053f0:	f023 0303 	bic.w	r3, r3, #3
 80053f4:	6861      	ldr	r1, [r4, #4]
 80053f6:	430b      	orrs	r3, r1
 80053f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	f013 0f02 	tst.w	r3, #2
 8005402:	d008      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005404:	4a98      	ldr	r2, [pc, #608]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005406:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800540a:	f023 030c 	bic.w	r3, r3, #12
 800540e:	68a1      	ldr	r1, [r4, #8]
 8005410:	430b      	orrs	r3, r1
 8005412:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	f013 0f04 	tst.w	r3, #4
 800541c:	d008      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800541e:	4a92      	ldr	r2, [pc, #584]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005420:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005424:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005428:	68e1      	ldr	r1, [r4, #12]
 800542a:	430b      	orrs	r3, r1
 800542c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	f013 0f08 	tst.w	r3, #8
 8005436:	d008      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005438:	4a8b      	ldr	r2, [pc, #556]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800543a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800543e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005442:	6921      	ldr	r1, [r4, #16]
 8005444:	430b      	orrs	r3, r1
 8005446:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	f013 0f10 	tst.w	r3, #16
 8005450:	d008      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005452:	4a85      	ldr	r2, [pc, #532]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005454:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545c:	6961      	ldr	r1, [r4, #20]
 800545e:	430b      	orrs	r3, r1
 8005460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f013 0f20 	tst.w	r3, #32
 800546a:	d008      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800546c:	4a7e      	ldr	r2, [pc, #504]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800546e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005472:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005476:	69a1      	ldr	r1, [r4, #24]
 8005478:	430b      	orrs	r3, r1
 800547a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005484:	d008      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005486:	4a78      	ldr	r2, [pc, #480]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005488:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800548c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005490:	69e1      	ldr	r1, [r4, #28]
 8005492:	430b      	orrs	r3, r1
 8005494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800549e:	d008      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a0:	4a71      	ldr	r2, [pc, #452]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80054aa:	6a21      	ldr	r1, [r4, #32]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054b8:	d008      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ba:	4a6b      	ldr	r2, [pc, #428]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054c6:	430b      	orrs	r3, r1
 80054c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80054d2:	d008      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054d4:	4a64      	ldr	r2, [pc, #400]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80054e0:	430b      	orrs	r3, r1
 80054e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80054ec:	d008      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ee:	4a5e      	ldr	r2, [pc, #376]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054f4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80054f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054fa:	430b      	orrs	r3, r1
 80054fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005506:	d00c      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005508:	4a57      	ldr	r2, [pc, #348]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800550a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800550e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005512:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005514:	430b      	orrs	r3, r1
 8005516:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800551a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d079      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005528:	d00c      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800552a:	4a4f      	ldr	r2, [pc, #316]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800552c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005530:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005536:	430b      	orrs	r3, r1
 8005538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800553c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800553e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005542:	d06d      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800554a:	d00c      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800554c:	4a46      	ldr	r2, [pc, #280]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800554e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005552:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005556:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005558:	430b      	orrs	r3, r1
 800555a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800555e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005564:	d061      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800556c:	d00c      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800556e:	4a3e      	ldr	r2, [pc, #248]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005570:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005574:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005578:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800557a:	430b      	orrs	r3, r1
 800557c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005580:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005586:	d055      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800558e:	d00c      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005590:	4a35      	ldr	r2, [pc, #212]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005592:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005596:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800559a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800559c:	430b      	orrs	r3, r1
 800559e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a8:	d049      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80055b0:	d00c      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055b2:	4a2d      	ldr	r2, [pc, #180]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80055bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80055be:	430b      	orrs	r3, r1
 80055c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80055c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ca:	d03d      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80055d2:	d00c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80055d4:	4a24      	ldr	r2, [pc, #144]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80055de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055e0:	430b      	orrs	r3, r1
 80055e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80055e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ec:	d031      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80055f4:	d00c      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055f6:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055f8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80055fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005600:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005602:	430b      	orrs	r3, r1
 8005604:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005608:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800560a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560e:	d025      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8005610:	4628      	mov	r0, r5
 8005612:	b003      	add	sp, #12
 8005614:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005616:	68d3      	ldr	r3, [r2, #12]
 8005618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800561c:	60d3      	str	r3, [r2, #12]
 800561e:	e780      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005620:	68d3      	ldr	r3, [r2, #12]
 8005622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005626:	60d3      	str	r3, [r2, #12]
 8005628:	e78c      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562a:	68d3      	ldr	r3, [r2, #12]
 800562c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005630:	60d3      	str	r3, [r2, #12]
 8005632:	e798      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005634:	68d3      	ldr	r3, [r2, #12]
 8005636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800563a:	60d3      	str	r3, [r2, #12]
 800563c:	e7a4      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800563e:	68d3      	ldr	r3, [r2, #12]
 8005640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005644:	60d3      	str	r3, [r2, #12]
 8005646:	e7b0      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005648:	68d3      	ldr	r3, [r2, #12]
 800564a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564e:	60d3      	str	r3, [r2, #12]
 8005650:	e7bc      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005652:	68d3      	ldr	r3, [r2, #12]
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	60d3      	str	r3, [r2, #12]
 800565a:	e7c8      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800565c:	68d3      	ldr	r3, [r2, #12]
 800565e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005662:	60d3      	str	r3, [r2, #12]
 8005664:	e7d4      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005666:	bf00      	nop
 8005668:	40021000 	.word	0x40021000

0800566c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	6a03      	ldr	r3, [r0, #32]
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800567c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005680:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	680c      	ldr	r4, [r1, #0]
 8005686:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005688:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800568c:	688c      	ldr	r4, [r1, #8]
 800568e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005690:	4c21      	ldr	r4, [pc, #132]	; (8005718 <TIM_OC1_SetConfig+0xac>)
 8005692:	42a0      	cmp	r0, r4
 8005694:	d013      	beq.n	80056be <TIM_OC1_SetConfig+0x52>
 8005696:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800569a:	42a0      	cmp	r0, r4
 800569c:	d00f      	beq.n	80056be <TIM_OC1_SetConfig+0x52>
 800569e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80056a2:	42a0      	cmp	r0, r4
 80056a4:	d00b      	beq.n	80056be <TIM_OC1_SetConfig+0x52>
 80056a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056aa:	42a0      	cmp	r0, r4
 80056ac:	d007      	beq.n	80056be <TIM_OC1_SetConfig+0x52>
 80056ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056b2:	42a0      	cmp	r0, r4
 80056b4:	d003      	beq.n	80056be <TIM_OC1_SetConfig+0x52>
 80056b6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80056ba:	42a0      	cmp	r0, r4
 80056bc:	d105      	bne.n	80056ca <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056be:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c2:	68cc      	ldr	r4, [r1, #12]
 80056c4:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ca:	4c13      	ldr	r4, [pc, #76]	; (8005718 <TIM_OC1_SetConfig+0xac>)
 80056cc:	42a0      	cmp	r0, r4
 80056ce:	d013      	beq.n	80056f8 <TIM_OC1_SetConfig+0x8c>
 80056d0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d00f      	beq.n	80056f8 <TIM_OC1_SetConfig+0x8c>
 80056d8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d00b      	beq.n	80056f8 <TIM_OC1_SetConfig+0x8c>
 80056e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d007      	beq.n	80056f8 <TIM_OC1_SetConfig+0x8c>
 80056e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056ec:	42a0      	cmp	r0, r4
 80056ee:	d003      	beq.n	80056f8 <TIM_OC1_SetConfig+0x8c>
 80056f0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	d107      	bne.n	8005708 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f8:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056fc:	694c      	ldr	r4, [r1, #20]
 80056fe:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005702:	698d      	ldr	r5, [r1, #24]
 8005704:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005708:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800570a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800570c:	684a      	ldr	r2, [r1, #4]
 800570e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005710:	6203      	str	r3, [r0, #32]
}
 8005712:	bc30      	pop	{r4, r5}
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40012c00 	.word	0x40012c00

0800571c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800571e:	6a03      	ldr	r3, [r0, #32]
 8005720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005724:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800572c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005730:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005734:	680d      	ldr	r5, [r1, #0]
 8005736:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800573c:	688d      	ldr	r5, [r1, #8]
 800573e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005742:	4d1c      	ldr	r5, [pc, #112]	; (80057b4 <TIM_OC3_SetConfig+0x98>)
 8005744:	42a8      	cmp	r0, r5
 8005746:	d007      	beq.n	8005758 <TIM_OC3_SetConfig+0x3c>
 8005748:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800574c:	42a8      	cmp	r0, r5
 800574e:	d003      	beq.n	8005758 <TIM_OC3_SetConfig+0x3c>
 8005750:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8005754:	42a8      	cmp	r0, r5
 8005756:	d106      	bne.n	8005766 <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575c:	68cd      	ldr	r5, [r1, #12]
 800575e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005766:	4d13      	ldr	r5, [pc, #76]	; (80057b4 <TIM_OC3_SetConfig+0x98>)
 8005768:	42a8      	cmp	r0, r5
 800576a:	d013      	beq.n	8005794 <TIM_OC3_SetConfig+0x78>
 800576c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005770:	42a8      	cmp	r0, r5
 8005772:	d00f      	beq.n	8005794 <TIM_OC3_SetConfig+0x78>
 8005774:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005778:	42a8      	cmp	r0, r5
 800577a:	d00b      	beq.n	8005794 <TIM_OC3_SetConfig+0x78>
 800577c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005780:	42a8      	cmp	r0, r5
 8005782:	d007      	beq.n	8005794 <TIM_OC3_SetConfig+0x78>
 8005784:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005788:	42a8      	cmp	r0, r5
 800578a:	d003      	beq.n	8005794 <TIM_OC3_SetConfig+0x78>
 800578c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005790:	42a8      	cmp	r0, r5
 8005792:	d107      	bne.n	80057a4 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005794:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005798:	694c      	ldr	r4, [r1, #20]
 800579a:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800579e:	698c      	ldr	r4, [r1, #24]
 80057a0:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057a8:	684a      	ldr	r2, [r1, #4]
 80057aa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ac:	6203      	str	r3, [r0, #32]
}
 80057ae:	bc30      	pop	{r4, r5}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40012c00 	.word	0x40012c00

080057b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ba:	6a03      	ldr	r3, [r0, #32]
 80057bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80057cc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	680d      	ldr	r5, [r1, #0]
 80057d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057da:	688d      	ldr	r5, [r1, #8]
 80057dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057e0:	4d1b      	ldr	r5, [pc, #108]	; (8005850 <TIM_OC4_SetConfig+0x98>)
 80057e2:	42a8      	cmp	r0, r5
 80057e4:	d007      	beq.n	80057f6 <TIM_OC4_SetConfig+0x3e>
 80057e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80057ea:	42a8      	cmp	r0, r5
 80057ec:	d003      	beq.n	80057f6 <TIM_OC4_SetConfig+0x3e>
 80057ee:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80057f2:	42a8      	cmp	r0, r5
 80057f4:	d106      	bne.n	8005804 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057fa:	68cd      	ldr	r5, [r1, #12]
 80057fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	4d12      	ldr	r5, [pc, #72]	; (8005850 <TIM_OC4_SetConfig+0x98>)
 8005806:	42a8      	cmp	r0, r5
 8005808:	d013      	beq.n	8005832 <TIM_OC4_SetConfig+0x7a>
 800580a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800580e:	42a8      	cmp	r0, r5
 8005810:	d00f      	beq.n	8005832 <TIM_OC4_SetConfig+0x7a>
 8005812:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005816:	42a8      	cmp	r0, r5
 8005818:	d00b      	beq.n	8005832 <TIM_OC4_SetConfig+0x7a>
 800581a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800581e:	42a8      	cmp	r0, r5
 8005820:	d007      	beq.n	8005832 <TIM_OC4_SetConfig+0x7a>
 8005822:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005826:	42a8      	cmp	r0, r5
 8005828:	d003      	beq.n	8005832 <TIM_OC4_SetConfig+0x7a>
 800582a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800582e:	42a8      	cmp	r0, r5
 8005830:	d107      	bne.n	8005842 <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005832:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005836:	694c      	ldr	r4, [r1, #20]
 8005838:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800583c:	698c      	ldr	r4, [r1, #24]
 800583e:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005842:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005844:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005846:	684a      	ldr	r2, [r1, #4]
 8005848:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	6203      	str	r3, [r0, #32]
}
 800584c:	bc30      	pop	{r4, r5}
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00

08005854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005856:	6a03      	ldr	r3, [r0, #32]
 8005858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005862:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005864:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005868:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	680d      	ldr	r5, [r1, #0]
 800586e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005870:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005874:	688d      	ldr	r5, [r1, #8]
 8005876:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587a:	4d11      	ldr	r5, [pc, #68]	; (80058c0 <TIM_OC5_SetConfig+0x6c>)
 800587c:	42a8      	cmp	r0, r5
 800587e:	d013      	beq.n	80058a8 <TIM_OC5_SetConfig+0x54>
 8005880:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005884:	42a8      	cmp	r0, r5
 8005886:	d00f      	beq.n	80058a8 <TIM_OC5_SetConfig+0x54>
 8005888:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800588c:	42a8      	cmp	r0, r5
 800588e:	d00b      	beq.n	80058a8 <TIM_OC5_SetConfig+0x54>
 8005890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005894:	42a8      	cmp	r0, r5
 8005896:	d007      	beq.n	80058a8 <TIM_OC5_SetConfig+0x54>
 8005898:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800589c:	42a8      	cmp	r0, r5
 800589e:	d003      	beq.n	80058a8 <TIM_OC5_SetConfig+0x54>
 80058a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058a4:	42a8      	cmp	r0, r5
 80058a6:	d104      	bne.n	80058b2 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058a8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058ac:	694d      	ldr	r5, [r1, #20]
 80058ae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058b4:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058b6:	684a      	ldr	r2, [r1, #4]
 80058b8:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	6203      	str	r3, [r0, #32]
}
 80058bc:	bc30      	pop	{r4, r5}
 80058be:	4770      	bx	lr
 80058c0:	40012c00 	.word	0x40012c00

080058c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058c6:	6a03      	ldr	r3, [r0, #32]
 80058c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80058cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058d2:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058d4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80058d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058dc:	680d      	ldr	r5, [r1, #0]
 80058de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058e6:	688d      	ldr	r5, [r1, #8]
 80058e8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	4d11      	ldr	r5, [pc, #68]	; (8005934 <TIM_OC6_SetConfig+0x70>)
 80058ee:	42a8      	cmp	r0, r5
 80058f0:	d013      	beq.n	800591a <TIM_OC6_SetConfig+0x56>
 80058f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058f6:	42a8      	cmp	r0, r5
 80058f8:	d00f      	beq.n	800591a <TIM_OC6_SetConfig+0x56>
 80058fa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80058fe:	42a8      	cmp	r0, r5
 8005900:	d00b      	beq.n	800591a <TIM_OC6_SetConfig+0x56>
 8005902:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005906:	42a8      	cmp	r0, r5
 8005908:	d007      	beq.n	800591a <TIM_OC6_SetConfig+0x56>
 800590a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800590e:	42a8      	cmp	r0, r5
 8005910:	d003      	beq.n	800591a <TIM_OC6_SetConfig+0x56>
 8005912:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005916:	42a8      	cmp	r0, r5
 8005918:	d104      	bne.n	8005924 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800591a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800591e:	694d      	ldr	r5, [r1, #20]
 8005920:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005924:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005926:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005928:	684a      	ldr	r2, [r1, #4]
 800592a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	6203      	str	r3, [r0, #32]
}
 800592e:	bc30      	pop	{r4, r5}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40012c00 	.word	0x40012c00

08005938 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005938:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593a:	6a04      	ldr	r4, [r0, #32]
 800593c:	f024 0410 	bic.w	r4, r4, #16
 8005940:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005942:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005944:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005946:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800594a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594e:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005952:	031b      	lsls	r3, r3, #12
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595a:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800595e:	0109      	lsls	r1, r1, #4
 8005960:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8005964:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005966:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005968:	6201      	str	r1, [r0, #32]
}
 800596a:	bc30      	pop	{r4, r5}
 800596c:	4770      	bx	lr

0800596e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800596e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005970:	6a04      	ldr	r4, [r0, #32]
 8005972:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8005976:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005978:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800597a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800597c:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8005980:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005984:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	b2db      	uxtb	r3, r3
 800598c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005990:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005994:	0209      	lsls	r1, r1, #8
 8005996:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 800599a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800599c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800599e:	6201      	str	r1, [r0, #32]
}
 80059a0:	bc30      	pop	{r4, r5}
 80059a2:	4770      	bx	lr

080059a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059a4:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059a6:	6a04      	ldr	r4, [r0, #32]
 80059a8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80059ac:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059ae:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80059b0:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80059b2:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80059b6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80059ba:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059be:	031b      	lsls	r3, r3, #12
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059c6:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059ca:	0309      	lsls	r1, r1, #12
 80059cc:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 80059d0:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059d2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 80059d4:	6201      	str	r1, [r0, #32]
}
 80059d6:	bc30      	pop	{r4, r5}
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80059dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d135      	bne.n	8005a52 <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 80059e6:	2302      	movs	r3, #2
 80059e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ec:	6803      	ldr	r3, [r0, #0]
 80059ee:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <HAL_TIM_Base_Start+0x84>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d020      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d01d      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
 80059fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d019      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
 8005a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d015      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
 8005a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d011      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
 8005a12:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00d      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
 8005a1a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
 8005a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d005      	beq.n	8005a36 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a32:	2000      	movs	r0, #0
 8005a34:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <HAL_TIM_Base_Start+0x88>)
 8005a3a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	2a06      	cmp	r2, #6
 8005a3e:	d00a      	beq.n	8005a56 <HAL_TIM_Base_Start+0x7a>
 8005a40:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005a44:	d009      	beq.n	8005a5a <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a4e:	2000      	movs	r0, #0
 8005a50:	4770      	bx	lr
    return HAL_ERROR;
 8005a52:	2001      	movs	r0, #1
 8005a54:	4770      	bx	lr
  return HAL_OK;
 8005a56:	2000      	movs	r0, #0
 8005a58:	4770      	bx	lr
 8005a5a:	2000      	movs	r0, #0
}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	00010007 	.word	0x00010007

08005a68 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005a68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d13a      	bne.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a78:	6802      	ldr	r2, [r0, #0]
 8005a7a:	68d3      	ldr	r3, [r2, #12]
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a82:	6803      	ldr	r3, [r0, #0]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <HAL_TIM_Base_Start_IT+0x8c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d020      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d01d      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
 8005a90:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d019      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
 8005a98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d015      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
 8005aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d011      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
 8005aa8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00d      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
 8005ab0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
 8005ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d005      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005ac8:	2000      	movs	r0, #0
 8005aca:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005acc:	6899      	ldr	r1, [r3, #8]
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <HAL_TIM_Base_Start_IT+0x90>)
 8005ad0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	2a06      	cmp	r2, #6
 8005ad4:	d00a      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x84>
 8005ad6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005ada:	d009      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	4770      	bx	lr
    return HAL_ERROR;
 8005ae8:	2001      	movs	r0, #1
 8005aea:	4770      	bx	lr
  return HAL_OK;
 8005aec:	2000      	movs	r0, #0
 8005aee:	4770      	bx	lr
 8005af0:	2000      	movs	r0, #0
}
 8005af2:	4770      	bx	lr
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	00010007 	.word	0x00010007

08005afc <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 8005afc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIM_GenerateEvent+0x26>
 8005b04:	2301      	movs	r3, #1
 8005b06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 8005b10:	6802      	ldr	r2, [r0, #0]
 8005b12:	6151      	str	r1, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005b1e:	4618      	mov	r0, r3
 8005b20:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005b22:	2002      	movs	r0, #2
}
 8005b24:	4770      	bx	lr
	...

08005b28 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005b28:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b2a:	4a36      	ldr	r2, [pc, #216]	; (8005c04 <TIM_Base_SetConfig+0xdc>)
 8005b2c:	4290      	cmp	r0, r2
 8005b2e:	d016      	beq.n	8005b5e <TIM_Base_SetConfig+0x36>
 8005b30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b34:	d013      	beq.n	8005b5e <TIM_Base_SetConfig+0x36>
 8005b36:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005b3a:	4290      	cmp	r0, r2
 8005b3c:	d00f      	beq.n	8005b5e <TIM_Base_SetConfig+0x36>
 8005b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b42:	4290      	cmp	r0, r2
 8005b44:	d00b      	beq.n	8005b5e <TIM_Base_SetConfig+0x36>
 8005b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b4a:	4290      	cmp	r0, r2
 8005b4c:	d007      	beq.n	8005b5e <TIM_Base_SetConfig+0x36>
 8005b4e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005b52:	4290      	cmp	r0, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_Base_SetConfig+0x36>
 8005b56:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005b5a:	4290      	cmp	r0, r2
 8005b5c:	d103      	bne.n	8005b66 <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b62:	684a      	ldr	r2, [r1, #4]
 8005b64:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <TIM_Base_SetConfig+0xdc>)
 8005b68:	4290      	cmp	r0, r2
 8005b6a:	d022      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005b6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005b72:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005b76:	4290      	cmp	r0, r2
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b7e:	4290      	cmp	r0, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b86:	4290      	cmp	r0, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005b8a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005b8e:	4290      	cmp	r0, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005b92:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005b96:	4290      	cmp	r0, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b9e:	4290      	cmp	r0, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005ba2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ba6:	4290      	cmp	r0, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0x8a>
 8005baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bae:	4290      	cmp	r0, r2
 8005bb0:	d103      	bne.n	8005bba <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb6:	68ca      	ldr	r2, [r1, #12]
 8005bb8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bbe:	694a      	ldr	r2, [r1, #20]
 8005bc0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005bc2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc4:	688b      	ldr	r3, [r1, #8]
 8005bc6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bc8:	680b      	ldr	r3, [r1, #0]
 8005bca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <TIM_Base_SetConfig+0xdc>)
 8005bce:	4298      	cmp	r0, r3
 8005bd0:	d013      	beq.n	8005bfa <TIM_Base_SetConfig+0xd2>
 8005bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd6:	4298      	cmp	r0, r3
 8005bd8:	d00f      	beq.n	8005bfa <TIM_Base_SetConfig+0xd2>
 8005bda:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005bde:	4298      	cmp	r0, r3
 8005be0:	d00b      	beq.n	8005bfa <TIM_Base_SetConfig+0xd2>
 8005be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be6:	4298      	cmp	r0, r3
 8005be8:	d007      	beq.n	8005bfa <TIM_Base_SetConfig+0xd2>
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	4298      	cmp	r0, r3
 8005bf0:	d003      	beq.n	8005bfa <TIM_Base_SetConfig+0xd2>
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	4298      	cmp	r0, r3
 8005bf8:	d101      	bne.n	8005bfe <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 8005bfa:	690b      	ldr	r3, [r1, #16]
 8005bfc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	6143      	str	r3, [r0, #20]
}
 8005c02:	4770      	bx	lr
 8005c04:	40012c00 	.word	0x40012c00

08005c08 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005c08:	b360      	cbz	r0, 8005c64 <HAL_TIM_Base_Init+0x5c>
{
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c12:	b313      	cbz	r3, 8005c5a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	2302      	movs	r3, #2
 8005c16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005c20:	f7ff ff82 	bl	8005b28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005c2e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005c3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005c4e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005c52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005c56:	2000      	movs	r0, #0
}
 8005c58:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005c5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005c5e:	f7fc fdaf 	bl	80027c0 <HAL_TIM_Base_MspInit>
 8005c62:	e7d7      	b.n	8005c14 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005c64:	2001      	movs	r0, #1
}
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005c68:	b360      	cbz	r0, 8005cc4 <HAL_TIM_PWM_Init+0x5c>
{
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c72:	b313      	cbz	r3, 8005cba <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005c80:	f7ff ff52 	bl	8005b28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005c8e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005caa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005cae:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005cb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005cb6:	2000      	movs	r0, #0
}
 8005cb8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005cba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005cbe:	f7fc fd23 	bl	8002708 <HAL_TIM_PWM_MspInit>
 8005cc2:	e7d7      	b.n	8005c74 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005cc4:	2001      	movs	r0, #1
}
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005cc8:	b360      	cbz	r0, 8005d24 <HAL_TIM_IC_Init+0x5c>
{
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cd2:	b313      	cbz	r3, 8005d1a <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cda:	4621      	mov	r1, r4
 8005cdc:	f851 0b04 	ldr.w	r0, [r1], #4
 8005ce0:	f7ff ff22 	bl	8005b28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005cee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d0a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005d0e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d16:	2000      	movs	r0, #0
}
 8005d18:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8005d1e:	f7fc fd09 	bl	8002734 <HAL_TIM_IC_MspInit>
 8005d22:	e7d7      	b.n	8005cd4 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8005d24:	2001      	movs	r0, #1
}
 8005d26:	4770      	bx	lr

08005d28 <TIM_OC2_SetConfig>:
{
 8005d28:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2a:	6a03      	ldr	r3, [r0, #32]
 8005d2c:	f023 0310 	bic.w	r3, r3, #16
 8005d30:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005d32:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005d34:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d36:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d38:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d3c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	680d      	ldr	r5, [r1, #0]
 8005d42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005d46:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d4a:	688d      	ldr	r5, [r1, #8]
 8005d4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d50:	4d1b      	ldr	r5, [pc, #108]	; (8005dc0 <TIM_OC2_SetConfig+0x98>)
 8005d52:	42a8      	cmp	r0, r5
 8005d54:	d007      	beq.n	8005d66 <TIM_OC2_SetConfig+0x3e>
 8005d56:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d5a:	42a8      	cmp	r0, r5
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC2_SetConfig+0x3e>
 8005d5e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8005d62:	42a8      	cmp	r0, r5
 8005d64:	d106      	bne.n	8005d74 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d6a:	68cd      	ldr	r5, [r1, #12]
 8005d6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d74:	4d12      	ldr	r5, [pc, #72]	; (8005dc0 <TIM_OC2_SetConfig+0x98>)
 8005d76:	42a8      	cmp	r0, r5
 8005d78:	d013      	beq.n	8005da2 <TIM_OC2_SetConfig+0x7a>
 8005d7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d7e:	42a8      	cmp	r0, r5
 8005d80:	d00f      	beq.n	8005da2 <TIM_OC2_SetConfig+0x7a>
 8005d82:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005d86:	42a8      	cmp	r0, r5
 8005d88:	d00b      	beq.n	8005da2 <TIM_OC2_SetConfig+0x7a>
 8005d8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d8e:	42a8      	cmp	r0, r5
 8005d90:	d007      	beq.n	8005da2 <TIM_OC2_SetConfig+0x7a>
 8005d92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d96:	42a8      	cmp	r0, r5
 8005d98:	d003      	beq.n	8005da2 <TIM_OC2_SetConfig+0x7a>
 8005d9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d9e:	42a8      	cmp	r0, r5
 8005da0:	d107      	bne.n	8005db2 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da2:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da6:	694c      	ldr	r4, [r1, #20]
 8005da8:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	698c      	ldr	r4, [r1, #24]
 8005dae:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005db2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005db4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005db6:	684a      	ldr	r2, [r1, #4]
 8005db8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005dba:	6203      	str	r3, [r0, #32]
}
 8005dbc:	bc30      	pop	{r4, r5}
 8005dbe:	4770      	bx	lr
 8005dc0:	40012c00 	.word	0x40012c00

08005dc4 <HAL_TIM_PWM_ConfigChannel>:
{
 8005dc4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005dc6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	f000 8095 	beq.w	8005efa <HAL_TIM_PWM_ConfigChannel+0x136>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005dda:	2a14      	cmp	r2, #20
 8005ddc:	f200 8088 	bhi.w	8005ef0 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005de0:	e8df f002 	tbb	[pc, r2]
 8005de4:	8686860b 	.word	0x8686860b
 8005de8:	8686861f 	.word	0x8686861f
 8005dec:	86868634 	.word	0x86868634
 8005df0:	86868648 	.word	0x86868648
 8005df4:	8686865d 	.word	0x8686865d
 8005df8:	71          	.byte	0x71
 8005df9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dfa:	6800      	ldr	r0, [r0, #0]
 8005dfc:	f7ff fc36 	bl	800566c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	6993      	ldr	r3, [r2, #24]
 8005e04:	f043 0308 	orr.w	r3, r3, #8
 8005e08:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	6993      	ldr	r3, [r2, #24]
 8005e0e:	f023 0304 	bic.w	r3, r3, #4
 8005e12:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	6993      	ldr	r3, [r2, #24]
 8005e18:	6929      	ldr	r1, [r5, #16]
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1e:	2000      	movs	r0, #0
      break;
 8005e20:	e067      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e22:	6800      	ldr	r0, [r0, #0]
 8005e24:	f7ff ff80 	bl	8005d28 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	6993      	ldr	r3, [r2, #24]
 8005e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e30:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	6993      	ldr	r3, [r2, #24]
 8005e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e3a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e3c:	6822      	ldr	r2, [r4, #0]
 8005e3e:	6993      	ldr	r3, [r2, #24]
 8005e40:	6929      	ldr	r1, [r5, #16]
 8005e42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005e46:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2000      	movs	r0, #0
      break;
 8005e4a:	e052      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e4c:	6800      	ldr	r0, [r0, #0]
 8005e4e:	f7ff fc65 	bl	800571c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	69d3      	ldr	r3, [r2, #28]
 8005e56:	f043 0308 	orr.w	r3, r3, #8
 8005e5a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	69d3      	ldr	r3, [r2, #28]
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	69d3      	ldr	r3, [r2, #28]
 8005e6a:	6929      	ldr	r1, [r5, #16]
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005e70:	2000      	movs	r0, #0
      break;
 8005e72:	e03e      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e74:	6800      	ldr	r0, [r0, #0]
 8005e76:	f7ff fc9f 	bl	80057b8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	69d3      	ldr	r3, [r2, #28]
 8005e7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e82:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e84:	6822      	ldr	r2, [r4, #0]
 8005e86:	69d3      	ldr	r3, [r2, #28]
 8005e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	69d3      	ldr	r3, [r2, #28]
 8005e92:	6929      	ldr	r1, [r5, #16]
 8005e94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005e98:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2000      	movs	r0, #0
      break;
 8005e9c:	e029      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e9e:	6800      	ldr	r0, [r0, #0]
 8005ea0:	f7ff fcd8 	bl	8005854 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ea4:	6822      	ldr	r2, [r4, #0]
 8005ea6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ea8:	f043 0308 	orr.w	r3, r3, #8
 8005eac:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005eb2:	f023 0304 	bic.w	r3, r3, #4
 8005eb6:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ebc:	6929      	ldr	r1, [r5, #16]
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005ec2:	2000      	movs	r0, #0
      break;
 8005ec4:	e015      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ec6:	6800      	ldr	r0, [r0, #0]
 8005ec8:	f7ff fcfc 	bl	80058c4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ed4:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ede:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ee0:	6822      	ldr	r2, [r4, #0]
 8005ee2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ee4:	6929      	ldr	r1, [r5, #16]
 8005ee6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005eea:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005eec:	2000      	movs	r0, #0
      break;
 8005eee:	e000      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8005ef0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005efa:	2002      	movs	r0, #2
 8005efc:	e7fc      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

08005f00 <TIM_TI1_SetConfig>:
{
 8005f00:	b470      	push	{r4, r5, r6}
 8005f02:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f04:	6a04      	ldr	r4, [r0, #32]
 8005f06:	f024 0401 	bic.w	r4, r4, #1
 8005f0a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005f0e:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f10:	4d18      	ldr	r5, [pc, #96]	; (8005f74 <TIM_TI1_SetConfig+0x74>)
 8005f12:	42a8      	cmp	r0, r5
 8005f14:	d01c      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
 8005f16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f1a:	d019      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
 8005f1c:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <TIM_TI1_SetConfig+0x78>)
 8005f1e:	4290      	cmp	r0, r2
 8005f20:	d016      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
 8005f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f26:	4290      	cmp	r0, r2
 8005f28:	d012      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
 8005f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f2e:	4290      	cmp	r0, r2
 8005f30:	d00e      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
 8005f32:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005f36:	4290      	cmp	r0, r2
 8005f38:	d00a      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
 8005f3a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005f3e:	4290      	cmp	r0, r2
 8005f40:	d006      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
 8005f42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f46:	4290      	cmp	r0, r2
 8005f48:	d002      	beq.n	8005f50 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f4a:	f044 0201 	orr.w	r2, r4, #1
 8005f4e:	e003      	b.n	8005f58 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f50:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8005f54:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f62:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f66:	f001 010a 	and.w	r1, r1, #10
 8005f6a:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8005f6c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005f6e:	6201      	str	r1, [r0, #32]
}
 8005f70:	bc70      	pop	{r4, r5, r6}
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40000400 	.word	0x40000400

08005f7c <HAL_TIM_IC_ConfigChannel>:
{
 8005f7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005f7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d05a      	beq.n	800603c <HAL_TIM_IC_ConfigChannel+0xc0>
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005f90:	b152      	cbz	r2, 8005fa8 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8005f92:	2a04      	cmp	r2, #4
 8005f94:	d01a      	beq.n	8005fcc <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8005f96:	2a08      	cmp	r2, #8
 8005f98:	d02b      	beq.n	8005ff2 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8005f9a:	2a0c      	cmp	r2, #12
 8005f9c:	d03b      	beq.n	8006016 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8005f9e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8005fa8:	68cb      	ldr	r3, [r1, #12]
 8005faa:	684a      	ldr	r2, [r1, #4]
 8005fac:	6809      	ldr	r1, [r1, #0]
 8005fae:	6800      	ldr	r0, [r0, #0]
 8005fb0:	f7ff ffa6 	bl	8005f00 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	6993      	ldr	r3, [r2, #24]
 8005fb8:	f023 030c 	bic.w	r3, r3, #12
 8005fbc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	6993      	ldr	r3, [r2, #24]
 8005fc2:	68a9      	ldr	r1, [r5, #8]
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc8:	2000      	movs	r0, #0
 8005fca:	e7e9      	b.n	8005fa0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8005fcc:	68cb      	ldr	r3, [r1, #12]
 8005fce:	684a      	ldr	r2, [r1, #4]
 8005fd0:	6809      	ldr	r1, [r1, #0]
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	f7ff fcb0 	bl	8005938 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fd8:	6822      	ldr	r2, [r4, #0]
 8005fda:	6993      	ldr	r3, [r2, #24]
 8005fdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fe0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	6993      	ldr	r3, [r2, #24]
 8005fe6:	68a9      	ldr	r1, [r5, #8]
 8005fe8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005fec:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e7d6      	b.n	8005fa0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8005ff2:	68cb      	ldr	r3, [r1, #12]
 8005ff4:	684a      	ldr	r2, [r1, #4]
 8005ff6:	6809      	ldr	r1, [r1, #0]
 8005ff8:	6800      	ldr	r0, [r0, #0]
 8005ffa:	f7ff fcb8 	bl	800596e <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	69d3      	ldr	r3, [r2, #28]
 8006002:	f023 030c 	bic.w	r3, r3, #12
 8006006:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	69d3      	ldr	r3, [r2, #28]
 800600c:	68a9      	ldr	r1, [r5, #8]
 800600e:	430b      	orrs	r3, r1
 8006010:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006012:	2000      	movs	r0, #0
 8006014:	e7c4      	b.n	8005fa0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8006016:	68cb      	ldr	r3, [r1, #12]
 8006018:	684a      	ldr	r2, [r1, #4]
 800601a:	6809      	ldr	r1, [r1, #0]
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f7ff fcc1 	bl	80059a4 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	69d3      	ldr	r3, [r2, #28]
 8006026:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800602a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	69d3      	ldr	r3, [r2, #28]
 8006030:	68a9      	ldr	r1, [r5, #8]
 8006032:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006036:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	2000      	movs	r0, #0
 800603a:	e7b1      	b.n	8005fa0 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 800603c:	2002      	movs	r0, #2
 800603e:	e7b2      	b.n	8005fa6 <HAL_TIM_IC_ConfigChannel+0x2a>

08006040 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006040:	f001 011f 	and.w	r1, r1, #31
 8006044:	2301      	movs	r3, #1
 8006046:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800604a:	6a03      	ldr	r3, [r0, #32]
 800604c:	ea23 030c 	bic.w	r3, r3, ip
 8006050:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006052:	6a03      	ldr	r3, [r0, #32]
 8006054:	fa02 f101 	lsl.w	r1, r2, r1
 8006058:	430b      	orrs	r3, r1
 800605a:	6203      	str	r3, [r0, #32]
}
 800605c:	4770      	bx	lr
	...

08006060 <HAL_TIM_PWM_Start>:
{
 8006060:	b510      	push	{r4, lr}
 8006062:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006064:	4608      	mov	r0, r1
 8006066:	2900      	cmp	r1, #0
 8006068:	d153      	bne.n	8006112 <HAL_TIM_PWM_Start+0xb2>
 800606a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800606e:	b2db      	uxtb	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	bf18      	it	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 80a0 	bne.w	80061bc <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800607c:	2800      	cmp	r0, #0
 800607e:	d173      	bne.n	8006168 <HAL_TIM_PWM_Start+0x108>
 8006080:	2302      	movs	r3, #2
 8006082:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006086:	2201      	movs	r2, #1
 8006088:	4601      	mov	r1, r0
 800608a:	6820      	ldr	r0, [r4, #0]
 800608c:	f7ff ffd8 	bl	8006040 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	4a4d      	ldr	r2, [pc, #308]	; (80061c8 <HAL_TIM_PWM_Start+0x168>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <HAL_TIM_PWM_Start+0x60>
 8006098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800609c:	4293      	cmp	r3, r2
 800609e:	d00f      	beq.n	80060c0 <HAL_TIM_PWM_Start+0x60>
 80060a0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <HAL_TIM_PWM_Start+0x60>
 80060a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_PWM_Start+0x60>
 80060b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <HAL_TIM_PWM_Start+0x60>
 80060b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060bc:	4293      	cmp	r3, r2
 80060be:	d103      	bne.n	80060c8 <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 80060c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	4a3f      	ldr	r2, [pc, #252]	; (80061c8 <HAL_TIM_PWM_Start+0x168>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d067      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
 80060d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d4:	d064      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
 80060d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80060da:	4293      	cmp	r3, r2
 80060dc:	d060      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
 80060de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d05c      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
 80060e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d058      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
 80060ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d054      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
 80060f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d050      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
 80060fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006102:	4293      	cmp	r3, r2
 8006104:	d04c      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800610e:	2000      	movs	r0, #0
 8006110:	e055      	b.n	80061be <HAL_TIM_PWM_Start+0x15e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006112:	2904      	cmp	r1, #4
 8006114:	d00c      	beq.n	8006130 <HAL_TIM_PWM_Start+0xd0>
 8006116:	2908      	cmp	r1, #8
 8006118:	d011      	beq.n	800613e <HAL_TIM_PWM_Start+0xde>
 800611a:	290c      	cmp	r1, #12
 800611c:	d016      	beq.n	800614c <HAL_TIM_PWM_Start+0xec>
 800611e:	2910      	cmp	r1, #16
 8006120:	d01b      	beq.n	800615a <HAL_TIM_PWM_Start+0xfa>
 8006122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006126:	b2db      	uxtb	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	bf18      	it	ne
 800612c:	2301      	movne	r3, #1
 800612e:	e7a2      	b.n	8006076 <HAL_TIM_PWM_Start+0x16>
 8006130:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8006134:	b2db      	uxtb	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	bf18      	it	ne
 800613a:	2301      	movne	r3, #1
 800613c:	e79b      	b.n	8006076 <HAL_TIM_PWM_Start+0x16>
 800613e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006142:	b2db      	uxtb	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	bf18      	it	ne
 8006148:	2301      	movne	r3, #1
 800614a:	e794      	b.n	8006076 <HAL_TIM_PWM_Start+0x16>
 800614c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006150:	b2db      	uxtb	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	bf18      	it	ne
 8006156:	2301      	movne	r3, #1
 8006158:	e78d      	b.n	8006076 <HAL_TIM_PWM_Start+0x16>
 800615a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800615e:	b2db      	uxtb	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	bf18      	it	ne
 8006164:	2301      	movne	r3, #1
 8006166:	e786      	b.n	8006076 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006168:	2804      	cmp	r0, #4
 800616a:	d009      	beq.n	8006180 <HAL_TIM_PWM_Start+0x120>
 800616c:	2808      	cmp	r0, #8
 800616e:	d00b      	beq.n	8006188 <HAL_TIM_PWM_Start+0x128>
 8006170:	280c      	cmp	r0, #12
 8006172:	d00d      	beq.n	8006190 <HAL_TIM_PWM_Start+0x130>
 8006174:	2810      	cmp	r0, #16
 8006176:	d00f      	beq.n	8006198 <HAL_TIM_PWM_Start+0x138>
 8006178:	2302      	movs	r3, #2
 800617a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617e:	e782      	b.n	8006086 <HAL_TIM_PWM_Start+0x26>
 8006180:	2302      	movs	r3, #2
 8006182:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006186:	e77e      	b.n	8006086 <HAL_TIM_PWM_Start+0x26>
 8006188:	2302      	movs	r3, #2
 800618a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800618e:	e77a      	b.n	8006086 <HAL_TIM_PWM_Start+0x26>
 8006190:	2302      	movs	r3, #2
 8006192:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006196:	e776      	b.n	8006086 <HAL_TIM_PWM_Start+0x26>
 8006198:	2302      	movs	r3, #2
 800619a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800619e:	e772      	b.n	8006086 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a0:	6899      	ldr	r1, [r3, #8]
 80061a2:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <HAL_TIM_PWM_Start+0x16c>)
 80061a4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a6:	2a06      	cmp	r2, #6
 80061a8:	d00a      	beq.n	80061c0 <HAL_TIM_PWM_Start+0x160>
 80061aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80061ae:	d009      	beq.n	80061c4 <HAL_TIM_PWM_Start+0x164>
      __HAL_TIM_ENABLE(htim);
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80061b8:	2000      	movs	r0, #0
 80061ba:	e000      	b.n	80061be <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
}
 80061be:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80061c0:	2000      	movs	r0, #0
 80061c2:	e7fc      	b.n	80061be <HAL_TIM_PWM_Start+0x15e>
 80061c4:	2000      	movs	r0, #0
 80061c6:	e7fa      	b.n	80061be <HAL_TIM_PWM_Start+0x15e>
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	00010007 	.word	0x00010007

080061d0 <HAL_TIM_IC_Start_IT>:
{
 80061d0:	b510      	push	{r4, lr}
 80061d2:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80061d4:	460b      	mov	r3, r1
 80061d6:	bb19      	cbnz	r1, 8006220 <HAL_TIM_IC_Start_IT+0x50>
 80061d8:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80061dc:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d13a      	bne.n	8006258 <HAL_TIM_IC_Start_IT+0x88>
 80061e2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80061e6:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80061e8:	2801      	cmp	r0, #1
 80061ea:	f040 80c0 	bne.w	800636e <HAL_TIM_IC_Start_IT+0x19e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80061ee:	2a01      	cmp	r2, #1
 80061f0:	f040 80be 	bne.w	8006370 <HAL_TIM_IC_Start_IT+0x1a0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d13f      	bne.n	8006278 <HAL_TIM_IC_Start_IT+0xa8>
 80061f8:	2102      	movs	r1, #2
 80061fa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d156      	bne.n	80062b0 <HAL_TIM_IC_Start_IT+0xe0>
 8006202:	2102      	movs	r1, #2
 8006204:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 8006208:	2b0c      	cmp	r3, #12
 800620a:	f200 80b2 	bhi.w	8006372 <HAL_TIM_IC_Start_IT+0x1a2>
 800620e:	e8df f003 	tbb	[pc, r3]
 8006212:	b05f      	.short	0xb05f
 8006214:	b08eb0b0 	.word	0xb08eb0b0
 8006218:	b094b0b0 	.word	0xb094b0b0
 800621c:	b0b0      	.short	0xb0b0
 800621e:	9a          	.byte	0x9a
 800621f:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006220:	2904      	cmp	r1, #4
 8006222:	d009      	beq.n	8006238 <HAL_TIM_IC_Start_IT+0x68>
 8006224:	2908      	cmp	r1, #8
 8006226:	d00b      	beq.n	8006240 <HAL_TIM_IC_Start_IT+0x70>
 8006228:	290c      	cmp	r1, #12
 800622a:	d00d      	beq.n	8006248 <HAL_TIM_IC_Start_IT+0x78>
 800622c:	2910      	cmp	r1, #16
 800622e:	d00f      	beq.n	8006250 <HAL_TIM_IC_Start_IT+0x80>
 8006230:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8006234:	b2c0      	uxtb	r0, r0
 8006236:	e7d2      	b.n	80061de <HAL_TIM_IC_Start_IT+0xe>
 8006238:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800623c:	b2c0      	uxtb	r0, r0
 800623e:	e7ce      	b.n	80061de <HAL_TIM_IC_Start_IT+0xe>
 8006240:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8006244:	b2c0      	uxtb	r0, r0
 8006246:	e7ca      	b.n	80061de <HAL_TIM_IC_Start_IT+0xe>
 8006248:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800624c:	b2c0      	uxtb	r0, r0
 800624e:	e7c6      	b.n	80061de <HAL_TIM_IC_Start_IT+0xe>
 8006250:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8006254:	b2c0      	uxtb	r0, r0
 8006256:	e7c2      	b.n	80061de <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006258:	2b04      	cmp	r3, #4
 800625a:	d005      	beq.n	8006268 <HAL_TIM_IC_Start_IT+0x98>
 800625c:	2b08      	cmp	r3, #8
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IC_Start_IT+0xa0>
 8006260:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	e7bf      	b.n	80061e8 <HAL_TIM_IC_Start_IT+0x18>
 8006268:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	e7bb      	b.n	80061e8 <HAL_TIM_IC_Start_IT+0x18>
 8006270:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	e7b7      	b.n	80061e8 <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006278:	2b04      	cmp	r3, #4
 800627a:	d009      	beq.n	8006290 <HAL_TIM_IC_Start_IT+0xc0>
 800627c:	2b08      	cmp	r3, #8
 800627e:	d00b      	beq.n	8006298 <HAL_TIM_IC_Start_IT+0xc8>
 8006280:	2b0c      	cmp	r3, #12
 8006282:	d00d      	beq.n	80062a0 <HAL_TIM_IC_Start_IT+0xd0>
 8006284:	2b10      	cmp	r3, #16
 8006286:	d00f      	beq.n	80062a8 <HAL_TIM_IC_Start_IT+0xd8>
 8006288:	2102      	movs	r1, #2
 800628a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800628e:	e7b6      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x2e>
 8006290:	2102      	movs	r1, #2
 8006292:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8006296:	e7b2      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x2e>
 8006298:	2102      	movs	r1, #2
 800629a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 800629e:	e7ae      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x2e>
 80062a0:	2102      	movs	r1, #2
 80062a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 80062a6:	e7aa      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x2e>
 80062a8:	2102      	movs	r1, #2
 80062aa:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062ae:	e7a6      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d005      	beq.n	80062c0 <HAL_TIM_IC_Start_IT+0xf0>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_IC_Start_IT+0xf8>
 80062b8:	2102      	movs	r1, #2
 80062ba:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 80062be:	e7a3      	b.n	8006208 <HAL_TIM_IC_Start_IT+0x38>
 80062c0:	2102      	movs	r1, #2
 80062c2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80062c6:	e79f      	b.n	8006208 <HAL_TIM_IC_Start_IT+0x38>
 80062c8:	2102      	movs	r1, #2
 80062ca:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 80062ce:	e79b      	b.n	8006208 <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062d0:	6821      	ldr	r1, [r4, #0]
 80062d2:	68ca      	ldr	r2, [r1, #12]
 80062d4:	f042 0202 	orr.w	r2, r2, #2
 80062d8:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062da:	2201      	movs	r2, #1
 80062dc:	4619      	mov	r1, r3
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	f7ff feae 	bl	8006040 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	4a26      	ldr	r2, [pc, #152]	; (8006380 <HAL_TIM_IC_Start_IT+0x1b0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d032      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d02f      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
 80062f2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d02b      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
 80062fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062fe:	4293      	cmp	r3, r2
 8006300:	d027      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
 8006302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006306:	4293      	cmp	r3, r2
 8006308:	d023      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
 800630a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800630e:	4293      	cmp	r3, r2
 8006310:	d01f      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
 8006312:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006316:	4293      	cmp	r3, r2
 8006318:	d01b      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
 800631a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800631e:	4293      	cmp	r3, r2
 8006320:	d017      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x182>
      __HAL_TIM_ENABLE(htim);
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	2000      	movs	r0, #0
 800632c:	e020      	b.n	8006370 <HAL_TIM_IC_Start_IT+0x1a0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800632e:	6821      	ldr	r1, [r4, #0]
 8006330:	68ca      	ldr	r2, [r1, #12]
 8006332:	f042 0204 	orr.w	r2, r2, #4
 8006336:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8006338:	e7cf      	b.n	80062da <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800633a:	6821      	ldr	r1, [r4, #0]
 800633c:	68ca      	ldr	r2, [r1, #12]
 800633e:	f042 0208 	orr.w	r2, r2, #8
 8006342:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8006344:	e7c9      	b.n	80062da <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006346:	6821      	ldr	r1, [r4, #0]
 8006348:	68ca      	ldr	r2, [r1, #12]
 800634a:	f042 0210 	orr.w	r2, r2, #16
 800634e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8006350:	e7c3      	b.n	80062da <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006352:	6899      	ldr	r1, [r3, #8]
 8006354:	4a0b      	ldr	r2, [pc, #44]	; (8006384 <HAL_TIM_IC_Start_IT+0x1b4>)
 8006356:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006358:	2a06      	cmp	r2, #6
 800635a:	d00c      	beq.n	8006376 <HAL_TIM_IC_Start_IT+0x1a6>
 800635c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006360:	d00b      	beq.n	800637a <HAL_TIM_IC_Start_IT+0x1aa>
        __HAL_TIM_ENABLE(htim);
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	f042 0201 	orr.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	2000      	movs	r0, #0
 800636c:	e000      	b.n	8006370 <HAL_TIM_IC_Start_IT+0x1a0>
    return HAL_ERROR;
 800636e:	2001      	movs	r0, #1
}
 8006370:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006372:	4610      	mov	r0, r2
 8006374:	e7fc      	b.n	8006370 <HAL_TIM_IC_Start_IT+0x1a0>
 8006376:	2000      	movs	r0, #0
 8006378:	e7fa      	b.n	8006370 <HAL_TIM_IC_Start_IT+0x1a0>
 800637a:	2000      	movs	r0, #0
 800637c:	e7f8      	b.n	8006370 <HAL_TIM_IC_Start_IT+0x1a0>
 800637e:	bf00      	nop
 8006380:	40012c00 	.word	0x40012c00
 8006384:	00010007 	.word	0x00010007

08006388 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006388:	f001 011f 	and.w	r1, r1, #31
 800638c:	2304      	movs	r3, #4
 800638e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006392:	6a03      	ldr	r3, [r0, #32]
 8006394:	ea23 030c 	bic.w	r3, r3, ip
 8006398:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800639a:	6a03      	ldr	r3, [r0, #32]
 800639c:	fa02 f101 	lsl.w	r1, r2, r1
 80063a0:	430b      	orrs	r3, r1
 80063a2:	6203      	str	r3, [r0, #32]
}
 80063a4:	4770      	bx	lr
	...

080063a8 <HAL_TIMEx_PWMN_Start>:
{
 80063a8:	b510      	push	{r4, lr}
 80063aa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063ac:	4608      	mov	r0, r1
 80063ae:	2900      	cmp	r1, #0
 80063b0:	d13b      	bne.n	800642a <HAL_TIMEx_PWMN_Start+0x82>
 80063b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	bf18      	it	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d16a      	bne.n	8006498 <HAL_TIMEx_PWMN_Start+0xf0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d14a      	bne.n	800645c <HAL_TIMEx_PWMN_Start+0xb4>
 80063c6:	2302      	movs	r3, #2
 80063c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80063cc:	2204      	movs	r2, #4
 80063ce:	4601      	mov	r1, r0
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	f7ff ffd9 	bl	8006388 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80063da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063de:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	4a30      	ldr	r2, [pc, #192]	; (80064a4 <HAL_TIMEx_PWMN_Start+0xfc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d049      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ec:	d046      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
 80063ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d042      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
 80063f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d03e      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
 80063fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006402:	4293      	cmp	r3, r2
 8006404:	d03a      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
 8006406:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800640a:	4293      	cmp	r3, r2
 800640c:	d036      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
 800640e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006412:	4293      	cmp	r3, r2
 8006414:	d032      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
 8006416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800641a:	4293      	cmp	r3, r2
 800641c:	d02e      	beq.n	800647c <HAL_TIMEx_PWMN_Start+0xd4>
    __HAL_TIM_ENABLE(htim);
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	f042 0201 	orr.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006426:	2000      	movs	r0, #0
 8006428:	e037      	b.n	800649a <HAL_TIMEx_PWMN_Start+0xf2>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800642a:	2904      	cmp	r1, #4
 800642c:	d008      	beq.n	8006440 <HAL_TIMEx_PWMN_Start+0x98>
 800642e:	2908      	cmp	r1, #8
 8006430:	d00d      	beq.n	800644e <HAL_TIMEx_PWMN_Start+0xa6>
 8006432:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	bf18      	it	ne
 800643c:	2301      	movne	r3, #1
 800643e:	e7be      	b.n	80063be <HAL_TIMEx_PWMN_Start+0x16>
 8006440:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006444:	b2db      	uxtb	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	bf18      	it	ne
 800644a:	2301      	movne	r3, #1
 800644c:	e7b7      	b.n	80063be <HAL_TIMEx_PWMN_Start+0x16>
 800644e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006452:	b2db      	uxtb	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	bf18      	it	ne
 8006458:	2301      	movne	r3, #1
 800645a:	e7b0      	b.n	80063be <HAL_TIMEx_PWMN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800645c:	2804      	cmp	r0, #4
 800645e:	d005      	beq.n	800646c <HAL_TIMEx_PWMN_Start+0xc4>
 8006460:	2808      	cmp	r0, #8
 8006462:	d007      	beq.n	8006474 <HAL_TIMEx_PWMN_Start+0xcc>
 8006464:	2302      	movs	r3, #2
 8006466:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800646a:	e7af      	b.n	80063cc <HAL_TIMEx_PWMN_Start+0x24>
 800646c:	2302      	movs	r3, #2
 800646e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006472:	e7ab      	b.n	80063cc <HAL_TIMEx_PWMN_Start+0x24>
 8006474:	2302      	movs	r3, #2
 8006476:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800647a:	e7a7      	b.n	80063cc <HAL_TIMEx_PWMN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800647c:	6899      	ldr	r1, [r3, #8]
 800647e:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <HAL_TIMEx_PWMN_Start+0x100>)
 8006480:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006482:	2a06      	cmp	r2, #6
 8006484:	d00a      	beq.n	800649c <HAL_TIMEx_PWMN_Start+0xf4>
 8006486:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800648a:	d009      	beq.n	80064a0 <HAL_TIMEx_PWMN_Start+0xf8>
      __HAL_TIM_ENABLE(htim);
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006494:	2000      	movs	r0, #0
 8006496:	e000      	b.n	800649a <HAL_TIMEx_PWMN_Start+0xf2>
    return HAL_ERROR;
 8006498:	2001      	movs	r0, #1
}
 800649a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800649c:	2000      	movs	r0, #0
 800649e:	e7fc      	b.n	800649a <HAL_TIMEx_PWMN_Start+0xf2>
 80064a0:	2000      	movs	r0, #0
 80064a2:	e7fa      	b.n	800649a <HAL_TIMEx_PWMN_Start+0xf2>
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	00010007 	.word	0x00010007

080064ac <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80064ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d04c      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 80064b4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80064b6:	2301      	movs	r3, #1
 80064b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	2302      	movs	r3, #2
 80064be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80064c2:	6802      	ldr	r2, [r0, #0]
 80064c4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80064c6:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064c8:	4d22      	ldr	r5, [pc, #136]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80064ca:	42aa      	cmp	r2, r5
 80064cc:	d007      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80064ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80064d2:	42aa      	cmp	r2, r5
 80064d4:	d003      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80064d6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80064da:	42aa      	cmp	r2, r5
 80064dc:	d103      	bne.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064e2:	684d      	ldr	r5, [r1, #4]
 80064e4:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ee:	680d      	ldr	r5, [r1, #0]
 80064f0:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80064f2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	4a17      	ldr	r2, [pc, #92]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d01a      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d017      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006502:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800650a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800651a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006522:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800652a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800652e:	4293      	cmp	r3, r2
 8006530:	d104      	bne.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0x90>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006532:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006536:	688a      	ldr	r2, [r1, #8]
 8006538:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 800653a:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800653c:	2301      	movs	r3, #1
 800653e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006542:	2300      	movs	r3, #0
 8006544:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006548:	4618      	mov	r0, r3
}
 800654a:	bc30      	pop	{r4, r5}
 800654c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800654e:	2002      	movs	r0, #2
}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00

08006558 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8006558:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d060      	beq.n	8006622 <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 8006560:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006562:	2301      	movs	r3, #1
 8006564:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006568:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800656a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656e:	688a      	ldr	r2, [r1, #8]
 8006570:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006576:	684a      	ldr	r2, [r1, #4]
 8006578:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800657a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800657e:	680a      	ldr	r2, [r1, #0]
 8006580:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006586:	690a      	ldr	r2, [r1, #16]
 8006588:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800658a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800658e:	694a      	ldr	r2, [r1, #20]
 8006590:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006596:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006598:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800659a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800659e:	698a      	ldr	r2, [r1, #24]
 80065a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065a4:	6802      	ldr	r2, [r0, #0]
 80065a6:	4c20      	ldr	r4, [pc, #128]	; (8006628 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80065a8:	42a2      	cmp	r2, r4
 80065aa:	d007      	beq.n	80065bc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80065ac:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80065b0:	42a2      	cmp	r2, r4
 80065b2:	d003      	beq.n	80065bc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80065b4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80065b8:	42a2      	cmp	r2, r4
 80065ba:	d103      	bne.n	80065c4 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c0:	69cc      	ldr	r4, [r1, #28]
 80065c2:	4323      	orrs	r3, r4
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065c4:	4c18      	ldr	r4, [pc, #96]	; (8006628 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80065c6:	42a2      	cmp	r2, r4
 80065c8:	d007      	beq.n	80065da <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80065ca:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80065ce:	42a2      	cmp	r2, r4
 80065d0:	d003      	beq.n	80065da <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80065d2:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80065d6:	42a2      	cmp	r2, r4
 80065d8:	d11b      	bne.n	8006612 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065de:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80065e0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065e8:	6a0c      	ldr	r4, [r1, #32]
 80065ea:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80065f2:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065f4:	4c0c      	ldr	r4, [pc, #48]	; (8006628 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80065f6:	42a2      	cmp	r2, r4
 80065f8:	d007      	beq.n	800660a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80065fa:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80065fe:	42a2      	cmp	r2, r4
 8006600:	d003      	beq.n	800660a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006602:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8006606:	42a2      	cmp	r2, r4
 8006608:	d103      	bne.n	8006612 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800660a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800660e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006610:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8006612:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006614:	2300      	movs	r3, #0
 8006616:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800661a:	4618      	mov	r0, r3
}
 800661c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006620:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006622:	2002      	movs	r0, #2
}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40012c00 	.word	0x40012c00

0800662c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006630:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006632:	6883      	ldr	r3, [r0, #8]
 8006634:	6902      	ldr	r2, [r0, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	6942      	ldr	r2, [r0, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	69c2      	ldr	r2, [r0, #28]
 800663e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006640:	6808      	ldr	r0, [r1, #0]
 8006642:	4a96      	ldr	r2, [pc, #600]	; (800689c <UART_SetConfig+0x270>)
 8006644:	4002      	ands	r2, r0
 8006646:	4313      	orrs	r3, r2
 8006648:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	6853      	ldr	r3, [r2, #4]
 800664e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006652:	68e1      	ldr	r1, [r4, #12]
 8006654:	430b      	orrs	r3, r1
 8006656:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006658:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	4b90      	ldr	r3, [pc, #576]	; (80068a0 <UART_SetConfig+0x274>)
 800665e:	429a      	cmp	r2, r3
 8006660:	d001      	beq.n	8006666 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006662:	6a23      	ldr	r3, [r4, #32]
 8006664:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006666:	6893      	ldr	r3, [r2, #8]
 8006668:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800666c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006670:	430b      	orrs	r3, r1
 8006672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006678:	f023 030f 	bic.w	r3, r3, #15
 800667c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800667e:	430b      	orrs	r3, r1
 8006680:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	4a87      	ldr	r2, [pc, #540]	; (80068a4 <UART_SetConfig+0x278>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d010      	beq.n	80066ac <UART_SetConfig+0x80>
 800668a:	4a87      	ldr	r2, [pc, #540]	; (80068a8 <UART_SetConfig+0x27c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d021      	beq.n	80066d4 <UART_SetConfig+0xa8>
 8006690:	4a86      	ldr	r2, [pc, #536]	; (80068ac <UART_SetConfig+0x280>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d037      	beq.n	8006706 <UART_SetConfig+0xda>
 8006696:	4a86      	ldr	r2, [pc, #536]	; (80068b0 <UART_SetConfig+0x284>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d05c      	beq.n	8006756 <UART_SetConfig+0x12a>
 800669c:	4a85      	ldr	r2, [pc, #532]	; (80068b4 <UART_SetConfig+0x288>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d06b      	beq.n	800677a <UART_SetConfig+0x14e>
 80066a2:	4a7f      	ldr	r2, [pc, #508]	; (80068a0 <UART_SetConfig+0x274>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d07d      	beq.n	80067a4 <UART_SetConfig+0x178>
 80066a8:	2210      	movs	r2, #16
 80066aa:	e03a      	b.n	8006722 <UART_SetConfig+0xf6>
 80066ac:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80066b0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80066b4:	f002 0203 	and.w	r2, r2, #3
 80066b8:	2a03      	cmp	r2, #3
 80066ba:	d809      	bhi.n	80066d0 <UART_SetConfig+0xa4>
 80066bc:	e8df f002 	tbb	[pc, r2]
 80066c0:	06870402 	.word	0x06870402
 80066c4:	2201      	movs	r2, #1
 80066c6:	e02c      	b.n	8006722 <UART_SetConfig+0xf6>
 80066c8:	2204      	movs	r2, #4
 80066ca:	e02a      	b.n	8006722 <UART_SetConfig+0xf6>
 80066cc:	2208      	movs	r2, #8
 80066ce:	e028      	b.n	8006722 <UART_SetConfig+0xf6>
 80066d0:	2210      	movs	r2, #16
 80066d2:	e026      	b.n	8006722 <UART_SetConfig+0xf6>
 80066d4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80066d8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80066dc:	f002 020c 	and.w	r2, r2, #12
 80066e0:	2a0c      	cmp	r2, #12
 80066e2:	d80e      	bhi.n	8006702 <UART_SetConfig+0xd6>
 80066e4:	e8df f002 	tbb	[pc, r2]
 80066e8:	0d0d0d07 	.word	0x0d0d0d07
 80066ec:	0d0d0d09 	.word	0x0d0d0d09
 80066f0:	0d0d0d75 	.word	0x0d0d0d75
 80066f4:	0b          	.byte	0x0b
 80066f5:	00          	.byte	0x00
 80066f6:	2200      	movs	r2, #0
 80066f8:	e013      	b.n	8006722 <UART_SetConfig+0xf6>
 80066fa:	2204      	movs	r2, #4
 80066fc:	e011      	b.n	8006722 <UART_SetConfig+0xf6>
 80066fe:	2208      	movs	r2, #8
 8006700:	e00f      	b.n	8006722 <UART_SetConfig+0xf6>
 8006702:	2210      	movs	r2, #16
 8006704:	e00d      	b.n	8006722 <UART_SetConfig+0xf6>
 8006706:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800670a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800670e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006712:	2a20      	cmp	r2, #32
 8006714:	d05f      	beq.n	80067d6 <UART_SetConfig+0x1aa>
 8006716:	d81a      	bhi.n	800674e <UART_SetConfig+0x122>
 8006718:	2a00      	cmp	r2, #0
 800671a:	d05e      	beq.n	80067da <UART_SetConfig+0x1ae>
 800671c:	2a10      	cmp	r2, #16
 800671e:	d15e      	bne.n	80067de <UART_SetConfig+0x1b2>
 8006720:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006722:	495f      	ldr	r1, [pc, #380]	; (80068a0 <UART_SetConfig+0x274>)
 8006724:	428b      	cmp	r3, r1
 8006726:	d076      	beq.n	8006816 <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006728:	69e0      	ldr	r0, [r4, #28]
 800672a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800672e:	f000 80c9 	beq.w	80068c4 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006732:	2a08      	cmp	r2, #8
 8006734:	f200 8134 	bhi.w	80069a0 <UART_SetConfig+0x374>
 8006738:	e8df f012 	tbh	[pc, r2, lsl #1]
 800673c:	011900f7 	.word	0x011900f7
 8006740:	013200f5 	.word	0x013200f5
 8006744:	0132011c 	.word	0x0132011c
 8006748:	01320132 	.word	0x01320132
 800674c:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800674e:	2a30      	cmp	r2, #48	; 0x30
 8006750:	d147      	bne.n	80067e2 <UART_SetConfig+0x1b6>
 8006752:	2208      	movs	r2, #8
 8006754:	e7e5      	b.n	8006722 <UART_SetConfig+0xf6>
 8006756:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800675a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800675e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006762:	2a80      	cmp	r2, #128	; 0x80
 8006764:	d03f      	beq.n	80067e6 <UART_SetConfig+0x1ba>
 8006766:	d804      	bhi.n	8006772 <UART_SetConfig+0x146>
 8006768:	b3fa      	cbz	r2, 80067ea <UART_SetConfig+0x1be>
 800676a:	2a40      	cmp	r2, #64	; 0x40
 800676c:	d13f      	bne.n	80067ee <UART_SetConfig+0x1c2>
 800676e:	2204      	movs	r2, #4
 8006770:	e7d7      	b.n	8006722 <UART_SetConfig+0xf6>
 8006772:	2ac0      	cmp	r2, #192	; 0xc0
 8006774:	d13d      	bne.n	80067f2 <UART_SetConfig+0x1c6>
 8006776:	2208      	movs	r2, #8
 8006778:	e7d3      	b.n	8006722 <UART_SetConfig+0xf6>
 800677a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800677e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006782:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006786:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800678a:	d034      	beq.n	80067f6 <UART_SetConfig+0x1ca>
 800678c:	d805      	bhi.n	800679a <UART_SetConfig+0x16e>
 800678e:	b3a2      	cbz	r2, 80067fa <UART_SetConfig+0x1ce>
 8006790:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006794:	d133      	bne.n	80067fe <UART_SetConfig+0x1d2>
 8006796:	2204      	movs	r2, #4
 8006798:	e7c3      	b.n	8006722 <UART_SetConfig+0xf6>
 800679a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800679e:	d130      	bne.n	8006802 <UART_SetConfig+0x1d6>
 80067a0:	2208      	movs	r2, #8
 80067a2:	e7be      	b.n	8006722 <UART_SetConfig+0xf6>
 80067a4:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80067a8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80067ac:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80067b0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80067b4:	d027      	beq.n	8006806 <UART_SetConfig+0x1da>
 80067b6:	d805      	bhi.n	80067c4 <UART_SetConfig+0x198>
 80067b8:	b33a      	cbz	r2, 800680a <UART_SetConfig+0x1de>
 80067ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80067be:	d126      	bne.n	800680e <UART_SetConfig+0x1e2>
 80067c0:	2204      	movs	r2, #4
 80067c2:	e7ae      	b.n	8006722 <UART_SetConfig+0xf6>
 80067c4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80067c8:	d123      	bne.n	8006812 <UART_SetConfig+0x1e6>
 80067ca:	2208      	movs	r2, #8
 80067cc:	e7a9      	b.n	8006722 <UART_SetConfig+0xf6>
 80067ce:	2202      	movs	r2, #2
 80067d0:	e7a7      	b.n	8006722 <UART_SetConfig+0xf6>
 80067d2:	2202      	movs	r2, #2
 80067d4:	e7a5      	b.n	8006722 <UART_SetConfig+0xf6>
 80067d6:	2202      	movs	r2, #2
 80067d8:	e7a3      	b.n	8006722 <UART_SetConfig+0xf6>
 80067da:	2200      	movs	r2, #0
 80067dc:	e7a1      	b.n	8006722 <UART_SetConfig+0xf6>
 80067de:	2210      	movs	r2, #16
 80067e0:	e79f      	b.n	8006722 <UART_SetConfig+0xf6>
 80067e2:	2210      	movs	r2, #16
 80067e4:	e79d      	b.n	8006722 <UART_SetConfig+0xf6>
 80067e6:	2202      	movs	r2, #2
 80067e8:	e79b      	b.n	8006722 <UART_SetConfig+0xf6>
 80067ea:	2200      	movs	r2, #0
 80067ec:	e799      	b.n	8006722 <UART_SetConfig+0xf6>
 80067ee:	2210      	movs	r2, #16
 80067f0:	e797      	b.n	8006722 <UART_SetConfig+0xf6>
 80067f2:	2210      	movs	r2, #16
 80067f4:	e795      	b.n	8006722 <UART_SetConfig+0xf6>
 80067f6:	2202      	movs	r2, #2
 80067f8:	e793      	b.n	8006722 <UART_SetConfig+0xf6>
 80067fa:	2200      	movs	r2, #0
 80067fc:	e791      	b.n	8006722 <UART_SetConfig+0xf6>
 80067fe:	2210      	movs	r2, #16
 8006800:	e78f      	b.n	8006722 <UART_SetConfig+0xf6>
 8006802:	2210      	movs	r2, #16
 8006804:	e78d      	b.n	8006722 <UART_SetConfig+0xf6>
 8006806:	2202      	movs	r2, #2
 8006808:	e78b      	b.n	8006722 <UART_SetConfig+0xf6>
 800680a:	2200      	movs	r2, #0
 800680c:	e789      	b.n	8006722 <UART_SetConfig+0xf6>
 800680e:	2210      	movs	r2, #16
 8006810:	e787      	b.n	8006722 <UART_SetConfig+0xf6>
 8006812:	2210      	movs	r2, #16
 8006814:	e785      	b.n	8006722 <UART_SetConfig+0xf6>
    switch (clocksource)
 8006816:	2a08      	cmp	r2, #8
 8006818:	f200 80b2 	bhi.w	8006980 <UART_SetConfig+0x354>
 800681c:	e8df f002 	tbb	[pc, r2]
 8006820:	b03bb008 	.word	0xb03bb008
 8006824:	b0b0b038 	.word	0xb0b0b038
 8006828:	05          	.byte	0x05
 8006829:	00          	.byte	0x00
 800682a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800682e:	e004      	b.n	800683a <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fe fd3c 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006834:	2800      	cmp	r0, #0
 8006836:	f000 80a5 	beq.w	8006984 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800683a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800683c:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <UART_SetConfig+0x28c>)
 800683e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006842:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006846:	6865      	ldr	r5, [r4, #4]
 8006848:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800684c:	4299      	cmp	r1, r3
 800684e:	f200 809b 	bhi.w	8006988 <UART_SetConfig+0x35c>
 8006852:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006856:	f200 8099 	bhi.w	800698c <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800685a:	2600      	movs	r6, #0
 800685c:	4633      	mov	r3, r6
 800685e:	4631      	mov	r1, r6
 8006860:	f7fa f810 	bl	8000884 <__aeabi_uldivmod>
 8006864:	0209      	lsls	r1, r1, #8
 8006866:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800686a:	0200      	lsls	r0, r0, #8
 800686c:	086b      	lsrs	r3, r5, #1
 800686e:	18c0      	adds	r0, r0, r3
 8006870:	462a      	mov	r2, r5
 8006872:	4633      	mov	r3, r6
 8006874:	f141 0100 	adc.w	r1, r1, #0
 8006878:	f7fa f804 	bl	8000884 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800687c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <UART_SetConfig+0x290>)
 8006882:	429a      	cmp	r2, r3
 8006884:	f200 8084 	bhi.w	8006990 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	60d8      	str	r0, [r3, #12]
 800688c:	4630      	mov	r0, r6
 800688e:	e065      	b.n	800695c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8006890:	f7fe fbc6 	bl	8005020 <HAL_RCC_GetSysClockFreq>
        break;
 8006894:	e7ce      	b.n	8006834 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8006896:	480a      	ldr	r0, [pc, #40]	; (80068c0 <UART_SetConfig+0x294>)
 8006898:	e7cf      	b.n	800683a <UART_SetConfig+0x20e>
 800689a:	bf00      	nop
 800689c:	cfff69f3 	.word	0xcfff69f3
 80068a0:	40008000 	.word	0x40008000
 80068a4:	40013800 	.word	0x40013800
 80068a8:	40004400 	.word	0x40004400
 80068ac:	40004800 	.word	0x40004800
 80068b0:	40004c00 	.word	0x40004c00
 80068b4:	40005000 	.word	0x40005000
 80068b8:	08007d9c 	.word	0x08007d9c
 80068bc:	000ffcff 	.word	0x000ffcff
 80068c0:	00f42400 	.word	0x00f42400
    switch (clocksource)
 80068c4:	2a08      	cmp	r2, #8
 80068c6:	d865      	bhi.n	8006994 <UART_SetConfig+0x368>
 80068c8:	e8df f002 	tbb	[pc, r2]
 80068cc:	64052707 	.word	0x64052707
 80068d0:	6464642a 	.word	0x6464642a
 80068d4:	0b          	.byte	0x0b
 80068d5:	00          	.byte	0x00
 80068d6:	4835      	ldr	r0, [pc, #212]	; (80069ac <UART_SetConfig+0x380>)
 80068d8:	e003      	b.n	80068e2 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80068da:	f7fe fce7 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80068de:	2800      	cmp	r0, #0
 80068e0:	d05a      	beq.n	8006998 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068e4:	4b32      	ldr	r3, [pc, #200]	; (80069b0 <UART_SetConfig+0x384>)
 80068e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80068ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80068ee:	6862      	ldr	r2, [r4, #4]
 80068f0:	0853      	lsrs	r3, r2, #1
 80068f2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80068f6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068fa:	f1a0 0210 	sub.w	r2, r0, #16
 80068fe:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006902:	429a      	cmp	r2, r3
 8006904:	d84a      	bhi.n	800699c <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006906:	b283      	uxth	r3, r0
 8006908:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800690c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006910:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	60d8      	str	r0, [r3, #12]
 8006916:	2000      	movs	r0, #0
 8006918:	e020      	b.n	800695c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800691a:	f7fe fcd9 	bl	80052d0 <HAL_RCC_GetPCLK2Freq>
        break;
 800691e:	e7de      	b.n	80068de <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8006920:	f7fe fb7e 	bl	8005020 <HAL_RCC_GetSysClockFreq>
        break;
 8006924:	e7db      	b.n	80068de <UART_SetConfig+0x2b2>
    switch (clocksource)
 8006926:	4821      	ldr	r0, [pc, #132]	; (80069ac <UART_SetConfig+0x380>)
 8006928:	e003      	b.n	8006932 <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800692a:	f7fe fcbf 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 800692e:	2800      	cmp	r0, #0
 8006930:	d038      	beq.n	80069a4 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006932:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006934:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <UART_SetConfig+0x384>)
 8006936:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800693a:	fbb0 f0f3 	udiv	r0, r0, r3
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006944:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006948:	f1a0 0210 	sub.w	r2, r0, #16
 800694c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006950:	429a      	cmp	r2, r3
 8006952:	d829      	bhi.n	80069a8 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	b280      	uxth	r0, r0
 8006958:	60d8      	str	r0, [r3, #12]
 800695a:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800695c:	2301      	movs	r3, #1
 800695e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006962:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006966:	2300      	movs	r3, #0
 8006968:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800696a:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 800696c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800696e:	f7fe fcaf 	bl	80052d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8006972:	e7dc      	b.n	800692e <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8006974:	f7fe fb54 	bl	8005020 <HAL_RCC_GetSysClockFreq>
        break;
 8006978:	e7d9      	b.n	800692e <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800697a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800697e:	e7d8      	b.n	8006932 <UART_SetConfig+0x306>
    switch (clocksource)
 8006980:	2001      	movs	r0, #1
 8006982:	e7eb      	b.n	800695c <UART_SetConfig+0x330>
 8006984:	2000      	movs	r0, #0
 8006986:	e7e9      	b.n	800695c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006988:	2001      	movs	r0, #1
 800698a:	e7e7      	b.n	800695c <UART_SetConfig+0x330>
 800698c:	2001      	movs	r0, #1
 800698e:	e7e5      	b.n	800695c <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8006990:	2001      	movs	r0, #1
 8006992:	e7e3      	b.n	800695c <UART_SetConfig+0x330>
    switch (clocksource)
 8006994:	2001      	movs	r0, #1
 8006996:	e7e1      	b.n	800695c <UART_SetConfig+0x330>
 8006998:	2000      	movs	r0, #0
 800699a:	e7df      	b.n	800695c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800699c:	2001      	movs	r0, #1
 800699e:	e7dd      	b.n	800695c <UART_SetConfig+0x330>
    switch (clocksource)
 80069a0:	2001      	movs	r0, #1
 80069a2:	e7db      	b.n	800695c <UART_SetConfig+0x330>
 80069a4:	2000      	movs	r0, #0
 80069a6:	e7d9      	b.n	800695c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80069a8:	2001      	movs	r0, #1
 80069aa:	e7d7      	b.n	800695c <UART_SetConfig+0x330>
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	08007d9c 	.word	0x08007d9c

080069b4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069b6:	f013 0f01 	tst.w	r3, #1
 80069ba:	d006      	beq.n	80069ca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069bc:	6802      	ldr	r2, [r0, #0]
 80069be:	6853      	ldr	r3, [r2, #4]
 80069c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069c4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80069c6:	430b      	orrs	r3, r1
 80069c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069cc:	f013 0f02 	tst.w	r3, #2
 80069d0:	d006      	beq.n	80069e0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d2:	6802      	ldr	r2, [r0, #0]
 80069d4:	6853      	ldr	r3, [r2, #4]
 80069d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069da:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80069dc:	430b      	orrs	r3, r1
 80069de:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069e2:	f013 0f04 	tst.w	r3, #4
 80069e6:	d006      	beq.n	80069f6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069e8:	6802      	ldr	r2, [r0, #0]
 80069ea:	6853      	ldr	r3, [r2, #4]
 80069ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069f8:	f013 0f08 	tst.w	r3, #8
 80069fc:	d006      	beq.n	8006a0c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069fe:	6802      	ldr	r2, [r0, #0]
 8006a00:	6853      	ldr	r3, [r2, #4]
 8006a02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a06:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a0e:	f013 0f10 	tst.w	r3, #16
 8006a12:	d006      	beq.n	8006a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	6802      	ldr	r2, [r0, #0]
 8006a16:	6893      	ldr	r3, [r2, #8]
 8006a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a1c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a24:	f013 0f20 	tst.w	r3, #32
 8006a28:	d006      	beq.n	8006a38 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a2a:	6802      	ldr	r2, [r0, #0]
 8006a2c:	6893      	ldr	r3, [r2, #8]
 8006a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a32:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a3e:	d00a      	beq.n	8006a56 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a40:	6802      	ldr	r2, [r0, #0]
 8006a42:	6853      	ldr	r3, [r2, #4]
 8006a44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a48:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a54:	d00b      	beq.n	8006a6e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a5c:	d006      	beq.n	8006a6c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a5e:	6802      	ldr	r2, [r0, #0]
 8006a60:	6853      	ldr	r3, [r2, #4]
 8006a62:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006a66:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6053      	str	r3, [r2, #4]
  }
}
 8006a6c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a6e:	6802      	ldr	r2, [r0, #0]
 8006a70:	6853      	ldr	r3, [r2, #4]
 8006a72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a76:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6053      	str	r3, [r2, #4]
 8006a7c:	e7eb      	b.n	8006a56 <UART_AdvFeatureConfig+0xa2>

08006a7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a82:	4605      	mov	r5, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	4616      	mov	r6, r2
 8006a88:	4699      	mov	r9, r3
 8006a8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8e:	682c      	ldr	r4, [r5, #0]
 8006a90:	69e4      	ldr	r4, [r4, #28]
 8006a92:	ea37 0304 	bics.w	r3, r7, r4
 8006a96:	bf0c      	ite	eq
 8006a98:	f04f 0c01 	moveq.w	ip, #1
 8006a9c:	f04f 0c00 	movne.w	ip, #0
 8006aa0:	45b4      	cmp	ip, r6
 8006aa2:	d157      	bne.n	8006b54 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006aa8:	d0f1      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fb ffa1 	bl	80029f0 <HAL_GetTick>
 8006aae:	eba0 0009 	sub.w	r0, r0, r9
 8006ab2:	4540      	cmp	r0, r8
 8006ab4:	d82f      	bhi.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x98>
 8006ab6:	f1b8 0f00 	cmp.w	r8, #0
 8006aba:	d02c      	beq.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	f012 0f04 	tst.w	r2, #4
 8006ac4:	d0e3      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006acc:	d0df      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ad4:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	e852 3f00 	ldrex	r3, [r2]
 8006ada:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	e842 3100 	strex	r1, r3, [r2]
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	d1f6      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	f102 0308 	add.w	r3, r2, #8
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	3208      	adds	r2, #8
 8006af6:	e842 3100 	strex	r1, r3, [r2]
 8006afa:	2900      	cmp	r1, #0
 8006afc:	d1f3      	bne.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8006afe:	2320      	movs	r3, #32
 8006b00:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b04:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b08:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b12:	2003      	movs	r0, #3
 8006b14:	e01f      	b.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b16:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	e852 3f00 	ldrex	r3, [r2]
 8006b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	e842 3100 	strex	r1, r3, [r2]
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d1f6      	bne.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b28:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	f102 0308 	add.w	r3, r2, #8
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	3208      	adds	r2, #8
 8006b38:	e842 3100 	strex	r1, r3, [r2]
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d1f3      	bne.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006b40:	2320      	movs	r3, #32
 8006b42:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b46:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006b50:	2003      	movs	r0, #3
 8006b52:	e000      	b.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8006b54:	2000      	movs	r0, #0
}
 8006b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006b5a <UART_CheckIdleState>:
{
 8006b5a:	b530      	push	{r4, r5, lr}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006b66:	f7fb ff43 	bl	80029f0 <HAL_GetTick>
 8006b6a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	f012 0f08 	tst.w	r2, #8
 8006b74:	d10f      	bne.n	8006b96 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f013 0f04 	tst.w	r3, #4
 8006b7e:	d118      	bne.n	8006bb2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006b80:	2320      	movs	r3, #32
 8006b82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b86:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006b8e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006b92:	b003      	add	sp, #12
 8006b94:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f7ff ff6a 	bl	8006a7e <UART_WaitOnFlagUntilTimeout>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0e3      	beq.n	8006b76 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006bae:	2003      	movs	r0, #3
 8006bb0:	e7ef      	b.n	8006b92 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	462b      	mov	r3, r5
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f7ff ff5c 	bl	8006a7e <UART_WaitOnFlagUntilTimeout>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d0da      	beq.n	8006b80 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006bca:	2003      	movs	r0, #3
 8006bcc:	e7e1      	b.n	8006b92 <UART_CheckIdleState+0x38>

08006bce <HAL_UART_Init>:
  if (huart == NULL)
 8006bce:	b378      	cbz	r0, 8006c30 <HAL_UART_Init+0x62>
{
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006bd4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006bd8:	b30b      	cbz	r3, 8006c1e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006bda:	2324      	movs	r3, #36	; 0x24
 8006bdc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	6813      	ldr	r3, [r2, #0]
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bea:	4620      	mov	r0, r4
 8006bec:	f7ff fd1e 	bl	800662c <UART_SetConfig>
 8006bf0:	2801      	cmp	r0, #1
 8006bf2:	d013      	beq.n	8006c1c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006bf6:	b9bb      	cbnz	r3, 8006c28 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	6853      	ldr	r3, [r2, #4]
 8006bfc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006c00:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	6893      	ldr	r3, [r2, #8]
 8006c06:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006c0a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	6813      	ldr	r3, [r2, #0]
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff ff9f 	bl	8006b5a <UART_CheckIdleState>
}
 8006c1c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c1e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006c22:	f7fb fd2f 	bl	8002684 <HAL_UART_MspInit>
 8006c26:	e7d8      	b.n	8006bda <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f7ff fec3 	bl	80069b4 <UART_AdvFeatureConfig>
 8006c2e:	e7e3      	b.n	8006bf8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006c30:	2001      	movs	r0, #1
}
 8006c32:	4770      	bx	lr

08006c34 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c34:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006c36:	b92b      	cbnz	r3, 8006c44 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c3e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006c42:	4770      	bx	lr
{
 8006c44:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c46:	6803      	ldr	r3, [r0, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c52:	4d09      	ldr	r5, [pc, #36]	; (8006c78 <UARTEx_SetNbDataToProcess+0x44>)
 8006c54:	5c6b      	ldrb	r3, [r5, r1]
 8006c56:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c58:	4c08      	ldr	r4, [pc, #32]	; (8006c7c <UARTEx_SetNbDataToProcess+0x48>)
 8006c5a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c5c:	fb93 f3f1 	sdiv	r3, r3, r1
 8006c60:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c64:	5cab      	ldrb	r3, [r5, r2]
 8006c66:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c68:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c6e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006c72:	bc30      	pop	{r4, r5}
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	08007dbc 	.word	0x08007dbc
 8006c7c:	08007db4 	.word	0x08007db4

08006c80 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006c80:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d018      	beq.n	8006cba <HAL_UARTEx_DisableFifoMode+0x3a>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006c8e:	2324      	movs	r3, #36	; 0x24
 8006c90:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c94:	6803      	ldr	r3, [r0, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006c98:	6819      	ldr	r1, [r3, #0]
 8006c9a:	f021 0101 	bic.w	r1, r1, #1
 8006c9e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ca0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ca8:	6801      	ldr	r1, [r0, #0]
 8006caa:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006cb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006cba:	2002      	movs	r0, #2
}
 8006cbc:	4770      	bx	lr

08006cbe <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006cbe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006cc0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d01d      	beq.n	8006d04 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006cd0:	2324      	movs	r3, #36	; 0x24
 8006cd2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd6:	6803      	ldr	r3, [r0, #0]
 8006cd8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ce2:	6802      	ldr	r2, [r0, #0]
 8006ce4:	6893      	ldr	r3, [r2, #8]
 8006ce6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006cea:	4319      	orrs	r1, r3
 8006cec:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006cee:	f7ff ffa1 	bl	8006c34 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	2320      	movs	r3, #32
 8006cf8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d04:	2002      	movs	r0, #2
 8006d06:	e7fc      	b.n	8006d02 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006d08 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006d08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d0a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d01d      	beq.n	8006d4e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006d12:	4604      	mov	r4, r0
 8006d14:	2301      	movs	r3, #1
 8006d16:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d1a:	2324      	movs	r3, #36	; 0x24
 8006d1c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d20:	6803      	ldr	r3, [r0, #0]
 8006d22:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d2c:	6802      	ldr	r2, [r0, #0]
 8006d2e:	6893      	ldr	r3, [r2, #8]
 8006d30:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006d34:	4319      	orrs	r1, r3
 8006d36:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d38:	f7ff ff7c 	bl	8006c34 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d40:	2320      	movs	r3, #32
 8006d42:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d46:	2000      	movs	r0, #0
 8006d48:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d4e:	2002      	movs	r0, #2
 8006d50:	e7fc      	b.n	8006d4c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006d54 <__errno>:
 8006d54:	4b01      	ldr	r3, [pc, #4]	; (8006d5c <__errno+0x8>)
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	2000000c 	.word	0x2000000c

08006d60 <__libc_init_array>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	4d0d      	ldr	r5, [pc, #52]	; (8006d98 <__libc_init_array+0x38>)
 8006d64:	4c0d      	ldr	r4, [pc, #52]	; (8006d9c <__libc_init_array+0x3c>)
 8006d66:	1b64      	subs	r4, r4, r5
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	42a6      	cmp	r6, r4
 8006d6e:	d109      	bne.n	8006d84 <__libc_init_array+0x24>
 8006d70:	4d0b      	ldr	r5, [pc, #44]	; (8006da0 <__libc_init_array+0x40>)
 8006d72:	4c0c      	ldr	r4, [pc, #48]	; (8006da4 <__libc_init_array+0x44>)
 8006d74:	f000 fffa 	bl	8007d6c <_init>
 8006d78:	1b64      	subs	r4, r4, r5
 8006d7a:	10a4      	asrs	r4, r4, #2
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	42a6      	cmp	r6, r4
 8006d80:	d105      	bne.n	8006d8e <__libc_init_array+0x2e>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d88:	4798      	blx	r3
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7ee      	b.n	8006d6c <__libc_init_array+0xc>
 8006d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d92:	4798      	blx	r3
 8006d94:	3601      	adds	r6, #1
 8006d96:	e7f2      	b.n	8006d7e <__libc_init_array+0x1e>
 8006d98:	080081dc 	.word	0x080081dc
 8006d9c:	080081dc 	.word	0x080081dc
 8006da0:	080081dc 	.word	0x080081dc
 8006da4:	080081e0 	.word	0x080081e0

08006da8 <memset>:
 8006da8:	4402      	add	r2, r0
 8006daa:	4603      	mov	r3, r0
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d100      	bne.n	8006db2 <memset+0xa>
 8006db0:	4770      	bx	lr
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	e7f9      	b.n	8006dac <memset+0x4>

08006db8 <cosf>:
 8006db8:	ee10 3a10 	vmov	r3, s0
 8006dbc:	b507      	push	{r0, r1, r2, lr}
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <cosf+0x80>)
 8006dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	dc06      	bgt.n	8006dd6 <cosf+0x1e>
 8006dc8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8006e3c <cosf+0x84>
 8006dcc:	b003      	add	sp, #12
 8006dce:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd2:	f000 bb1d 	b.w	8007410 <__kernel_cosf>
 8006dd6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006dda:	db04      	blt.n	8006de6 <cosf+0x2e>
 8006ddc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006de0:	b003      	add	sp, #12
 8006de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006de6:	4668      	mov	r0, sp
 8006de8:	f000 f9d2 	bl	8007190 <__ieee754_rem_pio2f>
 8006dec:	f000 0003 	and.w	r0, r0, #3
 8006df0:	2801      	cmp	r0, #1
 8006df2:	d009      	beq.n	8006e08 <cosf+0x50>
 8006df4:	2802      	cmp	r0, #2
 8006df6:	d010      	beq.n	8006e1a <cosf+0x62>
 8006df8:	b9b0      	cbnz	r0, 8006e28 <cosf+0x70>
 8006dfa:	eddd 0a01 	vldr	s1, [sp, #4]
 8006dfe:	ed9d 0a00 	vldr	s0, [sp]
 8006e02:	f000 fb05 	bl	8007410 <__kernel_cosf>
 8006e06:	e7eb      	b.n	8006de0 <cosf+0x28>
 8006e08:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e0c:	ed9d 0a00 	vldr	s0, [sp]
 8006e10:	f000 fdd4 	bl	80079bc <__kernel_sinf>
 8006e14:	eeb1 0a40 	vneg.f32	s0, s0
 8006e18:	e7e2      	b.n	8006de0 <cosf+0x28>
 8006e1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e1e:	ed9d 0a00 	vldr	s0, [sp]
 8006e22:	f000 faf5 	bl	8007410 <__kernel_cosf>
 8006e26:	e7f5      	b.n	8006e14 <cosf+0x5c>
 8006e28:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e2c:	ed9d 0a00 	vldr	s0, [sp]
 8006e30:	2001      	movs	r0, #1
 8006e32:	f000 fdc3 	bl	80079bc <__kernel_sinf>
 8006e36:	e7d3      	b.n	8006de0 <cosf+0x28>
 8006e38:	3f490fd8 	.word	0x3f490fd8
 8006e3c:	00000000 	.word	0x00000000

08006e40 <sinf>:
 8006e40:	ee10 3a10 	vmov	r3, s0
 8006e44:	b507      	push	{r0, r1, r2, lr}
 8006e46:	4a1f      	ldr	r2, [pc, #124]	; (8006ec4 <sinf+0x84>)
 8006e48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	dc07      	bgt.n	8006e60 <sinf+0x20>
 8006e50:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006ec8 <sinf+0x88>
 8006e54:	2000      	movs	r0, #0
 8006e56:	b003      	add	sp, #12
 8006e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e5c:	f000 bdae 	b.w	80079bc <__kernel_sinf>
 8006e60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e64:	db04      	blt.n	8006e70 <sinf+0x30>
 8006e66:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006e6a:	b003      	add	sp, #12
 8006e6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e70:	4668      	mov	r0, sp
 8006e72:	f000 f98d 	bl	8007190 <__ieee754_rem_pio2f>
 8006e76:	f000 0003 	and.w	r0, r0, #3
 8006e7a:	2801      	cmp	r0, #1
 8006e7c:	d00a      	beq.n	8006e94 <sinf+0x54>
 8006e7e:	2802      	cmp	r0, #2
 8006e80:	d00f      	beq.n	8006ea2 <sinf+0x62>
 8006e82:	b9c0      	cbnz	r0, 8006eb6 <sinf+0x76>
 8006e84:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e88:	ed9d 0a00 	vldr	s0, [sp]
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	f000 fd95 	bl	80079bc <__kernel_sinf>
 8006e92:	e7ea      	b.n	8006e6a <sinf+0x2a>
 8006e94:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e98:	ed9d 0a00 	vldr	s0, [sp]
 8006e9c:	f000 fab8 	bl	8007410 <__kernel_cosf>
 8006ea0:	e7e3      	b.n	8006e6a <sinf+0x2a>
 8006ea2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ea6:	ed9d 0a00 	vldr	s0, [sp]
 8006eaa:	2001      	movs	r0, #1
 8006eac:	f000 fd86 	bl	80079bc <__kernel_sinf>
 8006eb0:	eeb1 0a40 	vneg.f32	s0, s0
 8006eb4:	e7d9      	b.n	8006e6a <sinf+0x2a>
 8006eb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8006eba:	ed9d 0a00 	vldr	s0, [sp]
 8006ebe:	f000 faa7 	bl	8007410 <__kernel_cosf>
 8006ec2:	e7f5      	b.n	8006eb0 <sinf+0x70>
 8006ec4:	3f490fd8 	.word	0x3f490fd8
 8006ec8:	00000000 	.word	0x00000000

08006ecc <atan2f>:
 8006ecc:	f000 b83e 	b.w	8006f4c <__ieee754_atan2f>

08006ed0 <fmodf>:
 8006ed0:	b508      	push	{r3, lr}
 8006ed2:	ed2d 8b02 	vpush	{d8}
 8006ed6:	eef0 8a40 	vmov.f32	s17, s0
 8006eda:	eeb0 8a60 	vmov.f32	s16, s1
 8006ede:	f000 f8d5 	bl	800708c <__ieee754_fmodf>
 8006ee2:	eef4 8a48 	vcmp.f32	s17, s16
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	d60c      	bvs.n	8006f06 <fmodf+0x36>
 8006eec:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006f0c <fmodf+0x3c>
 8006ef0:	eeb4 8a68 	vcmp.f32	s16, s17
 8006ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef8:	d105      	bne.n	8006f06 <fmodf+0x36>
 8006efa:	f7ff ff2b 	bl	8006d54 <__errno>
 8006efe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006f02:	2321      	movs	r3, #33	; 0x21
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	ecbd 8b02 	vpop	{d8}
 8006f0a:	bd08      	pop	{r3, pc}
 8006f0c:	00000000 	.word	0x00000000

08006f10 <sqrtf>:
 8006f10:	b508      	push	{r3, lr}
 8006f12:	ed2d 8b02 	vpush	{d8}
 8006f16:	eeb0 8a40 	vmov.f32	s16, s0
 8006f1a:	f000 fa75 	bl	8007408 <__ieee754_sqrtf>
 8006f1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f26:	d60c      	bvs.n	8006f42 <sqrtf+0x32>
 8006f28:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006f48 <sqrtf+0x38>
 8006f2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f34:	d505      	bpl.n	8006f42 <sqrtf+0x32>
 8006f36:	f7ff ff0d 	bl	8006d54 <__errno>
 8006f3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006f3e:	2321      	movs	r3, #33	; 0x21
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	ecbd 8b02 	vpop	{d8}
 8006f46:	bd08      	pop	{r3, pc}
 8006f48:	00000000 	.word	0x00000000

08006f4c <__ieee754_atan2f>:
 8006f4c:	ee10 2a90 	vmov	r2, s1
 8006f50:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006f54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	eef0 7a40 	vmov.f32	s15, s0
 8006f5e:	dc06      	bgt.n	8006f6e <__ieee754_atan2f+0x22>
 8006f60:	ee10 0a10 	vmov	r0, s0
 8006f64:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006f68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f6c:	dd04      	ble.n	8006f78 <__ieee754_atan2f+0x2c>
 8006f6e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006f72:	eeb0 0a67 	vmov.f32	s0, s15
 8006f76:	bd10      	pop	{r4, pc}
 8006f78:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006f7c:	d103      	bne.n	8006f86 <__ieee754_atan2f+0x3a>
 8006f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f82:	f000 bd63 	b.w	8007a4c <atanf>
 8006f86:	1794      	asrs	r4, r2, #30
 8006f88:	f004 0402 	and.w	r4, r4, #2
 8006f8c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006f90:	b943      	cbnz	r3, 8006fa4 <__ieee754_atan2f+0x58>
 8006f92:	2c02      	cmp	r4, #2
 8006f94:	d05e      	beq.n	8007054 <__ieee754_atan2f+0x108>
 8006f96:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007068 <__ieee754_atan2f+0x11c>
 8006f9a:	2c03      	cmp	r4, #3
 8006f9c:	bf08      	it	eq
 8006f9e:	eef0 7a47 	vmoveq.f32	s15, s14
 8006fa2:	e7e6      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8006fa4:	b941      	cbnz	r1, 8006fb8 <__ieee754_atan2f+0x6c>
 8006fa6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800706c <__ieee754_atan2f+0x120>
 8006faa:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007070 <__ieee754_atan2f+0x124>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	bfb8      	it	lt
 8006fb2:	eef0 7a40 	vmovlt.f32	s15, s0
 8006fb6:	e7dc      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8006fb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006fbc:	d110      	bne.n	8006fe0 <__ieee754_atan2f+0x94>
 8006fbe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fc6:	d107      	bne.n	8006fd8 <__ieee754_atan2f+0x8c>
 8006fc8:	2c02      	cmp	r4, #2
 8006fca:	d846      	bhi.n	800705a <__ieee754_atan2f+0x10e>
 8006fcc:	4b29      	ldr	r3, [pc, #164]	; (8007074 <__ieee754_atan2f+0x128>)
 8006fce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006fd2:	edd4 7a00 	vldr	s15, [r4]
 8006fd6:	e7cc      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8006fd8:	2c02      	cmp	r4, #2
 8006fda:	d841      	bhi.n	8007060 <__ieee754_atan2f+0x114>
 8006fdc:	4b26      	ldr	r3, [pc, #152]	; (8007078 <__ieee754_atan2f+0x12c>)
 8006fde:	e7f6      	b.n	8006fce <__ieee754_atan2f+0x82>
 8006fe0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fe4:	d0df      	beq.n	8006fa6 <__ieee754_atan2f+0x5a>
 8006fe6:	1a5b      	subs	r3, r3, r1
 8006fe8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8006fec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8006ff0:	da1a      	bge.n	8007028 <__ieee754_atan2f+0xdc>
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	da01      	bge.n	8006ffa <__ieee754_atan2f+0xae>
 8006ff6:	313c      	adds	r1, #60	; 0x3c
 8006ff8:	db19      	blt.n	800702e <__ieee754_atan2f+0xe2>
 8006ffa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8006ffe:	f000 fdf9 	bl	8007bf4 <fabsf>
 8007002:	f000 fd23 	bl	8007a4c <atanf>
 8007006:	eef0 7a40 	vmov.f32	s15, s0
 800700a:	2c01      	cmp	r4, #1
 800700c:	d012      	beq.n	8007034 <__ieee754_atan2f+0xe8>
 800700e:	2c02      	cmp	r4, #2
 8007010:	d017      	beq.n	8007042 <__ieee754_atan2f+0xf6>
 8007012:	2c00      	cmp	r4, #0
 8007014:	d0ad      	beq.n	8006f72 <__ieee754_atan2f+0x26>
 8007016:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800707c <__ieee754_atan2f+0x130>
 800701a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800701e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007080 <__ieee754_atan2f+0x134>
 8007022:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007026:	e7a4      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8007028:	eddf 7a10 	vldr	s15, [pc, #64]	; 800706c <__ieee754_atan2f+0x120>
 800702c:	e7ed      	b.n	800700a <__ieee754_atan2f+0xbe>
 800702e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007084 <__ieee754_atan2f+0x138>
 8007032:	e7ea      	b.n	800700a <__ieee754_atan2f+0xbe>
 8007034:	ee17 3a90 	vmov	r3, s15
 8007038:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	e797      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8007042:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800707c <__ieee754_atan2f+0x130>
 8007046:	ee77 7a80 	vadd.f32	s15, s15, s0
 800704a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007080 <__ieee754_atan2f+0x134>
 800704e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007052:	e78e      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8007054:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007080 <__ieee754_atan2f+0x134>
 8007058:	e78b      	b.n	8006f72 <__ieee754_atan2f+0x26>
 800705a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007088 <__ieee754_atan2f+0x13c>
 800705e:	e788      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8007060:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007084 <__ieee754_atan2f+0x138>
 8007064:	e785      	b.n	8006f72 <__ieee754_atan2f+0x26>
 8007066:	bf00      	nop
 8007068:	c0490fdb 	.word	0xc0490fdb
 800706c:	3fc90fdb 	.word	0x3fc90fdb
 8007070:	bfc90fdb 	.word	0xbfc90fdb
 8007074:	08007dc4 	.word	0x08007dc4
 8007078:	08007dd0 	.word	0x08007dd0
 800707c:	33bbbd2e 	.word	0x33bbbd2e
 8007080:	40490fdb 	.word	0x40490fdb
 8007084:	00000000 	.word	0x00000000
 8007088:	3f490fdb 	.word	0x3f490fdb

0800708c <__ieee754_fmodf>:
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708e:	ee10 5a90 	vmov	r5, s1
 8007092:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8007096:	d009      	beq.n	80070ac <__ieee754_fmodf+0x20>
 8007098:	ee10 2a10 	vmov	r2, s0
 800709c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80070a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070a4:	da02      	bge.n	80070ac <__ieee754_fmodf+0x20>
 80070a6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80070aa:	dd04      	ble.n	80070b6 <__ieee754_fmodf+0x2a>
 80070ac:	ee60 0a20 	vmul.f32	s1, s0, s1
 80070b0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80070b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	dbfc      	blt.n	80070b4 <__ieee754_fmodf+0x28>
 80070ba:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80070be:	d105      	bne.n	80070cc <__ieee754_fmodf+0x40>
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <__ieee754_fmodf+0x100>)
 80070c2:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80070c6:	ed93 0a00 	vldr	s0, [r3]
 80070ca:	e7f3      	b.n	80070b4 <__ieee754_fmodf+0x28>
 80070cc:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80070d0:	d13f      	bne.n	8007152 <__ieee754_fmodf+0xc6>
 80070d2:	0219      	lsls	r1, r3, #8
 80070d4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80070d8:	2900      	cmp	r1, #0
 80070da:	dc37      	bgt.n	800714c <__ieee754_fmodf+0xc0>
 80070dc:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80070e0:	d13d      	bne.n	800715e <__ieee754_fmodf+0xd2>
 80070e2:	0227      	lsls	r7, r4, #8
 80070e4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	da35      	bge.n	8007158 <__ieee754_fmodf+0xcc>
 80070ec:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80070f0:	bfbb      	ittet	lt
 80070f2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80070f6:	1a12      	sublt	r2, r2, r0
 80070f8:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80070fc:	4093      	lsllt	r3, r2
 80070fe:	bfa8      	it	ge
 8007100:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8007104:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007108:	bfb5      	itete	lt
 800710a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800710e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8007112:	1a52      	sublt	r2, r2, r1
 8007114:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8007118:	bfb8      	it	lt
 800711a:	4094      	lsllt	r4, r2
 800711c:	1a40      	subs	r0, r0, r1
 800711e:	1b1a      	subs	r2, r3, r4
 8007120:	bb00      	cbnz	r0, 8007164 <__ieee754_fmodf+0xd8>
 8007122:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8007126:	bf38      	it	cc
 8007128:	4613      	movcc	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0c8      	beq.n	80070c0 <__ieee754_fmodf+0x34>
 800712e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007132:	db1f      	blt.n	8007174 <__ieee754_fmodf+0xe8>
 8007134:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007138:	db1f      	blt.n	800717a <__ieee754_fmodf+0xee>
 800713a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800713e:	317f      	adds	r1, #127	; 0x7f
 8007140:	4333      	orrs	r3, r6
 8007142:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8007146:	ee00 3a10 	vmov	s0, r3
 800714a:	e7b3      	b.n	80070b4 <__ieee754_fmodf+0x28>
 800714c:	3801      	subs	r0, #1
 800714e:	0049      	lsls	r1, r1, #1
 8007150:	e7c2      	b.n	80070d8 <__ieee754_fmodf+0x4c>
 8007152:	15d8      	asrs	r0, r3, #23
 8007154:	387f      	subs	r0, #127	; 0x7f
 8007156:	e7c1      	b.n	80070dc <__ieee754_fmodf+0x50>
 8007158:	3901      	subs	r1, #1
 800715a:	007f      	lsls	r7, r7, #1
 800715c:	e7c4      	b.n	80070e8 <__ieee754_fmodf+0x5c>
 800715e:	15e1      	asrs	r1, r4, #23
 8007160:	397f      	subs	r1, #127	; 0x7f
 8007162:	e7c3      	b.n	80070ec <__ieee754_fmodf+0x60>
 8007164:	2a00      	cmp	r2, #0
 8007166:	da02      	bge.n	800716e <__ieee754_fmodf+0xe2>
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	3801      	subs	r0, #1
 800716c:	e7d7      	b.n	800711e <__ieee754_fmodf+0x92>
 800716e:	d0a7      	beq.n	80070c0 <__ieee754_fmodf+0x34>
 8007170:	0053      	lsls	r3, r2, #1
 8007172:	e7fa      	b.n	800716a <__ieee754_fmodf+0xde>
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	3901      	subs	r1, #1
 8007178:	e7d9      	b.n	800712e <__ieee754_fmodf+0xa2>
 800717a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800717e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8007182:	3182      	adds	r1, #130	; 0x82
 8007184:	410b      	asrs	r3, r1
 8007186:	4333      	orrs	r3, r6
 8007188:	e7dd      	b.n	8007146 <__ieee754_fmodf+0xba>
 800718a:	bf00      	nop
 800718c:	08007ddc 	.word	0x08007ddc

08007190 <__ieee754_rem_pio2f>:
 8007190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007192:	ee10 6a10 	vmov	r6, s0
 8007196:	4b8e      	ldr	r3, [pc, #568]	; (80073d0 <__ieee754_rem_pio2f+0x240>)
 8007198:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800719c:	429d      	cmp	r5, r3
 800719e:	b087      	sub	sp, #28
 80071a0:	eef0 7a40 	vmov.f32	s15, s0
 80071a4:	4604      	mov	r4, r0
 80071a6:	dc05      	bgt.n	80071b4 <__ieee754_rem_pio2f+0x24>
 80071a8:	2300      	movs	r3, #0
 80071aa:	ed80 0a00 	vstr	s0, [r0]
 80071ae:	6043      	str	r3, [r0, #4]
 80071b0:	2000      	movs	r0, #0
 80071b2:	e01a      	b.n	80071ea <__ieee754_rem_pio2f+0x5a>
 80071b4:	4b87      	ldr	r3, [pc, #540]	; (80073d4 <__ieee754_rem_pio2f+0x244>)
 80071b6:	429d      	cmp	r5, r3
 80071b8:	dc46      	bgt.n	8007248 <__ieee754_rem_pio2f+0xb8>
 80071ba:	2e00      	cmp	r6, #0
 80071bc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80073d8 <__ieee754_rem_pio2f+0x248>
 80071c0:	4b86      	ldr	r3, [pc, #536]	; (80073dc <__ieee754_rem_pio2f+0x24c>)
 80071c2:	f025 050f 	bic.w	r5, r5, #15
 80071c6:	dd1f      	ble.n	8007208 <__ieee754_rem_pio2f+0x78>
 80071c8:	429d      	cmp	r5, r3
 80071ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071ce:	d00e      	beq.n	80071ee <__ieee754_rem_pio2f+0x5e>
 80071d0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80073e0 <__ieee754_rem_pio2f+0x250>
 80071d4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80071d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071dc:	ed80 0a00 	vstr	s0, [r0]
 80071e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071e4:	2001      	movs	r0, #1
 80071e6:	edc4 7a01 	vstr	s15, [r4, #4]
 80071ea:	b007      	add	sp, #28
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ee:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80073e4 <__ieee754_rem_pio2f+0x254>
 80071f2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80073e8 <__ieee754_rem_pio2f+0x258>
 80071f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071fa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80071fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007202:	edc0 6a00 	vstr	s13, [r0]
 8007206:	e7eb      	b.n	80071e0 <__ieee754_rem_pio2f+0x50>
 8007208:	429d      	cmp	r5, r3
 800720a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800720e:	d00e      	beq.n	800722e <__ieee754_rem_pio2f+0x9e>
 8007210:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80073e0 <__ieee754_rem_pio2f+0x250>
 8007214:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007218:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800721c:	ed80 0a00 	vstr	s0, [r0]
 8007220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	edc4 7a01 	vstr	s15, [r4, #4]
 800722c:	e7dd      	b.n	80071ea <__ieee754_rem_pio2f+0x5a>
 800722e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80073e4 <__ieee754_rem_pio2f+0x254>
 8007232:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80073e8 <__ieee754_rem_pio2f+0x258>
 8007236:	ee77 7a80 	vadd.f32	s15, s15, s0
 800723a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800723e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007242:	edc0 6a00 	vstr	s13, [r0]
 8007246:	e7eb      	b.n	8007220 <__ieee754_rem_pio2f+0x90>
 8007248:	4b68      	ldr	r3, [pc, #416]	; (80073ec <__ieee754_rem_pio2f+0x25c>)
 800724a:	429d      	cmp	r5, r3
 800724c:	dc72      	bgt.n	8007334 <__ieee754_rem_pio2f+0x1a4>
 800724e:	f000 fcd1 	bl	8007bf4 <fabsf>
 8007252:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80073f0 <__ieee754_rem_pio2f+0x260>
 8007256:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800725a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800725e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007266:	ee17 0a90 	vmov	r0, s15
 800726a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80073d8 <__ieee754_rem_pio2f+0x248>
 800726e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007272:	281f      	cmp	r0, #31
 8007274:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80073e0 <__ieee754_rem_pio2f+0x250>
 8007278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727c:	eeb1 6a47 	vneg.f32	s12, s14
 8007280:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007284:	ee16 2a90 	vmov	r2, s13
 8007288:	dc1c      	bgt.n	80072c4 <__ieee754_rem_pio2f+0x134>
 800728a:	495a      	ldr	r1, [pc, #360]	; (80073f4 <__ieee754_rem_pio2f+0x264>)
 800728c:	1e47      	subs	r7, r0, #1
 800728e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007292:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007296:	428b      	cmp	r3, r1
 8007298:	d014      	beq.n	80072c4 <__ieee754_rem_pio2f+0x134>
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	ed94 7a00 	vldr	s14, [r4]
 80072a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80072a4:	2e00      	cmp	r6, #0
 80072a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80072aa:	ed84 0a01 	vstr	s0, [r4, #4]
 80072ae:	da9c      	bge.n	80071ea <__ieee754_rem_pio2f+0x5a>
 80072b0:	eeb1 7a47 	vneg.f32	s14, s14
 80072b4:	eeb1 0a40 	vneg.f32	s0, s0
 80072b8:	ed84 7a00 	vstr	s14, [r4]
 80072bc:	ed84 0a01 	vstr	s0, [r4, #4]
 80072c0:	4240      	negs	r0, r0
 80072c2:	e792      	b.n	80071ea <__ieee754_rem_pio2f+0x5a>
 80072c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80072c8:	15eb      	asrs	r3, r5, #23
 80072ca:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80072ce:	2d08      	cmp	r5, #8
 80072d0:	dde3      	ble.n	800729a <__ieee754_rem_pio2f+0x10a>
 80072d2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80073e4 <__ieee754_rem_pio2f+0x254>
 80072d6:	eddf 5a44 	vldr	s11, [pc, #272]	; 80073e8 <__ieee754_rem_pio2f+0x258>
 80072da:	eef0 6a40 	vmov.f32	s13, s0
 80072de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072e2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80072e6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80072ea:	eef0 7a40 	vmov.f32	s15, s0
 80072ee:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80072f2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80072f6:	ee15 2a90 	vmov	r2, s11
 80072fa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80072fe:	1a5b      	subs	r3, r3, r1
 8007300:	2b19      	cmp	r3, #25
 8007302:	dc04      	bgt.n	800730e <__ieee754_rem_pio2f+0x17e>
 8007304:	edc4 5a00 	vstr	s11, [r4]
 8007308:	eeb0 0a66 	vmov.f32	s0, s13
 800730c:	e7c6      	b.n	800729c <__ieee754_rem_pio2f+0x10c>
 800730e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80073f8 <__ieee754_rem_pio2f+0x268>
 8007312:	eeb0 0a66 	vmov.f32	s0, s13
 8007316:	eea6 0a25 	vfma.f32	s0, s12, s11
 800731a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800731e:	eddf 6a37 	vldr	s13, [pc, #220]	; 80073fc <__ieee754_rem_pio2f+0x26c>
 8007322:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007326:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800732a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800732e:	ed84 7a00 	vstr	s14, [r4]
 8007332:	e7b3      	b.n	800729c <__ieee754_rem_pio2f+0x10c>
 8007334:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007338:	db06      	blt.n	8007348 <__ieee754_rem_pio2f+0x1b8>
 800733a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800733e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007342:	edc0 7a00 	vstr	s15, [r0]
 8007346:	e733      	b.n	80071b0 <__ieee754_rem_pio2f+0x20>
 8007348:	15ea      	asrs	r2, r5, #23
 800734a:	3a86      	subs	r2, #134	; 0x86
 800734c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007358:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007400 <__ieee754_rem_pio2f+0x270>
 800735c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007364:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800736c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007370:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007378:	ed8d 7a04 	vstr	s14, [sp, #16]
 800737c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007380:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	edcd 7a05 	vstr	s15, [sp, #20]
 800738c:	d11e      	bne.n	80073cc <__ieee754_rem_pio2f+0x23c>
 800738e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007396:	bf14      	ite	ne
 8007398:	2302      	movne	r3, #2
 800739a:	2301      	moveq	r3, #1
 800739c:	4919      	ldr	r1, [pc, #100]	; (8007404 <__ieee754_rem_pio2f+0x274>)
 800739e:	9101      	str	r1, [sp, #4]
 80073a0:	2102      	movs	r1, #2
 80073a2:	9100      	str	r1, [sp, #0]
 80073a4:	a803      	add	r0, sp, #12
 80073a6:	4621      	mov	r1, r4
 80073a8:	f000 f892 	bl	80074d0 <__kernel_rem_pio2f>
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	f6bf af1c 	bge.w	80071ea <__ieee754_rem_pio2f+0x5a>
 80073b2:	edd4 7a00 	vldr	s15, [r4]
 80073b6:	eef1 7a67 	vneg.f32	s15, s15
 80073ba:	edc4 7a00 	vstr	s15, [r4]
 80073be:	edd4 7a01 	vldr	s15, [r4, #4]
 80073c2:	eef1 7a67 	vneg.f32	s15, s15
 80073c6:	edc4 7a01 	vstr	s15, [r4, #4]
 80073ca:	e779      	b.n	80072c0 <__ieee754_rem_pio2f+0x130>
 80073cc:	2303      	movs	r3, #3
 80073ce:	e7e5      	b.n	800739c <__ieee754_rem_pio2f+0x20c>
 80073d0:	3f490fd8 	.word	0x3f490fd8
 80073d4:	4016cbe3 	.word	0x4016cbe3
 80073d8:	3fc90f80 	.word	0x3fc90f80
 80073dc:	3fc90fd0 	.word	0x3fc90fd0
 80073e0:	37354443 	.word	0x37354443
 80073e4:	37354400 	.word	0x37354400
 80073e8:	2e85a308 	.word	0x2e85a308
 80073ec:	43490f80 	.word	0x43490f80
 80073f0:	3f22f984 	.word	0x3f22f984
 80073f4:	08007de4 	.word	0x08007de4
 80073f8:	2e85a300 	.word	0x2e85a300
 80073fc:	248d3132 	.word	0x248d3132
 8007400:	43800000 	.word	0x43800000
 8007404:	08007e64 	.word	0x08007e64

08007408 <__ieee754_sqrtf>:
 8007408:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800740c:	4770      	bx	lr
	...

08007410 <__kernel_cosf>:
 8007410:	ee10 3a10 	vmov	r3, s0
 8007414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007418:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800741c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007420:	da05      	bge.n	800742e <__kernel_cosf+0x1e>
 8007422:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007426:	ee17 2a90 	vmov	r2, s15
 800742a:	2a00      	cmp	r2, #0
 800742c:	d03d      	beq.n	80074aa <__kernel_cosf+0x9a>
 800742e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007432:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80074b0 <__kernel_cosf+0xa0>
 8007436:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80074b4 <__kernel_cosf+0xa4>
 800743a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80074b8 <__kernel_cosf+0xa8>
 800743e:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <__kernel_cosf+0xac>)
 8007440:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007444:	4293      	cmp	r3, r2
 8007446:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80074c0 <__kernel_cosf+0xb0>
 800744a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800744e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80074c4 <__kernel_cosf+0xb4>
 8007452:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007456:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80074c8 <__kernel_cosf+0xb8>
 800745a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800745e:	eeb0 7a66 	vmov.f32	s14, s13
 8007462:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007466:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800746a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800746e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007472:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007476:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800747a:	dc04      	bgt.n	8007486 <__kernel_cosf+0x76>
 800747c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007480:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007484:	4770      	bx	lr
 8007486:	4a11      	ldr	r2, [pc, #68]	; (80074cc <__kernel_cosf+0xbc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	bfda      	itte	le
 800748c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007490:	ee06 3a90 	vmovle	s13, r3
 8007494:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007498:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800749c:	ee36 0a66 	vsub.f32	s0, s12, s13
 80074a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80074a8:	4770      	bx	lr
 80074aa:	eeb0 0a46 	vmov.f32	s0, s12
 80074ae:	4770      	bx	lr
 80074b0:	ad47d74e 	.word	0xad47d74e
 80074b4:	310f74f6 	.word	0x310f74f6
 80074b8:	3d2aaaab 	.word	0x3d2aaaab
 80074bc:	3e999999 	.word	0x3e999999
 80074c0:	b493f27c 	.word	0xb493f27c
 80074c4:	37d00d01 	.word	0x37d00d01
 80074c8:	bab60b61 	.word	0xbab60b61
 80074cc:	3f480000 	.word	0x3f480000

080074d0 <__kernel_rem_pio2f>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ed2d 8b04 	vpush	{d8-d9}
 80074d8:	b0d9      	sub	sp, #356	; 0x164
 80074da:	4688      	mov	r8, r1
 80074dc:	9002      	str	r0, [sp, #8]
 80074de:	49bb      	ldr	r1, [pc, #748]	; (80077cc <__kernel_rem_pio2f+0x2fc>)
 80074e0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80074e8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80074ec:	1e59      	subs	r1, r3, #1
 80074ee:	1d13      	adds	r3, r2, #4
 80074f0:	db27      	blt.n	8007542 <__kernel_rem_pio2f+0x72>
 80074f2:	f1b2 0b03 	subs.w	fp, r2, #3
 80074f6:	bf48      	it	mi
 80074f8:	f102 0b04 	addmi.w	fp, r2, #4
 80074fc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007500:	1c45      	adds	r5, r0, #1
 8007502:	00ec      	lsls	r4, r5, #3
 8007504:	1a47      	subs	r7, r0, r1
 8007506:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80077dc <__kernel_rem_pio2f+0x30c>
 800750a:	9403      	str	r4, [sp, #12]
 800750c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007510:	eb0a 0c01 	add.w	ip, sl, r1
 8007514:	ae1c      	add	r6, sp, #112	; 0x70
 8007516:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800751a:	2400      	movs	r4, #0
 800751c:	4564      	cmp	r4, ip
 800751e:	dd12      	ble.n	8007546 <__kernel_rem_pio2f+0x76>
 8007520:	9b01      	ldr	r3, [sp, #4]
 8007522:	ac1c      	add	r4, sp, #112	; 0x70
 8007524:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007528:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800752c:	f04f 0c00 	mov.w	ip, #0
 8007530:	45d4      	cmp	ip, sl
 8007532:	dc27      	bgt.n	8007584 <__kernel_rem_pio2f+0xb4>
 8007534:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007538:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80077dc <__kernel_rem_pio2f+0x30c>
 800753c:	4627      	mov	r7, r4
 800753e:	2600      	movs	r6, #0
 8007540:	e016      	b.n	8007570 <__kernel_rem_pio2f+0xa0>
 8007542:	2000      	movs	r0, #0
 8007544:	e7dc      	b.n	8007500 <__kernel_rem_pio2f+0x30>
 8007546:	42e7      	cmn	r7, r4
 8007548:	bf5d      	ittte	pl
 800754a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800754e:	ee07 3a90 	vmovpl	s15, r3
 8007552:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007556:	eef0 7a47 	vmovmi.f32	s15, s14
 800755a:	ece6 7a01 	vstmia	r6!, {s15}
 800755e:	3401      	adds	r4, #1
 8007560:	e7dc      	b.n	800751c <__kernel_rem_pio2f+0x4c>
 8007562:	ecf9 6a01 	vldmia	r9!, {s13}
 8007566:	ed97 7a00 	vldr	s14, [r7]
 800756a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800756e:	3601      	adds	r6, #1
 8007570:	428e      	cmp	r6, r1
 8007572:	f1a7 0704 	sub.w	r7, r7, #4
 8007576:	ddf4      	ble.n	8007562 <__kernel_rem_pio2f+0x92>
 8007578:	eceb 7a01 	vstmia	fp!, {s15}
 800757c:	f10c 0c01 	add.w	ip, ip, #1
 8007580:	3404      	adds	r4, #4
 8007582:	e7d5      	b.n	8007530 <__kernel_rem_pio2f+0x60>
 8007584:	ab08      	add	r3, sp, #32
 8007586:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800758a:	eddf 8a93 	vldr	s17, [pc, #588]	; 80077d8 <__kernel_rem_pio2f+0x308>
 800758e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80077d4 <__kernel_rem_pio2f+0x304>
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007598:	4656      	mov	r6, sl
 800759a:	00b3      	lsls	r3, r6, #2
 800759c:	9305      	str	r3, [sp, #20]
 800759e:	ab58      	add	r3, sp, #352	; 0x160
 80075a0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80075a4:	ac08      	add	r4, sp, #32
 80075a6:	ab44      	add	r3, sp, #272	; 0x110
 80075a8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80075ac:	46a4      	mov	ip, r4
 80075ae:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80075b2:	4637      	mov	r7, r6
 80075b4:	2f00      	cmp	r7, #0
 80075b6:	f1a0 0004 	sub.w	r0, r0, #4
 80075ba:	dc4f      	bgt.n	800765c <__kernel_rem_pio2f+0x18c>
 80075bc:	4628      	mov	r0, r5
 80075be:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80075c2:	f000 fb61 	bl	8007c88 <scalbnf>
 80075c6:	eeb0 8a40 	vmov.f32	s16, s0
 80075ca:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80075ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 80075d2:	f000 fb17 	bl	8007c04 <floorf>
 80075d6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80075da:	eea0 8a67 	vfms.f32	s16, s0, s15
 80075de:	2d00      	cmp	r5, #0
 80075e0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80075e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80075e8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80075ec:	ee17 9a90 	vmov	r9, s15
 80075f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80075f4:	dd44      	ble.n	8007680 <__kernel_rem_pio2f+0x1b0>
 80075f6:	f106 3cff 	add.w	ip, r6, #4294967295
 80075fa:	ab08      	add	r3, sp, #32
 80075fc:	f1c5 0e08 	rsb	lr, r5, #8
 8007600:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8007604:	fa47 f00e 	asr.w	r0, r7, lr
 8007608:	4481      	add	r9, r0
 800760a:	fa00 f00e 	lsl.w	r0, r0, lr
 800760e:	1a3f      	subs	r7, r7, r0
 8007610:	f1c5 0007 	rsb	r0, r5, #7
 8007614:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007618:	4107      	asrs	r7, r0
 800761a:	2f00      	cmp	r7, #0
 800761c:	dd3f      	ble.n	800769e <__kernel_rem_pio2f+0x1ce>
 800761e:	f04f 0e00 	mov.w	lr, #0
 8007622:	f109 0901 	add.w	r9, r9, #1
 8007626:	4673      	mov	r3, lr
 8007628:	4576      	cmp	r6, lr
 800762a:	dc6b      	bgt.n	8007704 <__kernel_rem_pio2f+0x234>
 800762c:	2d00      	cmp	r5, #0
 800762e:	dd04      	ble.n	800763a <__kernel_rem_pio2f+0x16a>
 8007630:	2d01      	cmp	r5, #1
 8007632:	d078      	beq.n	8007726 <__kernel_rem_pio2f+0x256>
 8007634:	2d02      	cmp	r5, #2
 8007636:	f000 8081 	beq.w	800773c <__kernel_rem_pio2f+0x26c>
 800763a:	2f02      	cmp	r7, #2
 800763c:	d12f      	bne.n	800769e <__kernel_rem_pio2f+0x1ce>
 800763e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007642:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007646:	b353      	cbz	r3, 800769e <__kernel_rem_pio2f+0x1ce>
 8007648:	4628      	mov	r0, r5
 800764a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800764e:	f000 fb1b 	bl	8007c88 <scalbnf>
 8007652:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007656:	ee38 8a40 	vsub.f32	s16, s16, s0
 800765a:	e020      	b.n	800769e <__kernel_rem_pio2f+0x1ce>
 800765c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007660:	3f01      	subs	r7, #1
 8007662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800766e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007672:	ecac 0a01 	vstmia	ip!, {s0}
 8007676:	ed90 0a00 	vldr	s0, [r0]
 800767a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800767e:	e799      	b.n	80075b4 <__kernel_rem_pio2f+0xe4>
 8007680:	d105      	bne.n	800768e <__kernel_rem_pio2f+0x1be>
 8007682:	1e70      	subs	r0, r6, #1
 8007684:	ab08      	add	r3, sp, #32
 8007686:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800768a:	11ff      	asrs	r7, r7, #7
 800768c:	e7c5      	b.n	800761a <__kernel_rem_pio2f+0x14a>
 800768e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007692:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769a:	da31      	bge.n	8007700 <__kernel_rem_pio2f+0x230>
 800769c:	2700      	movs	r7, #0
 800769e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80076a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a6:	f040 809b 	bne.w	80077e0 <__kernel_rem_pio2f+0x310>
 80076aa:	1e74      	subs	r4, r6, #1
 80076ac:	46a4      	mov	ip, r4
 80076ae:	2000      	movs	r0, #0
 80076b0:	45d4      	cmp	ip, sl
 80076b2:	da4a      	bge.n	800774a <__kernel_rem_pio2f+0x27a>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d07a      	beq.n	80077ae <__kernel_rem_pio2f+0x2de>
 80076b8:	ab08      	add	r3, sp, #32
 80076ba:	3d08      	subs	r5, #8
 80076bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8081 	beq.w	80077c8 <__kernel_rem_pio2f+0x2f8>
 80076c6:	4628      	mov	r0, r5
 80076c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80076cc:	00a5      	lsls	r5, r4, #2
 80076ce:	f000 fadb 	bl	8007c88 <scalbnf>
 80076d2:	aa44      	add	r2, sp, #272	; 0x110
 80076d4:	1d2b      	adds	r3, r5, #4
 80076d6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80077d8 <__kernel_rem_pio2f+0x308>
 80076da:	18d1      	adds	r1, r2, r3
 80076dc:	4622      	mov	r2, r4
 80076de:	2a00      	cmp	r2, #0
 80076e0:	f280 80ae 	bge.w	8007840 <__kernel_rem_pio2f+0x370>
 80076e4:	4622      	mov	r2, r4
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	f2c0 80cc 	blt.w	8007884 <__kernel_rem_pio2f+0x3b4>
 80076ec:	a944      	add	r1, sp, #272	; 0x110
 80076ee:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80076f2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80077d0 <__kernel_rem_pio2f+0x300>
 80076f6:	eddf 7a39 	vldr	s15, [pc, #228]	; 80077dc <__kernel_rem_pio2f+0x30c>
 80076fa:	2000      	movs	r0, #0
 80076fc:	1aa1      	subs	r1, r4, r2
 80076fe:	e0b6      	b.n	800786e <__kernel_rem_pio2f+0x39e>
 8007700:	2702      	movs	r7, #2
 8007702:	e78c      	b.n	800761e <__kernel_rem_pio2f+0x14e>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	b94b      	cbnz	r3, 800771c <__kernel_rem_pio2f+0x24c>
 8007708:	b118      	cbz	r0, 8007712 <__kernel_rem_pio2f+0x242>
 800770a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800770e:	6020      	str	r0, [r4, #0]
 8007710:	2001      	movs	r0, #1
 8007712:	f10e 0e01 	add.w	lr, lr, #1
 8007716:	3404      	adds	r4, #4
 8007718:	4603      	mov	r3, r0
 800771a:	e785      	b.n	8007628 <__kernel_rem_pio2f+0x158>
 800771c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007720:	6020      	str	r0, [r4, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	e7f5      	b.n	8007712 <__kernel_rem_pio2f+0x242>
 8007726:	1e74      	subs	r4, r6, #1
 8007728:	a808      	add	r0, sp, #32
 800772a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800772e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007732:	f10d 0c20 	add.w	ip, sp, #32
 8007736:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800773a:	e77e      	b.n	800763a <__kernel_rem_pio2f+0x16a>
 800773c:	1e74      	subs	r4, r6, #1
 800773e:	a808      	add	r0, sp, #32
 8007740:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007748:	e7f3      	b.n	8007732 <__kernel_rem_pio2f+0x262>
 800774a:	ab08      	add	r3, sp, #32
 800774c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007750:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007754:	4318      	orrs	r0, r3
 8007756:	e7ab      	b.n	80076b0 <__kernel_rem_pio2f+0x1e0>
 8007758:	f10c 0c01 	add.w	ip, ip, #1
 800775c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8007760:	2c00      	cmp	r4, #0
 8007762:	d0f9      	beq.n	8007758 <__kernel_rem_pio2f+0x288>
 8007764:	9b05      	ldr	r3, [sp, #20]
 8007766:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800776a:	eb0d 0003 	add.w	r0, sp, r3
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	18f4      	adds	r4, r6, r3
 8007772:	ab1c      	add	r3, sp, #112	; 0x70
 8007774:	1c77      	adds	r7, r6, #1
 8007776:	384c      	subs	r0, #76	; 0x4c
 8007778:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800777c:	4466      	add	r6, ip
 800777e:	42be      	cmp	r6, r7
 8007780:	f6ff af0b 	blt.w	800759a <__kernel_rem_pio2f+0xca>
 8007784:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8007788:	f8dd e008 	ldr.w	lr, [sp, #8]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007794:	f04f 0c00 	mov.w	ip, #0
 8007798:	ece4 7a01 	vstmia	r4!, {s15}
 800779c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80077dc <__kernel_rem_pio2f+0x30c>
 80077a0:	46a1      	mov	r9, r4
 80077a2:	458c      	cmp	ip, r1
 80077a4:	dd07      	ble.n	80077b6 <__kernel_rem_pio2f+0x2e6>
 80077a6:	ece0 7a01 	vstmia	r0!, {s15}
 80077aa:	3701      	adds	r7, #1
 80077ac:	e7e7      	b.n	800777e <__kernel_rem_pio2f+0x2ae>
 80077ae:	9804      	ldr	r0, [sp, #16]
 80077b0:	f04f 0c01 	mov.w	ip, #1
 80077b4:	e7d2      	b.n	800775c <__kernel_rem_pio2f+0x28c>
 80077b6:	ecfe 6a01 	vldmia	lr!, {s13}
 80077ba:	ed39 7a01 	vldmdb	r9!, {s14}
 80077be:	f10c 0c01 	add.w	ip, ip, #1
 80077c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80077c6:	e7ec      	b.n	80077a2 <__kernel_rem_pio2f+0x2d2>
 80077c8:	3c01      	subs	r4, #1
 80077ca:	e775      	b.n	80076b8 <__kernel_rem_pio2f+0x1e8>
 80077cc:	080081a8 	.word	0x080081a8
 80077d0:	0800817c 	.word	0x0800817c
 80077d4:	43800000 	.word	0x43800000
 80077d8:	3b800000 	.word	0x3b800000
 80077dc:	00000000 	.word	0x00000000
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	eeb0 0a48 	vmov.f32	s0, s16
 80077e6:	1a98      	subs	r0, r3, r2
 80077e8:	f000 fa4e 	bl	8007c88 <scalbnf>
 80077ec:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80077d4 <__kernel_rem_pio2f+0x304>
 80077f0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80077f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f8:	db19      	blt.n	800782e <__kernel_rem_pio2f+0x35e>
 80077fa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80077d8 <__kernel_rem_pio2f+0x308>
 80077fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007802:	aa08      	add	r2, sp, #32
 8007804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007808:	1c74      	adds	r4, r6, #1
 800780a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800780e:	3508      	adds	r5, #8
 8007810:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007818:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800781c:	ee10 3a10 	vmov	r3, s0
 8007820:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007824:	ee17 3a90 	vmov	r3, s15
 8007828:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800782c:	e74b      	b.n	80076c6 <__kernel_rem_pio2f+0x1f6>
 800782e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007832:	aa08      	add	r2, sp, #32
 8007834:	ee10 3a10 	vmov	r3, s0
 8007838:	4634      	mov	r4, r6
 800783a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800783e:	e742      	b.n	80076c6 <__kernel_rem_pio2f+0x1f6>
 8007840:	a808      	add	r0, sp, #32
 8007842:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007846:	9001      	str	r0, [sp, #4]
 8007848:	ee07 0a90 	vmov	s15, r0
 800784c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007850:	3a01      	subs	r2, #1
 8007852:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007856:	ee20 0a07 	vmul.f32	s0, s0, s14
 800785a:	ed61 7a01 	vstmdb	r1!, {s15}
 800785e:	e73e      	b.n	80076de <__kernel_rem_pio2f+0x20e>
 8007860:	ecfc 6a01 	vldmia	ip!, {s13}
 8007864:	ecb6 7a01 	vldmia	r6!, {s14}
 8007868:	eee6 7a87 	vfma.f32	s15, s13, s14
 800786c:	3001      	adds	r0, #1
 800786e:	4550      	cmp	r0, sl
 8007870:	dc01      	bgt.n	8007876 <__kernel_rem_pio2f+0x3a6>
 8007872:	4288      	cmp	r0, r1
 8007874:	ddf4      	ble.n	8007860 <__kernel_rem_pio2f+0x390>
 8007876:	a858      	add	r0, sp, #352	; 0x160
 8007878:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800787c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007880:	3a01      	subs	r2, #1
 8007882:	e730      	b.n	80076e6 <__kernel_rem_pio2f+0x216>
 8007884:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8007886:	2a02      	cmp	r2, #2
 8007888:	dc09      	bgt.n	800789e <__kernel_rem_pio2f+0x3ce>
 800788a:	2a00      	cmp	r2, #0
 800788c:	dc2a      	bgt.n	80078e4 <__kernel_rem_pio2f+0x414>
 800788e:	d043      	beq.n	8007918 <__kernel_rem_pio2f+0x448>
 8007890:	f009 0007 	and.w	r0, r9, #7
 8007894:	b059      	add	sp, #356	; 0x164
 8007896:	ecbd 8b04 	vpop	{d8-d9}
 800789a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d1f5      	bne.n	8007890 <__kernel_rem_pio2f+0x3c0>
 80078a4:	ab30      	add	r3, sp, #192	; 0xc0
 80078a6:	442b      	add	r3, r5
 80078a8:	461a      	mov	r2, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	4620      	mov	r0, r4
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f1a1 0104 	sub.w	r1, r1, #4
 80078b4:	dc51      	bgt.n	800795a <__kernel_rem_pio2f+0x48a>
 80078b6:	4621      	mov	r1, r4
 80078b8:	2901      	cmp	r1, #1
 80078ba:	f1a2 0204 	sub.w	r2, r2, #4
 80078be:	dc5c      	bgt.n	800797a <__kernel_rem_pio2f+0x4aa>
 80078c0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80077dc <__kernel_rem_pio2f+0x30c>
 80078c4:	3304      	adds	r3, #4
 80078c6:	2c01      	cmp	r4, #1
 80078c8:	dc67      	bgt.n	800799a <__kernel_rem_pio2f+0x4ca>
 80078ca:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80078ce:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	d167      	bne.n	80079a6 <__kernel_rem_pio2f+0x4d6>
 80078d6:	edc8 6a00 	vstr	s13, [r8]
 80078da:	ed88 7a01 	vstr	s14, [r8, #4]
 80078de:	edc8 7a02 	vstr	s15, [r8, #8]
 80078e2:	e7d5      	b.n	8007890 <__kernel_rem_pio2f+0x3c0>
 80078e4:	aa30      	add	r2, sp, #192	; 0xc0
 80078e6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80077dc <__kernel_rem_pio2f+0x30c>
 80078ea:	4413      	add	r3, r2
 80078ec:	4622      	mov	r2, r4
 80078ee:	2a00      	cmp	r2, #0
 80078f0:	da24      	bge.n	800793c <__kernel_rem_pio2f+0x46c>
 80078f2:	b34f      	cbz	r7, 8007948 <__kernel_rem_pio2f+0x478>
 80078f4:	eef1 7a47 	vneg.f32	s15, s14
 80078f8:	edc8 7a00 	vstr	s15, [r8]
 80078fc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007900:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007904:	aa31      	add	r2, sp, #196	; 0xc4
 8007906:	2301      	movs	r3, #1
 8007908:	429c      	cmp	r4, r3
 800790a:	da20      	bge.n	800794e <__kernel_rem_pio2f+0x47e>
 800790c:	b10f      	cbz	r7, 8007912 <__kernel_rem_pio2f+0x442>
 800790e:	eef1 7a67 	vneg.f32	s15, s15
 8007912:	edc8 7a01 	vstr	s15, [r8, #4]
 8007916:	e7bb      	b.n	8007890 <__kernel_rem_pio2f+0x3c0>
 8007918:	aa30      	add	r2, sp, #192	; 0xc0
 800791a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80077dc <__kernel_rem_pio2f+0x30c>
 800791e:	4413      	add	r3, r2
 8007920:	2c00      	cmp	r4, #0
 8007922:	da05      	bge.n	8007930 <__kernel_rem_pio2f+0x460>
 8007924:	b10f      	cbz	r7, 800792a <__kernel_rem_pio2f+0x45a>
 8007926:	eef1 7a67 	vneg.f32	s15, s15
 800792a:	edc8 7a00 	vstr	s15, [r8]
 800792e:	e7af      	b.n	8007890 <__kernel_rem_pio2f+0x3c0>
 8007930:	ed33 7a01 	vldmdb	r3!, {s14}
 8007934:	3c01      	subs	r4, #1
 8007936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800793a:	e7f1      	b.n	8007920 <__kernel_rem_pio2f+0x450>
 800793c:	ed73 7a01 	vldmdb	r3!, {s15}
 8007940:	3a01      	subs	r2, #1
 8007942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007946:	e7d2      	b.n	80078ee <__kernel_rem_pio2f+0x41e>
 8007948:	eef0 7a47 	vmov.f32	s15, s14
 800794c:	e7d4      	b.n	80078f8 <__kernel_rem_pio2f+0x428>
 800794e:	ecb2 7a01 	vldmia	r2!, {s14}
 8007952:	3301      	adds	r3, #1
 8007954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007958:	e7d6      	b.n	8007908 <__kernel_rem_pio2f+0x438>
 800795a:	edd1 7a00 	vldr	s15, [r1]
 800795e:	edd1 6a01 	vldr	s13, [r1, #4]
 8007962:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007966:	3801      	subs	r0, #1
 8007968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800796c:	ed81 7a00 	vstr	s14, [r1]
 8007970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007974:	edc1 7a01 	vstr	s15, [r1, #4]
 8007978:	e799      	b.n	80078ae <__kernel_rem_pio2f+0x3de>
 800797a:	edd2 7a00 	vldr	s15, [r2]
 800797e:	edd2 6a01 	vldr	s13, [r2, #4]
 8007982:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007986:	3901      	subs	r1, #1
 8007988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800798c:	ed82 7a00 	vstr	s14, [r2]
 8007990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007994:	edc2 7a01 	vstr	s15, [r2, #4]
 8007998:	e78e      	b.n	80078b8 <__kernel_rem_pio2f+0x3e8>
 800799a:	ed33 7a01 	vldmdb	r3!, {s14}
 800799e:	3c01      	subs	r4, #1
 80079a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079a4:	e78f      	b.n	80078c6 <__kernel_rem_pio2f+0x3f6>
 80079a6:	eef1 6a66 	vneg.f32	s13, s13
 80079aa:	eeb1 7a47 	vneg.f32	s14, s14
 80079ae:	edc8 6a00 	vstr	s13, [r8]
 80079b2:	ed88 7a01 	vstr	s14, [r8, #4]
 80079b6:	eef1 7a67 	vneg.f32	s15, s15
 80079ba:	e790      	b.n	80078de <__kernel_rem_pio2f+0x40e>

080079bc <__kernel_sinf>:
 80079bc:	ee10 3a10 	vmov	r3, s0
 80079c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80079c8:	da04      	bge.n	80079d4 <__kernel_sinf+0x18>
 80079ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80079ce:	ee17 3a90 	vmov	r3, s15
 80079d2:	b35b      	cbz	r3, 8007a2c <__kernel_sinf+0x70>
 80079d4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80079d8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007a30 <__kernel_sinf+0x74>
 80079dc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007a34 <__kernel_sinf+0x78>
 80079e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80079e4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007a38 <__kernel_sinf+0x7c>
 80079e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80079ec:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007a3c <__kernel_sinf+0x80>
 80079f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80079f4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007a40 <__kernel_sinf+0x84>
 80079f8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80079fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a00:	b930      	cbnz	r0, 8007a10 <__kernel_sinf+0x54>
 8007a02:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007a44 <__kernel_sinf+0x88>
 8007a06:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007a0e:	4770      	bx	lr
 8007a10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007a14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007a18:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007a1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007a20:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007a48 <__kernel_sinf+0x8c>
 8007a24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007a28:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	2f2ec9d3 	.word	0x2f2ec9d3
 8007a34:	b2d72f34 	.word	0xb2d72f34
 8007a38:	3638ef1b 	.word	0x3638ef1b
 8007a3c:	b9500d01 	.word	0xb9500d01
 8007a40:	3c088889 	.word	0x3c088889
 8007a44:	be2aaaab 	.word	0xbe2aaaab
 8007a48:	3e2aaaab 	.word	0x3e2aaaab

08007a4c <atanf>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	ee10 5a10 	vmov	r5, s0
 8007a52:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007a56:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007a5a:	eef0 7a40 	vmov.f32	s15, s0
 8007a5e:	db10      	blt.n	8007a82 <atanf+0x36>
 8007a60:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007a64:	dd04      	ble.n	8007a70 <atanf+0x24>
 8007a66:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007ba8 <atanf+0x15c>
 8007a74:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007bac <atanf+0x160>
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	bfd8      	it	le
 8007a7c:	eef0 7a40 	vmovle.f32	s15, s0
 8007a80:	e7f3      	b.n	8007a6a <atanf+0x1e>
 8007a82:	4b4b      	ldr	r3, [pc, #300]	; (8007bb0 <atanf+0x164>)
 8007a84:	429c      	cmp	r4, r3
 8007a86:	dc10      	bgt.n	8007aaa <atanf+0x5e>
 8007a88:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007a8c:	da0a      	bge.n	8007aa4 <atanf+0x58>
 8007a8e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007bb4 <atanf+0x168>
 8007a92:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa2:	dce2      	bgt.n	8007a6a <atanf+0x1e>
 8007aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa8:	e013      	b.n	8007ad2 <atanf+0x86>
 8007aaa:	f000 f8a3 	bl	8007bf4 <fabsf>
 8007aae:	4b42      	ldr	r3, [pc, #264]	; (8007bb8 <atanf+0x16c>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	dc4f      	bgt.n	8007b54 <atanf+0x108>
 8007ab4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	dc41      	bgt.n	8007b40 <atanf+0xf4>
 8007abc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007ac0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007ac4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007ac8:	2300      	movs	r3, #0
 8007aca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ace:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007ad8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007bbc <atanf+0x170>
 8007adc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007bc0 <atanf+0x174>
 8007ae0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007bc4 <atanf+0x178>
 8007ae4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007ae8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007aec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007bc8 <atanf+0x17c>
 8007af0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007af4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007bcc <atanf+0x180>
 8007af8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007afc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007bd0 <atanf+0x184>
 8007b00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007b04:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007bd4 <atanf+0x188>
 8007b08:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b0c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007bd8 <atanf+0x18c>
 8007b10:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007b14:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007bdc <atanf+0x190>
 8007b18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007b1c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007be0 <atanf+0x194>
 8007b20:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007b24:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007be4 <atanf+0x198>
 8007b28:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007b2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b30:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007b34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b38:	d121      	bne.n	8007b7e <atanf+0x132>
 8007b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b3e:	e794      	b.n	8007a6a <atanf+0x1e>
 8007b40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b44:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007b48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b52:	e7be      	b.n	8007ad2 <atanf+0x86>
 8007b54:	4b24      	ldr	r3, [pc, #144]	; (8007be8 <atanf+0x19c>)
 8007b56:	429c      	cmp	r4, r3
 8007b58:	dc0b      	bgt.n	8007b72 <atanf+0x126>
 8007b5a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b62:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007b66:	2302      	movs	r3, #2
 8007b68:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b70:	e7af      	b.n	8007ad2 <atanf+0x86>
 8007b72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007b76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e7a9      	b.n	8007ad2 <atanf+0x86>
 8007b7e:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <atanf+0x1a0>)
 8007b80:	491b      	ldr	r1, [pc, #108]	; (8007bf0 <atanf+0x1a4>)
 8007b82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007b86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007b8a:	ed93 0a00 	vldr	s0, [r3]
 8007b8e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007b92:	ed92 0a00 	vldr	s0, [r2]
 8007b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007ba0:	bfb8      	it	lt
 8007ba2:	eef1 7a67 	vneglt.f32	s15, s15
 8007ba6:	e760      	b.n	8007a6a <atanf+0x1e>
 8007ba8:	3fc90fdb 	.word	0x3fc90fdb
 8007bac:	bfc90fdb 	.word	0xbfc90fdb
 8007bb0:	3edfffff 	.word	0x3edfffff
 8007bb4:	7149f2ca 	.word	0x7149f2ca
 8007bb8:	3f97ffff 	.word	0x3f97ffff
 8007bbc:	3c8569d7 	.word	0x3c8569d7
 8007bc0:	3d4bda59 	.word	0x3d4bda59
 8007bc4:	bd6ef16b 	.word	0xbd6ef16b
 8007bc8:	3d886b35 	.word	0x3d886b35
 8007bcc:	3dba2e6e 	.word	0x3dba2e6e
 8007bd0:	3e124925 	.word	0x3e124925
 8007bd4:	3eaaaaab 	.word	0x3eaaaaab
 8007bd8:	bd15a221 	.word	0xbd15a221
 8007bdc:	bd9d8795 	.word	0xbd9d8795
 8007be0:	bde38e38 	.word	0xbde38e38
 8007be4:	be4ccccd 	.word	0xbe4ccccd
 8007be8:	401bffff 	.word	0x401bffff
 8007bec:	080081b4 	.word	0x080081b4
 8007bf0:	080081c4 	.word	0x080081c4

08007bf4 <fabsf>:
 8007bf4:	ee10 3a10 	vmov	r3, s0
 8007bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bfc:	ee00 3a10 	vmov	s0, r3
 8007c00:	4770      	bx	lr
	...

08007c04 <floorf>:
 8007c04:	ee10 3a10 	vmov	r3, s0
 8007c08:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c0c:	3a7f      	subs	r2, #127	; 0x7f
 8007c0e:	2a16      	cmp	r2, #22
 8007c10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c14:	dc2a      	bgt.n	8007c6c <floorf+0x68>
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	da11      	bge.n	8007c3e <floorf+0x3a>
 8007c1a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007c7c <floorf+0x78>
 8007c1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2a:	dd05      	ble.n	8007c38 <floorf+0x34>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da23      	bge.n	8007c78 <floorf+0x74>
 8007c30:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <floorf+0x7c>)
 8007c32:	2900      	cmp	r1, #0
 8007c34:	bf18      	it	ne
 8007c36:	4613      	movne	r3, r2
 8007c38:	ee00 3a10 	vmov	s0, r3
 8007c3c:	4770      	bx	lr
 8007c3e:	4911      	ldr	r1, [pc, #68]	; (8007c84 <floorf+0x80>)
 8007c40:	4111      	asrs	r1, r2
 8007c42:	420b      	tst	r3, r1
 8007c44:	d0fa      	beq.n	8007c3c <floorf+0x38>
 8007c46:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007c7c <floorf+0x78>
 8007c4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c56:	ddef      	ble.n	8007c38 <floorf+0x34>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bfbe      	ittt	lt
 8007c5c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007c60:	fa40 f202 	asrlt.w	r2, r0, r2
 8007c64:	189b      	addlt	r3, r3, r2
 8007c66:	ea23 0301 	bic.w	r3, r3, r1
 8007c6a:	e7e5      	b.n	8007c38 <floorf+0x34>
 8007c6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c70:	d3e4      	bcc.n	8007c3c <floorf+0x38>
 8007c72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c76:	4770      	bx	lr
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e7dd      	b.n	8007c38 <floorf+0x34>
 8007c7c:	7149f2ca 	.word	0x7149f2ca
 8007c80:	bf800000 	.word	0xbf800000
 8007c84:	007fffff 	.word	0x007fffff

08007c88 <scalbnf>:
 8007c88:	ee10 3a10 	vmov	r3, s0
 8007c8c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007c90:	d025      	beq.n	8007cde <scalbnf+0x56>
 8007c92:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c96:	d302      	bcc.n	8007c9e <scalbnf+0x16>
 8007c98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c9c:	4770      	bx	lr
 8007c9e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007ca2:	d122      	bne.n	8007cea <scalbnf+0x62>
 8007ca4:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <scalbnf+0xc8>)
 8007ca6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007d54 <scalbnf+0xcc>
 8007caa:	4298      	cmp	r0, r3
 8007cac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007cb0:	db16      	blt.n	8007ce0 <scalbnf+0x58>
 8007cb2:	ee10 3a10 	vmov	r3, s0
 8007cb6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007cba:	3a19      	subs	r2, #25
 8007cbc:	4402      	add	r2, r0
 8007cbe:	2afe      	cmp	r2, #254	; 0xfe
 8007cc0:	dd15      	ble.n	8007cee <scalbnf+0x66>
 8007cc2:	ee10 3a10 	vmov	r3, s0
 8007cc6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007d58 <scalbnf+0xd0>
 8007cca:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007d5c <scalbnf+0xd4>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	eeb0 7a67 	vmov.f32	s14, s15
 8007cd4:	bfb8      	it	lt
 8007cd6:	eef0 7a66 	vmovlt.f32	s15, s13
 8007cda:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007cde:	4770      	bx	lr
 8007ce0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007d60 <scalbnf+0xd8>
 8007ce4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007ce8:	4770      	bx	lr
 8007cea:	0dd2      	lsrs	r2, r2, #23
 8007cec:	e7e6      	b.n	8007cbc <scalbnf+0x34>
 8007cee:	2a00      	cmp	r2, #0
 8007cf0:	dd06      	ble.n	8007d00 <scalbnf+0x78>
 8007cf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cf6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007cfa:	ee00 3a10 	vmov	s0, r3
 8007cfe:	4770      	bx	lr
 8007d00:	f112 0f16 	cmn.w	r2, #22
 8007d04:	da1a      	bge.n	8007d3c <scalbnf+0xb4>
 8007d06:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d0a:	4298      	cmp	r0, r3
 8007d0c:	ee10 3a10 	vmov	r3, s0
 8007d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d14:	dd0a      	ble.n	8007d2c <scalbnf+0xa4>
 8007d16:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007d58 <scalbnf+0xd0>
 8007d1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007d5c <scalbnf+0xd4>
 8007d1e:	eef0 7a40 	vmov.f32	s15, s0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bf18      	it	ne
 8007d26:	eeb0 0a47 	vmovne.f32	s0, s14
 8007d2a:	e7db      	b.n	8007ce4 <scalbnf+0x5c>
 8007d2c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007d60 <scalbnf+0xd8>
 8007d30:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007d64 <scalbnf+0xdc>
 8007d34:	eef0 7a40 	vmov.f32	s15, s0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	e7f3      	b.n	8007d24 <scalbnf+0x9c>
 8007d3c:	3219      	adds	r2, #25
 8007d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d42:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007d46:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007d68 <scalbnf+0xe0>
 8007d4a:	ee07 3a10 	vmov	s14, r3
 8007d4e:	e7c4      	b.n	8007cda <scalbnf+0x52>
 8007d50:	ffff3cb0 	.word	0xffff3cb0
 8007d54:	4c000000 	.word	0x4c000000
 8007d58:	7149f2ca 	.word	0x7149f2ca
 8007d5c:	f149f2ca 	.word	0xf149f2ca
 8007d60:	0da24260 	.word	0x0da24260
 8007d64:	8da24260 	.word	0x8da24260
 8007d68:	33000000 	.word	0x33000000

08007d6c <_init>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr

08007d78 <_fini>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr
