
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af6c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800b144  0800b144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b594  0800b594  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b59c  0800b59c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000070  0800b614  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800b614  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b45c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bb  00000000  00000000  0003b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  0003fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b4c  00000000  00000000  00041428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7b2  00000000  00000000  0006af74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155c6  00000000  00000000  00086726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bcec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006600  00000000  00000000  0019bd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b12c 	.word	0x0800b12c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800b12c 	.word	0x0800b12c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b974 	b.w	8000b84 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468e      	mov	lr, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d14d      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c2:	428a      	cmp	r2, r1
 80008c4:	4694      	mov	ip, r2
 80008c6:	d969      	bls.n	800099c <__udivmoddi4+0xe8>
 80008c8:	fab2 f282 	clz	r2, r2
 80008cc:	b152      	cbz	r2, 80008e4 <__udivmoddi4+0x30>
 80008ce:	fa01 f302 	lsl.w	r3, r1, r2
 80008d2:	f1c2 0120 	rsb	r1, r2, #32
 80008d6:	fa20 f101 	lsr.w	r1, r0, r1
 80008da:	fa0c fc02 	lsl.w	ip, ip, r2
 80008de:	ea41 0e03 	orr.w	lr, r1, r3
 80008e2:	4094      	lsls	r4, r2
 80008e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e8:	0c21      	lsrs	r1, r4, #16
 80008ea:	fbbe f6f8 	udiv	r6, lr, r8
 80008ee:	fa1f f78c 	uxth.w	r7, ip
 80008f2:	fb08 e316 	mls	r3, r8, r6, lr
 80008f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008fa:	fb06 f107 	mul.w	r1, r6, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 30ff 	add.w	r0, r6, #4294967295
 800090a:	f080 811f 	bcs.w	8000b4c <__udivmoddi4+0x298>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 811c 	bls.w	8000b4c <__udivmoddi4+0x298>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a5b      	subs	r3, r3, r1
 800091a:	b2a4      	uxth	r4, r4
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3310 	mls	r3, r8, r0, r3
 8000924:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000928:	fb00 f707 	mul.w	r7, r0, r7
 800092c:	42a7      	cmp	r7, r4
 800092e:	d90a      	bls.n	8000946 <__udivmoddi4+0x92>
 8000930:	eb1c 0404 	adds.w	r4, ip, r4
 8000934:	f100 33ff 	add.w	r3, r0, #4294967295
 8000938:	f080 810a 	bcs.w	8000b50 <__udivmoddi4+0x29c>
 800093c:	42a7      	cmp	r7, r4
 800093e:	f240 8107 	bls.w	8000b50 <__udivmoddi4+0x29c>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094a:	1be4      	subs	r4, r4, r7
 800094c:	2600      	movs	r6, #0
 800094e:	b11d      	cbz	r5, 8000958 <__udivmoddi4+0xa4>
 8000950:	40d4      	lsrs	r4, r2
 8000952:	2300      	movs	r3, #0
 8000954:	e9c5 4300 	strd	r4, r3, [r5]
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d909      	bls.n	8000976 <__udivmoddi4+0xc2>
 8000962:	2d00      	cmp	r5, #0
 8000964:	f000 80ef 	beq.w	8000b46 <__udivmoddi4+0x292>
 8000968:	2600      	movs	r6, #0
 800096a:	e9c5 0100 	strd	r0, r1, [r5]
 800096e:	4630      	mov	r0, r6
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	fab3 f683 	clz	r6, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d14a      	bne.n	8000a14 <__udivmoddi4+0x160>
 800097e:	428b      	cmp	r3, r1
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xd4>
 8000982:	4282      	cmp	r2, r0
 8000984:	f200 80f9 	bhi.w	8000b7a <__udivmoddi4+0x2c6>
 8000988:	1a84      	subs	r4, r0, r2
 800098a:	eb61 0303 	sbc.w	r3, r1, r3
 800098e:	2001      	movs	r0, #1
 8000990:	469e      	mov	lr, r3
 8000992:	2d00      	cmp	r5, #0
 8000994:	d0e0      	beq.n	8000958 <__udivmoddi4+0xa4>
 8000996:	e9c5 4e00 	strd	r4, lr, [r5]
 800099a:	e7dd      	b.n	8000958 <__udivmoddi4+0xa4>
 800099c:	b902      	cbnz	r2, 80009a0 <__udivmoddi4+0xec>
 800099e:	deff      	udf	#255	; 0xff
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	f040 8092 	bne.w	8000ace <__udivmoddi4+0x21a>
 80009aa:	eba1 010c 	sub.w	r1, r1, ip
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2601      	movs	r6, #1
 80009b8:	0c20      	lsrs	r0, r4, #16
 80009ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80009be:	fb07 1113 	mls	r1, r7, r3, r1
 80009c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c6:	fb0e f003 	mul.w	r0, lr, r3
 80009ca:	4288      	cmp	r0, r1
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x12c>
 80009ce:	eb1c 0101 	adds.w	r1, ip, r1
 80009d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x12a>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 80009de:	4643      	mov	r3, r8
 80009e0:	1a09      	subs	r1, r1, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x156>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x154>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2ca>
 8000a08:	4608      	mov	r0, r1
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a12:	e79c      	b.n	800094e <__udivmoddi4+0x9a>
 8000a14:	f1c6 0720 	rsb	r7, r6, #32
 8000a18:	40b3      	lsls	r3, r6
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa20 f407 	lsr.w	r4, r0, r7
 8000a26:	fa01 f306 	lsl.w	r3, r1, r6
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	40f9      	lsrs	r1, r7
 8000a2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a32:	fa00 f306 	lsl.w	r3, r0, r6
 8000a36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a3a:	0c20      	lsrs	r0, r4, #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fb09 1118 	mls	r1, r9, r8, r1
 8000a44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a48:	fb08 f00e 	mul.w	r0, r8, lr
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b8>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2bc>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2bc>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a74:	fb09 1110 	mls	r1, r9, r0, r1
 8000a78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a80:	458e      	cmp	lr, r1
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1e2>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2b4>
 8000a8e:	458e      	cmp	lr, r1
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2b4>
 8000a92:	3802      	subs	r0, #2
 8000a94:	4461      	add	r1, ip
 8000a96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9e:	eba1 010e 	sub.w	r1, r1, lr
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46a6      	mov	lr, r4
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x2a4>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x2a0>
 8000aac:	b15d      	cbz	r5, 8000ac6 <__udivmoddi4+0x212>
 8000aae:	ebb3 0208 	subs.w	r2, r3, r8
 8000ab2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aba:	fa22 f306 	lsr.w	r3, r2, r6
 8000abe:	40f1      	lsrs	r1, r6
 8000ac0:	431f      	orrs	r7, r3
 8000ac2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	40d8      	lsrs	r0, r3
 8000ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad8:	fa21 f303 	lsr.w	r3, r1, r3
 8000adc:	4091      	lsls	r1, r2
 8000ade:	4301      	orrs	r1, r0
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aec:	fb07 3610 	mls	r6, r7, r0, r3
 8000af0:	0c0b      	lsrs	r3, r1, #16
 8000af2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af6:	fb00 f60e 	mul.w	r6, r0, lr
 8000afa:	429e      	cmp	r6, r3
 8000afc:	fa04 f402 	lsl.w	r4, r4, r2
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x260>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b8>
 8000b0c:	429e      	cmp	r6, r3
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b8>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	1b9b      	subs	r3, r3, r6
 8000b16:	b289      	uxth	r1, r1
 8000b18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b24:	fb06 f30e 	mul.w	r3, r6, lr
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x28a>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b3a:	3e02      	subs	r6, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0x104>
 8000b46:	462e      	mov	r6, r5
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e705      	b.n	8000958 <__udivmoddi4+0xa4>
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	e6e3      	b.n	8000918 <__udivmoddi4+0x64>
 8000b50:	4618      	mov	r0, r3
 8000b52:	e6f8      	b.n	8000946 <__udivmoddi4+0x92>
 8000b54:	454b      	cmp	r3, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f8>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b60:	3801      	subs	r0, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f8>
 8000b64:	4646      	mov	r6, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x28a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1e2>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b8>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4461      	add	r1, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x12c>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e709      	b.n	8000992 <__udivmoddi4+0xde>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x156>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b92:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b96:	ed87 1a01 	vstr	s2, [r7, #4]
 8000b9a:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	ed93 7a00 	vldr	s14, [r3]
 8000ba2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ba6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000bb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bce:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	ee07 3a90 	vmov	s15, r3
}
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000be6:	b480      	push	{r7}
 8000be8:	b087      	sub	sp, #28
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bf0:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bf4:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	db0b      	blt.n	8000c1e <gfDivideAvoidZero+0x38>
 8000c06:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c16:	d502      	bpl.n	8000c1e <gfDivideAvoidZero+0x38>
		den = threshold;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	e017      	b.n	8000c4e <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 8000c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2a:	d510      	bpl.n	8000c4e <gfDivideAvoidZero+0x68>
 8000c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c30:	eef1 7a67 	vneg.f32	s15, s15
 8000c34:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c40:	dd05      	ble.n	8000c4e <gfDivideAvoidZero+0x68>
		den = -threshold;
 8000c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c46:	eef1 7a67 	vneg.f32	s15, s15
 8000c4a:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 8000c4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c52:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c5a:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	ee07 3a90 	vmov	s15, r3
}
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000c7e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000ce4 <gfWrapTheta+0x70>
 8000c82:	ed97 0a01 	vldr	s0, [r7, #4]
 8000c86:	f009 fb03 	bl	800a290 <fmodf>
 8000c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c92:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000ce8 <gfWrapTheta+0x74>
 8000c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	dd08      	ble.n	8000cb2 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000ca0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ca4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ce4 <gfWrapTheta+0x70>
 8000ca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cac:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cb0:	e010      	b.n	8000cd4 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000cec <gfWrapTheta+0x78>
 8000cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	d507      	bpl.n	8000cd4 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ce4 <gfWrapTheta+0x70>
 8000ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cd0:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	ee07 3a90 	vmov	s15, r3
}
 8000cda:	eeb0 0a67 	vmov.f32	s0, s15
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40c90fdb 	.word	0x40c90fdb
 8000ce8:	40490fdb 	.word	0x40490fdb
 8000cec:	c0490fdb 	.word	0xc0490fdb

08000cf0 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8000cfe:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000d02:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	dd01      	ble.n	8000d18 <gUpperLowerLimit+0x28>
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 8000d18:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d28:	d501      	bpl.n	8000d2e <gUpperLowerLimit+0x3e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]
	return input;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	ee07 3a90 	vmov	s15, r3
}
 8000d34:	eeb0 0a67 	vmov.f32	s0, s15
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <readButton1>:
#include "SignalReadWrite.h"


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <readButton1+0x20>)
 8000d50:	f005 fdbc 	bl	80068cc <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
	return B1;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	48000800 	.word	0x48000800

08000d68 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000d76:	687b      	ldr	r3, [r7, #4]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	085b      	lsrs	r3, r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db6:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc4:	eef1 7a67 	vneg.f32	s15, s15
 8000dc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	d50a      	bpl.n	8000dec <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de8:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000dec:	ed97 7a05 	vldr	s14, [r7, #20]
 8000df0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000e10 <readTimeInterval+0x8c>
 8000df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df8:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	ee07 3a90 	vmov	s15, r3
}
 8000e02:	eeb0 0a67 	vmov.f32	s0, s15
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	4d221fe8 	.word	0x4d221fe8

08000e14 <readVolume>:

float readVolume(void){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <readVolume+0x50>)
 8000e1c:	885b      	ldrh	r3, [r3, #2]
 8000e1e:	807b      	strh	r3, [r7, #2]

	//Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
	Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
 8000e20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e24:	f2a3 33b6 	subw	r3, r3, #950	; 0x3b6
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e30:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000e68 <readVolume+0x54>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	edc7 7a01 	vstr	s15, [r7, #4]
	if( Volume < 0) Volume = 0;
 8000e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e48:	d502      	bpl.n	8000e50 <readVolume+0x3c>
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
	return Volume;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	ee07 3a90 	vmov	s15, r3
}
 8000e56:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	2000008c 	.word	0x2000008c
 8000e68:	3a164fd2 	.word	0x3a164fd2

08000e6c <readVdc>:

float readVdc(void){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <readVdc+0x38>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * AD2VOLTAGE;
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e82:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000ea8 <readVdc+0x3c>
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	ee07 3a90 	vmov	s15, r3
}
 8000e94:	eeb0 0a67 	vmov.f32	s0, s15
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000008c 	.word	0x2000008c
 8000ea8:	3cce8561 	.word	0x3cce8561
 8000eac:	00000000 	.word	0x00000000

08000eb0 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ecc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000edc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	b292      	uxth	r2, r2
 8000ee6:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000fb0 <readCurrent+0x100>
 8000ef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000efc:	ee17 0a90 	vmov	r0, s15
 8000f00:	f7ff fc18 	bl	8000734 <__aeabi_f2d>
 8000f04:	a328      	add	r3, pc, #160	; (adr r3, 8000fa8 <readCurrent+0xf8>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f7ff f985 	bl	8000218 <__aeabi_dmul>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fc65 	bl	80007e4 <__aeabi_d2f>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	601a      	str	r2, [r3, #0]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3302      	adds	r3, #2
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f2e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000fb4 <readCurrent+0x104>
 8000f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f36:	ee17 0a90 	vmov	r0, s15
 8000f3a:	f7ff fbfb 	bl	8000734 <__aeabi_f2d>
 8000f3e:	a31a      	add	r3, pc, #104	; (adr r3, 8000fa8 <readCurrent+0xf8>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff f968 	bl	8000218 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	1d1c      	adds	r4, r3, #4
 8000f54:	f7ff fc46 	bl	80007e4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	6023      	str	r3, [r4, #0]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000fb8 <readCurrent+0x108>
 8000f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f72:	ee17 0a90 	vmov	r0, s15
 8000f76:	f7ff fbdd 	bl	8000734 <__aeabi_f2d>
 8000f7a:	a30b      	add	r3, pc, #44	; (adr r3, 8000fa8 <readCurrent+0xf8>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff f94a 	bl	8000218 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f103 0408 	add.w	r4, r3, #8
 8000f92:	f7ff fc27 	bl	80007e4 <__aeabi_d2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	6023      	str	r3, [r4, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	f83914d2 	.word	0xf83914d2
 8000fac:	bfd6f74d 	.word	0xbfd6f74d
 8000fb0:	44f5c000 	.word	0x44f5c000
 8000fb4:	44f72000 	.word	0x44f72000
 8000fb8:	44f62000 	.word	0x44f62000

08000fbc <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f005 fc7e 	bl	80068cc <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1c5c      	adds	r4, r3, #1
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <readHallSignal+0x48>)
 8000fe0:	f005 fc74 	bl	80068cc <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	1c9c      	adds	r4, r3, #2
 8000fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <readHallSignal+0x48>)
 8000ff2:	f005 fc6b 	bl	80068cc <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	7023      	strb	r3, [r4, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	48000400 	.word	0x48000400

08001008 <writeOutputMode>:

void writeOutputMode(int8_t* outputMode){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f993 3000 	ldrsb.w	r3, [r3]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <writeOutputMode+0x80>)
 8001022:	f005 fc6b 	bl	80068fc <HAL_GPIO_WritePin>
 8001026:	e005      	b.n	8001034 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <writeOutputMode+0x80>)
 8001030:	f005 fc64 	bl	80068fc <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	f993 3000 	ldrsb.w	r3, [r3]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d106      	bne.n	800104e <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <writeOutputMode+0x80>)
 8001048:	f005 fc58 	bl	80068fc <HAL_GPIO_WritePin>
 800104c:	e005      	b.n	800105a <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <writeOutputMode+0x80>)
 8001056:	f005 fc51 	bl	80068fc <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3302      	adds	r3, #2
 800105e:	f993 3000 	ldrsb.w	r3, [r3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d106      	bne.n	8001074 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <writeOutputMode+0x80>)
 800106e:	f005 fc45 	bl	80068fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8001072:	e005      	b.n	8001080 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <writeOutputMode+0x80>)
 800107c:	f005 fc3e 	bl	80068fc <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	48000800 	.word	0x48000800

0800108c <writeDuty>:

void writeDuty(float* Duty){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <writeDuty+0x80>)
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <writeDuty+0x80>)
 80010ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b0:	ee17 2a90 	vmov	r2, s15
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3304      	adds	r3, #4
 80010ba:	ed93 7a00 	vldr	s14, [r3]
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <writeDuty+0x80>)
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <writeDuty+0x80>)
 80010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d4:	ee17 2a90 	vmov	r2, s15
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3308      	adds	r3, #8
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <writeDuty+0x80>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <writeDuty+0x80>)
 80010f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f8:	ee17 2a90 	vmov	r2, s15
 80010fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40012c00 	.word	0x40012c00

08001110 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t flgPLL, uint8_t voltageMode, float* electAngle, float* electAngVelo){
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	460b      	mov	r3, r1
 8001120:	73bb      	strb	r3, [r7, #14]
	float Ki_PLL;
	float Ts_PLL;
	float timeInterval;

	// Read Hall Signals
	readHallSignal(gHall);
 8001122:	4896      	ldr	r0, [pc, #600]	; (800137c <calcElectAngle+0x26c>)
 8001124:	f7ff ff4a 	bl	8000fbc <readHallSignal>

	// Hold & Read Input Capture Count
	gInputCaptureCnt_pre = gInputCaptureCnt;
 8001128:	4b95      	ldr	r3, [pc, #596]	; (8001380 <calcElectAngle+0x270>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a95      	ldr	r2, [pc, #596]	; (8001384 <calcElectAngle+0x274>)
 800112e:	6013      	str	r3, [r2, #0]
	gInputCaptureCnt = readInputCaptureCnt();
 8001130:	f7ff fe1a 	bl	8000d68 <readInputCaptureCnt>
 8001134:	4603      	mov	r3, r0
 8001136:	4a92      	ldr	r2, [pc, #584]	; (8001380 <calcElectAngle+0x270>)
 8001138:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(gInputCaptureCnt != gInputCaptureCnt_pre){
 800113a:	4b91      	ldr	r3, [pc, #580]	; (8001380 <calcElectAngle+0x270>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b91      	ldr	r3, [pc, #580]	; (8001384 <calcElectAngle+0x274>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d023      	beq.n	800118e <calcElectAngle+0x7e>
		timeInterval = readTimeInterval(gInputCaptureCnt, gInputCaptureCnt_pre);
 8001146:	4b8e      	ldr	r3, [pc, #568]	; (8001380 <calcElectAngle+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a8e      	ldr	r2, [pc, #568]	; (8001384 <calcElectAngle+0x274>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe17 	bl	8000d84 <readTimeInterval>
 8001156:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		if( timeInterval > 0.0001f)
 800115a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800115e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001388 <calcElectAngle+0x278>
 8001162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	dd0c      	ble.n	8001186 <calcElectAngle+0x76>
			gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 800116c:	ed9f 1a87 	vldr	s2, [pc, #540]	; 800138c <calcElectAngle+0x27c>
 8001170:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001174:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001178:	f7ff fd35 	bl	8000be6 <gfDivideAvoidZero>
 800117c:	eef0 7a40 	vmov.f32	s15, s0
 8001180:	4b83      	ldr	r3, [pc, #524]	; (8001390 <calcElectAngle+0x280>)
 8001182:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 8001186:	4b83      	ldr	r3, [pc, #524]	; (8001394 <calcElectAngle+0x284>)
 8001188:	2200      	movs	r2, #0
 800118a:	801a      	strh	r2, [r3, #0]
 800118c:	e00f      	b.n	80011ae <calcElectAngle+0x9e>
	}
	else if(sNoInputCaptureCnt < 2000)
 800118e:	4b81      	ldr	r3, [pc, #516]	; (8001394 <calcElectAngle+0x284>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001196:	d206      	bcs.n	80011a6 <calcElectAngle+0x96>
		sNoInputCaptureCnt ++;
 8001198:	4b7e      	ldr	r3, [pc, #504]	; (8001394 <calcElectAngle+0x284>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b7c      	ldr	r3, [pc, #496]	; (8001394 <calcElectAngle+0x284>)
 80011a2:	801a      	strh	r2, [r3, #0]
 80011a4:	e003      	b.n	80011ae <calcElectAngle+0x9e>
	else
		gElectFreq = 0;
 80011a6:	4b7a      	ldr	r3, [pc, #488]	; (8001390 <calcElectAngle+0x280>)
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]


	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80011ae:	4b7a      	ldr	r3, [pc, #488]	; (8001398 <calcElectAngle+0x288>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011bc:	edc7 7a08 	vstr	s15, [r7, #32]
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80011c0:	4b75      	ldr	r3, [pc, #468]	; (8001398 <calcElectAngle+0x288>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800139c <calcElectAngle+0x28c>
 80011ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ce:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80011d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011de:	edc7 7a07 	vstr	s15, [r7, #28]
	Kp_PLL = wc_PLL;
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	61bb      	str	r3, [r7, #24]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 80011e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013a0 <calcElectAngle+0x290>
 80011ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001202:	edc7 7a05 	vstr	s15, [r7, #20]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8001206:	4b67      	ldr	r3, [pc, #412]	; (80013a4 <calcElectAngle+0x294>)
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	4b67      	ldr	r3, [pc, #412]	; (80013a8 <calcElectAngle+0x298>)
 800120c:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(gHall);
 800120e:	485b      	ldr	r0, [pc, #364]	; (800137c <calcElectAngle+0x26c>)
 8001210:	f000 f8e0 	bl	80013d4 <calcVoltageMode>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <calcElectAngle+0x294>)
 800121a:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 800121c:	4b63      	ldr	r3, [pc, #396]	; (80013ac <calcElectAngle+0x29c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a63      	ldr	r2, [pc, #396]	; (80013b0 <calcElectAngle+0x2a0>)
 8001222:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8001224:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <calcElectAngle+0x298>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4a5e      	ldr	r2, [pc, #376]	; (80013a4 <calcElectAngle+0x294>)
 800122a:	7811      	ldrb	r1, [r2, #0]
 800122c:	4a61      	ldr	r2, [pc, #388]	; (80013b4 <calcElectAngle+0x2a4>)
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f916 	bl	8001460 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8001234:	4b5b      	ldr	r3, [pc, #364]	; (80013a4 <calcElectAngle+0x294>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <calcElectAngle+0x2a4>)
 800123a:	f992 2000 	ldrsb.w	r2, [r2]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f939 	bl	80014b8 <calcElectAngleFromVoltageMode>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
 800124a:	4b58      	ldr	r3, [pc, #352]	; (80013ac <calcElectAngle+0x29c>)
 800124c:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8001250:	4b56      	ldr	r3, [pc, #344]	; (80013ac <calcElectAngle+0x29c>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	f7ff fd0b 	bl	8000c74 <gfWrapTheta>
 800125e:	eef0 7a40 	vmov.f32	s15, s0
 8001262:	4b52      	ldr	r3, [pc, #328]	; (80013ac <calcElectAngle+0x29c>)
 8001264:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <calcElectAngle+0x2a8>)
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <calcElectAngle+0x2ac>)
 800126e:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 8001270:	4a51      	ldr	r2, [pc, #324]	; (80013b8 <calcElectAngle+0x2a8>)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d164      	bne.n	8001346 <calcElectAngle+0x236>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <calcElectAngle+0x2ac>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d111      	bne.n	80012a8 <calcElectAngle+0x198>
			sElectAngVeloEstimate = gElectFreq * TWOPI;
 8001284:	4b42      	ldr	r3, [pc, #264]	; (8001390 <calcElectAngle+0x280>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80013c0 <calcElectAngle+0x2b0>
 800128e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <calcElectAngle+0x288>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8001298:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <calcElectAngle+0x288>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a49      	ldr	r2, [pc, #292]	; (80013c4 <calcElectAngle+0x2b4>)
 800129e:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <calcElectAngle+0x29c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <calcElectAngle+0x2b8>)
 80012a6:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <calcElectAngle+0x288>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	eddf 6a47 	vldr	s13, [pc, #284]	; 80013cc <calcElectAngle+0x2bc>
 80012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <calcElectAngle+0x2b8>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <calcElectAngle+0x2b8>)
 80012c2:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <calcElectAngle+0x2b8>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	f7ff fcd0 	bl	8000c74 <gfWrapTheta>
 80012d4:	eef0 7a40 	vmov.f32	s15, s0
 80012d8:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <calcElectAngle+0x2b8>)
 80012da:	edc3 7a00 	vstr	s15, [r3]

		if( sElectAngleActual != sElectAngleActual_pre){
 80012de:	4b33      	ldr	r3, [pc, #204]	; (80013ac <calcElectAngle+0x29c>)
 80012e0:	ed93 7a00 	vldr	s14, [r3]
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <calcElectAngle+0x2a0>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80012ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f2:	d036      	beq.n	8001362 <calcElectAngle+0x252>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <calcElectAngle+0x29c>)
 80012f6:	ed93 7a00 	vldr	s14, [r3]
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <calcElectAngle+0x2b8>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <calcElectAngle+0x2c0>)
 8001306:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <calcElectAngle+0x2c0>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	f7ff fcae 	bl	8000c74 <gfWrapTheta>
 8001318:	eef0 7a40 	vmov.f32	s15, s0
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <calcElectAngle+0x2c0>)
 800131e:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <calcElectAngle+0x2c0>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	4826      	ldr	r0, [pc, #152]	; (80013c4 <calcElectAngle+0x2b4>)
 800132a:	ed97 1a05 	vldr	s2, [r7, #20]
 800132e:	edd7 0a06 	vldr	s1, [r7, #24]
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	f7ff fc27 	bl	8000b88 <cfPhaseLockedLoop>
 800133a:	eef0 7a40 	vmov.f32	s15, s0
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <calcElectAngle+0x288>)
 8001340:	edc3 7a00 	vstr	s15, [r3]
 8001344:	e00d      	b.n	8001362 <calcElectAngle+0x252>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <calcElectAngle+0x29c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <calcElectAngle+0x2b8>)
 800134c:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = gElectFreq * TWOPI;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <calcElectAngle+0x280>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80013c0 <calcElectAngle+0x2b0>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <calcElectAngle+0x288>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <calcElectAngle+0x2b8>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <calcElectAngle+0x288>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]


}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000090 	.word	0x20000090
 8001380:	20000094 	.word	0x20000094
 8001384:	20000098 	.word	0x20000098
 8001388:	38d1b717 	.word	0x38d1b717
 800138c:	31ca1db9 	.word	0x31ca1db9
 8001390:	2000009c 	.word	0x2000009c
 8001394:	200000de 	.word	0x200000de
 8001398:	200000f4 	.word	0x200000f4
 800139c:	3e22f983 	.word	0x3e22f983
 80013a0:	3e4ccccd 	.word	0x3e4ccccd
 80013a4:	200000dc 	.word	0x200000dc
 80013a8:	200000dd 	.word	0x200000dd
 80013ac:	200000e4 	.word	0x200000e4
 80013b0:	200000e8 	.word	0x200000e8
 80013b4:	200000e0 	.word	0x200000e0
 80013b8:	200000e1 	.word	0x200000e1
 80013bc:	200000e2 	.word	0x200000e2
 80013c0:	40c90fdb 	.word	0x40c90fdb
 80013c4:	200000f0 	.word	0x200000f0
 80013c8:	200000ec 	.word	0x200000ec
 80013cc:	4684d000 	.word	0x4684d000
 80013d0:	200000f8 	.word	0x200000f8

080013d4 <calcVoltageMode>:
else
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

static uint8_t calcVoltageMode(uint8_t* Hall){
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	uint8_t hallInput;
	uint8_t voltageMode = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3302      	adds	r3, #2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3301      	adds	r3, #1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	3b01      	subs	r3, #1
 8001404:	2b05      	cmp	r3, #5
 8001406:	d821      	bhi.n	800144c <calcVoltageMode+0x78>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <calcVoltageMode+0x3c>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	08001447 	.word	0x08001447
 8001414:	0800142f 	.word	0x0800142f
 8001418:	08001429 	.word	0x08001429
 800141c:	0800143b 	.word	0x0800143b
 8001420:	08001441 	.word	0x08001441
 8001424:	08001435 	.word	0x08001435
	  case 3:
		voltageMode = 3;
 8001428:	2303      	movs	r3, #3
 800142a:	73fb      	strb	r3, [r7, #15]
		break;
 800142c:	e011      	b.n	8001452 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 800142e:	2304      	movs	r3, #4
 8001430:	73fb      	strb	r3, [r7, #15]
		break;
 8001432:	e00e      	b.n	8001452 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8001434:	2305      	movs	r3, #5
 8001436:	73fb      	strb	r3, [r7, #15]
		break;
 8001438:	e00b      	b.n	8001452 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 800143a:	2306      	movs	r3, #6
 800143c:	73fb      	strb	r3, [r7, #15]
		break;
 800143e:	e008      	b.n	8001452 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
		break;
 8001444:	e005      	b.n	8001452 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	73fb      	strb	r3, [r7, #15]
		break;
 800144a:	e002      	b.n	8001452 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
	  break;
 8001450:	bf00      	nop
	}
	return voltageMode;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <calcRotDirFromVoltageMode>:
static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	603a      	str	r2, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	460b      	mov	r3, r1
 800146e:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8001470:	79ba      	ldrb	r2, [r7, #6]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	2b01      	cmp	r3, #1
 8001480:	dd04      	ble.n	800148c <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	3b06      	subs	r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e008      	b.n	800149e <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	da03      	bge.n	800149e <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3306      	adds	r3, #6
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	701a      	strb	r2, [r3, #0]

}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	460a      	mov	r2, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d822      	bhi.n	8001516 <calcElectAngleFromVoltageMode+0x5e>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <calcElectAngleFromVoltageMode+0x20>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	0800150b 	.word	0x0800150b
 80014dc:	08001511 	.word	0x08001511
 80014e0:	080014f1 	.word	0x080014f1
 80014e4:	080014f9 	.word	0x080014f9
 80014e8:	080014ff 	.word	0x080014ff
 80014ec:	08001505 	.word	0x08001505
		  case 3:
			  electAngle_Center = 0.0f;
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
			break;
 80014f6:	e012      	b.n	800151e <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <calcElectAngleFromVoltageMode+0x9c>)
 80014fa:	60fb      	str	r3, [r7, #12]
			break;
 80014fc:	e00f      	b.n	800151e <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <calcElectAngleFromVoltageMode+0xa0>)
 8001500:	60fb      	str	r3, [r7, #12]
			break;
 8001502:	e00c      	b.n	800151e <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <calcElectAngleFromVoltageMode+0xa4>)
 8001506:	60fb      	str	r3, [r7, #12]
			break;
 8001508:	e009      	b.n	800151e <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <calcElectAngleFromVoltageMode+0xa8>)
 800150c:	60fb      	str	r3, [r7, #12]
			break;
 800150e:	e006      	b.n	800151e <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <calcElectAngleFromVoltageMode+0xac>)
 8001512:	60fb      	str	r3, [r7, #12]
			break;
 8001514:	e003      	b.n	800151e <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
		  break;
 800151c:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 800151e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001568 <calcElectAngleFromVoltageMode+0xb0>
 800152e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001532:	ed97 7a03 	vldr	s14, [r7, #12]
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	ee07 3a90 	vmov	s15, r3
}
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	3f860a92 	.word	0x3f860a92
 8001558:	40060a92 	.word	0x40060a92
 800155c:	40490fdb 	.word	0x40490fdb
 8001560:	c0060a92 	.word	0xc0060a92
 8001564:	bf860a92 	.word	0xbf860a92
 8001568:	3f060a92 	.word	0x3f060a92

0800156c <VectorControlTasks>:
static float calcAmpFromVect(float* Vect);
static float calcModFromVamp(float Vamp, float twoDivVdc);
static void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static void CurrentFbControl(float *Igd_ref, float *Igd, float electAngVelo, float Vdc, float *Vgd, float* Vamp);

void VectorControlTasks(float *Idq_ref, float theta, float electAngVelo, float *Iuvw, float Vdc, float twoDivVdc, uint8_t flgFB, float* Duty, int8_t* outputMode){
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	61f8      	str	r0, [r7, #28]
 8001574:	ed87 0a06 	vstr	s0, [r7, #24]
 8001578:	edc7 0a05 	vstr	s1, [r7, #20]
 800157c:	6139      	str	r1, [r7, #16]
 800157e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001582:	edc7 1a02 	vstr	s3, [r7, #8]
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	71fb      	strb	r3, [r7, #7]

	if ( flgFB == 0 ){
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d128      	bne.n	80015e4 <VectorControlTasks+0x78>
			OpenLoopTasks(gVolume * 12.24f, theta, Iuvw, twoDivVdc, Duty, outputMode);
 8001592:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <VectorControlTasks+0x154>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80016c4 <VectorControlTasks+0x158>
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a2:	6839      	ldr	r1, [r7, #0]
 80015a4:	ed97 1a02 	vldr	s2, [r7, #8]
 80015a8:	6938      	ldr	r0, [r7, #16]
 80015aa:	edd7 0a06 	vldr	s1, [r7, #24]
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	f000 f8a3 	bl	80016fc <OpenLoopTasks>
			sVdq[0] = 0.0f;
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <VectorControlTasks+0x15c>)
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
			sVdq[1] = gVolume * 12.24f;
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <VectorControlTasks+0x154>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80016c4 <VectorControlTasks+0x158>
 80015c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015cc:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <VectorControlTasks+0x15c>)
 80015ce:	edc3 7a01 	vstr	s15, [r3, #4]
			sVdq_i[0] = 0.0f;
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <VectorControlTasks+0x160>)
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
			sVdq_i[1] = 0.0f;
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <VectorControlTasks+0x160>)
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	e03f      	b.n	8001664 <VectorControlTasks+0xf8>
		}
	else{

		outputMode[0] = OUTPUTMODE_POSITIVE;
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
		outputMode[1] = OUTPUTMODE_POSITIVE;
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	3301      	adds	r3, #1
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
		outputMode[2] = OUTPUTMODE_POSITIVE;
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	3302      	adds	r3, #2
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]


		uvw2ab(gIuvw, sIab);
 80015fa:	4935      	ldr	r1, [pc, #212]	; (80016d0 <VectorControlTasks+0x164>)
 80015fc:	4835      	ldr	r0, [pc, #212]	; (80016d4 <VectorControlTasks+0x168>)
 80015fe:	f000 f8c5 	bl	800178c <uvw2ab>
		ab2dq(theta, sIab, sIdq);
 8001602:	4935      	ldr	r1, [pc, #212]	; (80016d8 <VectorControlTasks+0x16c>)
 8001604:	4832      	ldr	r0, [pc, #200]	; (80016d0 <VectorControlTasks+0x164>)
 8001606:	ed97 0a06 	vldr	s0, [r7, #24]
 800160a:	f000 f949 	bl	80018a0 <ab2dq>

		CurrentFbControl(Idq_ref, sIdq, electAngVelo, Vdc, sVdq, &sVamp);
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <VectorControlTasks+0x170>)
 8001610:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <VectorControlTasks+0x15c>)
 8001612:	edd7 0a03 	vldr	s1, [r7, #12]
 8001616:	ed97 0a05 	vldr	s0, [r7, #20]
 800161a:	492f      	ldr	r1, [pc, #188]	; (80016d8 <VectorControlTasks+0x16c>)
 800161c:	69f8      	ldr	r0, [r7, #28]
 800161e:	f000 fa9d 	bl	8001b5c <CurrentFbControl>
		sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <VectorControlTasks+0x170>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <VectorControlTasks+0x174>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	eef0 0a47 	vmov.f32	s1, s14
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	f000 f99d 	bl	8001974 <calcModFromVamp>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <VectorControlTasks+0x178>)
 8001640:	edc3 7a00 	vstr	s15, [r3]
		sEdq[0] = sVdq[0] - Ra * sIdq[0] + La * electAngVelo * sIdq[1];
		sEdq[1] = sVdq[1] - Ra * sIdq[1] - La * electAngVelo * sIdq[0];
		sAngleErr = atan2f(-1.0f * sEdq[0], sEdq[1]);
		*/

		dq2ab(theta, sVdq, sVab);
 8001644:	4928      	ldr	r1, [pc, #160]	; (80016e8 <VectorControlTasks+0x17c>)
 8001646:	4820      	ldr	r0, [pc, #128]	; (80016c8 <VectorControlTasks+0x15c>)
 8001648:	ed97 0a06 	vldr	s0, [r7, #24]
 800164c:	f000 f9b2 	bl	80019b4 <dq2ab>
		ab2uvw(sVab, sVuvw);
 8001650:	4926      	ldr	r1, [pc, #152]	; (80016ec <VectorControlTasks+0x180>)
 8001652:	4825      	ldr	r0, [pc, #148]	; (80016e8 <VectorControlTasks+0x17c>)
 8001654:	f000 f8e2 	bl	800181c <ab2uvw>
		Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	4824      	ldr	r0, [pc, #144]	; (80016ec <VectorControlTasks+0x180>)
 800165c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001660:	f000 f9e8 	bl	8001a34 <Vuvw2Duty>
	}
	sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80016f0 <VectorControlTasks+0x184>
 800166e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <VectorControlTasks+0x188>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
	sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	3304      	adds	r3, #4
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80016f0 <VectorControlTasks+0x184>
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <VectorControlTasks+0x188>)
 800168a:	edc3 7a01 	vstr	s15, [r3, #4]
	sIdq_1000[0] = sIdq[0] * 1000.0f;
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <VectorControlTasks+0x16c>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80016f0 <VectorControlTasks+0x184>
 8001698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <VectorControlTasks+0x18c>)
 800169e:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <VectorControlTasks+0x16c>)
 80016a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80016f0 <VectorControlTasks+0x184>
 80016ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <VectorControlTasks+0x18c>)
 80016b2:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000b0 	.word	0x200000b0
 80016c4:	4143d70a 	.word	0x4143d70a
 80016c8:	2000011c 	.word	0x2000011c
 80016cc:	20000124 	.word	0x20000124
 80016d0:	200000fc 	.word	0x200000fc
 80016d4:	200000b4 	.word	0x200000b4
 80016d8:	20000104 	.word	0x20000104
 80016dc:	20000140 	.word	0x20000140
 80016e0:	200000ac 	.word	0x200000ac
 80016e4:	20000144 	.word	0x20000144
 80016e8:	2000012c 	.word	0x2000012c
 80016ec:	20000134 	.word	0x20000134
 80016f0:	447a0000 	.word	0x447a0000
 80016f4:	2000010c 	.word	0x2000010c
 80016f8:	20000114 	.word	0x20000114

080016fc <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float twoDivVdc, float* Duty, int8_t* outputMode){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	ed87 0a05 	vstr	s0, [r7, #20]
 8001706:	edc7 0a04 	vstr	s1, [r7, #16]
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001710:	6079      	str	r1, [r7, #4]
 8001712:	603a      	str	r2, [r7, #0]
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3302      	adds	r3, #2
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]

	uvw2ab(gIuvw, sIab);
 800172a:	4912      	ldr	r1, [pc, #72]	; (8001774 <OpenLoopTasks+0x78>)
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <OpenLoopTasks+0x7c>)
 800172e:	f000 f82d 	bl	800178c <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 8001732:	4912      	ldr	r1, [pc, #72]	; (800177c <OpenLoopTasks+0x80>)
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <OpenLoopTasks+0x78>)
 8001736:	ed97 0a04 	vldr	s0, [r7, #16]
 800173a:	f000 f8b1 	bl	80018a0 <ab2dq>
	sVdq[0] = 0.0f;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <OpenLoopTasks+0x84>)
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
	sVdq[1] = VamRef;
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <OpenLoopTasks+0x84>)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6053      	str	r3, [r2, #4]
	dq2ab(theta, sVdq, sVab);
 800174c:	490d      	ldr	r1, [pc, #52]	; (8001784 <OpenLoopTasks+0x88>)
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <OpenLoopTasks+0x84>)
 8001750:	ed97 0a04 	vldr	s0, [r7, #16]
 8001754:	f000 f92e 	bl	80019b4 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001758:	490b      	ldr	r1, [pc, #44]	; (8001788 <OpenLoopTasks+0x8c>)
 800175a:	480a      	ldr	r0, [pc, #40]	; (8001784 <OpenLoopTasks+0x88>)
 800175c:	f000 f85e 	bl	800181c <ab2uvw>
	Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <OpenLoopTasks+0x8c>)
 8001764:	ed97 0a02 	vldr	s0, [r7, #8]
 8001768:	f000 f964 	bl	8001a34 <Vuvw2Duty>
}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200000fc 	.word	0x200000fc
 8001778:	200000b4 	.word	0x200000b4
 800177c:	20000104 	.word	0x20000104
 8001780:	2000011c 	.word	0x2000011c
 8001784:	2000012c 	.word	0x2000012c
 8001788:	20000134 	.word	0x20000134

0800178c <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80017a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3308      	adds	r3, #8
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80017bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001814 <uvw2ab+0x88>
 80017c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3304      	adds	r3, #4
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001818 <uvw2ab+0x8c>
 80017de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3308      	adds	r3, #8
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001818 <uvw2ab+0x8c>
 80017ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3304      	adds	r3, #4
 80017fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001814 <uvw2ab+0x88>
 80017fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001802:	edc3 7a00 	vstr	s15, [r3]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	3f5105ec 	.word	0x3f5105ec
 8001818:	3f5db3d7 	.word	0x3f5db3d7

0800181c <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001898 <ab2uvw+0x7c>
 8001830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001844:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3304      	adds	r3, #4
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eddf 6a12 	vldr	s13, [pc, #72]	; 800189c <ab2uvw+0x80>
 8001854:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3304      	adds	r3, #4
 8001860:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001898 <ab2uvw+0x7c>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	eeb1 7a67 	vneg.f32	s14, s15
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3304      	adds	r3, #4
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	3308      	adds	r3, #8
 8001882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001886:	edc3 7a00 	vstr	s15, [r3]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	3f5105ec 	.word	0x3f5105ec
 800189c:	3f5db3d7 	.word	0x3f5db3d7

080018a0 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80018aa:	60b8      	str	r0, [r7, #8]
 80018ac:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 80018ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80018b2:	f008 fca5 	bl	800a200 <sinf>
 80018b6:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 80018ba:	ed97 0a03 	vldr	s0, [r7, #12]
 80018be:	f008 fc5b 	bl	800a178 <cosf>
 80018c2:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	3304      	adds	r3, #4
 80018d8:	edd3 6a00 	vldr	s13, [r3]
 80018dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	eeb1 7a67 	vneg.f32	s14, s15
 80018f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3304      	adds	r3, #4
 8001904:	edd3 6a00 	vldr	s13, [r3]
 8001908:	edd7 7a04 	vldr	s15, [r7, #16]
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3304      	adds	r3, #4
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	edc3 7a00 	vstr	s15, [r3]
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	float amp;
	float amp2;

	amp2 = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	edd3 6a00 	vldr	s13, [r3]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3304      	adds	r3, #4
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(amp2);
 8001958:	ed97 0a03 	vldr	s0, [r7, #12]
 800195c:	f008 fcb8 	bl	800a2d0 <sqrtf>
 8001960:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	ee07 3a90 	vmov	s15, r3
}
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	ed87 0a01 	vstr	s0, [r7, #4]
 800197e:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001982:	ed97 7a01 	vldr	s14, [r7, #4]
 8001986:	edd7 7a00 	vldr	s15, [r7]
 800198a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80019b0 <calcModFromVamp+0x3c>
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	ee07 3a90 	vmov	s15, r3
}
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	3f5105ec 	.word	0x3f5105ec

080019b4 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80019be:	60b8      	str	r0, [r7, #8]
 80019c0:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 80019c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80019c6:	f008 fc1b 	bl	800a200 <sinf>
 80019ca:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 80019ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80019d2:	f008 fbd1 	bl	800a178 <cosf>
 80019d6:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3304      	adds	r3, #4
 80019ec:	edd3 6a00 	vldr	s13, [r3]
 80019f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3304      	adds	r3, #4
 8001a14:	edd3 6a00 	vldr	s13, [r3]
 8001a18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3304      	adds	r3, #4
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	edc3 7a00 	vstr	s15, [r3]
}
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a3e:	60b8      	str	r0, [r7, #8]
 8001a40:	6079      	str	r1, [r7, #4]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	ed93 7a00 	vldr	s14, [r3]
 8001a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	ed93 7a00 	vldr	s14, [r3]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3304      	adds	r3, #4
 8001a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = -Duty[0] - Duty[1];
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	eeb1 7a67 	vneg.f32	s14, s15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3308      	adds	r3, #8
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001a96:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f7ff f927 	bl	8000cf0 <gUpperLowerLimit>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	1d1c      	adds	r4, r3, #4
 8001ab8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001abc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f7ff f914 	bl	8000cf0 <gUpperLowerLimit>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f103 0408 	add.w	r4, r3, #8
 8001ade:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001ae2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	f7ff f901 	bl	8000cf0 <gUpperLowerLimit>
 8001aee:	eef0 7a40 	vmov.f32	s15, s0
 8001af2:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3304      	adds	r3, #4
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3308      	adds	r3, #8
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3308      	adds	r3, #8
 8001b46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b4e:	edc3 7a00 	vstr	s15, [r3]

}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
	...

08001b5c <CurrentFbControl>:



static void CurrentFbControl(float* Igd_ref, float* Igd, float electAngVelo, float Vdc, float* Vgd, float* Vamp){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	; 0x38
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6178      	str	r0, [r7, #20]
 8001b64:	6139      	str	r1, [r7, #16]
 8001b66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
	float Kid;
	float VampLimit;
	float Vphase;
	float wc;

	wc = 10.0f * TWOPI;
 8001b72:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <CurrentFbControl+0x1ac>)
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34

	Kp = La * wc;
 8001b76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b7a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001d0c <CurrentFbControl+0x1b0>
 8001b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Kig = Ra * wc * CARRIERCYCLE;
 8001b86:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b8a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001d10 <CurrentFbControl+0x1b4>
 8001b8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b92:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001d14 <CurrentFbControl+0x1b8>
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Kid = Kig;
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28

	Ierr[0] = Igd_ref[0] - Igd[0];
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb2:	edc7 7a06 	vstr	s15, [r7, #24]
	Ierr[1] = Igd_ref[1] - Igd[1];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	ed93 7a00 	vldr	s14, [r3]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	edc7 7a07 	vstr	s15, [r7, #28]

	sVdq_i[0] += Kig * Ierr[0];
 8001bce:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	edd7 6a06 	vldr	s13, [r7, #24]
 8001bd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001be6:	edc3 7a00 	vstr	s15, [r3]
	sVdq_i[1] += Kid * Ierr[1];
 8001bea:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001bec:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001c02:	edc3 7a01 	vstr	s15, [r3, #4]

	Vgd[0] = Kp * Ierr[0] + sVdq_i[0];
 8001c06:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
	Vgd[1] = Ke * electAngVelo + Kp * Ierr[1] + sVdq_i[1];// + Vgd[1] + Kid * Ierr[1] + ;
 8001c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c26:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001d1c <CurrentFbControl+0x1c0>
 8001c2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3e:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	edc3 7a00 	vstr	s15, [r3]

	Vphase = atan2f(Vgd[1], Vgd[0]);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	eef0 0a47 	vmov.f32	s1, s14
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	f008 fb11 	bl	800a28c <atan2f>
 8001c6a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	*Vamp = calcAmpFromVect(Vgd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fe58 	bl	8001924 <calcAmpFromVect>
 8001c74:	eef0 7a40 	vmov.f32	s15, s0
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = Vdc * SQRT3DIV2_DIV2;
 8001c7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c82:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001d20 <CurrentFbControl+0x1c4>
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	edc7 7a08 	vstr	s15, [r7, #32]
	if( *Vamp > VampLimit ){
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	d400      	bmi.n	8001ca4 <CurrentFbControl+0x148>
		sVdq_i[0] = Vgd[0];
		Vgd[1] = VampLimit * sinf(Vphase);
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;

	}
}
 8001ca2:	e02d      	b.n	8001d00 <CurrentFbControl+0x1a4>
		Vgd[0] = VampLimit * cosf(Vphase);
 8001ca4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001ca8:	f008 fa66 	bl	800a178 <cosf>
 8001cac:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[0] = Vgd[0];
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001cc4:	6013      	str	r3, [r2, #0]
		Vgd[1] = VampLimit * sinf(Vphase);
 8001cc6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001cca:	f008 fa99 	bl	800a200 <sinf>
 8001cce:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cee:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001d1c <CurrentFbControl+0x1c0>
 8001cf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <CurrentFbControl+0x1bc>)
 8001cfc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001d00:	bf00      	nop
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	427b53d2 	.word	0x427b53d2
 8001d0c:	3812ccf7 	.word	0x3812ccf7
 8001d10:	3cdd2f1b 	.word	0x3cdd2f1b
 8001d14:	4684d000 	.word	0x4684d000
 8001d18:	20000124 	.word	0x20000124
 8001d1c:	3c195aaf 	.word	0x3c195aaf
 8001d20:	3f1cc471 	.word	0x3f1cc471

08001d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2a:	f001 f872 	bl	8002e12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2e:	f000 f885 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d32:	f000 fbbd 	bl	80024b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d36:	f000 fb89 	bl	800244c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001d3a:	f000 f9e1 	bl	8002100 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001d3e:	f000 f8c9 	bl	8001ed4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d42:	f000 fa27 	bl	8002194 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d46:	f000 fae1 	bl	800230c <MX_TIM2_Init>
  MX_DAC1_Init();
 8001d4a:	f000 f99f 	bl	800208c <MX_DAC1_Init>
  MX_TIM7_Init();
 8001d4e:	f000 fb47 	bl	80023e0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001d52:	4832      	ldr	r0, [pc, #200]	; (8001e1c <main+0xf8>)
 8001d54:	f005 ff26 	bl	8007ba4 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001d58:	4831      	ldr	r0, [pc, #196]	; (8001e20 <main+0xfc>)
 8001d5a:	f002 ff03 	bl	8004b64 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d64:	482f      	ldr	r0, [pc, #188]	; (8001e24 <main+0x100>)
 8001d66:	f004 fdc9 	bl	80068fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d70:	482c      	ldr	r0, [pc, #176]	; (8001e24 <main+0x100>)
 8001d72:	f004 fdc3 	bl	80068fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7c:	4829      	ldr	r0, [pc, #164]	; (8001e24 <main+0x100>)
 8001d7e:	f004 fdbd 	bl	80068fc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d82:	2100      	movs	r1, #0
 8001d84:	4825      	ldr	r0, [pc, #148]	; (8001e1c <main+0xf8>)
 8001d86:	f005 ffdd 	bl	8007d44 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4823      	ldr	r0, [pc, #140]	; (8001e1c <main+0xf8>)
 8001d8e:	f007 f98d 	bl	80090ac <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d92:	2104      	movs	r1, #4
 8001d94:	4821      	ldr	r0, [pc, #132]	; (8001e1c <main+0xf8>)
 8001d96:	f005 ffd5 	bl	8007d44 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	481f      	ldr	r0, [pc, #124]	; (8001e1c <main+0xf8>)
 8001d9e:	f007 f985 	bl	80090ac <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001da2:	2108      	movs	r1, #8
 8001da4:	481d      	ldr	r0, [pc, #116]	; (8001e1c <main+0xf8>)
 8001da6:	f005 ffcd 	bl	8007d44 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001daa:	2108      	movs	r1, #8
 8001dac:	481b      	ldr	r0, [pc, #108]	; (8001e1c <main+0xf8>)
 8001dae:	f007 f97d 	bl	80090ac <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <main+0x104>)
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <main+0x104>)
 8001db8:	3b28      	subs	r3, #40	; 0x28
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8001dbc:	481b      	ldr	r0, [pc, #108]	; (8001e2c <main+0x108>)
 8001dbe:	f005 fef1 	bl	8007ba4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4819      	ldr	r0, [pc, #100]	; (8001e2c <main+0x108>)
 8001dc6:	f006 f927 	bl	8008018 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4817      	ldr	r0, [pc, #92]	; (8001e2c <main+0x108>)
 8001dce:	f006 f923 	bl	8008018 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001dd2:	2108      	movs	r1, #8
 8001dd4:	4815      	ldr	r0, [pc, #84]	; (8001e2c <main+0x108>)
 8001dd6:	f006 f91f 	bl	8008018 <HAL_TIM_IC_Start_IT>

  // Start TIM7 for DAC
  HAL_TIM_Base_Start(&htim7);
 8001dda:	4815      	ldr	r0, [pc, #84]	; (8001e30 <main+0x10c>)
 8001ddc:	f005 fe72 	bl	8007ac4 <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8001de0:	2101      	movs	r1, #1
 8001de2:	4813      	ldr	r0, [pc, #76]	; (8001e30 <main+0x10c>)
 8001de4:	f006 fc18 	bl	8008618 <HAL_TIM_GenerateEvent>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001de8:	2202      	movs	r2, #2
 8001dea:	4912      	ldr	r1, [pc, #72]	; (8001e34 <main+0x110>)
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <main+0xfc>)
 8001dee:	f001 fca9 	bl	8003744 <HAL_ADC_Start_DMA>
  uint16_t data = 2048;
 8001df2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001df6:	80fb      	strh	r3, [r7, #6]
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001df8:	2100      	movs	r1, #0
 8001dfa:	480f      	ldr	r0, [pc, #60]	; (8001e38 <main+0x114>)
 8001dfc:	f003 ff4f 	bl	8005c9e <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	480c      	ldr	r0, [pc, #48]	; (8001e38 <main+0x114>)
 8001e08:	f003 ff9c 	bl	8005d44 <HAL_DAC_SetValue>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <main+0x114>)
 8001e14:	f003 ff96 	bl	8005d44 <HAL_DAC_SetValue>
 8001e18:	e7f8      	b.n	8001e0c <main+0xe8>
 8001e1a:	bf00      	nop
 8001e1c:	20000318 	.word	0x20000318
 8001e20:	20000148 	.word	0x20000148
 8001e24:	48000800 	.word	0x48000800
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	20000364 	.word	0x20000364
 8001e30:	200003b0 	.word	0x200003b0
 8001e34:	2000008c 	.word	0x2000008c
 8001e38:	20000214 	.word	0x20000214

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b094      	sub	sp, #80	; 0x50
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	2238      	movs	r2, #56	; 0x38
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f008 f98c 	bl	800a168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f004 fda2 	bl	80069a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6e:	2340      	movs	r3, #64	; 0x40
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e76:	2302      	movs	r3, #2
 8001e78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e7e:	2355      	movs	r3, #85	; 0x55
 8001e80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e86:	2302      	movs	r3, #2
 8001e88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fe3c 	bl	8006b10 <HAL_RCC_OscConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e9e:	f000 fb8b 	bl	80025b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 f940 	bl	8007140 <HAL_RCC_ClockConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ec6:	f000 fb77 	bl	80025b8 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3750      	adds	r7, #80	; 0x50
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b09a      	sub	sp, #104	; 0x68
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001eda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eea:	2220      	movs	r2, #32
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 f93a 	bl	800a168 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	223c      	movs	r2, #60	; 0x3c
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f008 f934 	bl	800a168 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f00:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f08:	4b5a      	ldr	r3, [pc, #360]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f10:	4b58      	ldr	r3, [pc, #352]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f16:	4b57      	ldr	r3, [pc, #348]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f1c:	4b55      	ldr	r3, [pc, #340]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f22:	4b54      	ldr	r3, [pc, #336]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f28:	4b52      	ldr	r3, [pc, #328]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f2e:	4b51      	ldr	r3, [pc, #324]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f40:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f54:	4b47      	ldr	r3, [pc, #284]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001f62:	4b44      	ldr	r3, [pc, #272]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f6a:	4842      	ldr	r0, [pc, #264]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f6c:	f001 fa28 	bl	80033c0 <HAL_ADC_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f76:	f000 fb1f 	bl	80025b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f82:	4619      	mov	r1, r3
 8001f84:	483b      	ldr	r0, [pc, #236]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001f86:	f003 fc51 	bl	800582c <HAL_ADCEx_MultiModeConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001f90:	f000 fb12 	bl	80025b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f94:	4b38      	ldr	r3, [pc, #224]	; (8002078 <MX_ADC1_Init+0x1a4>)
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f98:	2306      	movs	r3, #6
 8001f9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fa0:	237f      	movs	r3, #127	; 0x7f
 8001fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4830      	ldr	r0, [pc, #192]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001fb4:	f001 ff22 	bl	8003dfc <HAL_ADC_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001fbe:	f000 fafb 	bl	80025b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <MX_ADC1_Init+0x1a8>)
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4828      	ldr	r0, [pc, #160]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8001fd2:	f001 ff13 	bl	8003dfc <HAL_ADC_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001fdc:	f000 faec 	bl	80025b8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <MX_ADC1_Init+0x1ac>)
 8001fe2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001fe4:	2309      	movs	r3, #9
 8001fe6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001fec:	237f      	movs	r3, #127	; 0x7f
 8001fee:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	4619      	mov	r1, r3
 8002020:	4814      	ldr	r0, [pc, #80]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8002022:	f002 fed7 	bl	8004dd4 <HAL_ADCEx_InjectedConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800202c:	f000 fac4 	bl	80025b8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_ADC1_Init+0x1b0>)
 8002032:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002034:	f240 130f 	movw	r3, #271	; 0x10f
 8002038:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800203a:	463b      	mov	r3, r7
 800203c:	4619      	mov	r1, r3
 800203e:	480d      	ldr	r0, [pc, #52]	; (8002074 <MX_ADC1_Init+0x1a0>)
 8002040:	f002 fec8 	bl	8004dd4 <HAL_ADCEx_InjectedConfigChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800204a:	f000 fab5 	bl	80025b8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_ADC1_Init+0x1b4>)
 8002050:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8002052:	f240 2315 	movw	r3, #533	; 0x215
 8002056:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_ADC1_Init+0x1a0>)
 800205e:	f002 feb9 	bl	8004dd4 <HAL_ADCEx_InjectedConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8002068:	f000 faa6 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3768      	adds	r7, #104	; 0x68
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000148 	.word	0x20000148
 8002078:	08600004 	.word	0x08600004
 800207c:	21800100 	.word	0x21800100
 8002080:	04300002 	.word	0x04300002
 8002084:	1d500080 	.word	0x1d500080
 8002088:	19200040 	.word	0x19200040

0800208c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002092:	463b      	mov	r3, r7
 8002094:	2230      	movs	r2, #48	; 0x30
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f008 f865 	bl	800a168 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <MX_DAC1_Init+0x6c>)
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <MX_DAC1_Init+0x70>)
 80020a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80020a4:	4814      	ldr	r0, [pc, #80]	; (80020f8 <MX_DAC1_Init+0x6c>)
 80020a6:	f003 fdd8 	bl	8005c5a <HAL_DAC_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80020b0:	f000 fa82 	bl	80025b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80020b4:	2302      	movs	r3, #2
 80020b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80020c4:	2302      	movs	r3, #2
 80020c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <MX_DAC1_Init+0x6c>)
 80020e0:	f003 fe58 	bl	8005d94 <HAL_DAC_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80020ea:	f000 fa65 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3730      	adds	r7, #48	; 0x30
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000214 	.word	0x20000214
 80020fc:	50000800 	.word	0x50000800

08002100 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <MX_LPUART1_UART_Init+0x90>)
 8002108:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 800210c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002110:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002132:	2200      	movs	r2, #0
 8002134:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002138:	2200      	movs	r2, #0
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002142:	4812      	ldr	r0, [pc, #72]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002144:	f007 f9e1 	bl	800950a <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800214e:	f000 fa33 	bl	80025b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002152:	2100      	movs	r1, #0
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002156:	f007 ff13 	bl	8009f80 <HAL_UARTEx_SetTxFifoThreshold>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002160:	f000 fa2a 	bl	80025b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002164:	2100      	movs	r1, #0
 8002166:	4809      	ldr	r0, [pc, #36]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002168:	f007 ff48 	bl	8009ffc <HAL_UARTEx_SetRxFifoThreshold>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002172:	f000 fa21 	bl	80025b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_LPUART1_UART_Init+0x8c>)
 8002178:	f007 fec9 	bl	8009f0e <HAL_UARTEx_DisableFifoMode>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002182:	f000 fa19 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000288 	.word	0x20000288
 8002190:	40008000 	.word	0x40008000

08002194 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b098      	sub	sp, #96	; 0x60
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2234      	movs	r2, #52	; 0x34
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f007 ffd1 	bl	800a168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021c6:	4b4f      	ldr	r3, [pc, #316]	; (8002304 <MX_TIM1_Init+0x170>)
 80021c8:	4a4f      	ldr	r2, [pc, #316]	; (8002308 <MX_TIM1_Init+0x174>)
 80021ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021cc:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <MX_TIM1_Init+0x170>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021d2:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <MX_TIM1_Init+0x170>)
 80021d4:	2220      	movs	r2, #32
 80021d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80021d8:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <MX_TIM1_Init+0x170>)
 80021da:	f241 3287 	movw	r2, #4999	; 0x1387
 80021de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b48      	ldr	r3, [pc, #288]	; (8002304 <MX_TIM1_Init+0x170>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <MX_TIM1_Init+0x170>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	4b45      	ldr	r3, [pc, #276]	; (8002304 <MX_TIM1_Init+0x170>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021f2:	4844      	ldr	r0, [pc, #272]	; (8002304 <MX_TIM1_Init+0x170>)
 80021f4:	f005 fd4e 	bl	8007c94 <HAL_TIM_PWM_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80021fe:	f000 f9db 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002202:	2370      	movs	r3, #112	; 0x70
 8002204:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800220e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002212:	4619      	mov	r1, r3
 8002214:	483b      	ldr	r0, [pc, #236]	; (8002304 <MX_TIM1_Init+0x170>)
 8002216:	f007 f80b 	bl	8009230 <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002220:	f000 f9ca 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002224:	2360      	movs	r3, #96	; 0x60
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222c:	2300      	movs	r3, #0
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002230:	2308      	movs	r3, #8
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002240:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002244:	2200      	movs	r2, #0
 8002246:	4619      	mov	r1, r3
 8002248:	482e      	ldr	r0, [pc, #184]	; (8002304 <MX_TIM1_Init+0x170>)
 800224a:	f006 f8d1 	bl	80083f0 <HAL_TIM_PWM_ConfigChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002254:	f000 f9b0 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002258:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800225c:	2204      	movs	r2, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4828      	ldr	r0, [pc, #160]	; (8002304 <MX_TIM1_Init+0x170>)
 8002262:	f006 f8c5 	bl	80083f0 <HAL_TIM_PWM_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800226c:	f000 f9a4 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002274:	2208      	movs	r2, #8
 8002276:	4619      	mov	r1, r3
 8002278:	4822      	ldr	r0, [pc, #136]	; (8002304 <MX_TIM1_Init+0x170>)
 800227a:	f006 f8b9 	bl	80083f0 <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002284:	f000 f998 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002288:	2370      	movs	r3, #112	; 0x70
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800228c:	2300      	movs	r3, #0
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002290:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002294:	220c      	movs	r2, #12
 8002296:	4619      	mov	r1, r3
 8002298:	481a      	ldr	r0, [pc, #104]	; (8002304 <MX_TIM1_Init+0x170>)
 800229a:	f006 f8a9 	bl	80083f0 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80022a4:	f000 f988 	bl	80025b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80022b4:	2364      	movs	r3, #100	; 0x64
 80022b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4807      	ldr	r0, [pc, #28]	; (8002304 <MX_TIM1_Init+0x170>)
 80022e6:	f007 f839 	bl	800935c <HAL_TIMEx_ConfigBreakDeadTime>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80022f0:	f000 f962 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <MX_TIM1_Init+0x170>)
 80022f6:	f000 fb93 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 80022fa:	bf00      	nop
 80022fc:	3760      	adds	r7, #96	; 0x60
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000318 	.word	0x20000318
 8002308:	40012c00 	.word	0x40012c00

0800230c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <MX_TIM2_Init+0xd0>)
 800232c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <MX_TIM2_Init+0xd0>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b28      	ldr	r3, [pc, #160]	; (80023dc <MX_TIM2_Init+0xd0>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800233e:	4b27      	ldr	r3, [pc, #156]	; (80023dc <MX_TIM2_Init+0xd0>)
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <MX_TIM2_Init+0xd0>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <MX_TIM2_Init+0xd0>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002352:	4822      	ldr	r0, [pc, #136]	; (80023dc <MX_TIM2_Init+0xd0>)
 8002354:	f005 fe08 	bl	8007f68 <HAL_TIM_IC_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800235e:	f000 f92b 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	481a      	ldr	r0, [pc, #104]	; (80023dc <MX_TIM2_Init+0xd0>)
 8002372:	f006 ff5d 	bl	8009230 <HAL_TIMEx_MasterConfigSynchronization>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800237c:	f000 f91c 	bl	80025b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002380:	2300      	movs	r3, #0
 8002382:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002384:	2301      	movs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	4619      	mov	r1, r3
 8002396:	4811      	ldr	r0, [pc, #68]	; (80023dc <MX_TIM2_Init+0xd0>)
 8002398:	f005 ff8e 	bl	80082b8 <HAL_TIM_IC_ConfigChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80023a2:	f000 f909 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2204      	movs	r2, #4
 80023aa:	4619      	mov	r1, r3
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <MX_TIM2_Init+0xd0>)
 80023ae:	f005 ff83 	bl	80082b8 <HAL_TIM_IC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80023b8:	f000 f8fe 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2208      	movs	r2, #8
 80023c0:	4619      	mov	r1, r3
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <MX_TIM2_Init+0xd0>)
 80023c4:	f005 ff78 	bl	80082b8 <HAL_TIM_IC_ConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80023ce:	f000 f8f3 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000364 	.word	0x20000364

080023e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_TIM7_Init+0x64>)
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <MX_TIM7_Init+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_TIM7_Init+0x64>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_TIM7_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <MX_TIM7_Init+0x64>)
 8002404:	f241 3287 	movw	r2, #4999	; 0x1387
 8002408:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_TIM7_Init+0x64>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002410:	480c      	ldr	r0, [pc, #48]	; (8002444 <MX_TIM7_Init+0x64>)
 8002412:	f005 faff 	bl	8007a14 <HAL_TIM_Base_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800241c:	f000 f8cc 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002420:	2320      	movs	r3, #32
 8002422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_TIM7_Init+0x64>)
 800242e:	f006 feff 	bl	8009230 <HAL_TIMEx_MasterConfigSynchronization>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002438:	f000 f8be 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200003b0 	.word	0x200003b0
 8002448:	40001400 	.word	0x40001400

0800244c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_DMA_Init+0x60>)
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <MX_DMA_Init+0x60>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6493      	str	r3, [r2, #72]	; 0x48
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_DMA_Init+0x60>)
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_DMA_Init+0x60>)
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <MX_DMA_Init+0x60>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6493      	str	r3, [r2, #72]	; 0x48
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_DMA_Init+0x60>)
 8002478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	200b      	movs	r0, #11
 8002488:	f003 fbb3 	bl	8005bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800248c:	200b      	movs	r0, #11
 800248e:	f003 fbca 	bl	8005c26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	200c      	movs	r0, #12
 8002498:	f003 fbab 	bl	8005bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800249c:	200c      	movs	r0, #12
 800249e:	f003 fbc2 	bl	8005c26 <HAL_NVIC_EnableIRQ>

}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000

080024b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024de:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a33      	ldr	r2, [pc, #204]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024e4:	f043 0320 	orr.w	r3, r3, #32
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <MX_GPIO_Init+0x100>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <MX_GPIO_Init+0x100>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <MX_GPIO_Init+0x100>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <MX_GPIO_Init+0x100>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <MX_GPIO_Init+0x100>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	2120      	movs	r1, #32
 800252a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252e:	f004 f9e5 	bl	80068fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002538:	481e      	ldr	r0, [pc, #120]	; (80025b4 <MX_GPIO_Init+0x104>)
 800253a:	f004 f9df 	bl	80068fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800253e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002544:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	4817      	ldr	r0, [pc, #92]	; (80025b4 <MX_GPIO_Init+0x104>)
 8002556:	f004 f837 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800255a:	2320      	movs	r3, #32
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002574:	f004 f828 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8002578:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	2301      	movs	r3, #1
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4808      	ldr	r0, [pc, #32]	; (80025b4 <MX_GPIO_Init+0x104>)
 8002592:	f004 f819 	bl	80065c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2028      	movs	r0, #40	; 0x28
 800259c:	f003 fb29 	bl	8005bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025a0:	2028      	movs	r0, #40	; 0x28
 80025a2:	f003 fb40 	bl	8005c26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	48000800 	.word	0x48000800

080025b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025bc:	b672      	cpsid	i
}
 80025be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <Error_Handler+0x8>
	...

080025c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_MspInit+0x44>)
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_MspInit+0x44>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6613      	str	r3, [r2, #96]	; 0x60
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_MspInit+0x44>)
 80025d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_MspInit+0x44>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_MspInit+0x44>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_MspInit+0x44>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025fa:	f004 fa79 	bl	8006af0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0a0      	sub	sp, #128	; 0x80
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002624:	f107 0318 	add.w	r3, r7, #24
 8002628:	2254      	movs	r2, #84	; 0x54
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f007 fd9b 	bl	800a168 <memset>
  if(hadc->Instance==ADC1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263a:	d17f      	bne.n	800273c <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800263c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002640:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002642:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002646:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002648:	f107 0318 	add.w	r3, r7, #24
 800264c:	4618      	mov	r0, r3
 800264e:	f004 ff93 	bl	8007578 <HAL_RCCEx_PeriphCLKConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002658:	f7ff ffae 	bl	80025b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_ADC_MspInit+0x138>)
 800265e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002660:	4a38      	ldr	r2, [pc, #224]	; (8002744 <HAL_ADC_MspInit+0x138>)
 8002662:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_ADC_MspInit+0x138>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_ADC_MspInit+0x138>)
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	4a32      	ldr	r2, [pc, #200]	; (8002744 <HAL_ADC_MspInit+0x138>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_ADC_MspInit+0x138>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_ADC_MspInit+0x138>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	4a2c      	ldr	r2, [pc, #176]	; (8002744 <HAL_ADC_MspInit+0x138>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_ADC_MspInit+0x138>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026a4:	2307      	movs	r3, #7
 80026a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a8:	2303      	movs	r3, #3
 80026aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026b4:	4619      	mov	r1, r3
 80026b6:	4824      	ldr	r0, [pc, #144]	; (8002748 <HAL_ADC_MspInit+0x13c>)
 80026b8:	f003 ff86 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026bc:	2303      	movs	r3, #3
 80026be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c0:	2303      	movs	r3, #3
 80026c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d2:	f003 ff79 	bl	80065c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_ADC_MspInit+0x140>)
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_ADC_MspInit+0x144>)
 80026da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_ADC_MspInit+0x140>)
 80026de:	2205      	movs	r2, #5
 80026e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_ADC_MspInit+0x140>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_ADC_MspInit+0x140>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_ADC_MspInit+0x140>)
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_ADC_MspInit+0x140>)
 80026f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_ADC_MspInit+0x140>)
 80026fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002702:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_ADC_MspInit+0x140>)
 8002706:	2220      	movs	r2, #32
 8002708:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_ADC_MspInit+0x140>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002710:	480e      	ldr	r0, [pc, #56]	; (800274c <HAL_ADC_MspInit+0x140>)
 8002712:	f003 fce7 	bl	80060e4 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 800271c:	f7ff ff4c 	bl	80025b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_ADC_MspInit+0x140>)
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_ADC_MspInit+0x140>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	2012      	movs	r0, #18
 8002732:	f003 fa5e 	bl	8005bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002736:	2012      	movs	r0, #18
 8002738:	f003 fa75 	bl	8005c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3780      	adds	r7, #128	; 0x80
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	48000800 	.word	0x48000800
 800274c:	200001b4 	.word	0x200001b4
 8002750:	40020008 	.word	0x40020008

08002754 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <HAL_DAC_MspInit+0xcc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d14f      	bne.n	8002816 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_DAC_MspInit+0xd0>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_DAC_MspInit+0xd0>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_DAC_MspInit+0xd0>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278e:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_DAC_MspInit+0xd0>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a24      	ldr	r2, [pc, #144]	; (8002824 <HAL_DAC_MspInit+0xd0>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_DAC_MspInit+0xd0>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027a6:	2310      	movs	r3, #16
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027aa:	2303      	movs	r3, #3
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027bc:	f003 ff04 	bl	80065c8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_DAC_MspInit+0xd8>)
 80027c4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027c8:	2206      	movs	r2, #6
 80027ca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027ce:	2210      	movs	r2, #16
 80027d0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027f0:	2220      	movs	r2, #32
 80027f2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80027fa:	480b      	ldr	r0, [pc, #44]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 80027fc:	f003 fc72 	bl	80060e4 <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002806:	f7ff fed7 	bl	80025b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	4a05      	ldr	r2, [pc, #20]	; (8002828 <HAL_DAC_MspInit+0xd4>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	50000800 	.word	0x50000800
 8002824:	40021000 	.word	0x40021000
 8002828:	20000228 	.word	0x20000228
 800282c:	4002001c 	.word	0x4002001c

08002830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b09e      	sub	sp, #120	; 0x78
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	2254      	movs	r2, #84	; 0x54
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f007 fc89 	bl	800a168 <memset>
  if(huart->Instance==LPUART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_UART_MspInit+0xa8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d136      	bne.n	80028ce <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002860:	2320      	movs	r3, #32
 8002862:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fe83 	bl	8007578 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002878:	f7ff fe9e 	bl	80025b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_UART_MspInit+0xac>)
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	4a16      	ldr	r2, [pc, #88]	; (80028dc <HAL_UART_MspInit+0xac>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_UART_MspInit+0xac>)
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_UART_MspInit+0xac>)
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_UART_MspInit+0xac>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_UART_MspInit+0xac>)
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80028ac:	230c      	movs	r3, #12
 80028ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80028bc:	230c      	movs	r3, #12
 80028be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ca:	f003 fe7d 	bl	80065c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3778      	adds	r7, #120	; 0x78
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40008000 	.word	0x40008000
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <HAL_TIM_PWM_MspInit+0x38>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10b      	bne.n	800290a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_TIM_PWM_MspInit+0x3c>)
 80028f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <HAL_TIM_PWM_MspInit+0x3c>)
 80028f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028fc:	6613      	str	r3, [r2, #96]	; 0x60
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <HAL_TIM_PWM_MspInit+0x3c>)
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d146      	bne.n	80029d0 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_TIM_IC_MspInit+0xb8>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 800298a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	480d      	ldr	r0, [pc, #52]	; (80029dc <HAL_TIM_IC_MspInit+0xbc>)
 80029a8:	f003 fe0e 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 80029ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029be:	2301      	movs	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029cc:	f003 fdfc 	bl	80065c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	48000400 	.word	0x48000400

080029e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_TIM_Base_MspInit+0x38>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10b      	bne.n	8002a0a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_TIM_Base_MspInit+0x3c>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_TIM_Base_MspInit+0x3c>)
 80029f8:	f043 0320 	orr.w	r3, r3, #32
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_TIM_Base_MspInit+0x3c>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40001400 	.word	0x40001400
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2e      	ldr	r2, [pc, #184]	; (8002af8 <HAL_TIM_MspPostInit+0xd8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d155      	bne.n	8002aee <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b28      	ldr	r3, [pc, #160]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a66:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	4a21      	ldr	r2, [pc, #132]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_TIM_MspPostInit+0xdc>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4816      	ldr	r0, [pc, #88]	; (8002b00 <HAL_TIM_MspPostInit+0xe0>)
 8002aa6:	f003 fd8f 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002aaa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002abc:	2306      	movs	r3, #6
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aca:	f003 fd7d 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ade:	2306      	movs	r3, #6
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4806      	ldr	r0, [pc, #24]	; (8002b04 <HAL_TIM_MspPostInit+0xe4>)
 8002aea:	f003 fd6d 	bl	80065c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	48000800 	.word	0x48000800
 8002b04:	48000400 	.word	0x48000400

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 f9b0 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Channel1_IRQHandler+0x10>)
 8002b62:	f003 fbe2 	bl	800632a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200001b4 	.word	0x200001b4

08002b70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <DMA1_Channel2_IRQHandler+0x10>)
 8002b76:	f003 fbd8 	bl	800632a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000228 	.word	0x20000228

08002b84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <ADC1_2_IRQHandler+0x1c4>)
 8002b8c:	61bb      	str	r3, [r7, #24]
	float Idq_ref[2];
	uint8_t leadAngleModeFlg;
	uint8_t flgFB;
  int8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b8e:	486f      	ldr	r0, [pc, #444]	; (8002d4c <ADC1_2_IRQHandler+0x1c8>)
 8002b90:	f000 feac 	bl	80038ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b94:	2120      	movs	r1, #32
 8002b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b9a:	f003 fec7 	bl	800692c <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 8002b9e:	f7fe f8d1 	bl	8000d44 <readButton1>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <ADC1_2_IRQHandler+0x1cc>)
 8002ba8:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 8002baa:	f7fe f933 	bl	8000e14 <readVolume>
 8002bae:	eef0 7a40 	vmov.f32	s15, s0
 8002bb2:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <ADC1_2_IRQHandler+0x1d0>)
 8002bb4:	edc3 7a00 	vstr	s15, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 8002bb8:	4967      	ldr	r1, [pc, #412]	; (8002d58 <ADC1_2_IRQHandler+0x1d4>)
 8002bba:	4868      	ldr	r0, [pc, #416]	; (8002d5c <ADC1_2_IRQHandler+0x1d8>)
 8002bbc:	f7fe f978 	bl	8000eb0 <readCurrent>
	gVdc = readVdc();
 8002bc0:	f7fe f954 	bl	8000e6c <readVdc>
 8002bc4:	eef0 7a40 	vmov.f32	s15, s0
 8002bc8:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <ADC1_2_IRQHandler+0x1dc>)
 8002bca:	edc3 7a00 	vstr	s15, [r3]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 8002bce:	4b64      	ldr	r3, [pc, #400]	; (8002d60 <ADC1_2_IRQHandler+0x1dc>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002bd8:	eef0 0a67 	vmov.f32	s1, s15
 8002bdc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002be0:	f7fe f801 	bl	8000be6 <gfDivideAvoidZero>
 8002be4:	eef0 7a40 	vmov.f32	s15, s0
 8002be8:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <ADC1_2_IRQHandler+0x1e0>)
 8002bea:	edc3 7a00 	vstr	s15, [r3]

	//DutyRef Calculation
	//if ( gButton1 == 1 )
	  rotDir = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
	//else
	//  rotDir = -1;


	  Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
	  Idq_ref[1] = 10.0f * gVolume;
 8002bf8:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <ADC1_2_IRQHandler+0x1d0>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c06:	edc7 7a02 	vstr	s15, [r7, #8]
	ErectFreqErr = ErectFreqRef - gElectFreq;
	gDutyRef += ErectFreqErr * 0.0000001f;
	*/

	// Sequence Control
	if(gInitCnt < 500){
 8002c0a:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <ADC1_2_IRQHandler+0x1e4>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c12:	d210      	bcs.n	8002c36 <ADC1_2_IRQHandler+0xb2>
		gInitCnt++;
 8002c14:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <ADC1_2_IRQHandler+0x1e4>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <ADC1_2_IRQHandler+0x1e4>)
 8002c1e:	801a      	strh	r2, [r3, #0]
		gPosMode = POSMODE_HALL;
 8002c20:	4b52      	ldr	r3, [pc, #328]	; (8002d6c <ADC1_2_IRQHandler+0x1e8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OFF;
 8002c26:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <ADC1_2_IRQHandler+0x1ec>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	77bb      	strb	r3, [r7, #30]
 8002c34:	e033      	b.n	8002c9e <ADC1_2_IRQHandler+0x11a>
	}
	else if (gElectFreq < 10.0f){
 8002c36:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <ADC1_2_IRQHandler+0x1f0>)
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	d50a      	bpl.n	8002c60 <ADC1_2_IRQHandler+0xdc>
		gPosMode = POSMODE_HALL;
 8002c4a:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <ADC1_2_IRQHandler+0x1e8>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OPENLOOP;
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <ADC1_2_IRQHandler+0x1ec>)
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	77bb      	strb	r3, [r7, #30]
 8002c5e:	e01e      	b.n	8002c9e <ADC1_2_IRQHandler+0x11a>
	}
	else if(gElectFreq < 40.0f){
 8002c60:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <ADC1_2_IRQHandler+0x1f0>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002d78 <ADC1_2_IRQHandler+0x1f4>
 8002c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	d50a      	bpl.n	8002c8a <ADC1_2_IRQHandler+0x106>
		gPosMode = POSMODE_HALL_PLL;
 8002c74:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <ADC1_2_IRQHandler+0x1e8>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OPENLOOP;
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <ADC1_2_IRQHandler+0x1ec>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77bb      	strb	r3, [r7, #30]
 8002c88:	e009      	b.n	8002c9e <ADC1_2_IRQHandler+0x11a>
	}
	else{
		gPosMode = POSMODE_HALL_PLL;
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <ADC1_2_IRQHandler+0x1e8>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_VECTORCONTROL;
 8002c90:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <ADC1_2_IRQHandler+0x1ec>)
 8002c92:	2203      	movs	r2, #3
 8002c94:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	77fb      	strb	r3, [r7, #31]
		flgFB = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	77bb      	strb	r3, [r7, #30]
	}

	// MotorDrive
	if(gDrvMode == DRVMODE_OFF){
 8002c9e:	4b34      	ldr	r3, [pc, #208]	; (8002d70 <ADC1_2_IRQHandler+0x1ec>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d112      	bne.n	8002ccc <ADC1_2_IRQHandler+0x148>
		outputMode[0] = OUTPUTMODE_OPEN;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	703b      	strb	r3, [r7, #0]
		outputMode[1] = OUTPUTMODE_OPEN;
 8002caa:	2300      	movs	r3, #0
 8002cac:	707b      	strb	r3, [r7, #1]
		outputMode[2] = OUTPUTMODE_OPEN;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	70bb      	strb	r3, [r7, #2]
		gDuty[0] = 0.0f;
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <ADC1_2_IRQHandler+0x1f8>)
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
		gDuty[1] = 0.0f;
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <ADC1_2_IRQHandler+0x1f8>)
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
		gDuty[2] = 0.0f;
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <ADC1_2_IRQHandler+0x1f8>)
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	e02c      	b.n	8002d26 <ADC1_2_IRQHandler+0x1a2>

	}
	else{
		gDutyRef = 0.0f;
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <ADC1_2_IRQHandler+0x1fc>)
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
		//sixStepTasks(gDutyRef, leadAngleModeFlg, 0.0f, &theta_tmp, &electAngVelo_tmp, gDuty, outputMode);
		calcElectAngle(leadAngleModeFlg, &voltageMode_tmp, &theta_tmp, &electAngVelo_tmp);
 8002cd4:	f107 0316 	add.w	r3, r7, #22
 8002cd8:	b2d9      	uxtb	r1, r3
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	f107 0210 	add.w	r2, r7, #16
 8002ce2:	7ff8      	ldrb	r0, [r7, #31]
 8002ce4:	f7fe fa14 	bl	8001110 <calcElectAngle>
		gTheta = theta_tmp;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <ADC1_2_IRQHandler+0x200>)
 8002cec:	6013      	str	r3, [r2, #0]

		//write IO signals
		//gTheta = gTheta + 2000.0f * gVolume * CARRIERCYCLE;
		//gTheta = gfWrapTheta(gTheta);

		VectorControlTasks(Idq_ref, gTheta, gElectAngVelo, gIuvw, gVdc, gTwoDivVdc, flgFB, gDuty, outputMode);
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <ADC1_2_IRQHandler+0x200>)
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <ADC1_2_IRQHandler+0x204>)
 8002cf6:	ed93 7a00 	vldr	s14, [r3]
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <ADC1_2_IRQHandler+0x1dc>)
 8002cfc:	edd3 6a00 	vldr	s13, [r3]
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <ADC1_2_IRQHandler+0x1e0>)
 8002d02:	ed93 6a00 	vldr	s12, [r3]
 8002d06:	7fba      	ldrb	r2, [r7, #30]
 8002d08:	1d38      	adds	r0, r7, #4
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <ADC1_2_IRQHandler+0x1f8>)
 8002d10:	eef0 1a46 	vmov.f32	s3, s12
 8002d14:	eeb0 1a66 	vmov.f32	s2, s13
 8002d18:	490f      	ldr	r1, [pc, #60]	; (8002d58 <ADC1_2_IRQHandler+0x1d4>)
 8002d1a:	eef0 0a47 	vmov.f32	s1, s14
 8002d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d22:	f7fe fc23 	bl	800156c <VectorControlTasks>
		//OpenLoopTasks(0.5f, gTheta, gIuvw, gTwoDivVdc, gDuty, outputMode);
	}

	writeOutputMode(outputMode);
 8002d26:	463b      	mov	r3, r7
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe f96d 	bl	8001008 <writeOutputMode>
	writeDuty(gDuty);
 8002d2e:	4813      	ldr	r0, [pc, #76]	; (8002d7c <ADC1_2_IRQHandler+0x1f8>)
 8002d30:	f7fe f9ac 	bl	800108c <writeDuty>
	//else

//
//VectorControlTasks(Idq_ref, gTheta, gIuvw, gVdc, gDuty);

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002d34:	2120      	movs	r1, #32
 8002d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3a:	f003 fdf7 	bl	800692c <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	42c80000 	.word	0x42c80000
 8002d4c:	20000148 	.word	0x20000148
 8002d50:	20000093 	.word	0x20000093
 8002d54:	200000b0 	.word	0x200000b0
 8002d58:	200000b4 	.word	0x200000b4
 8002d5c:	200000c0 	.word	0x200000c0
 8002d60:	200000a8 	.word	0x200000a8
 8002d64:	200000ac 	.word	0x200000ac
 8002d68:	200000da 	.word	0x200000da
 8002d6c:	200000d8 	.word	0x200000d8
 8002d70:	200000d9 	.word	0x200000d9
 8002d74:	2000009c 	.word	0x2000009c
 8002d78:	42200000 	.word	0x42200000
 8002d7c:	200000cc 	.word	0x200000cc
 8002d80:	200000c8 	.word	0x200000c8
 8002d84:	200000a0 	.word	0x200000a0
 8002d88:	200000a4 	.word	0x200000a4

08002d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d94:	f003 fde4 	bl	8006960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <SystemInit+0x20>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <SystemInit+0x20>)
 8002da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dc0:	480d      	ldr	r0, [pc, #52]	; (8002df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc4:	480d      	ldr	r0, [pc, #52]	; (8002dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8002dc6:	490e      	ldr	r1, [pc, #56]	; (8002e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dc8:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <LoopForever+0xe>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002dcc:	e002      	b.n	8002dd4 <LoopCopyDataInit>

08002dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd2:	3304      	adds	r3, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd8:	d3f9      	bcc.n	8002dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ddc:	4c0b      	ldr	r4, [pc, #44]	; (8002e0c <LoopForever+0x16>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de0:	e001      	b.n	8002de6 <LoopFillZerobss>

08002de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de4:	3204      	adds	r2, #4

08002de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de8:	d3fb      	bcc.n	8002de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dea:	f7ff ffd7 	bl	8002d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dee:	f007 f997 	bl	800a120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002df2:	f7fe ff97 	bl	8001d24 <main>

08002df6 <LoopForever>:

LoopForever:
    b LoopForever
 8002df6:	e7fe      	b.n	8002df6 <LoopForever>
  ldr   r0, =_estack
 8002df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e04:	0800b5a4 	.word	0x0800b5a4
  ldr r2, =_sbss
 8002e08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e0c:	20000400 	.word	0x20000400

08002e10 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <ADC3_IRQHandler>

08002e12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	f002 fedd 	bl	8005bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e22:	2000      	movs	r0, #0
 8002e24:	f000 f80e 	bl	8002e44 <HAL_InitTick>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	71fb      	strb	r3, [r7, #7]
 8002e32:	e001      	b.n	8002e38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e34:	f7ff fbc6 	bl	80025c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e38:	79fb      	ldrb	r3, [r7, #7]

}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_InitTick+0x68>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d022      	beq.n	8002e9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_InitTick+0x6c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_InitTick+0x68>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fee8 	bl	8005c42 <HAL_SYSTICK_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10f      	bne.n	8002e98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	d809      	bhi.n	8002e92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	f002 feb4 	bl	8005bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <HAL_InitTick+0x70>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e007      	b.n	8002ea2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e004      	b.n	8002ea2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e001      	b.n	8002ea2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000008 	.word	0x20000008
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_IncTick+0x1c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_IncTick+0x20>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_IncTick+0x1c>)
 8002ec8:	6013      	str	r3, [r2, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	200003fc 	.word	0x200003fc
 8002ed8:	20000008 	.word	0x20000008

08002edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_GetTick+0x14>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200003fc 	.word	0x200003fc

08002ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff ffee 	bl	8002edc <HAL_GetTick>
 8002f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d004      	beq.n	8002f18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_Delay+0x40>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f18:	bf00      	nop
 8002f1a:	f7ff ffdf 	bl	8002edc <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d8f7      	bhi.n	8002f1a <HAL_Delay+0x26>
  {
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000008 	.word	0x20000008

08002f38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3360      	adds	r3, #96	; 0x60
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <LL_ADC_SetOffset+0x44>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	03fff000 	.word	0x03fff000

08002fe8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3360      	adds	r3, #96	; 0x60
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3360      	adds	r3, #96	; 0x60
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	431a      	orrs	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800304a:	b480      	push	{r7}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3360      	adds	r3, #96	; 0x60
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	431a      	orrs	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003074:	bf00      	nop
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3360      	adds	r3, #96	; 0x60
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	615a      	str	r2, [r3, #20]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003102:	b480      	push	{r7}
 8003104:	b087      	sub	sp, #28
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3330      	adds	r3, #48	; 0x30
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	4413      	add	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	211f      	movs	r1, #31
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	401a      	ands	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	f003 011f 	and.w	r1, r3, #31
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3314      	adds	r3, #20
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0e5b      	lsrs	r3, r3, #25
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0d1b      	lsrs	r3, r3, #20
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2107      	movs	r1, #7
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	401a      	ands	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	431a      	orrs	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d10a      	bne.n	8003202 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003200:	e00a      	b.n	8003218 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	407f0000 	.word	0x407f0000

08003228 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 031f 	and.w	r3, r3, #31
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6093      	str	r3, [r2, #8]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003298:	d101      	bne.n	800329e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80032bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032e8:	d101      	bne.n	80032ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800330c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <LL_ADC_IsEnabled+0x18>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <LL_ADC_IsEnabled+0x1a>
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800335a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b04      	cmp	r3, #4
 8003384:	d101      	bne.n	800338a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d101      	bne.n	80033b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1af      	b.n	800373a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff f90f 	bl	800260c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff3f 	bl	8003284 <LL_ADC_IsDeepPowerDownEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff25 	bl	8003260 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff5a 	bl	80032d4 <LL_ADC_IsInternalRegulatorEnabled>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d115      	bne.n	8003452 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff3e 	bl	80032ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003430:	4b9f      	ldr	r3, [pc, #636]	; (80036b0 <HAL_ADC_Init+0x2f0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	4a9f      	ldr	r2, [pc, #636]	; (80036b4 <HAL_ADC_Init+0x2f4>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	3301      	adds	r3, #1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003444:	e002      	b.n	800344c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3b01      	subs	r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f9      	bne.n	8003446 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff3c 	bl	80032d4 <LL_ADC_IsInternalRegulatorEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff75 	bl	8003372 <LL_ADC_REG_IsConversionOngoing>
 8003488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8148 	bne.w	8003728 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 8144 	bne.w	8003728 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034a8:	f043 0202 	orr.w	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff35 	bl	8003324 <LL_ADC_IsEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d141      	bne.n	8003544 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c8:	d004      	beq.n	80034d4 <HAL_ADC_Init+0x114>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7a      	ldr	r2, [pc, #488]	; (80036b8 <HAL_ADC_Init+0x2f8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10f      	bne.n	80034f4 <HAL_ADC_Init+0x134>
 80034d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034d8:	f7ff ff24 	bl	8003324 <LL_ADC_IsEnabled>
 80034dc:	4604      	mov	r4, r0
 80034de:	4876      	ldr	r0, [pc, #472]	; (80036b8 <HAL_ADC_Init+0x2f8>)
 80034e0:	f7ff ff20 	bl	8003324 <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4323      	orrs	r3, r4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e012      	b.n	800351a <HAL_ADC_Init+0x15a>
 80034f4:	4871      	ldr	r0, [pc, #452]	; (80036bc <HAL_ADC_Init+0x2fc>)
 80034f6:	f7ff ff15 	bl	8003324 <LL_ADC_IsEnabled>
 80034fa:	4604      	mov	r4, r0
 80034fc:	4870      	ldr	r0, [pc, #448]	; (80036c0 <HAL_ADC_Init+0x300>)
 80034fe:	f7ff ff11 	bl	8003324 <LL_ADC_IsEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	431c      	orrs	r4, r3
 8003506:	486f      	ldr	r0, [pc, #444]	; (80036c4 <HAL_ADC_Init+0x304>)
 8003508:	f7ff ff0c 	bl	8003324 <LL_ADC_IsEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	4323      	orrs	r3, r4
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003526:	d004      	beq.n	8003532 <HAL_ADC_Init+0x172>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a62      	ldr	r2, [pc, #392]	; (80036b8 <HAL_ADC_Init+0x2f8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_ADC_Init+0x176>
 8003532:	4a65      	ldr	r2, [pc, #404]	; (80036c8 <HAL_ADC_Init+0x308>)
 8003534:	e000      	b.n	8003538 <HAL_ADC_Init+0x178>
 8003536:	4a65      	ldr	r2, [pc, #404]	; (80036cc <HAL_ADC_Init+0x30c>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7ff fcfa 	bl	8002f38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7f5b      	ldrb	r3, [r3, #29]
 8003548:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800354e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003554:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800355a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003562:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800356e:	2b01      	cmp	r3, #1
 8003570:	d106      	bne.n	8003580 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	045b      	lsls	r3, r3, #17
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_ADC_Init+0x310>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fed1 	bl	8003372 <LL_ADC_REG_IsConversionOngoing>
 80035d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fede 	bl	8003398 <LL_ADC_INJ_IsConversionOngoing>
 80035dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d17f      	bne.n	80036e4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d17c      	bne.n	80036e4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003606:	f023 0302 	bic.w	r3, r3, #2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	430b      	orrs	r3, r1
 8003612:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800362a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003634:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6911      	ldr	r1, [r2, #16]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800364a:	e013      	b.n	8003674 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800365a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800366c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003670:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367a:	2b01      	cmp	r3, #1
 800367c:	d12a      	bne.n	80036d4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003694:	4311      	orrs	r1, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a0:	430a      	orrs	r2, r1
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	611a      	str	r2, [r3, #16]
 80036ae:	e019      	b.n	80036e4 <HAL_ADC_Init+0x324>
 80036b0:	20000000 	.word	0x20000000
 80036b4:	053e2d63 	.word	0x053e2d63
 80036b8:	50000100 	.word	0x50000100
 80036bc:	50000400 	.word	0x50000400
 80036c0:	50000500 	.word	0x50000500
 80036c4:	50000600 	.word	0x50000600
 80036c8:	50000300 	.word	0x50000300
 80036cc:	50000700 	.word	0x50000700
 80036d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10c      	bne.n	8003706 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f023 010f 	bic.w	r1, r3, #15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
 8003704:	e007      	b.n	8003716 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 020f 	bic.w	r2, r2, #15
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	65da      	str	r2, [r3, #92]	; 0x5c
 8003726:	e007      	b.n	8003738 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	f043 0210 	orr.w	r2, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003738:	7ffb      	ldrb	r3, [r7, #31]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	bf00      	nop

08003744 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003758:	d004      	beq.n	8003764 <HAL_ADC_Start_DMA+0x20>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a5a      	ldr	r2, [pc, #360]	; (80038c8 <HAL_ADC_Start_DMA+0x184>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_ADC_Start_DMA+0x24>
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_ADC_Start_DMA+0x188>)
 8003766:	e000      	b.n	800376a <HAL_ADC_Start_DMA+0x26>
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_ADC_Start_DMA+0x18c>)
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fd5c 	bl	8003228 <LL_ADC_GetMultimode>
 8003770:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fdfb 	bl	8003372 <LL_ADC_REG_IsConversionOngoing>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 809b 	bne.w	80038ba <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_ADC_Start_DMA+0x4e>
 800378e:	2302      	movs	r3, #2
 8003790:	e096      	b.n	80038c0 <HAL_ADC_Start_DMA+0x17c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4d      	ldr	r2, [pc, #308]	; (80038d4 <HAL_ADC_Start_DMA+0x190>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d008      	beq.n	80037b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d002      	beq.n	80037b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d17a      	bne.n	80038ac <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 ff60 	bl	800467c <ADC_Enable>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d16d      	bne.n	80038a2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3a      	ldr	r2, [pc, #232]	; (80038c8 <HAL_ADC_Start_DMA+0x184>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_ADC_Start_DMA+0xb4>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <HAL_ADC_Start_DMA+0x194>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d002      	beq.n	80037f4 <HAL_ADC_Start_DMA+0xb0>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	e003      	b.n	80037fc <HAL_ADC_Start_DMA+0xb8>
 80037f4:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_ADC_Start_DMA+0x198>)
 80037f6:	e001      	b.n	80037fc <HAL_ADC_Start_DMA+0xb8>
 80037f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4293      	cmp	r3, r2
 8003802:	d002      	beq.n	800380a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	f023 0206 	bic.w	r2, r3, #6
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	661a      	str	r2, [r3, #96]	; 0x60
 800382e:	e002      	b.n	8003836 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <HAL_ADC_Start_DMA+0x19c>)
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <HAL_ADC_Start_DMA+0x1a0>)
 8003844:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_ADC_Start_DMA+0x1a4>)
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	221c      	movs	r2, #28
 8003854:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0210 	orr.w	r2, r2, #16
 800386c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3340      	adds	r3, #64	; 0x40
 8003888:	4619      	mov	r1, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f002 fcd1 	bl	8006234 <HAL_DMA_Start_IT>
 8003892:	4603      	mov	r3, r0
 8003894:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fd55 	bl	800334a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80038a0:	e00d      	b.n	80038be <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80038aa:	e008      	b.n	80038be <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80038b8:	e001      	b.n	80038be <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	50000100 	.word	0x50000100
 80038cc:	50000300 	.word	0x50000300
 80038d0:	50000700 	.word	0x50000700
 80038d4:	50000600 	.word	0x50000600
 80038d8:	50000500 	.word	0x50000500
 80038dc:	50000400 	.word	0x50000400
 80038e0:	08004741 	.word	0x08004741
 80038e4:	08004819 	.word	0x08004819
 80038e8:	08004835 	.word	0x08004835

080038ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038f4:	2300      	movs	r3, #0
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003910:	d004      	beq.n	800391c <HAL_ADC_IRQHandler+0x30>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a8e      	ldr	r2, [pc, #568]	; (8003b50 <HAL_ADC_IRQHandler+0x264>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_ADC_IRQHandler+0x34>
 800391c:	4b8d      	ldr	r3, [pc, #564]	; (8003b54 <HAL_ADC_IRQHandler+0x268>)
 800391e:	e000      	b.n	8003922 <HAL_ADC_IRQHandler+0x36>
 8003920:	4b8d      	ldr	r3, [pc, #564]	; (8003b58 <HAL_ADC_IRQHandler+0x26c>)
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fc80 	bl	8003228 <LL_ADC_GetMultimode>
 8003928:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d017      	beq.n	8003964 <HAL_ADC_IRQHandler+0x78>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d012      	beq.n	8003964 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f001 fa32 	bl	8004dc0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2202      	movs	r2, #2
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_ADC_IRQHandler+0x8c>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8094 	beq.w	8003aac <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 808e 	beq.w	8003aac <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fb95 	bl	80030dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d072      	beq.n	8003a9e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a64      	ldr	r2, [pc, #400]	; (8003b50 <HAL_ADC_IRQHandler+0x264>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_ADC_IRQHandler+0xea>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_ADC_IRQHandler+0x270>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d002      	beq.n	80039d2 <HAL_ADC_IRQHandler+0xe6>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	e003      	b.n	80039da <HAL_ADC_IRQHandler+0xee>
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_ADC_IRQHandler+0x274>)
 80039d4:	e001      	b.n	80039da <HAL_ADC_IRQHandler+0xee>
 80039d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	4293      	cmp	r3, r2
 80039e0:	d008      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d002      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b09      	cmp	r3, #9
 80039f2:	d104      	bne.n	80039fe <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	e014      	b.n	8003a28 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a53      	ldr	r2, [pc, #332]	; (8003b50 <HAL_ADC_IRQHandler+0x264>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x130>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a53      	ldr	r2, [pc, #332]	; (8003b5c <HAL_ADC_IRQHandler+0x270>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d002      	beq.n	8003a18 <HAL_ADC_IRQHandler+0x12c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	e003      	b.n	8003a20 <HAL_ADC_IRQHandler+0x134>
 8003a18:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <HAL_ADC_IRQHandler+0x274>)
 8003a1a:	e001      	b.n	8003a20 <HAL_ADC_IRQHandler+0x134>
 8003a1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a20:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d135      	bne.n	8003a9e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d12e      	bne.n	8003a9e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fc94 	bl	8003372 <LL_ADC_REG_IsConversionOngoing>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11a      	bne.n	8003a86 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 020c 	bic.w	r2, r2, #12
 8003a5e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d112      	bne.n	8003a9e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a84:	e00b      	b.n	8003a9e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	f043 0210 	orr.w	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	f043 0201 	orr.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f984 	bl	8003dac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	220c      	movs	r2, #12
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_ADC_IRQHandler+0x1d4>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80b3 	beq.w	8003c32 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80ad 	beq.w	8003c32 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fb30 	bl	800315a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003afa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff faeb 	bl	80030dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b06:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <HAL_ADC_IRQHandler+0x264>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_ADC_IRQHandler+0x23a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <HAL_ADC_IRQHandler+0x270>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d002      	beq.n	8003b22 <HAL_ADC_IRQHandler+0x236>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	e003      	b.n	8003b2a <HAL_ADC_IRQHandler+0x23e>
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_ADC_IRQHandler+0x274>)
 8003b24:	e001      	b.n	8003b2a <HAL_ADC_IRQHandler+0x23e>
 8003b26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d008      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	d002      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b07      	cmp	r3, #7
 8003b42:	d10f      	bne.n	8003b64 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	e01f      	b.n	8003b8e <HAL_ADC_IRQHandler+0x2a2>
 8003b4e:	bf00      	nop
 8003b50:	50000100 	.word	0x50000100
 8003b54:	50000300 	.word	0x50000300
 8003b58:	50000700 	.word	0x50000700
 8003b5c:	50000500 	.word	0x50000500
 8003b60:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a8b      	ldr	r2, [pc, #556]	; (8003d98 <HAL_ADC_IRQHandler+0x4ac>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_ADC_IRQHandler+0x296>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a8a      	ldr	r2, [pc, #552]	; (8003d9c <HAL_ADC_IRQHandler+0x4b0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d002      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x292>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	e003      	b.n	8003b86 <HAL_ADC_IRQHandler+0x29a>
 8003b7e:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <HAL_ADC_IRQHandler+0x4b4>)
 8003b80:	e001      	b.n	8003b86 <HAL_ADC_IRQHandler+0x29a>
 8003b82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b86:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d047      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <HAL_ADC_IRQHandler+0x2c2>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d03f      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d13a      	bne.n	8003c24 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d133      	bne.n	8003c24 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d12e      	bne.n	8003c24 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fbe4 	bl	8003398 <LL_ADC_INJ_IsConversionOngoing>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11a      	bne.n	8003c0c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d112      	bne.n	8003c24 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c0a:	e00b      	b.n	8003c24 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	f043 0210 	orr.w	r2, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f001 f8a3 	bl	8004d70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2260      	movs	r2, #96	; 0x60
 8003c30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d011      	beq.n	8003c60 <HAL_ADC_IRQHandler+0x374>
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8be 	bl	8003dd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x3a4>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f001 f889 	bl	8004d98 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d012      	beq.n	8003cc0 <HAL_ADC_IRQHandler+0x3d4>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 f87b 	bl	8004dac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d043      	beq.n	8003d52 <HAL_ADC_IRQHandler+0x466>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03e      	beq.n	8003d52 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	e021      	b.n	8003d26 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d015      	beq.n	8003d14 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf0:	d004      	beq.n	8003cfc <HAL_ADC_IRQHandler+0x410>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a28      	ldr	r2, [pc, #160]	; (8003d98 <HAL_ADC_IRQHandler+0x4ac>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_IRQHandler+0x414>
 8003cfc:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <HAL_ADC_IRQHandler+0x4b8>)
 8003cfe:	e000      	b.n	8003d02 <HAL_ADC_IRQHandler+0x416>
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <HAL_ADC_IRQHandler+0x4bc>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fa9e 	bl	8003244 <LL_ADC_GetMultiDMATransfer>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
 8003d12:	e008      	b.n	8003d26 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003d22:	2301      	movs	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10e      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3c:	f043 0202 	orr.w	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f84f 	bl	8003de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d018      	beq.n	8003d8e <HAL_ADC_IRQHandler+0x4a2>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d013      	beq.n	8003d8e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d76:	f043 0208 	orr.w	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d86:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fffb 	bl	8004d84 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d8e:	bf00      	nop
 8003d90:	3728      	adds	r7, #40	; 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	50000100 	.word	0x50000100
 8003d9c:	50000500 	.word	0x50000500
 8003da0:	50000400 	.word	0x50000400
 8003da4:	50000300 	.word	0x50000300
 8003da8:	50000700 	.word	0x50000700

08003dac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b0b6      	sub	sp, #216	; 0xd8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d102      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x24>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	f000 bc13 	b.w	8004646 <HAL_ADC_ConfigChannel+0x84a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff faa0 	bl	8003372 <LL_ADC_REG_IsConversionOngoing>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 83f3 	bne.w	8004620 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7ff f95b 	bl	8003102 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fa8e 	bl	8003372 <LL_ADC_REG_IsConversionOngoing>
 8003e56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fa9a 	bl	8003398 <LL_ADC_INJ_IsConversionOngoing>
 8003e64:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 81d9 	bne.w	8004224 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 81d4 	bne.w	8004224 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e84:	d10f      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4619      	mov	r1, r3
 8003e92:	f7ff f975 	bl	8003180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff f909 	bl	80030b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ea4:	e00e      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f7ff f964 	bl	8003180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f8f9 	bl	80030b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	08db      	lsrs	r3, r3, #3
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d022      	beq.n	8003f2c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6919      	ldr	r1, [r3, #16]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ef6:	f7ff f853 	bl	8002fa0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6919      	ldr	r1, [r3, #16]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7ff f89f 	bl	800304a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6919      	ldr	r1, [r3, #16]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	7f1b      	ldrb	r3, [r3, #28]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x126>
 8003f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f20:	e000      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x128>
 8003f22:	2300      	movs	r3, #0
 8003f24:	461a      	mov	r2, r3
 8003f26:	f7ff f8ab 	bl	8003080 <LL_ADC_SetOffsetSaturation>
 8003f2a:	e17b      	b.n	8004224 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f858 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x15c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff f84d 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	f003 021f 	and.w	r2, r3, #31
 8003f56:	e01e      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x19a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f842 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f86:	2320      	movs	r3, #32
 8003f88:	e004      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x1b2>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	0e9b      	lsrs	r3, r3, #26
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	e018      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x1e4>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	e004      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d106      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff f811 	bl	8003014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fff5 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_ADC_ConfigChannel+0x222>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe ffea 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	e01e      	b.n	800405c <HAL_ADC_ConfigChannel+0x260>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe ffdf 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800403c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800404c:	2320      	movs	r3, #32
 800404e:	e004      	b.n	800405a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x278>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	e018      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x2aa>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004088:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800408c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e004      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800409c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d106      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe ffae 	bl	8003014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe ff92 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x2e8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe ff87 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	f003 021f 	and.w	r2, r3, #31
 80040e2:	e01e      	b.n	8004122 <HAL_ADC_ConfigChannel+0x326>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe ff7c 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800410a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004112:	2320      	movs	r3, #32
 8004114:	e004      	b.n	8004120 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <HAL_ADC_ConfigChannel+0x33e>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	0e9b      	lsrs	r3, r3, #26
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	e016      	b.n	8004168 <HAL_ADC_ConfigChannel+0x36c>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800414c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800414e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800415a:	2320      	movs	r3, #32
 800415c:	e004      	b.n	8004168 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800415e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004168:	429a      	cmp	r2, r3
 800416a:	d106      	bne.n	800417a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2200      	movs	r2, #0
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe ff4d 	bl	8003014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2103      	movs	r1, #3
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe ff31 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x3aa>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2103      	movs	r1, #3
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe ff26 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	0e9b      	lsrs	r3, r3, #26
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	e017      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x3da>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2103      	movs	r1, #3
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe ff1b 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 80041b2:	4603      	mov	r3, r0
 80041b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80041be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80041c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80041c8:	2320      	movs	r3, #32
 80041ca:	e003      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80041cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x3f2>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	e011      	b.n	8004212 <HAL_ADC_ConfigChannel+0x416>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80041fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004206:	2320      	movs	r3, #32
 8004208:	e003      	b.n	8004212 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004212:	429a      	cmp	r2, r3
 8004214:	d106      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	2103      	movs	r1, #3
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fef8 	bl	8003014 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff f87b 	bl	8003324 <LL_ADC_IsEnabled>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	f040 813d 	bne.w	80044b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	461a      	mov	r2, r3
 8004244:	f7fe ffc8 	bl	80031d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4aa2      	ldr	r2, [pc, #648]	; (80044d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	f040 812e 	bne.w	80044b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <HAL_ADC_ConfigChannel+0x480>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	0e9b      	lsrs	r3, r3, #26
 800426a:	3301      	adds	r3, #1
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2b09      	cmp	r3, #9
 8004272:	bf94      	ite	ls
 8004274:	2301      	movls	r3, #1
 8004276:	2300      	movhi	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e019      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x4b4>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800428a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800428e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004294:	2320      	movs	r3, #32
 8004296:	e003      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	bf94      	ite	ls
 80042aa:	2301      	movls	r3, #1
 80042ac:	2300      	movhi	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d079      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d107      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x4d4>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0e9b      	lsrs	r3, r3, #26
 80042c6:	3301      	adds	r3, #1
 80042c8:	069b      	lsls	r3, r3, #26
 80042ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ce:	e015      	b.n	80042fc <HAL_ADC_ConfigChannel+0x500>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80042e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e003      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80042ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	069b      	lsls	r3, r3, #26
 80042f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_ADC_ConfigChannel+0x520>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	3301      	adds	r3, #1
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	e017      	b.n	800434c <HAL_ADC_ConfigChannel+0x550>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800432e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004334:	2320      	movs	r3, #32
 8004336:	e003      	b.n	8004340 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	3301      	adds	r3, #1
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	ea42 0103 	orr.w	r1, r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x576>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0e9b      	lsrs	r3, r3, #26
 8004362:	3301      	adds	r3, #1
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	051b      	lsls	r3, r3, #20
 8004370:	e018      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x5a8>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e003      	b.n	8004396 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800438e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	3301      	adds	r3, #1
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043a4:	430b      	orrs	r3, r1
 80043a6:	e07e      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x5c8>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0e9b      	lsrs	r3, r3, #26
 80043ba:	3301      	adds	r3, #1
 80043bc:	069b      	lsls	r3, r3, #26
 80043be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043c2:	e015      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x5f4>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80043dc:	2320      	movs	r3, #32
 80043de:	e003      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	069b      	lsls	r3, r3, #26
 80043ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x614>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	e017      	b.n	8004440 <HAL_ADC_ConfigChannel+0x644>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	61fb      	str	r3, [r7, #28]
  return result;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004428:	2320      	movs	r3, #32
 800442a:	e003      	b.n	8004434 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3301      	adds	r3, #1
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	ea42 0103 	orr.w	r1, r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10d      	bne.n	800446c <HAL_ADC_ConfigChannel+0x670>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	3301      	adds	r3, #1
 8004458:	f003 021f 	and.w	r2, r3, #31
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	3b1e      	subs	r3, #30
 8004464:	051b      	lsls	r3, r3, #20
 8004466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800446a:	e01b      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x6a8>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	613b      	str	r3, [r7, #16]
  return result;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004484:	2320      	movs	r3, #32
 8004486:	e003      	b.n	8004490 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3301      	adds	r3, #1
 8004492:	f003 021f 	and.w	r2, r3, #31
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	3b1e      	subs	r3, #30
 800449e:	051b      	lsls	r3, r3, #20
 80044a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044a4:	430b      	orrs	r3, r1
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	6892      	ldr	r2, [r2, #8]
 80044aa:	4619      	mov	r1, r3
 80044ac:	f7fe fe68 	bl	8003180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_ADC_ConfigChannel+0x6e0>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80be 	beq.w	800463a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c6:	d004      	beq.n	80044d2 <HAL_ADC_ConfigChannel+0x6d6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10a      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x6ec>
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80044d4:	e009      	b.n	80044ea <HAL_ADC_ConfigChannel+0x6ee>
 80044d6:	bf00      	nop
 80044d8:	407f0000 	.word	0x407f0000
 80044dc:	80080000 	.word	0x80080000
 80044e0:	50000100 	.word	0x50000100
 80044e4:	50000300 	.word	0x50000300
 80044e8:	4b59      	ldr	r3, [pc, #356]	; (8004650 <HAL_ADC_ConfigChannel+0x854>)
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fd4a 	bl	8002f84 <LL_ADC_GetCommonPathInternalCh>
 80044f0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a56      	ldr	r2, [pc, #344]	; (8004654 <HAL_ADC_ConfigChannel+0x858>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_ADC_ConfigChannel+0x70c>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a55      	ldr	r2, [pc, #340]	; (8004658 <HAL_ADC_ConfigChannel+0x85c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d13a      	bne.n	800457e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800450c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d134      	bne.n	800457e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800451c:	d005      	beq.n	800452a <HAL_ADC_ConfigChannel+0x72e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a4e      	ldr	r2, [pc, #312]	; (800465c <HAL_ADC_ConfigChannel+0x860>)
 8004524:	4293      	cmp	r3, r2
 8004526:	f040 8085 	bne.w	8004634 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004532:	d004      	beq.n	800453e <HAL_ADC_ConfigChannel+0x742>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a49      	ldr	r2, [pc, #292]	; (8004660 <HAL_ADC_ConfigChannel+0x864>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d101      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x746>
 800453e:	4a49      	ldr	r2, [pc, #292]	; (8004664 <HAL_ADC_ConfigChannel+0x868>)
 8004540:	e000      	b.n	8004544 <HAL_ADC_ConfigChannel+0x748>
 8004542:	4a43      	ldr	r2, [pc, #268]	; (8004650 <HAL_ADC_ConfigChannel+0x854>)
 8004544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f7fe fd05 	bl	8002f5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004554:	4b44      	ldr	r3, [pc, #272]	; (8004668 <HAL_ADC_ConfigChannel+0x86c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	4a44      	ldr	r2, [pc, #272]	; (800466c <HAL_ADC_ConfigChannel+0x870>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	099b      	lsrs	r3, r3, #6
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	4613      	mov	r3, r2
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800456e:	e002      	b.n	8004576 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3b01      	subs	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f9      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800457c:	e05a      	b.n	8004634 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <HAL_ADC_ConfigChannel+0x874>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d125      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x7d8>
 8004588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800458c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11f      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a31      	ldr	r2, [pc, #196]	; (8004660 <HAL_ADC_ConfigChannel+0x864>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d104      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x7ac>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a34      	ldr	r2, [pc, #208]	; (8004674 <HAL_ADC_ConfigChannel+0x878>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d047      	beq.n	8004638 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b0:	d004      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x7c0>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <HAL_ADC_ConfigChannel+0x864>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x7c4>
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <HAL_ADC_ConfigChannel+0x868>)
 80045be:	e000      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x7c6>
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_ADC_ConfigChannel+0x854>)
 80045c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe fcc6 	bl	8002f5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045d2:	e031      	b.n	8004638 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a27      	ldr	r2, [pc, #156]	; (8004678 <HAL_ADC_ConfigChannel+0x87c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d12d      	bne.n	800463a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d127      	bne.n	800463a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_ADC_ConfigChannel+0x864>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045fc:	d004      	beq.n	8004608 <HAL_ADC_ConfigChannel+0x80c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_ADC_ConfigChannel+0x864>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <HAL_ADC_ConfigChannel+0x810>
 8004608:	4a16      	ldr	r2, [pc, #88]	; (8004664 <HAL_ADC_ConfigChannel+0x868>)
 800460a:	e000      	b.n	800460e <HAL_ADC_ConfigChannel+0x812>
 800460c:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_ADC_ConfigChannel+0x854>)
 800460e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe fca0 	bl	8002f5e <LL_ADC_SetCommonPathInternalCh>
 800461e:	e00c      	b.n	800463a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004632:	e002      	b.n	800463a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004638:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004642:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004646:	4618      	mov	r0, r3
 8004648:	37d8      	adds	r7, #216	; 0xd8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	50000700 	.word	0x50000700
 8004654:	c3210000 	.word	0xc3210000
 8004658:	90c00010 	.word	0x90c00010
 800465c:	50000600 	.word	0x50000600
 8004660:	50000100 	.word	0x50000100
 8004664:	50000300 	.word	0x50000300
 8004668:	20000000 	.word	0x20000000
 800466c:	053e2d63 	.word	0x053e2d63
 8004670:	c7520000 	.word	0xc7520000
 8004674:	50000500 	.word	0x50000500
 8004678:	cb840000 	.word	0xcb840000

0800467c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fe4b 	bl	8003324 <LL_ADC_IsEnabled>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d14d      	bne.n	8004730 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	4b28      	ldr	r3, [pc, #160]	; (800473c <ADC_Enable+0xc0>)
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	f043 0210 	orr.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e039      	b.n	8004732 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe fe1a 	bl	80032fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046c8:	f7fe fc08 	bl	8002edc <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ce:	e028      	b.n	8004722 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe fe25 	bl	8003324 <LL_ADC_IsEnabled>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fe09 	bl	80032fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046ea:	f7fe fbf7 	bl	8002edc <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d914      	bls.n	8004722 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d00d      	beq.n	8004722 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470a:	f043 0210 	orr.w	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e007      	b.n	8004732 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b01      	cmp	r3, #1
 800472e:	d1cf      	bne.n	80046d0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	8000003f 	.word	0x8000003f

08004740 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004756:	2b00      	cmp	r3, #0
 8004758:	d14b      	bne.n	80047f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d021      	beq.n	80047b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fcaf 	bl	80030dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d032      	beq.n	80047ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d12b      	bne.n	80047ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11f      	bne.n	80047ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80047b6:	e018      	b.n	80047ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d111      	bne.n	80047ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff fade 	bl	8003dac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047f0:	e00e      	b.n	8004810 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff faf2 	bl	8003de8 <HAL_ADC_ErrorCallback>
}
 8004804:	e004      	b.n	8004810 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff faca 	bl	8003dc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fac4 	bl	8003de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <LL_ADC_SetCommonPathInternalCh>:
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	609a      	str	r2, [r3, #8]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_ADC_GetCommonPathInternalCh>:
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <LL_ADC_SetOffset>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3360      	adds	r3, #96	; 0x60
 80048be:	461a      	mov	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <LL_ADC_SetOffset+0x44>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	03fff000 	.word	0x03fff000

080048f4 <LL_ADC_GetOffsetChannel>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3360      	adds	r3, #96	; 0x60
 8004902:	461a      	mov	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_SetOffsetState>:
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3360      	adds	r3, #96	; 0x60
 8004930:	461a      	mov	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	431a      	orrs	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <LL_ADC_SetOffsetSign>:
{
 8004956:	b480      	push	{r7}
 8004958:	b087      	sub	sp, #28
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3360      	adds	r3, #96	; 0x60
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	431a      	orrs	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	601a      	str	r2, [r3, #0]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_ADC_SetOffsetSaturation>:
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3360      	adds	r3, #96	; 0x60
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	615a      	str	r2, [r3, #20]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_ADC_INJ_GetTrigAuto>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_ADC_SetChannelSamplingTime>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3314      	adds	r3, #20
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	0e5b      	lsrs	r3, r3, #25
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	4413      	add	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	0d1b      	lsrs	r3, r3, #20
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2107      	movs	r1, #7
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	401a      	ands	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0d1b      	lsrs	r3, r3, #20
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	fa01 f303 	lsl.w	r3, r1, r3
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <LL_ADC_SetChannelSingleDiff>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10a      	bne.n	8004a86 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004a84:	e00a      	b.n	8004a9c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	43db      	mvns	r3, r3
 8004a94:	401a      	ands	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	407f0000 	.word	0x407f0000

08004aac <LL_ADC_GetMultimode>:
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 031f 	and.w	r3, r3, #31
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_ADC_IsEnabled>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <LL_ADC_IsEnabled+0x18>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <LL_ADC_IsEnabled+0x1a>
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_ADC_REG_IsConversionOngoing>:
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d101      	bne.n	8004b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_ADC_INJ_StartConversion>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b28:	f043 0208 	orr.w	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_INJ_IsConversionOngoing>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d101      	bne.n	8004b54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b74:	d004      	beq.n	8004b80 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a78      	ldr	r2, [pc, #480]	; (8004d5c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADCEx_InjectedStart_IT+0x20>
 8004b80:	4b77      	ldr	r3, [pc, #476]	; (8004d60 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8004b82:	e000      	b.n	8004b86 <HAL_ADCEx_InjectedStart_IT+0x22>
 8004b84:	4b77      	ldr	r3, [pc, #476]	; (8004d64 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff90 	bl	8004aac <LL_ADC_GetMultimode>
 8004b8c:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ffd2 	bl	8004b3c <LL_ADC_INJ_IsConversionOngoing>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0d8      	b.n	8004d54 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bac:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e0c0      	b.n	8004d54 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e0b9      	b.n	8004d54 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fd47 	bl	800467c <ADC_Enable>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 80a8 	bne.w	8004d4a <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0a:	f023 0208 	bic.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	661a      	str	r2, [r3, #96]	; 0x60
 8004c12:	e002      	b.n	8004c1a <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a4a      	ldr	r2, [pc, #296]	; (8004d5c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_ADCEx_InjectedStart_IT+0xe8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a4a      	ldr	r2, [pc, #296]	; (8004d68 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d002      	beq.n	8004c48 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	e003      	b.n	8004c50 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004c48:	4b48      	ldr	r3, [pc, #288]	; (8004d6c <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004c4a:	e001      	b.n	8004c50 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004c4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d002      	beq.n	8004c5e <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d105      	bne.n	8004c6a <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2260      	movs	r2, #96	; 0x60
 8004c70:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c96:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d110      	bne.n	8004cc2 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0220 	bic.w	r2, r2, #32
 8004cae:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cbe:	605a      	str	r2, [r3, #4]
          break;
 8004cc0:	e010      	b.n	8004ce4 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0220 	orr.w	r2, r2, #32
 8004ce0:	605a      	str	r2, [r3, #4]
          break;
 8004ce2:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_ADCEx_InjectedStart_IT+0x19e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d002      	beq.n	8004cfe <HAL_ADCEx_InjectedStart_IT+0x19a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	e003      	b.n	8004d06 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004d00:	e001      	b.n	8004d06 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d008      	beq.n	8004d20 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d002      	beq.n	8004d20 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b07      	cmp	r3, #7
 8004d1e:	d10d      	bne.n	8004d3c <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fe5f 	bl	80049e8 <LL_ADC_INJ_GetTrigAuto>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d110      	bne.n	8004d52 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff feed 	bl	8004b14 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004d3a:	e00a      	b.n	8004d52 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d48:	e003      	b.n	8004d52 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	50000100 	.word	0x50000100
 8004d60:	50000300 	.word	0x50000300
 8004d64:	50000700 	.word	0x50000700
 8004d68:	50000500 	.word	0x50000500
 8004d6c:	50000400 	.word	0x50000400

08004d70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b0b6      	sub	sp, #216	; 0xd8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d102      	bne.n	8004dfe <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f000 bcfd 	b.w	80057f8 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d130      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b09      	cmp	r3, #9
 8004e1c:	d179      	bne.n	8004f12 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d010      	beq.n	8004e48 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	0e9b      	lsrs	r3, r3, #26
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004e3a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e46:	e007      	b.n	8004e58 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	0e9b      	lsrs	r3, r3, #26
 8004e4e:	025b      	lsls	r3, r3, #9
 8004e50:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e5e:	4b84      	ldr	r3, [pc, #528]	; (8005070 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e74:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004e76:	e04c      	b.n	8004f12 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11d      	bne.n	8004ebc <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00d      	beq.n	8004eb2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004ea4:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004eb0:	e004      	b.n	8004ebc <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0e9b      	lsrs	r3, r3, #26
 8004ec2:	f003 021f 	and.w	r2, r3, #31
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee0:	1e5a      	subs	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004eea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f02:	4b5b      	ldr	r3, [pc, #364]	; (8005070 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fe10 	bl	8004b3c <LL_ADC_INJ_IsConversionOngoing>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d124      	bne.n	8004f6c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d112      	bne.n	8004f52 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f3c:	055a      	lsls	r2, r3, #21
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f44:	051b      	lsls	r3, r3, #20
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e00c      	b.n	8004f6c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f62:	055a      	lsls	r2, r3, #21
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fdbc 	bl	8004aee <LL_ADC_REG_IsConversionOngoing>
 8004f76:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fddc 	bl	8004b3c <LL_ADC_INJ_IsConversionOngoing>
 8004f84:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 822e 	bne.w	80053ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 8229 	bne.w	80053ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d116      	bne.n	8004fda <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d108      	bne.n	8004fc8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004fc4:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fc6:	e01f      	b.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004fd6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fd8:	e016      	b.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d109      	bne.n	8004ff8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004ff6:	e007      	b.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005006:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800500e:	2b01      	cmp	r3, #1
 8005010:	d110      	bne.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	430b      	orrs	r3, r1
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0202 	orr.w	r2, r2, #2
 8005030:	611a      	str	r2, [r3, #16]
 8005032:	e007      	b.n	8005044 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0202 	bic.w	r2, r2, #2
 8005042:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800504c:	d112      	bne.n	8005074 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	4619      	mov	r1, r3
 800505a:	f7ff fcd3 	bl	8004a04 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fcab 	bl	80049c2 <LL_ADC_SetSamplingTimeCommonConfig>
 800506c:	e011      	b.n	8005092 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800506e:	bf00      	nop
 8005070:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6819      	ldr	r1, [r3, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	461a      	mov	r2, r3
 8005082:	f7ff fcbf 	bl	8004a04 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fc98 	bl	80049c2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d022      	beq.n	80050fa <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	6919      	ldr	r1, [r3, #16]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050c4:	f7ff fbf2 	bl	80048ac <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6919      	ldr	r1, [r3, #16]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	461a      	mov	r2, r3
 80050d6:	f7ff fc3e 	bl	8004956 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80050ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ee:	e000      	b.n	80050f2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80050f0:	2300      	movs	r3, #0
 80050f2:	461a      	mov	r2, r3
 80050f4:	f7ff fc4a 	bl	800498c <LL_ADC_SetOffsetSaturation>
 80050f8:	e179      	b.n	80053ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2100      	movs	r1, #0
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fbf7 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005106:	4603      	mov	r3, r0
 8005108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fbec 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 800511c:	4603      	mov	r3, r0
 800511e:	0e9b      	lsrs	r3, r3, #26
 8005120:	f003 021f 	and.w	r2, r3, #31
 8005124:	e01e      	b.n	8005164 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fbe1 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005132:	4603      	mov	r3, r0
 8005134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005138:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800513c:	fa93 f3a3 	rbit	r3, r3
 8005140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005144:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800514c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8005154:	2320      	movs	r3, #32
 8005156:	e004      	b.n	8005162 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8005158:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800515c:	fab3 f383 	clz	r3, r3
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0e9b      	lsrs	r3, r3, #26
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	e018      	b.n	80051ae <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005188:	fa93 f3a3 	rbit	r3, r3
 800518c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005198:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80051a0:	2320      	movs	r3, #32
 80051a2:	e004      	b.n	80051ae <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80051a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051a8:	fab3 f383 	clz	r3, r3
 80051ac:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d106      	bne.n	80051c0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fbb0 	bl	8004920 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2101      	movs	r1, #1
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fb94 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_ADCEx_InjectedConfigChannel+0x418>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fb89 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80051e2:	4603      	mov	r3, r0
 80051e4:	0e9b      	lsrs	r3, r3, #26
 80051e6:	f003 021f 	and.w	r2, r3, #31
 80051ea:	e01e      	b.n	800522a <HAL_ADCEx_InjectedConfigChannel+0x456>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2101      	movs	r1, #1
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fb7e 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005202:	fa93 f3a3 	rbit	r3, r3
 8005206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800520a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800520e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800521a:	2320      	movs	r3, #32
 800521c:	e004      	b.n	8005228 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800521e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0e9b      	lsrs	r3, r3, #26
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	e018      	b.n	8005274 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800525a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800525e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8005266:	2320      	movs	r3, #32
 8005268:	e004      	b.n	8005274 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800526a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005274:	429a      	cmp	r2, r3
 8005276:	d106      	bne.n	8005286 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	2101      	movs	r1, #1
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fb4d 	bl	8004920 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2102      	movs	r1, #2
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fb31 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005292:	4603      	mov	r3, r0
 8005294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2102      	movs	r1, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fb26 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80052a8:	4603      	mov	r3, r0
 80052aa:	0e9b      	lsrs	r3, r3, #26
 80052ac:	f003 021f 	and.w	r2, r3, #31
 80052b0:	e01e      	b.n	80052f0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fb1b 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80052be:	4603      	mov	r3, r0
 80052c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80052d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80052d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80052e0:	2320      	movs	r3, #32
 80052e2:	e004      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80052e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052e8:	fab3 f383 	clz	r3, r3
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	0e9b      	lsrs	r3, r3, #26
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	e014      	b.n	8005332 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800531c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005324:	2320      	movs	r3, #32
 8005326:	e004      	b.n	8005332 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800532c:	fab3 f383 	clz	r3, r3
 8005330:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005332:	429a      	cmp	r2, r3
 8005334:	d106      	bne.n	8005344 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	2102      	movs	r1, #2
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff faee 	bl	8004920 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2103      	movs	r1, #3
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fad2 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005350:	4603      	mov	r3, r0
 8005352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2103      	movs	r1, #3
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fac7 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005366:	4603      	mov	r3, r0
 8005368:	0e9b      	lsrs	r3, r3, #26
 800536a:	f003 021f 	and.w	r2, r3, #31
 800536e:	e017      	b.n	80053a0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2103      	movs	r1, #3
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fabc 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 800537c:	4603      	mov	r3, r0
 800537e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800538c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8005392:	2320      	movs	r3, #32
 8005394:	e003      	b.n	800539e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8005396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005398:	fab3 f383 	clz	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	0e9b      	lsrs	r3, r3, #26
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	e011      	b.n	80053dc <HAL_ADCEx_InjectedConfigChannel+0x608>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c0:	fa93 f3a3 	rbit	r3, r3
 80053c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80053c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80053ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80053d0:	2320      	movs	r3, #32
 80053d2:	e003      	b.n	80053dc <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80053d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053d6:	fab3 f383 	clz	r3, r3
 80053da:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053dc:	429a      	cmp	r2, r3
 80053de:	d106      	bne.n	80053ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2103      	movs	r1, #3
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fa99 	bl	8004920 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff fb68 	bl	8004ac8 <LL_ADC_IsEnabled>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 813d 	bne.w	800567a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6819      	ldr	r1, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	461a      	mov	r2, r3
 800540e:	f7ff fb25 	bl	8004a5c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4aa2      	ldr	r2, [pc, #648]	; (80056a0 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	f040 812e 	bne.w	800567a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	0e9b      	lsrs	r3, r3, #26
 8005434:	3301      	adds	r3, #1
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2b09      	cmp	r3, #9
 800543c:	bf94      	ite	ls
 800543e:	2301      	movls	r3, #1
 8005440:	2300      	movhi	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	e019      	b.n	800547a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005456:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800545e:	2320      	movs	r3, #32
 8005460:	e003      	b.n	800546a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8005462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005464:	fab3 f383 	clz	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	3301      	adds	r3, #1
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	2b09      	cmp	r3, #9
 8005472:	bf94      	ite	ls
 8005474:	2301      	movls	r3, #1
 8005476:	2300      	movhi	r3, #0
 8005478:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800547a:	2b00      	cmp	r3, #0
 800547c:	d079      	beq.n	8005572 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	0e9b      	lsrs	r3, r3, #26
 8005490:	3301      	adds	r3, #1
 8005492:	069b      	lsls	r3, r3, #26
 8005494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005498:	e015      	b.n	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	fa93 f3a3 	rbit	r3, r3
 80054a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80054a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80054ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80054b2:	2320      	movs	r3, #32
 80054b4:	e003      	b.n	80054be <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	fab3 f383 	clz	r3, r3
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	069b      	lsls	r3, r3, #26
 80054c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	0e9b      	lsrs	r3, r3, #26
 80054d8:	3301      	adds	r3, #1
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2101      	movs	r1, #1
 80054e0:	fa01 f303 	lsl.w	r3, r1, r3
 80054e4:	e017      	b.n	8005516 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80054f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80054f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80054fe:	2320      	movs	r3, #32
 8005500:	e003      	b.n	800550a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8005502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005504:	fab3 f383 	clz	r3, r3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	3301      	adds	r3, #1
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2101      	movs	r1, #1
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	ea42 0103 	orr.w	r1, r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	0e9b      	lsrs	r3, r3, #26
 800552c:	3301      	adds	r3, #1
 800552e:	f003 021f 	and.w	r2, r3, #31
 8005532:	4613      	mov	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	051b      	lsls	r3, r3, #20
 800553a:	e018      	b.n	800556e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005554:	2320      	movs	r3, #32
 8005556:	e003      	b.n	8005560 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	fab3 f383 	clz	r3, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	3301      	adds	r3, #1
 8005562:	f003 021f 	and.w	r2, r3, #31
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800556e:	430b      	orrs	r3, r1
 8005570:	e07e      	b.n	8005670 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557a:	2b00      	cmp	r3, #0
 800557c:	d107      	bne.n	800558e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	0e9b      	lsrs	r3, r3, #26
 8005584:	3301      	adds	r3, #1
 8005586:	069b      	lsls	r3, r3, #26
 8005588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800558c:	e015      	b.n	80055ba <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80055a6:	2320      	movs	r3, #32
 80055a8:	e003      	b.n	80055b2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	fab3 f383 	clz	r3, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3301      	adds	r3, #1
 80055b4:	069b      	lsls	r3, r3, #26
 80055b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_ADCEx_InjectedConfigChannel+0x806>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	0e9b      	lsrs	r3, r3, #26
 80055cc:	3301      	adds	r3, #1
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	e017      	b.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x836>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	61bb      	str	r3, [r7, #24]
  return result;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3301      	adds	r3, #1
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	ea42 0103 	orr.w	r1, r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10d      	bne.n	8005636 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0e9b      	lsrs	r3, r3, #26
 8005620:	3301      	adds	r3, #1
 8005622:	f003 021f 	and.w	r2, r3, #31
 8005626:	4613      	mov	r3, r2
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	4413      	add	r3, r2
 800562c:	3b1e      	subs	r3, #30
 800562e:	051b      	lsls	r3, r3, #20
 8005630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005634:	e01b      	b.n	800566e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	60fb      	str	r3, [r7, #12]
  return result;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 800564e:	2320      	movs	r3, #32
 8005650:	e003      	b.n	800565a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	fab3 f383 	clz	r3, r3
 8005658:	b2db      	uxtb	r3, r3
 800565a:	3301      	adds	r3, #1
 800565c:	f003 021f 	and.w	r2, r3, #31
 8005660:	4613      	mov	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4413      	add	r3, r2
 8005666:	3b1e      	subs	r3, #30
 8005668:	051b      	lsls	r3, r3, #20
 800566a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800566e:	430b      	orrs	r3, r1
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	6892      	ldr	r2, [r2, #8]
 8005674:	4619      	mov	r1, r3
 8005676:	f7ff f9c5 	bl	8004a04 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80b2 	beq.w	80057ec <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005690:	d004      	beq.n	800569c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d109      	bne.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 800569e:	e008      	b.n	80056b2 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80056a0:	407f0000 	.word	0x407f0000
 80056a4:	80080000 	.word	0x80080000
 80056a8:	50000100 	.word	0x50000100
 80056ac:	50000300 	.word	0x50000300
 80056b0:	4b53      	ldr	r3, [pc, #332]	; (8005800 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f8eb 	bl	800488e <LL_ADC_GetCommonPathInternalCh>
 80056b8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a50      	ldr	r2, [pc, #320]	; (8005804 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a4f      	ldr	r2, [pc, #316]	; (8005808 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d139      	bne.n	8005744 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d133      	bne.n	8005744 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056e4:	d004      	beq.n	80056f0 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a48      	ldr	r2, [pc, #288]	; (800580c <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d17a      	bne.n	80057e6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056f8:	d004      	beq.n	8005704 <HAL_ADCEx_InjectedConfigChannel+0x930>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a44      	ldr	r2, [pc, #272]	; (8005810 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d101      	bne.n	8005708 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8005704:	4a43      	ldr	r2, [pc, #268]	; (8005814 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005706:	e000      	b.n	800570a <HAL_ADCEx_InjectedConfigChannel+0x936>
 8005708:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800570a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800570e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f7ff f8a7 	bl	8004868 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800571a:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	099b      	lsrs	r3, r3, #6
 8005720:	4a3e      	ldr	r2, [pc, #248]	; (800581c <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	099a      	lsrs	r2, r3, #6
 8005728:	4613      	mov	r3, r2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	3318      	adds	r3, #24
 8005732:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005734:	e002      	b.n	800573c <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3b01      	subs	r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f9      	bne.n	8005736 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005742:	e050      	b.n	80057e6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a35      	ldr	r2, [pc, #212]	; (8005820 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d125      	bne.n	800579a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800574e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d11f      	bne.n	800579a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d104      	bne.n	800576e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2e      	ldr	r2, [pc, #184]	; (8005824 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d03d      	beq.n	80057ea <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005776:	d004      	beq.n	8005782 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a24      	ldr	r2, [pc, #144]	; (8005810 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8005782:	4a24      	ldr	r2, [pc, #144]	; (8005814 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005784:	e000      	b.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800578c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f7ff f868 	bl	8004868 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005798:	e027      	b.n	80057ea <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a22      	ldr	r2, [pc, #136]	; (8005828 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d123      	bne.n	80057ec <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d11d      	bne.n	80057ec <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057c2:	d004      	beq.n	80057ce <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a11      	ldr	r2, [pc, #68]	; (8005810 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80057d0:	e000      	b.n	80057d4 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80057d2:	4a0b      	ldr	r2, [pc, #44]	; (8005800 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80057d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f7ff f842 	bl	8004868 <LL_ADC_SetCommonPathInternalCh>
 80057e4:	e002      	b.n	80057ec <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057ea:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80057f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	37d8      	adds	r7, #216	; 0xd8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	50000700 	.word	0x50000700
 8005804:	c3210000 	.word	0xc3210000
 8005808:	90c00010 	.word	0x90c00010
 800580c:	50000600 	.word	0x50000600
 8005810:	50000100 	.word	0x50000100
 8005814:	50000300 	.word	0x50000300
 8005818:	20000000 	.word	0x20000000
 800581c:	053e2d63 	.word	0x053e2d63
 8005820:	c7520000 	.word	0xc7520000
 8005824:	50000500 	.word	0x50000500
 8005828:	cb840000 	.word	0xcb840000

0800582c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b0a1      	sub	sp, #132	; 0x84
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e0e7      	b.n	8005a1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005852:	2300      	movs	r3, #0
 8005854:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005856:	2300      	movs	r3, #0
 8005858:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005862:	d102      	bne.n	800586a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005864:	4b6f      	ldr	r3, [pc, #444]	; (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	e009      	b.n	800587e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6e      	ldr	r2, [pc, #440]	; (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d102      	bne.n	800587a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005874:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	e001      	b.n	800587e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0be      	b.n	8005a1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff f925 	bl	8004aee <LL_ADC_REG_IsConversionOngoing>
 80058a4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff f91f 	bl	8004aee <LL_ADC_REG_IsConversionOngoing>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 80a0 	bne.w	80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80058b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f040 809c 	bne.w	80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058c8:	d004      	beq.n	80058d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a55      	ldr	r2, [pc, #340]	; (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80058d4:	4b56      	ldr	r3, [pc, #344]	; (8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80058d6:	e000      	b.n	80058da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80058d8:	4b56      	ldr	r3, [pc, #344]	; (8005a34 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80058da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d04b      	beq.n	800597c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80058e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	6859      	ldr	r1, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058f6:	035b      	lsls	r3, r3, #13
 80058f8:	430b      	orrs	r3, r1
 80058fa:	431a      	orrs	r2, r3
 80058fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005908:	d004      	beq.n	8005914 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a45      	ldr	r2, [pc, #276]	; (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d10f      	bne.n	8005934 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005914:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005918:	f7ff f8d6 	bl	8004ac8 <LL_ADC_IsEnabled>
 800591c:	4604      	mov	r4, r0
 800591e:	4841      	ldr	r0, [pc, #260]	; (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005920:	f7ff f8d2 	bl	8004ac8 <LL_ADC_IsEnabled>
 8005924:	4603      	mov	r3, r0
 8005926:	4323      	orrs	r3, r4
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e012      	b.n	800595a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005934:	483c      	ldr	r0, [pc, #240]	; (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005936:	f7ff f8c7 	bl	8004ac8 <LL_ADC_IsEnabled>
 800593a:	4604      	mov	r4, r0
 800593c:	483b      	ldr	r0, [pc, #236]	; (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800593e:	f7ff f8c3 	bl	8004ac8 <LL_ADC_IsEnabled>
 8005942:	4603      	mov	r3, r0
 8005944:	431c      	orrs	r4, r3
 8005946:	483c      	ldr	r0, [pc, #240]	; (8005a38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005948:	f7ff f8be 	bl	8004ac8 <LL_ADC_IsEnabled>
 800594c:	4603      	mov	r3, r0
 800594e:	4323      	orrs	r3, r4
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d056      	beq.n	8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800595e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005966:	f023 030f 	bic.w	r3, r3, #15
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	6811      	ldr	r1, [r2, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	6892      	ldr	r2, [r2, #8]
 8005972:	430a      	orrs	r2, r1
 8005974:	431a      	orrs	r2, r3
 8005976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005978:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800597a:	e047      	b.n	8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800597c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005986:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005990:	d004      	beq.n	800599c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10f      	bne.n	80059bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800599c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80059a0:	f7ff f892 	bl	8004ac8 <LL_ADC_IsEnabled>
 80059a4:	4604      	mov	r4, r0
 80059a6:	481f      	ldr	r0, [pc, #124]	; (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059a8:	f7ff f88e 	bl	8004ac8 <LL_ADC_IsEnabled>
 80059ac:	4603      	mov	r3, r0
 80059ae:	4323      	orrs	r3, r4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	e012      	b.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80059bc:	481a      	ldr	r0, [pc, #104]	; (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80059be:	f7ff f883 	bl	8004ac8 <LL_ADC_IsEnabled>
 80059c2:	4604      	mov	r4, r0
 80059c4:	4819      	ldr	r0, [pc, #100]	; (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80059c6:	f7ff f87f 	bl	8004ac8 <LL_ADC_IsEnabled>
 80059ca:	4603      	mov	r3, r0
 80059cc:	431c      	orrs	r4, r3
 80059ce:	481a      	ldr	r0, [pc, #104]	; (8005a38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80059d0:	f7ff f87a 	bl	8004ac8 <LL_ADC_IsEnabled>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4323      	orrs	r3, r4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d012      	beq.n	8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80059ee:	f023 030f 	bic.w	r3, r3, #15
 80059f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059f6:	e009      	b.n	8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005a0a:	e000      	b.n	8005a0e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3784      	adds	r7, #132	; 0x84
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd90      	pop	{r4, r7, pc}
 8005a22:	bf00      	nop
 8005a24:	50000100 	.word	0x50000100
 8005a28:	50000400 	.word	0x50000400
 8005a2c:	50000500 	.word	0x50000500
 8005a30:	50000300 	.word	0x50000300
 8005a34:	50000700 	.word	0x50000700
 8005a38:	50000600 	.word	0x50000600

08005a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <__NVIC_SetPriorityGrouping+0x44>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a58:	4013      	ands	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a6e:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <__NVIC_SetPriorityGrouping+0x44>)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	60d3      	str	r3, [r2, #12]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <__NVIC_GetPriorityGrouping+0x18>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	f003 0307 	and.w	r3, r3, #7
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	db0b      	blt.n	8005aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	f003 021f 	and.w	r2, r3, #31
 8005ab8:	4907      	ldr	r1, [pc, #28]	; (8005ad8 <__NVIC_EnableIRQ+0x38>)
 8005aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	e000e100 	.word	0xe000e100

08005adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	6039      	str	r1, [r7, #0]
 8005ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	db0a      	blt.n	8005b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	490c      	ldr	r1, [pc, #48]	; (8005b28 <__NVIC_SetPriority+0x4c>)
 8005af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afa:	0112      	lsls	r2, r2, #4
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	440b      	add	r3, r1
 8005b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b04:	e00a      	b.n	8005b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4908      	ldr	r1, [pc, #32]	; (8005b2c <__NVIC_SetPriority+0x50>)
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	3b04      	subs	r3, #4
 8005b14:	0112      	lsls	r2, r2, #4
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	440b      	add	r3, r1
 8005b1a:	761a      	strb	r2, [r3, #24]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	e000e100 	.word	0xe000e100
 8005b2c:	e000ed00 	.word	0xe000ed00

08005b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b089      	sub	sp, #36	; 0x24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f1c3 0307 	rsb	r3, r3, #7
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	bf28      	it	cs
 8005b4e:	2304      	movcs	r3, #4
 8005b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3304      	adds	r3, #4
 8005b56:	2b06      	cmp	r3, #6
 8005b58:	d902      	bls.n	8005b60 <NVIC_EncodePriority+0x30>
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3b03      	subs	r3, #3
 8005b5e:	e000      	b.n	8005b62 <NVIC_EncodePriority+0x32>
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	43da      	mvns	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	401a      	ands	r2, r3
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b78:	f04f 31ff 	mov.w	r1, #4294967295
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b82:	43d9      	mvns	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b88:	4313      	orrs	r3, r2
         );
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3724      	adds	r7, #36	; 0x24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba8:	d301      	bcc.n	8005bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005baa:	2301      	movs	r3, #1
 8005bac:	e00f      	b.n	8005bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bae:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <SysTick_Config+0x40>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bb6:	210f      	movs	r1, #15
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	f7ff ff8e 	bl	8005adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <SysTick_Config+0x40>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bc6:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <SysTick_Config+0x40>)
 8005bc8:	2207      	movs	r2, #7
 8005bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000e010 	.word	0xe000e010

08005bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff ff29 	bl	8005a3c <__NVIC_SetPriorityGrouping>
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c00:	f7ff ff40 	bl	8005a84 <__NVIC_GetPriorityGrouping>
 8005c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	f7ff ff90 	bl	8005b30 <NVIC_EncodePriority>
 8005c10:	4602      	mov	r2, r0
 8005c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff ff5f 	bl	8005adc <__NVIC_SetPriority>
}
 8005c1e:	bf00      	nop
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ff33 	bl	8005aa0 <__NVIC_EnableIRQ>
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ffa4 	bl	8005b98 <SysTick_Config>
 8005c50:	4603      	mov	r3, r0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e014      	b.n	8005c96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	791b      	ldrb	r3, [r3, #4]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d105      	bne.n	8005c82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fc fd69 	bl	8002754 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	795b      	ldrb	r3, [r3, #5]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_DAC_Start+0x16>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e043      	b.n	8005d3c <HAL_DAC_Start+0x9e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6819      	ldr	r1, [r3, #0]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2201      	movs	r2, #1
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7fd f90b 	bl	8002ef4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10f      	bne.n	8005d04 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d11d      	bne.n	8005d2e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	605a      	str	r2, [r3, #4]
 8005d02:	e014      	b.n	8005d2e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2102      	movs	r1, #2
 8005d16:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d107      	bne.n	8005d2e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0202 	orr.w	r2, r2, #2
 8005d2c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3308      	adds	r3, #8
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	e004      	b.n	8005d7e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	3314      	adds	r3, #20
 8005d7c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	461a      	mov	r2, r3
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	795b      	ldrb	r3, [r3, #5]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_DAC_ConfigChannel+0x18>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e192      	b.n	80060d2 <HAL_DAC_ConfigChannel+0x33e>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2202      	movs	r2, #2
 8005db6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d174      	bne.n	8005eaa <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005dc0:	f7fd f88c 	bl	8002edc <HAL_GetTick>
 8005dc4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d134      	bne.n	8005e36 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005dcc:	e011      	b.n	8005df2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005dce:	f7fd f885 	bl	8002edc <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d90a      	bls.n	8005df2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f043 0208 	orr.w	r2, r3, #8
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2203      	movs	r2, #3
 8005dec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e16f      	b.n	80060d2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e6      	bne.n	8005dce <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005e00:	2001      	movs	r0, #1
 8005e02:	f7fd f877 	bl	8002ef4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8005e10:	e01e      	b.n	8005e50 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e12:	f7fd f863 	bl	8002edc <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d90a      	bls.n	8005e36 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f043 0208 	orr.w	r2, r3, #8
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e14d      	b.n	80060d2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dbe8      	blt.n	8005e12 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005e40:	2001      	movs	r0, #1
 8005e42:	f7fd f857 	bl	8002ef4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e4e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005e60:	fa01 f303 	lsl.w	r3, r1, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	ea02 0103 	and.w	r1, r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	409a      	lsls	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	21ff      	movs	r1, #255	; 0xff
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	ea02 0103 	and.w	r1, r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d11d      	bne.n	8005eee <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	221f      	movs	r2, #31
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eca:	4013      	ands	r3, r2
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2207      	movs	r2, #7
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f06:	4013      	ands	r3, r2
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d102      	bne.n	8005f18 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	623b      	str	r3, [r7, #32]
 8005f16:	e00f      	b.n	8005f38 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d102      	bne.n	8005f26 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005f20:	2301      	movs	r3, #1
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	e008      	b.n	8005f38 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	623b      	str	r3, [r7, #32]
 8005f32:	e001      	b.n	8005f38 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	791b      	ldrb	r3, [r3, #4]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d102      	bne.n	8005f6c <HAL_DAC_ConfigChannel+0x1d8>
 8005f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f6a:	e000      	b.n	8005f6e <HAL_DAC_ConfigChannel+0x1da>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	43db      	mvns	r3, r3
 8005f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f86:	4013      	ands	r3, r2
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	795b      	ldrb	r3, [r3, #5]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d102      	bne.n	8005f98 <HAL_DAC_ConfigChannel+0x204>
 8005f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f96:	e000      	b.n	8005f9a <HAL_DAC_ConfigChannel+0x206>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d114      	bne.n	8005fda <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005fb0:	f001 fa64 	bl	800747c <HAL_RCC_GetHCLKFreq>
 8005fb4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4a48      	ldr	r2, [pc, #288]	; (80060dc <HAL_DAC_ConfigChannel+0x348>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d904      	bls.n	8005fc8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc6:	e00f      	b.n	8005fe8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4a45      	ldr	r2, [pc, #276]	; (80060e0 <HAL_DAC_ConfigChannel+0x34c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d90a      	bls.n	8005fe6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd8:	e006      	b.n	8005fe8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe4:	e000      	b.n	8005fe8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005fe6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6819      	ldr	r1, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43da      	mvns	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	400a      	ands	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	4013      	ands	r3, r2
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006052:	4313      	orrs	r3, r2
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	22c0      	movs	r2, #192	; 0xc0
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43da      	mvns	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	400a      	ands	r2, r1
 8006078:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	089b      	lsrs	r3, r3, #2
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	4313      	orrs	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80060a8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ac:	43db      	mvns	r3, r3
 80060ae:	ea02 0103 	and.w	r1, r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	409a      	lsls	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	09896800 	.word	0x09896800
 80060e0:	04c4b400 	.word	0x04c4b400

080060e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e08d      	b.n	8006212 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_DMA_Init+0x138>)
 80060fe:	429a      	cmp	r2, r3
 8006100:	d80f      	bhi.n	8006122 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	4b45      	ldr	r3, [pc, #276]	; (8006220 <HAL_DMA_Init+0x13c>)
 800610a:	4413      	add	r3, r2
 800610c:	4a45      	ldr	r2, [pc, #276]	; (8006224 <HAL_DMA_Init+0x140>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	009a      	lsls	r2, r3, #2
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a42      	ldr	r2, [pc, #264]	; (8006228 <HAL_DMA_Init+0x144>)
 800611e:	641a      	str	r2, [r3, #64]	; 0x40
 8006120:	e00e      	b.n	8006140 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	4b40      	ldr	r3, [pc, #256]	; (800622c <HAL_DMA_Init+0x148>)
 800612a:	4413      	add	r3, r2
 800612c:	4a3d      	ldr	r2, [pc, #244]	; (8006224 <HAL_DMA_Init+0x140>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	009a      	lsls	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a3c      	ldr	r2, [pc, #240]	; (8006230 <HAL_DMA_Init+0x14c>)
 800613e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f9b6 	bl	8006504 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061a0:	d102      	bne.n	80061a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d010      	beq.n	80061e8 <HAL_DMA_Init+0x104>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d80c      	bhi.n	80061e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9d6 	bl	8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	e008      	b.n	80061fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40020407 	.word	0x40020407
 8006220:	bffdfff8 	.word	0xbffdfff8
 8006224:	cccccccd 	.word	0xcccccccd
 8006228:	40020000 	.word	0x40020000
 800622c:	bffdfbf8 	.word	0xbffdfbf8
 8006230:	40020400 	.word	0x40020400

08006234 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_DMA_Start_IT+0x20>
 8006250:	2302      	movs	r3, #2
 8006252:	e066      	b.n	8006322 <HAL_DMA_Start_IT+0xee>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d155      	bne.n	8006314 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f8fb 	bl	8006488 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 020e 	orr.w	r2, r2, #14
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e00f      	b.n	80062cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0204 	bic.w	r2, r2, #4
 80062ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 020a 	orr.w	r2, r2, #10
 80062ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006300:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e005      	b.n	8006320 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800631c:	2302      	movs	r3, #2
 800631e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2204      	movs	r2, #4
 800634c:	409a      	lsls	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d026      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x7a>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d021      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d107      	bne.n	800637e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0204 	bic.w	r2, r2, #4
 800637c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	f003 021f 	and.w	r2, r3, #31
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	2104      	movs	r1, #4
 800638c:	fa01 f202 	lsl.w	r2, r1, r2
 8006390:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d071      	beq.n	800647e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063a2:	e06c      	b.n	800647e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2202      	movs	r2, #2
 80063ae:	409a      	lsls	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02e      	beq.n	8006416 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d029      	beq.n	8006416 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10b      	bne.n	80063e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 020a 	bic.w	r2, r2, #10
 80063de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	f003 021f 	and.w	r2, r3, #31
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	2102      	movs	r1, #2
 80063f6:	fa01 f202 	lsl.w	r2, r1, r2
 80063fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d038      	beq.n	800647e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006414:	e033      	b.n	800647e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2208      	movs	r2, #8
 8006420:	409a      	lsls	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02a      	beq.n	8006480 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d025      	beq.n	8006480 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 020e 	bic.w	r2, r2, #14
 8006442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	f003 021f 	and.w	r2, r3, #31
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	2101      	movs	r1, #1
 8006452:	fa01 f202 	lsl.w	r2, r1, r2
 8006456:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800647e:	bf00      	nop
 8006480:	bf00      	nop
}
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800649e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80064b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	f003 021f 	and.w	r2, r3, #31
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	2101      	movs	r1, #1
 80064c0:	fa01 f202 	lsl.w	r2, r1, r2
 80064c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d108      	bne.n	80064e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064e6:	e007      	b.n	80064f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	4b16      	ldr	r3, [pc, #88]	; (800656c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006514:	429a      	cmp	r2, r3
 8006516:	d802      	bhi.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e001      	b.n	8006522 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006520:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	3b08      	subs	r3, #8
 800652e:	4a12      	ldr	r2, [pc, #72]	; (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	091b      	lsrs	r3, r3, #4
 8006536:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	009a      	lsls	r2, r3, #2
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a0b      	ldr	r2, [pc, #44]	; (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800654e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	2201      	movs	r2, #1
 8006558:	409a      	lsls	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40020407 	.word	0x40020407
 8006570:	40020800 	.word	0x40020800
 8006574:	40020820 	.word	0x40020820
 8006578:	cccccccd 	.word	0xcccccccd
 800657c:	40020880 	.word	0x40020880

08006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80065a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2201      	movs	r2, #1
 80065ae:	409a      	lsls	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	1000823f 	.word	0x1000823f
 80065c4:	40020940 	.word	0x40020940

080065c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80065d6:	e15a      	b.n	800688e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	2101      	movs	r1, #1
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	fa01 f303 	lsl.w	r3, r1, r3
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 814c 	beq.w	8006888 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d005      	beq.n	8006608 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006604:	2b02      	cmp	r3, #2
 8006606:	d130      	bne.n	800666a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	2203      	movs	r2, #3
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4013      	ands	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800663e:	2201      	movs	r2, #1
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	43db      	mvns	r3, r3
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4013      	ands	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	f003 0201 	and.w	r2, r3, #1
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b03      	cmp	r3, #3
 8006674:	d017      	beq.n	80066a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	2203      	movs	r2, #3
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d123      	bne.n	80066fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	08da      	lsrs	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3208      	adds	r2, #8
 80066ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	220f      	movs	r2, #15
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43db      	mvns	r3, r3
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4013      	ands	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	08da      	lsrs	r2, r3, #3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3208      	adds	r2, #8
 80066f4:	6939      	ldr	r1, [r7, #16]
 80066f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	2203      	movs	r2, #3
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4013      	ands	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f003 0203 	and.w	r2, r3, #3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80a6 	beq.w	8006888 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800673c:	4b5b      	ldr	r3, [pc, #364]	; (80068ac <HAL_GPIO_Init+0x2e4>)
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	4a5a      	ldr	r2, [pc, #360]	; (80068ac <HAL_GPIO_Init+0x2e4>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6613      	str	r3, [r2, #96]	; 0x60
 8006748:	4b58      	ldr	r3, [pc, #352]	; (80068ac <HAL_GPIO_Init+0x2e4>)
 800674a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006754:	4a56      	ldr	r2, [pc, #344]	; (80068b0 <HAL_GPIO_Init+0x2e8>)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	089b      	lsrs	r3, r3, #2
 800675a:	3302      	adds	r3, #2
 800675c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	220f      	movs	r2, #15
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	43db      	mvns	r3, r3
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4013      	ands	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800677e:	d01f      	beq.n	80067c0 <HAL_GPIO_Init+0x1f8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a4c      	ldr	r2, [pc, #304]	; (80068b4 <HAL_GPIO_Init+0x2ec>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d019      	beq.n	80067bc <HAL_GPIO_Init+0x1f4>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a4b      	ldr	r2, [pc, #300]	; (80068b8 <HAL_GPIO_Init+0x2f0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_GPIO_Init+0x1f0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a4a      	ldr	r2, [pc, #296]	; (80068bc <HAL_GPIO_Init+0x2f4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00d      	beq.n	80067b4 <HAL_GPIO_Init+0x1ec>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a49      	ldr	r2, [pc, #292]	; (80068c0 <HAL_GPIO_Init+0x2f8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <HAL_GPIO_Init+0x1e8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a48      	ldr	r2, [pc, #288]	; (80068c4 <HAL_GPIO_Init+0x2fc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <HAL_GPIO_Init+0x1e4>
 80067a8:	2305      	movs	r3, #5
 80067aa:	e00a      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067ac:	2306      	movs	r3, #6
 80067ae:	e008      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067b0:	2304      	movs	r3, #4
 80067b2:	e006      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067b4:	2303      	movs	r3, #3
 80067b6:	e004      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e002      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067c0:	2300      	movs	r3, #0
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	f002 0203 	and.w	r2, r2, #3
 80067c8:	0092      	lsls	r2, r2, #2
 80067ca:	4093      	lsls	r3, r2
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067d2:	4937      	ldr	r1, [pc, #220]	; (80068b0 <HAL_GPIO_Init+0x2e8>)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	089b      	lsrs	r3, r3, #2
 80067d8:	3302      	adds	r3, #2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067e0:	4b39      	ldr	r3, [pc, #228]	; (80068c8 <HAL_GPIO_Init+0x300>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4013      	ands	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006804:	4a30      	ldr	r2, [pc, #192]	; (80068c8 <HAL_GPIO_Init+0x300>)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800680a:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <HAL_GPIO_Init+0x300>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	43db      	mvns	r3, r3
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4013      	ands	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800682e:	4a26      	ldr	r2, [pc, #152]	; (80068c8 <HAL_GPIO_Init+0x300>)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <HAL_GPIO_Init+0x300>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	43db      	mvns	r3, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4013      	ands	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006858:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_GPIO_Init+0x300>)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <HAL_GPIO_Init+0x300>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	43db      	mvns	r3, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4013      	ands	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006882:	4a11      	ldr	r2, [pc, #68]	; (80068c8 <HAL_GPIO_Init+0x300>)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3301      	adds	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	f47f ae9d 	bne.w	80065d8 <HAL_GPIO_Init+0x10>
  }
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40010000 	.word	0x40010000
 80068b4:	48000400 	.word	0x48000400
 80068b8:	48000800 	.word	0x48000800
 80068bc:	48000c00 	.word	0x48000c00
 80068c0:	48001000 	.word	0x48001000
 80068c4:	48001400 	.word	0x48001400
 80068c8:	40010400 	.word	0x40010400

080068cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	887b      	ldrh	r3, [r7, #2]
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
 80068e8:	e001      	b.n	80068ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
 8006908:	4613      	mov	r3, r2
 800690a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800690c:	787b      	ldrb	r3, [r7, #1]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006912:	887a      	ldrh	r2, [r7, #2]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006918:	e002      	b.n	8006920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800693e:	887a      	ldrh	r2, [r7, #2]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4013      	ands	r3, r2
 8006944:	041a      	lsls	r2, r3, #16
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	43d9      	mvns	r1, r3
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	400b      	ands	r3, r1
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	619a      	str	r2, [r3, #24]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800696a:	4b08      	ldr	r3, [pc, #32]	; (800698c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006976:	4a05      	ldr	r2, [pc, #20]	; (800698c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f806 	bl	8006990 <HAL_GPIO_EXTI_Callback>
  }
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40010400 	.word	0x40010400

08006990 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d141      	bne.n	8006a3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069b6:	4b4b      	ldr	r3, [pc, #300]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c2:	d131      	bne.n	8006a28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069c4:	4b47      	ldr	r3, [pc, #284]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ca:	4a46      	ldr	r2, [pc, #280]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069d4:	4b43      	ldr	r3, [pc, #268]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069dc:	4a41      	ldr	r2, [pc, #260]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069e4:	4b40      	ldr	r3, [pc, #256]	; (8006ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2232      	movs	r2, #50	; 0x32
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	4a3f      	ldr	r2, [pc, #252]	; (8006aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069f0:	fba2 2303 	umull	r2, r3, r2, r3
 80069f4:	0c9b      	lsrs	r3, r3, #18
 80069f6:	3301      	adds	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069fa:	e002      	b.n	8006a02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a02:	4b38      	ldr	r3, [pc, #224]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0e:	d102      	bne.n	8006a16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f2      	bne.n	80069fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a16:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a22:	d158      	bne.n	8006ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e057      	b.n	8006ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a28:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006a38:	e04d      	b.n	8006ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a40:	d141      	bne.n	8006ac6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a42:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	d131      	bne.n	8006ab4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a50:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a56:	4a23      	ldr	r2, [pc, #140]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a60:	4b20      	ldr	r3, [pc, #128]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a68:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a70:	4b1d      	ldr	r3, [pc, #116]	; (8006ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2232      	movs	r2, #50	; 0x32
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a80:	0c9b      	lsrs	r3, r3, #18
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a86:	e002      	b.n	8006a8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a8e:	4b15      	ldr	r3, [pc, #84]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9a:	d102      	bne.n	8006aa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f2      	bne.n	8006a88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aae:	d112      	bne.n	8006ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e011      	b.n	8006ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ac4:	e007      	b.n	8006ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ac6:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ace:	4a05      	ldr	r2, [pc, #20]	; (8006ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ad4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40007000 	.word	0x40007000
 8006ae8:	20000000 	.word	0x20000000
 8006aec:	431bde83 	.word	0x431bde83

08006af0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006afe:	6093      	str	r3, [r2, #8]
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40007000 	.word	0x40007000

08006b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e306      	b.n	8007130 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d075      	beq.n	8006c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b2e:	4b97      	ldr	r3, [pc, #604]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b38:	4b94      	ldr	r3, [pc, #592]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b0c      	cmp	r3, #12
 8006b46:	d102      	bne.n	8006b4e <HAL_RCC_OscConfig+0x3e>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d002      	beq.n	8006b54 <HAL_RCC_OscConfig+0x44>
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d10b      	bne.n	8006b6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b54:	4b8d      	ldr	r3, [pc, #564]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d05b      	beq.n	8006c18 <HAL_RCC_OscConfig+0x108>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d157      	bne.n	8006c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e2e1      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b74:	d106      	bne.n	8006b84 <HAL_RCC_OscConfig+0x74>
 8006b76:	4b85      	ldr	r3, [pc, #532]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a84      	ldr	r2, [pc, #528]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	e01d      	b.n	8006bc0 <HAL_RCC_OscConfig+0xb0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b8c:	d10c      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x98>
 8006b8e:	4b7f      	ldr	r3, [pc, #508]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7e      	ldr	r2, [pc, #504]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	4b7c      	ldr	r3, [pc, #496]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a7b      	ldr	r2, [pc, #492]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	e00b      	b.n	8006bc0 <HAL_RCC_OscConfig+0xb0>
 8006ba8:	4b78      	ldr	r3, [pc, #480]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a77      	ldr	r2, [pc, #476]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	4b75      	ldr	r3, [pc, #468]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a74      	ldr	r2, [pc, #464]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d013      	beq.n	8006bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fc f988 	bl	8002edc <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bd0:	f7fc f984 	bl	8002edc <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b64      	cmp	r3, #100	; 0x64
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e2a6      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006be2:	4b6a      	ldr	r3, [pc, #424]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCC_OscConfig+0xc0>
 8006bee:	e014      	b.n	8006c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf0:	f7fc f974 	bl	8002edc <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bf8:	f7fc f970 	bl	8002edc <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	; 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e292      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c0a:	4b60      	ldr	r3, [pc, #384]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f0      	bne.n	8006bf8 <HAL_RCC_OscConfig+0xe8>
 8006c16:	e000      	b.n	8006c1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d075      	beq.n	8006d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c26:	4b59      	ldr	r3, [pc, #356]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c30:	4b56      	ldr	r3, [pc, #344]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b0c      	cmp	r3, #12
 8006c3e:	d102      	bne.n	8006c46 <HAL_RCC_OscConfig+0x136>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d002      	beq.n	8006c4c <HAL_RCC_OscConfig+0x13c>
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d11f      	bne.n	8006c8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c4c:	4b4f      	ldr	r3, [pc, #316]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_RCC_OscConfig+0x154>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e265      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c64:	4b49      	ldr	r3, [pc, #292]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	061b      	lsls	r3, r3, #24
 8006c72:	4946      	ldr	r1, [pc, #280]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c78:	4b45      	ldr	r3, [pc, #276]	; (8006d90 <HAL_RCC_OscConfig+0x280>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fc f8e1 	bl	8002e44 <HAL_InitTick>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d043      	beq.n	8006d10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e251      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d023      	beq.n	8006cdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c94:	4b3d      	ldr	r3, [pc, #244]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3c      	ldr	r2, [pc, #240]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fc f91c 	bl	8002edc <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ca8:	f7fc f918 	bl	8002edc <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e23a      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cba:	4b34      	ldr	r3, [pc, #208]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc6:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	061b      	lsls	r3, r3, #24
 8006cd4:	492d      	ldr	r1, [pc, #180]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	604b      	str	r3, [r1, #4]
 8006cda:	e01a      	b.n	8006d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cdc:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fc f8f8 	bl	8002edc <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf0:	f7fc f8f4 	bl	8002edc <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e216      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d02:	4b22      	ldr	r3, [pc, #136]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x1e0>
 8006d0e:	e000      	b.n	8006d12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d041      	beq.n	8006da2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01c      	beq.n	8006d60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d26:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d2c:	4a17      	ldr	r2, [pc, #92]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d36:	f7fc f8d1 	bl	8002edc <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d3c:	e008      	b.n	8006d50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d3e:	f7fc f8cd 	bl	8002edc <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e1ef      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d50:	4b0e      	ldr	r3, [pc, #56]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0ef      	beq.n	8006d3e <HAL_RCC_OscConfig+0x22e>
 8006d5e:	e020      	b.n	8006da2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d66:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_RCC_OscConfig+0x27c>)
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d70:	f7fc f8b4 	bl	8002edc <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d76:	e00d      	b.n	8006d94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d78:	f7fc f8b0 	bl	8002edc <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d906      	bls.n	8006d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e1d2      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
 8006d8a:	bf00      	nop
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d94:	4b8c      	ldr	r3, [pc, #560]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1ea      	bne.n	8006d78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80a6 	beq.w	8006efc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006db4:	4b84      	ldr	r3, [pc, #528]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x2b4>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCC_OscConfig+0x2b6>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00d      	beq.n	8006de6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dca:	4b7f      	ldr	r3, [pc, #508]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dce:	4a7e      	ldr	r2, [pc, #504]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8006dd6:	4b7c      	ldr	r3, [pc, #496]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006de2:	2301      	movs	r3, #1
 8006de4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006de6:	4b79      	ldr	r3, [pc, #484]	; (8006fcc <HAL_RCC_OscConfig+0x4bc>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d118      	bne.n	8006e24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006df2:	4b76      	ldr	r3, [pc, #472]	; (8006fcc <HAL_RCC_OscConfig+0x4bc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a75      	ldr	r2, [pc, #468]	; (8006fcc <HAL_RCC_OscConfig+0x4bc>)
 8006df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dfe:	f7fc f86d 	bl	8002edc <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e06:	f7fc f869 	bl	8002edc <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e18b      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e18:	4b6c      	ldr	r3, [pc, #432]	; (8006fcc <HAL_RCC_OscConfig+0x4bc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d108      	bne.n	8006e3e <HAL_RCC_OscConfig+0x32e>
 8006e2c:	4b66      	ldr	r3, [pc, #408]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	4a65      	ldr	r2, [pc, #404]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e3c:	e024      	b.n	8006e88 <HAL_RCC_OscConfig+0x378>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d110      	bne.n	8006e68 <HAL_RCC_OscConfig+0x358>
 8006e46:	4b60      	ldr	r3, [pc, #384]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4c:	4a5e      	ldr	r2, [pc, #376]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e4e:	f043 0304 	orr.w	r3, r3, #4
 8006e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e56:	4b5c      	ldr	r3, [pc, #368]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5c:	4a5a      	ldr	r2, [pc, #360]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e5e:	f043 0301 	orr.w	r3, r3, #1
 8006e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e66:	e00f      	b.n	8006e88 <HAL_RCC_OscConfig+0x378>
 8006e68:	4b57      	ldr	r3, [pc, #348]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6e:	4a56      	ldr	r2, [pc, #344]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e78:	4b53      	ldr	r3, [pc, #332]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	4a52      	ldr	r2, [pc, #328]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006e80:	f023 0304 	bic.w	r3, r3, #4
 8006e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fc f824 	bl	8002edc <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fc f820 	bl	8002edc <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e140      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eae:	4b46      	ldr	r3, [pc, #280]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0ed      	beq.n	8006e98 <HAL_RCC_OscConfig+0x388>
 8006ebc:	e015      	b.n	8006eea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fc f80d 	bl	8002edc <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ec4:	e00a      	b.n	8006edc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fc f809 	bl	8002edc <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e129      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006edc:	4b3a      	ldr	r3, [pc, #232]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1ed      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d105      	bne.n	8006efc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef0:	4b35      	ldr	r3, [pc, #212]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef4:	4a34      	ldr	r2, [pc, #208]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006efa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d03c      	beq.n	8006f82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01c      	beq.n	8006f4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f10:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f16:	4a2c      	ldr	r2, [pc, #176]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006f18:	f043 0301 	orr.w	r3, r3, #1
 8006f1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f20:	f7fb ffdc 	bl	8002edc <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f28:	f7fb ffd8 	bl	8002edc <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e0fa      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f3a:	4b23      	ldr	r3, [pc, #140]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0ef      	beq.n	8006f28 <HAL_RCC_OscConfig+0x418>
 8006f48:	e01b      	b.n	8006f82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f4a:	4b1f      	ldr	r3, [pc, #124]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f50:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006f52:	f023 0301 	bic.w	r3, r3, #1
 8006f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5a:	f7fb ffbf 	bl	8002edc <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f62:	f7fb ffbb 	bl	8002edc <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e0dd      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1ef      	bne.n	8006f62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80d1 	beq.w	800712e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 030c 	and.w	r3, r3, #12
 8006f94:	2b0c      	cmp	r3, #12
 8006f96:	f000 808b 	beq.w	80070b0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d15e      	bne.n	8007060 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <HAL_RCC_OscConfig+0x4b8>)
 8006fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fae:	f7fb ff95 	bl	8002edc <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fb4:	e00c      	b.n	8006fd0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb6:	f7fb ff91 	bl	8002edc <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d905      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e0b3      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fd0:	4b59      	ldr	r3, [pc, #356]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ec      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fdc:	4b56      	ldr	r3, [pc, #344]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	4b56      	ldr	r3, [pc, #344]	; (800713c <HAL_RCC_OscConfig+0x62c>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6a11      	ldr	r1, [r2, #32]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fec:	3a01      	subs	r2, #1
 8006fee:	0112      	lsls	r2, r2, #4
 8006ff0:	4311      	orrs	r1, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006ff6:	0212      	lsls	r2, r2, #8
 8006ff8:	4311      	orrs	r1, r2
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ffe:	0852      	lsrs	r2, r2, #1
 8007000:	3a01      	subs	r2, #1
 8007002:	0552      	lsls	r2, r2, #21
 8007004:	4311      	orrs	r1, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800700a:	0852      	lsrs	r2, r2, #1
 800700c:	3a01      	subs	r2, #1
 800700e:	0652      	lsls	r2, r2, #25
 8007010:	4311      	orrs	r1, r2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007016:	06d2      	lsls	r2, r2, #27
 8007018:	430a      	orrs	r2, r1
 800701a:	4947      	ldr	r1, [pc, #284]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 800701c:	4313      	orrs	r3, r2
 800701e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007020:	4b45      	ldr	r3, [pc, #276]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a44      	ldr	r2, [pc, #272]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8007026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800702a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800702c:	4b42      	ldr	r3, [pc, #264]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4a41      	ldr	r2, [pc, #260]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8007032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007036:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fb ff50 	bl	8002edc <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007040:	f7fb ff4c 	bl	8002edc <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e06e      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007052:	4b39      	ldr	r3, [pc, #228]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x530>
 800705e:	e066      	b.n	800712e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007060:	4b35      	ldr	r3, [pc, #212]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a34      	ldr	r2, [pc, #208]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8007066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800706a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800706c:	4b32      	ldr	r3, [pc, #200]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4a31      	ldr	r2, [pc, #196]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007078:	4b2f      	ldr	r3, [pc, #188]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a2e      	ldr	r2, [pc, #184]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 800707e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007086:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fb ff28 	bl	8002edc <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007090:	f7fb ff24 	bl	8002edc <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e046      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070a2:	4b25      	ldr	r3, [pc, #148]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f0      	bne.n	8007090 <HAL_RCC_OscConfig+0x580>
 80070ae:	e03e      	b.n	800712e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e039      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80070bc:	4b1e      	ldr	r3, [pc, #120]	; (8007138 <HAL_RCC_OscConfig+0x628>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f003 0203 	and.w	r2, r3, #3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d12c      	bne.n	800712a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	3b01      	subs	r3, #1
 80070dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070de:	429a      	cmp	r2, r3
 80070e0:	d123      	bne.n	800712a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d11b      	bne.n	800712a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070fe:	429a      	cmp	r2, r3
 8007100:	d113      	bne.n	800712a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	085b      	lsrs	r3, r3, #1
 800710e:	3b01      	subs	r3, #1
 8007110:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007112:	429a      	cmp	r2, r3
 8007114:	d109      	bne.n	800712a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	3b01      	subs	r3, #1
 8007124:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007126:	429a      	cmp	r2, r3
 8007128:	d001      	beq.n	800712e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40021000 	.word	0x40021000
 800713c:	019f800c 	.word	0x019f800c

08007140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e11e      	b.n	8007396 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007158:	4b91      	ldr	r3, [pc, #580]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d910      	bls.n	8007188 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007166:	4b8e      	ldr	r3, [pc, #568]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f023 020f 	bic.w	r2, r3, #15
 800716e:	498c      	ldr	r1, [pc, #560]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	4313      	orrs	r3, r2
 8007174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007176:	4b8a      	ldr	r3, [pc, #552]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d001      	beq.n	8007188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e106      	b.n	8007396 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d073      	beq.n	800727c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d129      	bne.n	80071f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800719c:	4b81      	ldr	r3, [pc, #516]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e0f4      	b.n	8007396 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80071ac:	f000 f99e 	bl	80074ec <RCC_GetSysClockFreqFromPLLSource>
 80071b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4a7c      	ldr	r2, [pc, #496]	; (80073a8 <HAL_RCC_ClockConfig+0x268>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d93f      	bls.n	800723a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071ba:	4b7a      	ldr	r3, [pc, #488]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d033      	beq.n	800723a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d12f      	bne.n	800723a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071da:	4b72      	ldr	r3, [pc, #456]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071e2:	4a70      	ldr	r2, [pc, #448]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80071e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80071ea:	2380      	movs	r3, #128	; 0x80
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e024      	b.n	800723a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d107      	bne.n	8007208 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071f8:	4b6a      	ldr	r3, [pc, #424]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e0c6      	b.n	8007396 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007208:	4b66      	ldr	r3, [pc, #408]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e0be      	b.n	8007396 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007218:	f000 f8ce 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 800721c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4a61      	ldr	r2, [pc, #388]	; (80073a8 <HAL_RCC_ClockConfig+0x268>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d909      	bls.n	800723a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007226:	4b5f      	ldr	r3, [pc, #380]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800722e:	4a5d      	ldr	r2, [pc, #372]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007234:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007236:	2380      	movs	r3, #128	; 0x80
 8007238:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800723a:	4b5a      	ldr	r3, [pc, #360]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4957      	ldr	r1, [pc, #348]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007248:	4313      	orrs	r3, r2
 800724a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800724c:	f7fb fe46 	bl	8002edc <HAL_GetTick>
 8007250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007252:	e00a      	b.n	800726a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007254:	f7fb fe42 	bl	8002edc <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e095      	b.n	8007396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726a:	4b4e      	ldr	r3, [pc, #312]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 020c 	and.w	r2, r3, #12
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	429a      	cmp	r2, r3
 800727a:	d1eb      	bne.n	8007254 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d023      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007294:	4b43      	ldr	r3, [pc, #268]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	4a42      	ldr	r2, [pc, #264]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 800729a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800729e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80072ac:	4b3d      	ldr	r3, [pc, #244]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072b4:	4a3b      	ldr	r2, [pc, #236]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80072b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072bc:	4b39      	ldr	r3, [pc, #228]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	4936      	ldr	r1, [pc, #216]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	608b      	str	r3, [r1, #8]
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2b80      	cmp	r3, #128	; 0x80
 80072d4:	d105      	bne.n	80072e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80072d6:	4b33      	ldr	r3, [pc, #204]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	4a32      	ldr	r2, [pc, #200]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 80072dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072e2:	4b2f      	ldr	r3, [pc, #188]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d21d      	bcs.n	800732c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072f0:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f023 020f 	bic.w	r2, r3, #15
 80072f8:	4929      	ldr	r1, [pc, #164]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007300:	f7fb fdec 	bl	8002edc <HAL_GetTick>
 8007304:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007306:	e00a      	b.n	800731e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007308:	f7fb fde8 	bl	8002edc <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f241 3288 	movw	r2, #5000	; 0x1388
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e03b      	b.n	8007396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800731e:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <HAL_RCC_ClockConfig+0x260>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d1ed      	bne.n	8007308 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007338:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	4917      	ldr	r1, [pc, #92]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007346:	4313      	orrs	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	490f      	ldr	r1, [pc, #60]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007366:	4313      	orrs	r3, r2
 8007368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800736a:	f000 f825 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 800736e:	4602      	mov	r2, r0
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <HAL_RCC_ClockConfig+0x264>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	490c      	ldr	r1, [pc, #48]	; (80073ac <HAL_RCC_ClockConfig+0x26c>)
 800737c:	5ccb      	ldrb	r3, [r1, r3]
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	fa22 f303 	lsr.w	r3, r2, r3
 8007386:	4a0a      	ldr	r2, [pc, #40]	; (80073b0 <HAL_RCC_ClockConfig+0x270>)
 8007388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <HAL_RCC_ClockConfig+0x274>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f7fb fd58 	bl	8002e44 <HAL_InitTick>
 8007394:	4603      	mov	r3, r0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40022000 	.word	0x40022000
 80073a4:	40021000 	.word	0x40021000
 80073a8:	04c4b400 	.word	0x04c4b400
 80073ac:	0800b144 	.word	0x0800b144
 80073b0:	20000000 	.word	0x20000000
 80073b4:	20000004 	.word	0x20000004

080073b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80073be:	4b2c      	ldr	r3, [pc, #176]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d102      	bne.n	80073d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80073ca:	4b2a      	ldr	r3, [pc, #168]	; (8007474 <HAL_RCC_GetSysClockFreq+0xbc>)
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	e047      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80073d0:	4b27      	ldr	r3, [pc, #156]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 030c 	and.w	r3, r3, #12
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d102      	bne.n	80073e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80073dc:	4b26      	ldr	r3, [pc, #152]	; (8007478 <HAL_RCC_GetSysClockFreq+0xc0>)
 80073de:	613b      	str	r3, [r7, #16]
 80073e0:	e03e      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80073e2:	4b23      	ldr	r3, [pc, #140]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 030c 	and.w	r3, r3, #12
 80073ea:	2b0c      	cmp	r3, #12
 80073ec:	d136      	bne.n	800745c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073ee:	4b20      	ldr	r3, [pc, #128]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073f8:	4b1d      	ldr	r3, [pc, #116]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	091b      	lsrs	r3, r3, #4
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	3301      	adds	r3, #1
 8007404:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b03      	cmp	r3, #3
 800740a:	d10c      	bne.n	8007426 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800740c:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_RCC_GetSysClockFreq+0xc0>)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	fbb2 f3f3 	udiv	r3, r2, r3
 8007414:	4a16      	ldr	r2, [pc, #88]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007416:	68d2      	ldr	r2, [r2, #12]
 8007418:	0a12      	lsrs	r2, r2, #8
 800741a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	617b      	str	r3, [r7, #20]
      break;
 8007424:	e00c      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007426:	4a13      	ldr	r2, [pc, #76]	; (8007474 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	4a10      	ldr	r2, [pc, #64]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007430:	68d2      	ldr	r2, [r2, #12]
 8007432:	0a12      	lsrs	r2, r2, #8
 8007434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007438:	fb02 f303 	mul.w	r3, r2, r3
 800743c:	617b      	str	r3, [r7, #20]
      break;
 800743e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	0e5b      	lsrs	r3, r3, #25
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	3301      	adds	r3, #1
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	e001      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007460:	693b      	ldr	r3, [r7, #16]
}
 8007462:	4618      	mov	r0, r3
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40021000 	.word	0x40021000
 8007474:	00f42400 	.word	0x00f42400
 8007478:	016e3600 	.word	0x016e3600

0800747c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007480:	4b03      	ldr	r3, [pc, #12]	; (8007490 <HAL_RCC_GetHCLKFreq+0x14>)
 8007482:	681b      	ldr	r3, [r3, #0]
}
 8007484:	4618      	mov	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000000 	.word	0x20000000

08007494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007498:	f7ff fff0 	bl	800747c <HAL_RCC_GetHCLKFreq>
 800749c:	4602      	mov	r2, r0
 800749e:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	4904      	ldr	r1, [pc, #16]	; (80074bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80074aa:	5ccb      	ldrb	r3, [r1, r3]
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	40021000 	.word	0x40021000
 80074bc:	0800b154 	.word	0x0800b154

080074c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80074c4:	f7ff ffda 	bl	800747c <HAL_RCC_GetHCLKFreq>
 80074c8:	4602      	mov	r2, r0
 80074ca:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	0adb      	lsrs	r3, r3, #11
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	4904      	ldr	r1, [pc, #16]	; (80074e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074d6:	5ccb      	ldrb	r3, [r1, r3]
 80074d8:	f003 031f 	and.w	r3, r3, #31
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40021000 	.word	0x40021000
 80074e8:	0800b154 	.word	0x0800b154

080074ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074f2:	4b1e      	ldr	r3, [pc, #120]	; (800756c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074fc:	4b1b      	ldr	r3, [pc, #108]	; (800756c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	091b      	lsrs	r3, r3, #4
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	3301      	adds	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b03      	cmp	r3, #3
 800750e:	d10c      	bne.n	800752a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007510:	4a17      	ldr	r2, [pc, #92]	; (8007570 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	4a14      	ldr	r2, [pc, #80]	; (800756c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800751a:	68d2      	ldr	r2, [r2, #12]
 800751c:	0a12      	lsrs	r2, r2, #8
 800751e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	617b      	str	r3, [r7, #20]
    break;
 8007528:	e00c      	b.n	8007544 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800752a:	4a12      	ldr	r2, [pc, #72]	; (8007574 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007532:	4a0e      	ldr	r2, [pc, #56]	; (800756c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007534:	68d2      	ldr	r2, [r2, #12]
 8007536:	0a12      	lsrs	r2, r2, #8
 8007538:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800753c:	fb02 f303 	mul.w	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]
    break;
 8007542:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007544:	4b09      	ldr	r3, [pc, #36]	; (800756c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	0e5b      	lsrs	r3, r3, #25
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	3301      	adds	r3, #1
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800755e:	687b      	ldr	r3, [r7, #4]
}
 8007560:	4618      	mov	r0, r3
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40021000 	.word	0x40021000
 8007570:	016e3600 	.word	0x016e3600
 8007574:	00f42400 	.word	0x00f42400

08007578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007580:	2300      	movs	r3, #0
 8007582:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007584:	2300      	movs	r3, #0
 8007586:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 8098 	beq.w	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007596:	2300      	movs	r3, #0
 8007598:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800759a:	4b43      	ldr	r3, [pc, #268]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800759c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a6:	4b40      	ldr	r3, [pc, #256]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075aa:	4a3f      	ldr	r2, [pc, #252]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b0:	6593      	str	r3, [r2, #88]	; 0x58
 80075b2:	4b3d      	ldr	r3, [pc, #244]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075be:	2301      	movs	r3, #1
 80075c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c2:	4b3a      	ldr	r3, [pc, #232]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a39      	ldr	r2, [pc, #228]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075ce:	f7fb fc85 	bl	8002edc <HAL_GetTick>
 80075d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d4:	e009      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d6:	f7fb fc81 	bl	8002edc <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d902      	bls.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	74fb      	strb	r3, [r7, #19]
        break;
 80075e8:	e005      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ea:	4b30      	ldr	r3, [pc, #192]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0ef      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80075f6:	7cfb      	ldrb	r3, [r7, #19]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d159      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075fc:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007606:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01e      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	429a      	cmp	r2, r3
 8007616:	d019      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007618:	4b23      	ldr	r3, [pc, #140]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007622:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007624:	4b20      	ldr	r3, [pc, #128]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762a:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800762c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007634:	4b1c      	ldr	r3, [pc, #112]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763a:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800763c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007644:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d016      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007656:	f7fb fc41 	bl	8002edc <HAL_GetTick>
 800765a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800765c:	e00b      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765e:	f7fb fc3d 	bl	8002edc <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f241 3288 	movw	r2, #5000	; 0x1388
 800766c:	4293      	cmp	r3, r2
 800766e:	d902      	bls.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	74fb      	strb	r3, [r7, #19]
            break;
 8007674:	e006      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0ec      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007684:	7cfb      	ldrb	r3, [r7, #19]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007698:	4903      	ldr	r1, [pc, #12]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80076a0:	e008      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076a2:	7cfb      	ldrb	r3, [r7, #19]
 80076a4:	74bb      	strb	r3, [r7, #18]
 80076a6:	e005      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80076a8:	40021000 	.word	0x40021000
 80076ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	7cfb      	ldrb	r3, [r7, #19]
 80076b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076b4:	7c7b      	ldrb	r3, [r7, #17]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d105      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ba:	4ba7      	ldr	r3, [pc, #668]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	4aa6      	ldr	r2, [pc, #664]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076d2:	4ba1      	ldr	r3, [pc, #644]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f023 0203 	bic.w	r2, r3, #3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	499d      	ldr	r1, [pc, #628]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076f4:	4b98      	ldr	r3, [pc, #608]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fa:	f023 020c 	bic.w	r2, r3, #12
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	4995      	ldr	r1, [pc, #596]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007716:	4b90      	ldr	r3, [pc, #576]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	498c      	ldr	r1, [pc, #560]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007738:	4b87      	ldr	r3, [pc, #540]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	4984      	ldr	r1, [pc, #528]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800775a:	4b7f      	ldr	r3, [pc, #508]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	497b      	ldr	r1, [pc, #492]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800777c:	4b76      	ldr	r3, [pc, #472]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	4973      	ldr	r1, [pc, #460]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800779e:	4b6e      	ldr	r3, [pc, #440]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	496a      	ldr	r1, [pc, #424]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077c0:	4b65      	ldr	r3, [pc, #404]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	4962      	ldr	r1, [pc, #392]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077e2:	4b5d      	ldr	r3, [pc, #372]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	4959      	ldr	r1, [pc, #356]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007804:	4b54      	ldr	r3, [pc, #336]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800780a:	f023 0203 	bic.w	r2, r3, #3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	4951      	ldr	r1, [pc, #324]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007814:	4313      	orrs	r3, r2
 8007816:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007826:	4b4c      	ldr	r3, [pc, #304]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4948      	ldr	r1, [pc, #288]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007836:	4313      	orrs	r3, r2
 8007838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007844:	2b00      	cmp	r3, #0
 8007846:	d015      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007848:	4b43      	ldr	r3, [pc, #268]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800784a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	4940      	ldr	r1, [pc, #256]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007858:	4313      	orrs	r3, r2
 800785a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007866:	d105      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007868:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	4a3a      	ldr	r2, [pc, #232]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800786e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007872:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800787c:	2b00      	cmp	r3, #0
 800787e:	d015      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007880:	4b35      	ldr	r3, [pc, #212]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	4932      	ldr	r1, [pc, #200]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800789e:	d105      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078a0:	4b2d      	ldr	r3, [pc, #180]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4a2c      	ldr	r2, [pc, #176]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d015      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078b8:	4b27      	ldr	r3, [pc, #156]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	4924      	ldr	r1, [pc, #144]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078d6:	d105      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078d8:	4b1f      	ldr	r3, [pc, #124]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	4a1e      	ldr	r2, [pc, #120]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d015      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078f0:	4b19      	ldr	r3, [pc, #100]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	4916      	ldr	r1, [pc, #88]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007900:	4313      	orrs	r3, r2
 8007902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800790e:	d105      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007910:	4b11      	ldr	r3, [pc, #68]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	4a10      	ldr	r2, [pc, #64]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800791a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d019      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	4908      	ldr	r1, [pc, #32]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007938:	4313      	orrs	r3, r2
 800793a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007946:	d109      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	4a02      	ldr	r2, [pc, #8]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007952:	60d3      	str	r3, [r2, #12]
 8007954:	e002      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007956:	bf00      	nop
 8007958:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d015      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007968:	4b29      	ldr	r3, [pc, #164]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800796a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	4926      	ldr	r1, [pc, #152]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007978:	4313      	orrs	r3, r2
 800797a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007986:	d105      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007988:	4b21      	ldr	r3, [pc, #132]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4a20      	ldr	r2, [pc, #128]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800798e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007992:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d015      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80079a0:	4b1b      	ldr	r3, [pc, #108]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ae:	4918      	ldr	r1, [pc, #96]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079be:	d105      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079c0:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	4a12      	ldr	r2, [pc, #72]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d015      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80079d8:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e6:	490a      	ldr	r1, [pc, #40]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f6:	d105      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079f8:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4a04      	ldr	r2, [pc, #16]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007a04:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	40021000 	.word	0x40021000

08007a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e049      	b.n	8007aba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fa ffd0 	bl	80029e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f000 fe08 	bl	8008668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d001      	beq.n	8007adc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e04c      	b.n	8007b76 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a26      	ldr	r2, [pc, #152]	; (8007b84 <HAL_TIM_Base_Start+0xc0>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d022      	beq.n	8007b34 <HAL_TIM_Base_Start+0x70>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af6:	d01d      	beq.n	8007b34 <HAL_TIM_Base_Start+0x70>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a22      	ldr	r2, [pc, #136]	; (8007b88 <HAL_TIM_Base_Start+0xc4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d018      	beq.n	8007b34 <HAL_TIM_Base_Start+0x70>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a21      	ldr	r2, [pc, #132]	; (8007b8c <HAL_TIM_Base_Start+0xc8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d013      	beq.n	8007b34 <HAL_TIM_Base_Start+0x70>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <HAL_TIM_Base_Start+0xcc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00e      	beq.n	8007b34 <HAL_TIM_Base_Start+0x70>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <HAL_TIM_Base_Start+0xd0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_TIM_Base_Start+0x70>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <HAL_TIM_Base_Start+0xd4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_TIM_Base_Start+0x70>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1b      	ldr	r2, [pc, #108]	; (8007b9c <HAL_TIM_Base_Start+0xd8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d115      	bne.n	8007b60 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <HAL_TIM_Base_Start+0xdc>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b06      	cmp	r3, #6
 8007b44:	d015      	beq.n	8007b72 <HAL_TIM_Base_Start+0xae>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4c:	d011      	beq.n	8007b72 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	e008      	b.n	8007b72 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e000      	b.n	8007b74 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40000400 	.word	0x40000400
 8007b8c:	40000800 	.word	0x40000800
 8007b90:	40000c00 	.word	0x40000c00
 8007b94:	40013400 	.word	0x40013400
 8007b98:	40014000 	.word	0x40014000
 8007b9c:	40015000 	.word	0x40015000
 8007ba0:	00010007 	.word	0x00010007

08007ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d001      	beq.n	8007bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e054      	b.n	8007c66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a26      	ldr	r2, [pc, #152]	; (8007c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d022      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x80>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be6:	d01d      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x80>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a22      	ldr	r2, [pc, #136]	; (8007c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d018      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x80>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d013      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x80>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1f      	ldr	r2, [pc, #124]	; (8007c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00e      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x80>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1e      	ldr	r2, [pc, #120]	; (8007c84 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d009      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x80>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1c      	ldr	r2, [pc, #112]	; (8007c88 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x80>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1b      	ldr	r2, [pc, #108]	; (8007c8c <HAL_TIM_Base_Start_IT+0xe8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d115      	bne.n	8007c50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <HAL_TIM_Base_Start_IT+0xec>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d015      	beq.n	8007c62 <HAL_TIM_Base_Start_IT+0xbe>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3c:	d011      	beq.n	8007c62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e008      	b.n	8007c62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e000      	b.n	8007c64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40012c00 	.word	0x40012c00
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	40000c00 	.word	0x40000c00
 8007c84:	40013400 	.word	0x40013400
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40015000 	.word	0x40015000
 8007c90:	00010007 	.word	0x00010007

08007c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e049      	b.n	8007d3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fa fe10 	bl	80028e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f000 fcc8 	bl	8008668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <HAL_TIM_PWM_Start+0x24>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	bf14      	ite	ne
 8007d60:	2301      	movne	r3, #1
 8007d62:	2300      	moveq	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	e03c      	b.n	8007de2 <HAL_TIM_PWM_Start+0x9e>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d109      	bne.n	8007d82 <HAL_TIM_PWM_Start+0x3e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	bf14      	ite	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	2300      	moveq	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	e02f      	b.n	8007de2 <HAL_TIM_PWM_Start+0x9e>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d109      	bne.n	8007d9c <HAL_TIM_PWM_Start+0x58>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	bf14      	ite	ne
 8007d94:	2301      	movne	r3, #1
 8007d96:	2300      	moveq	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	e022      	b.n	8007de2 <HAL_TIM_PWM_Start+0x9e>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b0c      	cmp	r3, #12
 8007da0:	d109      	bne.n	8007db6 <HAL_TIM_PWM_Start+0x72>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	bf14      	ite	ne
 8007dae:	2301      	movne	r3, #1
 8007db0:	2300      	moveq	r3, #0
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	e015      	b.n	8007de2 <HAL_TIM_PWM_Start+0x9e>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d109      	bne.n	8007dd0 <HAL_TIM_PWM_Start+0x8c>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	bf14      	ite	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	2300      	moveq	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	e008      	b.n	8007de2 <HAL_TIM_PWM_Start+0x9e>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	bf14      	ite	ne
 8007ddc:	2301      	movne	r3, #1
 8007dde:	2300      	moveq	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e0a6      	b.n	8007f38 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <HAL_TIM_PWM_Start+0xb6>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df8:	e023      	b.n	8007e42 <HAL_TIM_PWM_Start+0xfe>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d104      	bne.n	8007e0a <HAL_TIM_PWM_Start+0xc6>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e08:	e01b      	b.n	8007e42 <HAL_TIM_PWM_Start+0xfe>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d104      	bne.n	8007e1a <HAL_TIM_PWM_Start+0xd6>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e18:	e013      	b.n	8007e42 <HAL_TIM_PWM_Start+0xfe>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b0c      	cmp	r3, #12
 8007e1e:	d104      	bne.n	8007e2a <HAL_TIM_PWM_Start+0xe6>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e28:	e00b      	b.n	8007e42 <HAL_TIM_PWM_Start+0xfe>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d104      	bne.n	8007e3a <HAL_TIM_PWM_Start+0xf6>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e38:	e003      	b.n	8007e42 <HAL_TIM_PWM_Start+0xfe>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2201      	movs	r2, #1
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 f908 	bl	8009060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a3a      	ldr	r2, [pc, #232]	; (8007f40 <HAL_TIM_PWM_Start+0x1fc>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d018      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x148>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a39      	ldr	r2, [pc, #228]	; (8007f44 <HAL_TIM_PWM_Start+0x200>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x148>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a37      	ldr	r2, [pc, #220]	; (8007f48 <HAL_TIM_PWM_Start+0x204>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00e      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x148>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a36      	ldr	r2, [pc, #216]	; (8007f4c <HAL_TIM_PWM_Start+0x208>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d009      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x148>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a34      	ldr	r2, [pc, #208]	; (8007f50 <HAL_TIM_PWM_Start+0x20c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d004      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x148>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a33      	ldr	r2, [pc, #204]	; (8007f54 <HAL_TIM_PWM_Start+0x210>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIM_PWM_Start+0x14c>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <HAL_TIM_PWM_Start+0x14e>
 8007e90:	2300      	movs	r3, #0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a25      	ldr	r2, [pc, #148]	; (8007f40 <HAL_TIM_PWM_Start+0x1fc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d022      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x1b2>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb8:	d01d      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x1b2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a26      	ldr	r2, [pc, #152]	; (8007f58 <HAL_TIM_PWM_Start+0x214>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d018      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x1b2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a24      	ldr	r2, [pc, #144]	; (8007f5c <HAL_TIM_PWM_Start+0x218>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d013      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x1b2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a23      	ldr	r2, [pc, #140]	; (8007f60 <HAL_TIM_PWM_Start+0x21c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00e      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x1b2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a19      	ldr	r2, [pc, #100]	; (8007f44 <HAL_TIM_PWM_Start+0x200>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x1b2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <HAL_TIM_PWM_Start+0x204>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d004      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x1b2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <HAL_TIM_PWM_Start+0x210>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d115      	bne.n	8007f22 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <HAL_TIM_PWM_Start+0x220>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b06      	cmp	r3, #6
 8007f06:	d015      	beq.n	8007f34 <HAL_TIM_PWM_Start+0x1f0>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0e:	d011      	beq.n	8007f34 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f20:	e008      	b.n	8007f34 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0201 	orr.w	r2, r2, #1
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	e000      	b.n	8007f36 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40013400 	.word	0x40013400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800
 8007f54:	40015000 	.word	0x40015000
 8007f58:	40000400 	.word	0x40000400
 8007f5c:	40000800 	.word	0x40000800
 8007f60:	40000c00 	.word	0x40000c00
 8007f64:	00010007 	.word	0x00010007

08007f68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e049      	b.n	800800e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fa fcc6 	bl	8002920 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f000 fb5e 	bl	8008668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <HAL_TIM_IC_Start_IT+0x1e>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008032:	b2db      	uxtb	r3, r3
 8008034:	e023      	b.n	800807e <HAL_TIM_IC_Start_IT+0x66>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b04      	cmp	r3, #4
 800803a:	d104      	bne.n	8008046 <HAL_TIM_IC_Start_IT+0x2e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008042:	b2db      	uxtb	r3, r3
 8008044:	e01b      	b.n	800807e <HAL_TIM_IC_Start_IT+0x66>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b08      	cmp	r3, #8
 800804a:	d104      	bne.n	8008056 <HAL_TIM_IC_Start_IT+0x3e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008052:	b2db      	uxtb	r3, r3
 8008054:	e013      	b.n	800807e <HAL_TIM_IC_Start_IT+0x66>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b0c      	cmp	r3, #12
 800805a:	d104      	bne.n	8008066 <HAL_TIM_IC_Start_IT+0x4e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008062:	b2db      	uxtb	r3, r3
 8008064:	e00b      	b.n	800807e <HAL_TIM_IC_Start_IT+0x66>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b10      	cmp	r3, #16
 800806a:	d104      	bne.n	8008076 <HAL_TIM_IC_Start_IT+0x5e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008072:	b2db      	uxtb	r3, r3
 8008074:	e003      	b.n	800807e <HAL_TIM_IC_Start_IT+0x66>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800807c:	b2db      	uxtb	r3, r3
 800807e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d104      	bne.n	8008090 <HAL_TIM_IC_Start_IT+0x78>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800808c:	b2db      	uxtb	r3, r3
 800808e:	e013      	b.n	80080b8 <HAL_TIM_IC_Start_IT+0xa0>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b04      	cmp	r3, #4
 8008094:	d104      	bne.n	80080a0 <HAL_TIM_IC_Start_IT+0x88>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800809c:	b2db      	uxtb	r3, r3
 800809e:	e00b      	b.n	80080b8 <HAL_TIM_IC_Start_IT+0xa0>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	d104      	bne.n	80080b0 <HAL_TIM_IC_Start_IT+0x98>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	e003      	b.n	80080b8 <HAL_TIM_IC_Start_IT+0xa0>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d102      	bne.n	80080c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80080c0:	7b7b      	ldrb	r3, [r7, #13]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d001      	beq.n	80080ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e0e2      	b.n	8008290 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <HAL_TIM_IC_Start_IT+0xc2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d8:	e023      	b.n	8008122 <HAL_TIM_IC_Start_IT+0x10a>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b04      	cmp	r3, #4
 80080de:	d104      	bne.n	80080ea <HAL_TIM_IC_Start_IT+0xd2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080e8:	e01b      	b.n	8008122 <HAL_TIM_IC_Start_IT+0x10a>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	d104      	bne.n	80080fa <HAL_TIM_IC_Start_IT+0xe2>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080f8:	e013      	b.n	8008122 <HAL_TIM_IC_Start_IT+0x10a>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b0c      	cmp	r3, #12
 80080fe:	d104      	bne.n	800810a <HAL_TIM_IC_Start_IT+0xf2>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008108:	e00b      	b.n	8008122 <HAL_TIM_IC_Start_IT+0x10a>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b10      	cmp	r3, #16
 800810e:	d104      	bne.n	800811a <HAL_TIM_IC_Start_IT+0x102>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008118:	e003      	b.n	8008122 <HAL_TIM_IC_Start_IT+0x10a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2202      	movs	r2, #2
 800811e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <HAL_TIM_IC_Start_IT+0x11a>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008130:	e013      	b.n	800815a <HAL_TIM_IC_Start_IT+0x142>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b04      	cmp	r3, #4
 8008136:	d104      	bne.n	8008142 <HAL_TIM_IC_Start_IT+0x12a>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008140:	e00b      	b.n	800815a <HAL_TIM_IC_Start_IT+0x142>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b08      	cmp	r3, #8
 8008146:	d104      	bne.n	8008152 <HAL_TIM_IC_Start_IT+0x13a>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008150:	e003      	b.n	800815a <HAL_TIM_IC_Start_IT+0x142>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2202      	movs	r2, #2
 8008156:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b0c      	cmp	r3, #12
 800815e:	d841      	bhi.n	80081e4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <HAL_TIM_IC_Start_IT+0x150>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080081e5 	.word	0x080081e5
 8008170:	080081e5 	.word	0x080081e5
 8008174:	080081e5 	.word	0x080081e5
 8008178:	080081af 	.word	0x080081af
 800817c:	080081e5 	.word	0x080081e5
 8008180:	080081e5 	.word	0x080081e5
 8008184:	080081e5 	.word	0x080081e5
 8008188:	080081c1 	.word	0x080081c1
 800818c:	080081e5 	.word	0x080081e5
 8008190:	080081e5 	.word	0x080081e5
 8008194:	080081e5 	.word	0x080081e5
 8008198:	080081d3 	.word	0x080081d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0202 	orr.w	r2, r2, #2
 80081aa:	60da      	str	r2, [r3, #12]
      break;
 80081ac:	e01d      	b.n	80081ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0204 	orr.w	r2, r2, #4
 80081bc:	60da      	str	r2, [r3, #12]
      break;
 80081be:	e014      	b.n	80081ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0208 	orr.w	r2, r2, #8
 80081ce:	60da      	str	r2, [r3, #12]
      break;
 80081d0:	e00b      	b.n	80081ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 0210 	orr.w	r2, r2, #16
 80081e0:	60da      	str	r2, [r3, #12]
      break;
 80081e2:	e002      	b.n	80081ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
      break;
 80081e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d14e      	bne.n	800828e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2201      	movs	r2, #1
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 ff31 	bl	8009060 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a25      	ldr	r2, [pc, #148]	; (8008298 <HAL_TIM_IC_Start_IT+0x280>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d022      	beq.n	800824e <HAL_TIM_IC_Start_IT+0x236>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008210:	d01d      	beq.n	800824e <HAL_TIM_IC_Start_IT+0x236>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a21      	ldr	r2, [pc, #132]	; (800829c <HAL_TIM_IC_Start_IT+0x284>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d018      	beq.n	800824e <HAL_TIM_IC_Start_IT+0x236>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <HAL_TIM_IC_Start_IT+0x288>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d013      	beq.n	800824e <HAL_TIM_IC_Start_IT+0x236>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a1e      	ldr	r2, [pc, #120]	; (80082a4 <HAL_TIM_IC_Start_IT+0x28c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00e      	beq.n	800824e <HAL_TIM_IC_Start_IT+0x236>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1c      	ldr	r2, [pc, #112]	; (80082a8 <HAL_TIM_IC_Start_IT+0x290>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d009      	beq.n	800824e <HAL_TIM_IC_Start_IT+0x236>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <HAL_TIM_IC_Start_IT+0x294>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d004      	beq.n	800824e <HAL_TIM_IC_Start_IT+0x236>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a19      	ldr	r2, [pc, #100]	; (80082b0 <HAL_TIM_IC_Start_IT+0x298>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d115      	bne.n	800827a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	4b17      	ldr	r3, [pc, #92]	; (80082b4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008256:	4013      	ands	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b06      	cmp	r3, #6
 800825e:	d015      	beq.n	800828c <HAL_TIM_IC_Start_IT+0x274>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008266:	d011      	beq.n	800828c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008278:	e008      	b.n	800828c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f042 0201 	orr.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	e000      	b.n	800828e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40012c00 	.word	0x40012c00
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40013400 	.word	0x40013400
 80082ac:	40014000 	.word	0x40014000
 80082b0:	40015000 	.word	0x40015000
 80082b4:	00010007 	.word	0x00010007

080082b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80082d2:	2302      	movs	r3, #2
 80082d4:	e088      	b.n	80083e8 <HAL_TIM_IC_ConfigChannel+0x130>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d11b      	bne.n	800831c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	6819      	ldr	r1, [r3, #0]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f000 fd8a 	bl	8008e0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 020c 	bic.w	r2, r2, #12
 8008306:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6999      	ldr	r1, [r3, #24]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	619a      	str	r2, [r3, #24]
 800831a:	e060      	b.n	80083de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b04      	cmp	r3, #4
 8008320:	d11c      	bne.n	800835c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6819      	ldr	r1, [r3, #0]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f000 fddf 	bl	8008ef4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699a      	ldr	r2, [r3, #24]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008344:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6999      	ldr	r1, [r3, #24]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	021a      	lsls	r2, r3, #8
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	619a      	str	r2, [r3, #24]
 800835a:	e040      	b.n	80083de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b08      	cmp	r3, #8
 8008360:	d11b      	bne.n	800839a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6819      	ldr	r1, [r3, #0]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f000 fdfc 	bl	8008f6e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 020c 	bic.w	r2, r2, #12
 8008384:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69d9      	ldr	r1, [r3, #28]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	61da      	str	r2, [r3, #28]
 8008398:	e021      	b.n	80083de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b0c      	cmp	r3, #12
 800839e:	d11c      	bne.n	80083da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	6819      	ldr	r1, [r3, #0]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f000 fe19 	bl	8008fe6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69da      	ldr	r2, [r3, #28]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80083c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69d9      	ldr	r1, [r3, #28]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	021a      	lsls	r2, r3, #8
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	61da      	str	r2, [r3, #28]
 80083d8:	e001      	b.n	80083de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800840a:	2302      	movs	r3, #2
 800840c:	e0ff      	b.n	800860e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b14      	cmp	r3, #20
 800841a:	f200 80f0 	bhi.w	80085fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008479 	.word	0x08008479
 8008428:	080085ff 	.word	0x080085ff
 800842c:	080085ff 	.word	0x080085ff
 8008430:	080085ff 	.word	0x080085ff
 8008434:	080084b9 	.word	0x080084b9
 8008438:	080085ff 	.word	0x080085ff
 800843c:	080085ff 	.word	0x080085ff
 8008440:	080085ff 	.word	0x080085ff
 8008444:	080084fb 	.word	0x080084fb
 8008448:	080085ff 	.word	0x080085ff
 800844c:	080085ff 	.word	0x080085ff
 8008450:	080085ff 	.word	0x080085ff
 8008454:	0800853b 	.word	0x0800853b
 8008458:	080085ff 	.word	0x080085ff
 800845c:	080085ff 	.word	0x080085ff
 8008460:	080085ff 	.word	0x080085ff
 8008464:	0800857d 	.word	0x0800857d
 8008468:	080085ff 	.word	0x080085ff
 800846c:	080085ff 	.word	0x080085ff
 8008470:	080085ff 	.word	0x080085ff
 8008474:	080085bd 	.word	0x080085bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f99a 	bl	80087b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0208 	orr.w	r2, r2, #8
 8008492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0204 	bic.w	r2, r2, #4
 80084a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6999      	ldr	r1, [r3, #24]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	619a      	str	r2, [r3, #24]
      break;
 80084b6:	e0a5      	b.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa14 	bl	80088ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6999      	ldr	r1, [r3, #24]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	021a      	lsls	r2, r3, #8
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	619a      	str	r2, [r3, #24]
      break;
 80084f8:	e084      	b.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fa87 	bl	8008a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69da      	ldr	r2, [r3, #28]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0208 	orr.w	r2, r2, #8
 8008514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69da      	ldr	r2, [r3, #28]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0204 	bic.w	r2, r2, #4
 8008524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69d9      	ldr	r1, [r3, #28]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	61da      	str	r2, [r3, #28]
      break;
 8008538:	e064      	b.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	4618      	mov	r0, r3
 8008542:	f000 faf9 	bl	8008b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69da      	ldr	r2, [r3, #28]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69da      	ldr	r2, [r3, #28]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69d9      	ldr	r1, [r3, #28]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	021a      	lsls	r2, r3, #8
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	61da      	str	r2, [r3, #28]
      break;
 800857a:	e043      	b.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fb6c 	bl	8008c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0208 	orr.w	r2, r2, #8
 8008596:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0204 	bic.w	r2, r2, #4
 80085a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691a      	ldr	r2, [r3, #16]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80085ba:	e023      	b.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fbb6 	bl	8008d34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	021a      	lsls	r2, r3, #8
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80085fc:	e002      	b.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	75fb      	strb	r3, [r7, #23]
      break;
 8008602:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop

08008618 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_TIM_GenerateEvent+0x18>
 800862c:	2302      	movs	r3, #2
 800862e:	e014      	b.n	800865a <HAL_TIM_GenerateEvent+0x42>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
	...

08008668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a46      	ldr	r2, [pc, #280]	; (8008794 <TIM_Base_SetConfig+0x12c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d017      	beq.n	80086b0 <TIM_Base_SetConfig+0x48>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008686:	d013      	beq.n	80086b0 <TIM_Base_SetConfig+0x48>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a43      	ldr	r2, [pc, #268]	; (8008798 <TIM_Base_SetConfig+0x130>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00f      	beq.n	80086b0 <TIM_Base_SetConfig+0x48>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a42      	ldr	r2, [pc, #264]	; (800879c <TIM_Base_SetConfig+0x134>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_Base_SetConfig+0x48>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a41      	ldr	r2, [pc, #260]	; (80087a0 <TIM_Base_SetConfig+0x138>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <TIM_Base_SetConfig+0x48>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a40      	ldr	r2, [pc, #256]	; (80087a4 <TIM_Base_SetConfig+0x13c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_Base_SetConfig+0x48>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a3f      	ldr	r2, [pc, #252]	; (80087a8 <TIM_Base_SetConfig+0x140>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d108      	bne.n	80086c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a33      	ldr	r2, [pc, #204]	; (8008794 <TIM_Base_SetConfig+0x12c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d023      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d0:	d01f      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a30      	ldr	r2, [pc, #192]	; (8008798 <TIM_Base_SetConfig+0x130>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01b      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a2f      	ldr	r2, [pc, #188]	; (800879c <TIM_Base_SetConfig+0x134>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d017      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2e      	ldr	r2, [pc, #184]	; (80087a0 <TIM_Base_SetConfig+0x138>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d013      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2d      	ldr	r2, [pc, #180]	; (80087a4 <TIM_Base_SetConfig+0x13c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00f      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2d      	ldr	r2, [pc, #180]	; (80087ac <TIM_Base_SetConfig+0x144>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00b      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2c      	ldr	r2, [pc, #176]	; (80087b0 <TIM_Base_SetConfig+0x148>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d007      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2b      	ldr	r2, [pc, #172]	; (80087b4 <TIM_Base_SetConfig+0x14c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d003      	beq.n	8008712 <TIM_Base_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a26      	ldr	r2, [pc, #152]	; (80087a8 <TIM_Base_SetConfig+0x140>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d108      	bne.n	8008724 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a12      	ldr	r2, [pc, #72]	; (8008794 <TIM_Base_SetConfig+0x12c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d013      	beq.n	8008778 <TIM_Base_SetConfig+0x110>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <TIM_Base_SetConfig+0x13c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00f      	beq.n	8008778 <TIM_Base_SetConfig+0x110>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a14      	ldr	r2, [pc, #80]	; (80087ac <TIM_Base_SetConfig+0x144>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00b      	beq.n	8008778 <TIM_Base_SetConfig+0x110>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a13      	ldr	r2, [pc, #76]	; (80087b0 <TIM_Base_SetConfig+0x148>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <TIM_Base_SetConfig+0x110>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <TIM_Base_SetConfig+0x14c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_Base_SetConfig+0x110>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <TIM_Base_SetConfig+0x140>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d103      	bne.n	8008780 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	615a      	str	r2, [r3, #20]
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40012c00 	.word	0x40012c00
 8008798:	40000400 	.word	0x40000400
 800879c:	40000800 	.word	0x40000800
 80087a0:	40000c00 	.word	0x40000c00
 80087a4:	40013400 	.word	0x40013400
 80087a8:	40015000 	.word	0x40015000
 80087ac:	40014000 	.word	0x40014000
 80087b0:	40014400 	.word	0x40014400
 80087b4:	40014800 	.word	0x40014800

080087b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f023 0201 	bic.w	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f023 0302 	bic.w	r3, r3, #2
 8008804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a30      	ldr	r2, [pc, #192]	; (80088d4 <TIM_OC1_SetConfig+0x11c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <TIM_OC1_SetConfig+0x88>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a2f      	ldr	r2, [pc, #188]	; (80088d8 <TIM_OC1_SetConfig+0x120>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00f      	beq.n	8008840 <TIM_OC1_SetConfig+0x88>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a2e      	ldr	r2, [pc, #184]	; (80088dc <TIM_OC1_SetConfig+0x124>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00b      	beq.n	8008840 <TIM_OC1_SetConfig+0x88>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a2d      	ldr	r2, [pc, #180]	; (80088e0 <TIM_OC1_SetConfig+0x128>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d007      	beq.n	8008840 <TIM_OC1_SetConfig+0x88>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a2c      	ldr	r2, [pc, #176]	; (80088e4 <TIM_OC1_SetConfig+0x12c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_OC1_SetConfig+0x88>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <TIM_OC1_SetConfig+0x130>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10c      	bne.n	800885a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f023 0308 	bic.w	r3, r3, #8
 8008846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f023 0304 	bic.w	r3, r3, #4
 8008858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <TIM_OC1_SetConfig+0x11c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <TIM_OC1_SetConfig+0xd2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1c      	ldr	r2, [pc, #112]	; (80088d8 <TIM_OC1_SetConfig+0x120>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00f      	beq.n	800888a <TIM_OC1_SetConfig+0xd2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1b      	ldr	r2, [pc, #108]	; (80088dc <TIM_OC1_SetConfig+0x124>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00b      	beq.n	800888a <TIM_OC1_SetConfig+0xd2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1a      	ldr	r2, [pc, #104]	; (80088e0 <TIM_OC1_SetConfig+0x128>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <TIM_OC1_SetConfig+0xd2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a19      	ldr	r2, [pc, #100]	; (80088e4 <TIM_OC1_SetConfig+0x12c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_OC1_SetConfig+0xd2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <TIM_OC1_SetConfig+0x130>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d111      	bne.n	80088ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	621a      	str	r2, [r3, #32]
}
 80088c8:	bf00      	nop
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	40012c00 	.word	0x40012c00
 80088d8:	40013400 	.word	0x40013400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800
 80088e8:	40015000 	.word	0x40015000

080088ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	f023 0210 	bic.w	r2, r3, #16
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f023 0320 	bic.w	r3, r3, #32
 800893a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	011b      	lsls	r3, r3, #4
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	4313      	orrs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a2c      	ldr	r2, [pc, #176]	; (80089fc <TIM_OC2_SetConfig+0x110>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d007      	beq.n	8008960 <TIM_OC2_SetConfig+0x74>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a2b      	ldr	r2, [pc, #172]	; (8008a00 <TIM_OC2_SetConfig+0x114>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <TIM_OC2_SetConfig+0x74>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a2a      	ldr	r2, [pc, #168]	; (8008a04 <TIM_OC2_SetConfig+0x118>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10d      	bne.n	800897c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800897a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a1f      	ldr	r2, [pc, #124]	; (80089fc <TIM_OC2_SetConfig+0x110>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d013      	beq.n	80089ac <TIM_OC2_SetConfig+0xc0>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1e      	ldr	r2, [pc, #120]	; (8008a00 <TIM_OC2_SetConfig+0x114>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00f      	beq.n	80089ac <TIM_OC2_SetConfig+0xc0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <TIM_OC2_SetConfig+0x11c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00b      	beq.n	80089ac <TIM_OC2_SetConfig+0xc0>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a1d      	ldr	r2, [pc, #116]	; (8008a0c <TIM_OC2_SetConfig+0x120>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d007      	beq.n	80089ac <TIM_OC2_SetConfig+0xc0>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a1c      	ldr	r2, [pc, #112]	; (8008a10 <TIM_OC2_SetConfig+0x124>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_OC2_SetConfig+0xc0>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a17      	ldr	r2, [pc, #92]	; (8008a04 <TIM_OC2_SetConfig+0x118>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d113      	bne.n	80089d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	621a      	str	r2, [r3, #32]
}
 80089ee:	bf00      	nop
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	40012c00 	.word	0x40012c00
 8008a00:	40013400 	.word	0x40013400
 8008a04:	40015000 	.word	0x40015000
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40014400 	.word	0x40014400
 8008a10:	40014800 	.word	0x40014800

08008a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a2b      	ldr	r2, [pc, #172]	; (8008b20 <TIM_OC3_SetConfig+0x10c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d007      	beq.n	8008a86 <TIM_OC3_SetConfig+0x72>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a2a      	ldr	r2, [pc, #168]	; (8008b24 <TIM_OC3_SetConfig+0x110>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d003      	beq.n	8008a86 <TIM_OC3_SetConfig+0x72>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a29      	ldr	r2, [pc, #164]	; (8008b28 <TIM_OC3_SetConfig+0x114>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d10d      	bne.n	8008aa2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a1e      	ldr	r2, [pc, #120]	; (8008b20 <TIM_OC3_SetConfig+0x10c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d013      	beq.n	8008ad2 <TIM_OC3_SetConfig+0xbe>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <TIM_OC3_SetConfig+0x110>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00f      	beq.n	8008ad2 <TIM_OC3_SetConfig+0xbe>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	; (8008b2c <TIM_OC3_SetConfig+0x118>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00b      	beq.n	8008ad2 <TIM_OC3_SetConfig+0xbe>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <TIM_OC3_SetConfig+0x11c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d007      	beq.n	8008ad2 <TIM_OC3_SetConfig+0xbe>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a1b      	ldr	r2, [pc, #108]	; (8008b34 <TIM_OC3_SetConfig+0x120>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d003      	beq.n	8008ad2 <TIM_OC3_SetConfig+0xbe>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a16      	ldr	r2, [pc, #88]	; (8008b28 <TIM_OC3_SetConfig+0x114>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d113      	bne.n	8008afa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	621a      	str	r2, [r3, #32]
}
 8008b14:	bf00      	nop
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	40012c00 	.word	0x40012c00
 8008b24:	40013400 	.word	0x40013400
 8008b28:	40015000 	.word	0x40015000
 8008b2c:	40014000 	.word	0x40014000
 8008b30:	40014400 	.word	0x40014400
 8008b34:	40014800 	.word	0x40014800

08008b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	031b      	lsls	r3, r3, #12
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a2c      	ldr	r2, [pc, #176]	; (8008c48 <TIM_OC4_SetConfig+0x110>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d007      	beq.n	8008bac <TIM_OC4_SetConfig+0x74>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a2b      	ldr	r2, [pc, #172]	; (8008c4c <TIM_OC4_SetConfig+0x114>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_OC4_SetConfig+0x74>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a2a      	ldr	r2, [pc, #168]	; (8008c50 <TIM_OC4_SetConfig+0x118>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d10d      	bne.n	8008bc8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	031b      	lsls	r3, r3, #12
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a1f      	ldr	r2, [pc, #124]	; (8008c48 <TIM_OC4_SetConfig+0x110>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d013      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xc0>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a1e      	ldr	r2, [pc, #120]	; (8008c4c <TIM_OC4_SetConfig+0x114>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xc0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a1e      	ldr	r2, [pc, #120]	; (8008c54 <TIM_OC4_SetConfig+0x11c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xc0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1d      	ldr	r2, [pc, #116]	; (8008c58 <TIM_OC4_SetConfig+0x120>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xc0>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1c      	ldr	r2, [pc, #112]	; (8008c5c <TIM_OC4_SetConfig+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xc0>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a17      	ldr	r2, [pc, #92]	; (8008c50 <TIM_OC4_SetConfig+0x118>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d113      	bne.n	8008c20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bfe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	019b      	lsls	r3, r3, #6
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	019b      	lsls	r3, r3, #6
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	40012c00 	.word	0x40012c00
 8008c4c:	40013400 	.word	0x40013400
 8008c50:	40015000 	.word	0x40015000
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800

08008c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	041b      	lsls	r3, r3, #16
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a19      	ldr	r2, [pc, #100]	; (8008d1c <TIM_OC5_SetConfig+0xbc>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d013      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x82>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a18      	ldr	r2, [pc, #96]	; (8008d20 <TIM_OC5_SetConfig+0xc0>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00f      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x82>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a17      	ldr	r2, [pc, #92]	; (8008d24 <TIM_OC5_SetConfig+0xc4>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00b      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x82>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a16      	ldr	r2, [pc, #88]	; (8008d28 <TIM_OC5_SetConfig+0xc8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d007      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x82>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a15      	ldr	r2, [pc, #84]	; (8008d2c <TIM_OC5_SetConfig+0xcc>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d003      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x82>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a14      	ldr	r2, [pc, #80]	; (8008d30 <TIM_OC5_SetConfig+0xd0>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d109      	bne.n	8008cf6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	621a      	str	r2, [r3, #32]
}
 8008d10:	bf00      	nop
 8008d12:	371c      	adds	r7, #28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	40012c00 	.word	0x40012c00
 8008d20:	40013400 	.word	0x40013400
 8008d24:	40014000 	.word	0x40014000
 8008d28:	40014400 	.word	0x40014400
 8008d2c:	40014800 	.word	0x40014800
 8008d30:	40015000 	.word	0x40015000

08008d34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	051b      	lsls	r3, r3, #20
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <TIM_OC6_SetConfig+0xc0>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d013      	beq.n	8008db8 <TIM_OC6_SetConfig+0x84>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a19      	ldr	r2, [pc, #100]	; (8008df8 <TIM_OC6_SetConfig+0xc4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00f      	beq.n	8008db8 <TIM_OC6_SetConfig+0x84>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <TIM_OC6_SetConfig+0xc8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <TIM_OC6_SetConfig+0x84>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <TIM_OC6_SetConfig+0xcc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <TIM_OC6_SetConfig+0x84>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <TIM_OC6_SetConfig+0xd0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_OC6_SetConfig+0x84>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <TIM_OC6_SetConfig+0xd4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d109      	bne.n	8008dcc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	029b      	lsls	r3, r3, #10
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	621a      	str	r2, [r3, #32]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40012c00 	.word	0x40012c00
 8008df8:	40013400 	.word	0x40013400
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	40014400 	.word	0x40014400
 8008e04:	40014800 	.word	0x40014800
 8008e08:	40015000 	.word	0x40015000

08008e0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	f023 0201 	bic.w	r2, r3, #1
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <TIM_TI1_SetConfig+0xcc>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d01b      	beq.n	8008e72 <TIM_TI1_SetConfig+0x66>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e40:	d017      	beq.n	8008e72 <TIM_TI1_SetConfig+0x66>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	4a25      	ldr	r2, [pc, #148]	; (8008edc <TIM_TI1_SetConfig+0xd0>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d013      	beq.n	8008e72 <TIM_TI1_SetConfig+0x66>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a24      	ldr	r2, [pc, #144]	; (8008ee0 <TIM_TI1_SetConfig+0xd4>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00f      	beq.n	8008e72 <TIM_TI1_SetConfig+0x66>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4a23      	ldr	r2, [pc, #140]	; (8008ee4 <TIM_TI1_SetConfig+0xd8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00b      	beq.n	8008e72 <TIM_TI1_SetConfig+0x66>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a22      	ldr	r2, [pc, #136]	; (8008ee8 <TIM_TI1_SetConfig+0xdc>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d007      	beq.n	8008e72 <TIM_TI1_SetConfig+0x66>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4a21      	ldr	r2, [pc, #132]	; (8008eec <TIM_TI1_SetConfig+0xe0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d003      	beq.n	8008e72 <TIM_TI1_SetConfig+0x66>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <TIM_TI1_SetConfig+0xe4>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d101      	bne.n	8008e76 <TIM_TI1_SetConfig+0x6a>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e000      	b.n	8008e78 <TIM_TI1_SetConfig+0x6c>
 8008e76:	2300      	movs	r3, #0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d008      	beq.n	8008e8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	e003      	b.n	8008e96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f023 030a 	bic.w	r3, r3, #10
 8008eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f003 030a 	and.w	r3, r3, #10
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	621a      	str	r2, [r3, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40012c00 	.word	0x40012c00
 8008edc:	40000400 	.word	0x40000400
 8008ee0:	40000800 	.word	0x40000800
 8008ee4:	40000c00 	.word	0x40000c00
 8008ee8:	40013400 	.word	0x40013400
 8008eec:	40014000 	.word	0x40014000
 8008ef0:	40015000 	.word	0x40015000

08008ef4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f023 0210 	bic.w	r2, r3, #16
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	031b      	lsls	r3, r3, #12
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	011b      	lsls	r3, r3, #4
 8008f4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b087      	sub	sp, #28
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f023 0303 	bic.w	r3, r3, #3
 8008f9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008faa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	621a      	str	r2, [r3, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b087      	sub	sp, #28
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
 8008ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009012:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	021b      	lsls	r3, r3, #8
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009024:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	031b      	lsls	r3, r3, #12
 800902a:	b29b      	uxth	r3, r3
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009038:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	031b      	lsls	r3, r3, #12
 800903e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	621a      	str	r2, [r3, #32]
}
 8009054:	bf00      	nop
 8009056:	371c      	adds	r7, #28
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 031f 	and.w	r3, r3, #31
 8009072:	2201      	movs	r2, #1
 8009074:	fa02 f303 	lsl.w	r3, r2, r3
 8009078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1a      	ldr	r2, [r3, #32]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	43db      	mvns	r3, r3
 8009082:	401a      	ands	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1a      	ldr	r2, [r3, #32]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f003 031f 	and.w	r3, r3, #31
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	fa01 f303 	lsl.w	r3, r1, r3
 8009098:	431a      	orrs	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	621a      	str	r2, [r3, #32]
}
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <HAL_TIMEx_PWMN_Start+0x24>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	bf14      	ite	ne
 80090c8:	2301      	movne	r3, #1
 80090ca:	2300      	moveq	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	e022      	b.n	8009116 <HAL_TIMEx_PWMN_Start+0x6a>
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d109      	bne.n	80090ea <HAL_TIMEx_PWMN_Start+0x3e>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b01      	cmp	r3, #1
 80090e0:	bf14      	ite	ne
 80090e2:	2301      	movne	r3, #1
 80090e4:	2300      	moveq	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	e015      	b.n	8009116 <HAL_TIMEx_PWMN_Start+0x6a>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	d109      	bne.n	8009104 <HAL_TIMEx_PWMN_Start+0x58>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	bf14      	ite	ne
 80090fc:	2301      	movne	r3, #1
 80090fe:	2300      	moveq	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	e008      	b.n	8009116 <HAL_TIMEx_PWMN_Start+0x6a>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b01      	cmp	r3, #1
 800910e:	bf14      	ite	ne
 8009110:	2301      	movne	r3, #1
 8009112:	2300      	moveq	r3, #0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e073      	b.n	8009206 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d104      	bne.n	800912e <HAL_TIMEx_PWMN_Start+0x82>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800912c:	e013      	b.n	8009156 <HAL_TIMEx_PWMN_Start+0xaa>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b04      	cmp	r3, #4
 8009132:	d104      	bne.n	800913e <HAL_TIMEx_PWMN_Start+0x92>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800913c:	e00b      	b.n	8009156 <HAL_TIMEx_PWMN_Start+0xaa>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b08      	cmp	r3, #8
 8009142:	d104      	bne.n	800914e <HAL_TIMEx_PWMN_Start+0xa2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800914c:	e003      	b.n	8009156 <HAL_TIMEx_PWMN_Start+0xaa>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2204      	movs	r2, #4
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f000 f9ae 	bl	80094c0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009172:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a25      	ldr	r2, [pc, #148]	; (8009210 <HAL_TIMEx_PWMN_Start+0x164>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d022      	beq.n	80091c4 <HAL_TIMEx_PWMN_Start+0x118>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009186:	d01d      	beq.n	80091c4 <HAL_TIMEx_PWMN_Start+0x118>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a21      	ldr	r2, [pc, #132]	; (8009214 <HAL_TIMEx_PWMN_Start+0x168>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d018      	beq.n	80091c4 <HAL_TIMEx_PWMN_Start+0x118>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a20      	ldr	r2, [pc, #128]	; (8009218 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d013      	beq.n	80091c4 <HAL_TIMEx_PWMN_Start+0x118>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1e      	ldr	r2, [pc, #120]	; (800921c <HAL_TIMEx_PWMN_Start+0x170>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00e      	beq.n	80091c4 <HAL_TIMEx_PWMN_Start+0x118>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a1d      	ldr	r2, [pc, #116]	; (8009220 <HAL_TIMEx_PWMN_Start+0x174>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d009      	beq.n	80091c4 <HAL_TIMEx_PWMN_Start+0x118>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <HAL_TIMEx_PWMN_Start+0x178>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d004      	beq.n	80091c4 <HAL_TIMEx_PWMN_Start+0x118>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a1a      	ldr	r2, [pc, #104]	; (8009228 <HAL_TIMEx_PWMN_Start+0x17c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d115      	bne.n	80091f0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	4b18      	ldr	r3, [pc, #96]	; (800922c <HAL_TIMEx_PWMN_Start+0x180>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b06      	cmp	r3, #6
 80091d4:	d015      	beq.n	8009202 <HAL_TIMEx_PWMN_Start+0x156>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091dc:	d011      	beq.n	8009202 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0201 	orr.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ee:	e008      	b.n	8009202 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0201 	orr.w	r2, r2, #1
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	e000      	b.n	8009204 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40012c00 	.word	0x40012c00
 8009214:	40000400 	.word	0x40000400
 8009218:	40000800 	.word	0x40000800
 800921c:	40000c00 	.word	0x40000c00
 8009220:	40013400 	.word	0x40013400
 8009224:	40014000 	.word	0x40014000
 8009228:	40015000 	.word	0x40015000
 800922c:	00010007 	.word	0x00010007

08009230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009244:	2302      	movs	r3, #2
 8009246:	e074      	b.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a34      	ldr	r2, [pc, #208]	; (8009340 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d009      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a33      	ldr	r2, [pc, #204]	; (8009344 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d004      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a31      	ldr	r2, [pc, #196]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d108      	bne.n	8009298 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800928c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800929e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a21      	ldr	r2, [pc, #132]	; (8009340 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d022      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c8:	d01d      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a1f      	ldr	r2, [pc, #124]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d018      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1d      	ldr	r2, [pc, #116]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d013      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00e      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a15      	ldr	r2, [pc, #84]	; (8009344 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d009      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a18      	ldr	r2, [pc, #96]	; (8009358 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d004      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a11      	ldr	r2, [pc, #68]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d10c      	bne.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800930c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	4313      	orrs	r3, r2
 8009316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	40012c00 	.word	0x40012c00
 8009344:	40013400 	.word	0x40013400
 8009348:	40015000 	.word	0x40015000
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40000c00 	.word	0x40000c00
 8009358:	40014000 	.word	0x40014000

0800935c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009374:	2302      	movs	r3, #2
 8009376:	e096      	b.n	80094a6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	4313      	orrs	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	041b      	lsls	r3, r3, #16
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2f      	ldr	r2, [pc, #188]	; (80094b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d009      	beq.n	8009410 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a2d      	ldr	r2, [pc, #180]	; (80094b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d004      	beq.n	8009410 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a2c      	ldr	r2, [pc, #176]	; (80094bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d106      	bne.n	800941e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a24      	ldr	r2, [pc, #144]	; (80094b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d009      	beq.n	800943c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a22      	ldr	r2, [pc, #136]	; (80094b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d004      	beq.n	800943c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a21      	ldr	r2, [pc, #132]	; (80094bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d12b      	bne.n	8009494 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009446:	051b      	lsls	r3, r3, #20
 8009448:	4313      	orrs	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	4313      	orrs	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a11      	ldr	r2, [pc, #68]	; (80094b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d009      	beq.n	8009486 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a10      	ldr	r2, [pc, #64]	; (80094b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d004      	beq.n	8009486 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d106      	bne.n	8009494 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	40012c00 	.word	0x40012c00
 80094b8:	40013400 	.word	0x40013400
 80094bc:	40015000 	.word	0x40015000

080094c0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	2204      	movs	r2, #4
 80094d4:	fa02 f303 	lsl.w	r3, r2, r3
 80094d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a1a      	ldr	r2, [r3, #32]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	43db      	mvns	r3, r3
 80094e2:	401a      	ands	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a1a      	ldr	r2, [r3, #32]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f003 031f 	and.w	r3, r3, #31
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	fa01 f303 	lsl.w	r3, r1, r3
 80094f8:	431a      	orrs	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	621a      	str	r2, [r3, #32]
}
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e042      	b.n	80095a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7f9 f97e 	bl	8002830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2224      	movs	r2, #36	; 0x24
 8009538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f82d 	bl	80095ac <UART_SetConfig>
 8009552:	4603      	mov	r3, r0
 8009554:	2b01      	cmp	r3, #1
 8009556:	d101      	bne.n	800955c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e022      	b.n	80095a2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb1d 	bl	8009ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009578:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009588:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0201 	orr.w	r2, r2, #1
 8009598:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fba4 	bl	8009ce8 <UART_CheckIdleState>
 80095a0:	4603      	mov	r3, r0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b0:	b08c      	sub	sp, #48	; 0x30
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4baa      	ldr	r3, [pc, #680]	; (8009884 <UART_SetConfig+0x2d8>)
 80095dc:	4013      	ands	r3, r2
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	6812      	ldr	r2, [r2, #0]
 80095e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095e4:	430b      	orrs	r3, r1
 80095e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a9f      	ldr	r2, [pc, #636]	; (8009888 <UART_SetConfig+0x2dc>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d004      	beq.n	8009618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009614:	4313      	orrs	r3, r2
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009622:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	6812      	ldr	r2, [r2, #0]
 800962a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800962c:	430b      	orrs	r3, r1
 800962e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009636:	f023 010f 	bic.w	r1, r3, #15
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a90      	ldr	r2, [pc, #576]	; (800988c <UART_SetConfig+0x2e0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d125      	bne.n	800969c <UART_SetConfig+0xf0>
 8009650:	4b8f      	ldr	r3, [pc, #572]	; (8009890 <UART_SetConfig+0x2e4>)
 8009652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	2b03      	cmp	r3, #3
 800965c:	d81a      	bhi.n	8009694 <UART_SetConfig+0xe8>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <UART_SetConfig+0xb8>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009675 	.word	0x08009675
 8009668:	08009685 	.word	0x08009685
 800966c:	0800967d 	.word	0x0800967d
 8009670:	0800968d 	.word	0x0800968d
 8009674:	2301      	movs	r3, #1
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800967a:	e116      	b.n	80098aa <UART_SetConfig+0x2fe>
 800967c:	2302      	movs	r3, #2
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009682:	e112      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009684:	2304      	movs	r3, #4
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800968a:	e10e      	b.n	80098aa <UART_SetConfig+0x2fe>
 800968c:	2308      	movs	r3, #8
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009692:	e10a      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009694:	2310      	movs	r3, #16
 8009696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800969a:	e106      	b.n	80098aa <UART_SetConfig+0x2fe>
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a7c      	ldr	r2, [pc, #496]	; (8009894 <UART_SetConfig+0x2e8>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d138      	bne.n	8009718 <UART_SetConfig+0x16c>
 80096a6:	4b7a      	ldr	r3, [pc, #488]	; (8009890 <UART_SetConfig+0x2e4>)
 80096a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ac:	f003 030c 	and.w	r3, r3, #12
 80096b0:	2b0c      	cmp	r3, #12
 80096b2:	d82d      	bhi.n	8009710 <UART_SetConfig+0x164>
 80096b4:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <UART_SetConfig+0x110>)
 80096b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	080096f1 	.word	0x080096f1
 80096c0:	08009711 	.word	0x08009711
 80096c4:	08009711 	.word	0x08009711
 80096c8:	08009711 	.word	0x08009711
 80096cc:	08009701 	.word	0x08009701
 80096d0:	08009711 	.word	0x08009711
 80096d4:	08009711 	.word	0x08009711
 80096d8:	08009711 	.word	0x08009711
 80096dc:	080096f9 	.word	0x080096f9
 80096e0:	08009711 	.word	0x08009711
 80096e4:	08009711 	.word	0x08009711
 80096e8:	08009711 	.word	0x08009711
 80096ec:	08009709 	.word	0x08009709
 80096f0:	2300      	movs	r3, #0
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f6:	e0d8      	b.n	80098aa <UART_SetConfig+0x2fe>
 80096f8:	2302      	movs	r3, #2
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fe:	e0d4      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009700:	2304      	movs	r3, #4
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009706:	e0d0      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009708:	2308      	movs	r3, #8
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800970e:	e0cc      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009710:	2310      	movs	r3, #16
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009716:	e0c8      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a5e      	ldr	r2, [pc, #376]	; (8009898 <UART_SetConfig+0x2ec>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d125      	bne.n	800976e <UART_SetConfig+0x1c2>
 8009722:	4b5b      	ldr	r3, [pc, #364]	; (8009890 <UART_SetConfig+0x2e4>)
 8009724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009728:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800972c:	2b30      	cmp	r3, #48	; 0x30
 800972e:	d016      	beq.n	800975e <UART_SetConfig+0x1b2>
 8009730:	2b30      	cmp	r3, #48	; 0x30
 8009732:	d818      	bhi.n	8009766 <UART_SetConfig+0x1ba>
 8009734:	2b20      	cmp	r3, #32
 8009736:	d00a      	beq.n	800974e <UART_SetConfig+0x1a2>
 8009738:	2b20      	cmp	r3, #32
 800973a:	d814      	bhi.n	8009766 <UART_SetConfig+0x1ba>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <UART_SetConfig+0x19a>
 8009740:	2b10      	cmp	r3, #16
 8009742:	d008      	beq.n	8009756 <UART_SetConfig+0x1aa>
 8009744:	e00f      	b.n	8009766 <UART_SetConfig+0x1ba>
 8009746:	2300      	movs	r3, #0
 8009748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974c:	e0ad      	b.n	80098aa <UART_SetConfig+0x2fe>
 800974e:	2302      	movs	r3, #2
 8009750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009754:	e0a9      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009756:	2304      	movs	r3, #4
 8009758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975c:	e0a5      	b.n	80098aa <UART_SetConfig+0x2fe>
 800975e:	2308      	movs	r3, #8
 8009760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009764:	e0a1      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009766:	2310      	movs	r3, #16
 8009768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800976c:	e09d      	b.n	80098aa <UART_SetConfig+0x2fe>
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a4a      	ldr	r2, [pc, #296]	; (800989c <UART_SetConfig+0x2f0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d125      	bne.n	80097c4 <UART_SetConfig+0x218>
 8009778:	4b45      	ldr	r3, [pc, #276]	; (8009890 <UART_SetConfig+0x2e4>)
 800977a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009782:	2bc0      	cmp	r3, #192	; 0xc0
 8009784:	d016      	beq.n	80097b4 <UART_SetConfig+0x208>
 8009786:	2bc0      	cmp	r3, #192	; 0xc0
 8009788:	d818      	bhi.n	80097bc <UART_SetConfig+0x210>
 800978a:	2b80      	cmp	r3, #128	; 0x80
 800978c:	d00a      	beq.n	80097a4 <UART_SetConfig+0x1f8>
 800978e:	2b80      	cmp	r3, #128	; 0x80
 8009790:	d814      	bhi.n	80097bc <UART_SetConfig+0x210>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d002      	beq.n	800979c <UART_SetConfig+0x1f0>
 8009796:	2b40      	cmp	r3, #64	; 0x40
 8009798:	d008      	beq.n	80097ac <UART_SetConfig+0x200>
 800979a:	e00f      	b.n	80097bc <UART_SetConfig+0x210>
 800979c:	2300      	movs	r3, #0
 800979e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097a2:	e082      	b.n	80098aa <UART_SetConfig+0x2fe>
 80097a4:	2302      	movs	r3, #2
 80097a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097aa:	e07e      	b.n	80098aa <UART_SetConfig+0x2fe>
 80097ac:	2304      	movs	r3, #4
 80097ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097b2:	e07a      	b.n	80098aa <UART_SetConfig+0x2fe>
 80097b4:	2308      	movs	r3, #8
 80097b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ba:	e076      	b.n	80098aa <UART_SetConfig+0x2fe>
 80097bc:	2310      	movs	r3, #16
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c2:	e072      	b.n	80098aa <UART_SetConfig+0x2fe>
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a35      	ldr	r2, [pc, #212]	; (80098a0 <UART_SetConfig+0x2f4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d12a      	bne.n	8009824 <UART_SetConfig+0x278>
 80097ce:	4b30      	ldr	r3, [pc, #192]	; (8009890 <UART_SetConfig+0x2e4>)
 80097d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097dc:	d01a      	beq.n	8009814 <UART_SetConfig+0x268>
 80097de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097e2:	d81b      	bhi.n	800981c <UART_SetConfig+0x270>
 80097e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e8:	d00c      	beq.n	8009804 <UART_SetConfig+0x258>
 80097ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097ee:	d815      	bhi.n	800981c <UART_SetConfig+0x270>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <UART_SetConfig+0x250>
 80097f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097f8:	d008      	beq.n	800980c <UART_SetConfig+0x260>
 80097fa:	e00f      	b.n	800981c <UART_SetConfig+0x270>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009802:	e052      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009804:	2302      	movs	r3, #2
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800980a:	e04e      	b.n	80098aa <UART_SetConfig+0x2fe>
 800980c:	2304      	movs	r3, #4
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009812:	e04a      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009814:	2308      	movs	r3, #8
 8009816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800981a:	e046      	b.n	80098aa <UART_SetConfig+0x2fe>
 800981c:	2310      	movs	r3, #16
 800981e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009822:	e042      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a17      	ldr	r2, [pc, #92]	; (8009888 <UART_SetConfig+0x2dc>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d13a      	bne.n	80098a4 <UART_SetConfig+0x2f8>
 800982e:	4b18      	ldr	r3, [pc, #96]	; (8009890 <UART_SetConfig+0x2e4>)
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800983c:	d01a      	beq.n	8009874 <UART_SetConfig+0x2c8>
 800983e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009842:	d81b      	bhi.n	800987c <UART_SetConfig+0x2d0>
 8009844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009848:	d00c      	beq.n	8009864 <UART_SetConfig+0x2b8>
 800984a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800984e:	d815      	bhi.n	800987c <UART_SetConfig+0x2d0>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <UART_SetConfig+0x2b0>
 8009854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009858:	d008      	beq.n	800986c <UART_SetConfig+0x2c0>
 800985a:	e00f      	b.n	800987c <UART_SetConfig+0x2d0>
 800985c:	2300      	movs	r3, #0
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009862:	e022      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009864:	2302      	movs	r3, #2
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800986a:	e01e      	b.n	80098aa <UART_SetConfig+0x2fe>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009872:	e01a      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987a:	e016      	b.n	80098aa <UART_SetConfig+0x2fe>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009882:	e012      	b.n	80098aa <UART_SetConfig+0x2fe>
 8009884:	cfff69f3 	.word	0xcfff69f3
 8009888:	40008000 	.word	0x40008000
 800988c:	40013800 	.word	0x40013800
 8009890:	40021000 	.word	0x40021000
 8009894:	40004400 	.word	0x40004400
 8009898:	40004800 	.word	0x40004800
 800989c:	40004c00 	.word	0x40004c00
 80098a0:	40005000 	.word	0x40005000
 80098a4:	2310      	movs	r3, #16
 80098a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4aae      	ldr	r2, [pc, #696]	; (8009b68 <UART_SetConfig+0x5bc>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	f040 8097 	bne.w	80099e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098ba:	2b08      	cmp	r3, #8
 80098bc:	d823      	bhi.n	8009906 <UART_SetConfig+0x35a>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x318>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	08009907 	.word	0x08009907
 80098cc:	080098f1 	.word	0x080098f1
 80098d0:	08009907 	.word	0x08009907
 80098d4:	080098f7 	.word	0x080098f7
 80098d8:	08009907 	.word	0x08009907
 80098dc:	08009907 	.word	0x08009907
 80098e0:	08009907 	.word	0x08009907
 80098e4:	080098ff 	.word	0x080098ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098e8:	f7fd fdd4 	bl	8007494 <HAL_RCC_GetPCLK1Freq>
 80098ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098ee:	e010      	b.n	8009912 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098f0:	4b9e      	ldr	r3, [pc, #632]	; (8009b6c <UART_SetConfig+0x5c0>)
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098f4:	e00d      	b.n	8009912 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098f6:	f7fd fd5f 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 80098fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098fc:	e009      	b.n	8009912 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009904:	e005      	b.n	8009912 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8130 	beq.w	8009b7a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	4a94      	ldr	r2, [pc, #592]	; (8009b70 <UART_SetConfig+0x5c4>)
 8009920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009924:	461a      	mov	r2, r3
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	fbb3 f3f2 	udiv	r3, r3, r2
 800992c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	4613      	mov	r3, r2
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4413      	add	r3, r2
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	429a      	cmp	r2, r3
 800993c:	d305      	bcc.n	800994a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	429a      	cmp	r2, r3
 8009948:	d903      	bls.n	8009952 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009950:	e113      	b.n	8009b7a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	2200      	movs	r2, #0
 8009956:	60bb      	str	r3, [r7, #8]
 8009958:	60fa      	str	r2, [r7, #12]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	4a84      	ldr	r2, [pc, #528]	; (8009b70 <UART_SetConfig+0x5c4>)
 8009960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009964:	b29b      	uxth	r3, r3
 8009966:	2200      	movs	r2, #0
 8009968:	603b      	str	r3, [r7, #0]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009970:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009974:	f7f6 ff86 	bl	8000884 <__aeabi_uldivmod>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
 8009980:	f04f 0200 	mov.w	r2, #0
 8009984:	f04f 0300 	mov.w	r3, #0
 8009988:	020b      	lsls	r3, r1, #8
 800998a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800998e:	0202      	lsls	r2, r0, #8
 8009990:	6979      	ldr	r1, [r7, #20]
 8009992:	6849      	ldr	r1, [r1, #4]
 8009994:	0849      	lsrs	r1, r1, #1
 8009996:	2000      	movs	r0, #0
 8009998:	460c      	mov	r4, r1
 800999a:	4605      	mov	r5, r0
 800999c:	eb12 0804 	adds.w	r8, r2, r4
 80099a0:	eb43 0905 	adc.w	r9, r3, r5
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	469a      	mov	sl, r3
 80099ac:	4693      	mov	fp, r2
 80099ae:	4652      	mov	r2, sl
 80099b0:	465b      	mov	r3, fp
 80099b2:	4640      	mov	r0, r8
 80099b4:	4649      	mov	r1, r9
 80099b6:	f7f6 ff65 	bl	8000884 <__aeabi_uldivmod>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4613      	mov	r3, r2
 80099c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099c8:	d308      	bcc.n	80099dc <UART_SetConfig+0x430>
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099d0:	d204      	bcs.n	80099dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	60da      	str	r2, [r3, #12]
 80099da:	e0ce      	b.n	8009b7a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80099e2:	e0ca      	b.n	8009b7a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ec:	d166      	bne.n	8009abc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80099ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	d827      	bhi.n	8009a46 <UART_SetConfig+0x49a>
 80099f6:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <UART_SetConfig+0x450>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a21 	.word	0x08009a21
 8009a00:	08009a29 	.word	0x08009a29
 8009a04:	08009a31 	.word	0x08009a31
 8009a08:	08009a47 	.word	0x08009a47
 8009a0c:	08009a37 	.word	0x08009a37
 8009a10:	08009a47 	.word	0x08009a47
 8009a14:	08009a47 	.word	0x08009a47
 8009a18:	08009a47 	.word	0x08009a47
 8009a1c:	08009a3f 	.word	0x08009a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a20:	f7fd fd38 	bl	8007494 <HAL_RCC_GetPCLK1Freq>
 8009a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a26:	e014      	b.n	8009a52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a28:	f7fd fd4a 	bl	80074c0 <HAL_RCC_GetPCLK2Freq>
 8009a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a2e:	e010      	b.n	8009a52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a30:	4b4e      	ldr	r3, [pc, #312]	; (8009b6c <UART_SetConfig+0x5c0>)
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a34:	e00d      	b.n	8009a52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a36:	f7fd fcbf 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8009a3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a3c:	e009      	b.n	8009a52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a44:	e005      	b.n	8009a52 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 8090 	beq.w	8009b7a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	4a44      	ldr	r2, [pc, #272]	; (8009b70 <UART_SetConfig+0x5c4>)
 8009a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a64:	461a      	mov	r2, r3
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a6c:	005a      	lsls	r2, r3, #1
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	441a      	add	r2, r3
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	2b0f      	cmp	r3, #15
 8009a84:	d916      	bls.n	8009ab4 <UART_SetConfig+0x508>
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a8c:	d212      	bcs.n	8009ab4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f023 030f 	bic.w	r3, r3, #15
 8009a96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	085b      	lsrs	r3, r3, #1
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	8bfb      	ldrh	r3, [r7, #30]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	8bfa      	ldrh	r2, [r7, #30]
 8009ab0:	60da      	str	r2, [r3, #12]
 8009ab2:	e062      	b.n	8009b7a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009aba:	e05e      	b.n	8009b7a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009abc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ac0:	2b08      	cmp	r3, #8
 8009ac2:	d828      	bhi.n	8009b16 <UART_SetConfig+0x56a>
 8009ac4:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <UART_SetConfig+0x520>)
 8009ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aca:	bf00      	nop
 8009acc:	08009af1 	.word	0x08009af1
 8009ad0:	08009af9 	.word	0x08009af9
 8009ad4:	08009b01 	.word	0x08009b01
 8009ad8:	08009b17 	.word	0x08009b17
 8009adc:	08009b07 	.word	0x08009b07
 8009ae0:	08009b17 	.word	0x08009b17
 8009ae4:	08009b17 	.word	0x08009b17
 8009ae8:	08009b17 	.word	0x08009b17
 8009aec:	08009b0f 	.word	0x08009b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009af0:	f7fd fcd0 	bl	8007494 <HAL_RCC_GetPCLK1Freq>
 8009af4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009af6:	e014      	b.n	8009b22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009af8:	f7fd fce2 	bl	80074c0 <HAL_RCC_GetPCLK2Freq>
 8009afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009afe:	e010      	b.n	8009b22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b00:	4b1a      	ldr	r3, [pc, #104]	; (8009b6c <UART_SetConfig+0x5c0>)
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b04:	e00d      	b.n	8009b22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b06:	f7fd fc57 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8009b0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b0c:	e009      	b.n	8009b22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b14:	e005      	b.n	8009b22 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b20:	bf00      	nop
    }

    if (pclk != 0U)
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d028      	beq.n	8009b7a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	4a10      	ldr	r2, [pc, #64]	; (8009b70 <UART_SetConfig+0x5c4>)
 8009b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b32:	461a      	mov	r2, r3
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	441a      	add	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d910      	bls.n	8009b74 <UART_SetConfig+0x5c8>
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b58:	d20c      	bcs.n	8009b74 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	60da      	str	r2, [r3, #12]
 8009b64:	e009      	b.n	8009b7a <UART_SetConfig+0x5ce>
 8009b66:	bf00      	nop
 8009b68:	40008000 	.word	0x40008000
 8009b6c:	00f42400 	.word	0x00f42400
 8009b70:	0800b15c 	.word	0x0800b15c
      }
      else
      {
        ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2200      	movs	r2, #0
 8009b94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009b96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3730      	adds	r7, #48	; 0x30
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00a      	beq.n	8009bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00a      	beq.n	8009c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c16:	f003 0308 	and.w	r3, r3, #8
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00a      	beq.n	8009c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00a      	beq.n	8009c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00a      	beq.n	8009c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	430a      	orrs	r2, r1
 8009c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01a      	beq.n	8009cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ca2:	d10a      	bne.n	8009cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	605a      	str	r2, [r3, #4]
  }
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cf8:	f7f9 f8f0 	bl	8002edc <HAL_GetTick>
 8009cfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 0308 	and.w	r3, r3, #8
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d10e      	bne.n	8009d2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f82f 	bl	8009d7e <UART_WaitOnFlagUntilTimeout>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e025      	b.n	8009d76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d10e      	bne.n	8009d56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f819 	bl	8009d7e <UART_WaitOnFlagUntilTimeout>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e00f      	b.n	8009d76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b09c      	sub	sp, #112	; 0x70
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	603b      	str	r3, [r7, #0]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d8e:	e0a9      	b.n	8009ee4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d96:	f000 80a5 	beq.w	8009ee4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9a:	f7f9 f89f 	bl	8002edc <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d302      	bcc.n	8009db0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d140      	bne.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db8:	e853 3f00 	ldrex	r3, [r3]
 8009dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009dd6:	e841 2300 	strex	r3, r2, [r1]
 8009dda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1e6      	bne.n	8009db0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3308      	adds	r3, #8
 8009de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df4:	f023 0301 	bic.w	r3, r3, #1
 8009df8:	663b      	str	r3, [r7, #96]	; 0x60
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3308      	adds	r3, #8
 8009e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e02:	64ba      	str	r2, [r7, #72]	; 0x48
 8009e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e0a:	e841 2300 	strex	r3, r2, [r1]
 8009e0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e5      	bne.n	8009de2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e069      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d051      	beq.n	8009ee4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e4e:	d149      	bne.n	8009ee4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e78:	637b      	str	r3, [r7, #52]	; 0x34
 8009e7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e80:	e841 2300 	strex	r3, r2, [r1]
 8009e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e6      	bne.n	8009e5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	e853 3f00 	ldrex	r3, [r3]
 8009e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f023 0301 	bic.w	r3, r3, #1
 8009ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009eac:	623a      	str	r2, [r7, #32]
 8009eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	69f9      	ldr	r1, [r7, #28]
 8009eb2:	6a3a      	ldr	r2, [r7, #32]
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e5      	bne.n	8009e8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e010      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	69da      	ldr	r2, [r3, #28]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	4013      	ands	r3, r2
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	bf0c      	ite	eq
 8009ef4:	2301      	moveq	r3, #1
 8009ef6:	2300      	movne	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	461a      	mov	r2, r3
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	f43f af46 	beq.w	8009d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3770      	adds	r7, #112	; 0x70
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b085      	sub	sp, #20
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e027      	b.n	8009f74 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2224      	movs	r2, #36	; 0x24
 8009f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0201 	bic.w	r2, r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2220      	movs	r2, #32
 8009f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d101      	bne.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f94:	2302      	movs	r3, #2
 8009f96:	e02d      	b.n	8009ff4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2224      	movs	r2, #36	; 0x24
 8009fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0201 	bic.w	r2, r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f84f 	bl	800a078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d101      	bne.n	800a014 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a010:	2302      	movs	r3, #2
 800a012:	e02d      	b.n	800a070 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2224      	movs	r2, #36	; 0x24
 800a020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0201 	bic.w	r2, r2, #1
 800a03a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f811 	bl	800a078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a084:	2b00      	cmp	r3, #0
 800a086:	d108      	bne.n	800a09a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a098:	e031      	b.n	800a0fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a09a:	2308      	movs	r3, #8
 800a09c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a09e:	2308      	movs	r3, #8
 800a0a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	0e5b      	lsrs	r3, r3, #25
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	f003 0307 	and.w	r3, r3, #7
 800a0b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	0f5b      	lsrs	r3, r3, #29
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 0307 	and.w	r3, r3, #7
 800a0c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	7b3a      	ldrb	r2, [r7, #12]
 800a0c6:	4911      	ldr	r1, [pc, #68]	; (800a10c <UARTEx_SetNbDataToProcess+0x94>)
 800a0c8:	5c8a      	ldrb	r2, [r1, r2]
 800a0ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0ce:	7b3a      	ldrb	r2, [r7, #12]
 800a0d0:	490f      	ldr	r1, [pc, #60]	; (800a110 <UARTEx_SetNbDataToProcess+0x98>)
 800a0d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	7b7a      	ldrb	r2, [r7, #13]
 800a0e4:	4909      	ldr	r1, [pc, #36]	; (800a10c <UARTEx_SetNbDataToProcess+0x94>)
 800a0e6:	5c8a      	ldrb	r2, [r1, r2]
 800a0e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0ec:	7b7a      	ldrb	r2, [r7, #13]
 800a0ee:	4908      	ldr	r1, [pc, #32]	; (800a110 <UARTEx_SetNbDataToProcess+0x98>)
 800a0f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	0800b174 	.word	0x0800b174
 800a110:	0800b17c 	.word	0x0800b17c

0800a114 <__errno>:
 800a114:	4b01      	ldr	r3, [pc, #4]	; (800a11c <__errno+0x8>)
 800a116:	6818      	ldr	r0, [r3, #0]
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	2000000c 	.word	0x2000000c

0800a120 <__libc_init_array>:
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	4d0d      	ldr	r5, [pc, #52]	; (800a158 <__libc_init_array+0x38>)
 800a124:	4c0d      	ldr	r4, [pc, #52]	; (800a15c <__libc_init_array+0x3c>)
 800a126:	1b64      	subs	r4, r4, r5
 800a128:	10a4      	asrs	r4, r4, #2
 800a12a:	2600      	movs	r6, #0
 800a12c:	42a6      	cmp	r6, r4
 800a12e:	d109      	bne.n	800a144 <__libc_init_array+0x24>
 800a130:	4d0b      	ldr	r5, [pc, #44]	; (800a160 <__libc_init_array+0x40>)
 800a132:	4c0c      	ldr	r4, [pc, #48]	; (800a164 <__libc_init_array+0x44>)
 800a134:	f000 fffa 	bl	800b12c <_init>
 800a138:	1b64      	subs	r4, r4, r5
 800a13a:	10a4      	asrs	r4, r4, #2
 800a13c:	2600      	movs	r6, #0
 800a13e:	42a6      	cmp	r6, r4
 800a140:	d105      	bne.n	800a14e <__libc_init_array+0x2e>
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	f855 3b04 	ldr.w	r3, [r5], #4
 800a148:	4798      	blx	r3
 800a14a:	3601      	adds	r6, #1
 800a14c:	e7ee      	b.n	800a12c <__libc_init_array+0xc>
 800a14e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a152:	4798      	blx	r3
 800a154:	3601      	adds	r6, #1
 800a156:	e7f2      	b.n	800a13e <__libc_init_array+0x1e>
 800a158:	0800b59c 	.word	0x0800b59c
 800a15c:	0800b59c 	.word	0x0800b59c
 800a160:	0800b59c 	.word	0x0800b59c
 800a164:	0800b5a0 	.word	0x0800b5a0

0800a168 <memset>:
 800a168:	4402      	add	r2, r0
 800a16a:	4603      	mov	r3, r0
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d100      	bne.n	800a172 <memset+0xa>
 800a170:	4770      	bx	lr
 800a172:	f803 1b01 	strb.w	r1, [r3], #1
 800a176:	e7f9      	b.n	800a16c <memset+0x4>

0800a178 <cosf>:
 800a178:	ee10 3a10 	vmov	r3, s0
 800a17c:	b507      	push	{r0, r1, r2, lr}
 800a17e:	4a1e      	ldr	r2, [pc, #120]	; (800a1f8 <cosf+0x80>)
 800a180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a184:	4293      	cmp	r3, r2
 800a186:	dc06      	bgt.n	800a196 <cosf+0x1e>
 800a188:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a1fc <cosf+0x84>
 800a18c:	b003      	add	sp, #12
 800a18e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a192:	f000 bb1d 	b.w	800a7d0 <__kernel_cosf>
 800a196:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a19a:	db04      	blt.n	800a1a6 <cosf+0x2e>
 800a19c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a1a0:	b003      	add	sp, #12
 800a1a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1a6:	4668      	mov	r0, sp
 800a1a8:	f000 f9d2 	bl	800a550 <__ieee754_rem_pio2f>
 800a1ac:	f000 0003 	and.w	r0, r0, #3
 800a1b0:	2801      	cmp	r0, #1
 800a1b2:	d009      	beq.n	800a1c8 <cosf+0x50>
 800a1b4:	2802      	cmp	r0, #2
 800a1b6:	d010      	beq.n	800a1da <cosf+0x62>
 800a1b8:	b9b0      	cbnz	r0, 800a1e8 <cosf+0x70>
 800a1ba:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1be:	ed9d 0a00 	vldr	s0, [sp]
 800a1c2:	f000 fb05 	bl	800a7d0 <__kernel_cosf>
 800a1c6:	e7eb      	b.n	800a1a0 <cosf+0x28>
 800a1c8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1cc:	ed9d 0a00 	vldr	s0, [sp]
 800a1d0:	f000 fdd4 	bl	800ad7c <__kernel_sinf>
 800a1d4:	eeb1 0a40 	vneg.f32	s0, s0
 800a1d8:	e7e2      	b.n	800a1a0 <cosf+0x28>
 800a1da:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1de:	ed9d 0a00 	vldr	s0, [sp]
 800a1e2:	f000 faf5 	bl	800a7d0 <__kernel_cosf>
 800a1e6:	e7f5      	b.n	800a1d4 <cosf+0x5c>
 800a1e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1ec:	ed9d 0a00 	vldr	s0, [sp]
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	f000 fdc3 	bl	800ad7c <__kernel_sinf>
 800a1f6:	e7d3      	b.n	800a1a0 <cosf+0x28>
 800a1f8:	3f490fd8 	.word	0x3f490fd8
 800a1fc:	00000000 	.word	0x00000000

0800a200 <sinf>:
 800a200:	ee10 3a10 	vmov	r3, s0
 800a204:	b507      	push	{r0, r1, r2, lr}
 800a206:	4a1f      	ldr	r2, [pc, #124]	; (800a284 <sinf+0x84>)
 800a208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a20c:	4293      	cmp	r3, r2
 800a20e:	dc07      	bgt.n	800a220 <sinf+0x20>
 800a210:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a288 <sinf+0x88>
 800a214:	2000      	movs	r0, #0
 800a216:	b003      	add	sp, #12
 800a218:	f85d eb04 	ldr.w	lr, [sp], #4
 800a21c:	f000 bdae 	b.w	800ad7c <__kernel_sinf>
 800a220:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a224:	db04      	blt.n	800a230 <sinf+0x30>
 800a226:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a22a:	b003      	add	sp, #12
 800a22c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a230:	4668      	mov	r0, sp
 800a232:	f000 f98d 	bl	800a550 <__ieee754_rem_pio2f>
 800a236:	f000 0003 	and.w	r0, r0, #3
 800a23a:	2801      	cmp	r0, #1
 800a23c:	d00a      	beq.n	800a254 <sinf+0x54>
 800a23e:	2802      	cmp	r0, #2
 800a240:	d00f      	beq.n	800a262 <sinf+0x62>
 800a242:	b9c0      	cbnz	r0, 800a276 <sinf+0x76>
 800a244:	eddd 0a01 	vldr	s1, [sp, #4]
 800a248:	ed9d 0a00 	vldr	s0, [sp]
 800a24c:	2001      	movs	r0, #1
 800a24e:	f000 fd95 	bl	800ad7c <__kernel_sinf>
 800a252:	e7ea      	b.n	800a22a <sinf+0x2a>
 800a254:	eddd 0a01 	vldr	s1, [sp, #4]
 800a258:	ed9d 0a00 	vldr	s0, [sp]
 800a25c:	f000 fab8 	bl	800a7d0 <__kernel_cosf>
 800a260:	e7e3      	b.n	800a22a <sinf+0x2a>
 800a262:	eddd 0a01 	vldr	s1, [sp, #4]
 800a266:	ed9d 0a00 	vldr	s0, [sp]
 800a26a:	2001      	movs	r0, #1
 800a26c:	f000 fd86 	bl	800ad7c <__kernel_sinf>
 800a270:	eeb1 0a40 	vneg.f32	s0, s0
 800a274:	e7d9      	b.n	800a22a <sinf+0x2a>
 800a276:	eddd 0a01 	vldr	s1, [sp, #4]
 800a27a:	ed9d 0a00 	vldr	s0, [sp]
 800a27e:	f000 faa7 	bl	800a7d0 <__kernel_cosf>
 800a282:	e7f5      	b.n	800a270 <sinf+0x70>
 800a284:	3f490fd8 	.word	0x3f490fd8
 800a288:	00000000 	.word	0x00000000

0800a28c <atan2f>:
 800a28c:	f000 b83e 	b.w	800a30c <__ieee754_atan2f>

0800a290 <fmodf>:
 800a290:	b508      	push	{r3, lr}
 800a292:	ed2d 8b02 	vpush	{d8}
 800a296:	eef0 8a40 	vmov.f32	s17, s0
 800a29a:	eeb0 8a60 	vmov.f32	s16, s1
 800a29e:	f000 f8d5 	bl	800a44c <__ieee754_fmodf>
 800a2a2:	eef4 8a48 	vcmp.f32	s17, s16
 800a2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2aa:	d60c      	bvs.n	800a2c6 <fmodf+0x36>
 800a2ac:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a2cc <fmodf+0x3c>
 800a2b0:	eeb4 8a68 	vcmp.f32	s16, s17
 800a2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b8:	d105      	bne.n	800a2c6 <fmodf+0x36>
 800a2ba:	f7ff ff2b 	bl	800a114 <__errno>
 800a2be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a2c2:	2321      	movs	r3, #33	; 0x21
 800a2c4:	6003      	str	r3, [r0, #0]
 800a2c6:	ecbd 8b02 	vpop	{d8}
 800a2ca:	bd08      	pop	{r3, pc}
 800a2cc:	00000000 	.word	0x00000000

0800a2d0 <sqrtf>:
 800a2d0:	b508      	push	{r3, lr}
 800a2d2:	ed2d 8b02 	vpush	{d8}
 800a2d6:	eeb0 8a40 	vmov.f32	s16, s0
 800a2da:	f000 fa75 	bl	800a7c8 <__ieee754_sqrtf>
 800a2de:	eeb4 8a48 	vcmp.f32	s16, s16
 800a2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e6:	d60c      	bvs.n	800a302 <sqrtf+0x32>
 800a2e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a308 <sqrtf+0x38>
 800a2ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f4:	d505      	bpl.n	800a302 <sqrtf+0x32>
 800a2f6:	f7ff ff0d 	bl	800a114 <__errno>
 800a2fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a2fe:	2321      	movs	r3, #33	; 0x21
 800a300:	6003      	str	r3, [r0, #0]
 800a302:	ecbd 8b02 	vpop	{d8}
 800a306:	bd08      	pop	{r3, pc}
 800a308:	00000000 	.word	0x00000000

0800a30c <__ieee754_atan2f>:
 800a30c:	ee10 2a90 	vmov	r2, s1
 800a310:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a314:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a318:	b510      	push	{r4, lr}
 800a31a:	eef0 7a40 	vmov.f32	s15, s0
 800a31e:	dc06      	bgt.n	800a32e <__ieee754_atan2f+0x22>
 800a320:	ee10 0a10 	vmov	r0, s0
 800a324:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a328:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a32c:	dd04      	ble.n	800a338 <__ieee754_atan2f+0x2c>
 800a32e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a332:	eeb0 0a67 	vmov.f32	s0, s15
 800a336:	bd10      	pop	{r4, pc}
 800a338:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a33c:	d103      	bne.n	800a346 <__ieee754_atan2f+0x3a>
 800a33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a342:	f000 bd63 	b.w	800ae0c <atanf>
 800a346:	1794      	asrs	r4, r2, #30
 800a348:	f004 0402 	and.w	r4, r4, #2
 800a34c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a350:	b943      	cbnz	r3, 800a364 <__ieee754_atan2f+0x58>
 800a352:	2c02      	cmp	r4, #2
 800a354:	d05e      	beq.n	800a414 <__ieee754_atan2f+0x108>
 800a356:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a428 <__ieee754_atan2f+0x11c>
 800a35a:	2c03      	cmp	r4, #3
 800a35c:	bf08      	it	eq
 800a35e:	eef0 7a47 	vmoveq.f32	s15, s14
 800a362:	e7e6      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a364:	b941      	cbnz	r1, 800a378 <__ieee754_atan2f+0x6c>
 800a366:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a42c <__ieee754_atan2f+0x120>
 800a36a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a430 <__ieee754_atan2f+0x124>
 800a36e:	2800      	cmp	r0, #0
 800a370:	bfb8      	it	lt
 800a372:	eef0 7a40 	vmovlt.f32	s15, s0
 800a376:	e7dc      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a378:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a37c:	d110      	bne.n	800a3a0 <__ieee754_atan2f+0x94>
 800a37e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a382:	f104 34ff 	add.w	r4, r4, #4294967295
 800a386:	d107      	bne.n	800a398 <__ieee754_atan2f+0x8c>
 800a388:	2c02      	cmp	r4, #2
 800a38a:	d846      	bhi.n	800a41a <__ieee754_atan2f+0x10e>
 800a38c:	4b29      	ldr	r3, [pc, #164]	; (800a434 <__ieee754_atan2f+0x128>)
 800a38e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a392:	edd4 7a00 	vldr	s15, [r4]
 800a396:	e7cc      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a398:	2c02      	cmp	r4, #2
 800a39a:	d841      	bhi.n	800a420 <__ieee754_atan2f+0x114>
 800a39c:	4b26      	ldr	r3, [pc, #152]	; (800a438 <__ieee754_atan2f+0x12c>)
 800a39e:	e7f6      	b.n	800a38e <__ieee754_atan2f+0x82>
 800a3a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a3a4:	d0df      	beq.n	800a366 <__ieee754_atan2f+0x5a>
 800a3a6:	1a5b      	subs	r3, r3, r1
 800a3a8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a3ac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a3b0:	da1a      	bge.n	800a3e8 <__ieee754_atan2f+0xdc>
 800a3b2:	2a00      	cmp	r2, #0
 800a3b4:	da01      	bge.n	800a3ba <__ieee754_atan2f+0xae>
 800a3b6:	313c      	adds	r1, #60	; 0x3c
 800a3b8:	db19      	blt.n	800a3ee <__ieee754_atan2f+0xe2>
 800a3ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a3be:	f000 fdf9 	bl	800afb4 <fabsf>
 800a3c2:	f000 fd23 	bl	800ae0c <atanf>
 800a3c6:	eef0 7a40 	vmov.f32	s15, s0
 800a3ca:	2c01      	cmp	r4, #1
 800a3cc:	d012      	beq.n	800a3f4 <__ieee754_atan2f+0xe8>
 800a3ce:	2c02      	cmp	r4, #2
 800a3d0:	d017      	beq.n	800a402 <__ieee754_atan2f+0xf6>
 800a3d2:	2c00      	cmp	r4, #0
 800a3d4:	d0ad      	beq.n	800a332 <__ieee754_atan2f+0x26>
 800a3d6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a43c <__ieee754_atan2f+0x130>
 800a3da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3de:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a440 <__ieee754_atan2f+0x134>
 800a3e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3e6:	e7a4      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a3e8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a42c <__ieee754_atan2f+0x120>
 800a3ec:	e7ed      	b.n	800a3ca <__ieee754_atan2f+0xbe>
 800a3ee:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a444 <__ieee754_atan2f+0x138>
 800a3f2:	e7ea      	b.n	800a3ca <__ieee754_atan2f+0xbe>
 800a3f4:	ee17 3a90 	vmov	r3, s15
 800a3f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a3fc:	ee07 3a90 	vmov	s15, r3
 800a400:	e797      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a402:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a43c <__ieee754_atan2f+0x130>
 800a406:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a40a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a440 <__ieee754_atan2f+0x134>
 800a40e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a412:	e78e      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a414:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a440 <__ieee754_atan2f+0x134>
 800a418:	e78b      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a41a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a448 <__ieee754_atan2f+0x13c>
 800a41e:	e788      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a420:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a444 <__ieee754_atan2f+0x138>
 800a424:	e785      	b.n	800a332 <__ieee754_atan2f+0x26>
 800a426:	bf00      	nop
 800a428:	c0490fdb 	.word	0xc0490fdb
 800a42c:	3fc90fdb 	.word	0x3fc90fdb
 800a430:	bfc90fdb 	.word	0xbfc90fdb
 800a434:	0800b184 	.word	0x0800b184
 800a438:	0800b190 	.word	0x0800b190
 800a43c:	33bbbd2e 	.word	0x33bbbd2e
 800a440:	40490fdb 	.word	0x40490fdb
 800a444:	00000000 	.word	0x00000000
 800a448:	3f490fdb 	.word	0x3f490fdb

0800a44c <__ieee754_fmodf>:
 800a44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a44e:	ee10 5a90 	vmov	r5, s1
 800a452:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800a456:	d009      	beq.n	800a46c <__ieee754_fmodf+0x20>
 800a458:	ee10 2a10 	vmov	r2, s0
 800a45c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a460:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a464:	da02      	bge.n	800a46c <__ieee754_fmodf+0x20>
 800a466:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a46a:	dd04      	ble.n	800a476 <__ieee754_fmodf+0x2a>
 800a46c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a470:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a476:	42a3      	cmp	r3, r4
 800a478:	dbfc      	blt.n	800a474 <__ieee754_fmodf+0x28>
 800a47a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800a47e:	d105      	bne.n	800a48c <__ieee754_fmodf+0x40>
 800a480:	4b32      	ldr	r3, [pc, #200]	; (800a54c <__ieee754_fmodf+0x100>)
 800a482:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800a486:	ed93 0a00 	vldr	s0, [r3]
 800a48a:	e7f3      	b.n	800a474 <__ieee754_fmodf+0x28>
 800a48c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800a490:	d13f      	bne.n	800a512 <__ieee754_fmodf+0xc6>
 800a492:	0219      	lsls	r1, r3, #8
 800a494:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800a498:	2900      	cmp	r1, #0
 800a49a:	dc37      	bgt.n	800a50c <__ieee754_fmodf+0xc0>
 800a49c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800a4a0:	d13d      	bne.n	800a51e <__ieee754_fmodf+0xd2>
 800a4a2:	0227      	lsls	r7, r4, #8
 800a4a4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a4a8:	2f00      	cmp	r7, #0
 800a4aa:	da35      	bge.n	800a518 <__ieee754_fmodf+0xcc>
 800a4ac:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a4b0:	bfbb      	ittet	lt
 800a4b2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a4b6:	1a12      	sublt	r2, r2, r0
 800a4b8:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a4bc:	4093      	lsllt	r3, r2
 800a4be:	bfa8      	it	ge
 800a4c0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a4c4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a4c8:	bfb5      	itete	lt
 800a4ca:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a4ce:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800a4d2:	1a52      	sublt	r2, r2, r1
 800a4d4:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800a4d8:	bfb8      	it	lt
 800a4da:	4094      	lsllt	r4, r2
 800a4dc:	1a40      	subs	r0, r0, r1
 800a4de:	1b1a      	subs	r2, r3, r4
 800a4e0:	bb00      	cbnz	r0, 800a524 <__ieee754_fmodf+0xd8>
 800a4e2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a4e6:	bf38      	it	cc
 800a4e8:	4613      	movcc	r3, r2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0c8      	beq.n	800a480 <__ieee754_fmodf+0x34>
 800a4ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4f2:	db1f      	blt.n	800a534 <__ieee754_fmodf+0xe8>
 800a4f4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a4f8:	db1f      	blt.n	800a53a <__ieee754_fmodf+0xee>
 800a4fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a4fe:	317f      	adds	r1, #127	; 0x7f
 800a500:	4333      	orrs	r3, r6
 800a502:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a506:	ee00 3a10 	vmov	s0, r3
 800a50a:	e7b3      	b.n	800a474 <__ieee754_fmodf+0x28>
 800a50c:	3801      	subs	r0, #1
 800a50e:	0049      	lsls	r1, r1, #1
 800a510:	e7c2      	b.n	800a498 <__ieee754_fmodf+0x4c>
 800a512:	15d8      	asrs	r0, r3, #23
 800a514:	387f      	subs	r0, #127	; 0x7f
 800a516:	e7c1      	b.n	800a49c <__ieee754_fmodf+0x50>
 800a518:	3901      	subs	r1, #1
 800a51a:	007f      	lsls	r7, r7, #1
 800a51c:	e7c4      	b.n	800a4a8 <__ieee754_fmodf+0x5c>
 800a51e:	15e1      	asrs	r1, r4, #23
 800a520:	397f      	subs	r1, #127	; 0x7f
 800a522:	e7c3      	b.n	800a4ac <__ieee754_fmodf+0x60>
 800a524:	2a00      	cmp	r2, #0
 800a526:	da02      	bge.n	800a52e <__ieee754_fmodf+0xe2>
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	3801      	subs	r0, #1
 800a52c:	e7d7      	b.n	800a4de <__ieee754_fmodf+0x92>
 800a52e:	d0a7      	beq.n	800a480 <__ieee754_fmodf+0x34>
 800a530:	0053      	lsls	r3, r2, #1
 800a532:	e7fa      	b.n	800a52a <__ieee754_fmodf+0xde>
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	3901      	subs	r1, #1
 800a538:	e7d9      	b.n	800a4ee <__ieee754_fmodf+0xa2>
 800a53a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800a53e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800a542:	3182      	adds	r1, #130	; 0x82
 800a544:	410b      	asrs	r3, r1
 800a546:	4333      	orrs	r3, r6
 800a548:	e7dd      	b.n	800a506 <__ieee754_fmodf+0xba>
 800a54a:	bf00      	nop
 800a54c:	0800b19c 	.word	0x0800b19c

0800a550 <__ieee754_rem_pio2f>:
 800a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a552:	ee10 6a10 	vmov	r6, s0
 800a556:	4b8e      	ldr	r3, [pc, #568]	; (800a790 <__ieee754_rem_pio2f+0x240>)
 800a558:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a55c:	429d      	cmp	r5, r3
 800a55e:	b087      	sub	sp, #28
 800a560:	eef0 7a40 	vmov.f32	s15, s0
 800a564:	4604      	mov	r4, r0
 800a566:	dc05      	bgt.n	800a574 <__ieee754_rem_pio2f+0x24>
 800a568:	2300      	movs	r3, #0
 800a56a:	ed80 0a00 	vstr	s0, [r0]
 800a56e:	6043      	str	r3, [r0, #4]
 800a570:	2000      	movs	r0, #0
 800a572:	e01a      	b.n	800a5aa <__ieee754_rem_pio2f+0x5a>
 800a574:	4b87      	ldr	r3, [pc, #540]	; (800a794 <__ieee754_rem_pio2f+0x244>)
 800a576:	429d      	cmp	r5, r3
 800a578:	dc46      	bgt.n	800a608 <__ieee754_rem_pio2f+0xb8>
 800a57a:	2e00      	cmp	r6, #0
 800a57c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a798 <__ieee754_rem_pio2f+0x248>
 800a580:	4b86      	ldr	r3, [pc, #536]	; (800a79c <__ieee754_rem_pio2f+0x24c>)
 800a582:	f025 050f 	bic.w	r5, r5, #15
 800a586:	dd1f      	ble.n	800a5c8 <__ieee754_rem_pio2f+0x78>
 800a588:	429d      	cmp	r5, r3
 800a58a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a58e:	d00e      	beq.n	800a5ae <__ieee754_rem_pio2f+0x5e>
 800a590:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a7a0 <__ieee754_rem_pio2f+0x250>
 800a594:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a598:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a59c:	ed80 0a00 	vstr	s0, [r0]
 800a5a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	edc4 7a01 	vstr	s15, [r4, #4]
 800a5aa:	b007      	add	sp, #28
 800a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ae:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a7a4 <__ieee754_rem_pio2f+0x254>
 800a5b2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a7a8 <__ieee754_rem_pio2f+0x258>
 800a5b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a5ba:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a5be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a5c2:	edc0 6a00 	vstr	s13, [r0]
 800a5c6:	e7eb      	b.n	800a5a0 <__ieee754_rem_pio2f+0x50>
 800a5c8:	429d      	cmp	r5, r3
 800a5ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a5ce:	d00e      	beq.n	800a5ee <__ieee754_rem_pio2f+0x9e>
 800a5d0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a7a0 <__ieee754_rem_pio2f+0x250>
 800a5d4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a5d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a5dc:	ed80 0a00 	vstr	s0, [r0]
 800a5e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	edc4 7a01 	vstr	s15, [r4, #4]
 800a5ec:	e7dd      	b.n	800a5aa <__ieee754_rem_pio2f+0x5a>
 800a5ee:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a7a4 <__ieee754_rem_pio2f+0x254>
 800a5f2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a7a8 <__ieee754_rem_pio2f+0x258>
 800a5f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a5fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a5fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a602:	edc0 6a00 	vstr	s13, [r0]
 800a606:	e7eb      	b.n	800a5e0 <__ieee754_rem_pio2f+0x90>
 800a608:	4b68      	ldr	r3, [pc, #416]	; (800a7ac <__ieee754_rem_pio2f+0x25c>)
 800a60a:	429d      	cmp	r5, r3
 800a60c:	dc72      	bgt.n	800a6f4 <__ieee754_rem_pio2f+0x1a4>
 800a60e:	f000 fcd1 	bl	800afb4 <fabsf>
 800a612:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a7b0 <__ieee754_rem_pio2f+0x260>
 800a616:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a61a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a61e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a626:	ee17 0a90 	vmov	r0, s15
 800a62a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a798 <__ieee754_rem_pio2f+0x248>
 800a62e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a632:	281f      	cmp	r0, #31
 800a634:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a7a0 <__ieee754_rem_pio2f+0x250>
 800a638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63c:	eeb1 6a47 	vneg.f32	s12, s14
 800a640:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a644:	ee16 2a90 	vmov	r2, s13
 800a648:	dc1c      	bgt.n	800a684 <__ieee754_rem_pio2f+0x134>
 800a64a:	495a      	ldr	r1, [pc, #360]	; (800a7b4 <__ieee754_rem_pio2f+0x264>)
 800a64c:	1e47      	subs	r7, r0, #1
 800a64e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a652:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a656:	428b      	cmp	r3, r1
 800a658:	d014      	beq.n	800a684 <__ieee754_rem_pio2f+0x134>
 800a65a:	6022      	str	r2, [r4, #0]
 800a65c:	ed94 7a00 	vldr	s14, [r4]
 800a660:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a664:	2e00      	cmp	r6, #0
 800a666:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a66a:	ed84 0a01 	vstr	s0, [r4, #4]
 800a66e:	da9c      	bge.n	800a5aa <__ieee754_rem_pio2f+0x5a>
 800a670:	eeb1 7a47 	vneg.f32	s14, s14
 800a674:	eeb1 0a40 	vneg.f32	s0, s0
 800a678:	ed84 7a00 	vstr	s14, [r4]
 800a67c:	ed84 0a01 	vstr	s0, [r4, #4]
 800a680:	4240      	negs	r0, r0
 800a682:	e792      	b.n	800a5aa <__ieee754_rem_pio2f+0x5a>
 800a684:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a688:	15eb      	asrs	r3, r5, #23
 800a68a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a68e:	2d08      	cmp	r5, #8
 800a690:	dde3      	ble.n	800a65a <__ieee754_rem_pio2f+0x10a>
 800a692:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a7a4 <__ieee754_rem_pio2f+0x254>
 800a696:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a7a8 <__ieee754_rem_pio2f+0x258>
 800a69a:	eef0 6a40 	vmov.f32	s13, s0
 800a69e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a6a2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a6a6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a6aa:	eef0 7a40 	vmov.f32	s15, s0
 800a6ae:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a6b2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a6b6:	ee15 2a90 	vmov	r2, s11
 800a6ba:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a6be:	1a5b      	subs	r3, r3, r1
 800a6c0:	2b19      	cmp	r3, #25
 800a6c2:	dc04      	bgt.n	800a6ce <__ieee754_rem_pio2f+0x17e>
 800a6c4:	edc4 5a00 	vstr	s11, [r4]
 800a6c8:	eeb0 0a66 	vmov.f32	s0, s13
 800a6cc:	e7c6      	b.n	800a65c <__ieee754_rem_pio2f+0x10c>
 800a6ce:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a7b8 <__ieee754_rem_pio2f+0x268>
 800a6d2:	eeb0 0a66 	vmov.f32	s0, s13
 800a6d6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a6da:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a6de:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a7bc <__ieee754_rem_pio2f+0x26c>
 800a6e2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a6e6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a6ea:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a6ee:	ed84 7a00 	vstr	s14, [r4]
 800a6f2:	e7b3      	b.n	800a65c <__ieee754_rem_pio2f+0x10c>
 800a6f4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a6f8:	db06      	blt.n	800a708 <__ieee754_rem_pio2f+0x1b8>
 800a6fa:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a6fe:	edc0 7a01 	vstr	s15, [r0, #4]
 800a702:	edc0 7a00 	vstr	s15, [r0]
 800a706:	e733      	b.n	800a570 <__ieee754_rem_pio2f+0x20>
 800a708:	15ea      	asrs	r2, r5, #23
 800a70a:	3a86      	subs	r2, #134	; 0x86
 800a70c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a710:	ee07 3a90 	vmov	s15, r3
 800a714:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a718:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a7c0 <__ieee754_rem_pio2f+0x270>
 800a71c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a724:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a728:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a72c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a730:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a738:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a73c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a740:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a748:	edcd 7a05 	vstr	s15, [sp, #20]
 800a74c:	d11e      	bne.n	800a78c <__ieee754_rem_pio2f+0x23c>
 800a74e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a756:	bf14      	ite	ne
 800a758:	2302      	movne	r3, #2
 800a75a:	2301      	moveq	r3, #1
 800a75c:	4919      	ldr	r1, [pc, #100]	; (800a7c4 <__ieee754_rem_pio2f+0x274>)
 800a75e:	9101      	str	r1, [sp, #4]
 800a760:	2102      	movs	r1, #2
 800a762:	9100      	str	r1, [sp, #0]
 800a764:	a803      	add	r0, sp, #12
 800a766:	4621      	mov	r1, r4
 800a768:	f000 f892 	bl	800a890 <__kernel_rem_pio2f>
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	f6bf af1c 	bge.w	800a5aa <__ieee754_rem_pio2f+0x5a>
 800a772:	edd4 7a00 	vldr	s15, [r4]
 800a776:	eef1 7a67 	vneg.f32	s15, s15
 800a77a:	edc4 7a00 	vstr	s15, [r4]
 800a77e:	edd4 7a01 	vldr	s15, [r4, #4]
 800a782:	eef1 7a67 	vneg.f32	s15, s15
 800a786:	edc4 7a01 	vstr	s15, [r4, #4]
 800a78a:	e779      	b.n	800a680 <__ieee754_rem_pio2f+0x130>
 800a78c:	2303      	movs	r3, #3
 800a78e:	e7e5      	b.n	800a75c <__ieee754_rem_pio2f+0x20c>
 800a790:	3f490fd8 	.word	0x3f490fd8
 800a794:	4016cbe3 	.word	0x4016cbe3
 800a798:	3fc90f80 	.word	0x3fc90f80
 800a79c:	3fc90fd0 	.word	0x3fc90fd0
 800a7a0:	37354443 	.word	0x37354443
 800a7a4:	37354400 	.word	0x37354400
 800a7a8:	2e85a308 	.word	0x2e85a308
 800a7ac:	43490f80 	.word	0x43490f80
 800a7b0:	3f22f984 	.word	0x3f22f984
 800a7b4:	0800b1a4 	.word	0x0800b1a4
 800a7b8:	2e85a300 	.word	0x2e85a300
 800a7bc:	248d3132 	.word	0x248d3132
 800a7c0:	43800000 	.word	0x43800000
 800a7c4:	0800b224 	.word	0x0800b224

0800a7c8 <__ieee754_sqrtf>:
 800a7c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <__kernel_cosf>:
 800a7d0:	ee10 3a10 	vmov	r3, s0
 800a7d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a7dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a7e0:	da05      	bge.n	800a7ee <__kernel_cosf+0x1e>
 800a7e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a7e6:	ee17 2a90 	vmov	r2, s15
 800a7ea:	2a00      	cmp	r2, #0
 800a7ec:	d03d      	beq.n	800a86a <__kernel_cosf+0x9a>
 800a7ee:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a7f2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a870 <__kernel_cosf+0xa0>
 800a7f6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a874 <__kernel_cosf+0xa4>
 800a7fa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a878 <__kernel_cosf+0xa8>
 800a7fe:	4a1f      	ldr	r2, [pc, #124]	; (800a87c <__kernel_cosf+0xac>)
 800a800:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a804:	4293      	cmp	r3, r2
 800a806:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a880 <__kernel_cosf+0xb0>
 800a80a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a80e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a884 <__kernel_cosf+0xb4>
 800a812:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a816:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a888 <__kernel_cosf+0xb8>
 800a81a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a81e:	eeb0 7a66 	vmov.f32	s14, s13
 800a822:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a826:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a82a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a82e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a832:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a836:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a83a:	dc04      	bgt.n	800a846 <__kernel_cosf+0x76>
 800a83c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a840:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a844:	4770      	bx	lr
 800a846:	4a11      	ldr	r2, [pc, #68]	; (800a88c <__kernel_cosf+0xbc>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	bfda      	itte	le
 800a84c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a850:	ee06 3a90 	vmovle	s13, r3
 800a854:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a858:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a85c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a864:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a868:	4770      	bx	lr
 800a86a:	eeb0 0a46 	vmov.f32	s0, s12
 800a86e:	4770      	bx	lr
 800a870:	ad47d74e 	.word	0xad47d74e
 800a874:	310f74f6 	.word	0x310f74f6
 800a878:	3d2aaaab 	.word	0x3d2aaaab
 800a87c:	3e999999 	.word	0x3e999999
 800a880:	b493f27c 	.word	0xb493f27c
 800a884:	37d00d01 	.word	0x37d00d01
 800a888:	bab60b61 	.word	0xbab60b61
 800a88c:	3f480000 	.word	0x3f480000

0800a890 <__kernel_rem_pio2f>:
 800a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	ed2d 8b04 	vpush	{d8-d9}
 800a898:	b0d9      	sub	sp, #356	; 0x164
 800a89a:	4688      	mov	r8, r1
 800a89c:	9002      	str	r0, [sp, #8]
 800a89e:	49bb      	ldr	r1, [pc, #748]	; (800ab8c <__kernel_rem_pio2f+0x2fc>)
 800a8a0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a8a8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a8ac:	1e59      	subs	r1, r3, #1
 800a8ae:	1d13      	adds	r3, r2, #4
 800a8b0:	db27      	blt.n	800a902 <__kernel_rem_pio2f+0x72>
 800a8b2:	f1b2 0b03 	subs.w	fp, r2, #3
 800a8b6:	bf48      	it	mi
 800a8b8:	f102 0b04 	addmi.w	fp, r2, #4
 800a8bc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a8c0:	1c45      	adds	r5, r0, #1
 800a8c2:	00ec      	lsls	r4, r5, #3
 800a8c4:	1a47      	subs	r7, r0, r1
 800a8c6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800ab9c <__kernel_rem_pio2f+0x30c>
 800a8ca:	9403      	str	r4, [sp, #12]
 800a8cc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a8d0:	eb0a 0c01 	add.w	ip, sl, r1
 800a8d4:	ae1c      	add	r6, sp, #112	; 0x70
 800a8d6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a8da:	2400      	movs	r4, #0
 800a8dc:	4564      	cmp	r4, ip
 800a8de:	dd12      	ble.n	800a906 <__kernel_rem_pio2f+0x76>
 800a8e0:	9b01      	ldr	r3, [sp, #4]
 800a8e2:	ac1c      	add	r4, sp, #112	; 0x70
 800a8e4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a8e8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a8ec:	f04f 0c00 	mov.w	ip, #0
 800a8f0:	45d4      	cmp	ip, sl
 800a8f2:	dc27      	bgt.n	800a944 <__kernel_rem_pio2f+0xb4>
 800a8f4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a8f8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800ab9c <__kernel_rem_pio2f+0x30c>
 800a8fc:	4627      	mov	r7, r4
 800a8fe:	2600      	movs	r6, #0
 800a900:	e016      	b.n	800a930 <__kernel_rem_pio2f+0xa0>
 800a902:	2000      	movs	r0, #0
 800a904:	e7dc      	b.n	800a8c0 <__kernel_rem_pio2f+0x30>
 800a906:	42e7      	cmn	r7, r4
 800a908:	bf5d      	ittte	pl
 800a90a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a90e:	ee07 3a90 	vmovpl	s15, r3
 800a912:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a916:	eef0 7a47 	vmovmi.f32	s15, s14
 800a91a:	ece6 7a01 	vstmia	r6!, {s15}
 800a91e:	3401      	adds	r4, #1
 800a920:	e7dc      	b.n	800a8dc <__kernel_rem_pio2f+0x4c>
 800a922:	ecf9 6a01 	vldmia	r9!, {s13}
 800a926:	ed97 7a00 	vldr	s14, [r7]
 800a92a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a92e:	3601      	adds	r6, #1
 800a930:	428e      	cmp	r6, r1
 800a932:	f1a7 0704 	sub.w	r7, r7, #4
 800a936:	ddf4      	ble.n	800a922 <__kernel_rem_pio2f+0x92>
 800a938:	eceb 7a01 	vstmia	fp!, {s15}
 800a93c:	f10c 0c01 	add.w	ip, ip, #1
 800a940:	3404      	adds	r4, #4
 800a942:	e7d5      	b.n	800a8f0 <__kernel_rem_pio2f+0x60>
 800a944:	ab08      	add	r3, sp, #32
 800a946:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a94a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800ab98 <__kernel_rem_pio2f+0x308>
 800a94e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800ab94 <__kernel_rem_pio2f+0x304>
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a958:	4656      	mov	r6, sl
 800a95a:	00b3      	lsls	r3, r6, #2
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	ab58      	add	r3, sp, #352	; 0x160
 800a960:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a964:	ac08      	add	r4, sp, #32
 800a966:	ab44      	add	r3, sp, #272	; 0x110
 800a968:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a96c:	46a4      	mov	ip, r4
 800a96e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a972:	4637      	mov	r7, r6
 800a974:	2f00      	cmp	r7, #0
 800a976:	f1a0 0004 	sub.w	r0, r0, #4
 800a97a:	dc4f      	bgt.n	800aa1c <__kernel_rem_pio2f+0x18c>
 800a97c:	4628      	mov	r0, r5
 800a97e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a982:	f000 fb61 	bl	800b048 <scalbnf>
 800a986:	eeb0 8a40 	vmov.f32	s16, s0
 800a98a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a98e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a992:	f000 fb17 	bl	800afc4 <floorf>
 800a996:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a99a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a99e:	2d00      	cmp	r5, #0
 800a9a0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a9a4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a9a8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a9ac:	ee17 9a90 	vmov	r9, s15
 800a9b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a9b4:	dd44      	ble.n	800aa40 <__kernel_rem_pio2f+0x1b0>
 800a9b6:	f106 3cff 	add.w	ip, r6, #4294967295
 800a9ba:	ab08      	add	r3, sp, #32
 800a9bc:	f1c5 0e08 	rsb	lr, r5, #8
 800a9c0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a9c4:	fa47 f00e 	asr.w	r0, r7, lr
 800a9c8:	4481      	add	r9, r0
 800a9ca:	fa00 f00e 	lsl.w	r0, r0, lr
 800a9ce:	1a3f      	subs	r7, r7, r0
 800a9d0:	f1c5 0007 	rsb	r0, r5, #7
 800a9d4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a9d8:	4107      	asrs	r7, r0
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	dd3f      	ble.n	800aa5e <__kernel_rem_pio2f+0x1ce>
 800a9de:	f04f 0e00 	mov.w	lr, #0
 800a9e2:	f109 0901 	add.w	r9, r9, #1
 800a9e6:	4673      	mov	r3, lr
 800a9e8:	4576      	cmp	r6, lr
 800a9ea:	dc6b      	bgt.n	800aac4 <__kernel_rem_pio2f+0x234>
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	dd04      	ble.n	800a9fa <__kernel_rem_pio2f+0x16a>
 800a9f0:	2d01      	cmp	r5, #1
 800a9f2:	d078      	beq.n	800aae6 <__kernel_rem_pio2f+0x256>
 800a9f4:	2d02      	cmp	r5, #2
 800a9f6:	f000 8081 	beq.w	800aafc <__kernel_rem_pio2f+0x26c>
 800a9fa:	2f02      	cmp	r7, #2
 800a9fc:	d12f      	bne.n	800aa5e <__kernel_rem_pio2f+0x1ce>
 800a9fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aa02:	ee30 8a48 	vsub.f32	s16, s0, s16
 800aa06:	b353      	cbz	r3, 800aa5e <__kernel_rem_pio2f+0x1ce>
 800aa08:	4628      	mov	r0, r5
 800aa0a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800aa0e:	f000 fb1b 	bl	800b048 <scalbnf>
 800aa12:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800aa16:	ee38 8a40 	vsub.f32	s16, s16, s0
 800aa1a:	e020      	b.n	800aa5e <__kernel_rem_pio2f+0x1ce>
 800aa1c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800aa20:	3f01      	subs	r7, #1
 800aa22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa2a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800aa2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aa32:	ecac 0a01 	vstmia	ip!, {s0}
 800aa36:	ed90 0a00 	vldr	s0, [r0]
 800aa3a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800aa3e:	e799      	b.n	800a974 <__kernel_rem_pio2f+0xe4>
 800aa40:	d105      	bne.n	800aa4e <__kernel_rem_pio2f+0x1be>
 800aa42:	1e70      	subs	r0, r6, #1
 800aa44:	ab08      	add	r3, sp, #32
 800aa46:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800aa4a:	11ff      	asrs	r7, r7, #7
 800aa4c:	e7c5      	b.n	800a9da <__kernel_rem_pio2f+0x14a>
 800aa4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aa52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aa56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa5a:	da31      	bge.n	800aac0 <__kernel_rem_pio2f+0x230>
 800aa5c:	2700      	movs	r7, #0
 800aa5e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aa62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa66:	f040 809b 	bne.w	800aba0 <__kernel_rem_pio2f+0x310>
 800aa6a:	1e74      	subs	r4, r6, #1
 800aa6c:	46a4      	mov	ip, r4
 800aa6e:	2000      	movs	r0, #0
 800aa70:	45d4      	cmp	ip, sl
 800aa72:	da4a      	bge.n	800ab0a <__kernel_rem_pio2f+0x27a>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d07a      	beq.n	800ab6e <__kernel_rem_pio2f+0x2de>
 800aa78:	ab08      	add	r3, sp, #32
 800aa7a:	3d08      	subs	r5, #8
 800aa7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 8081 	beq.w	800ab88 <__kernel_rem_pio2f+0x2f8>
 800aa86:	4628      	mov	r0, r5
 800aa88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aa8c:	00a5      	lsls	r5, r4, #2
 800aa8e:	f000 fadb 	bl	800b048 <scalbnf>
 800aa92:	aa44      	add	r2, sp, #272	; 0x110
 800aa94:	1d2b      	adds	r3, r5, #4
 800aa96:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ab98 <__kernel_rem_pio2f+0x308>
 800aa9a:	18d1      	adds	r1, r2, r3
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	f280 80ae 	bge.w	800ac00 <__kernel_rem_pio2f+0x370>
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	2a00      	cmp	r2, #0
 800aaa8:	f2c0 80cc 	blt.w	800ac44 <__kernel_rem_pio2f+0x3b4>
 800aaac:	a944      	add	r1, sp, #272	; 0x110
 800aaae:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800aab2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800ab90 <__kernel_rem_pio2f+0x300>
 800aab6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ab9c <__kernel_rem_pio2f+0x30c>
 800aaba:	2000      	movs	r0, #0
 800aabc:	1aa1      	subs	r1, r4, r2
 800aabe:	e0b6      	b.n	800ac2e <__kernel_rem_pio2f+0x39e>
 800aac0:	2702      	movs	r7, #2
 800aac2:	e78c      	b.n	800a9de <__kernel_rem_pio2f+0x14e>
 800aac4:	6820      	ldr	r0, [r4, #0]
 800aac6:	b94b      	cbnz	r3, 800aadc <__kernel_rem_pio2f+0x24c>
 800aac8:	b118      	cbz	r0, 800aad2 <__kernel_rem_pio2f+0x242>
 800aaca:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800aace:	6020      	str	r0, [r4, #0]
 800aad0:	2001      	movs	r0, #1
 800aad2:	f10e 0e01 	add.w	lr, lr, #1
 800aad6:	3404      	adds	r4, #4
 800aad8:	4603      	mov	r3, r0
 800aada:	e785      	b.n	800a9e8 <__kernel_rem_pio2f+0x158>
 800aadc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800aae0:	6020      	str	r0, [r4, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	e7f5      	b.n	800aad2 <__kernel_rem_pio2f+0x242>
 800aae6:	1e74      	subs	r4, r6, #1
 800aae8:	a808      	add	r0, sp, #32
 800aaea:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800aaee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800aaf2:	f10d 0c20 	add.w	ip, sp, #32
 800aaf6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800aafa:	e77e      	b.n	800a9fa <__kernel_rem_pio2f+0x16a>
 800aafc:	1e74      	subs	r4, r6, #1
 800aafe:	a808      	add	r0, sp, #32
 800ab00:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ab04:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ab08:	e7f3      	b.n	800aaf2 <__kernel_rem_pio2f+0x262>
 800ab0a:	ab08      	add	r3, sp, #32
 800ab0c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ab10:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab14:	4318      	orrs	r0, r3
 800ab16:	e7ab      	b.n	800aa70 <__kernel_rem_pio2f+0x1e0>
 800ab18:	f10c 0c01 	add.w	ip, ip, #1
 800ab1c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800ab20:	2c00      	cmp	r4, #0
 800ab22:	d0f9      	beq.n	800ab18 <__kernel_rem_pio2f+0x288>
 800ab24:	9b05      	ldr	r3, [sp, #20]
 800ab26:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ab2a:	eb0d 0003 	add.w	r0, sp, r3
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	18f4      	adds	r4, r6, r3
 800ab32:	ab1c      	add	r3, sp, #112	; 0x70
 800ab34:	1c77      	adds	r7, r6, #1
 800ab36:	384c      	subs	r0, #76	; 0x4c
 800ab38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab3c:	4466      	add	r6, ip
 800ab3e:	42be      	cmp	r6, r7
 800ab40:	f6ff af0b 	blt.w	800a95a <__kernel_rem_pio2f+0xca>
 800ab44:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800ab48:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ab4c:	ee07 3a90 	vmov	s15, r3
 800ab50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab54:	f04f 0c00 	mov.w	ip, #0
 800ab58:	ece4 7a01 	vstmia	r4!, {s15}
 800ab5c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ab9c <__kernel_rem_pio2f+0x30c>
 800ab60:	46a1      	mov	r9, r4
 800ab62:	458c      	cmp	ip, r1
 800ab64:	dd07      	ble.n	800ab76 <__kernel_rem_pio2f+0x2e6>
 800ab66:	ece0 7a01 	vstmia	r0!, {s15}
 800ab6a:	3701      	adds	r7, #1
 800ab6c:	e7e7      	b.n	800ab3e <__kernel_rem_pio2f+0x2ae>
 800ab6e:	9804      	ldr	r0, [sp, #16]
 800ab70:	f04f 0c01 	mov.w	ip, #1
 800ab74:	e7d2      	b.n	800ab1c <__kernel_rem_pio2f+0x28c>
 800ab76:	ecfe 6a01 	vldmia	lr!, {s13}
 800ab7a:	ed39 7a01 	vldmdb	r9!, {s14}
 800ab7e:	f10c 0c01 	add.w	ip, ip, #1
 800ab82:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ab86:	e7ec      	b.n	800ab62 <__kernel_rem_pio2f+0x2d2>
 800ab88:	3c01      	subs	r4, #1
 800ab8a:	e775      	b.n	800aa78 <__kernel_rem_pio2f+0x1e8>
 800ab8c:	0800b568 	.word	0x0800b568
 800ab90:	0800b53c 	.word	0x0800b53c
 800ab94:	43800000 	.word	0x43800000
 800ab98:	3b800000 	.word	0x3b800000
 800ab9c:	00000000 	.word	0x00000000
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	eeb0 0a48 	vmov.f32	s0, s16
 800aba6:	1a98      	subs	r0, r3, r2
 800aba8:	f000 fa4e 	bl	800b048 <scalbnf>
 800abac:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ab94 <__kernel_rem_pio2f+0x304>
 800abb0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800abb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb8:	db19      	blt.n	800abee <__kernel_rem_pio2f+0x35e>
 800abba:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ab98 <__kernel_rem_pio2f+0x308>
 800abbe:	ee60 7a27 	vmul.f32	s15, s0, s15
 800abc2:	aa08      	add	r2, sp, #32
 800abc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abc8:	1c74      	adds	r4, r6, #1
 800abca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abce:	3508      	adds	r5, #8
 800abd0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800abd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800abdc:	ee10 3a10 	vmov	r3, s0
 800abe0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800abe4:	ee17 3a90 	vmov	r3, s15
 800abe8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800abec:	e74b      	b.n	800aa86 <__kernel_rem_pio2f+0x1f6>
 800abee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800abf2:	aa08      	add	r2, sp, #32
 800abf4:	ee10 3a10 	vmov	r3, s0
 800abf8:	4634      	mov	r4, r6
 800abfa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800abfe:	e742      	b.n	800aa86 <__kernel_rem_pio2f+0x1f6>
 800ac00:	a808      	add	r0, sp, #32
 800ac02:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ac06:	9001      	str	r0, [sp, #4]
 800ac08:	ee07 0a90 	vmov	s15, r0
 800ac0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac10:	3a01      	subs	r2, #1
 800ac12:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ac16:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ac1a:	ed61 7a01 	vstmdb	r1!, {s15}
 800ac1e:	e73e      	b.n	800aa9e <__kernel_rem_pio2f+0x20e>
 800ac20:	ecfc 6a01 	vldmia	ip!, {s13}
 800ac24:	ecb6 7a01 	vldmia	r6!, {s14}
 800ac28:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	4550      	cmp	r0, sl
 800ac30:	dc01      	bgt.n	800ac36 <__kernel_rem_pio2f+0x3a6>
 800ac32:	4288      	cmp	r0, r1
 800ac34:	ddf4      	ble.n	800ac20 <__kernel_rem_pio2f+0x390>
 800ac36:	a858      	add	r0, sp, #352	; 0x160
 800ac38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac3c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ac40:	3a01      	subs	r2, #1
 800ac42:	e730      	b.n	800aaa6 <__kernel_rem_pio2f+0x216>
 800ac44:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800ac46:	2a02      	cmp	r2, #2
 800ac48:	dc09      	bgt.n	800ac5e <__kernel_rem_pio2f+0x3ce>
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	dc2a      	bgt.n	800aca4 <__kernel_rem_pio2f+0x414>
 800ac4e:	d043      	beq.n	800acd8 <__kernel_rem_pio2f+0x448>
 800ac50:	f009 0007 	and.w	r0, r9, #7
 800ac54:	b059      	add	sp, #356	; 0x164
 800ac56:	ecbd 8b04 	vpop	{d8-d9}
 800ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d1f5      	bne.n	800ac50 <__kernel_rem_pio2f+0x3c0>
 800ac64:	ab30      	add	r3, sp, #192	; 0xc0
 800ac66:	442b      	add	r3, r5
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	f1a1 0104 	sub.w	r1, r1, #4
 800ac74:	dc51      	bgt.n	800ad1a <__kernel_rem_pio2f+0x48a>
 800ac76:	4621      	mov	r1, r4
 800ac78:	2901      	cmp	r1, #1
 800ac7a:	f1a2 0204 	sub.w	r2, r2, #4
 800ac7e:	dc5c      	bgt.n	800ad3a <__kernel_rem_pio2f+0x4aa>
 800ac80:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ab9c <__kernel_rem_pio2f+0x30c>
 800ac84:	3304      	adds	r3, #4
 800ac86:	2c01      	cmp	r4, #1
 800ac88:	dc67      	bgt.n	800ad5a <__kernel_rem_pio2f+0x4ca>
 800ac8a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ac8e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ac92:	2f00      	cmp	r7, #0
 800ac94:	d167      	bne.n	800ad66 <__kernel_rem_pio2f+0x4d6>
 800ac96:	edc8 6a00 	vstr	s13, [r8]
 800ac9a:	ed88 7a01 	vstr	s14, [r8, #4]
 800ac9e:	edc8 7a02 	vstr	s15, [r8, #8]
 800aca2:	e7d5      	b.n	800ac50 <__kernel_rem_pio2f+0x3c0>
 800aca4:	aa30      	add	r2, sp, #192	; 0xc0
 800aca6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800ab9c <__kernel_rem_pio2f+0x30c>
 800acaa:	4413      	add	r3, r2
 800acac:	4622      	mov	r2, r4
 800acae:	2a00      	cmp	r2, #0
 800acb0:	da24      	bge.n	800acfc <__kernel_rem_pio2f+0x46c>
 800acb2:	b34f      	cbz	r7, 800ad08 <__kernel_rem_pio2f+0x478>
 800acb4:	eef1 7a47 	vneg.f32	s15, s14
 800acb8:	edc8 7a00 	vstr	s15, [r8]
 800acbc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800acc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acc4:	aa31      	add	r2, sp, #196	; 0xc4
 800acc6:	2301      	movs	r3, #1
 800acc8:	429c      	cmp	r4, r3
 800acca:	da20      	bge.n	800ad0e <__kernel_rem_pio2f+0x47e>
 800accc:	b10f      	cbz	r7, 800acd2 <__kernel_rem_pio2f+0x442>
 800acce:	eef1 7a67 	vneg.f32	s15, s15
 800acd2:	edc8 7a01 	vstr	s15, [r8, #4]
 800acd6:	e7bb      	b.n	800ac50 <__kernel_rem_pio2f+0x3c0>
 800acd8:	aa30      	add	r2, sp, #192	; 0xc0
 800acda:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800ab9c <__kernel_rem_pio2f+0x30c>
 800acde:	4413      	add	r3, r2
 800ace0:	2c00      	cmp	r4, #0
 800ace2:	da05      	bge.n	800acf0 <__kernel_rem_pio2f+0x460>
 800ace4:	b10f      	cbz	r7, 800acea <__kernel_rem_pio2f+0x45a>
 800ace6:	eef1 7a67 	vneg.f32	s15, s15
 800acea:	edc8 7a00 	vstr	s15, [r8]
 800acee:	e7af      	b.n	800ac50 <__kernel_rem_pio2f+0x3c0>
 800acf0:	ed33 7a01 	vldmdb	r3!, {s14}
 800acf4:	3c01      	subs	r4, #1
 800acf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acfa:	e7f1      	b.n	800ace0 <__kernel_rem_pio2f+0x450>
 800acfc:	ed73 7a01 	vldmdb	r3!, {s15}
 800ad00:	3a01      	subs	r2, #1
 800ad02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad06:	e7d2      	b.n	800acae <__kernel_rem_pio2f+0x41e>
 800ad08:	eef0 7a47 	vmov.f32	s15, s14
 800ad0c:	e7d4      	b.n	800acb8 <__kernel_rem_pio2f+0x428>
 800ad0e:	ecb2 7a01 	vldmia	r2!, {s14}
 800ad12:	3301      	adds	r3, #1
 800ad14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad18:	e7d6      	b.n	800acc8 <__kernel_rem_pio2f+0x438>
 800ad1a:	edd1 7a00 	vldr	s15, [r1]
 800ad1e:	edd1 6a01 	vldr	s13, [r1, #4]
 800ad22:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ad26:	3801      	subs	r0, #1
 800ad28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad2c:	ed81 7a00 	vstr	s14, [r1]
 800ad30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad34:	edc1 7a01 	vstr	s15, [r1, #4]
 800ad38:	e799      	b.n	800ac6e <__kernel_rem_pio2f+0x3de>
 800ad3a:	edd2 7a00 	vldr	s15, [r2]
 800ad3e:	edd2 6a01 	vldr	s13, [r2, #4]
 800ad42:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ad46:	3901      	subs	r1, #1
 800ad48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad4c:	ed82 7a00 	vstr	s14, [r2]
 800ad50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad54:	edc2 7a01 	vstr	s15, [r2, #4]
 800ad58:	e78e      	b.n	800ac78 <__kernel_rem_pio2f+0x3e8>
 800ad5a:	ed33 7a01 	vldmdb	r3!, {s14}
 800ad5e:	3c01      	subs	r4, #1
 800ad60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad64:	e78f      	b.n	800ac86 <__kernel_rem_pio2f+0x3f6>
 800ad66:	eef1 6a66 	vneg.f32	s13, s13
 800ad6a:	eeb1 7a47 	vneg.f32	s14, s14
 800ad6e:	edc8 6a00 	vstr	s13, [r8]
 800ad72:	ed88 7a01 	vstr	s14, [r8, #4]
 800ad76:	eef1 7a67 	vneg.f32	s15, s15
 800ad7a:	e790      	b.n	800ac9e <__kernel_rem_pio2f+0x40e>

0800ad7c <__kernel_sinf>:
 800ad7c:	ee10 3a10 	vmov	r3, s0
 800ad80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad84:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ad88:	da04      	bge.n	800ad94 <__kernel_sinf+0x18>
 800ad8a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ad8e:	ee17 3a90 	vmov	r3, s15
 800ad92:	b35b      	cbz	r3, 800adec <__kernel_sinf+0x70>
 800ad94:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ad98:	eddf 7a15 	vldr	s15, [pc, #84]	; 800adf0 <__kernel_sinf+0x74>
 800ad9c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800adf4 <__kernel_sinf+0x78>
 800ada0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ada4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800adf8 <__kernel_sinf+0x7c>
 800ada8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800adac:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800adfc <__kernel_sinf+0x80>
 800adb0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800adb4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ae00 <__kernel_sinf+0x84>
 800adb8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800adbc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800adc0:	b930      	cbnz	r0, 800add0 <__kernel_sinf+0x54>
 800adc2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ae04 <__kernel_sinf+0x88>
 800adc6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800adca:	eea6 0a26 	vfma.f32	s0, s12, s13
 800adce:	4770      	bx	lr
 800add0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800add4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800add8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800addc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ade0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ae08 <__kernel_sinf+0x8c>
 800ade4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ade8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	2f2ec9d3 	.word	0x2f2ec9d3
 800adf4:	b2d72f34 	.word	0xb2d72f34
 800adf8:	3638ef1b 	.word	0x3638ef1b
 800adfc:	b9500d01 	.word	0xb9500d01
 800ae00:	3c088889 	.word	0x3c088889
 800ae04:	be2aaaab 	.word	0xbe2aaaab
 800ae08:	3e2aaaab 	.word	0x3e2aaaab

0800ae0c <atanf>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	ee10 5a10 	vmov	r5, s0
 800ae12:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ae16:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ae1a:	eef0 7a40 	vmov.f32	s15, s0
 800ae1e:	db10      	blt.n	800ae42 <atanf+0x36>
 800ae20:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ae24:	dd04      	ble.n	800ae30 <atanf+0x24>
 800ae26:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ae2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800af68 <atanf+0x15c>
 800ae34:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800af6c <atanf+0x160>
 800ae38:	2d00      	cmp	r5, #0
 800ae3a:	bfd8      	it	le
 800ae3c:	eef0 7a40 	vmovle.f32	s15, s0
 800ae40:	e7f3      	b.n	800ae2a <atanf+0x1e>
 800ae42:	4b4b      	ldr	r3, [pc, #300]	; (800af70 <atanf+0x164>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	dc10      	bgt.n	800ae6a <atanf+0x5e>
 800ae48:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ae4c:	da0a      	bge.n	800ae64 <atanf+0x58>
 800ae4e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800af74 <atanf+0x168>
 800ae52:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ae56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae5a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ae5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae62:	dce2      	bgt.n	800ae2a <atanf+0x1e>
 800ae64:	f04f 33ff 	mov.w	r3, #4294967295
 800ae68:	e013      	b.n	800ae92 <atanf+0x86>
 800ae6a:	f000 f8a3 	bl	800afb4 <fabsf>
 800ae6e:	4b42      	ldr	r3, [pc, #264]	; (800af78 <atanf+0x16c>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	dc4f      	bgt.n	800af14 <atanf+0x108>
 800ae74:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ae78:	429c      	cmp	r4, r3
 800ae7a:	dc41      	bgt.n	800af00 <atanf+0xf4>
 800ae7c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ae80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ae84:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae88:	2300      	movs	r3, #0
 800ae8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ae98:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800af7c <atanf+0x170>
 800ae9c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800af80 <atanf+0x174>
 800aea0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800af84 <atanf+0x178>
 800aea4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800aea8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800aeac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800af88 <atanf+0x17c>
 800aeb0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aeb4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800af8c <atanf+0x180>
 800aeb8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800aebc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800af90 <atanf+0x184>
 800aec0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aec4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800af94 <atanf+0x188>
 800aec8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800aecc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800af98 <atanf+0x18c>
 800aed0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800aed4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800af9c <atanf+0x190>
 800aed8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800aedc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800afa0 <atanf+0x194>
 800aee0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800aee4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800afa4 <atanf+0x198>
 800aee8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800aeec:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aef0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aef4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aef8:	d121      	bne.n	800af3e <atanf+0x132>
 800aefa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aefe:	e794      	b.n	800ae2a <atanf+0x1e>
 800af00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800af04:	ee30 7a67 	vsub.f32	s14, s0, s15
 800af08:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af0c:	2301      	movs	r3, #1
 800af0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800af12:	e7be      	b.n	800ae92 <atanf+0x86>
 800af14:	4b24      	ldr	r3, [pc, #144]	; (800afa8 <atanf+0x19c>)
 800af16:	429c      	cmp	r4, r3
 800af18:	dc0b      	bgt.n	800af32 <atanf+0x126>
 800af1a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800af1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af22:	eea0 7a27 	vfma.f32	s14, s0, s15
 800af26:	2302      	movs	r3, #2
 800af28:	ee70 6a67 	vsub.f32	s13, s0, s15
 800af2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af30:	e7af      	b.n	800ae92 <atanf+0x86>
 800af32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800af36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800af3a:	2303      	movs	r3, #3
 800af3c:	e7a9      	b.n	800ae92 <atanf+0x86>
 800af3e:	4a1b      	ldr	r2, [pc, #108]	; (800afac <atanf+0x1a0>)
 800af40:	491b      	ldr	r1, [pc, #108]	; (800afb0 <atanf+0x1a4>)
 800af42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800af46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800af4a:	ed93 0a00 	vldr	s0, [r3]
 800af4e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800af52:	ed92 0a00 	vldr	s0, [r2]
 800af56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800af60:	bfb8      	it	lt
 800af62:	eef1 7a67 	vneglt.f32	s15, s15
 800af66:	e760      	b.n	800ae2a <atanf+0x1e>
 800af68:	3fc90fdb 	.word	0x3fc90fdb
 800af6c:	bfc90fdb 	.word	0xbfc90fdb
 800af70:	3edfffff 	.word	0x3edfffff
 800af74:	7149f2ca 	.word	0x7149f2ca
 800af78:	3f97ffff 	.word	0x3f97ffff
 800af7c:	3c8569d7 	.word	0x3c8569d7
 800af80:	3d4bda59 	.word	0x3d4bda59
 800af84:	bd6ef16b 	.word	0xbd6ef16b
 800af88:	3d886b35 	.word	0x3d886b35
 800af8c:	3dba2e6e 	.word	0x3dba2e6e
 800af90:	3e124925 	.word	0x3e124925
 800af94:	3eaaaaab 	.word	0x3eaaaaab
 800af98:	bd15a221 	.word	0xbd15a221
 800af9c:	bd9d8795 	.word	0xbd9d8795
 800afa0:	bde38e38 	.word	0xbde38e38
 800afa4:	be4ccccd 	.word	0xbe4ccccd
 800afa8:	401bffff 	.word	0x401bffff
 800afac:	0800b574 	.word	0x0800b574
 800afb0:	0800b584 	.word	0x0800b584

0800afb4 <fabsf>:
 800afb4:	ee10 3a10 	vmov	r3, s0
 800afb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afbc:	ee00 3a10 	vmov	s0, r3
 800afc0:	4770      	bx	lr
	...

0800afc4 <floorf>:
 800afc4:	ee10 3a10 	vmov	r3, s0
 800afc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800afcc:	3a7f      	subs	r2, #127	; 0x7f
 800afce:	2a16      	cmp	r2, #22
 800afd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800afd4:	dc2a      	bgt.n	800b02c <floorf+0x68>
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	da11      	bge.n	800affe <floorf+0x3a>
 800afda:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b03c <floorf+0x78>
 800afde:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afe2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800afe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afea:	dd05      	ble.n	800aff8 <floorf+0x34>
 800afec:	2b00      	cmp	r3, #0
 800afee:	da23      	bge.n	800b038 <floorf+0x74>
 800aff0:	4a13      	ldr	r2, [pc, #76]	; (800b040 <floorf+0x7c>)
 800aff2:	2900      	cmp	r1, #0
 800aff4:	bf18      	it	ne
 800aff6:	4613      	movne	r3, r2
 800aff8:	ee00 3a10 	vmov	s0, r3
 800affc:	4770      	bx	lr
 800affe:	4911      	ldr	r1, [pc, #68]	; (800b044 <floorf+0x80>)
 800b000:	4111      	asrs	r1, r2
 800b002:	420b      	tst	r3, r1
 800b004:	d0fa      	beq.n	800affc <floorf+0x38>
 800b006:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b03c <floorf+0x78>
 800b00a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b00e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b016:	ddef      	ble.n	800aff8 <floorf+0x34>
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bfbe      	ittt	lt
 800b01c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b020:	fa40 f202 	asrlt.w	r2, r0, r2
 800b024:	189b      	addlt	r3, r3, r2
 800b026:	ea23 0301 	bic.w	r3, r3, r1
 800b02a:	e7e5      	b.n	800aff8 <floorf+0x34>
 800b02c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b030:	d3e4      	bcc.n	800affc <floorf+0x38>
 800b032:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b036:	4770      	bx	lr
 800b038:	2300      	movs	r3, #0
 800b03a:	e7dd      	b.n	800aff8 <floorf+0x34>
 800b03c:	7149f2ca 	.word	0x7149f2ca
 800b040:	bf800000 	.word	0xbf800000
 800b044:	007fffff 	.word	0x007fffff

0800b048 <scalbnf>:
 800b048:	ee10 3a10 	vmov	r3, s0
 800b04c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b050:	d025      	beq.n	800b09e <scalbnf+0x56>
 800b052:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b056:	d302      	bcc.n	800b05e <scalbnf+0x16>
 800b058:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b05c:	4770      	bx	lr
 800b05e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b062:	d122      	bne.n	800b0aa <scalbnf+0x62>
 800b064:	4b2a      	ldr	r3, [pc, #168]	; (800b110 <scalbnf+0xc8>)
 800b066:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b114 <scalbnf+0xcc>
 800b06a:	4298      	cmp	r0, r3
 800b06c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b070:	db16      	blt.n	800b0a0 <scalbnf+0x58>
 800b072:	ee10 3a10 	vmov	r3, s0
 800b076:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b07a:	3a19      	subs	r2, #25
 800b07c:	4402      	add	r2, r0
 800b07e:	2afe      	cmp	r2, #254	; 0xfe
 800b080:	dd15      	ble.n	800b0ae <scalbnf+0x66>
 800b082:	ee10 3a10 	vmov	r3, s0
 800b086:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b118 <scalbnf+0xd0>
 800b08a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b11c <scalbnf+0xd4>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	eeb0 7a67 	vmov.f32	s14, s15
 800b094:	bfb8      	it	lt
 800b096:	eef0 7a66 	vmovlt.f32	s15, s13
 800b09a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b09e:	4770      	bx	lr
 800b0a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b120 <scalbnf+0xd8>
 800b0a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b0a8:	4770      	bx	lr
 800b0aa:	0dd2      	lsrs	r2, r2, #23
 800b0ac:	e7e6      	b.n	800b07c <scalbnf+0x34>
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	dd06      	ble.n	800b0c0 <scalbnf+0x78>
 800b0b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b0ba:	ee00 3a10 	vmov	s0, r3
 800b0be:	4770      	bx	lr
 800b0c0:	f112 0f16 	cmn.w	r2, #22
 800b0c4:	da1a      	bge.n	800b0fc <scalbnf+0xb4>
 800b0c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0ca:	4298      	cmp	r0, r3
 800b0cc:	ee10 3a10 	vmov	r3, s0
 800b0d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0d4:	dd0a      	ble.n	800b0ec <scalbnf+0xa4>
 800b0d6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b118 <scalbnf+0xd0>
 800b0da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b11c <scalbnf+0xd4>
 800b0de:	eef0 7a40 	vmov.f32	s15, s0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bf18      	it	ne
 800b0e6:	eeb0 0a47 	vmovne.f32	s0, s14
 800b0ea:	e7db      	b.n	800b0a4 <scalbnf+0x5c>
 800b0ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b120 <scalbnf+0xd8>
 800b0f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b124 <scalbnf+0xdc>
 800b0f4:	eef0 7a40 	vmov.f32	s15, s0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	e7f3      	b.n	800b0e4 <scalbnf+0x9c>
 800b0fc:	3219      	adds	r2, #25
 800b0fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b102:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b106:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b128 <scalbnf+0xe0>
 800b10a:	ee07 3a10 	vmov	s14, r3
 800b10e:	e7c4      	b.n	800b09a <scalbnf+0x52>
 800b110:	ffff3cb0 	.word	0xffff3cb0
 800b114:	4c000000 	.word	0x4c000000
 800b118:	7149f2ca 	.word	0x7149f2ca
 800b11c:	f149f2ca 	.word	0xf149f2ca
 800b120:	0da24260 	.word	0x0da24260
 800b124:	8da24260 	.word	0x8da24260
 800b128:	33000000 	.word	0x33000000

0800b12c <_init>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	bf00      	nop
 800b130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b132:	bc08      	pop	{r3}
 800b134:	469e      	mov	lr, r3
 800b136:	4770      	bx	lr

0800b138 <_fini>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	bf00      	nop
 800b13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13e:	bc08      	pop	{r3}
 800b140:	469e      	mov	lr, r3
 800b142:	4770      	bx	lr
