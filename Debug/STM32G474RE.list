
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad94  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3bc  0800b3bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3bc  0800b3bc  0001b3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3c4  0800b3c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3c4  0800b3c4  0001b3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3c8  0800b3c8  0001b3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b3cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000070  0800b43c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800b43c  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b41e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000329f  00000000  00000000  0003b4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0003e760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  0003fe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b40  00000000  00000000  000413c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b809  00000000  00000000  0006af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155a0  00000000  00000000  00086709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  0019bcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800af54 	.word	0x0800af54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800af54 	.word	0x0800af54

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	ed87 0a03 	vstr	s0, [r7, #12]
 8000526:	edc7 0a02 	vstr	s1, [r7, #8]
 800052a:	ed87 1a01 	vstr	s2, [r7, #4]
 800052e:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	ed93 7a00 	vldr	s14, [r3]
 8000536:	edd7 6a03 	vldr	s13, [r7, #12]
 800053a:	edd7 7a01 	vldr	s15, [r7, #4]
 800053e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 800054c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000550:	edd7 7a03 	vldr	s15, [r7, #12]
 8000554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	ee07 3a90 	vmov	s15, r3
}
 800056c:	eeb0 0a67 	vmov.f32	s0, s15
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	ed87 0a03 	vstr	s0, [r7, #12]
 8000584:	edc7 0a02 	vstr	s1, [r7, #8]
 8000588:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 800058c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	db0b      	blt.n	80005b2 <gfDivideAvoidZero+0x38>
 800059a:	ed97 7a02 	vldr	s14, [r7, #8]
 800059e:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	d502      	bpl.n	80005b2 <gfDivideAvoidZero+0x38>
		den = threshold;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e017      	b.n	80005e2 <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80005b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	d510      	bpl.n	80005e2 <gfDivideAvoidZero+0x68>
 80005c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c4:	eef1 7a67 	vneg.f32	s15, s15
 80005c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80005cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	dd05      	ble.n	80005e2 <gfDivideAvoidZero+0x68>
		den = -threshold;
 80005d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005da:	eef1 7a67 	vneg.f32	s15, s15
 80005de:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80005e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80005e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ee:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000612:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000678 <gfWrapTheta+0x70>
 8000616:	ed97 0a01 	vldr	s0, [r7, #4]
 800061a:	f009 fd4d 	bl	800a0b8 <fmodf>
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800067c <gfWrapTheta+0x74>
 800062a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	dd08      	ble.n	8000646 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000634:	edd7 7a01 	vldr	s15, [r7, #4]
 8000638:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000678 <gfWrapTheta+0x70>
 800063c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000640:	edc7 7a01 	vstr	s15, [r7, #4]
 8000644:	e010      	b.n	8000668 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000646:	edd7 7a01 	vldr	s15, [r7, #4]
 800064a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000680 <gfWrapTheta+0x78>
 800064e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000656:	d507      	bpl.n	8000668 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000658:	edd7 7a01 	vldr	s15, [r7, #4]
 800065c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000678 <gfWrapTheta+0x70>
 8000660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000664:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	ee07 3a90 	vmov	s15, r3
}
 800066e:	eeb0 0a67 	vmov.f32	s0, s15
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40c90fdb 	.word	0x40c90fdb
 800067c:	40490fdb 	.word	0x40490fdb
 8000680:	c0490fdb 	.word	0xc0490fdb

08000684 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	ed87 0a03 	vstr	s0, [r7, #12]
 800068e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000692:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000696:	ed97 7a03 	vldr	s14, [r7, #12]
 800069a:	edd7 7a02 	vldr	s15, [r7, #8]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	dd01      	ble.n	80006ac <gUpperLowerLimit+0x28>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80006ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006bc:	d501      	bpl.n	80006c2 <gUpperLowerLimit+0x3e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
	return input;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	ee07 3a90 	vmov	s15, r3
}
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <readButton1>:
#include "SignalReadWrite.h"


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <readButton1+0x20>)
 80006e4:	f006 f806 	bl	80066f4 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
	return B1;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	48000800 	.word	0x48000800

080006fc <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000708:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	3301      	adds	r3, #1
 800072e:	085b      	lsrs	r3, r3, #1
 8000730:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074a:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000758:	eef1 7a67 	vneg.f32	s15, s15
 800075c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000768:	d50a      	bpl.n	8000780 <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000774:	ed97 7a05 	vldr	s14, [r7, #20]
 8000778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077c:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000780:	ed97 7a05 	vldr	s14, [r7, #20]
 8000784:	eddf 6a07 	vldr	s13, [pc, #28]	; 80007a4 <readTimeInterval+0x8c>
 8000788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800078c:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	ee07 3a90 	vmov	s15, r3
}
 8000796:	eeb0 0a67 	vmov.f32	s0, s15
 800079a:	371c      	adds	r7, #28
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	4d221fe8 	.word	0x4d221fe8

080007a8 <readVolume>:

float readVolume(void){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <readVolume+0x3c>)
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	80fb      	strh	r3, [r7, #6]

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 80007b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007b8:	3b63      	subs	r3, #99	; 0x63
 80007ba:	ee07 3a90 	vmov	s15, r3
 80007be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80007e8 <readVolume+0x40>
 80007c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ca:	edc7 7a00 	vstr	s15, [r7]
	//Volume = ((int16_t)Volume_ad - 856) * 0.000573394f;
	return Volume;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	ee07 3a90 	vmov	s15, r3
}
 80007d4:	eeb0 0a67 	vmov.f32	s0, s15
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	398007f8 	.word	0x398007f8

080007ec <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 80007f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007fe:	b29a      	uxth	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000808:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3302      	adds	r3, #2
 8000810:	b292      	uxth	r2, r2
 8000812:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000818:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3304      	adds	r3, #4
 8000820:	b292      	uxth	r2, r2
 8000822:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	ee07 3a90 	vmov	s15, r3
 800082c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000830:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80008a0 <readCurrent+0xb4>
 8000834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000838:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80008a4 <readCurrent+0xb8>
 800083c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3302      	adds	r3, #2
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000854:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80008a8 <readCurrent+0xbc>
 8000858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3304      	adds	r3, #4
 8000860:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80008a4 <readCurrent+0xb8>
 8000864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000868:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3304      	adds	r3, #4
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800087a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80008ac <readCurrent+0xc0>
 800087e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	3308      	adds	r3, #8
 8000886:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80008a4 <readCurrent+0xb8>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088e:	edc3 7a00 	vstr	s15, [r3]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	44f98000 	.word	0x44f98000
 80008a4:	bc71f4bc 	.word	0xbc71f4bc
 80008a8:	44fa2000 	.word	0x44fa2000
 80008ac:	44fd0000 	.word	0x44fd0000

080008b0 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 80008b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f005 ff18 	bl	80066f4 <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	1c5c      	adds	r4, r3, #1
 80008d0:	2108      	movs	r1, #8
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <readHallSignal+0x48>)
 80008d4:	f005 ff0e 	bl	80066f4 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1c9c      	adds	r4, r3, #2
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <readHallSignal+0x48>)
 80008e6:	f005 ff05 	bl	80066f4 <HAL_GPIO_ReadPin>
 80008ea:	4603      	mov	r3, r0
 80008ec:	7023      	strb	r3, [r4, #0]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	48000400 	.word	0x48000400

080008fc <writeOutputMode>:

void writeOutputMode(int8_t* outputMode){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f993 3000 	ldrsb.w	r3, [r3]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d106      	bne.n	800091c <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000914:	4819      	ldr	r0, [pc, #100]	; (800097c <writeOutputMode+0x80>)
 8000916:	f005 ff05 	bl	8006724 <HAL_GPIO_WritePin>
 800091a:	e005      	b.n	8000928 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <writeOutputMode+0x80>)
 8000924:	f005 fefe 	bl	8006724 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3301      	adds	r3, #1
 800092c:	f993 3000 	ldrsb.w	r3, [r3]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d106      	bne.n	8000942 <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <writeOutputMode+0x80>)
 800093c:	f005 fef2 	bl	8006724 <HAL_GPIO_WritePin>
 8000940:	e005      	b.n	800094e <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <writeOutputMode+0x80>)
 800094a:	f005 feeb 	bl	8006724 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3302      	adds	r3, #2
 8000952:	f993 3000 	ldrsb.w	r3, [r3]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d106      	bne.n	8000968 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <writeOutputMode+0x80>)
 8000962:	f005 fedf 	bl	8006724 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000966:	e005      	b.n	8000974 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <writeOutputMode+0x80>)
 8000970:	f005 fed8 	bl	8006724 <HAL_GPIO_WritePin>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	48000800 	.word	0x48000800

08000980 <writeDuty>:

void writeDuty(float* Duty){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	ed93 7a00 	vldr	s14, [r3]
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <writeDuty+0x80>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	ee07 3a90 	vmov	s15, r3
 8000996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <writeDuty+0x80>)
 80009a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a4:	ee17 2a90 	vmov	r2, s15
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3304      	adds	r3, #4
 80009ae:	ed93 7a00 	vldr	s14, [r3]
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <writeDuty+0x80>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <writeDuty+0x80>)
 80009c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009c8:	ee17 2a90 	vmov	r2, s15
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3308      	adds	r3, #8
 80009d2:	ed93 7a00 	vldr	s14, [r3]
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <writeDuty+0x80>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <writeDuty+0x80>)
 80009e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ec:	ee17 2a90 	vmov	r2, s15
 80009f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40012c00 	.word	0x40012c00

08000a04 <sixStepTasks>:
static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode);
static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty);


// input DutyRef minus1-1, output Duty 0-1
void sixStepTasks(float DutyRef, uint8_t leadAngleModeFlg, float leadAngle, float* Theta, float* electAngVelo, float* Duty, int8_t* outputMode){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8000a0e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4603      	mov	r3, r0
 8000a1a:	74fb      	strb	r3, [r7, #19]
	float Ki_PLL;
	float Ts_PLL;
	float timeInterval;

	// Read Hall Signals
	readHallSignal(gHall);
 8000a1c:	48b3      	ldr	r0, [pc, #716]	; (8000cec <sixStepTasks+0x2e8>)
 8000a1e:	f7ff ff47 	bl	80008b0 <readHallSignal>

	// Hold & Read Input Capture Count
	gInputCaptureCnt_pre = gInputCaptureCnt;
 8000a22:	4bb3      	ldr	r3, [pc, #716]	; (8000cf0 <sixStepTasks+0x2ec>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4ab3      	ldr	r2, [pc, #716]	; (8000cf4 <sixStepTasks+0x2f0>)
 8000a28:	6013      	str	r3, [r2, #0]
	gInputCaptureCnt = readInputCaptureCnt();
 8000a2a:	f7ff fe67 	bl	80006fc <readInputCaptureCnt>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4aaf      	ldr	r2, [pc, #700]	; (8000cf0 <sixStepTasks+0x2ec>)
 8000a32:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(gInputCaptureCnt != gInputCaptureCnt_pre){
 8000a34:	4bae      	ldr	r3, [pc, #696]	; (8000cf0 <sixStepTasks+0x2ec>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4bae      	ldr	r3, [pc, #696]	; (8000cf4 <sixStepTasks+0x2f0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d023      	beq.n	8000a88 <sixStepTasks+0x84>
		timeInterval = readTimeInterval(gInputCaptureCnt, gInputCaptureCnt_pre);
 8000a40:	4bab      	ldr	r3, [pc, #684]	; (8000cf0 <sixStepTasks+0x2ec>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4aab      	ldr	r2, [pc, #684]	; (8000cf4 <sixStepTasks+0x2f0>)
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe64 	bl	8000718 <readTimeInterval>
 8000a50:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		if( timeInterval > 0.0001f)
 8000a54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a58:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8000cf8 <sixStepTasks+0x2f4>
 8000a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a64:	dd0c      	ble.n	8000a80 <sixStepTasks+0x7c>
			gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8000a66:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 8000cfc <sixStepTasks+0x2f8>
 8000a6a:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8000a6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a72:	f7ff fd82 	bl	800057a <gfDivideAvoidZero>
 8000a76:	eef0 7a40 	vmov.f32	s15, s0
 8000a7a:	4ba1      	ldr	r3, [pc, #644]	; (8000d00 <sixStepTasks+0x2fc>)
 8000a7c:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 8000a80:	4ba0      	ldr	r3, [pc, #640]	; (8000d04 <sixStepTasks+0x300>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	801a      	strh	r2, [r3, #0]
 8000a86:	e00f      	b.n	8000aa8 <sixStepTasks+0xa4>
	}
	else if(sNoInputCaptureCnt < 1000)
 8000a88:	4b9e      	ldr	r3, [pc, #632]	; (8000d04 <sixStepTasks+0x300>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a90:	d206      	bcs.n	8000aa0 <sixStepTasks+0x9c>
		sNoInputCaptureCnt ++;
 8000a92:	4b9c      	ldr	r3, [pc, #624]	; (8000d04 <sixStepTasks+0x300>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b9a      	ldr	r3, [pc, #616]	; (8000d04 <sixStepTasks+0x300>)
 8000a9c:	801a      	strh	r2, [r3, #0]
 8000a9e:	e003      	b.n	8000aa8 <sixStepTasks+0xa4>
	else
		gElectFreq = 0;
 8000aa0:	4b97      	ldr	r3, [pc, #604]	; (8000d00 <sixStepTasks+0x2fc>)
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]


	// Calculate PLL Gain based on Electrical Frequency
	wc_PLL = sElectAngVeloEstimate * 0.5f;//gElectFreq * 0.5f * TWOPI;
 8000aa8:	4b97      	ldr	r3, [pc, #604]	; (8000d08 <sixStepTasks+0x304>)
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	//if (wc_PLL > 6000)
	//	wc_PLL = 6000;
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8000aba:	4b93      	ldr	r3, [pc, #588]	; (8000d08 <sixStepTasks+0x304>)
 8000abc:	edd3 7a00 	vldr	s15, [r3]
 8000ac0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8000d0c <sixStepTasks+0x308>
 8000ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ad8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Kp_PLL = wc_PLL;
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	623b      	str	r3, [r7, #32]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000ae0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ae4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8000d10 <sixStepTasks+0x30c>
 8000ae8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afc:	edc7 7a07 	vstr	s15, [r7, #28]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8000b00:	4b84      	ldr	r3, [pc, #528]	; (8000d14 <sixStepTasks+0x310>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b84      	ldr	r3, [pc, #528]	; (8000d18 <sixStepTasks+0x314>)
 8000b06:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(gHall);
 8000b08:	4878      	ldr	r0, [pc, #480]	; (8000cec <sixStepTasks+0x2e8>)
 8000b0a:	f000 f91f 	bl	8000d4c <calcVoltageMode>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <sixStepTasks+0x310>)
 8000b14:	701a      	strb	r2, [r3, #0]

	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8000b16:	4b81      	ldr	r3, [pc, #516]	; (8000d1c <sixStepTasks+0x318>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a81      	ldr	r2, [pc, #516]	; (8000d20 <sixStepTasks+0x31c>)
 8000b1c:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8000b1e:	4b7e      	ldr	r3, [pc, #504]	; (8000d18 <sixStepTasks+0x314>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4a7c      	ldr	r2, [pc, #496]	; (8000d14 <sixStepTasks+0x310>)
 8000b24:	7811      	ldrb	r1, [r2, #0]
 8000b26:	4a7f      	ldr	r2, [pc, #508]	; (8000d24 <sixStepTasks+0x320>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f955 	bl	8000dd8 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000b2e:	4b79      	ldr	r3, [pc, #484]	; (8000d14 <sixStepTasks+0x310>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4a7c      	ldr	r2, [pc, #496]	; (8000d24 <sixStepTasks+0x320>)
 8000b34:	f992 2000 	ldrsb.w	r2, [r2]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f978 	bl	8000e30 <calcElectAngleFromVoltageMode>
 8000b40:	eef0 7a40 	vmov.f32	s15, s0
 8000b44:	4b75      	ldr	r3, [pc, #468]	; (8000d1c <sixStepTasks+0x318>)
 8000b46:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000b4a:	4b74      	ldr	r3, [pc, #464]	; (8000d1c <sixStepTasks+0x318>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eeb0 0a67 	vmov.f32	s0, s15
 8000b54:	f7ff fd58 	bl	8000608 <gfWrapTheta>
 8000b58:	eef0 7a40 	vmov.f32	s15, s0
 8000b5c:	4b6f      	ldr	r3, [pc, #444]	; (8000d1c <sixStepTasks+0x318>)
 8000b5e:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sLeadAngleModeFlg_pre = sLeadAngleModeFlg;
 8000b62:	4b71      	ldr	r3, [pc, #452]	; (8000d28 <sixStepTasks+0x324>)
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b71      	ldr	r3, [pc, #452]	; (8000d2c <sixStepTasks+0x328>)
 8000b68:	701a      	strb	r2, [r3, #0]
	sLeadAngleModeFlg = leadAngleModeFlg;//calcLeadAngleModeFlg();
 8000b6a:	4a6f      	ldr	r2, [pc, #444]	; (8000d28 <sixStepTasks+0x324>)
 8000b6c:	7cfb      	ldrb	r3, [r7, #19]
 8000b6e:	7013      	strb	r3, [r2, #0]

	if(sLeadAngleModeFlg == 1){
 8000b70:	4b6d      	ldr	r3, [pc, #436]	; (8000d28 <sixStepTasks+0x324>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	f040 8082 	bne.w	8000c7e <sixStepTasks+0x27a>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sLeadAngleModeFlg_pre == 0 ){
 8000b7a:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <sixStepTasks+0x328>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d111      	bne.n	8000ba6 <sixStepTasks+0x1a2>
			sElectAngVeloEstimate = gElectFreq * TWOPI;
 8000b82:	4b5f      	ldr	r3, [pc, #380]	; (8000d00 <sixStepTasks+0x2fc>)
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000d30 <sixStepTasks+0x32c>
 8000b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b90:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <sixStepTasks+0x304>)
 8000b92:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000b96:	4b5c      	ldr	r3, [pc, #368]	; (8000d08 <sixStepTasks+0x304>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a66      	ldr	r2, [pc, #408]	; (8000d34 <sixStepTasks+0x330>)
 8000b9c:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8000b9e:	4b5f      	ldr	r3, [pc, #380]	; (8000d1c <sixStepTasks+0x318>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a65      	ldr	r2, [pc, #404]	; (8000d38 <sixStepTasks+0x334>)
 8000ba4:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000ba6:	4b58      	ldr	r3, [pc, #352]	; (8000d08 <sixStepTasks+0x304>)
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	eddf 6a63 	vldr	s13, [pc, #396]	; 8000d3c <sixStepTasks+0x338>
 8000bb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000bb4:	4b60      	ldr	r3, [pc, #384]	; (8000d38 <sixStepTasks+0x334>)
 8000bb6:	edd3 7a00 	vldr	s15, [r3]
 8000bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bbe:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <sixStepTasks+0x334>)
 8000bc0:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000bc4:	4b5c      	ldr	r3, [pc, #368]	; (8000d38 <sixStepTasks+0x334>)
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	eeb0 0a67 	vmov.f32	s0, s15
 8000bce:	f7ff fd1b 	bl	8000608 <gfWrapTheta>
 8000bd2:	eef0 7a40 	vmov.f32	s15, s0
 8000bd6:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <sixStepTasks+0x334>)
 8000bd8:	edc3 7a00 	vstr	s15, [r3]

		electAnglePrusLeadAngle = sElectAngleEstimate + leadAngle;
 8000bdc:	4b56      	ldr	r3, [pc, #344]	; (8000d38 <sixStepTasks+0x334>)
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bea:	edc7 7a06 	vstr	s15, [r7, #24]
		electAnglePrusLeadAngle = gfWrapTheta(electAnglePrusLeadAngle);
 8000bee:	ed97 0a06 	vldr	s0, [r7, #24]
 8000bf2:	f7ff fd09 	bl	8000608 <gfWrapTheta>
 8000bf6:	ed87 0a06 	vstr	s0, [r7, #24]

		sVoltageModeModify = calcVoltageModeFromElectAngle(electAnglePrusLeadAngle);
 8000bfa:	ed97 0a06 	vldr	s0, [r7, #24]
 8000bfe:	f000 f971 	bl	8000ee4 <calcVoltageModeFromElectAngle>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <sixStepTasks+0x33c>)
 8000c08:	701a      	strb	r2, [r3, #0]

		if( sElectAngleActual != sElectAngleActual_pre){
 8000c0a:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <sixStepTasks+0x318>)
 8000c0c:	ed93 7a00 	vldr	s14, [r3]
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <sixStepTasks+0x31c>)
 8000c12:	edd3 7a00 	vldr	s15, [r3]
 8000c16:	eeb4 7a67 	vcmp.f32	s14, s15
 8000c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1e:	d027      	beq.n	8000c70 <sixStepTasks+0x26c>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <sixStepTasks+0x318>)
 8000c22:	ed93 7a00 	vldr	s14, [r3]
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <sixStepTasks+0x334>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c30:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <sixStepTasks+0x340>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000c36:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <sixStepTasks+0x340>)
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c40:	f7ff fce2 	bl	8000608 <gfWrapTheta>
 8000c44:	eef0 7a40 	vmov.f32	s15, s0
 8000c48:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <sixStepTasks+0x340>)
 8000c4a:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <sixStepTasks+0x340>)
 8000c50:	edd3 7a00 	vldr	s15, [r3]
 8000c54:	4837      	ldr	r0, [pc, #220]	; (8000d34 <sixStepTasks+0x330>)
 8000c56:	ed97 1a07 	vldr	s2, [r7, #28]
 8000c5a:	edd7 0a08 	vldr	s1, [r7, #32]
 8000c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c62:	f7ff fc5b 	bl	800051c <cfPhaseLockedLoop>
 8000c66:	eef0 7a40 	vmov.f32	s15, s0
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <sixStepTasks+0x304>)
 8000c6c:	edc3 7a00 	vstr	s15, [r3]
		}

		calcOutputMode(sVoltageModeModify, sOutputMode);
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <sixStepTasks+0x33c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4934      	ldr	r1, [pc, #208]	; (8000d48 <sixStepTasks+0x344>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f9e4 	bl	8001044 <calcOutputMode>
 8000c7c:	e013      	b.n	8000ca6 <sixStepTasks+0x2a2>

	}

	else{
		// Control without Electrical Angle ( Use Only Hall Signals )
		calcOutputMode(sVoltageMode, sOutputMode);
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <sixStepTasks+0x310>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4931      	ldr	r1, [pc, #196]	; (8000d48 <sixStepTasks+0x344>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f9dd 	bl	8001044 <calcOutputMode>
		sElectAngleEstimate = sElectAngleActual;
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <sixStepTasks+0x318>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <sixStepTasks+0x334>)
 8000c90:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = gElectFreq * TWOPI;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <sixStepTasks+0x2fc>)
 8000c94:	edd3 7a00 	vldr	s15, [r3]
 8000c98:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000d30 <sixStepTasks+0x32c>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <sixStepTasks+0x304>)
 8000ca2:	edc3 7a00 	vstr	s15, [r3]
	}

	// Output Voltage
	calcDuty(sOutputMode, DutyRef, Duty);
 8000ca6:	6839      	ldr	r1, [r7, #0]
 8000ca8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000cac:	4826      	ldr	r0, [pc, #152]	; (8000d48 <sixStepTasks+0x344>)
 8000cae:	f000 fa3d 	bl	800112c <calcDuty>

	// Output Static Signals
	outputMode[0] = sOutputMode[0];
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <sixStepTasks+0x344>)
 8000cb4:	f993 2000 	ldrsb.w	r2, [r3]
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	701a      	strb	r2, [r3, #0]
	outputMode[1] = sOutputMode[1];
 8000cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <sixStepTasks+0x344>)
 8000cc2:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8000cc6:	701a      	strb	r2, [r3, #0]
	outputMode[2] = sOutputMode[2];
 8000cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cca:	3302      	adds	r3, #2
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <sixStepTasks+0x344>)
 8000cce:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8000cd2:	701a      	strb	r2, [r3, #0]

	*Theta = sElectAngleEstimate;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <sixStepTasks+0x334>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <sixStepTasks+0x304>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]

}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000090 	.word	0x20000090
 8000cf0:	20000094 	.word	0x20000094
 8000cf4:	20000098 	.word	0x20000098
 8000cf8:	38d1b717 	.word	0x38d1b717
 8000cfc:	31ca1db9 	.word	0x31ca1db9
 8000d00:	2000009c 	.word	0x2000009c
 8000d04:	200000e2 	.word	0x200000e2
 8000d08:	200000f8 	.word	0x200000f8
 8000d0c:	3e22f983 	.word	0x3e22f983
 8000d10:	3e4ccccd 	.word	0x3e4ccccd
 8000d14:	200000df 	.word	0x200000df
 8000d18:	200000e0 	.word	0x200000e0
 8000d1c:	200000e8 	.word	0x200000e8
 8000d20:	200000ec 	.word	0x200000ec
 8000d24:	200000e5 	.word	0x200000e5
 8000d28:	200000e6 	.word	0x200000e6
 8000d2c:	200000e7 	.word	0x200000e7
 8000d30:	40c90fdb 	.word	0x40c90fdb
 8000d34:	200000f4 	.word	0x200000f4
 8000d38:	200000f0 	.word	0x200000f0
 8000d3c:	4684d000 	.word	0x4684d000
 8000d40:	200000e4 	.word	0x200000e4
 8000d44:	200000fc 	.word	0x200000fc
 8000d48:	200000dc 	.word	0x200000dc

08000d4c <calcVoltageMode>:
else
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

static uint8_t calcVoltageMode(uint8_t* Hall){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3301      	adds	r3, #1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	2b05      	cmp	r3, #5
 8000d7e:	d821      	bhi.n	8000dc4 <calcVoltageMode+0x78>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <calcVoltageMode+0x3c>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000dbf 	.word	0x08000dbf
 8000d8c:	08000da7 	.word	0x08000da7
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000db3 	.word	0x08000db3
 8000d98:	08000db9 	.word	0x08000db9
 8000d9c:	08000dad 	.word	0x08000dad
	  case 3:
		voltageMode = 3;
 8000da0:	2303      	movs	r3, #3
 8000da2:	73fb      	strb	r3, [r7, #15]
		break;
 8000da4:	e011      	b.n	8000dca <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	73fb      	strb	r3, [r7, #15]
		break;
 8000daa:	e00e      	b.n	8000dca <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	73fb      	strb	r3, [r7, #15]
		break;
 8000db0:	e00b      	b.n	8000dca <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 8000db2:	2306      	movs	r3, #6
 8000db4:	73fb      	strb	r3, [r7, #15]
		break;
 8000db6:	e008      	b.n	8000dca <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
		break;
 8000dbc:	e005      	b.n	8000dca <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	73fb      	strb	r3, [r7, #15]
		break;
 8000dc2:	e002      	b.n	8000dca <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
	  break;
 8000dc8:	bf00      	nop
	}
	return voltageMode;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <calcRotDirFromVoltageMode>:
static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	603a      	str	r2, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	460b      	mov	r3, r1
 8000de6:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8000de8:	79ba      	ldrb	r2, [r7, #6]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	dd04      	ble.n	8000e04 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	3b06      	subs	r3, #6
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e008      	b.n	8000e16 <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	da03      	bge.n	8000e16 <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	3306      	adds	r3, #6
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	701a      	strb	r2, [r3, #0]

}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	d822      	bhi.n	8000e8e <calcElectAngleFromVoltageMode+0x5e>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <calcElectAngleFromVoltageMode+0x20>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e83 	.word	0x08000e83
 8000e54:	08000e89 	.word	0x08000e89
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e77 	.word	0x08000e77
 8000e64:	08000e7d 	.word	0x08000e7d
		  case 3:
			  electAngle_Center = 0.0f;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
			break;
 8000e6e:	e012      	b.n	8000e96 <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <calcElectAngleFromVoltageMode+0x9c>)
 8000e72:	60fb      	str	r3, [r7, #12]
			break;
 8000e74:	e00f      	b.n	8000e96 <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <calcElectAngleFromVoltageMode+0xa0>)
 8000e78:	60fb      	str	r3, [r7, #12]
			break;
 8000e7a:	e00c      	b.n	8000e96 <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <calcElectAngleFromVoltageMode+0xa4>)
 8000e7e:	60fb      	str	r3, [r7, #12]
			break;
 8000e80:	e009      	b.n	8000e96 <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <calcElectAngleFromVoltageMode+0xa8>)
 8000e84:	60fb      	str	r3, [r7, #12]
			break;
 8000e86:	e006      	b.n	8000e96 <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <calcElectAngleFromVoltageMode+0xac>)
 8000e8a:	60fb      	str	r3, [r7, #12]
			break;
 8000e8c:	e003      	b.n	8000e96 <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
		  break;
 8000e94:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8000e96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ee0 <calcElectAngleFromVoltageMode+0xb0>
 8000ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb2:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	ee07 3a90 	vmov	s15, r3
}
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	3f860a92 	.word	0x3f860a92
 8000ed0:	40060a92 	.word	0x40060a92
 8000ed4:	40490fdb 	.word	0x40490fdb
 8000ed8:	c0060a92 	.word	0xc0060a92
 8000edc:	bf860a92 	.word	0xbf860a92
 8000ee0:	3f060a92 	.word	0x3f060a92

08000ee4 <calcVoltageModeFromElectAngle>:
		leadAngleModeFlg = 1;

	return leadAngleModeFlg;
}

static uint8_t calcVoltageModeFromElectAngle(float electAngle){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b08b      	sub	sp, #44	; 0x2c
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t voltageMode = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Angle Limit : minus PI - prus PI
	float voltageMode1_StartAngle = -PI + PIDIV6;
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <calcVoltageModeFromElectAngle+0x148>)
 8000ef6:	623b      	str	r3, [r7, #32]
	float voltageMode2_StartAngle = -PIDIV3 * 2.0f + PIDIV6;
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <calcVoltageModeFromElectAngle+0x14c>)
 8000efa:	61fb      	str	r3, [r7, #28]
	float voltageMode3_StartAngle = -PIDIV3 + PIDIV6;
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <calcVoltageModeFromElectAngle+0x150>)
 8000efe:	61bb      	str	r3, [r7, #24]
	float voltageMode4_StartAngle = PIDIV6;
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <calcVoltageModeFromElectAngle+0x154>)
 8000f02:	617b      	str	r3, [r7, #20]
	float voltageMode5_StartAngle = PIDIV3 + PIDIV6;
 8000f04:	4b4d      	ldr	r3, [pc, #308]	; (800103c <calcVoltageModeFromElectAngle+0x158>)
 8000f06:	613b      	str	r3, [r7, #16]
	float voltageMode6_StartAngle = PIDIV3 * 2.0f + PIDIV6;
 8000f08:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <calcVoltageModeFromElectAngle+0x15c>)
 8000f0a:	60fb      	str	r3, [r7, #12]

	if(electAngle >= voltageMode6_StartAngle || electAngle < voltageMode1_StartAngle ){
 8000f0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	da08      	bge.n	8000f30 <calcVoltageModeFromElectAngle+0x4c>
 8000f1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f22:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	d503      	bpl.n	8000f38 <calcVoltageModeFromElectAngle+0x54>
		voltageMode = 6;
 8000f30:	2306      	movs	r3, #6
 8000f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f36:	e070      	b.n	800101a <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode1_StartAngle && electAngle < voltageMode2_StartAngle ){
 8000f38:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	db0c      	blt.n	8000f64 <calcVoltageModeFromElectAngle+0x80>
 8000f4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	d503      	bpl.n	8000f64 <calcVoltageModeFromElectAngle+0x80>
		voltageMode = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f62:	e05a      	b.n	800101a <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode2_StartAngle && electAngle < voltageMode3_StartAngle ){
 8000f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f68:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f74:	db0c      	blt.n	8000f90 <calcVoltageModeFromElectAngle+0xac>
 8000f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	d503      	bpl.n	8000f90 <calcVoltageModeFromElectAngle+0xac>
		voltageMode = 2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f8e:	e044      	b.n	800101a <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode3_StartAngle && electAngle < voltageMode4_StartAngle ){
 8000f90:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f94:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	db0c      	blt.n	8000fbc <calcVoltageModeFromElectAngle+0xd8>
 8000fa2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	d503      	bpl.n	8000fbc <calcVoltageModeFromElectAngle+0xd8>
		voltageMode = 3;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fba:	e02e      	b.n	800101a <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode4_StartAngle && electAngle < voltageMode5_StartAngle ){
 8000fbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	db0c      	blt.n	8000fe8 <calcVoltageModeFromElectAngle+0x104>
 8000fce:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	d503      	bpl.n	8000fe8 <calcVoltageModeFromElectAngle+0x104>
		voltageMode = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fe6:	e018      	b.n	800101a <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode5_StartAngle && electAngle < voltageMode6_StartAngle ){
 8000fe8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff8:	db0c      	blt.n	8001014 <calcVoltageModeFromElectAngle+0x130>
 8000ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d503      	bpl.n	8001014 <calcVoltageModeFromElectAngle+0x130>
		voltageMode = 5;
 800100c:	2305      	movs	r3, #5
 800100e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001012:	e002      	b.n	800101a <calcVoltageModeFromElectAngle+0x136>
	}
	else
		voltageMode = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return voltageMode;
 800101a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800101e:	4618      	mov	r0, r3
 8001020:	372c      	adds	r7, #44	; 0x2c
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	c0278d36 	.word	0xc0278d36
 8001030:	bfc90fdb 	.word	0xbfc90fdb
 8001034:	bf060a92 	.word	0xbf060a92
 8001038:	3f060a92 	.word	0x3f060a92
 800103c:	3fc90fdb 	.word	0x3fc90fdb
 8001040:	40278d36 	.word	0x40278d36

08001044 <calcOutputMode>:

static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
		// Decide output mode
		switch(voltageMode){
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	3b01      	subs	r3, #1
 8001054:	2b05      	cmp	r3, #5
 8001056:	d857      	bhi.n	8001108 <calcOutputMode+0xc4>
 8001058:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <calcOutputMode+0x1c>)
 800105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105e:	bf00      	nop
 8001060:	080010d9 	.word	0x080010d9
 8001064:	080010f1 	.word	0x080010f1
 8001068:	08001079 	.word	0x08001079
 800106c:	08001091 	.word	0x08001091
 8001070:	080010a9 	.word	0x080010a9
 8001074:	080010c1 	.word	0x080010c1
		  case 3:
			outputMode[0] = OUTPUTMODE_OPEN;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3302      	adds	r3, #2
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	701a      	strb	r2, [r3, #0]
			break;
 800108e:	e047      	b.n	8001120 <calcOutputMode+0xdc>
		  case 4:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3302      	adds	r3, #2
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
			break;
 80010a6:	e03b      	b.n	8001120 <calcOutputMode+0xdc>
		  case 5:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3302      	adds	r3, #2
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
			break;
 80010be:	e02f      	b.n	8001120 <calcOutputMode+0xdc>
		  case 6:
			outputMode[0] = OUTPUTMODE_OPEN;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3302      	adds	r3, #2
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
			break;
 80010d6:	e023      	b.n	8001120 <calcOutputMode+0xdc>
		  case 1:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3302      	adds	r3, #2
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
			break;
 80010ee:	e017      	b.n	8001120 <calcOutputMode+0xdc>
		  case 2:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3302      	adds	r3, #2
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	701a      	strb	r2, [r3, #0]
			break;
 8001106:	e00b      	b.n	8001120 <calcOutputMode+0xdc>
		  default :
			outputMode[0] = OUTPUTMODE_OPEN;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3302      	adds	r3, #2
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
		  break;
 800111e:	bf00      	nop
		}
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <calcDuty>:

static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty){
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	ed87 0a02 	vstr	s0, [r7, #8]
 8001138:	6079      	str	r1, [r7, #4]

	// if DutyRef < 0, swap OUTPUTMODE_POSITIVE and OUTPUTMODE_NEGATIVE
	int8_t outputModeMulSwapGain[3];
	int8_t swapGain;

	if (DutyRef > 0)
 800113a:	edd7 7a02 	vldr	s15, [r7, #8]
 800113e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	dd02      	ble.n	800114e <calcDuty+0x22>
		swapGain = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	75fb      	strb	r3, [r7, #23]
 800114c:	e001      	b.n	8001152 <calcDuty+0x26>
	else
		swapGain = -1;
 800114e:	23ff      	movs	r3, #255	; 0xff
 8001150:	75fb      	strb	r3, [r7, #23]


	outputModeMulSwapGain[0]  = outputMode[0] * swapGain;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f993 3000 	ldrsb.w	r3, [r3]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	fb12 f303 	smulbb	r3, r2, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	b25b      	sxtb	r3, r3
 8001164:	753b      	strb	r3, [r7, #20]
	outputModeMulSwapGain[1]  = outputMode[1] * swapGain;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	f993 3000 	ldrsb.w	r3, [r3]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	fb12 f303 	smulbb	r3, r2, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	b25b      	sxtb	r3, r3
 800117a:	757b      	strb	r3, [r7, #21]
	outputModeMulSwapGain[2]  = outputMode[2] * swapGain;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3302      	adds	r3, #2
 8001180:	f993 3000 	ldrsb.w	r3, [r3]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	fb12 f303 	smulbb	r3, r2, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	b25b      	sxtb	r3, r3
 8001190:	75bb      	strb	r3, [r7, #22]

	if( outputModeMulSwapGain[0] < 0) outputModeMulSwapGain[0] = 0;
 8001192:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	da01      	bge.n	800119e <calcDuty+0x72>
 800119a:	2300      	movs	r3, #0
 800119c:	753b      	strb	r3, [r7, #20]
	if( outputModeMulSwapGain[1] < 0) outputModeMulSwapGain[1] = 0;
 800119e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da01      	bge.n	80011aa <calcDuty+0x7e>
 80011a6:	2300      	movs	r3, #0
 80011a8:	757b      	strb	r3, [r7, #21]
	if( outputModeMulSwapGain[2] < 0) outputModeMulSwapGain[2] = 0;
 80011aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da01      	bge.n	80011b6 <calcDuty+0x8a>
 80011b2:	2300      	movs	r3, #0
 80011b4:	75bb      	strb	r3, [r7, #22]


	Duty[0] = (float)(outputModeMulSwapGain[0] * DutyRef * swapGain);
 80011b6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (float)(outputModeMulSwapGain[1] * DutyRef * swapGain);
 80011e0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3304      	adds	r3, #4
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (float)(outputModeMulSwapGain[2] * DutyRef * swapGain);
 800120c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001218:	edd7 7a02 	vldr	s15, [r7, #8]
 800121c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3308      	adds	r3, #8
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	edc3 7a00 	vstr	s15, [r3]

}
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <VectorControlTasks>:
static float calcAmpFromVect(float* Vect);
static float calcModFromVamp(float Vamp, float twoDivVdc);
static void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static void CurrentFbControl(float *Igd_ref, float *Igd, float electAngVelo, float Vdc, float *Vgd, float* Vamp);

void VectorControlTasks(float *Idq_ref, float theta, float electAngVelo, float *Iuvw, float Vdc, float twoDivVdc, uint8_t flgFB, float* Duty, int8_t* outputMode){
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	61f8      	str	r0, [r7, #28]
 800124c:	ed87 0a06 	vstr	s0, [r7, #24]
 8001250:	edc7 0a05 	vstr	s1, [r7, #20]
 8001254:	6139      	str	r1, [r7, #16]
 8001256:	ed87 1a03 	vstr	s2, [r7, #12]
 800125a:	edc7 1a02 	vstr	s3, [r7, #8]
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	71fb      	strb	r3, [r7, #7]

	if ( flgFB == 0 ){
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d128      	bne.n	80012bc <VectorControlTasks+0x78>
			OpenLoopTasks(gVolume * 12.24f, theta, Iuvw, twoDivVdc, Duty, outputMode);
 800126a:	4b70      	ldr	r3, [pc, #448]	; (800142c <VectorControlTasks+0x1e8>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001430 <VectorControlTasks+0x1ec>
 8001274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	ed97 1a02 	vldr	s2, [r7, #8]
 8001280:	6938      	ldr	r0, [r7, #16]
 8001282:	edd7 0a06 	vldr	s1, [r7, #24]
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	f000 f8f5 	bl	8001478 <OpenLoopTasks>
			sVdq[0] = 0.0f;
 800128e:	4b69      	ldr	r3, [pc, #420]	; (8001434 <VectorControlTasks+0x1f0>)
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
			sVdq[1] = gVolume * 12.24f;
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <VectorControlTasks+0x1e8>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001430 <VectorControlTasks+0x1ec>
 80012a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a4:	4b63      	ldr	r3, [pc, #396]	; (8001434 <VectorControlTasks+0x1f0>)
 80012a6:	edc3 7a01 	vstr	s15, [r3, #4]
			sVdq_i[0] = 0.0f;
 80012aa:	4b63      	ldr	r3, [pc, #396]	; (8001438 <VectorControlTasks+0x1f4>)
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
			sVdq_i[1] = 0.0f;
 80012b2:	4b61      	ldr	r3, [pc, #388]	; (8001438 <VectorControlTasks+0x1f4>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
		sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
		sIdq_1000[0] = sIdq[0] * 1000.0f;
		sIdq_1000[1] = sIdq[1] * 1000.0f;
	}

}
 80012ba:	e0b3      	b.n	8001424 <VectorControlTasks+0x1e0>
		outputMode[0] = OUTPUTMODE_POSITIVE;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
		outputMode[1] = OUTPUTMODE_POSITIVE;
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	3301      	adds	r3, #1
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
		outputMode[2] = OUTPUTMODE_POSITIVE;
 80012ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012cc:	3302      	adds	r3, #2
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
		uvw2ab(gIuvw, sIab);
 80012d2:	495a      	ldr	r1, [pc, #360]	; (800143c <VectorControlTasks+0x1f8>)
 80012d4:	485a      	ldr	r0, [pc, #360]	; (8001440 <VectorControlTasks+0x1fc>)
 80012d6:	f000 f92f 	bl	8001538 <uvw2ab>
		ab2dq(theta, sIab, sIdq);
 80012da:	495a      	ldr	r1, [pc, #360]	; (8001444 <VectorControlTasks+0x200>)
 80012dc:	4857      	ldr	r0, [pc, #348]	; (800143c <VectorControlTasks+0x1f8>)
 80012de:	ed97 0a06 	vldr	s0, [r7, #24]
 80012e2:	f000 f9b3 	bl	800164c <ab2dq>
		CurrentFbControl(Idq_ref, sIdq, electAngVelo, Vdc, sVdq, &sVamp);
 80012e6:	4b58      	ldr	r3, [pc, #352]	; (8001448 <VectorControlTasks+0x204>)
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <VectorControlTasks+0x1f0>)
 80012ea:	edd7 0a03 	vldr	s1, [r7, #12]
 80012ee:	ed97 0a05 	vldr	s0, [r7, #20]
 80012f2:	4954      	ldr	r1, [pc, #336]	; (8001444 <VectorControlTasks+0x200>)
 80012f4:	69f8      	ldr	r0, [r7, #28]
 80012f6:	f000 fb07 	bl	8001908 <CurrentFbControl>
		sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 80012fa:	4b53      	ldr	r3, [pc, #332]	; (8001448 <VectorControlTasks+0x204>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	4b52      	ldr	r3, [pc, #328]	; (800144c <VectorControlTasks+0x208>)
 8001302:	ed93 7a00 	vldr	s14, [r3]
 8001306:	eef0 0a47 	vmov.f32	s1, s14
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	f000 fa07 	bl	8001720 <calcModFromVamp>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <VectorControlTasks+0x20c>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
		sEdq[0] = sVdq[0] - Ra * sIdq[0] + La * electAngVelo * sIdq[1];
 800131c:	4b45      	ldr	r3, [pc, #276]	; (8001434 <VectorControlTasks+0x1f0>)
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	4b48      	ldr	r3, [pc, #288]	; (8001444 <VectorControlTasks+0x200>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001454 <VectorControlTasks+0x210>
 800132c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001334:	edd7 7a05 	vldr	s15, [r7, #20]
 8001338:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001458 <VectorControlTasks+0x214>
 800133c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <VectorControlTasks+0x200>)
 8001342:	edd3 7a01 	vldr	s15, [r3, #4]
 8001346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <VectorControlTasks+0x218>)
 8001350:	edc3 7a00 	vstr	s15, [r3]
		sEdq[1] = sVdq[1] - Ra * sIdq[1] - La * electAngVelo * sIdq[0];
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <VectorControlTasks+0x1f0>)
 8001356:	ed93 7a01 	vldr	s14, [r3, #4]
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <VectorControlTasks+0x200>)
 800135c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001360:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001454 <VectorControlTasks+0x210>
 8001364:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800136c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001370:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001458 <VectorControlTasks+0x214>
 8001374:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <VectorControlTasks+0x200>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <VectorControlTasks+0x218>)
 8001388:	edc3 7a01 	vstr	s15, [r3, #4]
		sAngleErr = atan2f(-1.0f * sEdq[0], sEdq[1]);
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <VectorControlTasks+0x218>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	eef1 7a67 	vneg.f32	s15, s15
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <VectorControlTasks+0x218>)
 8001398:	ed93 7a01 	vldr	s14, [r3, #4]
 800139c:	eef0 0a47 	vmov.f32	s1, s14
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	f008 fe86 	bl	800a0b4 <atan2f>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <VectorControlTasks+0x21c>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
		dq2ab(theta, sVdq, sVab);
 80013b2:	492c      	ldr	r1, [pc, #176]	; (8001464 <VectorControlTasks+0x220>)
 80013b4:	481f      	ldr	r0, [pc, #124]	; (8001434 <VectorControlTasks+0x1f0>)
 80013b6:	ed97 0a06 	vldr	s0, [r7, #24]
 80013ba:	f000 f9d1 	bl	8001760 <dq2ab>
		ab2uvw(sVab, sVuvw);
 80013be:	492a      	ldr	r1, [pc, #168]	; (8001468 <VectorControlTasks+0x224>)
 80013c0:	4828      	ldr	r0, [pc, #160]	; (8001464 <VectorControlTasks+0x220>)
 80013c2:	f000 f901 	bl	80015c8 <ab2uvw>
		Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	4827      	ldr	r0, [pc, #156]	; (8001468 <VectorControlTasks+0x224>)
 80013ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ce:	f000 fa07 	bl	80017e0 <Vuvw2Duty>
		sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800146c <VectorControlTasks+0x228>
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <VectorControlTasks+0x22c>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
		sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800146c <VectorControlTasks+0x228>
 80013f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <VectorControlTasks+0x22c>)
 80013f8:	edc3 7a01 	vstr	s15, [r3, #4]
		sIdq_1000[0] = sIdq[0] * 1000.0f;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <VectorControlTasks+0x200>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800146c <VectorControlTasks+0x228>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <VectorControlTasks+0x230>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
		sIdq_1000[1] = sIdq[1] * 1000.0f;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <VectorControlTasks+0x200>)
 8001412:	edd3 7a01 	vldr	s15, [r3, #4]
 8001416:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800146c <VectorControlTasks+0x228>
 800141a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <VectorControlTasks+0x230>)
 8001420:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000b0 	.word	0x200000b0
 8001430:	4143d70a 	.word	0x4143d70a
 8001434:	20000120 	.word	0x20000120
 8001438:	20000128 	.word	0x20000128
 800143c:	20000100 	.word	0x20000100
 8001440:	200000b4 	.word	0x200000b4
 8001444:	20000108 	.word	0x20000108
 8001448:	20000144 	.word	0x20000144
 800144c:	200000ac 	.word	0x200000ac
 8001450:	20000148 	.word	0x20000148
 8001454:	3fd71dc9 	.word	0x3fd71dc9
 8001458:	39fba882 	.word	0x39fba882
 800145c:	2000014c 	.word	0x2000014c
 8001460:	20000154 	.word	0x20000154
 8001464:	20000130 	.word	0x20000130
 8001468:	20000138 	.word	0x20000138
 800146c:	447a0000 	.word	0x447a0000
 8001470:	20000110 	.word	0x20000110
 8001474:	20000118 	.word	0x20000118

08001478 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float twoDivVdc, float* Duty, int8_t* outputMode){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001482:	edc7 0a04 	vstr	s1, [r7, #16]
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	ed87 1a02 	vstr	s2, [r7, #8]
 800148c:	6079      	str	r1, [r7, #4]
 800148e:	603a      	str	r2, [r7, #0]
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3302      	adds	r3, #2
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]

	uvw2ab(gIuvw, sIab);
 80014a6:	491c      	ldr	r1, [pc, #112]	; (8001518 <OpenLoopTasks+0xa0>)
 80014a8:	481c      	ldr	r0, [pc, #112]	; (800151c <OpenLoopTasks+0xa4>)
 80014aa:	f000 f845 	bl	8001538 <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 80014ae:	491c      	ldr	r1, [pc, #112]	; (8001520 <OpenLoopTasks+0xa8>)
 80014b0:	4819      	ldr	r0, [pc, #100]	; (8001518 <OpenLoopTasks+0xa0>)
 80014b2:	ed97 0a04 	vldr	s0, [r7, #16]
 80014b6:	f000 f8c9 	bl	800164c <ab2dq>
	sVdq[0] = 0.0f;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <OpenLoopTasks+0xac>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
	sVdq[1] = VamRef;
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <OpenLoopTasks+0xac>)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	6053      	str	r3, [r2, #4]
	dq2ab(theta, sVdq, sVab);
 80014c8:	4917      	ldr	r1, [pc, #92]	; (8001528 <OpenLoopTasks+0xb0>)
 80014ca:	4816      	ldr	r0, [pc, #88]	; (8001524 <OpenLoopTasks+0xac>)
 80014cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80014d0:	f000 f946 	bl	8001760 <dq2ab>
	ab2uvw(sVab, sVuvw);
 80014d4:	4915      	ldr	r1, [pc, #84]	; (800152c <OpenLoopTasks+0xb4>)
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <OpenLoopTasks+0xb0>)
 80014d8:	f000 f876 	bl	80015c8 <ab2uvw>
	Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4813      	ldr	r0, [pc, #76]	; (800152c <OpenLoopTasks+0xb4>)
 80014e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80014e4:	f000 f97c 	bl	80017e0 <Vuvw2Duty>

	sIdq_1000[0] = sIdq[0] * 1000.0f;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <OpenLoopTasks+0xa8>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001530 <OpenLoopTasks+0xb8>
 80014f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <OpenLoopTasks+0xbc>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <OpenLoopTasks+0xa8>)
 80014fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001502:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001530 <OpenLoopTasks+0xb8>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <OpenLoopTasks+0xbc>)
 800150c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000100 	.word	0x20000100
 800151c:	200000b4 	.word	0x200000b4
 8001520:	20000108 	.word	0x20000108
 8001524:	20000120 	.word	0x20000120
 8001528:	20000130 	.word	0x20000130
 800152c:	20000138 	.word	0x20000138
 8001530:	447a0000 	.word	0x447a0000
 8001534:	20000118 	.word	0x20000118

08001538 <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001558:	ee37 7a67 	vsub.f32	s14, s14, s15
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3308      	adds	r3, #8
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001568:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80015c0 <uvw2ab+0x88>
 8001574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015c4 <uvw2ab+0x8c>
 800158a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3308      	adds	r3, #8
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80015c4 <uvw2ab+0x8c>
 800159a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3304      	adds	r3, #4
 80015a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015c0 <uvw2ab+0x88>
 80015aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ae:	edc3 7a00 	vstr	s15, [r3]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	3f5105ec 	.word	0x3f5105ec
 80015c4:	3f5db3d7 	.word	0x3f5db3d7

080015c8 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001644 <ab2uvw+0x7c>
 80015dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80015f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3304      	adds	r3, #4
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001648 <ab2uvw+0x80>
 8001600:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	3304      	adds	r3, #4
 800160c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001644 <ab2uvw+0x7c>
 8001610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001614:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eeb1 7a67 	vneg.f32	s14, s15
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3304      	adds	r3, #4
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3308      	adds	r3, #8
 800162e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001632:	edc3 7a00 	vstr	s15, [r3]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	3f5105ec 	.word	0x3f5105ec
 8001648:	3f5db3d7 	.word	0x3f5db3d7

0800164c <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	ed87 0a03 	vstr	s0, [r7, #12]
 8001656:	60b8      	str	r0, [r7, #8]
 8001658:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800165a:	ed97 0a03 	vldr	s0, [r7, #12]
 800165e:	f008 fce3 	bl	800a028 <sinf>
 8001662:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001666:	ed97 0a03 	vldr	s0, [r7, #12]
 800166a:	f008 fc99 	bl	8009fa0 <cosf>
 800166e:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	edd7 7a04 	vldr	s15, [r7, #16]
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3304      	adds	r3, #4
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a05 	vldr	s15, [r7, #20]
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	eeb1 7a67 	vneg.f32	s14, s15
 80016a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3304      	adds	r3, #4
 80016b0:	edd3 6a00 	vldr	s13, [r3]
 80016b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3304      	adds	r3, #4
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	edc3 7a00 	vstr	s15, [r3]
}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	float amp;
	float amp2;

	amp2 = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3304      	adds	r3, #4
 80016ec:	edd3 6a00 	vldr	s13, [r3]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3304      	adds	r3, #4
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001700:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(amp2);
 8001704:	ed97 0a03 	vldr	s0, [r7, #12]
 8001708:	f008 fcf6 	bl	800a0f8 <sqrtf>
 800170c:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	ee07 3a90 	vmov	s15, r3
}
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	ed87 0a01 	vstr	s0, [r7, #4]
 800172a:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 800172e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001732:	edd7 7a00 	vldr	s15, [r7]
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800175c <calcModFromVamp+0x3c>
 800173e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001742:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	ee07 3a90 	vmov	s15, r3
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	3f5105ec 	.word	0x3f5105ec

08001760 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a03 	vstr	s0, [r7, #12]
 800176a:	60b8      	str	r0, [r7, #8]
 800176c:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800176e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001772:	f008 fc59 	bl	800a028 <sinf>
 8001776:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 800177a:	ed97 0a03 	vldr	s0, [r7, #12]
 800177e:	f008 fc0f 	bl	8009fa0 <cosf>
 8001782:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3304      	adds	r3, #4
 8001798:	edd3 6a00 	vldr	s13, [r3]
 800179c:	edd7 7a05 	vldr	s15, [r7, #20]
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3304      	adds	r3, #4
 80017c0:	edd3 6a00 	vldr	s13, [r3]
 80017c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	edc3 7a00 	vstr	s15, [r3]
}
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80017ea:	60b8      	str	r0, [r7, #8]
 80017ec:	6079      	str	r1, [r7, #4]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3304      	adds	r3, #4
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3304      	adds	r3, #4
 800180e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = -Duty[0] - Duty[1];
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	eeb1 7a67 	vneg.f32	s14, s15
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3308      	adds	r3, #8
 8001830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001834:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001842:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001846:	eeb0 0a67 	vmov.f32	s0, s15
 800184a:	f7fe ff1b 	bl	8000684 <gUpperLowerLimit>
 800184e:	eef0 7a40 	vmov.f32	s15, s0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3304      	adds	r3, #4
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1d1c      	adds	r4, r3, #4
 8001864:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001868:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800186c:	eeb0 0a67 	vmov.f32	s0, s15
 8001870:	f7fe ff08 	bl	8000684 <gUpperLowerLimit>
 8001874:	eef0 7a40 	vmov.f32	s15, s0
 8001878:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3308      	adds	r3, #8
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f103 0408 	add.w	r4, r3, #8
 800188a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800188e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	f7fe fef5 	bl	8000684 <gUpperLowerLimit>
 800189a:	eef0 7a40 	vmov.f32	s15, s0
 800189e:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3304      	adds	r3, #4
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3304      	adds	r3, #4
 80018d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018da:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3308      	adds	r3, #8
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3308      	adds	r3, #8
 80018f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fa:	edc3 7a00 	vstr	s15, [r3]

}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}
	...

08001908 <CurrentFbControl>:



static void CurrentFbControl(float* Igd_ref, float* Igd, float electAngVelo, float Vdc, float* Vgd, float* Vamp){
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0
 800190e:	6178      	str	r0, [r7, #20]
 8001910:	6139      	str	r1, [r7, #16]
 8001912:	ed87 0a03 	vstr	s0, [r7, #12]
 8001916:	edc7 0a02 	vstr	s1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
	float Kid;
	float VampLimit;
	float Vphase;
	float wc;

	wc = 50.0f * TWOPI;
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <CurrentFbControl+0x1ac>)
 8001920:	637b      	str	r3, [r7, #52]	; 0x34

	Kp = La * wc;
 8001922:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001926:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001ab8 <CurrentFbControl+0x1b0>
 800192a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Kig = Ra * wc * CARRIERCYCLE;
 8001932:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001936:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001abc <CurrentFbControl+0x1b4>
 800193a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800193e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001ac0 <CurrentFbControl+0x1b8>
 8001942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001946:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Kid = Kig;
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28

	Ierr[0] = Igd_ref[0] - Igd[0];
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	ed93 7a00 	vldr	s14, [r3]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195e:	edc7 7a06 	vstr	s15, [r7, #24]
	Ierr[1] = Igd_ref[1] - Igd[1];
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3304      	adds	r3, #4
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	3304      	adds	r3, #4
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001976:	edc7 7a07 	vstr	s15, [r7, #28]

	sVdq_i[0] += Kig * Ierr[0];
 800197a:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <CurrentFbControl+0x1bc>)
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	edd7 6a06 	vldr	s13, [r7, #24]
 8001984:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <CurrentFbControl+0x1bc>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	sVdq_i[1] += Kid * Ierr[1];
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <CurrentFbControl+0x1bc>)
 8001998:	ed93 7a01 	vldr	s14, [r3, #4]
 800199c:	edd7 6a07 	vldr	s13, [r7, #28]
 80019a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <CurrentFbControl+0x1bc>)
 80019ae:	edc3 7a01 	vstr	s15, [r3, #4]

	Vgd[0] = Kp * Ierr[0] + sVdq_i[0];
 80019b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80019b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <CurrentFbControl+0x1bc>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	Vgd[1] = Ke * electAngVelo + Kp * Ierr[1] + sVdq_i[1];// + Vgd[1] + Kid * Ierr[1] + ;
 80019ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001ac8 <CurrentFbControl+0x1c0>
 80019d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019da:	edd7 6a07 	vldr	s13, [r7, #28]
 80019de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <CurrentFbControl+0x1bc>)
 80019ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	edc3 7a00 	vstr	s15, [r3]

	Vphase = atan2f(Vgd[1], Vgd[0]);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3304      	adds	r3, #4
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	eef0 0a47 	vmov.f32	s1, s14
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	f008 fb4f 	bl	800a0b4 <atan2f>
 8001a16:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	*Vamp = calcAmpFromVect(Vgd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fe58 	bl	80016d0 <calcAmpFromVect>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = Vdc * SQRT3DIV2_DIV2;
 8001a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001acc <CurrentFbControl+0x1c4>
 8001a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a36:	edc7 7a08 	vstr	s15, [r7, #32]
	if( *Vamp > VampLimit ){
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	d400      	bmi.n	8001a50 <CurrentFbControl+0x148>
		sVdq_i[0] = Vgd[0];
		Vgd[1] = VampLimit * sinf(Vphase);
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;

	}
}
 8001a4e:	e02d      	b.n	8001aac <CurrentFbControl+0x1a4>
		Vgd[0] = VampLimit * cosf(Vphase);
 8001a50:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001a54:	f008 faa4 	bl	8009fa0 <cosf>
 8001a58:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[0] = Vgd[0];
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <CurrentFbControl+0x1bc>)
 8001a70:	6013      	str	r3, [r2, #0]
		Vgd[1] = VampLimit * sinf(Vphase);
 8001a72:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001a76:	f008 fad7 	bl	800a028 <sinf>
 8001a7a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3304      	adds	r3, #4
 8001a92:	ed93 7a00 	vldr	s14, [r3]
 8001a96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a9a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001ac8 <CurrentFbControl+0x1c0>
 8001a9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <CurrentFbControl+0x1bc>)
 8001aa8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001aac:	bf00      	nop
 8001aae:	3738      	adds	r7, #56	; 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	439d1463 	.word	0x439d1463
 8001ab8:	39fba882 	.word	0x39fba882
 8001abc:	3fd71dc9 	.word	0x3fd71dc9
 8001ac0:	4684d000 	.word	0x4684d000
 8001ac4:	20000128 	.word	0x20000128
 8001ac8:	3a870111 	.word	0x3a870111
 8001acc:	3f1cc471 	.word	0x3f1cc471

08001ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad6:	f001 f8b0 	bl	8002c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ada:	f000 f885 	bl	8001be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ade:	f000 fbbb 	bl	8002258 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ae2:	f000 fb87 	bl	80021f4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001ae6:	f000 f9e1 	bl	8001eac <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001aea:	f000 f8c9 	bl	8001c80 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001aee:	f000 fa27 	bl	8001f40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001af2:	f000 fadf 	bl	80020b4 <MX_TIM2_Init>
  MX_DAC1_Init();
 8001af6:	f000 f99f 	bl	8001e38 <MX_DAC1_Init>
  MX_TIM7_Init();
 8001afa:	f000 fb45 	bl	8002188 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001afe:	4832      	ldr	r0, [pc, #200]	; (8001bc8 <main+0xf8>)
 8001b00:	f005 ff64 	bl	80079cc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001b04:	4831      	ldr	r0, [pc, #196]	; (8001bcc <main+0xfc>)
 8001b06:	f002 ff41 	bl	800498c <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b10:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <main+0x100>)
 8001b12:	f004 fe07 	bl	8006724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b1c:	482c      	ldr	r0, [pc, #176]	; (8001bd0 <main+0x100>)
 8001b1e:	f004 fe01 	bl	8006724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b28:	4829      	ldr	r0, [pc, #164]	; (8001bd0 <main+0x100>)
 8001b2a:	f004 fdfb 	bl	8006724 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4825      	ldr	r0, [pc, #148]	; (8001bc8 <main+0xf8>)
 8001b32:	f006 f81b 	bl	8007b6c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b36:	2100      	movs	r1, #0
 8001b38:	4823      	ldr	r0, [pc, #140]	; (8001bc8 <main+0xf8>)
 8001b3a:	f007 f9cb 	bl	8008ed4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b3e:	2104      	movs	r1, #4
 8001b40:	4821      	ldr	r0, [pc, #132]	; (8001bc8 <main+0xf8>)
 8001b42:	f006 f813 	bl	8007b6c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001b46:	2104      	movs	r1, #4
 8001b48:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <main+0xf8>)
 8001b4a:	f007 f9c3 	bl	8008ed4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b4e:	2108      	movs	r1, #8
 8001b50:	481d      	ldr	r0, [pc, #116]	; (8001bc8 <main+0xf8>)
 8001b52:	f006 f80b 	bl	8007b6c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001b56:	2108      	movs	r1, #8
 8001b58:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <main+0xf8>)
 8001b5a:	f007 f9bb 	bl	8008ed4 <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <main+0x104>)
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <main+0x104>)
 8001b64:	3b28      	subs	r3, #40	; 0x28
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8001b68:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <main+0x108>)
 8001b6a:	f005 ff2f 	bl	80079cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <main+0x108>)
 8001b72:	f006 f965 	bl	8007e40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001b76:	2104      	movs	r1, #4
 8001b78:	4817      	ldr	r0, [pc, #92]	; (8001bd8 <main+0x108>)
 8001b7a:	f006 f961 	bl	8007e40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001b7e:	2108      	movs	r1, #8
 8001b80:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <main+0x108>)
 8001b82:	f006 f95d 	bl	8007e40 <HAL_TIM_IC_Start_IT>

  // Start TIM7 for DAC
  HAL_TIM_Base_Start(&htim7);
 8001b86:	4815      	ldr	r0, [pc, #84]	; (8001bdc <main+0x10c>)
 8001b88:	f005 feb0 	bl	80078ec <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4813      	ldr	r0, [pc, #76]	; (8001bdc <main+0x10c>)
 8001b90:	f006 fc56 	bl	8008440 <HAL_TIM_GenerateEvent>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001b94:	2202      	movs	r2, #2
 8001b96:	4912      	ldr	r1, [pc, #72]	; (8001be0 <main+0x110>)
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <main+0xfc>)
 8001b9a:	f001 fce7 	bl	800356c <HAL_ADC_Start_DMA>
  uint16_t data = 2048;
 8001b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ba2:	80fb      	strh	r3, [r7, #6]
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	480f      	ldr	r0, [pc, #60]	; (8001be4 <main+0x114>)
 8001ba8:	f003 ff8d 	bl	8005ac6 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <main+0x114>)
 8001bb4:	f003 ffda 	bl	8005b6c <HAL_DAC_SetValue>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4809      	ldr	r0, [pc, #36]	; (8001be4 <main+0x114>)
 8001bc0:	f003 ffd4 	bl	8005b6c <HAL_DAC_SetValue>
 8001bc4:	e7f8      	b.n	8001bb8 <main+0xe8>
 8001bc6:	bf00      	nop
 8001bc8:	20000328 	.word	0x20000328
 8001bcc:	20000158 	.word	0x20000158
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	20000374 	.word	0x20000374
 8001bdc:	200003c0 	.word	0x200003c0
 8001be0:	2000008c 	.word	0x2000008c
 8001be4:	20000224 	.word	0x20000224

08001be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b094      	sub	sp, #80	; 0x50
 8001bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	2238      	movs	r2, #56	; 0x38
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f008 f9ca 	bl	8009f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f004 fde0 	bl	80067d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c1a:	2340      	movs	r3, #64	; 0x40
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c22:	2302      	movs	r3, #2
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c26:	2304      	movs	r3, #4
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c2a:	2355      	movs	r3, #85	; 0x55
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c36:	2302      	movs	r3, #2
 8001c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fe7a 	bl	8006938 <HAL_RCC_OscConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c4a:	f000 fb89 	bl	8002360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4e:	230f      	movs	r3, #15
 8001c50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c52:	2303      	movs	r3, #3
 8001c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2104      	movs	r1, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 f97e 	bl	8006f68 <HAL_RCC_ClockConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c72:	f000 fb75 	bl	8002360 <Error_Handler>
  }
}
 8001c76:	bf00      	nop
 8001c78:	3750      	adds	r7, #80	; 0x50
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b09a      	sub	sp, #104	; 0x68
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c96:	2220      	movs	r2, #32
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f008 f978 	bl	8009f90 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	223c      	movs	r2, #60	; 0x3c
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f008 f972 	bl	8009f90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cac:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cb4:	4b5a      	ldr	r3, [pc, #360]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd4:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ce0:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001ce6:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cec:	4b4c      	ldr	r3, [pc, #304]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d00:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d0e:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d16:	4842      	ldr	r0, [pc, #264]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001d18:	f001 fa66 	bl	80031e8 <HAL_ADC_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d22:	f000 fb1d 	bl	8002360 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	483b      	ldr	r0, [pc, #236]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001d32:	f003 fc8f 	bl	8005654 <HAL_ADCEx_MultiModeConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001d3c:	f000 fb10 	bl	8002360 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <MX_ADC1_Init+0x1a4>)
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d44:	2306      	movs	r3, #6
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d4c:	237f      	movs	r3, #127	; 0x7f
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d50:	2304      	movs	r3, #4
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4830      	ldr	r0, [pc, #192]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001d60:	f001 ff60 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001d6a:	f000 faf9 	bl	8002360 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <MX_ADC1_Init+0x1a8>)
 8001d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d72:	230c      	movs	r3, #12
 8001d74:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001d7e:	f001 ff51 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001d88:	f000 faea 	bl	8002360 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <MX_ADC1_Init+0x1ac>)
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001d90:	2309      	movs	r3, #9
 8001d92:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001d98:	237f      	movs	r3, #127	; 0x7f
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001da4:	2303      	movs	r3, #3
 8001da6:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4814      	ldr	r0, [pc, #80]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001dce:	f002 ff15 	bl	8004bfc <HAL_ADCEx_InjectedConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8001dd8:	f000 fac2 	bl	8002360 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_ADC1_Init+0x1b0>)
 8001dde:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001de0:	f240 130f 	movw	r3, #271	; 0x10f
 8001de4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	4619      	mov	r1, r3
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001dec:	f002 ff06 	bl	8004bfc <HAL_ADCEx_InjectedConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8001df6:	f000 fab3 	bl	8002360 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_ADC1_Init+0x1b4>)
 8001dfc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001dfe:	f240 2315 	movw	r3, #533	; 0x215
 8001e02:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_ADC1_Init+0x1a0>)
 8001e0a:	f002 fef7 	bl	8004bfc <HAL_ADCEx_InjectedConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8001e14:	f000 faa4 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3768      	adds	r7, #104	; 0x68
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000158 	.word	0x20000158
 8001e24:	08600004 	.word	0x08600004
 8001e28:	32601000 	.word	0x32601000
 8001e2c:	04300002 	.word	0x04300002
 8001e30:	1d500080 	.word	0x1d500080
 8001e34:	19200040 	.word	0x19200040

08001e38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08c      	sub	sp, #48	; 0x30
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2230      	movs	r2, #48	; 0x30
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f008 f8a3 	bl	8009f90 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_DAC1_Init+0x6c>)
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <MX_DAC1_Init+0x70>)
 8001e4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001e50:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <MX_DAC1_Init+0x6c>)
 8001e52:	f003 fe16 	bl	8005a82 <HAL_DAC_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001e5c:	f000 fa80 	bl	8002360 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001e60:	2302      	movs	r3, #2
 8001e62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001e70:	2302      	movs	r3, #2
 8001e72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <MX_DAC1_Init+0x6c>)
 8001e8c:	f003 fe96 	bl	8005bbc <HAL_DAC_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001e96:	f000 fa63 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	3730      	adds	r7, #48	; 0x30
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000224 	.word	0x20000224
 8001ea8:	50000800 	.word	0x50000800

08001eac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <MX_LPUART1_UART_Init+0x90>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001eee:	4812      	ldr	r0, [pc, #72]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001ef0:	f007 fa1f 	bl	8009332 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001efa:	f000 fa31 	bl	8002360 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001efe:	2100      	movs	r1, #0
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001f02:	f007 ff51 	bl	8009da8 <HAL_UARTEx_SetTxFifoThreshold>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f0c:	f000 fa28 	bl	8002360 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f10:	2100      	movs	r1, #0
 8001f12:	4809      	ldr	r0, [pc, #36]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001f14:	f007 ff86 	bl	8009e24 <HAL_UARTEx_SetRxFifoThreshold>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f1e:	f000 fa1f 	bl	8002360 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_LPUART1_UART_Init+0x8c>)
 8001f24:	f007 ff07 	bl	8009d36 <HAL_UARTEx_DisableFifoMode>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f2e:	f000 fa17 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000298 	.word	0x20000298
 8001f3c:	40008000 	.word	0x40008000

08001f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b098      	sub	sp, #96	; 0x60
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	615a      	str	r2, [r3, #20]
 8001f64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2234      	movs	r2, #52	; 0x34
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f008 f80f 	bl	8009f90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f72:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001f74:	4a4e      	ldr	r2, [pc, #312]	; (80020b0 <MX_TIM1_Init+0x170>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f78:	4b4c      	ldr	r3, [pc, #304]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f7e:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001f80:	2220      	movs	r2, #32
 8001f82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001f84:	4b49      	ldr	r3, [pc, #292]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001f86:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b47      	ldr	r3, [pc, #284]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f92:	4b46      	ldr	r3, [pc, #280]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f9e:	4843      	ldr	r0, [pc, #268]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001fa0:	f005 fd8c 	bl	8007abc <HAL_TIM_PWM_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001faa:	f000 f9d9 	bl	8002360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001fae:	2370      	movs	r3, #112	; 0x70
 8001fb0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	483a      	ldr	r0, [pc, #232]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001fc2:	f007 f849 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001fcc:	f000 f9c8 	bl	8002360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd0:	2360      	movs	r3, #96	; 0x60
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	482d      	ldr	r0, [pc, #180]	; (80020ac <MX_TIM1_Init+0x16c>)
 8001ff6:	f006 f90f 	bl	8008218 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002000:	f000 f9ae 	bl	8002360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002004:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002008:	2204      	movs	r2, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4827      	ldr	r0, [pc, #156]	; (80020ac <MX_TIM1_Init+0x16c>)
 800200e:	f006 f903 	bl	8008218 <HAL_TIM_PWM_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002018:	f000 f9a2 	bl	8002360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800201c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002020:	2208      	movs	r2, #8
 8002022:	4619      	mov	r1, r3
 8002024:	4821      	ldr	r0, [pc, #132]	; (80020ac <MX_TIM1_Init+0x16c>)
 8002026:	f006 f8f7 	bl	8008218 <HAL_TIM_PWM_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002030:	f000 f996 	bl	8002360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002034:	2370      	movs	r3, #112	; 0x70
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002038:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800203c:	220c      	movs	r2, #12
 800203e:	4619      	mov	r1, r3
 8002040:	481a      	ldr	r0, [pc, #104]	; (80020ac <MX_TIM1_Init+0x16c>)
 8002042:	f006 f8e9 	bl	8008218 <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800204c:	f000 f988 	bl	8002360 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	; (80020ac <MX_TIM1_Init+0x16c>)
 800208e:	f007 f879 	bl	8009184 <HAL_TIMEx_ConfigBreakDeadTime>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002098:	f000 f962 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <MX_TIM1_Init+0x16c>)
 800209e:	f000 fbaf 	bl	8002800 <HAL_TIM_MspPostInit>

}
 80020a2:	bf00      	nop
 80020a4:	3760      	adds	r7, #96	; 0x60
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000328 	.word	0x20000328
 80020b0:	40012c00 	.word	0x40012c00

080020b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <MX_TIM2_Init+0xd0>)
 80020d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020da:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <MX_TIM2_Init+0xd0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <MX_TIM2_Init+0xd0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <MX_TIM2_Init+0xd0>)
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <MX_TIM2_Init+0xd0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <MX_TIM2_Init+0xd0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020fa:	4822      	ldr	r0, [pc, #136]	; (8002184 <MX_TIM2_Init+0xd0>)
 80020fc:	f005 fe48 	bl	8007d90 <HAL_TIM_IC_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002106:	f000 f92b 	bl	8002360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	481a      	ldr	r0, [pc, #104]	; (8002184 <MX_TIM2_Init+0xd0>)
 800211a:	f006 ff9d 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002124:	f000 f91c 	bl	8002360 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800212c:	2301      	movs	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	4811      	ldr	r0, [pc, #68]	; (8002184 <MX_TIM2_Init+0xd0>)
 8002140:	f005 ffce 	bl	80080e0 <HAL_TIM_IC_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800214a:	f000 f909 	bl	8002360 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2204      	movs	r2, #4
 8002152:	4619      	mov	r1, r3
 8002154:	480b      	ldr	r0, [pc, #44]	; (8002184 <MX_TIM2_Init+0xd0>)
 8002156:	f005 ffc3 	bl	80080e0 <HAL_TIM_IC_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002160:	f000 f8fe 	bl	8002360 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2208      	movs	r2, #8
 8002168:	4619      	mov	r1, r3
 800216a:	4806      	ldr	r0, [pc, #24]	; (8002184 <MX_TIM2_Init+0xd0>)
 800216c:	f005 ffb8 	bl	80080e0 <HAL_TIM_IC_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002176:	f000 f8f3 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000374 	.word	0x20000374

08002188 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_TIM7_Init+0x64>)
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <MX_TIM7_Init+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_TIM7_Init+0x64>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_TIM7_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_TIM7_Init+0x64>)
 80021ac:	f241 3287 	movw	r2, #4999	; 0x1387
 80021b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_TIM7_Init+0x64>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <MX_TIM7_Init+0x64>)
 80021ba:	f005 fb3f 	bl	800783c <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80021c4:	f000 f8cc 	bl	8002360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021c8:	2320      	movs	r3, #32
 80021ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_TIM7_Init+0x64>)
 80021d6:	f006 ff3f 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80021e0:	f000 f8be 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200003c0 	.word	0x200003c0
 80021f0:	40001400 	.word	0x40001400

080021f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_DMA_Init+0x60>)
 80021fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <MX_DMA_Init+0x60>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6493      	str	r3, [r2, #72]	; 0x48
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_DMA_Init+0x60>)
 8002208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_DMA_Init+0x60>)
 8002214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002216:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <MX_DMA_Init+0x60>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6493      	str	r3, [r2, #72]	; 0x48
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <MX_DMA_Init+0x60>)
 8002220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	200b      	movs	r0, #11
 8002230:	f003 fbf3 	bl	8005a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002234:	200b      	movs	r0, #11
 8002236:	f003 fc0a 	bl	8005a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	200c      	movs	r0, #12
 8002240:	f003 fbeb 	bl	8005a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002244:	200c      	movs	r0, #12
 8002246:	f003 fc02 	bl	8005a4e <HAL_NVIC_EnableIRQ>

}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <MX_GPIO_Init+0x100>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a39      	ldr	r2, [pc, #228]	; (8002358 <MX_GPIO_Init+0x100>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227a:	4b37      	ldr	r3, [pc, #220]	; (8002358 <MX_GPIO_Init+0x100>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <MX_GPIO_Init+0x100>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	4a33      	ldr	r2, [pc, #204]	; (8002358 <MX_GPIO_Init+0x100>)
 800228c:	f043 0320 	orr.w	r3, r3, #32
 8002290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <MX_GPIO_Init+0x100>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <MX_GPIO_Init+0x100>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <MX_GPIO_Init+0x100>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022aa:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <MX_GPIO_Init+0x100>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <MX_GPIO_Init+0x100>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	4a27      	ldr	r2, [pc, #156]	; (8002358 <MX_GPIO_Init+0x100>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <MX_GPIO_Init+0x100>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2120      	movs	r1, #32
 80022d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d6:	f004 fa25 	bl	8006724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80022e0:	481e      	ldr	r0, [pc, #120]	; (800235c <MX_GPIO_Init+0x104>)
 80022e2:	f004 fa1f 	bl	8006724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4817      	ldr	r0, [pc, #92]	; (800235c <MX_GPIO_Init+0x104>)
 80022fe:	f004 f877 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002302:	2320      	movs	r3, #32
 8002304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231c:	f004 f868 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8002320:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4808      	ldr	r0, [pc, #32]	; (800235c <MX_GPIO_Init+0x104>)
 800233a:	f004 f859 	bl	80063f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2028      	movs	r0, #40	; 0x28
 8002344:	f003 fb69 	bl	8005a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002348:	2028      	movs	r0, #40	; 0x28
 800234a:	f003 fb80 	bl	8005a4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800234e:	bf00      	nop
 8002350:	3728      	adds	r7, #40	; 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	48000800 	.word	0x48000800

08002360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002364:	b672      	cpsid	i
}
 8002366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002368:	e7fe      	b.n	8002368 <Error_Handler+0x8>
	...

0800236c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_MspInit+0x44>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <HAL_MspInit+0x44>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6613      	str	r3, [r2, #96]	; 0x60
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_MspInit+0x44>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_MspInit+0x44>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_MspInit+0x44>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_MspInit+0x44>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023a2:	f004 fab9 	bl	8006918 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0a0      	sub	sp, #128	; 0x80
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023cc:	f107 0318 	add.w	r3, r7, #24
 80023d0:	2254      	movs	r2, #84	; 0x54
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 fddb 	bl	8009f90 <memset>
  if(hadc->Instance==ADC1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e2:	f040 8098 	bne.w	8002516 <HAL_ADC_MspInit+0x162>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80023ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80023f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f2:	f107 0318 	add.w	r3, r7, #24
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 ffd2 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002402:	f7ff ffad 	bl	8002360 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a45      	ldr	r2, [pc, #276]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 800240c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a39      	ldr	r2, [pc, #228]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_ADC_MspInit+0x16c>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002466:	2307      	movs	r3, #7
 8002468:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246a:	2303      	movs	r3, #3
 800246c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002476:	4619      	mov	r1, r3
 8002478:	482a      	ldr	r0, [pc, #168]	; (8002524 <HAL_ADC_MspInit+0x170>)
 800247a:	f003 ffb9 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800247e:	2303      	movs	r3, #3
 8002480:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002482:	2303      	movs	r3, #3
 8002484:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002494:	f003 ffac 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002498:	2302      	movs	r3, #2
 800249a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249c:	2303      	movs	r3, #3
 800249e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024a8:	4619      	mov	r1, r3
 80024aa:	481f      	ldr	r0, [pc, #124]	; (8002528 <HAL_ADC_MspInit+0x174>)
 80024ac:	f003 ffa0 	bl	80063f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_ADC_MspInit+0x17c>)
 80024b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024b8:	2205      	movs	r2, #5
 80024ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024e0:	2220      	movs	r2, #32
 80024e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024ea:	4810      	ldr	r0, [pc, #64]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024ec:	f003 fd0e 	bl	8005f0c <HAL_DMA_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80024f6:	f7ff ff33 	bl	8002360 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_ADC_MspInit+0x178>)
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_ADC_MspInit+0x178>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2012      	movs	r0, #18
 800250c:	f003 fa85 	bl	8005a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002510:	2012      	movs	r0, #18
 8002512:	f003 fa9c 	bl	8005a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002516:	bf00      	nop
 8002518:	3780      	adds	r7, #128	; 0x80
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	48000800 	.word	0x48000800
 8002528:	48000400 	.word	0x48000400
 800252c:	200001c4 	.word	0x200001c4
 8002530:	40020008 	.word	0x40020008

08002534 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <HAL_DAC_MspInit+0xcc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d14f      	bne.n	80025f6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_DAC_MspInit+0xd0>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <HAL_DAC_MspInit+0xd0>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_DAC_MspInit+0xd0>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_DAC_MspInit+0xd0>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_DAC_MspInit+0xd0>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_DAC_MspInit+0xd0>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002586:	2310      	movs	r3, #16
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258a:	2303      	movs	r3, #3
 800258c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259c:	f003 ff28 	bl	80063f0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025a2:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_DAC_MspInit+0xd8>)
 80025a4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025a8:	2206      	movs	r2, #6
 80025aa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025ae:	2210      	movs	r2, #16
 80025b0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025cc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025d0:	2220      	movs	r2, #32
 80025d2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80025da:	480b      	ldr	r0, [pc, #44]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025dc:	f003 fc96 	bl	8005f0c <HAL_DMA_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80025e6:	f7ff febb 	bl	8002360 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a06      	ldr	r2, [pc, #24]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_DAC_MspInit+0xd4>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	50000800 	.word	0x50000800
 8002604:	40021000 	.word	0x40021000
 8002608:	20000238 	.word	0x20000238
 800260c:	4002001c 	.word	0x4002001c

08002610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b09e      	sub	sp, #120	; 0x78
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	2254      	movs	r2, #84	; 0x54
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f007 fcad 	bl	8009f90 <memset>
  if(huart->Instance==LPUART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_UART_MspInit+0xa8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d136      	bne.n	80026ae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002640:	2320      	movs	r3, #32
 8002642:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	4618      	mov	r0, r3
 800264e:	f004 fea7 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002658:	f7ff fe82 	bl	8002360 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_UART_MspInit+0xac>)
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_UART_MspInit+0xac>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_UART_MspInit+0xac>)
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_UART_MspInit+0xac>)
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_UART_MspInit+0xac>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_UART_MspInit+0xac>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800268c:	230c      	movs	r3, #12
 800268e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800269c:	230c      	movs	r3, #12
 800269e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026a4:	4619      	mov	r1, r3
 80026a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026aa:	f003 fea1 	bl	80063f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80026ae:	bf00      	nop
 80026b0:	3778      	adds	r7, #120	; 0x78
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40008000 	.word	0x40008000
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_TIM_PWM_MspInit+0x38>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10b      	bne.n	80026ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_TIM_PWM_MspInit+0x3c>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_TIM_PWM_MspInit+0x3c>)
 80026d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026dc:	6613      	str	r3, [r2, #96]	; 0x60
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_TIM_PWM_MspInit+0x3c>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d146      	bne.n	80027b0 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a24      	ldr	r2, [pc, #144]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_TIM_IC_MspInit+0xb8>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 800276a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800276e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800277c:	2301      	movs	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <HAL_TIM_IC_MspInit+0xbc>)
 8002788:	f003 fe32 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 800278c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800279e:	2301      	movs	r3, #1
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ac:	f003 fe20 	bl	80063f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400

080027c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_TIM_Base_MspInit+0x38>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10b      	bne.n	80027ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_TIM_Base_MspInit+0x3c>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_TIM_Base_MspInit+0x3c>)
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_TIM_Base_MspInit+0x3c>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40001400 	.word	0x40001400
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <HAL_TIM_MspPostInit+0xf8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d166      	bne.n	80028f0 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a35      	ldr	r2, [pc, #212]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282e:	4b33      	ldr	r3, [pc, #204]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a29      	ldr	r2, [pc, #164]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_TIM_MspPostInit+0xfc>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800286a:	2308      	movs	r3, #8
 800286c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800287a:	2302      	movs	r3, #2
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	481e      	ldr	r0, [pc, #120]	; (8002900 <HAL_TIM_MspPostInit+0x100>)
 8002886:	f003 fdb3 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800288a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800288e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800289c:	2306      	movs	r3, #6
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028aa:	f003 fda1 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028ae:	2301      	movs	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028be:	2306      	movs	r3, #6
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	480e      	ldr	r0, [pc, #56]	; (8002904 <HAL_TIM_MspPostInit+0x104>)
 80028ca:	f003 fd91 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80028e0:	230c      	movs	r3, #12
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	4806      	ldr	r0, [pc, #24]	; (8002904 <HAL_TIM_MspPostInit+0x104>)
 80028ec:	f003 fd80 	bl	80063f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	48000800 	.word	0x48000800
 8002904:	48000400 	.word	0x48000400

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800290c:	e7fe      	b.n	800290c <NMI_Handler+0x4>

0800290e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <MemManage_Handler+0x4>

0800291a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <UsageFault_Handler+0x4>

08002926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002954:	f000 f9c4 	bl	8002ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <DMA1_Channel1_IRQHandler+0x10>)
 8002962:	f003 fbf6 	bl	8006152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200001c4 	.word	0x200001c4

08002970 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <DMA1_Channel2_IRQHandler+0x10>)
 8002976:	f003 fbec 	bl	8006152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000238 	.word	0x20000238

08002984 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 800298a:	4b75      	ldr	r3, [pc, #468]	; (8002b60 <ADC1_2_IRQHandler+0x1dc>)
 800298c:	61bb      	str	r3, [r7, #24]
	float Idq_ref[2];
	uint8_t leadAngleModeFlg;
	uint8_t flgFB;
  int8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800298e:	4875      	ldr	r0, [pc, #468]	; (8002b64 <ADC1_2_IRQHandler+0x1e0>)
 8002990:	f000 fec0 	bl	8003714 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002994:	2120      	movs	r1, #32
 8002996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299a:	f003 fedb 	bl	8006754 <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 800299e:	f7fd fe9b 	bl	80006d8 <readButton1>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <ADC1_2_IRQHandler+0x1e4>)
 80029a8:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 80029aa:	f7fd fefd 	bl	80007a8 <readVolume>
 80029ae:	eef0 7a40 	vmov.f32	s15, s0
 80029b2:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <ADC1_2_IRQHandler+0x1e8>)
 80029b4:	edc3 7a00 	vstr	s15, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 80029b8:	496d      	ldr	r1, [pc, #436]	; (8002b70 <ADC1_2_IRQHandler+0x1ec>)
 80029ba:	486e      	ldr	r0, [pc, #440]	; (8002b74 <ADC1_2_IRQHandler+0x1f0>)
 80029bc:	f7fd ff16 	bl	80007ec <readCurrent>
	gVdc = 20.0;//readVdc();
 80029c0:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <ADC1_2_IRQHandler+0x1f4>)
 80029c2:	4a6e      	ldr	r2, [pc, #440]	; (8002b7c <ADC1_2_IRQHandler+0x1f8>)
 80029c4:	601a      	str	r2, [r3, #0]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 80029c6:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <ADC1_2_IRQHandler+0x1f4>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80029d0:	eef0 0a67 	vmov.f32	s1, s15
 80029d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80029d8:	f7fd fdcf 	bl	800057a <gfDivideAvoidZero>
 80029dc:	eef0 7a40 	vmov.f32	s15, s0
 80029e0:	4b67      	ldr	r3, [pc, #412]	; (8002b80 <ADC1_2_IRQHandler+0x1fc>)
 80029e2:	edc3 7a00 	vstr	s15, [r3]

	//DutyRef Calculation
	//if ( gButton1 == 1 )
	  rotDir = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
	//else
	//  rotDir = -1;


	  Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
	  Idq_ref[1] = 0.3f * gVolume;
 80029f0:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <ADC1_2_IRQHandler+0x1e8>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002b84 <ADC1_2_IRQHandler+0x200>
 80029fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fe:	edc7 7a02 	vstr	s15, [r7, #8]
	ErectFreqErr = ErectFreqRef - gElectFreq;
	gDutyRef += ErectFreqErr * 0.0000001f;
	*/

	// Sequence Control
	if(gInitCnt < 500){
 8002a02:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <ADC1_2_IRQHandler+0x204>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a0a:	d210      	bcs.n	8002a2e <ADC1_2_IRQHandler+0xaa>
		gInitCnt++;
 8002a0c:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <ADC1_2_IRQHandler+0x204>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <ADC1_2_IRQHandler+0x204>)
 8002a16:	801a      	strh	r2, [r3, #0]
		gPosMode = POSMODE_HALL;
 8002a18:	4b5c      	ldr	r3, [pc, #368]	; (8002b8c <ADC1_2_IRQHandler+0x208>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OFF;
 8002a1e:	4b5c      	ldr	r3, [pc, #368]	; (8002b90 <ADC1_2_IRQHandler+0x20c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77bb      	strb	r3, [r7, #30]
 8002a2c:	e033      	b.n	8002a96 <ADC1_2_IRQHandler+0x112>
	}
	else if (gElectFreq < 100.0f){
 8002a2e:	4b59      	ldr	r3, [pc, #356]	; (8002b94 <ADC1_2_IRQHandler+0x210>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002b98 <ADC1_2_IRQHandler+0x214>
 8002a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	d50a      	bpl.n	8002a58 <ADC1_2_IRQHandler+0xd4>
		gPosMode = POSMODE_HALL;
 8002a42:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <ADC1_2_IRQHandler+0x208>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OPENLOOP;
 8002a48:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <ADC1_2_IRQHandler+0x20c>)
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	77bb      	strb	r3, [r7, #30]
 8002a56:	e01e      	b.n	8002a96 <ADC1_2_IRQHandler+0x112>
	}
	else if(gElectFreq < 200.0){
 8002a58:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <ADC1_2_IRQHandler+0x210>)
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002b9c <ADC1_2_IRQHandler+0x218>
 8002a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	d50a      	bpl.n	8002a82 <ADC1_2_IRQHandler+0xfe>
		gPosMode = POSMODE_HALL_PLL;
 8002a6c:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <ADC1_2_IRQHandler+0x208>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_OPENLOOP;
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <ADC1_2_IRQHandler+0x20c>)
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
		flgFB = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	77bb      	strb	r3, [r7, #30]
 8002a80:	e009      	b.n	8002a96 <ADC1_2_IRQHandler+0x112>
	}
	else{
		gPosMode = POSMODE_HALL_PLL;
 8002a82:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <ADC1_2_IRQHandler+0x208>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
		gDrvMode = DRVMODE_VECTORCONTROL;
 8002a88:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <ADC1_2_IRQHandler+0x20c>)
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	701a      	strb	r2, [r3, #0]
		leadAngleModeFlg = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	77fb      	strb	r3, [r7, #31]
		flgFB = 1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	77bb      	strb	r3, [r7, #30]
	}

	// MotorDrive
	if(gDrvMode == DRVMODE_OFF){
 8002a96:	4b3e      	ldr	r3, [pc, #248]	; (8002b90 <ADC1_2_IRQHandler+0x20c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d112      	bne.n	8002ac4 <ADC1_2_IRQHandler+0x140>
		outputMode[0] = OUTPUTMODE_OPEN;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	703b      	strb	r3, [r7, #0]
		outputMode[1] = OUTPUTMODE_OPEN;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	707b      	strb	r3, [r7, #1]
		outputMode[2] = OUTPUTMODE_OPEN;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	70bb      	strb	r3, [r7, #2]
		gDuty[0] = 0.0f;
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <ADC1_2_IRQHandler+0x21c>)
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
		gDuty[1] = 0.0f;
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <ADC1_2_IRQHandler+0x21c>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
		gDuty[2] = 0.0f;
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <ADC1_2_IRQHandler+0x21c>)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	e03d      	b.n	8002b40 <ADC1_2_IRQHandler+0x1bc>

	}
	else{
		gDutyRef = 0.0f;
 8002ac4:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <ADC1_2_IRQHandler+0x220>)
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
		sixStepTasks(gDutyRef, leadAngleModeFlg, 0.0f, &theta_tmp, &electAngVelo_tmp, gDuty, outputMode);
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <ADC1_2_IRQHandler+0x220>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	f107 020c 	add.w	r2, r7, #12
 8002ad6:	f107 0110 	add.w	r1, r7, #16
 8002ada:	7ff8      	ldrb	r0, [r7, #31]
 8002adc:	463b      	mov	r3, r7
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <ADC1_2_IRQHandler+0x21c>)
 8002ae2:	eddf 0a31 	vldr	s1, [pc, #196]	; 8002ba8 <ADC1_2_IRQHandler+0x224>
 8002ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aea:	f7fd ff8b 	bl	8000a04 <sixStepTasks>
		gTheta = theta_tmp - gVolume;
 8002aee:	ed97 7a04 	vldr	s14, [r7, #16]
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <ADC1_2_IRQHandler+0x1e8>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <ADC1_2_IRQHandler+0x228>)
 8002afe:	edc3 7a00 	vstr	s15, [r3]
		gElectAngVelo = electAngVelo_tmp;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <ADC1_2_IRQHandler+0x22c>)
 8002b06:	6013      	str	r3, [r2, #0]

		//write IO signals
		//gTheta = gTheta + 2000.0f * gVolume * CARRIERCYCLE;
		//gTheta = gfWrapTheta(gTheta);

		VectorControlTasks(Idq_ref, gTheta, gElectAngVelo, gIuvw, gVdc, gTwoDivVdc, flgFB, gDuty, outputMode);
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <ADC1_2_IRQHandler+0x228>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <ADC1_2_IRQHandler+0x22c>)
 8002b10:	ed93 7a00 	vldr	s14, [r3]
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <ADC1_2_IRQHandler+0x1f4>)
 8002b16:	edd3 6a00 	vldr	s13, [r3]
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <ADC1_2_IRQHandler+0x1fc>)
 8002b1c:	ed93 6a00 	vldr	s12, [r3]
 8002b20:	7fba      	ldrb	r2, [r7, #30]
 8002b22:	1d38      	adds	r0, r7, #4
 8002b24:	463b      	mov	r3, r7
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <ADC1_2_IRQHandler+0x21c>)
 8002b2a:	eef0 1a46 	vmov.f32	s3, s12
 8002b2e:	eeb0 1a66 	vmov.f32	s2, s13
 8002b32:	490f      	ldr	r1, [pc, #60]	; (8002b70 <ADC1_2_IRQHandler+0x1ec>)
 8002b34:	eef0 0a47 	vmov.f32	s1, s14
 8002b38:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3c:	f7fe fb82 	bl	8001244 <VectorControlTasks>
	}

	writeOutputMode(outputMode);
 8002b40:	463b      	mov	r3, r7
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd feda 	bl	80008fc <writeOutputMode>
	writeDuty(gDuty);
 8002b48:	4815      	ldr	r0, [pc, #84]	; (8002ba0 <ADC1_2_IRQHandler+0x21c>)
 8002b4a:	f7fd ff19 	bl	8000980 <writeDuty>
	//else

//
//VectorControlTasks(Idq_ref, gTheta, gIuvw, gVdc, gDuty);

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b4e:	2120      	movs	r1, #32
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b54:	f003 fdfe 	bl	8006754 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	42c80000 	.word	0x42c80000
 8002b64:	20000158 	.word	0x20000158
 8002b68:	20000093 	.word	0x20000093
 8002b6c:	200000b0 	.word	0x200000b0
 8002b70:	200000b4 	.word	0x200000b4
 8002b74:	200000c0 	.word	0x200000c0
 8002b78:	200000a8 	.word	0x200000a8
 8002b7c:	41a00000 	.word	0x41a00000
 8002b80:	200000ac 	.word	0x200000ac
 8002b84:	3e99999a 	.word	0x3e99999a
 8002b88:	200000da 	.word	0x200000da
 8002b8c:	200000d8 	.word	0x200000d8
 8002b90:	200000d9 	.word	0x200000d9
 8002b94:	2000009c 	.word	0x2000009c
 8002b98:	42c80000 	.word	0x42c80000
 8002b9c:	43480000 	.word	0x43480000
 8002ba0:	200000cc 	.word	0x200000cc
 8002ba4:	200000c8 	.word	0x200000c8
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	200000a0 	.word	0x200000a0
 8002bb0:	200000a4 	.word	0x200000a4

08002bb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bbc:	f003 fde4 	bl	8006788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SystemInit+0x20>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <SystemInit+0x20>)
 8002bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bec:	480d      	ldr	r0, [pc, #52]	; (8002c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bee:	490e      	ldr	r1, [pc, #56]	; (8002c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <LoopForever+0xe>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c04:	4c0b      	ldr	r4, [pc, #44]	; (8002c34 <LoopForever+0x16>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c12:	f7ff ffd7 	bl	8002bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c16:	f007 f997 	bl	8009f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c1a:	f7fe ff59 	bl	8001ad0 <main>

08002c1e <LoopForever>:

LoopForever:
    b LoopForever
 8002c1e:	e7fe      	b.n	8002c1e <LoopForever>
  ldr   r0, =_estack
 8002c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c2c:	0800b3cc 	.word	0x0800b3cc
  ldr r2, =_sbss
 8002c30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c34:	20000410 	.word	0x20000410

08002c38 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC3_IRQHandler>

08002c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f002 fedd 	bl	8005a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f000 f80e 	bl	8002c6c <HAL_InitTick>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	71fb      	strb	r3, [r7, #7]
 8002c5a:	e001      	b.n	8002c60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c5c:	f7ff fb86 	bl	800236c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c60:	79fb      	ldrb	r3, [r7, #7]

}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_InitTick+0x68>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d022      	beq.n	8002cc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <HAL_InitTick+0x6c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_InitTick+0x68>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fee8 	bl	8005a6a <HAL_SYSTICK_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d809      	bhi.n	8002cba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cae:	f002 feb4 	bl	8005a1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_InitTick+0x70>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e004      	b.n	8002cca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	e001      	b.n	8002cca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	20000004 	.word	0x20000004

08002ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_IncTick+0x1c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_IncTick+0x20>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <HAL_IncTick+0x1c>)
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	2000040c 	.word	0x2000040c
 8002d00:	20000008 	.word	0x20000008

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000040c 	.word	0x2000040c

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d004      	beq.n	8002d40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_Delay+0x40>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d40:	bf00      	nop
 8002d42:	f7ff ffdf 	bl	8002d04 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d8f7      	bhi.n	8002d42 <HAL_Delay+0x26>
  {
  }
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000008 	.word	0x20000008

08002d60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3360      	adds	r3, #96	; 0x60
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <LL_ADC_SetOffset+0x44>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	03fff000 	.word	0x03fff000

08002e10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3360      	adds	r3, #96	; 0x60
 8002e1e:	461a      	mov	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3360      	adds	r3, #96	; 0x60
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b087      	sub	sp, #28
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3360      	adds	r3, #96	; 0x60
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3360      	adds	r3, #96	; 0x60
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	615a      	str	r2, [r3, #20]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3330      	adds	r3, #48	; 0x30
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	211f      	movs	r1, #31
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 011f 	and.w	r1, r3, #31
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	0e5b      	lsrs	r3, r3, #25
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	4413      	add	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	0d1b      	lsrs	r3, r3, #20
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2107      	movs	r1, #7
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	401a      	ands	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	0d1b      	lsrs	r3, r3, #20
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	431a      	orrs	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0f      	ldr	r2, [pc, #60]	; (800304c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d10a      	bne.n	800302a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003028:	e00a      	b.n	8003040 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	43db      	mvns	r3, r3
 8003038:	401a      	ands	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	407f0000 	.word	0x407f0000

08003050 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 031f 	and.w	r3, r3, #31
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6093      	str	r3, [r2, #8]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003110:	d101      	bne.n	8003116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <LL_ADC_IsEnabled+0x18>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <LL_ADC_IsEnabled+0x1a>
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003182:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1af      	b.n	8003562 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff f8cf 	bl	80023b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff3f 	bl	80030ac <LL_ADC_IsDeepPowerDownEnabled>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff25 	bl	8003088 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff5a 	bl	80030fc <LL_ADC_IsInternalRegulatorEnabled>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff3e 	bl	80030d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003258:	4b9f      	ldr	r3, [pc, #636]	; (80034d8 <HAL_ADC_Init+0x2f0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	4a9f      	ldr	r2, [pc, #636]	; (80034dc <HAL_ADC_Init+0x2f4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800326c:	e002      	b.n	8003274 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff3c 	bl	80030fc <LL_ADC_IsInternalRegulatorEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff75 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 8148 	bne.w	8003550 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8144 	bne.w	8003550 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff35 	bl	800314c <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d141      	bne.n	800336c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f0:	d004      	beq.n	80032fc <HAL_ADC_Init+0x114>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7a      	ldr	r2, [pc, #488]	; (80034e0 <HAL_ADC_Init+0x2f8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10f      	bne.n	800331c <HAL_ADC_Init+0x134>
 80032fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003300:	f7ff ff24 	bl	800314c <LL_ADC_IsEnabled>
 8003304:	4604      	mov	r4, r0
 8003306:	4876      	ldr	r0, [pc, #472]	; (80034e0 <HAL_ADC_Init+0x2f8>)
 8003308:	f7ff ff20 	bl	800314c <LL_ADC_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	4323      	orrs	r3, r4
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_ADC_Init+0x15a>
 800331c:	4871      	ldr	r0, [pc, #452]	; (80034e4 <HAL_ADC_Init+0x2fc>)
 800331e:	f7ff ff15 	bl	800314c <LL_ADC_IsEnabled>
 8003322:	4604      	mov	r4, r0
 8003324:	4870      	ldr	r0, [pc, #448]	; (80034e8 <HAL_ADC_Init+0x300>)
 8003326:	f7ff ff11 	bl	800314c <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	431c      	orrs	r4, r3
 800332e:	486f      	ldr	r0, [pc, #444]	; (80034ec <HAL_ADC_Init+0x304>)
 8003330:	f7ff ff0c 	bl	800314c <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	4323      	orrs	r3, r4
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800334e:	d004      	beq.n	800335a <HAL_ADC_Init+0x172>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a62      	ldr	r2, [pc, #392]	; (80034e0 <HAL_ADC_Init+0x2f8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_ADC_Init+0x176>
 800335a:	4a65      	ldr	r2, [pc, #404]	; (80034f0 <HAL_ADC_Init+0x308>)
 800335c:	e000      	b.n	8003360 <HAL_ADC_Init+0x178>
 800335e:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_ADC_Init+0x30c>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f7ff fcfa 	bl	8002d60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	7f5b      	ldrb	r3, [r3, #29]
 8003370:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003376:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800337c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003382:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800338a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003396:	2b01      	cmp	r3, #1
 8003398:	d106      	bne.n	80033a8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	045b      	lsls	r3, r3, #17
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <HAL_ADC_Init+0x310>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	69b9      	ldr	r1, [r7, #24]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fed1 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80033f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fede 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 8003404:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d17f      	bne.n	800350c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d17c      	bne.n	800350c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003416:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800341e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800342e:	f023 0302 	bic.w	r3, r3, #2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	430b      	orrs	r3, r1
 800343a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d017      	beq.n	8003474 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003452:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800345c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6911      	ldr	r1, [r2, #16]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	430b      	orrs	r3, r1
 800346e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003472:	e013      	b.n	800349c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003482:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003498:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d12a      	bne.n	80034fc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034c8:	430a      	orrs	r2, r1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	e019      	b.n	800350c <HAL_ADC_Init+0x324>
 80034d8:	20000000 	.word	0x20000000
 80034dc:	053e2d63 	.word	0x053e2d63
 80034e0:	50000100 	.word	0x50000100
 80034e4:	50000400 	.word	0x50000400
 80034e8:	50000500 	.word	0x50000500
 80034ec:	50000600 	.word	0x50000600
 80034f0:	50000300 	.word	0x50000300
 80034f4:	50000700 	.word	0x50000700
 80034f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10c      	bne.n	800352e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f023 010f 	bic.w	r1, r3, #15
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	1e5a      	subs	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
 800352c:	e007      	b.n	800353e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 020f 	bic.w	r2, r2, #15
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	65da      	str	r2, [r3, #92]	; 0x5c
 800354e:	e007      	b.n	8003560 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	f043 0210 	orr.w	r2, r3, #16
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003560:	7ffb      	ldrb	r3, [r7, #31]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd90      	pop	{r4, r7, pc}
 800356a:	bf00      	nop

0800356c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003580:	d004      	beq.n	800358c <HAL_ADC_Start_DMA+0x20>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5a      	ldr	r2, [pc, #360]	; (80036f0 <HAL_ADC_Start_DMA+0x184>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_ADC_Start_DMA+0x24>
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <HAL_ADC_Start_DMA+0x188>)
 800358e:	e000      	b.n	8003592 <HAL_ADC_Start_DMA+0x26>
 8003590:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_ADC_Start_DMA+0x18c>)
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fd5c 	bl	8003050 <LL_ADC_GetMultimode>
 8003598:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fdfb 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 809b 	bne.w	80036e2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_Start_DMA+0x4e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e096      	b.n	80036e8 <HAL_ADC_Start_DMA+0x17c>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4d      	ldr	r2, [pc, #308]	; (80036fc <HAL_ADC_Start_DMA+0x190>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d008      	beq.n	80035de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d002      	beq.n	80035de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b09      	cmp	r3, #9
 80035dc:	d17a      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 ff60 	bl	80044a4 <ADC_Enable>
 80035e4:	4603      	mov	r3, r0
 80035e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d16d      	bne.n	80036ca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a3a      	ldr	r2, [pc, #232]	; (80036f0 <HAL_ADC_Start_DMA+0x184>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_ADC_Start_DMA+0xb4>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_ADC_Start_DMA+0x194>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d002      	beq.n	800361c <HAL_ADC_Start_DMA+0xb0>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	e003      	b.n	8003624 <HAL_ADC_Start_DMA+0xb8>
 800361c:	4b39      	ldr	r3, [pc, #228]	; (8003704 <HAL_ADC_Start_DMA+0x198>)
 800361e:	e001      	b.n	8003624 <HAL_ADC_Start_DMA+0xb8>
 8003620:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4293      	cmp	r3, r2
 800362a:	d002      	beq.n	8003632 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	f023 0206 	bic.w	r2, r3, #6
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
 8003656:	e002      	b.n	800365e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <HAL_ADC_Start_DMA+0x19c>)
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	4a28      	ldr	r2, [pc, #160]	; (800370c <HAL_ADC_Start_DMA+0x1a0>)
 800366c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	4a27      	ldr	r2, [pc, #156]	; (8003710 <HAL_ADC_Start_DMA+0x1a4>)
 8003674:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	221c      	movs	r2, #28
 800367c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0210 	orr.w	r2, r2, #16
 8003694:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3340      	adds	r3, #64	; 0x40
 80036b0:	4619      	mov	r1, r3
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f002 fcd1 	bl	800605c <HAL_DMA_Start_IT>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fd55 	bl	8003172 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036c8:	e00d      	b.n	80036e6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80036d2:	e008      	b.n	80036e6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80036e0:	e001      	b.n	80036e6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	50000100 	.word	0x50000100
 80036f4:	50000300 	.word	0x50000300
 80036f8:	50000700 	.word	0x50000700
 80036fc:	50000600 	.word	0x50000600
 8003700:	50000500 	.word	0x50000500
 8003704:	50000400 	.word	0x50000400
 8003708:	08004569 	.word	0x08004569
 800370c:	08004641 	.word	0x08004641
 8003710:	0800465d 	.word	0x0800465d

08003714 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003738:	d004      	beq.n	8003744 <HAL_ADC_IRQHandler+0x30>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a8e      	ldr	r2, [pc, #568]	; (8003978 <HAL_ADC_IRQHandler+0x264>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_ADC_IRQHandler+0x34>
 8003744:	4b8d      	ldr	r3, [pc, #564]	; (800397c <HAL_ADC_IRQHandler+0x268>)
 8003746:	e000      	b.n	800374a <HAL_ADC_IRQHandler+0x36>
 8003748:	4b8d      	ldr	r3, [pc, #564]	; (8003980 <HAL_ADC_IRQHandler+0x26c>)
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fc80 	bl	8003050 <LL_ADC_GetMultimode>
 8003750:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d017      	beq.n	800378c <HAL_ADC_IRQHandler+0x78>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d012      	beq.n	800378c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 fa32 	bl	8004be8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2202      	movs	r2, #2
 800378a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x8c>
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8094 	beq.w	80038d4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 808e 	beq.w	80038d4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fb95 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d072      	beq.n	80038c6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a64      	ldr	r2, [pc, #400]	; (8003978 <HAL_ADC_IRQHandler+0x264>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_ADC_IRQHandler+0xea>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a65      	ldr	r2, [pc, #404]	; (8003984 <HAL_ADC_IRQHandler+0x270>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d002      	beq.n	80037fa <HAL_ADC_IRQHandler+0xe6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	e003      	b.n	8003802 <HAL_ADC_IRQHandler+0xee>
 80037fa:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_ADC_IRQHandler+0x274>)
 80037fc:	e001      	b.n	8003802 <HAL_ADC_IRQHandler+0xee>
 80037fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4293      	cmp	r3, r2
 8003808:	d008      	beq.n	800381c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b05      	cmp	r3, #5
 8003814:	d002      	beq.n	800381c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b09      	cmp	r3, #9
 800381a:	d104      	bne.n	8003826 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	e014      	b.n	8003850 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a53      	ldr	r2, [pc, #332]	; (8003978 <HAL_ADC_IRQHandler+0x264>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_ADC_IRQHandler+0x130>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a53      	ldr	r2, [pc, #332]	; (8003984 <HAL_ADC_IRQHandler+0x270>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d002      	beq.n	8003840 <HAL_ADC_IRQHandler+0x12c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e003      	b.n	8003848 <HAL_ADC_IRQHandler+0x134>
 8003840:	4b51      	ldr	r3, [pc, #324]	; (8003988 <HAL_ADC_IRQHandler+0x274>)
 8003842:	e001      	b.n	8003848 <HAL_ADC_IRQHandler+0x134>
 8003844:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003848:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d135      	bne.n	80038c6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b08      	cmp	r3, #8
 8003866:	d12e      	bne.n	80038c6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fc94 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11a      	bne.n	80038ae <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 020c 	bic.w	r2, r2, #12
 8003886:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d112      	bne.n	80038c6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ac:	e00b      	b.n	80038c6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	f043 0210 	orr.w	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f984 	bl	8003bd4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	220c      	movs	r2, #12
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x1d4>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80b3 	beq.w	8003a5a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80ad 	beq.w	8003a5a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fb30 	bl	8002f82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003922:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff faeb 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 800392e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a10      	ldr	r2, [pc, #64]	; (8003978 <HAL_ADC_IRQHandler+0x264>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_ADC_IRQHandler+0x23a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a11      	ldr	r2, [pc, #68]	; (8003984 <HAL_ADC_IRQHandler+0x270>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d002      	beq.n	800394a <HAL_ADC_IRQHandler+0x236>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	e003      	b.n	8003952 <HAL_ADC_IRQHandler+0x23e>
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <HAL_ADC_IRQHandler+0x274>)
 800394c:	e001      	b.n	8003952 <HAL_ADC_IRQHandler+0x23e>
 800394e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	4293      	cmp	r3, r2
 8003958:	d008      	beq.n	800396c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b06      	cmp	r3, #6
 8003964:	d002      	beq.n	800396c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b07      	cmp	r3, #7
 800396a:	d10f      	bne.n	800398c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	e01f      	b.n	80039b6 <HAL_ADC_IRQHandler+0x2a2>
 8003976:	bf00      	nop
 8003978:	50000100 	.word	0x50000100
 800397c:	50000300 	.word	0x50000300
 8003980:	50000700 	.word	0x50000700
 8003984:	50000500 	.word	0x50000500
 8003988:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a8b      	ldr	r2, [pc, #556]	; (8003bc0 <HAL_ADC_IRQHandler+0x4ac>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_ADC_IRQHandler+0x296>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_ADC_IRQHandler+0x4b0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d002      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x292>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	e003      	b.n	80039ae <HAL_ADC_IRQHandler+0x29a>
 80039a6:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <HAL_ADC_IRQHandler+0x4b4>)
 80039a8:	e001      	b.n	80039ae <HAL_ADC_IRQHandler+0x29a>
 80039aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039ae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d047      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <HAL_ADC_IRQHandler+0x2c2>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d03f      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d13a      	bne.n	8003a4c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d133      	bne.n	8003a4c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d12e      	bne.n	8003a4c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fbe4 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11a      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a0c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d112      	bne.n	8003a4c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a32:	e00b      	b.n	8003a4c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	f043 0210 	orr.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 f8a3 	bl	8004b98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2260      	movs	r2, #96	; 0x60
 8003a58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d011      	beq.n	8003a88 <HAL_ADC_IRQHandler+0x374>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f8be 	bl	8003bfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d012      	beq.n	8003ab8 <HAL_ADC_IRQHandler+0x3a4>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 f889 	bl	8004bc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d012      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x3d4>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f001 f87b 	bl	8004bd4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d043      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x466>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d03e      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003b04:	2301      	movs	r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	e021      	b.n	8003b4e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b18:	d004      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x410>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a28      	ldr	r2, [pc, #160]	; (8003bc0 <HAL_ADC_IRQHandler+0x4ac>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_IRQHandler+0x414>
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_ADC_IRQHandler+0x4b8>)
 8003b26:	e000      	b.n	8003b2a <HAL_ADC_IRQHandler+0x416>
 8003b28:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <HAL_ADC_IRQHandler+0x4bc>)
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fa9e 	bl	800306c <LL_ADC_GetMultiDMATransfer>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b36:	2301      	movs	r3, #1
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	e008      	b.n	8003b4e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10e      	bne.n	8003b72 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	f043 0202 	orr.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f84f 	bl	8003c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2210      	movs	r2, #16
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d018      	beq.n	8003bb6 <HAL_ADC_IRQHandler+0x4a2>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d013      	beq.n	8003bb6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9e:	f043 0208 	orr.w	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fffb 	bl	8004bac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003bb6:	bf00      	nop
 8003bb8:	3728      	adds	r7, #40	; 0x28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	50000100 	.word	0x50000100
 8003bc4:	50000500 	.word	0x50000500
 8003bc8:	50000400 	.word	0x50000400
 8003bcc:	50000300 	.word	0x50000300
 8003bd0:	50000700 	.word	0x50000700

08003bd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b0b6      	sub	sp, #216	; 0xd8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d102      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x24>
 8003c42:	2302      	movs	r3, #2
 8003c44:	f000 bc13 	b.w	800446e <HAL_ADC_ConfigChannel+0x84a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff faa0 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 83f3 	bne.w	8004448 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f7ff f95b 	bl	8002f2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fa8e 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 8003c7e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fa9a 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 8003c8c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 81d9 	bne.w	800404c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 81d4 	bne.w	800404c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cac:	d10f      	bne.n	8003cce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7ff f975 	bl	8002fa8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f909 	bl	8002ede <LL_ADC_SetSamplingTimeCommonConfig>
 8003ccc:	e00e      	b.n	8003cec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7ff f964 	bl	8002fa8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff f8f9 	bl	8002ede <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d022      	beq.n	8003d54 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6919      	ldr	r1, [r3, #16]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d1e:	f7ff f853 	bl	8002dc8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6919      	ldr	r1, [r3, #16]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f7ff f89f 	bl	8002e72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6919      	ldr	r1, [r3, #16]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	7f1b      	ldrb	r3, [r3, #28]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x126>
 8003d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d48:	e000      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x128>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f7ff f8ab 	bl	8002ea8 <LL_ADC_SetOffsetSaturation>
 8003d52:	e17b      	b.n	800404c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f858 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x15c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff f84d 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	f003 021f 	and.w	r2, r3, #31
 8003d7e:	e01e      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x19a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f842 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003dae:	2320      	movs	r3, #32
 8003db0:	e004      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x1b2>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	0e9b      	lsrs	r3, r3, #26
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	e018      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x1e4>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e004      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d106      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff f811 	bl	8002e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fff5 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x222>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe ffea 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	0e9b      	lsrs	r3, r3, #26
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	e01e      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x260>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe ffdf 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e5c:	fa93 f3a3 	rbit	r3, r3
 8003e60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e74:	2320      	movs	r3, #32
 8003e76:	e004      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x278>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e9b      	lsrs	r3, r3, #26
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	e018      	b.n	8003ece <HAL_ADC_ConfigChannel+0x2aa>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	e004      	b.n	8003ece <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d106      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe ffae 	bl	8002e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe ff92 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x2e8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2102      	movs	r1, #2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe ff87 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003f02:	4603      	mov	r3, r0
 8003f04:	0e9b      	lsrs	r3, r3, #26
 8003f06:	f003 021f 	and.w	r2, r3, #31
 8003f0a:	e01e      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x326>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe ff7c 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e004      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x33e>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	0e9b      	lsrs	r3, r3, #26
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	e016      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x36c>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f82:	2320      	movs	r3, #32
 8003f84:	e004      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe ff4d 	bl	8002e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe ff31 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x3aa>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2103      	movs	r1, #3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe ff26 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	0e9b      	lsrs	r3, r3, #26
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	e017      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x3da>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe ff1b 	bl	8002e10 <LL_ADC_GetOffsetChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e003      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x3f2>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	0e9b      	lsrs	r3, r3, #26
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	e011      	b.n	800403a <HAL_ADC_ConfigChannel+0x416>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004026:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800402e:	2320      	movs	r3, #32
 8004030:	e003      	b.n	800403a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800403a:	429a      	cmp	r2, r3
 800403c:	d106      	bne.n	800404c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	2103      	movs	r1, #3
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fef8 	bl	8002e3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f87b 	bl	800314c <LL_ADC_IsEnabled>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 813d 	bne.w	80042d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	461a      	mov	r2, r3
 800406c:	f7fe ffc8 	bl	8003000 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4aa2      	ldr	r2, [pc, #648]	; (8004300 <HAL_ADC_ConfigChannel+0x6dc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f040 812e 	bne.w	80042d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x480>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	0e9b      	lsrs	r3, r3, #26
 8004092:	3301      	adds	r3, #1
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2b09      	cmp	r3, #9
 800409a:	bf94      	ite	ls
 800409c:	2301      	movls	r3, #1
 800409e:	2300      	movhi	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e019      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x4b4>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80040b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e003      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80040c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	bf94      	ite	ls
 80040d2:	2301      	movls	r3, #1
 80040d4:	2300      	movhi	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d079      	beq.n	80041d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x4d4>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	3301      	adds	r3, #1
 80040f0:	069b      	lsls	r3, r3, #26
 80040f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f6:	e015      	b.n	8004124 <HAL_ADC_ConfigChannel+0x500>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800410a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004110:	2320      	movs	r3, #32
 8004112:	e003      	b.n	800411c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3301      	adds	r3, #1
 800411e:	069b      	lsls	r3, r3, #26
 8004120:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x520>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	3301      	adds	r3, #1
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	e017      	b.n	8004174 <HAL_ADC_ConfigChannel+0x550>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800415c:	2320      	movs	r3, #32
 800415e:	e003      	b.n	8004168 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3301      	adds	r3, #1
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f303 	lsl.w	r3, r1, r3
 8004174:	ea42 0103 	orr.w	r1, r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <HAL_ADC_ConfigChannel+0x576>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0e9b      	lsrs	r3, r3, #26
 800418a:	3301      	adds	r3, #1
 800418c:	f003 021f 	and.w	r2, r3, #31
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	051b      	lsls	r3, r3, #20
 8004198:	e018      	b.n	80041cc <HAL_ADC_ConfigChannel+0x5a8>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80041ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80041b2:	2320      	movs	r3, #32
 80041b4:	e003      	b.n	80041be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041cc:	430b      	orrs	r3, r1
 80041ce:	e07e      	b.n	80042ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x5c8>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	3301      	adds	r3, #1
 80041e4:	069b      	lsls	r3, r3, #26
 80041e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ea:	e015      	b.n	8004218 <HAL_ADC_ConfigChannel+0x5f4>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e003      	b.n	8004210 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	069b      	lsls	r3, r3, #26
 8004214:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x614>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	3301      	adds	r3, #1
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	e017      	b.n	8004268 <HAL_ADC_ConfigChannel+0x644>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	61fb      	str	r3, [r7, #28]
  return result;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004250:	2320      	movs	r3, #32
 8004252:	e003      	b.n	800425c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3301      	adds	r3, #1
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	ea42 0103 	orr.w	r1, r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x670>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	3301      	adds	r3, #1
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	3b1e      	subs	r3, #30
 800428c:	051b      	lsls	r3, r3, #20
 800428e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004292:	e01b      	b.n	80042cc <HAL_ADC_ConfigChannel+0x6a8>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	613b      	str	r3, [r7, #16]
  return result;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f003 021f 	and.w	r2, r3, #31
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	3b1e      	subs	r3, #30
 80042c6:	051b      	lsls	r3, r3, #20
 80042c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042cc:	430b      	orrs	r3, r1
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	6892      	ldr	r2, [r2, #8]
 80042d2:	4619      	mov	r1, r3
 80042d4:	f7fe fe68 	bl	8002fa8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_ADC_ConfigChannel+0x6e0>)
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80be 	beq.w	8004462 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ee:	d004      	beq.n	80042fa <HAL_ADC_ConfigChannel+0x6d6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_ADC_ConfigChannel+0x6e4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10a      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x6ec>
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_ADC_ConfigChannel+0x6e8>)
 80042fc:	e009      	b.n	8004312 <HAL_ADC_ConfigChannel+0x6ee>
 80042fe:	bf00      	nop
 8004300:	407f0000 	.word	0x407f0000
 8004304:	80080000 	.word	0x80080000
 8004308:	50000100 	.word	0x50000100
 800430c:	50000300 	.word	0x50000300
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_ADC_ConfigChannel+0x854>)
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fd4a 	bl	8002dac <LL_ADC_GetCommonPathInternalCh>
 8004318:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a56      	ldr	r2, [pc, #344]	; (800447c <HAL_ADC_ConfigChannel+0x858>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_ADC_ConfigChannel+0x70c>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a55      	ldr	r2, [pc, #340]	; (8004480 <HAL_ADC_ConfigChannel+0x85c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d13a      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d134      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004344:	d005      	beq.n	8004352 <HAL_ADC_ConfigChannel+0x72e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a4e      	ldr	r2, [pc, #312]	; (8004484 <HAL_ADC_ConfigChannel+0x860>)
 800434c:	4293      	cmp	r3, r2
 800434e:	f040 8085 	bne.w	800445c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435a:	d004      	beq.n	8004366 <HAL_ADC_ConfigChannel+0x742>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a49      	ldr	r2, [pc, #292]	; (8004488 <HAL_ADC_ConfigChannel+0x864>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_ADC_ConfigChannel+0x746>
 8004366:	4a49      	ldr	r2, [pc, #292]	; (800448c <HAL_ADC_ConfigChannel+0x868>)
 8004368:	e000      	b.n	800436c <HAL_ADC_ConfigChannel+0x748>
 800436a:	4a43      	ldr	r2, [pc, #268]	; (8004478 <HAL_ADC_ConfigChannel+0x854>)
 800436c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe fd05 	bl	8002d86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800437c:	4b44      	ldr	r3, [pc, #272]	; (8004490 <HAL_ADC_ConfigChannel+0x86c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	4a44      	ldr	r2, [pc, #272]	; (8004494 <HAL_ADC_ConfigChannel+0x870>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	099b      	lsrs	r3, r3, #6
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004396:	e002      	b.n	800439e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3b01      	subs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f9      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043a4:	e05a      	b.n	800445c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3b      	ldr	r2, [pc, #236]	; (8004498 <HAL_ADC_ConfigChannel+0x874>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d125      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x7d8>
 80043b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d11f      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a31      	ldr	r2, [pc, #196]	; (8004488 <HAL_ADC_ConfigChannel+0x864>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d104      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x7ac>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a34      	ldr	r2, [pc, #208]	; (800449c <HAL_ADC_ConfigChannel+0x878>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d047      	beq.n	8004460 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d8:	d004      	beq.n	80043e4 <HAL_ADC_ConfigChannel+0x7c0>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <HAL_ADC_ConfigChannel+0x864>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x7c4>
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_ADC_ConfigChannel+0x868>)
 80043e6:	e000      	b.n	80043ea <HAL_ADC_ConfigChannel+0x7c6>
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <HAL_ADC_ConfigChannel+0x854>)
 80043ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7fe fcc6 	bl	8002d86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043fa:	e031      	b.n	8004460 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <HAL_ADC_ConfigChannel+0x87c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d12d      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d127      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <HAL_ADC_ConfigChannel+0x864>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d022      	beq.n	8004462 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004424:	d004      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x80c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a17      	ldr	r2, [pc, #92]	; (8004488 <HAL_ADC_ConfigChannel+0x864>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x810>
 8004430:	4a16      	ldr	r2, [pc, #88]	; (800448c <HAL_ADC_ConfigChannel+0x868>)
 8004432:	e000      	b.n	8004436 <HAL_ADC_ConfigChannel+0x812>
 8004434:	4a10      	ldr	r2, [pc, #64]	; (8004478 <HAL_ADC_ConfigChannel+0x854>)
 8004436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800443a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800443e:	4619      	mov	r1, r3
 8004440:	4610      	mov	r0, r2
 8004442:	f7fe fca0 	bl	8002d86 <LL_ADC_SetCommonPathInternalCh>
 8004446:	e00c      	b.n	8004462 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800445a:	e002      	b.n	8004462 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800445c:	bf00      	nop
 800445e:	e000      	b.n	8004462 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004460:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800446a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800446e:	4618      	mov	r0, r3
 8004470:	37d8      	adds	r7, #216	; 0xd8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	50000700 	.word	0x50000700
 800447c:	c3210000 	.word	0xc3210000
 8004480:	90c00010 	.word	0x90c00010
 8004484:	50000600 	.word	0x50000600
 8004488:	50000100 	.word	0x50000100
 800448c:	50000300 	.word	0x50000300
 8004490:	20000000 	.word	0x20000000
 8004494:	053e2d63 	.word	0x053e2d63
 8004498:	c7520000 	.word	0xc7520000
 800449c:	50000500 	.word	0x50000500
 80044a0:	cb840000 	.word	0xcb840000

080044a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fe4b 	bl	800314c <LL_ADC_IsEnabled>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d14d      	bne.n	8004558 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	4b28      	ldr	r3, [pc, #160]	; (8004564 <ADC_Enable+0xc0>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	f043 0210 	orr.w	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e039      	b.n	800455a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fe1a 	bl	8003124 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044f0:	f7fe fc08 	bl	8002d04 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044f6:	e028      	b.n	800454a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fe25 	bl	800314c <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe fe09 	bl	8003124 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004512:	f7fe fbf7 	bl	8002d04 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d914      	bls.n	800454a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d00d      	beq.n	800454a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e007      	b.n	800455a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d1cf      	bne.n	80044f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	8000003f 	.word	0x8000003f

08004568 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800457e:	2b00      	cmp	r3, #0
 8004580:	d14b      	bne.n	800461a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d021      	beq.n	80045e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fcaf 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d032      	beq.n	8004612 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d12b      	bne.n	8004612 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11f      	bne.n	8004612 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80045de:	e018      	b.n	8004612 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d111      	bne.n	8004612 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fade 	bl	8003bd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004618:	e00e      	b.n	8004638 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff faf2 	bl	8003c10 <HAL_ADC_ErrorCallback>
}
 800462c:	e004      	b.n	8004638 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff faca 	bl	8003be8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff fac4 	bl	8003c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <LL_ADC_SetCommonPathInternalCh>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	609a      	str	r2, [r3, #8]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <LL_ADC_GetCommonPathInternalCh>:
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <LL_ADC_SetOffset>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3360      	adds	r3, #96	; 0x60
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b08      	ldr	r3, [pc, #32]	; (8004718 <LL_ADC_SetOffset+0x44>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	4313      	orrs	r3, r2
 8004704:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	601a      	str	r2, [r3, #0]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	03fff000 	.word	0x03fff000

0800471c <LL_ADC_GetOffsetChannel>:
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3360      	adds	r3, #96	; 0x60
 800472a:	461a      	mov	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_ADC_SetOffsetState>:
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3360      	adds	r3, #96	; 0x60
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	431a      	orrs	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <LL_ADC_SetOffsetSign>:
{
 800477e:	b480      	push	{r7}
 8004780:	b087      	sub	sp, #28
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3360      	adds	r3, #96	; 0x60
 800478e:	461a      	mov	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	601a      	str	r2, [r3, #0]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_ADC_SetOffsetSaturation>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3360      	adds	r3, #96	; 0x60
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	431a      	orrs	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	615a      	str	r2, [r3, #20]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <LL_ADC_INJ_GetTrigAuto>:
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_ADC_SetChannelSamplingTime>:
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3314      	adds	r3, #20
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	0e5b      	lsrs	r3, r3, #25
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	0d1b      	lsrs	r3, r3, #20
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2107      	movs	r1, #7
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	401a      	ands	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	431a      	orrs	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <LL_ADC_SetChannelSingleDiff>:
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10a      	bne.n	80048ae <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80048ac:	e00a      	b.n	80048c4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ba:	43db      	mvns	r3, r3
 80048bc:	401a      	ands	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	407f0000 	.word	0x407f0000

080048d4 <LL_ADC_GetMultimode>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 031f 	and.w	r3, r3, #31
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <LL_ADC_IsEnabled>:
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <LL_ADC_IsEnabled+0x18>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <LL_ADC_IsEnabled+0x1a>
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <LL_ADC_REG_IsConversionOngoing>:
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d101      	bne.n	800492e <LL_ADC_REG_IsConversionOngoing+0x18>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_ADC_INJ_StartConversion>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800494c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004950:	f043 0208 	orr.w	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_ADC_INJ_IsConversionOngoing>:
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b08      	cmp	r3, #8
 8004976:	d101      	bne.n	800497c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800499c:	d004      	beq.n	80049a8 <HAL_ADCEx_InjectedStart_IT+0x1c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a78      	ldr	r2, [pc, #480]	; (8004b84 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_ADCEx_InjectedStart_IT+0x20>
 80049a8:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 80049aa:	e000      	b.n	80049ae <HAL_ADCEx_InjectedStart_IT+0x22>
 80049ac:	4b77      	ldr	r3, [pc, #476]	; (8004b8c <HAL_ADCEx_InjectedStart_IT+0x200>)
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff ff90 	bl	80048d4 <LL_ADC_GetMultimode>
 80049b4:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ffd2 	bl	8004964 <LL_ADC_INJ_IsConversionOngoing>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0d8      	b.n	8004b7c <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d4:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049dc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e0c0      	b.n	8004b7c <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0b9      	b.n	8004b7c <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fd47 	bl	80044a4 <ADC_Enable>
 8004a16:	4603      	mov	r3, r0
 8004a18:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f040 80a8 	bne.w	8004b72 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d006      	beq.n	8004a3c <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	f023 0208 	bic.w	r2, r3, #8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60
 8004a3a:	e002      	b.n	8004a42 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a4a      	ldr	r2, [pc, #296]	; (8004b84 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a4a      	ldr	r2, [pc, #296]	; (8004b90 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d002      	beq.n	8004a70 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	e003      	b.n	8004a78 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004a70:	4b48      	ldr	r3, [pc, #288]	; (8004b94 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004a72:	e001      	b.n	8004a78 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004a74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d002      	beq.n	8004a86 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d105      	bne.n	8004a92 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2260      	movs	r2, #96	; 0x60
 8004a98:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004abe:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d110      	bne.n	8004aea <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0220 	bic.w	r2, r2, #32
 8004ad6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae6:	605a      	str	r2, [r3, #4]
          break;
 8004ae8:	e010      	b.n	8004b0c <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0220 	orr.w	r2, r2, #32
 8004b08:	605a      	str	r2, [r3, #4]
          break;
 8004b0a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_ADCEx_InjectedStart_IT+0x19e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d002      	beq.n	8004b26 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	e003      	b.n	8004b2e <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004b28:	e001      	b.n	8004b2e <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d008      	beq.n	8004b48 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d002      	beq.n	8004b48 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b07      	cmp	r3, #7
 8004b46:	d10d      	bne.n	8004b64 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fe5f 	bl	8004810 <LL_ADC_INJ_GetTrigAuto>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d110      	bne.n	8004b7a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff feed 	bl	800493c <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004b62:	e00a      	b.n	8004b7a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b70:	e003      	b.n	8004b7a <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	50000100 	.word	0x50000100
 8004b88:	50000300 	.word	0x50000300
 8004b8c:	50000700 	.word	0x50000700
 8004b90:	50000500 	.word	0x50000500
 8004b94:	50000400 	.word	0x50000400

08004b98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b0b6      	sub	sp, #216	; 0xd8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d102      	bne.n	8004c26 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f000 bcfd 	b.w	8005620 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d130      	bne.n	8004ca0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	d179      	bne.n	8004d3a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d010      	beq.n	8004c70 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	0e9b      	lsrs	r3, r3, #26
 8004c54:	025b      	lsls	r3, r3, #9
 8004c56:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004c62:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c6e:	e007      	b.n	8004c80 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	0e9b      	lsrs	r3, r3, #26
 8004c76:	025b      	lsls	r3, r3, #9
 8004c78:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c86:	4b84      	ldr	r3, [pc, #528]	; (8004e98 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004c92:	430b      	orrs	r3, r1
 8004c94:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004c9e:	e04c      	b.n	8004d3a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11d      	bne.n	8004ce4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00d      	beq.n	8004cda <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004ccc:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cd8:	e004      	b.n	8004ce4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0e9b      	lsrs	r3, r3, #26
 8004cea:	f003 021f 	and.w	r2, r3, #31
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d08:	1e5a      	subs	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d2a:	4b5b      	ldr	r3, [pc, #364]	; (8004e98 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	430b      	orrs	r3, r1
 8004d38:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fe10 	bl	8004964 <LL_ADC_INJ_IsConversionOngoing>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d124      	bne.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d112      	bne.n	8004d7a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d64:	055a      	lsls	r2, r3, #21
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d6c:	051b      	lsls	r3, r3, #20
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e00c      	b.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d8a:	055a      	lsls	r2, r3, #21
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fdbc 	bl	8004916 <LL_ADC_REG_IsConversionOngoing>
 8004d9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fddc 	bl	8004964 <LL_ADC_INJ_IsConversionOngoing>
 8004dac:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 822e 	bne.w	8005216 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 8229 	bne.w	8005216 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d116      	bne.n	8004e02 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d108      	bne.n	8004df0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004dec:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004dee:	e01f      	b.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004dfe:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004e00:	e016      	b.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d109      	bne.n	8004e20 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004e1e:	e007      	b.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004e2e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d110      	bne.n	8004e5c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0202 	orr.w	r2, r2, #2
 8004e58:	611a      	str	r2, [r3, #16]
 8004e5a:	e007      	b.n	8004e6c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0202 	bic.w	r2, r2, #2
 8004e6a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e74:	d112      	bne.n	8004e9c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7ff fcd3 	bl	800482c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fcab 	bl	80047ea <LL_ADC_SetSamplingTimeCommonConfig>
 8004e94:	e011      	b.n	8004eba <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004e96:	bf00      	nop
 8004e98:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f7ff fcbf 	bl	800482c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fc98 	bl	80047ea <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	08db      	lsrs	r3, r3, #3
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d022      	beq.n	8004f22 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6919      	ldr	r1, [r3, #16]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eec:	f7ff fbf2 	bl	80046d4 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6919      	ldr	r1, [r3, #16]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f7ff fc3e 	bl	800477e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d102      	bne.n	8004f18 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f16:	e000      	b.n	8004f1a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f7ff fc4a 	bl	80047b4 <LL_ADC_SetOffsetSaturation>
 8004f20:	e179      	b.n	8005216 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fbf7 	bl	800471c <LL_ADC_GetOffsetChannel>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fbec 	bl	800471c <LL_ADC_GetOffsetChannel>
 8004f44:	4603      	mov	r3, r0
 8004f46:	0e9b      	lsrs	r3, r3, #26
 8004f48:	f003 021f 	and.w	r2, r3, #31
 8004f4c:	e01e      	b.n	8004f8c <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fbe1 	bl	800471c <LL_ADC_GetOffsetChannel>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	e004      	b.n	8004f8a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004f80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f84:	fab3 f383 	clz	r3, r3
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	0e9b      	lsrs	r3, r3, #26
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	e018      	b.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004fb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004fc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004fc8:	2320      	movs	r3, #32
 8004fca:	e004      	b.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d106      	bne.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fbb0 	bl	8004748 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2101      	movs	r1, #1
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fb94 	bl	800471c <LL_ADC_GetOffsetChannel>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2101      	movs	r1, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fb89 	bl	800471c <LL_ADC_GetOffsetChannel>
 800500a:	4603      	mov	r3, r0
 800500c:	0e9b      	lsrs	r3, r3, #26
 800500e:	f003 021f 	and.w	r2, r3, #31
 8005012:	e01e      	b.n	8005052 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fb7e 	bl	800471c <LL_ADC_GetOffsetChannel>
 8005020:	4603      	mov	r3, r0
 8005022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800502a:	fa93 f3a3 	rbit	r3, r3
 800502e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005032:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800503a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8005042:	2320      	movs	r3, #32
 8005044:	e004      	b.n	8005050 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8005046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	0e9b      	lsrs	r3, r3, #26
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	e018      	b.n	800509c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005072:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005076:	fa93 f3a3 	rbit	r3, r3
 800507a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800507e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005082:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800508e:	2320      	movs	r3, #32
 8005090:	e004      	b.n	800509c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8005092:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800509c:	429a      	cmp	r2, r3
 800509e:	d106      	bne.n	80050ae <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2101      	movs	r1, #1
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fb4d 	bl	8004748 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2102      	movs	r1, #2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fb31 	bl	800471c <LL_ADC_GetOffsetChannel>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fb26 	bl	800471c <LL_ADC_GetOffsetChannel>
 80050d0:	4603      	mov	r3, r0
 80050d2:	0e9b      	lsrs	r3, r3, #26
 80050d4:	f003 021f 	and.w	r2, r3, #31
 80050d8:	e01e      	b.n	8005118 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2102      	movs	r1, #2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff fb1b 	bl	800471c <LL_ADC_GetOffsetChannel>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f0:	fa93 f3a3 	rbit	r3, r3
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80050f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8005108:	2320      	movs	r3, #32
 800510a:	e004      	b.n	8005116 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800510c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005110:	fab3 f383 	clz	r3, r3
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0e9b      	lsrs	r3, r3, #26
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	e014      	b.n	800515a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005138:	fa93 f3a3 	rbit	r3, r3
 800513c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800513e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800514c:	2320      	movs	r3, #32
 800514e:	e004      	b.n	800515a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005154:	fab3 f383 	clz	r3, r3
 8005158:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800515a:	429a      	cmp	r2, r3
 800515c:	d106      	bne.n	800516c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	2102      	movs	r1, #2
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff faee 	bl	8004748 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2103      	movs	r1, #3
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fad2 	bl	800471c <LL_ADC_GetOffsetChannel>
 8005178:	4603      	mov	r3, r0
 800517a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2103      	movs	r1, #3
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fac7 	bl	800471c <LL_ADC_GetOffsetChannel>
 800518e:	4603      	mov	r3, r0
 8005190:	0e9b      	lsrs	r3, r3, #26
 8005192:	f003 021f 	and.w	r2, r3, #31
 8005196:	e017      	b.n	80051c8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2103      	movs	r1, #3
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fabc 	bl	800471c <LL_ADC_GetOffsetChannel>
 80051a4:	4603      	mov	r3, r0
 80051a6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051aa:	fa93 f3a3 	rbit	r3, r3
 80051ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80051b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80051ba:	2320      	movs	r3, #32
 80051bc:	e003      	b.n	80051c6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80051be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c0:	fab3 f383 	clz	r3, r3
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	0e9b      	lsrs	r3, r3, #26
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	e011      	b.n	8005204 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e8:	fa93 f3a3 	rbit	r3, r3
 80051ec:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80051ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051f0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80051f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80051f8:	2320      	movs	r3, #32
 80051fa:	e003      	b.n	8005204 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80051fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005204:	429a      	cmp	r2, r3
 8005206:	d106      	bne.n	8005216 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2200      	movs	r2, #0
 800520e:	2103      	movs	r1, #3
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fa99 	bl	8004748 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fb68 	bl	80048f0 <LL_ADC_IsEnabled>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 813d 	bne.w	80054a2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	461a      	mov	r2, r3
 8005236:	f7ff fb25 	bl	8004884 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4aa2      	ldr	r2, [pc, #648]	; (80054c8 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	f040 812e 	bne.w	80054a2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	0e9b      	lsrs	r3, r3, #26
 800525c:	3301      	adds	r3, #1
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2b09      	cmp	r3, #9
 8005264:	bf94      	ite	ls
 8005266:	2301      	movls	r3, #1
 8005268:	2300      	movhi	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e019      	b.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800527c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005286:	2320      	movs	r3, #32
 8005288:	e003      	b.n	8005292 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800528a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	3301      	adds	r3, #1
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	2b09      	cmp	r3, #9
 800529a:	bf94      	ite	ls
 800529c:	2301      	movls	r3, #1
 800529e:	2300      	movhi	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d079      	beq.n	800539a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d107      	bne.n	80052c2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	0e9b      	lsrs	r3, r3, #26
 80052b8:	3301      	adds	r3, #1
 80052ba:	069b      	lsls	r3, r3, #26
 80052bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052c0:	e015      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	fa93 f3a3 	rbit	r3, r3
 80052ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80052d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80052d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80052da:	2320      	movs	r3, #32
 80052dc:	e003      	b.n	80052e6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	3301      	adds	r3, #1
 80052e8:	069b      	lsls	r3, r3, #26
 80052ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_ADCEx_InjectedConfigChannel+0x712>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	0e9b      	lsrs	r3, r3, #26
 8005300:	3301      	adds	r3, #1
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	2101      	movs	r1, #1
 8005308:	fa01 f303 	lsl.w	r3, r1, r3
 800530c:	e017      	b.n	800533e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005326:	2320      	movs	r3, #32
 8005328:	e003      	b.n	8005332 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800532a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532c:	fab3 f383 	clz	r3, r3
 8005330:	b2db      	uxtb	r3, r3
 8005332:	3301      	adds	r3, #1
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2101      	movs	r1, #1
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	ea42 0103 	orr.w	r1, r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0e9b      	lsrs	r3, r3, #26
 8005354:	3301      	adds	r3, #1
 8005356:	f003 021f 	and.w	r2, r3, #31
 800535a:	4613      	mov	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4413      	add	r3, r2
 8005360:	051b      	lsls	r3, r3, #20
 8005362:	e018      	b.n	8005396 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	fa93 f3a3 	rbit	r3, r3
 8005370:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800537c:	2320      	movs	r3, #32
 800537e:	e003      	b.n	8005388 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	3301      	adds	r3, #1
 800538a:	f003 021f 	and.w	r2, r3, #31
 800538e:	4613      	mov	r3, r2
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4413      	add	r3, r2
 8005394:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005396:	430b      	orrs	r3, r1
 8005398:	e07e      	b.n	8005498 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	0e9b      	lsrs	r3, r3, #26
 80053ac:	3301      	adds	r3, #1
 80053ae:	069b      	lsls	r3, r3, #26
 80053b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053b4:	e015      	b.n	80053e2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	fa93 f3a3 	rbit	r3, r3
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80053ce:	2320      	movs	r3, #32
 80053d0:	e003      	b.n	80053da <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	fab3 f383 	clz	r3, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	3301      	adds	r3, #1
 80053dc:	069b      	lsls	r3, r3, #26
 80053de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	0e9b      	lsrs	r3, r3, #26
 80053f4:	3301      	adds	r3, #1
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005400:	e017      	b.n	8005432 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	fa93 f3a3 	rbit	r3, r3
 800540e:	61bb      	str	r3, [r7, #24]
  return result;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800541a:	2320      	movs	r3, #32
 800541c:	e003      	b.n	8005426 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	fab3 f383 	clz	r3, r3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	3301      	adds	r3, #1
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	2101      	movs	r1, #1
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	ea42 0103 	orr.w	r1, r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10d      	bne.n	800545e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	0e9b      	lsrs	r3, r3, #26
 8005448:	3301      	adds	r3, #1
 800544a:	f003 021f 	and.w	r2, r3, #31
 800544e:	4613      	mov	r3, r2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	4413      	add	r3, r2
 8005454:	3b1e      	subs	r3, #30
 8005456:	051b      	lsls	r3, r3, #20
 8005458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800545c:	e01b      	b.n	8005496 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	fa93 f3a3 	rbit	r3, r3
 800546a:	60fb      	str	r3, [r7, #12]
  return result;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8005476:	2320      	movs	r3, #32
 8005478:	e003      	b.n	8005482 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	fab3 f383 	clz	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	3301      	adds	r3, #1
 8005484:	f003 021f 	and.w	r2, r3, #31
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	3b1e      	subs	r3, #30
 8005490:	051b      	lsls	r3, r3, #20
 8005492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005496:	430b      	orrs	r3, r1
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	6892      	ldr	r2, [r2, #8]
 800549c:	4619      	mov	r1, r3
 800549e:	f7ff f9c5 	bl	800482c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80b2 	beq.w	8005614 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b8:	d004      	beq.n	80054c4 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d109      	bne.n	80054d8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80054c6:	e008      	b.n	80054da <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80054c8:	407f0000 	.word	0x407f0000
 80054cc:	80080000 	.word	0x80080000
 80054d0:	50000100 	.word	0x50000100
 80054d4:	50000300 	.word	0x50000300
 80054d8:	4b53      	ldr	r3, [pc, #332]	; (8005628 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff f8eb 	bl	80046b6 <LL_ADC_GetCommonPathInternalCh>
 80054e0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a50      	ldr	r2, [pc, #320]	; (800562c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a4f      	ldr	r2, [pc, #316]	; (8005630 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d139      	bne.n	800556c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d133      	bne.n	800556c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800550c:	d004      	beq.n	8005518 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a48      	ldr	r2, [pc, #288]	; (8005634 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d17a      	bne.n	800560e <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005520:	d004      	beq.n	800552c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a44      	ldr	r2, [pc, #272]	; (8005638 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d101      	bne.n	8005530 <HAL_ADCEx_InjectedConfigChannel+0x934>
 800552c:	4a43      	ldr	r2, [pc, #268]	; (800563c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800552e:	e000      	b.n	8005532 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8005530:	4a3d      	ldr	r2, [pc, #244]	; (8005628 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f7ff f8a7 	bl	8004690 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005542:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	4a3e      	ldr	r2, [pc, #248]	; (8005644 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	099a      	lsrs	r2, r3, #6
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	3318      	adds	r3, #24
 800555a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800555c:	e002      	b.n	8005564 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3b01      	subs	r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f9      	bne.n	800555e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800556a:	e050      	b.n	800560e <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a35      	ldr	r2, [pc, #212]	; (8005648 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d125      	bne.n	80055c2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005576:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800557a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11f      	bne.n	80055c2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2c      	ldr	r2, [pc, #176]	; (8005638 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d104      	bne.n	8005596 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2e      	ldr	r2, [pc, #184]	; (800564c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03d      	beq.n	8005612 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800559e:	d004      	beq.n	80055aa <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80055aa:	4a24      	ldr	r2, [pc, #144]	; (800563c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80055ac:	e000      	b.n	80055b0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80055b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7ff f868 	bl	8004690 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055c0:	e027      	b.n	8005612 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a22      	ldr	r2, [pc, #136]	; (8005650 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d123      	bne.n	8005614 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11d      	bne.n	8005614 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a16      	ldr	r2, [pc, #88]	; (8005638 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d018      	beq.n	8005614 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ea:	d004      	beq.n	80055f6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a11      	ldr	r2, [pc, #68]	; (8005638 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d101      	bne.n	80055fa <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80055f6:	4a11      	ldr	r2, [pc, #68]	; (800563c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80055f8:	e000      	b.n	80055fc <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80055fa:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80055fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7ff f842 	bl	8004690 <LL_ADC_SetCommonPathInternalCh>
 800560c:	e002      	b.n	8005614 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800560e:	bf00      	nop
 8005610:	e000      	b.n	8005614 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005612:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800561c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005620:	4618      	mov	r0, r3
 8005622:	37d8      	adds	r7, #216	; 0xd8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	50000700 	.word	0x50000700
 800562c:	c3210000 	.word	0xc3210000
 8005630:	90c00010 	.word	0x90c00010
 8005634:	50000600 	.word	0x50000600
 8005638:	50000100 	.word	0x50000100
 800563c:	50000300 	.word	0x50000300
 8005640:	20000000 	.word	0x20000000
 8005644:	053e2d63 	.word	0x053e2d63
 8005648:	c7520000 	.word	0xc7520000
 800564c:	50000500 	.word	0x50000500
 8005650:	cb840000 	.word	0xcb840000

08005654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005654:	b590      	push	{r4, r7, lr}
 8005656:	b0a1      	sub	sp, #132	; 0x84
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800566e:	2302      	movs	r3, #2
 8005670:	e0e7      	b.n	8005842 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800567a:	2300      	movs	r3, #0
 800567c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800567e:	2300      	movs	r3, #0
 8005680:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800568a:	d102      	bne.n	8005692 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800568c:	4b6f      	ldr	r3, [pc, #444]	; (800584c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800568e:	60bb      	str	r3, [r7, #8]
 8005690:	e009      	b.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6e      	ldr	r2, [pc, #440]	; (8005850 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d102      	bne.n	80056a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800569c:	4b6d      	ldr	r3, [pc, #436]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	e001      	b.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0be      	b.n	8005842 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff f925 	bl	8004916 <LL_ADC_REG_IsConversionOngoing>
 80056cc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f91f 	bl	8004916 <LL_ADC_REG_IsConversionOngoing>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 80a0 	bne.w	8005820 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80056e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 809c 	bne.w	8005820 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056f0:	d004      	beq.n	80056fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a55      	ldr	r2, [pc, #340]	; (800584c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d101      	bne.n	8005700 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80056fc:	4b56      	ldr	r3, [pc, #344]	; (8005858 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80056fe:	e000      	b.n	8005702 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005700:	4b56      	ldr	r3, [pc, #344]	; (800585c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005702:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d04b      	beq.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800570c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800571e:	035b      	lsls	r3, r3, #13
 8005720:	430b      	orrs	r3, r1
 8005722:	431a      	orrs	r2, r3
 8005724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005726:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005730:	d004      	beq.n	800573c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a45      	ldr	r2, [pc, #276]	; (800584c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d10f      	bne.n	800575c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800573c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005740:	f7ff f8d6 	bl	80048f0 <LL_ADC_IsEnabled>
 8005744:	4604      	mov	r4, r0
 8005746:	4841      	ldr	r0, [pc, #260]	; (800584c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005748:	f7ff f8d2 	bl	80048f0 <LL_ADC_IsEnabled>
 800574c:	4603      	mov	r3, r0
 800574e:	4323      	orrs	r3, r4
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e012      	b.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800575c:	483c      	ldr	r0, [pc, #240]	; (8005850 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800575e:	f7ff f8c7 	bl	80048f0 <LL_ADC_IsEnabled>
 8005762:	4604      	mov	r4, r0
 8005764:	483b      	ldr	r0, [pc, #236]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005766:	f7ff f8c3 	bl	80048f0 <LL_ADC_IsEnabled>
 800576a:	4603      	mov	r3, r0
 800576c:	431c      	orrs	r4, r3
 800576e:	483c      	ldr	r0, [pc, #240]	; (8005860 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005770:	f7ff f8be 	bl	80048f0 <LL_ADC_IsEnabled>
 8005774:	4603      	mov	r3, r0
 8005776:	4323      	orrs	r3, r4
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d056      	beq.n	8005834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800578e:	f023 030f 	bic.w	r3, r3, #15
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	6811      	ldr	r1, [r2, #0]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	6892      	ldr	r2, [r2, #8]
 800579a:	430a      	orrs	r2, r1
 800579c:	431a      	orrs	r2, r3
 800579e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057a2:	e047      	b.n	8005834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80057a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057b8:	d004      	beq.n	80057c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a23      	ldr	r2, [pc, #140]	; (800584c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10f      	bne.n	80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80057c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80057c8:	f7ff f892 	bl	80048f0 <LL_ADC_IsEnabled>
 80057cc:	4604      	mov	r4, r0
 80057ce:	481f      	ldr	r0, [pc, #124]	; (800584c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057d0:	f7ff f88e 	bl	80048f0 <LL_ADC_IsEnabled>
 80057d4:	4603      	mov	r3, r0
 80057d6:	4323      	orrs	r3, r4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e012      	b.n	800580a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80057e4:	481a      	ldr	r0, [pc, #104]	; (8005850 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80057e6:	f7ff f883 	bl	80048f0 <LL_ADC_IsEnabled>
 80057ea:	4604      	mov	r4, r0
 80057ec:	4819      	ldr	r0, [pc, #100]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80057ee:	f7ff f87f 	bl	80048f0 <LL_ADC_IsEnabled>
 80057f2:	4603      	mov	r3, r0
 80057f4:	431c      	orrs	r4, r3
 80057f6:	481a      	ldr	r0, [pc, #104]	; (8005860 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80057f8:	f7ff f87a 	bl	80048f0 <LL_ADC_IsEnabled>
 80057fc:	4603      	mov	r3, r0
 80057fe:	4323      	orrs	r3, r4
 8005800:	2b00      	cmp	r3, #0
 8005802:	bf0c      	ite	eq
 8005804:	2301      	moveq	r3, #1
 8005806:	2300      	movne	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d012      	beq.n	8005834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800580e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005816:	f023 030f 	bic.w	r3, r3, #15
 800581a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800581c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800581e:	e009      	b.n	8005834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005832:	e000      	b.n	8005836 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005834:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800583e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005842:	4618      	mov	r0, r3
 8005844:	3784      	adds	r7, #132	; 0x84
 8005846:	46bd      	mov	sp, r7
 8005848:	bd90      	pop	{r4, r7, pc}
 800584a:	bf00      	nop
 800584c:	50000100 	.word	0x50000100
 8005850:	50000400 	.word	0x50000400
 8005854:	50000500 	.word	0x50000500
 8005858:	50000300 	.word	0x50000300
 800585c:	50000700 	.word	0x50000700
 8005860:	50000600 	.word	0x50000600

08005864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005880:	4013      	ands	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800588c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005896:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	60d3      	str	r3, [r2, #12]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	e000ed00 	.word	0xe000ed00

080058ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058b0:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <__NVIC_GetPriorityGrouping+0x18>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	0a1b      	lsrs	r3, r3, #8
 80058b6:	f003 0307 	and.w	r3, r3, #7
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	e000ed00 	.word	0xe000ed00

080058c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db0b      	blt.n	80058f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	f003 021f 	and.w	r2, r3, #31
 80058e0:	4907      	ldr	r1, [pc, #28]	; (8005900 <__NVIC_EnableIRQ+0x38>)
 80058e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	2001      	movs	r0, #1
 80058ea:	fa00 f202 	lsl.w	r2, r0, r2
 80058ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	e000e100 	.word	0xe000e100

08005904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	6039      	str	r1, [r7, #0]
 800590e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005914:	2b00      	cmp	r3, #0
 8005916:	db0a      	blt.n	800592e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	490c      	ldr	r1, [pc, #48]	; (8005950 <__NVIC_SetPriority+0x4c>)
 800591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005922:	0112      	lsls	r2, r2, #4
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	440b      	add	r3, r1
 8005928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800592c:	e00a      	b.n	8005944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	4908      	ldr	r1, [pc, #32]	; (8005954 <__NVIC_SetPriority+0x50>)
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	3b04      	subs	r3, #4
 800593c:	0112      	lsls	r2, r2, #4
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	440b      	add	r3, r1
 8005942:	761a      	strb	r2, [r3, #24]
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	e000e100 	.word	0xe000e100
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005958:	b480      	push	{r7}
 800595a:	b089      	sub	sp, #36	; 0x24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f1c3 0307 	rsb	r3, r3, #7
 8005972:	2b04      	cmp	r3, #4
 8005974:	bf28      	it	cs
 8005976:	2304      	movcs	r3, #4
 8005978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3304      	adds	r3, #4
 800597e:	2b06      	cmp	r3, #6
 8005980:	d902      	bls.n	8005988 <NVIC_EncodePriority+0x30>
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3b03      	subs	r3, #3
 8005986:	e000      	b.n	800598a <NVIC_EncodePriority+0x32>
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	43da      	mvns	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	401a      	ands	r2, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059a0:	f04f 31ff 	mov.w	r1, #4294967295
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	43d9      	mvns	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059b0:	4313      	orrs	r3, r2
         );
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3724      	adds	r7, #36	; 0x24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059d0:	d301      	bcc.n	80059d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059d2:	2301      	movs	r3, #1
 80059d4:	e00f      	b.n	80059f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059d6:	4a0a      	ldr	r2, [pc, #40]	; (8005a00 <SysTick_Config+0x40>)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3b01      	subs	r3, #1
 80059dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059de:	210f      	movs	r1, #15
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	f7ff ff8e 	bl	8005904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <SysTick_Config+0x40>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <SysTick_Config+0x40>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010

08005a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff29 	bl	8005864 <__NVIC_SetPriorityGrouping>
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	4603      	mov	r3, r0
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a28:	f7ff ff40 	bl	80058ac <__NVIC_GetPriorityGrouping>
 8005a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	6978      	ldr	r0, [r7, #20]
 8005a34:	f7ff ff90 	bl	8005958 <NVIC_EncodePriority>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff ff5f 	bl	8005904 <__NVIC_SetPriority>
}
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	4603      	mov	r3, r0
 8005a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff ff33 	bl	80058c8 <__NVIC_EnableIRQ>
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff ffa4 	bl	80059c0 <SysTick_Config>
 8005a78:	4603      	mov	r3, r0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e014      	b.n	8005abe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	791b      	ldrb	r3, [r3, #4]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fc fd45 	bl	8002534 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	795b      	ldrb	r3, [r3, #5]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_DAC_Start+0x16>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e043      	b.n	8005b64 <HAL_DAC_Start+0x9e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6819      	ldr	r1, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2201      	movs	r2, #1
 8005af6:	409a      	lsls	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7fd f90b 	bl	8002d1c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10f      	bne.n	8005b2c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d11d      	bne.n	8005b56 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	e014      	b.n	8005b56 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d107      	bne.n	8005b56 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0202 	orr.w	r2, r2, #2
 8005b54:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	3308      	adds	r3, #8
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	e004      	b.n	8005ba6 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3314      	adds	r3, #20
 8005ba4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	; 0x28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	795b      	ldrb	r3, [r3, #5]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_DAC_ConfigChannel+0x18>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e192      	b.n	8005efa <HAL_DAC_ConfigChannel+0x33e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d174      	bne.n	8005cd2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005be8:	f7fd f88c 	bl	8002d04 <HAL_GetTick>
 8005bec:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d134      	bne.n	8005c5e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005bf4:	e011      	b.n	8005c1a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005bf6:	f7fd f885 	bl	8002d04 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d90a      	bls.n	8005c1a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f043 0208 	orr.w	r2, r3, #8
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2203      	movs	r2, #3
 8005c14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e16f      	b.n	8005efa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e6      	bne.n	8005bf6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005c28:	2001      	movs	r0, #1
 8005c2a:	f7fd f877 	bl	8002d1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
 8005c38:	e01e      	b.n	8005c78 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c3a:	f7fd f863 	bl	8002d04 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d90a      	bls.n	8005c5e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f043 0208 	orr.w	r2, r3, #8
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2203      	movs	r2, #3
 8005c58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e14d      	b.n	8005efa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dbe8      	blt.n	8005c3a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005c68:	2001      	movs	r0, #1
 8005c6a:	f7fd f857 	bl	8002d1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c76:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005c88:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	ea02 0103 	and.w	r1, r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	21ff      	movs	r1, #255	; 0xff
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	ea02 0103 	and.w	r1, r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d11d      	bne.n	8005d16 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	221f      	movs	r2, #31
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2207      	movs	r2, #7
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	4013      	ands	r3, r2
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d102      	bne.n	8005d40 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	e00f      	b.n	8005d60 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d102      	bne.n	8005d4e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	623b      	str	r3, [r7, #32]
 8005d4c:	e008      	b.n	8005d60 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005d56:	2301      	movs	r3, #1
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	e001      	b.n	8005d60 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	6a3a      	ldr	r2, [r7, #32]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d82:	4013      	ands	r3, r2
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <HAL_DAC_ConfigChannel+0x1d8>
 8005d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d92:	e000      	b.n	8005d96 <HAL_DAC_ConfigChannel+0x1da>
 8005d94:	2300      	movs	r3, #0
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dae:	4013      	ands	r3, r2
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	795b      	ldrb	r3, [r3, #5]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d102      	bne.n	8005dc0 <HAL_DAC_ConfigChannel+0x204>
 8005dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dbe:	e000      	b.n	8005dc2 <HAL_DAC_ConfigChannel+0x206>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d114      	bne.n	8005e02 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005dd8:	f001 fa64 	bl	80072a4 <HAL_RCC_GetHCLKFreq>
 8005ddc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	4a48      	ldr	r2, [pc, #288]	; (8005f04 <HAL_DAC_ConfigChannel+0x348>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d904      	bls.n	8005df0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	e00f      	b.n	8005e10 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	4a45      	ldr	r2, [pc, #276]	; (8005f08 <HAL_DAC_ConfigChannel+0x34c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d90a      	bls.n	8005e0e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005e00:	e006      	b.n	8005e10 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0c:	e000      	b.n	8005e10 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005e0e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6819      	ldr	r1, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	400a      	ands	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e62:	4013      	ands	r3, r2
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	22c0      	movs	r2, #192	; 0xc0
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	f003 030f 	and.w	r3, r3, #15
 8005eac:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	ea02 0103 	and.w	r1, r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3728      	adds	r7, #40	; 0x28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	09896800 	.word	0x09896800
 8005f08:	04c4b400 	.word	0x04c4b400

08005f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e08d      	b.n	800603a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	4b47      	ldr	r3, [pc, #284]	; (8006044 <HAL_DMA_Init+0x138>)
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d80f      	bhi.n	8005f4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4b45      	ldr	r3, [pc, #276]	; (8006048 <HAL_DMA_Init+0x13c>)
 8005f32:	4413      	add	r3, r2
 8005f34:	4a45      	ldr	r2, [pc, #276]	; (800604c <HAL_DMA_Init+0x140>)
 8005f36:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	009a      	lsls	r2, r3, #2
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a42      	ldr	r2, [pc, #264]	; (8006050 <HAL_DMA_Init+0x144>)
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
 8005f48:	e00e      	b.n	8005f68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b40      	ldr	r3, [pc, #256]	; (8006054 <HAL_DMA_Init+0x148>)
 8005f52:	4413      	add	r3, r2
 8005f54:	4a3d      	ldr	r2, [pc, #244]	; (800604c <HAL_DMA_Init+0x140>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	009a      	lsls	r2, r3, #2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a3c      	ldr	r2, [pc, #240]	; (8006058 <HAL_DMA_Init+0x14c>)
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f9b6 	bl	800632c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc8:	d102      	bne.n	8005fd0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005fe4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_DMA_Init+0x104>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d80c      	bhi.n	8006010 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9d6 	bl	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e008      	b.n	8006022 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40020407 	.word	0x40020407
 8006048:	bffdfff8 	.word	0xbffdfff8
 800604c:	cccccccd 	.word	0xcccccccd
 8006050:	40020000 	.word	0x40020000
 8006054:	bffdfbf8 	.word	0xbffdfbf8
 8006058:	40020400 	.word	0x40020400

0800605c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_DMA_Start_IT+0x20>
 8006078:	2302      	movs	r3, #2
 800607a:	e066      	b.n	800614a <HAL_DMA_Start_IT+0xee>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	d155      	bne.n	800613c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f8fb 	bl	80062b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d008      	beq.n	80060d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 020e 	orr.w	r2, r2, #14
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e00f      	b.n	80060f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0204 	bic.w	r2, r2, #4
 80060e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 020a 	orr.w	r2, r2, #10
 80060f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006110:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006128:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0201 	orr.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e005      	b.n	8006148 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006144:	2302      	movs	r3, #2
 8006146:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2204      	movs	r2, #4
 8006174:	409a      	lsls	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d026      	beq.n	80061cc <HAL_DMA_IRQHandler+0x7a>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d021      	beq.n	80061cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d107      	bne.n	80061a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0204 	bic.w	r2, r2, #4
 80061a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	f003 021f 	and.w	r2, r3, #31
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2104      	movs	r1, #4
 80061b4:	fa01 f202 	lsl.w	r2, r1, r2
 80061b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d071      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80061ca:	e06c      	b.n	80062a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2202      	movs	r2, #2
 80061d6:	409a      	lsls	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d02e      	beq.n	800623e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d029      	beq.n	800623e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 020a 	bic.w	r2, r2, #10
 8006206:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006214:	f003 021f 	and.w	r2, r3, #31
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	2102      	movs	r1, #2
 800621e:	fa01 f202 	lsl.w	r2, r1, r2
 8006222:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d038      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800623c:	e033      	b.n	80062a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2208      	movs	r2, #8
 8006248:	409a      	lsls	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4013      	ands	r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02a      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d025      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 020e 	bic.w	r2, r2, #14
 800626a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006270:	f003 021f 	and.w	r2, r3, #31
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	2101      	movs	r1, #1
 800627a:	fa01 f202 	lsl.w	r2, r1, r2
 800627e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
}
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80062c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80062d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f003 021f 	and.w	r2, r3, #31
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	2101      	movs	r1, #1
 80062e8:	fa01 f202 	lsl.w	r2, r1, r2
 80062ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d108      	bne.n	8006310 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800630e:	e007      	b.n	8006320 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	60da      	str	r2, [r3, #12]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d802      	bhi.n	8006346 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006340:	4b15      	ldr	r3, [pc, #84]	; (8006398 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e001      	b.n	800634a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006348:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	3b08      	subs	r3, #8
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006364:	089b      	lsrs	r3, r3, #2
 8006366:	009a      	lsls	r2, r3, #2
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	461a      	mov	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a0b      	ldr	r2, [pc, #44]	; (80063a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006376:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2201      	movs	r2, #1
 8006380:	409a      	lsls	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40020407 	.word	0x40020407
 8006398:	40020800 	.word	0x40020800
 800639c:	40020820 	.word	0x40020820
 80063a0:	cccccccd 	.word	0xcccccccd
 80063a4:	40020880 	.word	0x40020880

080063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a08      	ldr	r2, [pc, #32]	; (80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80063ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2201      	movs	r2, #1
 80063d6:	409a      	lsls	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	1000823f 	.word	0x1000823f
 80063ec:	40020940 	.word	0x40020940

080063f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063fe:	e15a      	b.n	80066b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	2101      	movs	r1, #1
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	4013      	ands	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 814c 	beq.w	80066b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d005      	beq.n	8006430 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800642c:	2b02      	cmp	r3, #2
 800642e:	d130      	bne.n	8006492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	2203      	movs	r2, #3
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	43db      	mvns	r3, r3
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4013      	ands	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006466:	2201      	movs	r2, #1
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4013      	ands	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 0201 	and.w	r2, r3, #1
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d017      	beq.n	80064ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	2203      	movs	r2, #3
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43db      	mvns	r3, r3
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4013      	ands	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d123      	bne.n	8006522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	08da      	lsrs	r2, r3, #3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3208      	adds	r2, #8
 80064e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	220f      	movs	r2, #15
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43db      	mvns	r3, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	08da      	lsrs	r2, r3, #3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3208      	adds	r2, #8
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	2203      	movs	r2, #3
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4013      	ands	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0203 	and.w	r2, r3, #3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80a6 	beq.w	80066b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006564:	4b5b      	ldr	r3, [pc, #364]	; (80066d4 <HAL_GPIO_Init+0x2e4>)
 8006566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006568:	4a5a      	ldr	r2, [pc, #360]	; (80066d4 <HAL_GPIO_Init+0x2e4>)
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	6613      	str	r3, [r2, #96]	; 0x60
 8006570:	4b58      	ldr	r3, [pc, #352]	; (80066d4 <HAL_GPIO_Init+0x2e4>)
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800657c:	4a56      	ldr	r2, [pc, #344]	; (80066d8 <HAL_GPIO_Init+0x2e8>)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	089b      	lsrs	r3, r3, #2
 8006582:	3302      	adds	r3, #2
 8006584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	220f      	movs	r2, #15
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4013      	ands	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065a6:	d01f      	beq.n	80065e8 <HAL_GPIO_Init+0x1f8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a4c      	ldr	r2, [pc, #304]	; (80066dc <HAL_GPIO_Init+0x2ec>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d019      	beq.n	80065e4 <HAL_GPIO_Init+0x1f4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a4b      	ldr	r2, [pc, #300]	; (80066e0 <HAL_GPIO_Init+0x2f0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <HAL_GPIO_Init+0x1f0>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a4a      	ldr	r2, [pc, #296]	; (80066e4 <HAL_GPIO_Init+0x2f4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00d      	beq.n	80065dc <HAL_GPIO_Init+0x1ec>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a49      	ldr	r2, [pc, #292]	; (80066e8 <HAL_GPIO_Init+0x2f8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <HAL_GPIO_Init+0x1e8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a48      	ldr	r2, [pc, #288]	; (80066ec <HAL_GPIO_Init+0x2fc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d101      	bne.n	80065d4 <HAL_GPIO_Init+0x1e4>
 80065d0:	2305      	movs	r3, #5
 80065d2:	e00a      	b.n	80065ea <HAL_GPIO_Init+0x1fa>
 80065d4:	2306      	movs	r3, #6
 80065d6:	e008      	b.n	80065ea <HAL_GPIO_Init+0x1fa>
 80065d8:	2304      	movs	r3, #4
 80065da:	e006      	b.n	80065ea <HAL_GPIO_Init+0x1fa>
 80065dc:	2303      	movs	r3, #3
 80065de:	e004      	b.n	80065ea <HAL_GPIO_Init+0x1fa>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e002      	b.n	80065ea <HAL_GPIO_Init+0x1fa>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_GPIO_Init+0x1fa>
 80065e8:	2300      	movs	r3, #0
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	f002 0203 	and.w	r2, r2, #3
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	4093      	lsls	r3, r2
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065fa:	4937      	ldr	r1, [pc, #220]	; (80066d8 <HAL_GPIO_Init+0x2e8>)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	089b      	lsrs	r3, r3, #2
 8006600:	3302      	adds	r3, #2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006608:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <HAL_GPIO_Init+0x300>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	43db      	mvns	r3, r3
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4013      	ands	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800662c:	4a30      	ldr	r2, [pc, #192]	; (80066f0 <HAL_GPIO_Init+0x300>)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006632:	4b2f      	ldr	r3, [pc, #188]	; (80066f0 <HAL_GPIO_Init+0x300>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	43db      	mvns	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4013      	ands	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006656:	4a26      	ldr	r2, [pc, #152]	; (80066f0 <HAL_GPIO_Init+0x300>)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800665c:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <HAL_GPIO_Init+0x300>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	43db      	mvns	r3, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4013      	ands	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <HAL_GPIO_Init+0x300>)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006686:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <HAL_GPIO_Init+0x300>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	43db      	mvns	r3, r3
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4013      	ands	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066aa:	4a11      	ldr	r2, [pc, #68]	; (80066f0 <HAL_GPIO_Init+0x300>)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	3301      	adds	r3, #1
 80066b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f47f ae9d 	bne.w	8006400 <HAL_GPIO_Init+0x10>
  }
}
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40021000 	.word	0x40021000
 80066d8:	40010000 	.word	0x40010000
 80066dc:	48000400 	.word	0x48000400
 80066e0:	48000800 	.word	0x48000800
 80066e4:	48000c00 	.word	0x48000c00
 80066e8:	48001000 	.word	0x48001000
 80066ec:	48001400 	.word	0x48001400
 80066f0:	40010400 	.word	0x40010400

080066f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	887b      	ldrh	r3, [r7, #2]
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
 8006710:	e001      	b.n	8006716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
 8006730:	4613      	mov	r3, r2
 8006732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006734:	787b      	ldrb	r3, [r7, #1]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800673a:	887a      	ldrh	r2, [r7, #2]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006740:	e002      	b.n	8006748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006742:	887a      	ldrh	r2, [r7, #2]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006766:	887a      	ldrh	r2, [r7, #2]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4013      	ands	r3, r2
 800676c:	041a      	lsls	r2, r3, #16
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	43d9      	mvns	r1, r3
 8006772:	887b      	ldrh	r3, [r7, #2]
 8006774:	400b      	ands	r3, r1
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	619a      	str	r2, [r3, #24]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d006      	beq.n	80067ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800679e:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f806 	bl	80067b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40010400 	.word	0x40010400

080067b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d141      	bne.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067de:	4b4b      	ldr	r3, [pc, #300]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ea:	d131      	bne.n	8006850 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067ec:	4b47      	ldr	r3, [pc, #284]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f2:	4a46      	ldr	r2, [pc, #280]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067fc:	4b43      	ldr	r3, [pc, #268]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006804:	4a41      	ldr	r2, [pc, #260]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800680a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800680c:	4b40      	ldr	r3, [pc, #256]	; (8006910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2232      	movs	r2, #50	; 0x32
 8006812:	fb02 f303 	mul.w	r3, r2, r3
 8006816:	4a3f      	ldr	r2, [pc, #252]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	0c9b      	lsrs	r3, r3, #18
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006822:	e002      	b.n	800682a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3b01      	subs	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800682a:	4b38      	ldr	r3, [pc, #224]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006836:	d102      	bne.n	800683e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f2      	bne.n	8006824 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800683e:	4b33      	ldr	r3, [pc, #204]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684a:	d158      	bne.n	80068fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e057      	b.n	8006900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006850:	4b2e      	ldr	r3, [pc, #184]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006856:	4a2d      	ldr	r2, [pc, #180]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800685c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006860:	e04d      	b.n	80068fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006868:	d141      	bne.n	80068ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800686a:	4b28      	ldr	r3, [pc, #160]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006876:	d131      	bne.n	80068dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006878:	4b24      	ldr	r3, [pc, #144]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800687e:	4a23      	ldr	r2, [pc, #140]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006888:	4b20      	ldr	r3, [pc, #128]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006890:	4a1e      	ldr	r2, [pc, #120]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006898:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2232      	movs	r2, #50	; 0x32
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	0c9b      	lsrs	r3, r3, #18
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ae:	e002      	b.n	80068b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c2:	d102      	bne.n	80068ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f2      	bne.n	80068b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d6:	d112      	bne.n	80068fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e011      	b.n	8006900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e2:	4a0a      	ldr	r2, [pc, #40]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068ec:	e007      	b.n	80068fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068f6:	4a05      	ldr	r2, [pc, #20]	; (800690c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	40007000 	.word	0x40007000
 8006910:	20000000 	.word	0x20000000
 8006914:	431bde83 	.word	0x431bde83

08006918 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	4a04      	ldr	r2, [pc, #16]	; (8006934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006926:	6093      	str	r3, [r2, #8]
}
 8006928:	bf00      	nop
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40007000 	.word	0x40007000

08006938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e306      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d075      	beq.n	8006a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006956:	4b97      	ldr	r3, [pc, #604]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006960:	4b94      	ldr	r3, [pc, #592]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d102      	bne.n	8006976 <HAL_RCC_OscConfig+0x3e>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2b03      	cmp	r3, #3
 8006974:	d002      	beq.n	800697c <HAL_RCC_OscConfig+0x44>
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d10b      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800697c:	4b8d      	ldr	r3, [pc, #564]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05b      	beq.n	8006a40 <HAL_RCC_OscConfig+0x108>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d157      	bne.n	8006a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e2e1      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d106      	bne.n	80069ac <HAL_RCC_OscConfig+0x74>
 800699e:	4b85      	ldr	r3, [pc, #532]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a84      	ldr	r2, [pc, #528]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	e01d      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x98>
 80069b6:	4b7f      	ldr	r3, [pc, #508]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a7e      	ldr	r2, [pc, #504]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	4b7c      	ldr	r3, [pc, #496]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a7b      	ldr	r2, [pc, #492]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e00b      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069d0:	4b78      	ldr	r3, [pc, #480]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a77      	ldr	r2, [pc, #476]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	4b75      	ldr	r3, [pc, #468]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a74      	ldr	r2, [pc, #464]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 80069e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f0:	f7fc f988 	bl	8002d04 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f8:	f7fc f984 	bl	8002d04 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	; 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e2a6      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a0a:	4b6a      	ldr	r3, [pc, #424]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0xc0>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a18:	f7fc f974 	bl	8002d04 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a20:	f7fc f970 	bl	8002d04 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e292      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a32:	4b60      	ldr	r3, [pc, #384]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0xe8>
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d075      	beq.n	8006b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a4e:	4b59      	ldr	r3, [pc, #356]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 030c 	and.w	r3, r3, #12
 8006a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a58:	4b56      	ldr	r3, [pc, #344]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	d102      	bne.n	8006a6e <HAL_RCC_OscConfig+0x136>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d002      	beq.n	8006a74 <HAL_RCC_OscConfig+0x13c>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d11f      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a74:	4b4f      	ldr	r3, [pc, #316]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_RCC_OscConfig+0x154>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e265      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8c:	4b49      	ldr	r3, [pc, #292]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	061b      	lsls	r3, r3, #24
 8006a9a:	4946      	ldr	r1, [pc, #280]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006aa0:	4b45      	ldr	r3, [pc, #276]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fc f8e1 	bl	8002c6c <HAL_InitTick>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d043      	beq.n	8006b38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e251      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d023      	beq.n	8006b04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006abc:	4b3d      	ldr	r3, [pc, #244]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a3c      	ldr	r2, [pc, #240]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac8:	f7fc f91c 	bl	8002d04 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ad0:	f7fc f918 	bl	8002d04 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e23a      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ae2:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f0      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aee:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	061b      	lsls	r3, r3, #24
 8006afc:	492d      	ldr	r1, [pc, #180]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	604b      	str	r3, [r1, #4]
 8006b02:	e01a      	b.n	8006b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b04:	4b2b      	ldr	r3, [pc, #172]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a2a      	ldr	r2, [pc, #168]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fc f8f8 	bl	8002d04 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b18:	f7fc f8f4 	bl	8002d04 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e216      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b2a:	4b22      	ldr	r3, [pc, #136]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x1e0>
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d041      	beq.n	8006bca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01c      	beq.n	8006b88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b4e:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b54:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5e:	f7fc f8d1 	bl	8002d04 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b66:	f7fc f8cd 	bl	8002d04 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e1ef      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b78:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0ef      	beq.n	8006b66 <HAL_RCC_OscConfig+0x22e>
 8006b86:	e020      	b.n	8006bca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <HAL_RCC_OscConfig+0x27c>)
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b98:	f7fc f8b4 	bl	8002d04 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b9e:	e00d      	b.n	8006bbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba0:	f7fc f8b0 	bl	8002d04 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d906      	bls.n	8006bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e1d2      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
 8006bb2:	bf00      	nop
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bbc:	4b8c      	ldr	r3, [pc, #560]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1ea      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 80a6 	beq.w	8006d24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006bdc:	4b84      	ldr	r3, [pc, #528]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_RCC_OscConfig+0x2b4>
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <HAL_RCC_OscConfig+0x2b6>
 8006bec:	2300      	movs	r3, #0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf2:	4b7f      	ldr	r3, [pc, #508]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	4a7e      	ldr	r2, [pc, #504]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8006bfe:	4b7c      	ldr	r3, [pc, #496]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c0e:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <HAL_RCC_OscConfig+0x4bc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d118      	bne.n	8006c4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c1a:	4b76      	ldr	r3, [pc, #472]	; (8006df4 <HAL_RCC_OscConfig+0x4bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a75      	ldr	r2, [pc, #468]	; (8006df4 <HAL_RCC_OscConfig+0x4bc>)
 8006c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c26:	f7fc f86d 	bl	8002d04 <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c2e:	f7fc f869 	bl	8002d04 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e18b      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c40:	4b6c      	ldr	r3, [pc, #432]	; (8006df4 <HAL_RCC_OscConfig+0x4bc>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0f0      	beq.n	8006c2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d108      	bne.n	8006c66 <HAL_RCC_OscConfig+0x32e>
 8006c54:	4b66      	ldr	r3, [pc, #408]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5a:	4a65      	ldr	r2, [pc, #404]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c64:	e024      	b.n	8006cb0 <HAL_RCC_OscConfig+0x378>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2b05      	cmp	r3, #5
 8006c6c:	d110      	bne.n	8006c90 <HAL_RCC_OscConfig+0x358>
 8006c6e:	4b60      	ldr	r3, [pc, #384]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c74:	4a5e      	ldr	r2, [pc, #376]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c76:	f043 0304 	orr.w	r3, r3, #4
 8006c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c7e:	4b5c      	ldr	r3, [pc, #368]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c84:	4a5a      	ldr	r2, [pc, #360]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c8e:	e00f      	b.n	8006cb0 <HAL_RCC_OscConfig+0x378>
 8006c90:	4b57      	ldr	r3, [pc, #348]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	4a56      	ldr	r2, [pc, #344]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ca0:	4b53      	ldr	r3, [pc, #332]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca6:	4a52      	ldr	r2, [pc, #328]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006ca8:	f023 0304 	bic.w	r3, r3, #4
 8006cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d016      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fc f824 	bl	8002d04 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cc0:	f7fc f820 	bl	8002d04 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e140      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd6:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0ed      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x388>
 8006ce4:	e015      	b.n	8006d12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce6:	f7fc f80d 	bl	8002d04 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fc f809 	bl	8002d04 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e129      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d04:	4b3a      	ldr	r3, [pc, #232]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1ed      	bne.n	8006cee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d12:	7ffb      	ldrb	r3, [r7, #31]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d105      	bne.n	8006d24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d18:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1c:	4a34      	ldr	r2, [pc, #208]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d03c      	beq.n	8006daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01c      	beq.n	8006d72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d38:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d3e:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d40:	f043 0301 	orr.w	r3, r3, #1
 8006d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d48:	f7fb ffdc 	bl	8002d04 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d50:	f7fb ffd8 	bl	8002d04 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e0fa      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d62:	4b23      	ldr	r3, [pc, #140]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0ef      	beq.n	8006d50 <HAL_RCC_OscConfig+0x418>
 8006d70:	e01b      	b.n	8006daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d72:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d78:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d82:	f7fb ffbf 	bl	8002d04 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d8a:	f7fb ffbb 	bl	8002d04 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0dd      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1ef      	bne.n	8006d8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 80d1 	beq.w	8006f56 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 030c 	and.w	r3, r3, #12
 8006dbc:	2b0c      	cmp	r3, #12
 8006dbe:	f000 808b 	beq.w	8006ed8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d15e      	bne.n	8006e88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a08      	ldr	r2, [pc, #32]	; (8006df0 <HAL_RCC_OscConfig+0x4b8>)
 8006dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd6:	f7fb ff95 	bl	8002d04 <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ddc:	e00c      	b.n	8006df8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dde:	f7fb ff91 	bl	8002d04 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d905      	bls.n	8006df8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e0b3      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
 8006df0:	40021000 	.word	0x40021000
 8006df4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df8:	4b59      	ldr	r3, [pc, #356]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1ec      	bne.n	8006dde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e04:	4b56      	ldr	r3, [pc, #344]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	4b56      	ldr	r3, [pc, #344]	; (8006f64 <HAL_RCC_OscConfig+0x62c>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6a11      	ldr	r1, [r2, #32]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e14:	3a01      	subs	r2, #1
 8006e16:	0112      	lsls	r2, r2, #4
 8006e18:	4311      	orrs	r1, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006e1e:	0212      	lsls	r2, r2, #8
 8006e20:	4311      	orrs	r1, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e26:	0852      	lsrs	r2, r2, #1
 8006e28:	3a01      	subs	r2, #1
 8006e2a:	0552      	lsls	r2, r2, #21
 8006e2c:	4311      	orrs	r1, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e32:	0852      	lsrs	r2, r2, #1
 8006e34:	3a01      	subs	r2, #1
 8006e36:	0652      	lsls	r2, r2, #25
 8006e38:	4311      	orrs	r1, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e3e:	06d2      	lsls	r2, r2, #27
 8006e40:	430a      	orrs	r2, r1
 8006e42:	4947      	ldr	r1, [pc, #284]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e48:	4b45      	ldr	r3, [pc, #276]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a44      	ldr	r2, [pc, #272]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e54:	4b42      	ldr	r3, [pc, #264]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	4a41      	ldr	r2, [pc, #260]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fb ff50 	bl	8002d04 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fb ff4c 	bl	8002d04 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e06e      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e7a:	4b39      	ldr	r3, [pc, #228]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0f0      	beq.n	8006e68 <HAL_RCC_OscConfig+0x530>
 8006e86:	e066      	b.n	8006f56 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e88:	4b35      	ldr	r3, [pc, #212]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a34      	ldr	r2, [pc, #208]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e92:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e94:	4b32      	ldr	r3, [pc, #200]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a31      	ldr	r2, [pc, #196]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006ea0:	4b2f      	ldr	r3, [pc, #188]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4a2e      	ldr	r2, [pc, #184]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006ea6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7fb ff28 	bl	8002d04 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb8:	f7fb ff24 	bl	8002d04 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e046      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eca:	4b25      	ldr	r3, [pc, #148]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x580>
 8006ed6:	e03e      	b.n	8006f56 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e039      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ee4:	4b1e      	ldr	r3, [pc, #120]	; (8006f60 <HAL_RCC_OscConfig+0x628>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f003 0203 	and.w	r2, r3, #3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d12c      	bne.n	8006f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	3b01      	subs	r3, #1
 8006f04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d123      	bne.n	8006f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d11b      	bne.n	8006f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d113      	bne.n	8006f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	085b      	lsrs	r3, r3, #1
 8006f36:	3b01      	subs	r3, #1
 8006f38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d109      	bne.n	8006f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d001      	beq.n	8006f56 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40021000 	.word	0x40021000
 8006f64:	019f800c 	.word	0x019f800c

08006f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e11e      	b.n	80071be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f80:	4b91      	ldr	r3, [pc, #580]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d910      	bls.n	8006fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b8e      	ldr	r3, [pc, #568]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f023 020f 	bic.w	r2, r3, #15
 8006f96:	498c      	ldr	r1, [pc, #560]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9e:	4b8a      	ldr	r3, [pc, #552]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e106      	b.n	80071be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d073      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d129      	bne.n	8007018 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fc4:	4b81      	ldr	r3, [pc, #516]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0f4      	b.n	80071be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006fd4:	f000 f99e 	bl	8007314 <RCC_GetSysClockFreqFromPLLSource>
 8006fd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4a7c      	ldr	r2, [pc, #496]	; (80071d0 <HAL_RCC_ClockConfig+0x268>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d93f      	bls.n	8007062 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006fe2:	4b7a      	ldr	r3, [pc, #488]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d033      	beq.n	8007062 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d12f      	bne.n	8007062 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007002:	4b72      	ldr	r3, [pc, #456]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800700a:	4a70      	ldr	r2, [pc, #448]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 800700c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007010:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007012:	2380      	movs	r3, #128	; 0x80
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e024      	b.n	8007062 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d107      	bne.n	8007030 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007020:	4b6a      	ldr	r3, [pc, #424]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e0c6      	b.n	80071be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007030:	4b66      	ldr	r3, [pc, #408]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0be      	b.n	80071be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007040:	f000 f8ce 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8007044:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4a61      	ldr	r2, [pc, #388]	; (80071d0 <HAL_RCC_ClockConfig+0x268>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d909      	bls.n	8007062 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800704e:	4b5f      	ldr	r3, [pc, #380]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007056:	4a5d      	ldr	r2, [pc, #372]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800705e:	2380      	movs	r3, #128	; 0x80
 8007060:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007062:	4b5a      	ldr	r3, [pc, #360]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	4957      	ldr	r1, [pc, #348]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007070:	4313      	orrs	r3, r2
 8007072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007074:	f7fb fe46 	bl	8002d04 <HAL_GetTick>
 8007078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707a:	e00a      	b.n	8007092 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800707c:	f7fb fe42 	bl	8002d04 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f241 3288 	movw	r2, #5000	; 0x1388
 800708a:	4293      	cmp	r3, r2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e095      	b.n	80071be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007092:	4b4e      	ldr	r3, [pc, #312]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 020c 	and.w	r2, r3, #12
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d1eb      	bne.n	800707c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d023      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070bc:	4b43      	ldr	r3, [pc, #268]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	4a42      	ldr	r2, [pc, #264]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 80070c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80070d4:	4b3d      	ldr	r3, [pc, #244]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80070dc:	4a3b      	ldr	r2, [pc, #236]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 80070de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e4:	4b39      	ldr	r3, [pc, #228]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4936      	ldr	r1, [pc, #216]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
 80070f6:	e008      	b.n	800710a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b80      	cmp	r3, #128	; 0x80
 80070fc:	d105      	bne.n	800710a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80070fe:	4b33      	ldr	r3, [pc, #204]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	4a32      	ldr	r2, [pc, #200]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007108:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800710a:	4b2f      	ldr	r3, [pc, #188]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d21d      	bcs.n	8007154 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007118:	4b2b      	ldr	r3, [pc, #172]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f023 020f 	bic.w	r2, r3, #15
 8007120:	4929      	ldr	r1, [pc, #164]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007128:	f7fb fdec 	bl	8002d04 <HAL_GetTick>
 800712c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007130:	f7fb fde8 	bl	8002d04 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e03b      	b.n	80071be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007146:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <HAL_RCC_ClockConfig+0x260>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d1ed      	bne.n	8007130 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d008      	beq.n	8007172 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007160:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	4917      	ldr	r1, [pc, #92]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	490f      	ldr	r1, [pc, #60]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007192:	f000 f825 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8007196:	4602      	mov	r2, r0
 8007198:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <HAL_RCC_ClockConfig+0x264>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	490c      	ldr	r1, [pc, #48]	; (80071d4 <HAL_RCC_ClockConfig+0x26c>)
 80071a4:	5ccb      	ldrb	r3, [r1, r3]
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	fa22 f303 	lsr.w	r3, r2, r3
 80071ae:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <HAL_RCC_ClockConfig+0x270>)
 80071b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80071b2:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <HAL_RCC_ClockConfig+0x274>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fb fd58 	bl	8002c6c <HAL_InitTick>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40022000 	.word	0x40022000
 80071cc:	40021000 	.word	0x40021000
 80071d0:	04c4b400 	.word	0x04c4b400
 80071d4:	0800af6c 	.word	0x0800af6c
 80071d8:	20000000 	.word	0x20000000
 80071dc:	20000004 	.word	0x20000004

080071e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80071e6:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d102      	bne.n	80071f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071f2:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	e047      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 030c 	and.w	r3, r3, #12
 8007200:	2b08      	cmp	r3, #8
 8007202:	d102      	bne.n	800720a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007204:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007206:	613b      	str	r3, [r7, #16]
 8007208:	e03e      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800720a:	4b23      	ldr	r3, [pc, #140]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 030c 	and.w	r3, r3, #12
 8007212:	2b0c      	cmp	r3, #12
 8007214:	d136      	bne.n	8007284 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007216:	4b20      	ldr	r3, [pc, #128]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007220:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	3301      	adds	r3, #1
 800722c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d10c      	bne.n	800724e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007234:	4a1a      	ldr	r2, [pc, #104]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	4a16      	ldr	r2, [pc, #88]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800723e:	68d2      	ldr	r2, [r2, #12]
 8007240:	0a12      	lsrs	r2, r2, #8
 8007242:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	617b      	str	r3, [r7, #20]
      break;
 800724c:	e00c      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800724e:	4a13      	ldr	r2, [pc, #76]	; (800729c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	fbb2 f3f3 	udiv	r3, r2, r3
 8007256:	4a10      	ldr	r2, [pc, #64]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007258:	68d2      	ldr	r2, [r2, #12]
 800725a:	0a12      	lsrs	r2, r2, #8
 800725c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007260:	fb02 f303 	mul.w	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
      break;
 8007266:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	0e5b      	lsrs	r3, r3, #25
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	3301      	adds	r3, #1
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	e001      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007288:	693b      	ldr	r3, [r7, #16]
}
 800728a:	4618      	mov	r0, r3
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40021000 	.word	0x40021000
 800729c:	00f42400 	.word	0x00f42400
 80072a0:	016e3600 	.word	0x016e3600

080072a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a8:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80072aa:	681b      	ldr	r3, [r3, #0]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000000 	.word	0x20000000

080072bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072c0:	f7ff fff0 	bl	80072a4 <HAL_RCC_GetHCLKFreq>
 80072c4:	4602      	mov	r2, r0
 80072c6:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	4904      	ldr	r1, [pc, #16]	; (80072e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072d2:	5ccb      	ldrb	r3, [r1, r3]
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072dc:	4618      	mov	r0, r3
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40021000 	.word	0x40021000
 80072e4:	0800af7c 	.word	0x0800af7c

080072e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072ec:	f7ff ffda 	bl	80072a4 <HAL_RCC_GetHCLKFreq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_GetPCLK2Freq+0x24>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	0adb      	lsrs	r3, r3, #11
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	4904      	ldr	r1, [pc, #16]	; (8007310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072fe:	5ccb      	ldrb	r3, [r1, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007308:	4618      	mov	r0, r3
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40021000 	.word	0x40021000
 8007310:	0800af7c 	.word	0x0800af7c

08007314 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0303 	and.w	r3, r3, #3
 8007322:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007324:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d10c      	bne.n	8007352 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007338:	4a17      	ldr	r2, [pc, #92]	; (8007398 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007340:	4a14      	ldr	r2, [pc, #80]	; (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007342:	68d2      	ldr	r2, [r2, #12]
 8007344:	0a12      	lsrs	r2, r2, #8
 8007346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	617b      	str	r3, [r7, #20]
    break;
 8007350:	e00c      	b.n	800736c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007352:	4a12      	ldr	r2, [pc, #72]	; (800739c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800735c:	68d2      	ldr	r2, [r2, #12]
 800735e:	0a12      	lsrs	r2, r2, #8
 8007360:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007364:	fb02 f303 	mul.w	r3, r2, r3
 8007368:	617b      	str	r3, [r7, #20]
    break;
 800736a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	0e5b      	lsrs	r3, r3, #25
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	3301      	adds	r3, #1
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007386:	687b      	ldr	r3, [r7, #4]
}
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	40021000 	.word	0x40021000
 8007398:	016e3600 	.word	0x016e3600
 800739c:	00f42400 	.word	0x00f42400

080073a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073a8:	2300      	movs	r3, #0
 80073aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073ac:	2300      	movs	r3, #0
 80073ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8098 	beq.w	80074ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073be:	2300      	movs	r3, #0
 80073c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073c2:	4b43      	ldr	r3, [pc, #268]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10d      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ce:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d2:	4a3f      	ldr	r2, [pc, #252]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d8:	6593      	str	r3, [r2, #88]	; 0x58
 80073da:	4b3d      	ldr	r3, [pc, #244]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e2:	60bb      	str	r3, [r7, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073e6:	2301      	movs	r3, #1
 80073e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073ea:	4b3a      	ldr	r3, [pc, #232]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a39      	ldr	r2, [pc, #228]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073f6:	f7fb fc85 	bl	8002d04 <HAL_GetTick>
 80073fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073fc:	e009      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fe:	f7fb fc81 	bl	8002d04 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d902      	bls.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	74fb      	strb	r3, [r7, #19]
        break;
 8007410:	e005      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007412:	4b30      	ldr	r3, [pc, #192]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0ef      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800741e:	7cfb      	ldrb	r3, [r7, #19]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d159      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007424:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800742e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	429a      	cmp	r2, r3
 800743e:	d019      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007440:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800744c:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800745c:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800746c:	4a18      	ldr	r2, [pc, #96]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d016      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747e:	f7fb fc41 	bl	8002d04 <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007484:	e00b      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fb fc3d 	bl	8002d04 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	; 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d902      	bls.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	74fb      	strb	r3, [r7, #19]
            break;
 800749c:	e006      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0ec      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80074ac:	7cfb      	ldrb	r3, [r7, #19]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c0:	4903      	ldr	r1, [pc, #12]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074c8:	e008      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074ca:	7cfb      	ldrb	r3, [r7, #19]
 80074cc:	74bb      	strb	r3, [r7, #18]
 80074ce:	e005      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074dc:	7c7b      	ldrb	r3, [r7, #17]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d105      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e2:	4ba7      	ldr	r3, [pc, #668]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e6:	4aa6      	ldr	r2, [pc, #664]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074fa:	4ba1      	ldr	r3, [pc, #644]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007500:	f023 0203 	bic.w	r2, r3, #3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	499d      	ldr	r1, [pc, #628]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800751c:	4b98      	ldr	r3, [pc, #608]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007522:	f023 020c 	bic.w	r2, r3, #12
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4995      	ldr	r1, [pc, #596]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800753e:	4b90      	ldr	r3, [pc, #576]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	498c      	ldr	r1, [pc, #560]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007560:	4b87      	ldr	r3, [pc, #540]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	4984      	ldr	r1, [pc, #528]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0310 	and.w	r3, r3, #16
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007582:	4b7f      	ldr	r3, [pc, #508]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	497b      	ldr	r1, [pc, #492]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075a4:	4b76      	ldr	r3, [pc, #472]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	4973      	ldr	r1, [pc, #460]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075c6:	4b6e      	ldr	r3, [pc, #440]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	496a      	ldr	r1, [pc, #424]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075e8:	4b65      	ldr	r3, [pc, #404]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	4962      	ldr	r1, [pc, #392]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800760a:	4b5d      	ldr	r3, [pc, #372]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	4959      	ldr	r1, [pc, #356]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800762c:	4b54      	ldr	r3, [pc, #336]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007632:	f023 0203 	bic.w	r2, r3, #3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	4951      	ldr	r1, [pc, #324]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800763c:	4313      	orrs	r3, r2
 800763e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800764e:	4b4c      	ldr	r3, [pc, #304]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007654:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	4948      	ldr	r1, [pc, #288]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766c:	2b00      	cmp	r3, #0
 800766e:	d015      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007670:	4b43      	ldr	r3, [pc, #268]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	4940      	ldr	r1, [pc, #256]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768e:	d105      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007690:	4b3b      	ldr	r3, [pc, #236]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4a3a      	ldr	r2, [pc, #232]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800769a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d015      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076a8:	4b35      	ldr	r3, [pc, #212]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b6:	4932      	ldr	r1, [pc, #200]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c6:	d105      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c8:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	4a2c      	ldr	r2, [pc, #176]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d015      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076e0:	4b27      	ldr	r3, [pc, #156]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	4924      	ldr	r1, [pc, #144]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076fe:	d105      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007700:	4b1f      	ldr	r3, [pc, #124]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4a1e      	ldr	r2, [pc, #120]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800770a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d015      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007718:	4b19      	ldr	r3, [pc, #100]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007726:	4916      	ldr	r1, [pc, #88]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007736:	d105      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007738:	4b11      	ldr	r3, [pc, #68]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	4a10      	ldr	r2, [pc, #64]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007742:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d019      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007750:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	4908      	ldr	r1, [pc, #32]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800776e:	d109      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4a02      	ldr	r2, [pc, #8]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800777a:	60d3      	str	r3, [r2, #12]
 800777c:	e002      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800777e:	bf00      	nop
 8007780:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007790:	4b29      	ldr	r3, [pc, #164]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007796:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	4926      	ldr	r1, [pc, #152]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ae:	d105      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077b0:	4b21      	ldr	r3, [pc, #132]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4a20      	ldr	r2, [pc, #128]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d015      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80077c8:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d6:	4918      	ldr	r1, [pc, #96]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e6:	d105      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077e8:	4b13      	ldr	r3, [pc, #76]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	4a12      	ldr	r2, [pc, #72]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d015      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007800:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780e:	490a      	ldr	r1, [pc, #40]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800781e:	d105      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a04      	ldr	r2, [pc, #16]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800782a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800782c:	7cbb      	ldrb	r3, [r7, #18]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	40021000 	.word	0x40021000

0800783c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e049      	b.n	80078e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fa ffac 	bl	80027c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f000 fe08 	bl	8008490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d001      	beq.n	8007904 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e04c      	b.n	800799e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a26      	ldr	r2, [pc, #152]	; (80079ac <HAL_TIM_Base_Start+0xc0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d022      	beq.n	800795c <HAL_TIM_Base_Start+0x70>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791e:	d01d      	beq.n	800795c <HAL_TIM_Base_Start+0x70>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <HAL_TIM_Base_Start+0xc4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d018      	beq.n	800795c <HAL_TIM_Base_Start+0x70>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a21      	ldr	r2, [pc, #132]	; (80079b4 <HAL_TIM_Base_Start+0xc8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d013      	beq.n	800795c <HAL_TIM_Base_Start+0x70>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1f      	ldr	r2, [pc, #124]	; (80079b8 <HAL_TIM_Base_Start+0xcc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00e      	beq.n	800795c <HAL_TIM_Base_Start+0x70>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a1e      	ldr	r2, [pc, #120]	; (80079bc <HAL_TIM_Base_Start+0xd0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d009      	beq.n	800795c <HAL_TIM_Base_Start+0x70>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <HAL_TIM_Base_Start+0xd4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d004      	beq.n	800795c <HAL_TIM_Base_Start+0x70>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1b      	ldr	r2, [pc, #108]	; (80079c4 <HAL_TIM_Base_Start+0xd8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d115      	bne.n	8007988 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	4b19      	ldr	r3, [pc, #100]	; (80079c8 <HAL_TIM_Base_Start+0xdc>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b06      	cmp	r3, #6
 800796c:	d015      	beq.n	800799a <HAL_TIM_Base_Start+0xae>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007974:	d011      	beq.n	800799a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0201 	orr.w	r2, r2, #1
 8007984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007986:	e008      	b.n	800799a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e000      	b.n	800799c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40012c00 	.word	0x40012c00
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800
 80079b8:	40000c00 	.word	0x40000c00
 80079bc:	40013400 	.word	0x40013400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40015000 	.word	0x40015000
 80079c8:	00010007 	.word	0x00010007

080079cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d001      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e054      	b.n	8007a8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a26      	ldr	r2, [pc, #152]	; (8007a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d022      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x80>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0e:	d01d      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x80>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a22      	ldr	r2, [pc, #136]	; (8007aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d018      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x80>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a21      	ldr	r2, [pc, #132]	; (8007aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d013      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a1f      	ldr	r2, [pc, #124]	; (8007aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00e      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <HAL_TIM_Base_Start_IT+0xe0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d009      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d004      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x80>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d115      	bne.n	8007a78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <HAL_TIM_Base_Start_IT+0xec>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b06      	cmp	r3, #6
 8007a5c:	d015      	beq.n	8007a8a <HAL_TIM_Base_Start_IT+0xbe>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a64:	d011      	beq.n	8007a8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a76:	e008      	b.n	8007a8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	e000      	b.n	8007a8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40000800 	.word	0x40000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	40013400 	.word	0x40013400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40015000 	.word	0x40015000
 8007ab8:	00010007 	.word	0x00010007

08007abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e049      	b.n	8007b62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fa fdec 	bl	80026c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	f000 fcc8 	bl	8008490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_TIM_PWM_Start+0x24>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e03c      	b.n	8007c0a <HAL_TIM_PWM_Start+0x9e>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d109      	bne.n	8007baa <HAL_TIM_PWM_Start+0x3e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	bf14      	ite	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	2300      	moveq	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e02f      	b.n	8007c0a <HAL_TIM_PWM_Start+0x9e>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d109      	bne.n	8007bc4 <HAL_TIM_PWM_Start+0x58>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e022      	b.n	8007c0a <HAL_TIM_PWM_Start+0x9e>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b0c      	cmp	r3, #12
 8007bc8:	d109      	bne.n	8007bde <HAL_TIM_PWM_Start+0x72>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	bf14      	ite	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2300      	moveq	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	e015      	b.n	8007c0a <HAL_TIM_PWM_Start+0x9e>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b10      	cmp	r3, #16
 8007be2:	d109      	bne.n	8007bf8 <HAL_TIM_PWM_Start+0x8c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	bf14      	ite	ne
 8007bf0:	2301      	movne	r3, #1
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	e008      	b.n	8007c0a <HAL_TIM_PWM_Start+0x9e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e0a6      	b.n	8007d60 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_PWM_Start+0xb6>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c20:	e023      	b.n	8007c6a <HAL_TIM_PWM_Start+0xfe>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d104      	bne.n	8007c32 <HAL_TIM_PWM_Start+0xc6>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c30:	e01b      	b.n	8007c6a <HAL_TIM_PWM_Start+0xfe>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d104      	bne.n	8007c42 <HAL_TIM_PWM_Start+0xd6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c40:	e013      	b.n	8007c6a <HAL_TIM_PWM_Start+0xfe>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b0c      	cmp	r3, #12
 8007c46:	d104      	bne.n	8007c52 <HAL_TIM_PWM_Start+0xe6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c50:	e00b      	b.n	8007c6a <HAL_TIM_PWM_Start+0xfe>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b10      	cmp	r3, #16
 8007c56:	d104      	bne.n	8007c62 <HAL_TIM_PWM_Start+0xf6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c60:	e003      	b.n	8007c6a <HAL_TIM_PWM_Start+0xfe>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2202      	movs	r2, #2
 8007c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 f908 	bl	8008e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a3a      	ldr	r2, [pc, #232]	; (8007d68 <HAL_TIM_PWM_Start+0x1fc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d018      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x148>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a39      	ldr	r2, [pc, #228]	; (8007d6c <HAL_TIM_PWM_Start+0x200>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d013      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x148>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a37      	ldr	r2, [pc, #220]	; (8007d70 <HAL_TIM_PWM_Start+0x204>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00e      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x148>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a36      	ldr	r2, [pc, #216]	; (8007d74 <HAL_TIM_PWM_Start+0x208>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d009      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x148>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a34      	ldr	r2, [pc, #208]	; (8007d78 <HAL_TIM_PWM_Start+0x20c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d004      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x148>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a33      	ldr	r2, [pc, #204]	; (8007d7c <HAL_TIM_PWM_Start+0x210>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d101      	bne.n	8007cb8 <HAL_TIM_PWM_Start+0x14c>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <HAL_TIM_PWM_Start+0x14e>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a25      	ldr	r2, [pc, #148]	; (8007d68 <HAL_TIM_PWM_Start+0x1fc>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d022      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x1b2>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce0:	d01d      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x1b2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a26      	ldr	r2, [pc, #152]	; (8007d80 <HAL_TIM_PWM_Start+0x214>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d018      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x1b2>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a24      	ldr	r2, [pc, #144]	; (8007d84 <HAL_TIM_PWM_Start+0x218>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d013      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x1b2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a23      	ldr	r2, [pc, #140]	; (8007d88 <HAL_TIM_PWM_Start+0x21c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x1b2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a19      	ldr	r2, [pc, #100]	; (8007d6c <HAL_TIM_PWM_Start+0x200>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x1b2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a18      	ldr	r2, [pc, #96]	; (8007d70 <HAL_TIM_PWM_Start+0x204>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x1b2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a18      	ldr	r2, [pc, #96]	; (8007d7c <HAL_TIM_PWM_Start+0x210>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d115      	bne.n	8007d4a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	4b19      	ldr	r3, [pc, #100]	; (8007d8c <HAL_TIM_PWM_Start+0x220>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b06      	cmp	r3, #6
 8007d2e:	d015      	beq.n	8007d5c <HAL_TIM_PWM_Start+0x1f0>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d36:	d011      	beq.n	8007d5c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0201 	orr.w	r2, r2, #1
 8007d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d48:	e008      	b.n	8007d5c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	e000      	b.n	8007d5e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40014400 	.word	0x40014400
 8007d78:	40014800 	.word	0x40014800
 8007d7c:	40015000 	.word	0x40015000
 8007d80:	40000400 	.word	0x40000400
 8007d84:	40000800 	.word	0x40000800
 8007d88:	40000c00 	.word	0x40000c00
 8007d8c:	00010007 	.word	0x00010007

08007d90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e049      	b.n	8007e36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fa fca2 	bl	8002700 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f000 fb5e 	bl	8008490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_IC_Start_IT+0x1e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	e023      	b.n	8007ea6 <HAL_TIM_IC_Start_IT+0x66>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_IC_Start_IT+0x2e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	e01b      	b.n	8007ea6 <HAL_TIM_IC_Start_IT+0x66>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_IC_Start_IT+0x3e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	e013      	b.n	8007ea6 <HAL_TIM_IC_Start_IT+0x66>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b0c      	cmp	r3, #12
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_IC_Start_IT+0x4e>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	e00b      	b.n	8007ea6 <HAL_TIM_IC_Start_IT+0x66>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b10      	cmp	r3, #16
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_IC_Start_IT+0x5e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	e003      	b.n	8007ea6 <HAL_TIM_IC_Start_IT+0x66>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <HAL_TIM_IC_Start_IT+0x78>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	e013      	b.n	8007ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d104      	bne.n	8007ec8 <HAL_TIM_IC_Start_IT+0x88>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	e00b      	b.n	8007ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d104      	bne.n	8007ed8 <HAL_TIM_IC_Start_IT+0x98>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	e003      	b.n	8007ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d102      	bne.n	8007eee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ee8:	7b7b      	ldrb	r3, [r7, #13]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d001      	beq.n	8007ef2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e0e2      	b.n	80080b8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_IC_Start_IT+0xc2>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f00:	e023      	b.n	8007f4a <HAL_TIM_IC_Start_IT+0x10a>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d104      	bne.n	8007f12 <HAL_TIM_IC_Start_IT+0xd2>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f10:	e01b      	b.n	8007f4a <HAL_TIM_IC_Start_IT+0x10a>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d104      	bne.n	8007f22 <HAL_TIM_IC_Start_IT+0xe2>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f20:	e013      	b.n	8007f4a <HAL_TIM_IC_Start_IT+0x10a>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b0c      	cmp	r3, #12
 8007f26:	d104      	bne.n	8007f32 <HAL_TIM_IC_Start_IT+0xf2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f30:	e00b      	b.n	8007f4a <HAL_TIM_IC_Start_IT+0x10a>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b10      	cmp	r3, #16
 8007f36:	d104      	bne.n	8007f42 <HAL_TIM_IC_Start_IT+0x102>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f40:	e003      	b.n	8007f4a <HAL_TIM_IC_Start_IT+0x10a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <HAL_TIM_IC_Start_IT+0x11a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f58:	e013      	b.n	8007f82 <HAL_TIM_IC_Start_IT+0x142>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_IC_Start_IT+0x12a>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f68:	e00b      	b.n	8007f82 <HAL_TIM_IC_Start_IT+0x142>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d104      	bne.n	8007f7a <HAL_TIM_IC_Start_IT+0x13a>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f78:	e003      	b.n	8007f82 <HAL_TIM_IC_Start_IT+0x142>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b0c      	cmp	r3, #12
 8007f86:	d841      	bhi.n	800800c <HAL_TIM_IC_Start_IT+0x1cc>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <HAL_TIM_IC_Start_IT+0x150>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fc5 	.word	0x08007fc5
 8007f94:	0800800d 	.word	0x0800800d
 8007f98:	0800800d 	.word	0x0800800d
 8007f9c:	0800800d 	.word	0x0800800d
 8007fa0:	08007fd7 	.word	0x08007fd7
 8007fa4:	0800800d 	.word	0x0800800d
 8007fa8:	0800800d 	.word	0x0800800d
 8007fac:	0800800d 	.word	0x0800800d
 8007fb0:	08007fe9 	.word	0x08007fe9
 8007fb4:	0800800d 	.word	0x0800800d
 8007fb8:	0800800d 	.word	0x0800800d
 8007fbc:	0800800d 	.word	0x0800800d
 8007fc0:	08007ffb 	.word	0x08007ffb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0202 	orr.w	r2, r2, #2
 8007fd2:	60da      	str	r2, [r3, #12]
      break;
 8007fd4:	e01d      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0204 	orr.w	r2, r2, #4
 8007fe4:	60da      	str	r2, [r3, #12]
      break;
 8007fe6:	e014      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0208 	orr.w	r2, r2, #8
 8007ff6:	60da      	str	r2, [r3, #12]
      break;
 8007ff8:	e00b      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0210 	orr.w	r2, r2, #16
 8008008:	60da      	str	r2, [r3, #12]
      break;
 800800a:	e002      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
      break;
 8008010:	bf00      	nop
  }

  if (status == HAL_OK)
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d14e      	bne.n	80080b6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2201      	movs	r2, #1
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f000 ff31 	bl	8008e88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a25      	ldr	r2, [pc, #148]	; (80080c0 <HAL_TIM_IC_Start_IT+0x280>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d022      	beq.n	8008076 <HAL_TIM_IC_Start_IT+0x236>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008038:	d01d      	beq.n	8008076 <HAL_TIM_IC_Start_IT+0x236>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a21      	ldr	r2, [pc, #132]	; (80080c4 <HAL_TIM_IC_Start_IT+0x284>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d018      	beq.n	8008076 <HAL_TIM_IC_Start_IT+0x236>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1f      	ldr	r2, [pc, #124]	; (80080c8 <HAL_TIM_IC_Start_IT+0x288>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d013      	beq.n	8008076 <HAL_TIM_IC_Start_IT+0x236>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a1e      	ldr	r2, [pc, #120]	; (80080cc <HAL_TIM_IC_Start_IT+0x28c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00e      	beq.n	8008076 <HAL_TIM_IC_Start_IT+0x236>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a1c      	ldr	r2, [pc, #112]	; (80080d0 <HAL_TIM_IC_Start_IT+0x290>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d009      	beq.n	8008076 <HAL_TIM_IC_Start_IT+0x236>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1b      	ldr	r2, [pc, #108]	; (80080d4 <HAL_TIM_IC_Start_IT+0x294>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d004      	beq.n	8008076 <HAL_TIM_IC_Start_IT+0x236>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a19      	ldr	r2, [pc, #100]	; (80080d8 <HAL_TIM_IC_Start_IT+0x298>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d115      	bne.n	80080a2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	4b17      	ldr	r3, [pc, #92]	; (80080dc <HAL_TIM_IC_Start_IT+0x29c>)
 800807e:	4013      	ands	r3, r2
 8008080:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b06      	cmp	r3, #6
 8008086:	d015      	beq.n	80080b4 <HAL_TIM_IC_Start_IT+0x274>
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800808e:	d011      	beq.n	80080b4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a0:	e008      	b.n	80080b4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0201 	orr.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e000      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40013400 	.word	0x40013400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40015000 	.word	0x40015000
 80080dc:	00010007 	.word	0x00010007

080080e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80080fa:	2302      	movs	r3, #2
 80080fc:	e088      	b.n	8008210 <HAL_TIM_IC_ConfigChannel+0x130>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d11b      	bne.n	8008144 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f000 fd8a 	bl	8008c34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 020c 	bic.w	r2, r2, #12
 800812e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6999      	ldr	r1, [r3, #24]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	619a      	str	r2, [r3, #24]
 8008142:	e060      	b.n	8008206 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b04      	cmp	r3, #4
 8008148:	d11c      	bne.n	8008184 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6819      	ldr	r1, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f000 fddf 	bl	8008d1c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800816c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6999      	ldr	r1, [r3, #24]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	021a      	lsls	r2, r3, #8
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	619a      	str	r2, [r3, #24]
 8008182:	e040      	b.n	8008206 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b08      	cmp	r3, #8
 8008188:	d11b      	bne.n	80081c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6819      	ldr	r1, [r3, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f000 fdfc 	bl	8008d96 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 020c 	bic.w	r2, r2, #12
 80081ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69d9      	ldr	r1, [r3, #28]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	61da      	str	r2, [r3, #28]
 80081c0:	e021      	b.n	8008206 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b0c      	cmp	r3, #12
 80081c6:	d11c      	bne.n	8008202 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f000 fe19 	bl	8008e0e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69da      	ldr	r2, [r3, #28]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69d9      	ldr	r1, [r3, #28]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	021a      	lsls	r2, r3, #8
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	61da      	str	r2, [r3, #28]
 8008200:	e001      	b.n	8008206 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008232:	2302      	movs	r3, #2
 8008234:	e0ff      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b14      	cmp	r3, #20
 8008242:	f200 80f0 	bhi.w	8008426 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	080082a1 	.word	0x080082a1
 8008250:	08008427 	.word	0x08008427
 8008254:	08008427 	.word	0x08008427
 8008258:	08008427 	.word	0x08008427
 800825c:	080082e1 	.word	0x080082e1
 8008260:	08008427 	.word	0x08008427
 8008264:	08008427 	.word	0x08008427
 8008268:	08008427 	.word	0x08008427
 800826c:	08008323 	.word	0x08008323
 8008270:	08008427 	.word	0x08008427
 8008274:	08008427 	.word	0x08008427
 8008278:	08008427 	.word	0x08008427
 800827c:	08008363 	.word	0x08008363
 8008280:	08008427 	.word	0x08008427
 8008284:	08008427 	.word	0x08008427
 8008288:	08008427 	.word	0x08008427
 800828c:	080083a5 	.word	0x080083a5
 8008290:	08008427 	.word	0x08008427
 8008294:	08008427 	.word	0x08008427
 8008298:	08008427 	.word	0x08008427
 800829c:	080083e5 	.word	0x080083e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f99a 	bl	80085e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0208 	orr.w	r2, r2, #8
 80082ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0204 	bic.w	r2, r2, #4
 80082ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6999      	ldr	r1, [r3, #24]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	619a      	str	r2, [r3, #24]
      break;
 80082de:	e0a5      	b.n	800842c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fa14 	bl	8008714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800830a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6999      	ldr	r1, [r3, #24]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	021a      	lsls	r2, r3, #8
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	619a      	str	r2, [r3, #24]
      break;
 8008320:	e084      	b.n	800842c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68b9      	ldr	r1, [r7, #8]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fa87 	bl	800883c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69da      	ldr	r2, [r3, #28]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0208 	orr.w	r2, r2, #8
 800833c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69da      	ldr	r2, [r3, #28]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0204 	bic.w	r2, r2, #4
 800834c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69d9      	ldr	r1, [r3, #28]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	61da      	str	r2, [r3, #28]
      break;
 8008360:	e064      	b.n	800842c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	4618      	mov	r0, r3
 800836a:	f000 faf9 	bl	8008960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69da      	ldr	r2, [r3, #28]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800837c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800838c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69d9      	ldr	r1, [r3, #28]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	021a      	lsls	r2, r3, #8
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	61da      	str	r2, [r3, #28]
      break;
 80083a2:	e043      	b.n	800842c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fb6c 	bl	8008a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0208 	orr.w	r2, r2, #8
 80083be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0204 	bic.w	r2, r2, #4
 80083ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80083e2:	e023      	b.n	800842c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fbb6 	bl	8008b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800840e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	021a      	lsls	r2, r3, #8
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008424:	e002      	b.n	800842c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
      break;
 800842a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop

08008440 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_TIM_GenerateEvent+0x18>
 8008454:	2302      	movs	r3, #2
 8008456:	e014      	b.n	8008482 <HAL_TIM_GenerateEvent+0x42>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a46      	ldr	r2, [pc, #280]	; (80085bc <TIM_Base_SetConfig+0x12c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d017      	beq.n	80084d8 <TIM_Base_SetConfig+0x48>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ae:	d013      	beq.n	80084d8 <TIM_Base_SetConfig+0x48>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a43      	ldr	r2, [pc, #268]	; (80085c0 <TIM_Base_SetConfig+0x130>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00f      	beq.n	80084d8 <TIM_Base_SetConfig+0x48>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a42      	ldr	r2, [pc, #264]	; (80085c4 <TIM_Base_SetConfig+0x134>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00b      	beq.n	80084d8 <TIM_Base_SetConfig+0x48>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a41      	ldr	r2, [pc, #260]	; (80085c8 <TIM_Base_SetConfig+0x138>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d007      	beq.n	80084d8 <TIM_Base_SetConfig+0x48>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a40      	ldr	r2, [pc, #256]	; (80085cc <TIM_Base_SetConfig+0x13c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d003      	beq.n	80084d8 <TIM_Base_SetConfig+0x48>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a3f      	ldr	r2, [pc, #252]	; (80085d0 <TIM_Base_SetConfig+0x140>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d108      	bne.n	80084ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a33      	ldr	r2, [pc, #204]	; (80085bc <TIM_Base_SetConfig+0x12c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d023      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f8:	d01f      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a30      	ldr	r2, [pc, #192]	; (80085c0 <TIM_Base_SetConfig+0x130>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01b      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a2f      	ldr	r2, [pc, #188]	; (80085c4 <TIM_Base_SetConfig+0x134>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d017      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a2e      	ldr	r2, [pc, #184]	; (80085c8 <TIM_Base_SetConfig+0x138>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a2d      	ldr	r2, [pc, #180]	; (80085cc <TIM_Base_SetConfig+0x13c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a2d      	ldr	r2, [pc, #180]	; (80085d4 <TIM_Base_SetConfig+0x144>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a2c      	ldr	r2, [pc, #176]	; (80085d8 <TIM_Base_SetConfig+0x148>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a2b      	ldr	r2, [pc, #172]	; (80085dc <TIM_Base_SetConfig+0x14c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a26      	ldr	r2, [pc, #152]	; (80085d0 <TIM_Base_SetConfig+0x140>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d108      	bne.n	800854c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a12      	ldr	r2, [pc, #72]	; (80085bc <TIM_Base_SetConfig+0x12c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d013      	beq.n	80085a0 <TIM_Base_SetConfig+0x110>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a14      	ldr	r2, [pc, #80]	; (80085cc <TIM_Base_SetConfig+0x13c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00f      	beq.n	80085a0 <TIM_Base_SetConfig+0x110>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a14      	ldr	r2, [pc, #80]	; (80085d4 <TIM_Base_SetConfig+0x144>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00b      	beq.n	80085a0 <TIM_Base_SetConfig+0x110>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <TIM_Base_SetConfig+0x148>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <TIM_Base_SetConfig+0x110>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a12      	ldr	r2, [pc, #72]	; (80085dc <TIM_Base_SetConfig+0x14c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_Base_SetConfig+0x110>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a0d      	ldr	r2, [pc, #52]	; (80085d0 <TIM_Base_SetConfig+0x140>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d103      	bne.n	80085a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	615a      	str	r2, [r3, #20]
}
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40012c00 	.word	0x40012c00
 80085c0:	40000400 	.word	0x40000400
 80085c4:	40000800 	.word	0x40000800
 80085c8:	40000c00 	.word	0x40000c00
 80085cc:	40013400 	.word	0x40013400
 80085d0:	40015000 	.word	0x40015000
 80085d4:	40014000 	.word	0x40014000
 80085d8:	40014400 	.word	0x40014400
 80085dc:	40014800 	.word	0x40014800

080085e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	f023 0201 	bic.w	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800860e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f023 0302 	bic.w	r3, r3, #2
 800862c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	4313      	orrs	r3, r2
 8008636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a30      	ldr	r2, [pc, #192]	; (80086fc <TIM_OC1_SetConfig+0x11c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <TIM_OC1_SetConfig+0x88>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a2f      	ldr	r2, [pc, #188]	; (8008700 <TIM_OC1_SetConfig+0x120>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00f      	beq.n	8008668 <TIM_OC1_SetConfig+0x88>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a2e      	ldr	r2, [pc, #184]	; (8008704 <TIM_OC1_SetConfig+0x124>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00b      	beq.n	8008668 <TIM_OC1_SetConfig+0x88>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a2d      	ldr	r2, [pc, #180]	; (8008708 <TIM_OC1_SetConfig+0x128>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_OC1_SetConfig+0x88>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a2c      	ldr	r2, [pc, #176]	; (800870c <TIM_OC1_SetConfig+0x12c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_OC1_SetConfig+0x88>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a2b      	ldr	r2, [pc, #172]	; (8008710 <TIM_OC1_SetConfig+0x130>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d10c      	bne.n	8008682 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f023 0308 	bic.w	r3, r3, #8
 800866e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f023 0304 	bic.w	r3, r3, #4
 8008680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1d      	ldr	r2, [pc, #116]	; (80086fc <TIM_OC1_SetConfig+0x11c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <TIM_OC1_SetConfig+0xd2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1c      	ldr	r2, [pc, #112]	; (8008700 <TIM_OC1_SetConfig+0x120>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00f      	beq.n	80086b2 <TIM_OC1_SetConfig+0xd2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a1b      	ldr	r2, [pc, #108]	; (8008704 <TIM_OC1_SetConfig+0x124>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00b      	beq.n	80086b2 <TIM_OC1_SetConfig+0xd2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1a      	ldr	r2, [pc, #104]	; (8008708 <TIM_OC1_SetConfig+0x128>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d007      	beq.n	80086b2 <TIM_OC1_SetConfig+0xd2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a19      	ldr	r2, [pc, #100]	; (800870c <TIM_OC1_SetConfig+0x12c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_OC1_SetConfig+0xd2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <TIM_OC1_SetConfig+0x130>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d111      	bne.n	80086d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40012c00 	.word	0x40012c00
 8008700:	40013400 	.word	0x40013400
 8008704:	40014000 	.word	0x40014000
 8008708:	40014400 	.word	0x40014400
 800870c:	40014800 	.word	0x40014800
 8008710:	40015000 	.word	0x40015000

08008714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f023 0210 	bic.w	r2, r3, #16
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800874e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0320 	bic.w	r3, r3, #32
 8008762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a2c      	ldr	r2, [pc, #176]	; (8008824 <TIM_OC2_SetConfig+0x110>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_OC2_SetConfig+0x74>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a2b      	ldr	r2, [pc, #172]	; (8008828 <TIM_OC2_SetConfig+0x114>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_OC2_SetConfig+0x74>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a2a      	ldr	r2, [pc, #168]	; (800882c <TIM_OC2_SetConfig+0x118>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d10d      	bne.n	80087a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <TIM_OC2_SetConfig+0x110>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d013      	beq.n	80087d4 <TIM_OC2_SetConfig+0xc0>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a1e      	ldr	r2, [pc, #120]	; (8008828 <TIM_OC2_SetConfig+0x114>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00f      	beq.n	80087d4 <TIM_OC2_SetConfig+0xc0>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <TIM_OC2_SetConfig+0x11c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00b      	beq.n	80087d4 <TIM_OC2_SetConfig+0xc0>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a1d      	ldr	r2, [pc, #116]	; (8008834 <TIM_OC2_SetConfig+0x120>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d007      	beq.n	80087d4 <TIM_OC2_SetConfig+0xc0>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a1c      	ldr	r2, [pc, #112]	; (8008838 <TIM_OC2_SetConfig+0x124>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d003      	beq.n	80087d4 <TIM_OC2_SetConfig+0xc0>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a17      	ldr	r2, [pc, #92]	; (800882c <TIM_OC2_SetConfig+0x118>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d113      	bne.n	80087fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	621a      	str	r2, [r3, #32]
}
 8008816:	bf00      	nop
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40012c00 	.word	0x40012c00
 8008828:	40013400 	.word	0x40013400
 800882c:	40015000 	.word	0x40015000
 8008830:	40014000 	.word	0x40014000
 8008834:	40014400 	.word	0x40014400
 8008838:	40014800 	.word	0x40014800

0800883c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0303 	bic.w	r3, r3, #3
 8008876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	021b      	lsls	r3, r3, #8
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a2b      	ldr	r2, [pc, #172]	; (8008948 <TIM_OC3_SetConfig+0x10c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d007      	beq.n	80088ae <TIM_OC3_SetConfig+0x72>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a2a      	ldr	r2, [pc, #168]	; (800894c <TIM_OC3_SetConfig+0x110>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d003      	beq.n	80088ae <TIM_OC3_SetConfig+0x72>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a29      	ldr	r2, [pc, #164]	; (8008950 <TIM_OC3_SetConfig+0x114>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d10d      	bne.n	80088ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a1e      	ldr	r2, [pc, #120]	; (8008948 <TIM_OC3_SetConfig+0x10c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d013      	beq.n	80088fa <TIM_OC3_SetConfig+0xbe>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a1d      	ldr	r2, [pc, #116]	; (800894c <TIM_OC3_SetConfig+0x110>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00f      	beq.n	80088fa <TIM_OC3_SetConfig+0xbe>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a1d      	ldr	r2, [pc, #116]	; (8008954 <TIM_OC3_SetConfig+0x118>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00b      	beq.n	80088fa <TIM_OC3_SetConfig+0xbe>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a1c      	ldr	r2, [pc, #112]	; (8008958 <TIM_OC3_SetConfig+0x11c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d007      	beq.n	80088fa <TIM_OC3_SetConfig+0xbe>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a1b      	ldr	r2, [pc, #108]	; (800895c <TIM_OC3_SetConfig+0x120>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d003      	beq.n	80088fa <TIM_OC3_SetConfig+0xbe>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a16      	ldr	r2, [pc, #88]	; (8008950 <TIM_OC3_SetConfig+0x114>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d113      	bne.n	8008922 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	621a      	str	r2, [r3, #32]
}
 800893c:	bf00      	nop
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	40012c00 	.word	0x40012c00
 800894c:	40013400 	.word	0x40013400
 8008950:	40015000 	.word	0x40015000
 8008954:	40014000 	.word	0x40014000
 8008958:	40014400 	.word	0x40014400
 800895c:	40014800 	.word	0x40014800

08008960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800898e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	031b      	lsls	r3, r3, #12
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a2c      	ldr	r2, [pc, #176]	; (8008a70 <TIM_OC4_SetConfig+0x110>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_OC4_SetConfig+0x74>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a2b      	ldr	r2, [pc, #172]	; (8008a74 <TIM_OC4_SetConfig+0x114>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_OC4_SetConfig+0x74>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a2a      	ldr	r2, [pc, #168]	; (8008a78 <TIM_OC4_SetConfig+0x118>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d10d      	bne.n	80089f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	031b      	lsls	r3, r3, #12
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a1f      	ldr	r2, [pc, #124]	; (8008a70 <TIM_OC4_SetConfig+0x110>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d013      	beq.n	8008a20 <TIM_OC4_SetConfig+0xc0>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <TIM_OC4_SetConfig+0x114>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00f      	beq.n	8008a20 <TIM_OC4_SetConfig+0xc0>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <TIM_OC4_SetConfig+0x11c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00b      	beq.n	8008a20 <TIM_OC4_SetConfig+0xc0>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1d      	ldr	r2, [pc, #116]	; (8008a80 <TIM_OC4_SetConfig+0x120>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d007      	beq.n	8008a20 <TIM_OC4_SetConfig+0xc0>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1c      	ldr	r2, [pc, #112]	; (8008a84 <TIM_OC4_SetConfig+0x124>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <TIM_OC4_SetConfig+0xc0>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <TIM_OC4_SetConfig+0x118>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d113      	bne.n	8008a48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	019b      	lsls	r3, r3, #6
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	019b      	lsls	r3, r3, #6
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	621a      	str	r2, [r3, #32]
}
 8008a62:	bf00      	nop
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40012c00 	.word	0x40012c00
 8008a74:	40013400 	.word	0x40013400
 8008a78:	40015000 	.word	0x40015000
 8008a7c:	40014000 	.word	0x40014000
 8008a80:	40014400 	.word	0x40014400
 8008a84:	40014800 	.word	0x40014800

08008a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008acc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	041b      	lsls	r3, r3, #16
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a19      	ldr	r2, [pc, #100]	; (8008b44 <TIM_OC5_SetConfig+0xbc>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d013      	beq.n	8008b0a <TIM_OC5_SetConfig+0x82>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <TIM_OC5_SetConfig+0xc0>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00f      	beq.n	8008b0a <TIM_OC5_SetConfig+0x82>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <TIM_OC5_SetConfig+0xc4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00b      	beq.n	8008b0a <TIM_OC5_SetConfig+0x82>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a16      	ldr	r2, [pc, #88]	; (8008b50 <TIM_OC5_SetConfig+0xc8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d007      	beq.n	8008b0a <TIM_OC5_SetConfig+0x82>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a15      	ldr	r2, [pc, #84]	; (8008b54 <TIM_OC5_SetConfig+0xcc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d003      	beq.n	8008b0a <TIM_OC5_SetConfig+0x82>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <TIM_OC5_SetConfig+0xd0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d109      	bne.n	8008b1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	621a      	str	r2, [r3, #32]
}
 8008b38:	bf00      	nop
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	40012c00 	.word	0x40012c00
 8008b48:	40013400 	.word	0x40013400
 8008b4c:	40014000 	.word	0x40014000
 8008b50:	40014400 	.word	0x40014400
 8008b54:	40014800 	.word	0x40014800
 8008b58:	40015000 	.word	0x40015000

08008b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	051b      	lsls	r3, r3, #20
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	; (8008c1c <TIM_OC6_SetConfig+0xc0>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d013      	beq.n	8008be0 <TIM_OC6_SetConfig+0x84>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a19      	ldr	r2, [pc, #100]	; (8008c20 <TIM_OC6_SetConfig+0xc4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00f      	beq.n	8008be0 <TIM_OC6_SetConfig+0x84>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a18      	ldr	r2, [pc, #96]	; (8008c24 <TIM_OC6_SetConfig+0xc8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00b      	beq.n	8008be0 <TIM_OC6_SetConfig+0x84>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a17      	ldr	r2, [pc, #92]	; (8008c28 <TIM_OC6_SetConfig+0xcc>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d007      	beq.n	8008be0 <TIM_OC6_SetConfig+0x84>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <TIM_OC6_SetConfig+0xd0>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_OC6_SetConfig+0x84>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a15      	ldr	r2, [pc, #84]	; (8008c30 <TIM_OC6_SetConfig+0xd4>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d109      	bne.n	8008bf4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	029b      	lsls	r3, r3, #10
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40012c00 	.word	0x40012c00
 8008c20:	40013400 	.word	0x40013400
 8008c24:	40014000 	.word	0x40014000
 8008c28:	40014400 	.word	0x40014400
 8008c2c:	40014800 	.word	0x40014800
 8008c30:	40015000 	.word	0x40015000

08008c34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	f023 0201 	bic.w	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4a28      	ldr	r2, [pc, #160]	; (8008d00 <TIM_TI1_SetConfig+0xcc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d01b      	beq.n	8008c9a <TIM_TI1_SetConfig+0x66>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c68:	d017      	beq.n	8008c9a <TIM_TI1_SetConfig+0x66>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4a25      	ldr	r2, [pc, #148]	; (8008d04 <TIM_TI1_SetConfig+0xd0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d013      	beq.n	8008c9a <TIM_TI1_SetConfig+0x66>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4a24      	ldr	r2, [pc, #144]	; (8008d08 <TIM_TI1_SetConfig+0xd4>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d00f      	beq.n	8008c9a <TIM_TI1_SetConfig+0x66>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4a23      	ldr	r2, [pc, #140]	; (8008d0c <TIM_TI1_SetConfig+0xd8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d00b      	beq.n	8008c9a <TIM_TI1_SetConfig+0x66>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4a22      	ldr	r2, [pc, #136]	; (8008d10 <TIM_TI1_SetConfig+0xdc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d007      	beq.n	8008c9a <TIM_TI1_SetConfig+0x66>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4a21      	ldr	r2, [pc, #132]	; (8008d14 <TIM_TI1_SetConfig+0xe0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d003      	beq.n	8008c9a <TIM_TI1_SetConfig+0x66>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a20      	ldr	r2, [pc, #128]	; (8008d18 <TIM_TI1_SetConfig+0xe4>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d101      	bne.n	8008c9e <TIM_TI1_SetConfig+0x6a>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <TIM_TI1_SetConfig+0x6c>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f023 0303 	bic.w	r3, r3, #3
 8008caa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	e003      	b.n	8008cbe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f043 0301 	orr.w	r3, r3, #1
 8008cbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	011b      	lsls	r3, r3, #4
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f023 030a 	bic.w	r3, r3, #10
 8008cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f003 030a 	and.w	r3, r3, #10
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	40012c00 	.word	0x40012c00
 8008d04:	40000400 	.word	0x40000400
 8008d08:	40000800 	.word	0x40000800
 8008d0c:	40000c00 	.word	0x40000c00
 8008d10:	40013400 	.word	0x40013400
 8008d14:	40014000 	.word	0x40014000
 8008d18:	40015000 	.word	0x40015000

08008d1c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f023 0210 	bic.w	r2, r3, #16
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	031b      	lsls	r3, r3, #12
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b087      	sub	sp, #28
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008de6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	621a      	str	r2, [r3, #32]
}
 8008e02:	bf00      	nop
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b087      	sub	sp, #28
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	607a      	str	r2, [r7, #4]
 8008e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	031b      	lsls	r3, r3, #12
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	031b      	lsls	r3, r3, #12
 8008e66:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	621a      	str	r2, [r3, #32]
}
 8008e7c:	bf00      	nop
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f003 031f 	and.w	r3, r3, #31
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1a      	ldr	r2, [r3, #32]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	43db      	mvns	r3, r3
 8008eaa:	401a      	ands	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a1a      	ldr	r2, [r3, #32]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f003 031f 	and.w	r3, r3, #31
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	621a      	str	r2, [r3, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
	...

08008ed4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <HAL_TIMEx_PWMN_Start+0x24>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	bf14      	ite	ne
 8008ef0:	2301      	movne	r3, #1
 8008ef2:	2300      	moveq	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	e022      	b.n	8008f3e <HAL_TIMEx_PWMN_Start+0x6a>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d109      	bne.n	8008f12 <HAL_TIMEx_PWMN_Start+0x3e>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	bf14      	ite	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	2300      	moveq	r3, #0
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	e015      	b.n	8008f3e <HAL_TIMEx_PWMN_Start+0x6a>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d109      	bne.n	8008f2c <HAL_TIMEx_PWMN_Start+0x58>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	bf14      	ite	ne
 8008f24:	2301      	movne	r3, #1
 8008f26:	2300      	moveq	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	e008      	b.n	8008f3e <HAL_TIMEx_PWMN_Start+0x6a>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	bf14      	ite	ne
 8008f38:	2301      	movne	r3, #1
 8008f3a:	2300      	moveq	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e073      	b.n	800902e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <HAL_TIMEx_PWMN_Start+0x82>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f54:	e013      	b.n	8008f7e <HAL_TIMEx_PWMN_Start+0xaa>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d104      	bne.n	8008f66 <HAL_TIMEx_PWMN_Start+0x92>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f64:	e00b      	b.n	8008f7e <HAL_TIMEx_PWMN_Start+0xaa>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d104      	bne.n	8008f76 <HAL_TIMEx_PWMN_Start+0xa2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f74:	e003      	b.n	8008f7e <HAL_TIMEx_PWMN_Start+0xaa>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2204      	movs	r2, #4
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f9ae 	bl	80092e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a25      	ldr	r2, [pc, #148]	; (8009038 <HAL_TIMEx_PWMN_Start+0x164>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d022      	beq.n	8008fec <HAL_TIMEx_PWMN_Start+0x118>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fae:	d01d      	beq.n	8008fec <HAL_TIMEx_PWMN_Start+0x118>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a21      	ldr	r2, [pc, #132]	; (800903c <HAL_TIMEx_PWMN_Start+0x168>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d018      	beq.n	8008fec <HAL_TIMEx_PWMN_Start+0x118>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a20      	ldr	r2, [pc, #128]	; (8009040 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d013      	beq.n	8008fec <HAL_TIMEx_PWMN_Start+0x118>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1e      	ldr	r2, [pc, #120]	; (8009044 <HAL_TIMEx_PWMN_Start+0x170>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00e      	beq.n	8008fec <HAL_TIMEx_PWMN_Start+0x118>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1d      	ldr	r2, [pc, #116]	; (8009048 <HAL_TIMEx_PWMN_Start+0x174>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d009      	beq.n	8008fec <HAL_TIMEx_PWMN_Start+0x118>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a1b      	ldr	r2, [pc, #108]	; (800904c <HAL_TIMEx_PWMN_Start+0x178>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d004      	beq.n	8008fec <HAL_TIMEx_PWMN_Start+0x118>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a1a      	ldr	r2, [pc, #104]	; (8009050 <HAL_TIMEx_PWMN_Start+0x17c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d115      	bne.n	8009018 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	4b18      	ldr	r3, [pc, #96]	; (8009054 <HAL_TIMEx_PWMN_Start+0x180>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b06      	cmp	r3, #6
 8008ffc:	d015      	beq.n	800902a <HAL_TIMEx_PWMN_Start+0x156>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009004:	d011      	beq.n	800902a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0201 	orr.w	r2, r2, #1
 8009014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009016:	e008      	b.n	800902a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0201 	orr.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	e000      	b.n	800902c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	40012c00 	.word	0x40012c00
 800903c:	40000400 	.word	0x40000400
 8009040:	40000800 	.word	0x40000800
 8009044:	40000c00 	.word	0x40000c00
 8009048:	40013400 	.word	0x40013400
 800904c:	40014000 	.word	0x40014000
 8009050:	40015000 	.word	0x40015000
 8009054:	00010007 	.word	0x00010007

08009058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800906c:	2302      	movs	r3, #2
 800906e:	e074      	b.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a34      	ldr	r2, [pc, #208]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d009      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a33      	ldr	r2, [pc, #204]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d004      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a31      	ldr	r2, [pc, #196]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d108      	bne.n	80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80090c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a21      	ldr	r2, [pc, #132]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d022      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f0:	d01d      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d018      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a1d      	ldr	r2, [pc, #116]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d013      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a1c      	ldr	r2, [pc, #112]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00e      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a15      	ldr	r2, [pc, #84]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d009      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a18      	ldr	r2, [pc, #96]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d004      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a11      	ldr	r2, [pc, #68]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d10c      	bne.n	8009148 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4313      	orrs	r3, r2
 800913e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	40012c00 	.word	0x40012c00
 800916c:	40013400 	.word	0x40013400
 8009170:	40015000 	.word	0x40015000
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40014000 	.word	0x40014000

08009184 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800919c:	2302      	movs	r3, #2
 800919e:	e096      	b.n	80092ce <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a2f      	ldr	r2, [pc, #188]	; (80092dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d009      	beq.n	8009238 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a2d      	ldr	r2, [pc, #180]	; (80092e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d004      	beq.n	8009238 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a2c      	ldr	r2, [pc, #176]	; (80092e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d106      	bne.n	8009246 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a24      	ldr	r2, [pc, #144]	; (80092dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d009      	beq.n	8009264 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a22      	ldr	r2, [pc, #136]	; (80092e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d004      	beq.n	8009264 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a21      	ldr	r2, [pc, #132]	; (80092e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d12b      	bne.n	80092bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	051b      	lsls	r3, r3, #20
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a11      	ldr	r2, [pc, #68]	; (80092dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d009      	beq.n	80092ae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a10      	ldr	r2, [pc, #64]	; (80092e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d004      	beq.n	80092ae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a0e      	ldr	r2, [pc, #56]	; (80092e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d106      	bne.n	80092bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40013400 	.word	0x40013400
 80092e4:	40015000 	.word	0x40015000

080092e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 031f 	and.w	r3, r3, #31
 80092fa:	2204      	movs	r2, #4
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1a      	ldr	r2, [r3, #32]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	43db      	mvns	r3, r3
 800930a:	401a      	ands	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a1a      	ldr	r2, [r3, #32]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	fa01 f303 	lsl.w	r3, r1, r3
 8009320:	431a      	orrs	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e042      	b.n	80093ca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7f9 f95a 	bl	8002610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2224      	movs	r2, #36	; 0x24
 8009360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0201 	bic.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f82d 	bl	80093d4 <UART_SetConfig>
 800937a:	4603      	mov	r3, r0
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e022      	b.n	80093ca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fb1d 	bl	80099cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f042 0201 	orr.w	r2, r2, #1
 80093c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fba4 	bl	8009b10 <UART_CheckIdleState>
 80093c8:	4603      	mov	r3, r0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d8:	b08c      	sub	sp, #48	; 0x30
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	431a      	orrs	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4baa      	ldr	r3, [pc, #680]	; (80096ac <UART_SetConfig+0x2d8>)
 8009404:	4013      	ands	r3, r2
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	6812      	ldr	r2, [r2, #0]
 800940a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800940c:	430b      	orrs	r3, r1
 800940e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a9f      	ldr	r2, [pc, #636]	; (80096b0 <UART_SetConfig+0x2dc>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943c:	4313      	orrs	r3, r2
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800944a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009454:	430b      	orrs	r3, r1
 8009456:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945e:	f023 010f 	bic.w	r1, r3, #15
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a90      	ldr	r2, [pc, #576]	; (80096b4 <UART_SetConfig+0x2e0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d125      	bne.n	80094c4 <UART_SetConfig+0xf0>
 8009478:	4b8f      	ldr	r3, [pc, #572]	; (80096b8 <UART_SetConfig+0x2e4>)
 800947a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	2b03      	cmp	r3, #3
 8009484:	d81a      	bhi.n	80094bc <UART_SetConfig+0xe8>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <UART_SetConfig+0xb8>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	0800949d 	.word	0x0800949d
 8009490:	080094ad 	.word	0x080094ad
 8009494:	080094a5 	.word	0x080094a5
 8009498:	080094b5 	.word	0x080094b5
 800949c:	2301      	movs	r3, #1
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094a2:	e116      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80094a4:	2302      	movs	r3, #2
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094aa:	e112      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80094ac:	2304      	movs	r3, #4
 80094ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094b2:	e10e      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80094b4:	2308      	movs	r3, #8
 80094b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094ba:	e10a      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80094bc:	2310      	movs	r3, #16
 80094be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094c2:	e106      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a7c      	ldr	r2, [pc, #496]	; (80096bc <UART_SetConfig+0x2e8>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d138      	bne.n	8009540 <UART_SetConfig+0x16c>
 80094ce:	4b7a      	ldr	r3, [pc, #488]	; (80096b8 <UART_SetConfig+0x2e4>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d4:	f003 030c 	and.w	r3, r3, #12
 80094d8:	2b0c      	cmp	r3, #12
 80094da:	d82d      	bhi.n	8009538 <UART_SetConfig+0x164>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <UART_SetConfig+0x110>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009519 	.word	0x08009519
 80094e8:	08009539 	.word	0x08009539
 80094ec:	08009539 	.word	0x08009539
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009529 	.word	0x08009529
 80094f8:	08009539 	.word	0x08009539
 80094fc:	08009539 	.word	0x08009539
 8009500:	08009539 	.word	0x08009539
 8009504:	08009521 	.word	0x08009521
 8009508:	08009539 	.word	0x08009539
 800950c:	08009539 	.word	0x08009539
 8009510:	08009539 	.word	0x08009539
 8009514:	08009531 	.word	0x08009531
 8009518:	2300      	movs	r3, #0
 800951a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800951e:	e0d8      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009520:	2302      	movs	r3, #2
 8009522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009526:	e0d4      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009528:	2304      	movs	r3, #4
 800952a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800952e:	e0d0      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009530:	2308      	movs	r3, #8
 8009532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009536:	e0cc      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800953e:	e0c8      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a5e      	ldr	r2, [pc, #376]	; (80096c0 <UART_SetConfig+0x2ec>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d125      	bne.n	8009596 <UART_SetConfig+0x1c2>
 800954a:	4b5b      	ldr	r3, [pc, #364]	; (80096b8 <UART_SetConfig+0x2e4>)
 800954c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009550:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009554:	2b30      	cmp	r3, #48	; 0x30
 8009556:	d016      	beq.n	8009586 <UART_SetConfig+0x1b2>
 8009558:	2b30      	cmp	r3, #48	; 0x30
 800955a:	d818      	bhi.n	800958e <UART_SetConfig+0x1ba>
 800955c:	2b20      	cmp	r3, #32
 800955e:	d00a      	beq.n	8009576 <UART_SetConfig+0x1a2>
 8009560:	2b20      	cmp	r3, #32
 8009562:	d814      	bhi.n	800958e <UART_SetConfig+0x1ba>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <UART_SetConfig+0x19a>
 8009568:	2b10      	cmp	r3, #16
 800956a:	d008      	beq.n	800957e <UART_SetConfig+0x1aa>
 800956c:	e00f      	b.n	800958e <UART_SetConfig+0x1ba>
 800956e:	2300      	movs	r3, #0
 8009570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009574:	e0ad      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009576:	2302      	movs	r3, #2
 8009578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800957c:	e0a9      	b.n	80096d2 <UART_SetConfig+0x2fe>
 800957e:	2304      	movs	r3, #4
 8009580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009584:	e0a5      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009586:	2308      	movs	r3, #8
 8009588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800958c:	e0a1      	b.n	80096d2 <UART_SetConfig+0x2fe>
 800958e:	2310      	movs	r3, #16
 8009590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009594:	e09d      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a4a      	ldr	r2, [pc, #296]	; (80096c4 <UART_SetConfig+0x2f0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d125      	bne.n	80095ec <UART_SetConfig+0x218>
 80095a0:	4b45      	ldr	r3, [pc, #276]	; (80096b8 <UART_SetConfig+0x2e4>)
 80095a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095aa:	2bc0      	cmp	r3, #192	; 0xc0
 80095ac:	d016      	beq.n	80095dc <UART_SetConfig+0x208>
 80095ae:	2bc0      	cmp	r3, #192	; 0xc0
 80095b0:	d818      	bhi.n	80095e4 <UART_SetConfig+0x210>
 80095b2:	2b80      	cmp	r3, #128	; 0x80
 80095b4:	d00a      	beq.n	80095cc <UART_SetConfig+0x1f8>
 80095b6:	2b80      	cmp	r3, #128	; 0x80
 80095b8:	d814      	bhi.n	80095e4 <UART_SetConfig+0x210>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <UART_SetConfig+0x1f0>
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d008      	beq.n	80095d4 <UART_SetConfig+0x200>
 80095c2:	e00f      	b.n	80095e4 <UART_SetConfig+0x210>
 80095c4:	2300      	movs	r3, #0
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ca:	e082      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80095cc:	2302      	movs	r3, #2
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d2:	e07e      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80095d4:	2304      	movs	r3, #4
 80095d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095da:	e07a      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80095dc:	2308      	movs	r3, #8
 80095de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095e2:	e076      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80095e4:	2310      	movs	r3, #16
 80095e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ea:	e072      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a35      	ldr	r2, [pc, #212]	; (80096c8 <UART_SetConfig+0x2f4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d12a      	bne.n	800964c <UART_SetConfig+0x278>
 80095f6:	4b30      	ldr	r3, [pc, #192]	; (80096b8 <UART_SetConfig+0x2e4>)
 80095f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009604:	d01a      	beq.n	800963c <UART_SetConfig+0x268>
 8009606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800960a:	d81b      	bhi.n	8009644 <UART_SetConfig+0x270>
 800960c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009610:	d00c      	beq.n	800962c <UART_SetConfig+0x258>
 8009612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009616:	d815      	bhi.n	8009644 <UART_SetConfig+0x270>
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <UART_SetConfig+0x250>
 800961c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009620:	d008      	beq.n	8009634 <UART_SetConfig+0x260>
 8009622:	e00f      	b.n	8009644 <UART_SetConfig+0x270>
 8009624:	2300      	movs	r3, #0
 8009626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800962a:	e052      	b.n	80096d2 <UART_SetConfig+0x2fe>
 800962c:	2302      	movs	r3, #2
 800962e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009632:	e04e      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009634:	2304      	movs	r3, #4
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800963a:	e04a      	b.n	80096d2 <UART_SetConfig+0x2fe>
 800963c:	2308      	movs	r3, #8
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009642:	e046      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009644:	2310      	movs	r3, #16
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800964a:	e042      	b.n	80096d2 <UART_SetConfig+0x2fe>
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a17      	ldr	r2, [pc, #92]	; (80096b0 <UART_SetConfig+0x2dc>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d13a      	bne.n	80096cc <UART_SetConfig+0x2f8>
 8009656:	4b18      	ldr	r3, [pc, #96]	; (80096b8 <UART_SetConfig+0x2e4>)
 8009658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009664:	d01a      	beq.n	800969c <UART_SetConfig+0x2c8>
 8009666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800966a:	d81b      	bhi.n	80096a4 <UART_SetConfig+0x2d0>
 800966c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009670:	d00c      	beq.n	800968c <UART_SetConfig+0x2b8>
 8009672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009676:	d815      	bhi.n	80096a4 <UART_SetConfig+0x2d0>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <UART_SetConfig+0x2b0>
 800967c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009680:	d008      	beq.n	8009694 <UART_SetConfig+0x2c0>
 8009682:	e00f      	b.n	80096a4 <UART_SetConfig+0x2d0>
 8009684:	2300      	movs	r3, #0
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800968a:	e022      	b.n	80096d2 <UART_SetConfig+0x2fe>
 800968c:	2302      	movs	r3, #2
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009692:	e01e      	b.n	80096d2 <UART_SetConfig+0x2fe>
 8009694:	2304      	movs	r3, #4
 8009696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800969a:	e01a      	b.n	80096d2 <UART_SetConfig+0x2fe>
 800969c:	2308      	movs	r3, #8
 800969e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a2:	e016      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80096a4:	2310      	movs	r3, #16
 80096a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096aa:	e012      	b.n	80096d2 <UART_SetConfig+0x2fe>
 80096ac:	cfff69f3 	.word	0xcfff69f3
 80096b0:	40008000 	.word	0x40008000
 80096b4:	40013800 	.word	0x40013800
 80096b8:	40021000 	.word	0x40021000
 80096bc:	40004400 	.word	0x40004400
 80096c0:	40004800 	.word	0x40004800
 80096c4:	40004c00 	.word	0x40004c00
 80096c8:	40005000 	.word	0x40005000
 80096cc:	2310      	movs	r3, #16
 80096ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4aae      	ldr	r2, [pc, #696]	; (8009990 <UART_SetConfig+0x5bc>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	f040 8097 	bne.w	800980c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096e2:	2b08      	cmp	r3, #8
 80096e4:	d823      	bhi.n	800972e <UART_SetConfig+0x35a>
 80096e6:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <UART_SetConfig+0x318>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	08009711 	.word	0x08009711
 80096f0:	0800972f 	.word	0x0800972f
 80096f4:	08009719 	.word	0x08009719
 80096f8:	0800972f 	.word	0x0800972f
 80096fc:	0800971f 	.word	0x0800971f
 8009700:	0800972f 	.word	0x0800972f
 8009704:	0800972f 	.word	0x0800972f
 8009708:	0800972f 	.word	0x0800972f
 800970c:	08009727 	.word	0x08009727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009710:	f7fd fdd4 	bl	80072bc <HAL_RCC_GetPCLK1Freq>
 8009714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009716:	e010      	b.n	800973a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009718:	4b9e      	ldr	r3, [pc, #632]	; (8009994 <UART_SetConfig+0x5c0>)
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800971c:	e00d      	b.n	800973a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800971e:	f7fd fd5f 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8009722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009724:	e009      	b.n	800973a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800972a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800972c:	e005      	b.n	800973a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8130 	beq.w	80099a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	4a94      	ldr	r2, [pc, #592]	; (8009998 <UART_SetConfig+0x5c4>)
 8009748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800974c:	461a      	mov	r2, r3
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	fbb3 f3f2 	udiv	r3, r3, r2
 8009754:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	4613      	mov	r3, r2
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4413      	add	r3, r2
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	429a      	cmp	r2, r3
 8009764:	d305      	bcc.n	8009772 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	429a      	cmp	r2, r3
 8009770:	d903      	bls.n	800977a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009778:	e113      	b.n	80099a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	2200      	movs	r2, #0
 800977e:	60bb      	str	r3, [r7, #8]
 8009780:	60fa      	str	r2, [r7, #12]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	4a84      	ldr	r2, [pc, #528]	; (8009998 <UART_SetConfig+0x5c4>)
 8009788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978c:	b29b      	uxth	r3, r3
 800978e:	2200      	movs	r2, #0
 8009790:	603b      	str	r3, [r7, #0]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009798:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800979c:	f7f6 fd3c 	bl	8000218 <__aeabi_uldivmod>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	f04f 0300 	mov.w	r3, #0
 80097b0:	020b      	lsls	r3, r1, #8
 80097b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097b6:	0202      	lsls	r2, r0, #8
 80097b8:	6979      	ldr	r1, [r7, #20]
 80097ba:	6849      	ldr	r1, [r1, #4]
 80097bc:	0849      	lsrs	r1, r1, #1
 80097be:	2000      	movs	r0, #0
 80097c0:	460c      	mov	r4, r1
 80097c2:	4605      	mov	r5, r0
 80097c4:	eb12 0804 	adds.w	r8, r2, r4
 80097c8:	eb43 0905 	adc.w	r9, r3, r5
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	469a      	mov	sl, r3
 80097d4:	4693      	mov	fp, r2
 80097d6:	4652      	mov	r2, sl
 80097d8:	465b      	mov	r3, fp
 80097da:	4640      	mov	r0, r8
 80097dc:	4649      	mov	r1, r9
 80097de:	f7f6 fd1b 	bl	8000218 <__aeabi_uldivmod>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4613      	mov	r3, r2
 80097e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097f0:	d308      	bcc.n	8009804 <UART_SetConfig+0x430>
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f8:	d204      	bcs.n	8009804 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6a3a      	ldr	r2, [r7, #32]
 8009800:	60da      	str	r2, [r3, #12]
 8009802:	e0ce      	b.n	80099a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800980a:	e0ca      	b.n	80099a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009814:	d166      	bne.n	80098e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800981a:	2b08      	cmp	r3, #8
 800981c:	d827      	bhi.n	800986e <UART_SetConfig+0x49a>
 800981e:	a201      	add	r2, pc, #4	; (adr r2, 8009824 <UART_SetConfig+0x450>)
 8009820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009824:	08009849 	.word	0x08009849
 8009828:	08009851 	.word	0x08009851
 800982c:	08009859 	.word	0x08009859
 8009830:	0800986f 	.word	0x0800986f
 8009834:	0800985f 	.word	0x0800985f
 8009838:	0800986f 	.word	0x0800986f
 800983c:	0800986f 	.word	0x0800986f
 8009840:	0800986f 	.word	0x0800986f
 8009844:	08009867 	.word	0x08009867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009848:	f7fd fd38 	bl	80072bc <HAL_RCC_GetPCLK1Freq>
 800984c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800984e:	e014      	b.n	800987a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009850:	f7fd fd4a 	bl	80072e8 <HAL_RCC_GetPCLK2Freq>
 8009854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009856:	e010      	b.n	800987a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009858:	4b4e      	ldr	r3, [pc, #312]	; (8009994 <UART_SetConfig+0x5c0>)
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800985c:	e00d      	b.n	800987a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800985e:	f7fd fcbf 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8009862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009864:	e009      	b.n	800987a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800986a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800986c:	e005      	b.n	800987a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8090 	beq.w	80099a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	4a44      	ldr	r2, [pc, #272]	; (8009998 <UART_SetConfig+0x5c4>)
 8009888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800988c:	461a      	mov	r2, r3
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	fbb3 f3f2 	udiv	r3, r3, r2
 8009894:	005a      	lsls	r2, r3, #1
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	085b      	lsrs	r3, r3, #1
 800989c:	441a      	add	r2, r3
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	2b0f      	cmp	r3, #15
 80098ac:	d916      	bls.n	80098dc <UART_SetConfig+0x508>
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b4:	d212      	bcs.n	80098dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	f023 030f 	bic.w	r3, r3, #15
 80098be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	085b      	lsrs	r3, r3, #1
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	f003 0307 	and.w	r3, r3, #7
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	8bfb      	ldrh	r3, [r7, #30]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	8bfa      	ldrh	r2, [r7, #30]
 80098d8:	60da      	str	r2, [r3, #12]
 80098da:	e062      	b.n	80099a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80098e2:	e05e      	b.n	80099a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d828      	bhi.n	800993e <UART_SetConfig+0x56a>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <UART_SetConfig+0x520>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009921 	.word	0x08009921
 80098fc:	08009929 	.word	0x08009929
 8009900:	0800993f 	.word	0x0800993f
 8009904:	0800992f 	.word	0x0800992f
 8009908:	0800993f 	.word	0x0800993f
 800990c:	0800993f 	.word	0x0800993f
 8009910:	0800993f 	.word	0x0800993f
 8009914:	08009937 	.word	0x08009937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009918:	f7fd fcd0 	bl	80072bc <HAL_RCC_GetPCLK1Freq>
 800991c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800991e:	e014      	b.n	800994a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009920:	f7fd fce2 	bl	80072e8 <HAL_RCC_GetPCLK2Freq>
 8009924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009926:	e010      	b.n	800994a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009928:	4b1a      	ldr	r3, [pc, #104]	; (8009994 <UART_SetConfig+0x5c0>)
 800992a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800992c:	e00d      	b.n	800994a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800992e:	f7fd fc57 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8009932:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009934:	e009      	b.n	800994a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800993c:	e005      	b.n	800994a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009948:	bf00      	nop
    }

    if (pclk != 0U)
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d028      	beq.n	80099a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	4a10      	ldr	r2, [pc, #64]	; (8009998 <UART_SetConfig+0x5c4>)
 8009956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800995a:	461a      	mov	r2, r3
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	085b      	lsrs	r3, r3, #1
 8009968:	441a      	add	r2, r3
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009972:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	2b0f      	cmp	r3, #15
 8009978:	d910      	bls.n	800999c <UART_SetConfig+0x5c8>
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009980:	d20c      	bcs.n	800999c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	b29a      	uxth	r2, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60da      	str	r2, [r3, #12]
 800998c:	e009      	b.n	80099a2 <UART_SetConfig+0x5ce>
 800998e:	bf00      	nop
 8009990:	40008000 	.word	0x40008000
 8009994:	00f42400 	.word	0x00f42400
 8009998:	0800af84 	.word	0x0800af84
      }
      else
      {
        ret = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2200      	movs	r2, #0
 80099b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2200      	movs	r2, #0
 80099bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80099be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3730      	adds	r7, #48	; 0x30
 80099c6:	46bd      	mov	sp, r7
 80099c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080099cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00a      	beq.n	80099f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00a      	beq.n	8009a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3e:	f003 0308 	and.w	r3, r3, #8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a60:	f003 0310 	and.w	r3, r3, #16
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00a      	beq.n	8009a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01a      	beq.n	8009ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aca:	d10a      	bne.n	8009ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	605a      	str	r2, [r3, #4]
  }
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af02      	add	r7, sp, #8
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b20:	f7f9 f8f0 	bl	8002d04 <HAL_GetTick>
 8009b24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b08      	cmp	r3, #8
 8009b32:	d10e      	bne.n	8009b52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f82f 	bl	8009ba6 <UART_WaitOnFlagUntilTimeout>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e025      	b.n	8009b9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d10e      	bne.n	8009b7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f819 	bl	8009ba6 <UART_WaitOnFlagUntilTimeout>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e00f      	b.n	8009b9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b09c      	sub	sp, #112	; 0x70
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	603b      	str	r3, [r7, #0]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bb6:	e0a9      	b.n	8009d0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	f000 80a5 	beq.w	8009d0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc2:	f7f9 f89f 	bl	8002d04 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d302      	bcc.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d140      	bne.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bec:	667b      	str	r3, [r7, #100]	; 0x64
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e6      	bne.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1c:	f023 0301 	bic.w	r3, r3, #1
 8009c20:	663b      	str	r3, [r7, #96]	; 0x60
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3308      	adds	r3, #8
 8009c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e5      	bne.n	8009c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e069      	b.n	8009d2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0304 	and.w	r3, r3, #4
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d051      	beq.n	8009d0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c76:	d149      	bne.n	8009d0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e6      	bne.n	8009c82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3308      	adds	r3, #8
 8009cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	e853 3f00 	ldrex	r3, [r3]
 8009cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cd4:	623a      	str	r2, [r7, #32]
 8009cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	69f9      	ldr	r1, [r7, #28]
 8009cda:	6a3a      	ldr	r2, [r7, #32]
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e5      	bne.n	8009cb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e010      	b.n	8009d2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69da      	ldr	r2, [r3, #28]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	4013      	ands	r3, r2
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	bf0c      	ite	eq
 8009d1c:	2301      	moveq	r3, #1
 8009d1e:	2300      	movne	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	461a      	mov	r2, r3
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	f43f af46 	beq.w	8009bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3770      	adds	r7, #112	; 0x70
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d101      	bne.n	8009d4c <HAL_UARTEx_DisableFifoMode+0x16>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e027      	b.n	8009d9c <HAL_UARTEx_DisableFifoMode+0x66>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2224      	movs	r2, #36	; 0x24
 8009d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0201 	bic.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d101      	bne.n	8009dc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e02d      	b.n	8009e1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2224      	movs	r2, #36	; 0x24
 8009dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0201 	bic.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f84f 	bl	8009ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d101      	bne.n	8009e3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e02d      	b.n	8009e98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2224      	movs	r2, #36	; 0x24
 8009e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0201 	bic.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f811 	bl	8009ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d108      	bne.n	8009ec2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ec0:	e031      	b.n	8009f26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ec2:	2308      	movs	r3, #8
 8009ec4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ec6:	2308      	movs	r3, #8
 8009ec8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	0e5b      	lsrs	r3, r3, #25
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	0f5b      	lsrs	r3, r3, #29
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f003 0307 	and.w	r3, r3, #7
 8009ee8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	7b3a      	ldrb	r2, [r7, #12]
 8009eee:	4911      	ldr	r1, [pc, #68]	; (8009f34 <UARTEx_SetNbDataToProcess+0x94>)
 8009ef0:	5c8a      	ldrb	r2, [r1, r2]
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ef6:	7b3a      	ldrb	r2, [r7, #12]
 8009ef8:	490f      	ldr	r1, [pc, #60]	; (8009f38 <UARTEx_SetNbDataToProcess+0x98>)
 8009efa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009efc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	7b7a      	ldrb	r2, [r7, #13]
 8009f0c:	4909      	ldr	r1, [pc, #36]	; (8009f34 <UARTEx_SetNbDataToProcess+0x94>)
 8009f0e:	5c8a      	ldrb	r2, [r1, r2]
 8009f10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f14:	7b7a      	ldrb	r2, [r7, #13]
 8009f16:	4908      	ldr	r1, [pc, #32]	; (8009f38 <UARTEx_SetNbDataToProcess+0x98>)
 8009f18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	0800af9c 	.word	0x0800af9c
 8009f38:	0800afa4 	.word	0x0800afa4

08009f3c <__errno>:
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <__errno+0x8>)
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	2000000c 	.word	0x2000000c

08009f48 <__libc_init_array>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	4d0d      	ldr	r5, [pc, #52]	; (8009f80 <__libc_init_array+0x38>)
 8009f4c:	4c0d      	ldr	r4, [pc, #52]	; (8009f84 <__libc_init_array+0x3c>)
 8009f4e:	1b64      	subs	r4, r4, r5
 8009f50:	10a4      	asrs	r4, r4, #2
 8009f52:	2600      	movs	r6, #0
 8009f54:	42a6      	cmp	r6, r4
 8009f56:	d109      	bne.n	8009f6c <__libc_init_array+0x24>
 8009f58:	4d0b      	ldr	r5, [pc, #44]	; (8009f88 <__libc_init_array+0x40>)
 8009f5a:	4c0c      	ldr	r4, [pc, #48]	; (8009f8c <__libc_init_array+0x44>)
 8009f5c:	f000 fffa 	bl	800af54 <_init>
 8009f60:	1b64      	subs	r4, r4, r5
 8009f62:	10a4      	asrs	r4, r4, #2
 8009f64:	2600      	movs	r6, #0
 8009f66:	42a6      	cmp	r6, r4
 8009f68:	d105      	bne.n	8009f76 <__libc_init_array+0x2e>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f70:	4798      	blx	r3
 8009f72:	3601      	adds	r6, #1
 8009f74:	e7ee      	b.n	8009f54 <__libc_init_array+0xc>
 8009f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f7a:	4798      	blx	r3
 8009f7c:	3601      	adds	r6, #1
 8009f7e:	e7f2      	b.n	8009f66 <__libc_init_array+0x1e>
 8009f80:	0800b3c4 	.word	0x0800b3c4
 8009f84:	0800b3c4 	.word	0x0800b3c4
 8009f88:	0800b3c4 	.word	0x0800b3c4
 8009f8c:	0800b3c8 	.word	0x0800b3c8

08009f90 <memset>:
 8009f90:	4402      	add	r2, r0
 8009f92:	4603      	mov	r3, r0
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d100      	bne.n	8009f9a <memset+0xa>
 8009f98:	4770      	bx	lr
 8009f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f9e:	e7f9      	b.n	8009f94 <memset+0x4>

08009fa0 <cosf>:
 8009fa0:	ee10 3a10 	vmov	r3, s0
 8009fa4:	b507      	push	{r0, r1, r2, lr}
 8009fa6:	4a1e      	ldr	r2, [pc, #120]	; (800a020 <cosf+0x80>)
 8009fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fac:	4293      	cmp	r3, r2
 8009fae:	dc06      	bgt.n	8009fbe <cosf+0x1e>
 8009fb0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a024 <cosf+0x84>
 8009fb4:	b003      	add	sp, #12
 8009fb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fba:	f000 bb1d 	b.w	800a5f8 <__kernel_cosf>
 8009fbe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009fc2:	db04      	blt.n	8009fce <cosf+0x2e>
 8009fc4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009fc8:	b003      	add	sp, #12
 8009fca:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fce:	4668      	mov	r0, sp
 8009fd0:	f000 f9d2 	bl	800a378 <__ieee754_rem_pio2f>
 8009fd4:	f000 0003 	and.w	r0, r0, #3
 8009fd8:	2801      	cmp	r0, #1
 8009fda:	d009      	beq.n	8009ff0 <cosf+0x50>
 8009fdc:	2802      	cmp	r0, #2
 8009fde:	d010      	beq.n	800a002 <cosf+0x62>
 8009fe0:	b9b0      	cbnz	r0, 800a010 <cosf+0x70>
 8009fe2:	eddd 0a01 	vldr	s1, [sp, #4]
 8009fe6:	ed9d 0a00 	vldr	s0, [sp]
 8009fea:	f000 fb05 	bl	800a5f8 <__kernel_cosf>
 8009fee:	e7eb      	b.n	8009fc8 <cosf+0x28>
 8009ff0:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ff4:	ed9d 0a00 	vldr	s0, [sp]
 8009ff8:	f000 fdd4 	bl	800aba4 <__kernel_sinf>
 8009ffc:	eeb1 0a40 	vneg.f32	s0, s0
 800a000:	e7e2      	b.n	8009fc8 <cosf+0x28>
 800a002:	eddd 0a01 	vldr	s1, [sp, #4]
 800a006:	ed9d 0a00 	vldr	s0, [sp]
 800a00a:	f000 faf5 	bl	800a5f8 <__kernel_cosf>
 800a00e:	e7f5      	b.n	8009ffc <cosf+0x5c>
 800a010:	eddd 0a01 	vldr	s1, [sp, #4]
 800a014:	ed9d 0a00 	vldr	s0, [sp]
 800a018:	2001      	movs	r0, #1
 800a01a:	f000 fdc3 	bl	800aba4 <__kernel_sinf>
 800a01e:	e7d3      	b.n	8009fc8 <cosf+0x28>
 800a020:	3f490fd8 	.word	0x3f490fd8
 800a024:	00000000 	.word	0x00000000

0800a028 <sinf>:
 800a028:	ee10 3a10 	vmov	r3, s0
 800a02c:	b507      	push	{r0, r1, r2, lr}
 800a02e:	4a1f      	ldr	r2, [pc, #124]	; (800a0ac <sinf+0x84>)
 800a030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a034:	4293      	cmp	r3, r2
 800a036:	dc07      	bgt.n	800a048 <sinf+0x20>
 800a038:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a0b0 <sinf+0x88>
 800a03c:	2000      	movs	r0, #0
 800a03e:	b003      	add	sp, #12
 800a040:	f85d eb04 	ldr.w	lr, [sp], #4
 800a044:	f000 bdae 	b.w	800aba4 <__kernel_sinf>
 800a048:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a04c:	db04      	blt.n	800a058 <sinf+0x30>
 800a04e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a052:	b003      	add	sp, #12
 800a054:	f85d fb04 	ldr.w	pc, [sp], #4
 800a058:	4668      	mov	r0, sp
 800a05a:	f000 f98d 	bl	800a378 <__ieee754_rem_pio2f>
 800a05e:	f000 0003 	and.w	r0, r0, #3
 800a062:	2801      	cmp	r0, #1
 800a064:	d00a      	beq.n	800a07c <sinf+0x54>
 800a066:	2802      	cmp	r0, #2
 800a068:	d00f      	beq.n	800a08a <sinf+0x62>
 800a06a:	b9c0      	cbnz	r0, 800a09e <sinf+0x76>
 800a06c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a070:	ed9d 0a00 	vldr	s0, [sp]
 800a074:	2001      	movs	r0, #1
 800a076:	f000 fd95 	bl	800aba4 <__kernel_sinf>
 800a07a:	e7ea      	b.n	800a052 <sinf+0x2a>
 800a07c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a080:	ed9d 0a00 	vldr	s0, [sp]
 800a084:	f000 fab8 	bl	800a5f8 <__kernel_cosf>
 800a088:	e7e3      	b.n	800a052 <sinf+0x2a>
 800a08a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a08e:	ed9d 0a00 	vldr	s0, [sp]
 800a092:	2001      	movs	r0, #1
 800a094:	f000 fd86 	bl	800aba4 <__kernel_sinf>
 800a098:	eeb1 0a40 	vneg.f32	s0, s0
 800a09c:	e7d9      	b.n	800a052 <sinf+0x2a>
 800a09e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0a2:	ed9d 0a00 	vldr	s0, [sp]
 800a0a6:	f000 faa7 	bl	800a5f8 <__kernel_cosf>
 800a0aa:	e7f5      	b.n	800a098 <sinf+0x70>
 800a0ac:	3f490fd8 	.word	0x3f490fd8
 800a0b0:	00000000 	.word	0x00000000

0800a0b4 <atan2f>:
 800a0b4:	f000 b83e 	b.w	800a134 <__ieee754_atan2f>

0800a0b8 <fmodf>:
 800a0b8:	b508      	push	{r3, lr}
 800a0ba:	ed2d 8b02 	vpush	{d8}
 800a0be:	eef0 8a40 	vmov.f32	s17, s0
 800a0c2:	eeb0 8a60 	vmov.f32	s16, s1
 800a0c6:	f000 f8d5 	bl	800a274 <__ieee754_fmodf>
 800a0ca:	eef4 8a48 	vcmp.f32	s17, s16
 800a0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d2:	d60c      	bvs.n	800a0ee <fmodf+0x36>
 800a0d4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a0f4 <fmodf+0x3c>
 800a0d8:	eeb4 8a68 	vcmp.f32	s16, s17
 800a0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e0:	d105      	bne.n	800a0ee <fmodf+0x36>
 800a0e2:	f7ff ff2b 	bl	8009f3c <__errno>
 800a0e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a0ea:	2321      	movs	r3, #33	; 0x21
 800a0ec:	6003      	str	r3, [r0, #0]
 800a0ee:	ecbd 8b02 	vpop	{d8}
 800a0f2:	bd08      	pop	{r3, pc}
 800a0f4:	00000000 	.word	0x00000000

0800a0f8 <sqrtf>:
 800a0f8:	b508      	push	{r3, lr}
 800a0fa:	ed2d 8b02 	vpush	{d8}
 800a0fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a102:	f000 fa75 	bl	800a5f0 <__ieee754_sqrtf>
 800a106:	eeb4 8a48 	vcmp.f32	s16, s16
 800a10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10e:	d60c      	bvs.n	800a12a <sqrtf+0x32>
 800a110:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a130 <sqrtf+0x38>
 800a114:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	d505      	bpl.n	800a12a <sqrtf+0x32>
 800a11e:	f7ff ff0d 	bl	8009f3c <__errno>
 800a122:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a126:	2321      	movs	r3, #33	; 0x21
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	ecbd 8b02 	vpop	{d8}
 800a12e:	bd08      	pop	{r3, pc}
 800a130:	00000000 	.word	0x00000000

0800a134 <__ieee754_atan2f>:
 800a134:	ee10 2a90 	vmov	r2, s1
 800a138:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a13c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a140:	b510      	push	{r4, lr}
 800a142:	eef0 7a40 	vmov.f32	s15, s0
 800a146:	dc06      	bgt.n	800a156 <__ieee754_atan2f+0x22>
 800a148:	ee10 0a10 	vmov	r0, s0
 800a14c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a150:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a154:	dd04      	ble.n	800a160 <__ieee754_atan2f+0x2c>
 800a156:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a15a:	eeb0 0a67 	vmov.f32	s0, s15
 800a15e:	bd10      	pop	{r4, pc}
 800a160:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a164:	d103      	bne.n	800a16e <__ieee754_atan2f+0x3a>
 800a166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a16a:	f000 bd63 	b.w	800ac34 <atanf>
 800a16e:	1794      	asrs	r4, r2, #30
 800a170:	f004 0402 	and.w	r4, r4, #2
 800a174:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a178:	b943      	cbnz	r3, 800a18c <__ieee754_atan2f+0x58>
 800a17a:	2c02      	cmp	r4, #2
 800a17c:	d05e      	beq.n	800a23c <__ieee754_atan2f+0x108>
 800a17e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a250 <__ieee754_atan2f+0x11c>
 800a182:	2c03      	cmp	r4, #3
 800a184:	bf08      	it	eq
 800a186:	eef0 7a47 	vmoveq.f32	s15, s14
 800a18a:	e7e6      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a18c:	b941      	cbnz	r1, 800a1a0 <__ieee754_atan2f+0x6c>
 800a18e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a254 <__ieee754_atan2f+0x120>
 800a192:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a258 <__ieee754_atan2f+0x124>
 800a196:	2800      	cmp	r0, #0
 800a198:	bfb8      	it	lt
 800a19a:	eef0 7a40 	vmovlt.f32	s15, s0
 800a19e:	e7dc      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a1a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1a4:	d110      	bne.n	800a1c8 <__ieee754_atan2f+0x94>
 800a1a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800a1ae:	d107      	bne.n	800a1c0 <__ieee754_atan2f+0x8c>
 800a1b0:	2c02      	cmp	r4, #2
 800a1b2:	d846      	bhi.n	800a242 <__ieee754_atan2f+0x10e>
 800a1b4:	4b29      	ldr	r3, [pc, #164]	; (800a25c <__ieee754_atan2f+0x128>)
 800a1b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1ba:	edd4 7a00 	vldr	s15, [r4]
 800a1be:	e7cc      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a1c0:	2c02      	cmp	r4, #2
 800a1c2:	d841      	bhi.n	800a248 <__ieee754_atan2f+0x114>
 800a1c4:	4b26      	ldr	r3, [pc, #152]	; (800a260 <__ieee754_atan2f+0x12c>)
 800a1c6:	e7f6      	b.n	800a1b6 <__ieee754_atan2f+0x82>
 800a1c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1cc:	d0df      	beq.n	800a18e <__ieee754_atan2f+0x5a>
 800a1ce:	1a5b      	subs	r3, r3, r1
 800a1d0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a1d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a1d8:	da1a      	bge.n	800a210 <__ieee754_atan2f+0xdc>
 800a1da:	2a00      	cmp	r2, #0
 800a1dc:	da01      	bge.n	800a1e2 <__ieee754_atan2f+0xae>
 800a1de:	313c      	adds	r1, #60	; 0x3c
 800a1e0:	db19      	blt.n	800a216 <__ieee754_atan2f+0xe2>
 800a1e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a1e6:	f000 fdf9 	bl	800addc <fabsf>
 800a1ea:	f000 fd23 	bl	800ac34 <atanf>
 800a1ee:	eef0 7a40 	vmov.f32	s15, s0
 800a1f2:	2c01      	cmp	r4, #1
 800a1f4:	d012      	beq.n	800a21c <__ieee754_atan2f+0xe8>
 800a1f6:	2c02      	cmp	r4, #2
 800a1f8:	d017      	beq.n	800a22a <__ieee754_atan2f+0xf6>
 800a1fa:	2c00      	cmp	r4, #0
 800a1fc:	d0ad      	beq.n	800a15a <__ieee754_atan2f+0x26>
 800a1fe:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a264 <__ieee754_atan2f+0x130>
 800a202:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a206:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a268 <__ieee754_atan2f+0x134>
 800a20a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a20e:	e7a4      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a210:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a254 <__ieee754_atan2f+0x120>
 800a214:	e7ed      	b.n	800a1f2 <__ieee754_atan2f+0xbe>
 800a216:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a26c <__ieee754_atan2f+0x138>
 800a21a:	e7ea      	b.n	800a1f2 <__ieee754_atan2f+0xbe>
 800a21c:	ee17 3a90 	vmov	r3, s15
 800a220:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	e797      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a22a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a264 <__ieee754_atan2f+0x130>
 800a22e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a232:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a268 <__ieee754_atan2f+0x134>
 800a236:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a23a:	e78e      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a23c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a268 <__ieee754_atan2f+0x134>
 800a240:	e78b      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a242:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a270 <__ieee754_atan2f+0x13c>
 800a246:	e788      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a248:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a26c <__ieee754_atan2f+0x138>
 800a24c:	e785      	b.n	800a15a <__ieee754_atan2f+0x26>
 800a24e:	bf00      	nop
 800a250:	c0490fdb 	.word	0xc0490fdb
 800a254:	3fc90fdb 	.word	0x3fc90fdb
 800a258:	bfc90fdb 	.word	0xbfc90fdb
 800a25c:	0800afac 	.word	0x0800afac
 800a260:	0800afb8 	.word	0x0800afb8
 800a264:	33bbbd2e 	.word	0x33bbbd2e
 800a268:	40490fdb 	.word	0x40490fdb
 800a26c:	00000000 	.word	0x00000000
 800a270:	3f490fdb 	.word	0x3f490fdb

0800a274 <__ieee754_fmodf>:
 800a274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a276:	ee10 5a90 	vmov	r5, s1
 800a27a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800a27e:	d009      	beq.n	800a294 <__ieee754_fmodf+0x20>
 800a280:	ee10 2a10 	vmov	r2, s0
 800a284:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a288:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a28c:	da02      	bge.n	800a294 <__ieee754_fmodf+0x20>
 800a28e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a292:	dd04      	ble.n	800a29e <__ieee754_fmodf+0x2a>
 800a294:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a298:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a29e:	42a3      	cmp	r3, r4
 800a2a0:	dbfc      	blt.n	800a29c <__ieee754_fmodf+0x28>
 800a2a2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800a2a6:	d105      	bne.n	800a2b4 <__ieee754_fmodf+0x40>
 800a2a8:	4b32      	ldr	r3, [pc, #200]	; (800a374 <__ieee754_fmodf+0x100>)
 800a2aa:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800a2ae:	ed93 0a00 	vldr	s0, [r3]
 800a2b2:	e7f3      	b.n	800a29c <__ieee754_fmodf+0x28>
 800a2b4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800a2b8:	d13f      	bne.n	800a33a <__ieee754_fmodf+0xc6>
 800a2ba:	0219      	lsls	r1, r3, #8
 800a2bc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800a2c0:	2900      	cmp	r1, #0
 800a2c2:	dc37      	bgt.n	800a334 <__ieee754_fmodf+0xc0>
 800a2c4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800a2c8:	d13d      	bne.n	800a346 <__ieee754_fmodf+0xd2>
 800a2ca:	0227      	lsls	r7, r4, #8
 800a2cc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a2d0:	2f00      	cmp	r7, #0
 800a2d2:	da35      	bge.n	800a340 <__ieee754_fmodf+0xcc>
 800a2d4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a2d8:	bfbb      	ittet	lt
 800a2da:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a2de:	1a12      	sublt	r2, r2, r0
 800a2e0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a2e4:	4093      	lsllt	r3, r2
 800a2e6:	bfa8      	it	ge
 800a2e8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a2ec:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a2f0:	bfb5      	itete	lt
 800a2f2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a2f6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800a2fa:	1a52      	sublt	r2, r2, r1
 800a2fc:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800a300:	bfb8      	it	lt
 800a302:	4094      	lsllt	r4, r2
 800a304:	1a40      	subs	r0, r0, r1
 800a306:	1b1a      	subs	r2, r3, r4
 800a308:	bb00      	cbnz	r0, 800a34c <__ieee754_fmodf+0xd8>
 800a30a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a30e:	bf38      	it	cc
 800a310:	4613      	movcc	r3, r2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0c8      	beq.n	800a2a8 <__ieee754_fmodf+0x34>
 800a316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a31a:	db1f      	blt.n	800a35c <__ieee754_fmodf+0xe8>
 800a31c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a320:	db1f      	blt.n	800a362 <__ieee754_fmodf+0xee>
 800a322:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a326:	317f      	adds	r1, #127	; 0x7f
 800a328:	4333      	orrs	r3, r6
 800a32a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a32e:	ee00 3a10 	vmov	s0, r3
 800a332:	e7b3      	b.n	800a29c <__ieee754_fmodf+0x28>
 800a334:	3801      	subs	r0, #1
 800a336:	0049      	lsls	r1, r1, #1
 800a338:	e7c2      	b.n	800a2c0 <__ieee754_fmodf+0x4c>
 800a33a:	15d8      	asrs	r0, r3, #23
 800a33c:	387f      	subs	r0, #127	; 0x7f
 800a33e:	e7c1      	b.n	800a2c4 <__ieee754_fmodf+0x50>
 800a340:	3901      	subs	r1, #1
 800a342:	007f      	lsls	r7, r7, #1
 800a344:	e7c4      	b.n	800a2d0 <__ieee754_fmodf+0x5c>
 800a346:	15e1      	asrs	r1, r4, #23
 800a348:	397f      	subs	r1, #127	; 0x7f
 800a34a:	e7c3      	b.n	800a2d4 <__ieee754_fmodf+0x60>
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	da02      	bge.n	800a356 <__ieee754_fmodf+0xe2>
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	3801      	subs	r0, #1
 800a354:	e7d7      	b.n	800a306 <__ieee754_fmodf+0x92>
 800a356:	d0a7      	beq.n	800a2a8 <__ieee754_fmodf+0x34>
 800a358:	0053      	lsls	r3, r2, #1
 800a35a:	e7fa      	b.n	800a352 <__ieee754_fmodf+0xde>
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	3901      	subs	r1, #1
 800a360:	e7d9      	b.n	800a316 <__ieee754_fmodf+0xa2>
 800a362:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800a366:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800a36a:	3182      	adds	r1, #130	; 0x82
 800a36c:	410b      	asrs	r3, r1
 800a36e:	4333      	orrs	r3, r6
 800a370:	e7dd      	b.n	800a32e <__ieee754_fmodf+0xba>
 800a372:	bf00      	nop
 800a374:	0800afc4 	.word	0x0800afc4

0800a378 <__ieee754_rem_pio2f>:
 800a378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37a:	ee10 6a10 	vmov	r6, s0
 800a37e:	4b8e      	ldr	r3, [pc, #568]	; (800a5b8 <__ieee754_rem_pio2f+0x240>)
 800a380:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a384:	429d      	cmp	r5, r3
 800a386:	b087      	sub	sp, #28
 800a388:	eef0 7a40 	vmov.f32	s15, s0
 800a38c:	4604      	mov	r4, r0
 800a38e:	dc05      	bgt.n	800a39c <__ieee754_rem_pio2f+0x24>
 800a390:	2300      	movs	r3, #0
 800a392:	ed80 0a00 	vstr	s0, [r0]
 800a396:	6043      	str	r3, [r0, #4]
 800a398:	2000      	movs	r0, #0
 800a39a:	e01a      	b.n	800a3d2 <__ieee754_rem_pio2f+0x5a>
 800a39c:	4b87      	ldr	r3, [pc, #540]	; (800a5bc <__ieee754_rem_pio2f+0x244>)
 800a39e:	429d      	cmp	r5, r3
 800a3a0:	dc46      	bgt.n	800a430 <__ieee754_rem_pio2f+0xb8>
 800a3a2:	2e00      	cmp	r6, #0
 800a3a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a5c0 <__ieee754_rem_pio2f+0x248>
 800a3a8:	4b86      	ldr	r3, [pc, #536]	; (800a5c4 <__ieee754_rem_pio2f+0x24c>)
 800a3aa:	f025 050f 	bic.w	r5, r5, #15
 800a3ae:	dd1f      	ble.n	800a3f0 <__ieee754_rem_pio2f+0x78>
 800a3b0:	429d      	cmp	r5, r3
 800a3b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3b6:	d00e      	beq.n	800a3d6 <__ieee754_rem_pio2f+0x5e>
 800a3b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a5c8 <__ieee754_rem_pio2f+0x250>
 800a3bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a3c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3c4:	ed80 0a00 	vstr	s0, [r0]
 800a3c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	edc4 7a01 	vstr	s15, [r4, #4]
 800a3d2:	b007      	add	sp, #28
 800a3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a5cc <__ieee754_rem_pio2f+0x254>
 800a3da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a5d0 <__ieee754_rem_pio2f+0x258>
 800a3de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a3e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3ea:	edc0 6a00 	vstr	s13, [r0]
 800a3ee:	e7eb      	b.n	800a3c8 <__ieee754_rem_pio2f+0x50>
 800a3f0:	429d      	cmp	r5, r3
 800a3f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3f6:	d00e      	beq.n	800a416 <__ieee754_rem_pio2f+0x9e>
 800a3f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a5c8 <__ieee754_rem_pio2f+0x250>
 800a3fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a400:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a404:	ed80 0a00 	vstr	s0, [r0]
 800a408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295
 800a410:	edc4 7a01 	vstr	s15, [r4, #4]
 800a414:	e7dd      	b.n	800a3d2 <__ieee754_rem_pio2f+0x5a>
 800a416:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a5cc <__ieee754_rem_pio2f+0x254>
 800a41a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a5d0 <__ieee754_rem_pio2f+0x258>
 800a41e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a422:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a426:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a42a:	edc0 6a00 	vstr	s13, [r0]
 800a42e:	e7eb      	b.n	800a408 <__ieee754_rem_pio2f+0x90>
 800a430:	4b68      	ldr	r3, [pc, #416]	; (800a5d4 <__ieee754_rem_pio2f+0x25c>)
 800a432:	429d      	cmp	r5, r3
 800a434:	dc72      	bgt.n	800a51c <__ieee754_rem_pio2f+0x1a4>
 800a436:	f000 fcd1 	bl	800addc <fabsf>
 800a43a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a5d8 <__ieee754_rem_pio2f+0x260>
 800a43e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a442:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a44a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a44e:	ee17 0a90 	vmov	r0, s15
 800a452:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a5c0 <__ieee754_rem_pio2f+0x248>
 800a456:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a45a:	281f      	cmp	r0, #31
 800a45c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a5c8 <__ieee754_rem_pio2f+0x250>
 800a460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a464:	eeb1 6a47 	vneg.f32	s12, s14
 800a468:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a46c:	ee16 2a90 	vmov	r2, s13
 800a470:	dc1c      	bgt.n	800a4ac <__ieee754_rem_pio2f+0x134>
 800a472:	495a      	ldr	r1, [pc, #360]	; (800a5dc <__ieee754_rem_pio2f+0x264>)
 800a474:	1e47      	subs	r7, r0, #1
 800a476:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a47a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a47e:	428b      	cmp	r3, r1
 800a480:	d014      	beq.n	800a4ac <__ieee754_rem_pio2f+0x134>
 800a482:	6022      	str	r2, [r4, #0]
 800a484:	ed94 7a00 	vldr	s14, [r4]
 800a488:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a48c:	2e00      	cmp	r6, #0
 800a48e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a492:	ed84 0a01 	vstr	s0, [r4, #4]
 800a496:	da9c      	bge.n	800a3d2 <__ieee754_rem_pio2f+0x5a>
 800a498:	eeb1 7a47 	vneg.f32	s14, s14
 800a49c:	eeb1 0a40 	vneg.f32	s0, s0
 800a4a0:	ed84 7a00 	vstr	s14, [r4]
 800a4a4:	ed84 0a01 	vstr	s0, [r4, #4]
 800a4a8:	4240      	negs	r0, r0
 800a4aa:	e792      	b.n	800a3d2 <__ieee754_rem_pio2f+0x5a>
 800a4ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a4b0:	15eb      	asrs	r3, r5, #23
 800a4b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a4b6:	2d08      	cmp	r5, #8
 800a4b8:	dde3      	ble.n	800a482 <__ieee754_rem_pio2f+0x10a>
 800a4ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a5cc <__ieee754_rem_pio2f+0x254>
 800a4be:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a5d0 <__ieee754_rem_pio2f+0x258>
 800a4c2:	eef0 6a40 	vmov.f32	s13, s0
 800a4c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a4ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a4ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a4d2:	eef0 7a40 	vmov.f32	s15, s0
 800a4d6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a4da:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a4de:	ee15 2a90 	vmov	r2, s11
 800a4e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a4e6:	1a5b      	subs	r3, r3, r1
 800a4e8:	2b19      	cmp	r3, #25
 800a4ea:	dc04      	bgt.n	800a4f6 <__ieee754_rem_pio2f+0x17e>
 800a4ec:	edc4 5a00 	vstr	s11, [r4]
 800a4f0:	eeb0 0a66 	vmov.f32	s0, s13
 800a4f4:	e7c6      	b.n	800a484 <__ieee754_rem_pio2f+0x10c>
 800a4f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a5e0 <__ieee754_rem_pio2f+0x268>
 800a4fa:	eeb0 0a66 	vmov.f32	s0, s13
 800a4fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a502:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a506:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a5e4 <__ieee754_rem_pio2f+0x26c>
 800a50a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a50e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a512:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a516:	ed84 7a00 	vstr	s14, [r4]
 800a51a:	e7b3      	b.n	800a484 <__ieee754_rem_pio2f+0x10c>
 800a51c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a520:	db06      	blt.n	800a530 <__ieee754_rem_pio2f+0x1b8>
 800a522:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a526:	edc0 7a01 	vstr	s15, [r0, #4]
 800a52a:	edc0 7a00 	vstr	s15, [r0]
 800a52e:	e733      	b.n	800a398 <__ieee754_rem_pio2f+0x20>
 800a530:	15ea      	asrs	r2, r5, #23
 800a532:	3a86      	subs	r2, #134	; 0x86
 800a534:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a538:	ee07 3a90 	vmov	s15, r3
 800a53c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a540:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a5e8 <__ieee754_rem_pio2f+0x270>
 800a544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a54c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a554:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a55c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a560:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a564:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a570:	edcd 7a05 	vstr	s15, [sp, #20]
 800a574:	d11e      	bne.n	800a5b4 <__ieee754_rem_pio2f+0x23c>
 800a576:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57e:	bf14      	ite	ne
 800a580:	2302      	movne	r3, #2
 800a582:	2301      	moveq	r3, #1
 800a584:	4919      	ldr	r1, [pc, #100]	; (800a5ec <__ieee754_rem_pio2f+0x274>)
 800a586:	9101      	str	r1, [sp, #4]
 800a588:	2102      	movs	r1, #2
 800a58a:	9100      	str	r1, [sp, #0]
 800a58c:	a803      	add	r0, sp, #12
 800a58e:	4621      	mov	r1, r4
 800a590:	f000 f892 	bl	800a6b8 <__kernel_rem_pio2f>
 800a594:	2e00      	cmp	r6, #0
 800a596:	f6bf af1c 	bge.w	800a3d2 <__ieee754_rem_pio2f+0x5a>
 800a59a:	edd4 7a00 	vldr	s15, [r4]
 800a59e:	eef1 7a67 	vneg.f32	s15, s15
 800a5a2:	edc4 7a00 	vstr	s15, [r4]
 800a5a6:	edd4 7a01 	vldr	s15, [r4, #4]
 800a5aa:	eef1 7a67 	vneg.f32	s15, s15
 800a5ae:	edc4 7a01 	vstr	s15, [r4, #4]
 800a5b2:	e779      	b.n	800a4a8 <__ieee754_rem_pio2f+0x130>
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e7e5      	b.n	800a584 <__ieee754_rem_pio2f+0x20c>
 800a5b8:	3f490fd8 	.word	0x3f490fd8
 800a5bc:	4016cbe3 	.word	0x4016cbe3
 800a5c0:	3fc90f80 	.word	0x3fc90f80
 800a5c4:	3fc90fd0 	.word	0x3fc90fd0
 800a5c8:	37354443 	.word	0x37354443
 800a5cc:	37354400 	.word	0x37354400
 800a5d0:	2e85a308 	.word	0x2e85a308
 800a5d4:	43490f80 	.word	0x43490f80
 800a5d8:	3f22f984 	.word	0x3f22f984
 800a5dc:	0800afcc 	.word	0x0800afcc
 800a5e0:	2e85a300 	.word	0x2e85a300
 800a5e4:	248d3132 	.word	0x248d3132
 800a5e8:	43800000 	.word	0x43800000
 800a5ec:	0800b04c 	.word	0x0800b04c

0800a5f0 <__ieee754_sqrtf>:
 800a5f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <__kernel_cosf>:
 800a5f8:	ee10 3a10 	vmov	r3, s0
 800a5fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a600:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a604:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a608:	da05      	bge.n	800a616 <__kernel_cosf+0x1e>
 800a60a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a60e:	ee17 2a90 	vmov	r2, s15
 800a612:	2a00      	cmp	r2, #0
 800a614:	d03d      	beq.n	800a692 <__kernel_cosf+0x9a>
 800a616:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a61a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a698 <__kernel_cosf+0xa0>
 800a61e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a69c <__kernel_cosf+0xa4>
 800a622:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a6a0 <__kernel_cosf+0xa8>
 800a626:	4a1f      	ldr	r2, [pc, #124]	; (800a6a4 <__kernel_cosf+0xac>)
 800a628:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a62c:	4293      	cmp	r3, r2
 800a62e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a6a8 <__kernel_cosf+0xb0>
 800a632:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a636:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a6ac <__kernel_cosf+0xb4>
 800a63a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a63e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a6b0 <__kernel_cosf+0xb8>
 800a642:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a646:	eeb0 7a66 	vmov.f32	s14, s13
 800a64a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a64e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a652:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a656:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a65a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a65e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a662:	dc04      	bgt.n	800a66e <__kernel_cosf+0x76>
 800a664:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a668:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a66c:	4770      	bx	lr
 800a66e:	4a11      	ldr	r2, [pc, #68]	; (800a6b4 <__kernel_cosf+0xbc>)
 800a670:	4293      	cmp	r3, r2
 800a672:	bfda      	itte	le
 800a674:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a678:	ee06 3a90 	vmovle	s13, r3
 800a67c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a680:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a684:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a68c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a690:	4770      	bx	lr
 800a692:	eeb0 0a46 	vmov.f32	s0, s12
 800a696:	4770      	bx	lr
 800a698:	ad47d74e 	.word	0xad47d74e
 800a69c:	310f74f6 	.word	0x310f74f6
 800a6a0:	3d2aaaab 	.word	0x3d2aaaab
 800a6a4:	3e999999 	.word	0x3e999999
 800a6a8:	b493f27c 	.word	0xb493f27c
 800a6ac:	37d00d01 	.word	0x37d00d01
 800a6b0:	bab60b61 	.word	0xbab60b61
 800a6b4:	3f480000 	.word	0x3f480000

0800a6b8 <__kernel_rem_pio2f>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	ed2d 8b04 	vpush	{d8-d9}
 800a6c0:	b0d9      	sub	sp, #356	; 0x164
 800a6c2:	4688      	mov	r8, r1
 800a6c4:	9002      	str	r0, [sp, #8]
 800a6c6:	49bb      	ldr	r1, [pc, #748]	; (800a9b4 <__kernel_rem_pio2f+0x2fc>)
 800a6c8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a6d0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a6d4:	1e59      	subs	r1, r3, #1
 800a6d6:	1d13      	adds	r3, r2, #4
 800a6d8:	db27      	blt.n	800a72a <__kernel_rem_pio2f+0x72>
 800a6da:	f1b2 0b03 	subs.w	fp, r2, #3
 800a6de:	bf48      	it	mi
 800a6e0:	f102 0b04 	addmi.w	fp, r2, #4
 800a6e4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a6e8:	1c45      	adds	r5, r0, #1
 800a6ea:	00ec      	lsls	r4, r5, #3
 800a6ec:	1a47      	subs	r7, r0, r1
 800a6ee:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a9c4 <__kernel_rem_pio2f+0x30c>
 800a6f2:	9403      	str	r4, [sp, #12]
 800a6f4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a6f8:	eb0a 0c01 	add.w	ip, sl, r1
 800a6fc:	ae1c      	add	r6, sp, #112	; 0x70
 800a6fe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a702:	2400      	movs	r4, #0
 800a704:	4564      	cmp	r4, ip
 800a706:	dd12      	ble.n	800a72e <__kernel_rem_pio2f+0x76>
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	ac1c      	add	r4, sp, #112	; 0x70
 800a70c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a710:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a714:	f04f 0c00 	mov.w	ip, #0
 800a718:	45d4      	cmp	ip, sl
 800a71a:	dc27      	bgt.n	800a76c <__kernel_rem_pio2f+0xb4>
 800a71c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a720:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a9c4 <__kernel_rem_pio2f+0x30c>
 800a724:	4627      	mov	r7, r4
 800a726:	2600      	movs	r6, #0
 800a728:	e016      	b.n	800a758 <__kernel_rem_pio2f+0xa0>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e7dc      	b.n	800a6e8 <__kernel_rem_pio2f+0x30>
 800a72e:	42e7      	cmn	r7, r4
 800a730:	bf5d      	ittte	pl
 800a732:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a736:	ee07 3a90 	vmovpl	s15, r3
 800a73a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a73e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a742:	ece6 7a01 	vstmia	r6!, {s15}
 800a746:	3401      	adds	r4, #1
 800a748:	e7dc      	b.n	800a704 <__kernel_rem_pio2f+0x4c>
 800a74a:	ecf9 6a01 	vldmia	r9!, {s13}
 800a74e:	ed97 7a00 	vldr	s14, [r7]
 800a752:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a756:	3601      	adds	r6, #1
 800a758:	428e      	cmp	r6, r1
 800a75a:	f1a7 0704 	sub.w	r7, r7, #4
 800a75e:	ddf4      	ble.n	800a74a <__kernel_rem_pio2f+0x92>
 800a760:	eceb 7a01 	vstmia	fp!, {s15}
 800a764:	f10c 0c01 	add.w	ip, ip, #1
 800a768:	3404      	adds	r4, #4
 800a76a:	e7d5      	b.n	800a718 <__kernel_rem_pio2f+0x60>
 800a76c:	ab08      	add	r3, sp, #32
 800a76e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a772:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a9c0 <__kernel_rem_pio2f+0x308>
 800a776:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a9bc <__kernel_rem_pio2f+0x304>
 800a77a:	9304      	str	r3, [sp, #16]
 800a77c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a780:	4656      	mov	r6, sl
 800a782:	00b3      	lsls	r3, r6, #2
 800a784:	9305      	str	r3, [sp, #20]
 800a786:	ab58      	add	r3, sp, #352	; 0x160
 800a788:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a78c:	ac08      	add	r4, sp, #32
 800a78e:	ab44      	add	r3, sp, #272	; 0x110
 800a790:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a794:	46a4      	mov	ip, r4
 800a796:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a79a:	4637      	mov	r7, r6
 800a79c:	2f00      	cmp	r7, #0
 800a79e:	f1a0 0004 	sub.w	r0, r0, #4
 800a7a2:	dc4f      	bgt.n	800a844 <__kernel_rem_pio2f+0x18c>
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a7aa:	f000 fb61 	bl	800ae70 <scalbnf>
 800a7ae:	eeb0 8a40 	vmov.f32	s16, s0
 800a7b2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a7b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a7ba:	f000 fb17 	bl	800adec <floorf>
 800a7be:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a7c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a7c6:	2d00      	cmp	r5, #0
 800a7c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a7cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a7d0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a7d4:	ee17 9a90 	vmov	r9, s15
 800a7d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a7dc:	dd44      	ble.n	800a868 <__kernel_rem_pio2f+0x1b0>
 800a7de:	f106 3cff 	add.w	ip, r6, #4294967295
 800a7e2:	ab08      	add	r3, sp, #32
 800a7e4:	f1c5 0e08 	rsb	lr, r5, #8
 800a7e8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a7ec:	fa47 f00e 	asr.w	r0, r7, lr
 800a7f0:	4481      	add	r9, r0
 800a7f2:	fa00 f00e 	lsl.w	r0, r0, lr
 800a7f6:	1a3f      	subs	r7, r7, r0
 800a7f8:	f1c5 0007 	rsb	r0, r5, #7
 800a7fc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a800:	4107      	asrs	r7, r0
 800a802:	2f00      	cmp	r7, #0
 800a804:	dd3f      	ble.n	800a886 <__kernel_rem_pio2f+0x1ce>
 800a806:	f04f 0e00 	mov.w	lr, #0
 800a80a:	f109 0901 	add.w	r9, r9, #1
 800a80e:	4673      	mov	r3, lr
 800a810:	4576      	cmp	r6, lr
 800a812:	dc6b      	bgt.n	800a8ec <__kernel_rem_pio2f+0x234>
 800a814:	2d00      	cmp	r5, #0
 800a816:	dd04      	ble.n	800a822 <__kernel_rem_pio2f+0x16a>
 800a818:	2d01      	cmp	r5, #1
 800a81a:	d078      	beq.n	800a90e <__kernel_rem_pio2f+0x256>
 800a81c:	2d02      	cmp	r5, #2
 800a81e:	f000 8081 	beq.w	800a924 <__kernel_rem_pio2f+0x26c>
 800a822:	2f02      	cmp	r7, #2
 800a824:	d12f      	bne.n	800a886 <__kernel_rem_pio2f+0x1ce>
 800a826:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a82a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a82e:	b353      	cbz	r3, 800a886 <__kernel_rem_pio2f+0x1ce>
 800a830:	4628      	mov	r0, r5
 800a832:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a836:	f000 fb1b 	bl	800ae70 <scalbnf>
 800a83a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a83e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a842:	e020      	b.n	800a886 <__kernel_rem_pio2f+0x1ce>
 800a844:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a848:	3f01      	subs	r7, #1
 800a84a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a84e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a852:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a856:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a85a:	ecac 0a01 	vstmia	ip!, {s0}
 800a85e:	ed90 0a00 	vldr	s0, [r0]
 800a862:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a866:	e799      	b.n	800a79c <__kernel_rem_pio2f+0xe4>
 800a868:	d105      	bne.n	800a876 <__kernel_rem_pio2f+0x1be>
 800a86a:	1e70      	subs	r0, r6, #1
 800a86c:	ab08      	add	r3, sp, #32
 800a86e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a872:	11ff      	asrs	r7, r7, #7
 800a874:	e7c5      	b.n	800a802 <__kernel_rem_pio2f+0x14a>
 800a876:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a87a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a882:	da31      	bge.n	800a8e8 <__kernel_rem_pio2f+0x230>
 800a884:	2700      	movs	r7, #0
 800a886:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88e:	f040 809b 	bne.w	800a9c8 <__kernel_rem_pio2f+0x310>
 800a892:	1e74      	subs	r4, r6, #1
 800a894:	46a4      	mov	ip, r4
 800a896:	2000      	movs	r0, #0
 800a898:	45d4      	cmp	ip, sl
 800a89a:	da4a      	bge.n	800a932 <__kernel_rem_pio2f+0x27a>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d07a      	beq.n	800a996 <__kernel_rem_pio2f+0x2de>
 800a8a0:	ab08      	add	r3, sp, #32
 800a8a2:	3d08      	subs	r5, #8
 800a8a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 8081 	beq.w	800a9b0 <__kernel_rem_pio2f+0x2f8>
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a8b4:	00a5      	lsls	r5, r4, #2
 800a8b6:	f000 fadb 	bl	800ae70 <scalbnf>
 800a8ba:	aa44      	add	r2, sp, #272	; 0x110
 800a8bc:	1d2b      	adds	r3, r5, #4
 800a8be:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a9c0 <__kernel_rem_pio2f+0x308>
 800a8c2:	18d1      	adds	r1, r2, r3
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	f280 80ae 	bge.w	800aa28 <__kernel_rem_pio2f+0x370>
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	f2c0 80cc 	blt.w	800aa6c <__kernel_rem_pio2f+0x3b4>
 800a8d4:	a944      	add	r1, sp, #272	; 0x110
 800a8d6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a8da:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a9b8 <__kernel_rem_pio2f+0x300>
 800a8de:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a9c4 <__kernel_rem_pio2f+0x30c>
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	1aa1      	subs	r1, r4, r2
 800a8e6:	e0b6      	b.n	800aa56 <__kernel_rem_pio2f+0x39e>
 800a8e8:	2702      	movs	r7, #2
 800a8ea:	e78c      	b.n	800a806 <__kernel_rem_pio2f+0x14e>
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	b94b      	cbnz	r3, 800a904 <__kernel_rem_pio2f+0x24c>
 800a8f0:	b118      	cbz	r0, 800a8fa <__kernel_rem_pio2f+0x242>
 800a8f2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a8f6:	6020      	str	r0, [r4, #0]
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	f10e 0e01 	add.w	lr, lr, #1
 800a8fe:	3404      	adds	r4, #4
 800a900:	4603      	mov	r3, r0
 800a902:	e785      	b.n	800a810 <__kernel_rem_pio2f+0x158>
 800a904:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a908:	6020      	str	r0, [r4, #0]
 800a90a:	4618      	mov	r0, r3
 800a90c:	e7f5      	b.n	800a8fa <__kernel_rem_pio2f+0x242>
 800a90e:	1e74      	subs	r4, r6, #1
 800a910:	a808      	add	r0, sp, #32
 800a912:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a916:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a91a:	f10d 0c20 	add.w	ip, sp, #32
 800a91e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a922:	e77e      	b.n	800a822 <__kernel_rem_pio2f+0x16a>
 800a924:	1e74      	subs	r4, r6, #1
 800a926:	a808      	add	r0, sp, #32
 800a928:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a92c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a930:	e7f3      	b.n	800a91a <__kernel_rem_pio2f+0x262>
 800a932:	ab08      	add	r3, sp, #32
 800a934:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a938:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a93c:	4318      	orrs	r0, r3
 800a93e:	e7ab      	b.n	800a898 <__kernel_rem_pio2f+0x1e0>
 800a940:	f10c 0c01 	add.w	ip, ip, #1
 800a944:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a948:	2c00      	cmp	r4, #0
 800a94a:	d0f9      	beq.n	800a940 <__kernel_rem_pio2f+0x288>
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a952:	eb0d 0003 	add.w	r0, sp, r3
 800a956:	9b01      	ldr	r3, [sp, #4]
 800a958:	18f4      	adds	r4, r6, r3
 800a95a:	ab1c      	add	r3, sp, #112	; 0x70
 800a95c:	1c77      	adds	r7, r6, #1
 800a95e:	384c      	subs	r0, #76	; 0x4c
 800a960:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a964:	4466      	add	r6, ip
 800a966:	42be      	cmp	r6, r7
 800a968:	f6ff af0b 	blt.w	800a782 <__kernel_rem_pio2f+0xca>
 800a96c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a970:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a974:	ee07 3a90 	vmov	s15, r3
 800a978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a97c:	f04f 0c00 	mov.w	ip, #0
 800a980:	ece4 7a01 	vstmia	r4!, {s15}
 800a984:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a9c4 <__kernel_rem_pio2f+0x30c>
 800a988:	46a1      	mov	r9, r4
 800a98a:	458c      	cmp	ip, r1
 800a98c:	dd07      	ble.n	800a99e <__kernel_rem_pio2f+0x2e6>
 800a98e:	ece0 7a01 	vstmia	r0!, {s15}
 800a992:	3701      	adds	r7, #1
 800a994:	e7e7      	b.n	800a966 <__kernel_rem_pio2f+0x2ae>
 800a996:	9804      	ldr	r0, [sp, #16]
 800a998:	f04f 0c01 	mov.w	ip, #1
 800a99c:	e7d2      	b.n	800a944 <__kernel_rem_pio2f+0x28c>
 800a99e:	ecfe 6a01 	vldmia	lr!, {s13}
 800a9a2:	ed39 7a01 	vldmdb	r9!, {s14}
 800a9a6:	f10c 0c01 	add.w	ip, ip, #1
 800a9aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a9ae:	e7ec      	b.n	800a98a <__kernel_rem_pio2f+0x2d2>
 800a9b0:	3c01      	subs	r4, #1
 800a9b2:	e775      	b.n	800a8a0 <__kernel_rem_pio2f+0x1e8>
 800a9b4:	0800b390 	.word	0x0800b390
 800a9b8:	0800b364 	.word	0x0800b364
 800a9bc:	43800000 	.word	0x43800000
 800a9c0:	3b800000 	.word	0x3b800000
 800a9c4:	00000000 	.word	0x00000000
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	eeb0 0a48 	vmov.f32	s0, s16
 800a9ce:	1a98      	subs	r0, r3, r2
 800a9d0:	f000 fa4e 	bl	800ae70 <scalbnf>
 800a9d4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a9bc <__kernel_rem_pio2f+0x304>
 800a9d8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e0:	db19      	blt.n	800aa16 <__kernel_rem_pio2f+0x35e>
 800a9e2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a9c0 <__kernel_rem_pio2f+0x308>
 800a9e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a9ea:	aa08      	add	r2, sp, #32
 800a9ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9f0:	1c74      	adds	r4, r6, #1
 800a9f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9f6:	3508      	adds	r5, #8
 800a9f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a9fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aa04:	ee10 3a10 	vmov	r3, s0
 800aa08:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aa0c:	ee17 3a90 	vmov	r3, s15
 800aa10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aa14:	e74b      	b.n	800a8ae <__kernel_rem_pio2f+0x1f6>
 800aa16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aa1a:	aa08      	add	r2, sp, #32
 800aa1c:	ee10 3a10 	vmov	r3, s0
 800aa20:	4634      	mov	r4, r6
 800aa22:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aa26:	e742      	b.n	800a8ae <__kernel_rem_pio2f+0x1f6>
 800aa28:	a808      	add	r0, sp, #32
 800aa2a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800aa2e:	9001      	str	r0, [sp, #4]
 800aa30:	ee07 0a90 	vmov	s15, r0
 800aa34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa38:	3a01      	subs	r2, #1
 800aa3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aa3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aa42:	ed61 7a01 	vstmdb	r1!, {s15}
 800aa46:	e73e      	b.n	800a8c6 <__kernel_rem_pio2f+0x20e>
 800aa48:	ecfc 6a01 	vldmia	ip!, {s13}
 800aa4c:	ecb6 7a01 	vldmia	r6!, {s14}
 800aa50:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aa54:	3001      	adds	r0, #1
 800aa56:	4550      	cmp	r0, sl
 800aa58:	dc01      	bgt.n	800aa5e <__kernel_rem_pio2f+0x3a6>
 800aa5a:	4288      	cmp	r0, r1
 800aa5c:	ddf4      	ble.n	800aa48 <__kernel_rem_pio2f+0x390>
 800aa5e:	a858      	add	r0, sp, #352	; 0x160
 800aa60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa64:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800aa68:	3a01      	subs	r2, #1
 800aa6a:	e730      	b.n	800a8ce <__kernel_rem_pio2f+0x216>
 800aa6c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800aa6e:	2a02      	cmp	r2, #2
 800aa70:	dc09      	bgt.n	800aa86 <__kernel_rem_pio2f+0x3ce>
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	dc2a      	bgt.n	800aacc <__kernel_rem_pio2f+0x414>
 800aa76:	d043      	beq.n	800ab00 <__kernel_rem_pio2f+0x448>
 800aa78:	f009 0007 	and.w	r0, r9, #7
 800aa7c:	b059      	add	sp, #356	; 0x164
 800aa7e:	ecbd 8b04 	vpop	{d8-d9}
 800aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa86:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d1f5      	bne.n	800aa78 <__kernel_rem_pio2f+0x3c0>
 800aa8c:	ab30      	add	r3, sp, #192	; 0xc0
 800aa8e:	442b      	add	r3, r5
 800aa90:	461a      	mov	r2, r3
 800aa92:	4619      	mov	r1, r3
 800aa94:	4620      	mov	r0, r4
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f1a1 0104 	sub.w	r1, r1, #4
 800aa9c:	dc51      	bgt.n	800ab42 <__kernel_rem_pio2f+0x48a>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	2901      	cmp	r1, #1
 800aaa2:	f1a2 0204 	sub.w	r2, r2, #4
 800aaa6:	dc5c      	bgt.n	800ab62 <__kernel_rem_pio2f+0x4aa>
 800aaa8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a9c4 <__kernel_rem_pio2f+0x30c>
 800aaac:	3304      	adds	r3, #4
 800aaae:	2c01      	cmp	r4, #1
 800aab0:	dc67      	bgt.n	800ab82 <__kernel_rem_pio2f+0x4ca>
 800aab2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800aab6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800aaba:	2f00      	cmp	r7, #0
 800aabc:	d167      	bne.n	800ab8e <__kernel_rem_pio2f+0x4d6>
 800aabe:	edc8 6a00 	vstr	s13, [r8]
 800aac2:	ed88 7a01 	vstr	s14, [r8, #4]
 800aac6:	edc8 7a02 	vstr	s15, [r8, #8]
 800aaca:	e7d5      	b.n	800aa78 <__kernel_rem_pio2f+0x3c0>
 800aacc:	aa30      	add	r2, sp, #192	; 0xc0
 800aace:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a9c4 <__kernel_rem_pio2f+0x30c>
 800aad2:	4413      	add	r3, r2
 800aad4:	4622      	mov	r2, r4
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	da24      	bge.n	800ab24 <__kernel_rem_pio2f+0x46c>
 800aada:	b34f      	cbz	r7, 800ab30 <__kernel_rem_pio2f+0x478>
 800aadc:	eef1 7a47 	vneg.f32	s15, s14
 800aae0:	edc8 7a00 	vstr	s15, [r8]
 800aae4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800aae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aaec:	aa31      	add	r2, sp, #196	; 0xc4
 800aaee:	2301      	movs	r3, #1
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	da20      	bge.n	800ab36 <__kernel_rem_pio2f+0x47e>
 800aaf4:	b10f      	cbz	r7, 800aafa <__kernel_rem_pio2f+0x442>
 800aaf6:	eef1 7a67 	vneg.f32	s15, s15
 800aafa:	edc8 7a01 	vstr	s15, [r8, #4]
 800aafe:	e7bb      	b.n	800aa78 <__kernel_rem_pio2f+0x3c0>
 800ab00:	aa30      	add	r2, sp, #192	; 0xc0
 800ab02:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a9c4 <__kernel_rem_pio2f+0x30c>
 800ab06:	4413      	add	r3, r2
 800ab08:	2c00      	cmp	r4, #0
 800ab0a:	da05      	bge.n	800ab18 <__kernel_rem_pio2f+0x460>
 800ab0c:	b10f      	cbz	r7, 800ab12 <__kernel_rem_pio2f+0x45a>
 800ab0e:	eef1 7a67 	vneg.f32	s15, s15
 800ab12:	edc8 7a00 	vstr	s15, [r8]
 800ab16:	e7af      	b.n	800aa78 <__kernel_rem_pio2f+0x3c0>
 800ab18:	ed33 7a01 	vldmdb	r3!, {s14}
 800ab1c:	3c01      	subs	r4, #1
 800ab1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab22:	e7f1      	b.n	800ab08 <__kernel_rem_pio2f+0x450>
 800ab24:	ed73 7a01 	vldmdb	r3!, {s15}
 800ab28:	3a01      	subs	r2, #1
 800ab2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab2e:	e7d2      	b.n	800aad6 <__kernel_rem_pio2f+0x41e>
 800ab30:	eef0 7a47 	vmov.f32	s15, s14
 800ab34:	e7d4      	b.n	800aae0 <__kernel_rem_pio2f+0x428>
 800ab36:	ecb2 7a01 	vldmia	r2!, {s14}
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab40:	e7d6      	b.n	800aaf0 <__kernel_rem_pio2f+0x438>
 800ab42:	edd1 7a00 	vldr	s15, [r1]
 800ab46:	edd1 6a01 	vldr	s13, [r1, #4]
 800ab4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ab4e:	3801      	subs	r0, #1
 800ab50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab54:	ed81 7a00 	vstr	s14, [r1]
 800ab58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5c:	edc1 7a01 	vstr	s15, [r1, #4]
 800ab60:	e799      	b.n	800aa96 <__kernel_rem_pio2f+0x3de>
 800ab62:	edd2 7a00 	vldr	s15, [r2]
 800ab66:	edd2 6a01 	vldr	s13, [r2, #4]
 800ab6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ab6e:	3901      	subs	r1, #1
 800ab70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab74:	ed82 7a00 	vstr	s14, [r2]
 800ab78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7c:	edc2 7a01 	vstr	s15, [r2, #4]
 800ab80:	e78e      	b.n	800aaa0 <__kernel_rem_pio2f+0x3e8>
 800ab82:	ed33 7a01 	vldmdb	r3!, {s14}
 800ab86:	3c01      	subs	r4, #1
 800ab88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab8c:	e78f      	b.n	800aaae <__kernel_rem_pio2f+0x3f6>
 800ab8e:	eef1 6a66 	vneg.f32	s13, s13
 800ab92:	eeb1 7a47 	vneg.f32	s14, s14
 800ab96:	edc8 6a00 	vstr	s13, [r8]
 800ab9a:	ed88 7a01 	vstr	s14, [r8, #4]
 800ab9e:	eef1 7a67 	vneg.f32	s15, s15
 800aba2:	e790      	b.n	800aac6 <__kernel_rem_pio2f+0x40e>

0800aba4 <__kernel_sinf>:
 800aba4:	ee10 3a10 	vmov	r3, s0
 800aba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800abb0:	da04      	bge.n	800abbc <__kernel_sinf+0x18>
 800abb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800abb6:	ee17 3a90 	vmov	r3, s15
 800abba:	b35b      	cbz	r3, 800ac14 <__kernel_sinf+0x70>
 800abbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800abc0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ac18 <__kernel_sinf+0x74>
 800abc4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ac1c <__kernel_sinf+0x78>
 800abc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800abcc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ac20 <__kernel_sinf+0x7c>
 800abd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800abd4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ac24 <__kernel_sinf+0x80>
 800abd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800abdc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ac28 <__kernel_sinf+0x84>
 800abe0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800abe4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800abe8:	b930      	cbnz	r0, 800abf8 <__kernel_sinf+0x54>
 800abea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ac2c <__kernel_sinf+0x88>
 800abee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800abf2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800abf6:	4770      	bx	lr
 800abf8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800abfc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ac00:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ac04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ac08:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ac30 <__kernel_sinf+0x8c>
 800ac0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ac10:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	2f2ec9d3 	.word	0x2f2ec9d3
 800ac1c:	b2d72f34 	.word	0xb2d72f34
 800ac20:	3638ef1b 	.word	0x3638ef1b
 800ac24:	b9500d01 	.word	0xb9500d01
 800ac28:	3c088889 	.word	0x3c088889
 800ac2c:	be2aaaab 	.word	0xbe2aaaab
 800ac30:	3e2aaaab 	.word	0x3e2aaaab

0800ac34 <atanf>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	ee10 5a10 	vmov	r5, s0
 800ac3a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ac3e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ac42:	eef0 7a40 	vmov.f32	s15, s0
 800ac46:	db10      	blt.n	800ac6a <atanf+0x36>
 800ac48:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ac4c:	dd04      	ble.n	800ac58 <atanf+0x24>
 800ac4e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ac52:	eeb0 0a67 	vmov.f32	s0, s15
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ad90 <atanf+0x15c>
 800ac5c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ad94 <atanf+0x160>
 800ac60:	2d00      	cmp	r5, #0
 800ac62:	bfd8      	it	le
 800ac64:	eef0 7a40 	vmovle.f32	s15, s0
 800ac68:	e7f3      	b.n	800ac52 <atanf+0x1e>
 800ac6a:	4b4b      	ldr	r3, [pc, #300]	; (800ad98 <atanf+0x164>)
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	dc10      	bgt.n	800ac92 <atanf+0x5e>
 800ac70:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ac74:	da0a      	bge.n	800ac8c <atanf+0x58>
 800ac76:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ad9c <atanf+0x168>
 800ac7a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ac7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac82:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ac86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8a:	dce2      	bgt.n	800ac52 <atanf+0x1e>
 800ac8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac90:	e013      	b.n	800acba <atanf+0x86>
 800ac92:	f000 f8a3 	bl	800addc <fabsf>
 800ac96:	4b42      	ldr	r3, [pc, #264]	; (800ada0 <atanf+0x16c>)
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	dc4f      	bgt.n	800ad3c <atanf+0x108>
 800ac9c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800aca0:	429c      	cmp	r4, r3
 800aca2:	dc41      	bgt.n	800ad28 <atanf+0xf4>
 800aca4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800aca8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800acac:	eea0 7a27 	vfma.f32	s14, s0, s15
 800acb0:	2300      	movs	r3, #0
 800acb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800acb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800acc0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ada4 <atanf+0x170>
 800acc4:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ada8 <atanf+0x174>
 800acc8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800adac <atanf+0x178>
 800accc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800acd0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800acd4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800adb0 <atanf+0x17c>
 800acd8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800acdc:	eddf 5a35 	vldr	s11, [pc, #212]	; 800adb4 <atanf+0x180>
 800ace0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ace4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800adb8 <atanf+0x184>
 800ace8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800acec:	eddf 5a33 	vldr	s11, [pc, #204]	; 800adbc <atanf+0x188>
 800acf0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800acf4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800adc0 <atanf+0x18c>
 800acf8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800acfc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800adc4 <atanf+0x190>
 800ad00:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ad04:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800adc8 <atanf+0x194>
 800ad08:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ad0c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800adcc <atanf+0x198>
 800ad10:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ad14:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ad18:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ad1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad20:	d121      	bne.n	800ad66 <atanf+0x132>
 800ad22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad26:	e794      	b.n	800ac52 <atanf+0x1e>
 800ad28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad2c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ad30:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ad34:	2301      	movs	r3, #1
 800ad36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ad3a:	e7be      	b.n	800acba <atanf+0x86>
 800ad3c:	4b24      	ldr	r3, [pc, #144]	; (800add0 <atanf+0x19c>)
 800ad3e:	429c      	cmp	r4, r3
 800ad40:	dc0b      	bgt.n	800ad5a <atanf+0x126>
 800ad42:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ad46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad4a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ad4e:	2302      	movs	r3, #2
 800ad50:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ad54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad58:	e7af      	b.n	800acba <atanf+0x86>
 800ad5a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ad5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ad62:	2303      	movs	r3, #3
 800ad64:	e7a9      	b.n	800acba <atanf+0x86>
 800ad66:	4a1b      	ldr	r2, [pc, #108]	; (800add4 <atanf+0x1a0>)
 800ad68:	491b      	ldr	r1, [pc, #108]	; (800add8 <atanf+0x1a4>)
 800ad6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ad6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ad72:	ed93 0a00 	vldr	s0, [r3]
 800ad76:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ad7a:	ed92 0a00 	vldr	s0, [r2]
 800ad7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad82:	2d00      	cmp	r5, #0
 800ad84:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ad88:	bfb8      	it	lt
 800ad8a:	eef1 7a67 	vneglt.f32	s15, s15
 800ad8e:	e760      	b.n	800ac52 <atanf+0x1e>
 800ad90:	3fc90fdb 	.word	0x3fc90fdb
 800ad94:	bfc90fdb 	.word	0xbfc90fdb
 800ad98:	3edfffff 	.word	0x3edfffff
 800ad9c:	7149f2ca 	.word	0x7149f2ca
 800ada0:	3f97ffff 	.word	0x3f97ffff
 800ada4:	3c8569d7 	.word	0x3c8569d7
 800ada8:	3d4bda59 	.word	0x3d4bda59
 800adac:	bd6ef16b 	.word	0xbd6ef16b
 800adb0:	3d886b35 	.word	0x3d886b35
 800adb4:	3dba2e6e 	.word	0x3dba2e6e
 800adb8:	3e124925 	.word	0x3e124925
 800adbc:	3eaaaaab 	.word	0x3eaaaaab
 800adc0:	bd15a221 	.word	0xbd15a221
 800adc4:	bd9d8795 	.word	0xbd9d8795
 800adc8:	bde38e38 	.word	0xbde38e38
 800adcc:	be4ccccd 	.word	0xbe4ccccd
 800add0:	401bffff 	.word	0x401bffff
 800add4:	0800b39c 	.word	0x0800b39c
 800add8:	0800b3ac 	.word	0x0800b3ac

0800addc <fabsf>:
 800addc:	ee10 3a10 	vmov	r3, s0
 800ade0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ade4:	ee00 3a10 	vmov	s0, r3
 800ade8:	4770      	bx	lr
	...

0800adec <floorf>:
 800adec:	ee10 3a10 	vmov	r3, s0
 800adf0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800adf4:	3a7f      	subs	r2, #127	; 0x7f
 800adf6:	2a16      	cmp	r2, #22
 800adf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800adfc:	dc2a      	bgt.n	800ae54 <floorf+0x68>
 800adfe:	2a00      	cmp	r2, #0
 800ae00:	da11      	bge.n	800ae26 <floorf+0x3a>
 800ae02:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ae64 <floorf+0x78>
 800ae06:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ae0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae12:	dd05      	ble.n	800ae20 <floorf+0x34>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	da23      	bge.n	800ae60 <floorf+0x74>
 800ae18:	4a13      	ldr	r2, [pc, #76]	; (800ae68 <floorf+0x7c>)
 800ae1a:	2900      	cmp	r1, #0
 800ae1c:	bf18      	it	ne
 800ae1e:	4613      	movne	r3, r2
 800ae20:	ee00 3a10 	vmov	s0, r3
 800ae24:	4770      	bx	lr
 800ae26:	4911      	ldr	r1, [pc, #68]	; (800ae6c <floorf+0x80>)
 800ae28:	4111      	asrs	r1, r2
 800ae2a:	420b      	tst	r3, r1
 800ae2c:	d0fa      	beq.n	800ae24 <floorf+0x38>
 800ae2e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ae64 <floorf+0x78>
 800ae32:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3e:	ddef      	ble.n	800ae20 <floorf+0x34>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bfbe      	ittt	lt
 800ae44:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ae48:	fa40 f202 	asrlt.w	r2, r0, r2
 800ae4c:	189b      	addlt	r3, r3, r2
 800ae4e:	ea23 0301 	bic.w	r3, r3, r1
 800ae52:	e7e5      	b.n	800ae20 <floorf+0x34>
 800ae54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ae58:	d3e4      	bcc.n	800ae24 <floorf+0x38>
 800ae5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae5e:	4770      	bx	lr
 800ae60:	2300      	movs	r3, #0
 800ae62:	e7dd      	b.n	800ae20 <floorf+0x34>
 800ae64:	7149f2ca 	.word	0x7149f2ca
 800ae68:	bf800000 	.word	0xbf800000
 800ae6c:	007fffff 	.word	0x007fffff

0800ae70 <scalbnf>:
 800ae70:	ee10 3a10 	vmov	r3, s0
 800ae74:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ae78:	d025      	beq.n	800aec6 <scalbnf+0x56>
 800ae7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ae7e:	d302      	bcc.n	800ae86 <scalbnf+0x16>
 800ae80:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae84:	4770      	bx	lr
 800ae86:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ae8a:	d122      	bne.n	800aed2 <scalbnf+0x62>
 800ae8c:	4b2a      	ldr	r3, [pc, #168]	; (800af38 <scalbnf+0xc8>)
 800ae8e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800af3c <scalbnf+0xcc>
 800ae92:	4298      	cmp	r0, r3
 800ae94:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae98:	db16      	blt.n	800aec8 <scalbnf+0x58>
 800ae9a:	ee10 3a10 	vmov	r3, s0
 800ae9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aea2:	3a19      	subs	r2, #25
 800aea4:	4402      	add	r2, r0
 800aea6:	2afe      	cmp	r2, #254	; 0xfe
 800aea8:	dd15      	ble.n	800aed6 <scalbnf+0x66>
 800aeaa:	ee10 3a10 	vmov	r3, s0
 800aeae:	eddf 7a24 	vldr	s15, [pc, #144]	; 800af40 <scalbnf+0xd0>
 800aeb2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800af44 <scalbnf+0xd4>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	eeb0 7a67 	vmov.f32	s14, s15
 800aebc:	bfb8      	it	lt
 800aebe:	eef0 7a66 	vmovlt.f32	s15, s13
 800aec2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800aec6:	4770      	bx	lr
 800aec8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800af48 <scalbnf+0xd8>
 800aecc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aed0:	4770      	bx	lr
 800aed2:	0dd2      	lsrs	r2, r2, #23
 800aed4:	e7e6      	b.n	800aea4 <scalbnf+0x34>
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	dd06      	ble.n	800aee8 <scalbnf+0x78>
 800aeda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aede:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800aee2:	ee00 3a10 	vmov	s0, r3
 800aee6:	4770      	bx	lr
 800aee8:	f112 0f16 	cmn.w	r2, #22
 800aeec:	da1a      	bge.n	800af24 <scalbnf+0xb4>
 800aeee:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aef2:	4298      	cmp	r0, r3
 800aef4:	ee10 3a10 	vmov	r3, s0
 800aef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aefc:	dd0a      	ble.n	800af14 <scalbnf+0xa4>
 800aefe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800af40 <scalbnf+0xd0>
 800af02:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800af44 <scalbnf+0xd4>
 800af06:	eef0 7a40 	vmov.f32	s15, s0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	bf18      	it	ne
 800af0e:	eeb0 0a47 	vmovne.f32	s0, s14
 800af12:	e7db      	b.n	800aecc <scalbnf+0x5c>
 800af14:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800af48 <scalbnf+0xd8>
 800af18:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800af4c <scalbnf+0xdc>
 800af1c:	eef0 7a40 	vmov.f32	s15, s0
 800af20:	2b00      	cmp	r3, #0
 800af22:	e7f3      	b.n	800af0c <scalbnf+0x9c>
 800af24:	3219      	adds	r2, #25
 800af26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af2a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af2e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800af50 <scalbnf+0xe0>
 800af32:	ee07 3a10 	vmov	s14, r3
 800af36:	e7c4      	b.n	800aec2 <scalbnf+0x52>
 800af38:	ffff3cb0 	.word	0xffff3cb0
 800af3c:	4c000000 	.word	0x4c000000
 800af40:	7149f2ca 	.word	0x7149f2ca
 800af44:	f149f2ca 	.word	0xf149f2ca
 800af48:	0da24260 	.word	0x0da24260
 800af4c:	8da24260 	.word	0x8da24260
 800af50:	33000000 	.word	0x33000000

0800af54 <_init>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	bf00      	nop
 800af58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5a:	bc08      	pop	{r3}
 800af5c:	469e      	mov	lr, r3
 800af5e:	4770      	bx	lr

0800af60 <_fini>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	bf00      	nop
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr
