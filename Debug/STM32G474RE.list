
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082bc  080082bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082c4  080082c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080082cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000070  0800833c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800833c  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024195  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394d  00000000  00000000  00044235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00019b34  00000000  00000000  00047b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  000616b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a0  00000000  00000000  00062b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e1a  00000000  00000000  000641b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025272  00000000  00000000  0008dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115a26  00000000  00000000  000b3244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c8c6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a28  00000000  00000000  001c8cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007e54 	.word	0x08007e54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08007e54 	.word	0x08007e54

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b974 	b.w	8000b84 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468e      	mov	lr, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d14d      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c2:	428a      	cmp	r2, r1
 80008c4:	4694      	mov	ip, r2
 80008c6:	d969      	bls.n	800099c <__udivmoddi4+0xe8>
 80008c8:	fab2 f282 	clz	r2, r2
 80008cc:	b152      	cbz	r2, 80008e4 <__udivmoddi4+0x30>
 80008ce:	fa01 f302 	lsl.w	r3, r1, r2
 80008d2:	f1c2 0120 	rsb	r1, r2, #32
 80008d6:	fa20 f101 	lsr.w	r1, r0, r1
 80008da:	fa0c fc02 	lsl.w	ip, ip, r2
 80008de:	ea41 0e03 	orr.w	lr, r1, r3
 80008e2:	4094      	lsls	r4, r2
 80008e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e8:	0c21      	lsrs	r1, r4, #16
 80008ea:	fbbe f6f8 	udiv	r6, lr, r8
 80008ee:	fa1f f78c 	uxth.w	r7, ip
 80008f2:	fb08 e316 	mls	r3, r8, r6, lr
 80008f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008fa:	fb06 f107 	mul.w	r1, r6, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 30ff 	add.w	r0, r6, #4294967295
 800090a:	f080 811f 	bcs.w	8000b4c <__udivmoddi4+0x298>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 811c 	bls.w	8000b4c <__udivmoddi4+0x298>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a5b      	subs	r3, r3, r1
 800091a:	b2a4      	uxth	r4, r4
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3310 	mls	r3, r8, r0, r3
 8000924:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000928:	fb00 f707 	mul.w	r7, r0, r7
 800092c:	42a7      	cmp	r7, r4
 800092e:	d90a      	bls.n	8000946 <__udivmoddi4+0x92>
 8000930:	eb1c 0404 	adds.w	r4, ip, r4
 8000934:	f100 33ff 	add.w	r3, r0, #4294967295
 8000938:	f080 810a 	bcs.w	8000b50 <__udivmoddi4+0x29c>
 800093c:	42a7      	cmp	r7, r4
 800093e:	f240 8107 	bls.w	8000b50 <__udivmoddi4+0x29c>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094a:	1be4      	subs	r4, r4, r7
 800094c:	2600      	movs	r6, #0
 800094e:	b11d      	cbz	r5, 8000958 <__udivmoddi4+0xa4>
 8000950:	40d4      	lsrs	r4, r2
 8000952:	2300      	movs	r3, #0
 8000954:	e9c5 4300 	strd	r4, r3, [r5]
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d909      	bls.n	8000976 <__udivmoddi4+0xc2>
 8000962:	2d00      	cmp	r5, #0
 8000964:	f000 80ef 	beq.w	8000b46 <__udivmoddi4+0x292>
 8000968:	2600      	movs	r6, #0
 800096a:	e9c5 0100 	strd	r0, r1, [r5]
 800096e:	4630      	mov	r0, r6
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	fab3 f683 	clz	r6, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d14a      	bne.n	8000a14 <__udivmoddi4+0x160>
 800097e:	428b      	cmp	r3, r1
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xd4>
 8000982:	4282      	cmp	r2, r0
 8000984:	f200 80f9 	bhi.w	8000b7a <__udivmoddi4+0x2c6>
 8000988:	1a84      	subs	r4, r0, r2
 800098a:	eb61 0303 	sbc.w	r3, r1, r3
 800098e:	2001      	movs	r0, #1
 8000990:	469e      	mov	lr, r3
 8000992:	2d00      	cmp	r5, #0
 8000994:	d0e0      	beq.n	8000958 <__udivmoddi4+0xa4>
 8000996:	e9c5 4e00 	strd	r4, lr, [r5]
 800099a:	e7dd      	b.n	8000958 <__udivmoddi4+0xa4>
 800099c:	b902      	cbnz	r2, 80009a0 <__udivmoddi4+0xec>
 800099e:	deff      	udf	#255	; 0xff
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	f040 8092 	bne.w	8000ace <__udivmoddi4+0x21a>
 80009aa:	eba1 010c 	sub.w	r1, r1, ip
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2601      	movs	r6, #1
 80009b8:	0c20      	lsrs	r0, r4, #16
 80009ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80009be:	fb07 1113 	mls	r1, r7, r3, r1
 80009c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c6:	fb0e f003 	mul.w	r0, lr, r3
 80009ca:	4288      	cmp	r0, r1
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x12c>
 80009ce:	eb1c 0101 	adds.w	r1, ip, r1
 80009d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x12a>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 80009de:	4643      	mov	r3, r8
 80009e0:	1a09      	subs	r1, r1, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x156>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x154>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2ca>
 8000a08:	4608      	mov	r0, r1
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a12:	e79c      	b.n	800094e <__udivmoddi4+0x9a>
 8000a14:	f1c6 0720 	rsb	r7, r6, #32
 8000a18:	40b3      	lsls	r3, r6
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa20 f407 	lsr.w	r4, r0, r7
 8000a26:	fa01 f306 	lsl.w	r3, r1, r6
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	40f9      	lsrs	r1, r7
 8000a2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a32:	fa00 f306 	lsl.w	r3, r0, r6
 8000a36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a3a:	0c20      	lsrs	r0, r4, #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fb09 1118 	mls	r1, r9, r8, r1
 8000a44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a48:	fb08 f00e 	mul.w	r0, r8, lr
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b8>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2bc>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2bc>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a74:	fb09 1110 	mls	r1, r9, r0, r1
 8000a78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a80:	458e      	cmp	lr, r1
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1e2>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2b4>
 8000a8e:	458e      	cmp	lr, r1
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2b4>
 8000a92:	3802      	subs	r0, #2
 8000a94:	4461      	add	r1, ip
 8000a96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9e:	eba1 010e 	sub.w	r1, r1, lr
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46a6      	mov	lr, r4
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x2a4>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x2a0>
 8000aac:	b15d      	cbz	r5, 8000ac6 <__udivmoddi4+0x212>
 8000aae:	ebb3 0208 	subs.w	r2, r3, r8
 8000ab2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aba:	fa22 f306 	lsr.w	r3, r2, r6
 8000abe:	40f1      	lsrs	r1, r6
 8000ac0:	431f      	orrs	r7, r3
 8000ac2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	40d8      	lsrs	r0, r3
 8000ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad8:	fa21 f303 	lsr.w	r3, r1, r3
 8000adc:	4091      	lsls	r1, r2
 8000ade:	4301      	orrs	r1, r0
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aec:	fb07 3610 	mls	r6, r7, r0, r3
 8000af0:	0c0b      	lsrs	r3, r1, #16
 8000af2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af6:	fb00 f60e 	mul.w	r6, r0, lr
 8000afa:	429e      	cmp	r6, r3
 8000afc:	fa04 f402 	lsl.w	r4, r4, r2
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x260>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b8>
 8000b0c:	429e      	cmp	r6, r3
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b8>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	1b9b      	subs	r3, r3, r6
 8000b16:	b289      	uxth	r1, r1
 8000b18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b24:	fb06 f30e 	mul.w	r3, r6, lr
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x28a>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b3a:	3e02      	subs	r6, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0x104>
 8000b46:	462e      	mov	r6, r5
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e705      	b.n	8000958 <__udivmoddi4+0xa4>
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	e6e3      	b.n	8000918 <__udivmoddi4+0x64>
 8000b50:	4618      	mov	r0, r3
 8000b52:	e6f8      	b.n	8000946 <__udivmoddi4+0x92>
 8000b54:	454b      	cmp	r3, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f8>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b60:	3801      	subs	r0, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f8>
 8000b64:	4646      	mov	r6, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x28a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1e2>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b8>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4461      	add	r1, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x12c>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e709      	b.n	8000992 <__udivmoddi4+0xde>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x156>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <cfPhaseLockedLoop>:

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000b88:	ee20 1a01 	vmul.f32	s2, s0, s2
 8000b8c:	edd0 7a00 	vldr	s15, [r0]
 8000b90:	ee31 1a27 	vadd.f32	s2, s2, s15
 8000b94:	ed80 1a00 	vstr	s2, [r0]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000b98:	ee20 0a20 	vmul.f32	s0, s0, s1

	return ElectAngVeloEstimate;
}
 8000b9c:	ee31 0a00 	vadd.f32	s0, s2, s0
 8000ba0:	4770      	bx	lr

08000ba2 <gfDivideAvoidZero>:
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
	float result;
	if ( den >= 0 && den < threshold )
 8000ba2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000baa:	db04      	blt.n	8000bb6 <gfDivideAvoidZero+0x14>
 8000bac:	eef4 0ac1 	vcmpe.f32	s1, s2
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	d411      	bmi.n	8000bda <gfDivideAvoidZero+0x38>
		den = threshold;
	else if( den < 0 && den > -threshold)
 8000bb6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	d402      	bmi.n	8000bc6 <gfDivideAvoidZero+0x24>
		den = -threshold;

	result = num / den;
	return result;
}
 8000bc0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8000bc4:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 8000bc6:	eeb1 1a41 	vneg.f32	s2, s2
 8000bca:	eeb4 1ae0 	vcmpe.f32	s2, s1
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	d5f5      	bpl.n	8000bc0 <gfDivideAvoidZero+0x1e>
		den = -threshold;
 8000bd4:	eef0 0a41 	vmov.f32	s1, s2
 8000bd8:	e7f2      	b.n	8000bc0 <gfDivideAvoidZero+0x1e>
		den = threshold;
 8000bda:	eef0 0a41 	vmov.f32	s1, s2
 8000bde:	e7ef      	b.n	8000bc0 <gfDivideAvoidZero+0x1e>

08000be0 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000be0:	b508      	push	{r3, lr}
	theta = fmodf(theta, TWOPI);
 8000be2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000c1c <gfWrapTheta+0x3c>
 8000be6:	f006 f9e7 	bl	8006fb8 <fmodf>
	if( theta > PI)
 8000bea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000c20 <gfWrapTheta+0x40>
 8000bee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf6:	dd04      	ble.n	8000c02 <gfWrapTheta+0x22>
		theta -= TWOPI;
 8000bf8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000c1c <gfWrapTheta+0x3c>
 8000bfc:	ee30 0a67 	vsub.f32	s0, s0, s15
	else if( theta < -PI)
		theta += TWOPI;

	return theta;
}
 8000c00:	bd08      	pop	{r3, pc}
	else if( theta < -PI)
 8000c02:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000c24 <gfWrapTheta+0x44>
 8000c06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	d5f7      	bpl.n	8000c00 <gfWrapTheta+0x20>
		theta += TWOPI;
 8000c10:	eddf 7a02 	vldr	s15, [pc, #8]	; 8000c1c <gfWrapTheta+0x3c>
 8000c14:	ee30 0a27 	vadd.f32	s0, s0, s15
	return theta;
 8000c18:	e7f2      	b.n	8000c00 <gfWrapTheta+0x20>
 8000c1a:	bf00      	nop
 8000c1c:	40c90fdb 	.word	0x40c90fdb
 8000c20:	40490fdb 	.word	0x40490fdb
 8000c24:	c0490fdb 	.word	0xc0490fdb

08000c28 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000c28:	eef0 7a40 	vmov.f32	s15, s0
 8000c2c:	eeb0 0a41 	vmov.f32	s0, s2
	if(input > Upper) input = Upper;
 8000c30:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c38:	dc01      	bgt.n	8000c3e <gUpperLowerLimit+0x16>
 8000c3a:	eef0 0a67 	vmov.f32	s1, s15
	if(input < Lower) input = Lower;
 8000c3e:	eef4 0ac0 	vcmpe.f32	s1, s0
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d401      	bmi.n	8000c4c <gUpperLowerLimit+0x24>
 8000c48:	eeb0 0a60 	vmov.f32	s0, s1
	return input;
}
 8000c4c:	4770      	bx	lr

08000c4e <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	outputMode[0] = OUTPUTMODE_OPEN;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	700b      	strb	r3, [r1, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 8000c52:	704b      	strb	r3, [r1, #1]
	outputMode[2] = OUTPUTMODE_OPEN;
 8000c54:	708b      	strb	r3, [r1, #2]
	Duty[0] = 0.0f;
 8000c56:	2300      	movs	r3, #0
 8000c58:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 8000c5a:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 8000c5c:	6083      	str	r3, [r0, #8]
}
 8000c5e:	4770      	bx	lr

08000c60 <gLPF>:
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 8000c60:	ee20 1a81 	vmul.f32	s2, s1, s2
	yn_1 = *y;
 8000c64:	ed90 7a00 	vldr	s14, [r0]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000c68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c6c:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8000c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c74:	ee21 1a00 	vmul.f32	s2, s2, s0
 8000c78:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000c7c:	edc0 7a00 	vstr	s15, [r0]
}
 8000c80:	4770      	bx	lr

08000c82 <gRateLimit>:
	// time constant tau = 1/wc
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 8000c82:	ee60 0a81 	vmul.f32	s1, s1, s2
	yn_1 = *y;
 8000c86:	edd0 7a00 	vldr	s15, [r0]

	if( r > yn_1 )
 8000c8a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	d504      	bpl.n	8000c9e <gRateLimit+0x1c>
		ytmp = yn_1 + dy;
 8000c94:	ee30 7aa7 	vadd.f32	s14, s1, s15
	else if( r < yn_1 )
		ytmp = yn_1 - dy;

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 8000c98:	ed80 7a00 	vstr	s14, [r0]

}
 8000c9c:	4770      	bx	lr
	else if( r < yn_1 )
 8000c9e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	ddf7      	ble.n	8000c98 <gRateLimit+0x16>
		ytmp = yn_1 - dy;
 8000ca8:	ee37 7ae0 	vsub.f32	s14, s15, s1
 8000cac:	e7f4      	b.n	8000c98 <gRateLimit+0x16>

08000cae <slctPosMode>:

}

void slctPosMode(float electFreq, uint8_t* posMode){

	if(*posMode != POSMODE_HALL_PLL){
 8000cae:	7803      	ldrb	r3, [r0, #0]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d00c      	beq.n	8000cce <slctPosMode+0x20>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000cb4:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8000cb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc0:	dd02      	ble.n	8000cc8 <slctPosMode+0x1a>
			*posMode = POSMODE_HALL_PLL;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	7003      	strb	r3, [r0, #0]
 8000cc6:	4770      	bx	lr
		else
			*posMode = POSMODE_HALL;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	7003      	strb	r3, [r0, #0]
 8000ccc:	4770      	bx	lr
	}
	else if(*posMode == POSMODE_HALL_PLL){
		if (electFreq < ELECTFREQ_INVALIDPLL)
 8000cce:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8000cd2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	d502      	bpl.n	8000ce2 <slctPosMode+0x34>
			*posMode = POSMODE_HALL;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	7003      	strb	r3, [r0, #0]
 8000ce0:	4770      	bx	lr
		else
			*posMode = POSMODE_HALL_PLL;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	7003      	strb	r3, [r0, #0]
	}

}
 8000ce6:	4770      	bx	lr

08000ce8 <slctDrvMode>:

void slctDrvMode(float electFreq, uint8_t* drvMode){

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000ce8:	7803      	ldrb	r3, [r0, #0]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d00c      	beq.n	8000d08 <slctDrvMode+0x20>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 8000cee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000d24 <slctDrvMode+0x3c>
 8000cf2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfa:	dd02      	ble.n	8000d02 <slctDrvMode+0x1a>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	7003      	strb	r3, [r0, #0]
 8000d00:	4770      	bx	lr
		else
			*drvMode = DRVMODE_OPENLOOP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	7003      	strb	r3, [r0, #0]
 8000d06:	4770      	bx	lr
	}
	else if(*drvMode == DRVMODE_VECTORCONTROL){
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 8000d08:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000d28 <slctDrvMode+0x40>
 8000d0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	d502      	bpl.n	8000d1c <slctDrvMode+0x34>
			*drvMode = DRVMODE_OPENLOOP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	7003      	strb	r3, [r0, #0]
 8000d1a:	4770      	bx	lr
		else
			*drvMode = DRVMODE_VECTORCONTROL;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	7003      	strb	r3, [r0, #0]
	}
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	42c80000 	.word	0x42c80000
 8000d28:	42a00000 	.word	0x42a00000

08000d2c <slctElectAngleFromPosMode>:
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	b093      	sub	sp, #76	; 0x4c
 8000d30:	460c      	mov	r4, r1
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 8000d32:	2804      	cmp	r0, #4
 8000d34:	d870      	bhi.n	8000e18 <slctElectAngleFromPosMode+0xec>
 8000d36:	e8df f000 	tbb	[pc, r0]
 8000d3a:	0803      	.short	0x0803
 8000d3c:	4234      	.short	0x4234
 8000d3e:	50          	.byte	0x50
 8000d3f:	00          	.byte	0x00
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 8000d40:	2300      	movs	r3, #0
 8000d42:	600b      	str	r3, [r1, #0]
		sensData->electAngVelo = 0.0f;
 8000d44:	604b      	str	r3, [r1, #4]
	default:
		sensData->electAngle = 0.0f;
		sensData->electAngVelo = 0.0f;
		break;
	}
}
 8000d46:	b013      	add	sp, #76	; 0x4c
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000d4a:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <slctElectAngleFromPosMode+0xf4>)
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	edc1 7a01 	vstr	s15, [r1, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000d54:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000e24 <slctElectAngleFromPosMode+0xf8>
 8000d58:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <slctElectAngleFromPosMode+0xfc>)
 8000d5e:	edd3 7a00 	vldr	s15, [r3]
 8000d62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d66:	ed83 0a00 	vstr	s0, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 8000d6a:	f7ff ff39 	bl	8000be0 <gfWrapTheta>
 8000d6e:	ed84 0a00 	vstr	s0, [r4]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000d72:	4e2e      	ldr	r6, [pc, #184]	; (8000e2c <slctElectAngleFromPosMode+0x100>)
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <slctElectAngleFromPosMode+0x104>)
 8000d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d78:	ac04      	add	r4, sp, #16
 8000d7a:	4d2e      	ldr	r5, [pc, #184]	; (8000e34 <slctElectAngleFromPosMode+0x108>)
 8000d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d8c:	f106 030c 	add.w	r3, r6, #12
 8000d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000d96:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 ffd4 	bl	8001d48 <calcElectAngleEstimate>
		break;
 8000da0:	e7d1      	b.n	8000d46 <slctElectAngleFromPosMode+0x1a>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000da2:	ab10      	add	r3, sp, #64	; 0x40
 8000da4:	aa11      	add	r2, sp, #68	; 0x44
 8000da6:	2100      	movs	r1, #0
 8000da8:	4823      	ldr	r0, [pc, #140]	; (8000e38 <slctElectAngleFromPosMode+0x10c>)
 8000daa:	ed90 0a00 	vldr	s0, [r0]
 8000dae:	4823      	ldr	r0, [pc, #140]	; (8000e3c <slctElectAngleFromPosMode+0x110>)
 8000db0:	f000 faf6 	bl	80013a0 <calcElectAngle>
		sensData->electAngle = electAngle;
 8000db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000db6:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = electAngVelo;
 8000db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000dba:	6063      	str	r3, [r4, #4]
		break;
 8000dbc:	e7c3      	b.n	8000d46 <slctElectAngleFromPosMode+0x1a>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000dbe:	ab10      	add	r3, sp, #64	; 0x40
 8000dc0:	aa11      	add	r2, sp, #68	; 0x44
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	481c      	ldr	r0, [pc, #112]	; (8000e38 <slctElectAngleFromPosMode+0x10c>)
 8000dc6:	ed90 0a00 	vldr	s0, [r0]
 8000dca:	481c      	ldr	r0, [pc, #112]	; (8000e3c <slctElectAngleFromPosMode+0x110>)
 8000dcc:	f000 fae8 	bl	80013a0 <calcElectAngle>
		sensData->electAngle = electAngle;
 8000dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000dd2:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = electAngVelo;
 8000dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000dd6:	6063      	str	r3, [r4, #4]
		break;
 8000dd8:	e7b5      	b.n	8000d46 <slctElectAngleFromPosMode+0x1a>
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000dda:	4e14      	ldr	r6, [pc, #80]	; (8000e2c <slctElectAngleFromPosMode+0x100>)
 8000ddc:	4f14      	ldr	r7, [pc, #80]	; (8000e30 <slctElectAngleFromPosMode+0x104>)
 8000dde:	970f      	str	r7, [sp, #60]	; 0x3c
 8000de0:	f10d 0c10 	add.w	ip, sp, #16
 8000de4:	4d13      	ldr	r5, [pc, #76]	; (8000e34 <slctElectAngleFromPosMode+0x108>)
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000df2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000df6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8000dfa:	f106 030c 	add.w	r3, r6, #12
 8000dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e00:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000e04:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 ff9d 	bl	8001d48 <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6063      	str	r3, [r4, #4]
		break;
 8000e16:	e796      	b.n	8000d46 <slctElectAngleFromPosMode+0x1a>
		sensData->electAngle = 0.0f;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	600b      	str	r3, [r1, #0]
		sensData->electAngVelo = 0.0f;
 8000e1c:	604b      	str	r3, [r1, #4]
}
 8000e1e:	e792      	b.n	8000d46 <slctElectAngleFromPosMode+0x1a>
 8000e20:	200000bc 	.word	0x200000bc
 8000e24:	4684d000 	.word	0x4684d000
 8000e28:	200000d0 	.word	0x200000d0
 8000e2c:	200000e0 	.word	0x200000e0
 8000e30:	200000c0 	.word	0x200000c0
 8000e34:	200000fc 	.word	0x200000fc
 8000e38:	20000094 	.word	0x20000094
 8000e3c:	20000098 	.word	0x20000098

08000e40 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000e40:	b084      	sub	sp, #16
 8000e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	4604      	mov	r4, r0
 8000e4a:	a811      	add	r0, sp, #68	; 0x44
 8000e4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e50:	9d18      	ldr	r5, [sp, #96]	; 0x60
	float VamRef;
	float ModRef = 1.13;
	float ModErr;

	//Idq_ref[0] = 0.0f;
	ModErr = ModRef - vectorControlData->Mod;
 8000e52:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
	sId_ref_i = sId_ref_i + 0.0003 * ModErr;
 8000e56:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000f60 <slctCntlFromDrvMode+0x120>
 8000e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5e:	ee17 0a90 	vmov	r0, s15
 8000e62:	f7ff fc67 	bl	8000734 <__aeabi_f2d>
 8000e66:	a33c      	add	r3, pc, #240	; (adr r3, 8000f58 <slctCntlFromDrvMode+0x118>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff f9d4 	bl	8000218 <__aeabi_dmul>
 8000e70:	4606      	mov	r6, r0
 8000e72:	460f      	mov	r7, r1
 8000e74:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8000f64 <slctCntlFromDrvMode+0x124>
 8000e78:	f8d8 0000 	ldr.w	r0, [r8]
 8000e7c:	f7ff fc5a 	bl	8000734 <__aeabi_f2d>
 8000e80:	4632      	mov	r2, r6
 8000e82:	463b      	mov	r3, r7
 8000e84:	f7ff faf8 	bl	8000478 <__adddf3>
 8000e88:	f7ff fcac 	bl	80007e4 <__aeabi_d2f>
 8000e8c:	ee07 0a90 	vmov	s15, r0
 8000e90:	f8c8 0000 	str.w	r0, [r8]

	if( sId_ref_i > 0)
 8000e94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	dd02      	ble.n	8000ea4 <slctCntlFromDrvMode+0x64>
			sId_ref_i = 0;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f8c8 2000 	str.w	r2, [r8]
	if( sId_ref_i < -1.0f)
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <slctCntlFromDrvMode+0x124>)
 8000ea6:	ed93 7a00 	vldr	s14, [r3]
 8000eaa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8000eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	d418      	bmi.n	8000eea <slctCntlFromDrvMode+0xaa>
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <slctCntlFromDrvMode+0x124>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	9308      	str	r3, [sp, #32]

	Idq_ref[1] = IQREFMAX * gButton1;// * gVolume;
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <slctCntlFromDrvMode+0x128>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000f6c <slctCntlFromDrvMode+0x12c>
 8000ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ed2:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24

	switch(drvMode){
 8000ed6:	2c02      	cmp	r4, #2
 8000ed8:	d013      	beq.n	8000f02 <slctCntlFromDrvMode+0xc2>
 8000eda:	2c04      	cmp	r4, #4
 8000edc:	d02d      	beq.n	8000f3a <slctCntlFromDrvMode+0xfa>
 8000ede:	b13c      	cbz	r4, 8000ef0 <slctCntlFromDrvMode+0xb0>
			break;
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(Idq_ref, sensData, vectorControlData, Duty, outputMode);
			break;
		default :
			gOffDuty(Duty, outputMode);
 8000ee0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000ee2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8000ee4:	f7ff feb3 	bl	8000c4e <gOffDuty>
	}
}
 8000ee8:	e006      	b.n	8000ef8 <slctCntlFromDrvMode+0xb8>
				sId_ref_i = -1.0f;
 8000eea:	edc3 7a00 	vstr	s15, [r3]
 8000eee:	e7e3      	b.n	8000eb8 <slctCntlFromDrvMode+0x78>
			gOffDuty(Duty, outputMode);
 8000ef0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000ef2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8000ef4:	f7ff feab 	bl	8000c4e <gOffDuty>
}
 8000ef8:	b00a      	add	sp, #40	; 0x28
 8000efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000efe:	b004      	add	sp, #16
 8000f00:	4770      	bx	lr
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * 0.5f * gButton1;;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <slctCntlFromDrvMode+0x130>)
 8000f04:	ed93 0a05 	vldr	s0, [r3, #20]
 8000f08:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f74 <slctCntlFromDrvMode+0x134>
 8000f0c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000f10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f14:	ee20 0a07 	vmul.f32	s0, s0, s14
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 8000f18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000f1a:	9305      	str	r3, [sp, #20]
 8000f1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	9503      	str	r5, [sp, #12]
 8000f22:	ab15      	add	r3, sp, #84	; 0x54
 8000f24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f28:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8000f2c:	ab11      	add	r3, sp, #68	; 0x44
 8000f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f30:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000f34:	f000 fd66 	bl	8001a04 <OpenLoopTasks>
			break;
 8000f38:	e7de      	b.n	8000ef8 <slctCntlFromDrvMode+0xb8>
			VectorControlTasks(Idq_ref, sensData, vectorControlData, Duty, outputMode);
 8000f3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000f3c:	9306      	str	r3, [sp, #24]
 8000f3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000f40:	9305      	str	r3, [sp, #20]
 8000f42:	9504      	str	r5, [sp, #16]
 8000f44:	ab14      	add	r3, sp, #80	; 0x50
 8000f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f48:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000f4c:	ab11      	add	r3, sp, #68	; 0x44
 8000f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f50:	a808      	add	r0, sp, #32
 8000f52:	f000 fb29 	bl	80015a8 <VectorControlTasks>
			break;
 8000f56:	e7cf      	b.n	8000ef8 <slctCntlFromDrvMode+0xb8>
 8000f58:	30553261 	.word	0x30553261
 8000f5c:	3f33a92a 	.word	0x3f33a92a
 8000f60:	3f90a3d7 	.word	0x3f90a3d7
 8000f64:	200000d4 	.word	0x200000d4
 8000f68:	20000090 	.word	0x20000090
 8000f6c:	3e4ccccd 	.word	0x3e4ccccd
 8000f70:	200000e0 	.word	0x200000e0
 8000f74:	3f1cc471 	.word	0x3f1cc471

08000f78 <Sequence>:
void Sequence(void){
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	b088      	sub	sp, #32
	gButton1 = readButton1();
 8000f7c:	f000 f894 	bl	80010a8 <readButton1>
 8000f80:	4b38      	ldr	r3, [pc, #224]	; (8001064 <Sequence+0xec>)
 8000f82:	7018      	strb	r0, [r3, #0]
	gVolume = readVolume();
 8000f84:	f000 f8d0 	bl	8001128 <readVolume>
 8000f88:	4b37      	ldr	r3, [pc, #220]	; (8001068 <Sequence+0xf0>)
 8000f8a:	ed83 0a00 	vstr	s0, [r3]
	readHallSignal(gHall);
 8000f8e:	4837      	ldr	r0, [pc, #220]	; (800106c <Sequence+0xf4>)
 8000f90:	f000 f936 	bl	8001200 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 8000f94:	4836      	ldr	r0, [pc, #216]	; (8001070 <Sequence+0xf8>)
 8000f96:	f000 f94b 	bl	8001230 <readElectFreqFromHallSignal>
	readCurrent(gIuvw_AD, sSensData.Iuvw);
 8000f9a:	4c36      	ldr	r4, [pc, #216]	; (8001074 <Sequence+0xfc>)
 8000f9c:	f104 0108 	add.w	r1, r4, #8
 8000fa0:	4835      	ldr	r0, [pc, #212]	; (8001078 <Sequence+0x100>)
 8000fa2:	f000 f8ed 	bl	8001180 <readCurrent>
	sSensData.Vdc = readVdc();
 8000fa6:	f000 f8db 	bl	8001160 <readVdc>
 8000faa:	eef0 0a40 	vmov.f32	s1, s0
 8000fae:	ed84 0a05 	vstr	s0, [r4, #20]
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc, 1.0f);;
 8000fb2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000fb6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000fba:	f7ff fdf2 	bl	8000ba2 <gfDivideAvoidZero>
 8000fbe:	ed84 0a06 	vstr	s0, [r4, #24]
	if(sInitCnt < 500){
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <Sequence+0x104>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fca:	d22a      	bcs.n	8001022 <Sequence+0xaa>
		sInitCnt++;
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a2b      	ldr	r2, [pc, #172]	; (800107c <Sequence+0x104>)
 8000fd0:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <Sequence+0x108>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <Sequence+0x10c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <Sequence+0x110>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
	slctElectAngleFromPosMode(sPosMode, &sSensData);
 8000fe4:	4c23      	ldr	r4, [pc, #140]	; (8001074 <Sequence+0xfc>)
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <Sequence+0x108>)
 8000fea:	7818      	ldrb	r0, [r3, #0]
 8000fec:	f7ff fe9e 	bl	8000d2c <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 8000ff0:	4e26      	ldr	r6, [pc, #152]	; (800108c <Sequence+0x114>)
 8000ff2:	9606      	str	r6, [sp, #24]
 8000ff4:	4d26      	ldr	r5, [pc, #152]	; (8001090 <Sequence+0x118>)
 8000ff6:	9505      	str	r5, [sp, #20]
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <Sequence+0x11c>)
 8000ffa:	9304      	str	r3, [sp, #16]
 8000ffc:	f104 030c 	add.w	r3, r4, #12
 8001000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001002:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001006:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <Sequence+0x10c>)
 800100c:	7800      	ldrb	r0, [r0, #0]
 800100e:	f7ff ff17 	bl	8000e40 <slctCntlFromDrvMode>
	writeOutputMode(sOutputMode);
 8001012:	4630      	mov	r0, r6
 8001014:	f000 f946 	bl	80012a4 <writeOutputMode>
	writeDuty(sDuty);
 8001018:	4628      	mov	r0, r5
 800101a:	f000 f979 	bl	8001310 <writeDuty>
}
 800101e:	b008      	add	sp, #32
 8001020:	bd70      	pop	{r4, r5, r6, pc}
		if(gButton1 == 1)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <Sequence+0xec>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d00e      	beq.n	8001048 <Sequence+0xd0>
			sElectAngVeloRefRateLimit = 0;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <Sequence+0x110>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
		slctPosMode(gElectFreq, &sPosMode);
 8001030:	4c0f      	ldr	r4, [pc, #60]	; (8001070 <Sequence+0xf8>)
 8001032:	4813      	ldr	r0, [pc, #76]	; (8001080 <Sequence+0x108>)
 8001034:	ed94 0a00 	vldr	s0, [r4]
 8001038:	f7ff fe39 	bl	8000cae <slctPosMode>
		slctDrvMode(gElectFreq, &sDrvMode);
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <Sequence+0x10c>)
 800103e:	ed94 0a00 	vldr	s0, [r4]
 8001042:	f7ff fe51 	bl	8000ce8 <slctDrvMode>
 8001046:	e7cd      	b.n	8000fe4 <Sequence+0x6c>
			sElectAngVeloRef = 300.0f;
 8001048:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001098 <Sequence+0x120>
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <Sequence+0x124>)
 800104e:	ed83 0a00 	vstr	s0, [r3]
			gRateLimit(sElectAngVeloRef, 500.0f, CARRIERCYCLE, &sElectAngVeloRefRateLimit);
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <Sequence+0x110>)
 8001054:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80010a0 <Sequence+0x128>
 8001058:	eddf 0a12 	vldr	s1, [pc, #72]	; 80010a4 <Sequence+0x12c>
 800105c:	f7ff fe11 	bl	8000c82 <gRateLimit>
 8001060:	e7e6      	b.n	8001030 <Sequence+0xb8>
 8001062:	bf00      	nop
 8001064:	20000090 	.word	0x20000090
 8001068:	200000a4 	.word	0x200000a4
 800106c:	20000098 	.word	0x20000098
 8001070:	20000094 	.word	0x20000094
 8001074:	200000e0 	.word	0x200000e0
 8001078:	2000009c 	.word	0x2000009c
 800107c:	200000d8 	.word	0x200000d8
 8001080:	200000df 	.word	0x200000df
 8001084:	200000a8 	.word	0x200000a8
 8001088:	200000bc 	.word	0x200000bc
 800108c:	200000dc 	.word	0x200000dc
 8001090:	200000ac 	.word	0x200000ac
 8001094:	200000fc 	.word	0x200000fc
 8001098:	43960000 	.word	0x43960000
 800109c:	200000b8 	.word	0x200000b8
 80010a0:	3876b949 	.word	0x3876b949
 80010a4:	43fa0000 	.word	0x43fa0000

080010a8 <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 80010a8:	b500      	push	{lr}
 80010aa:	b083      	sub	sp, #12
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80010ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <readButton1+0x1c>)
 80010b2:	f003 fcd7 	bl	8004a64 <HAL_GPIO_ReadPin>
 80010b6:	f88d 0007 	strb.w	r0, [sp, #7]
	return B1;
 80010ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010be:	b003      	add	sp, #12
 80010c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c4:	48000800 	.word	0x48000800

080010c8 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 80010c8:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 80010ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	9301      	str	r3, [sp, #4]

	return inputCaptureCnt;
 80010d2:	9801      	ldr	r0, [sp, #4]
}
 80010d4:	b002      	add	sp, #8
 80010d6:	4770      	bx	lr

080010d8 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 80010d8:	ee07 0a90 	vmov	s15, r0
 80010dc:	ee00 1a10 	vmov	s0, r1
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 80010e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 80010e6:	1c53      	adds	r3, r2, #1
 80010e8:	085b      	lsrs	r3, r3, #1
 80010ea:	ee07 3a10 	vmov	s14, r3


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 80010ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80010f6:	ee77 7ac0 	vsub.f32	s15, s15, s0

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 80010fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80010fe:	eeb1 7a47 	vneg.f32	s14, s14
 8001102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	dd05      	ble.n	8001118 <readTimeInterval+0x40>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 800110c:	ee07 2a10 	vmov	s14, r2
 8001110:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001114:	ee77 7a87 	vadd.f32	s15, s15, s14

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}
 8001118:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001124 <readTimeInterval+0x4c>
 800111c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	4d221fe8 	.word	0x4d221fe8

08001128 <readVolume>:
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <readVolume+0x2c>)
 800112a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800112e:	3b63      	subs	r3, #99	; 0x63
 8001130:	ee00 3a10 	vmov	s0, r3
 8001134:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001138:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001158 <readVolume+0x30>
 800113c:	ee20 0a27 	vmul.f32	s0, s0, s15
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 8001140:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d400      	bmi.n	800114c <readVolume+0x24>
	return Volume;
}
 800114a:	4770      	bx	lr
	if( Volume < 0) Volume = 0;
 800114c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800115c <readVolume+0x34>
	return Volume;
 8001150:	e7fb      	b.n	800114a <readVolume+0x22>
 8001152:	bf00      	nop
 8001154:	2000008c 	.word	0x2000008c
 8001158:	398007f8 	.word	0x398007f8
 800115c:	00000000 	.word	0x00000000

08001160 <readVdc>:

float readVdc(void){
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <readVdc+0x18>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	ee07 3a90 	vmov	s15, r3
	Vdc = Vdc_ad * AD2VOLTAGE;
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return Vdc;
}
 800116c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800117c <readVdc+0x1c>
 8001170:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000008c 	.word	0x2000008c
 800117c:	3c7cd035 	.word	0x3c7cd035

08001180 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8001180:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8001182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001186:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800118a:	b29b      	uxth	r3, r3
 800118c:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 800118e:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 8001192:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8001194:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001198:	8082      	strh	r2, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011f0 <readCurrent+0x70>
 80011a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011aa:	eddf 6a12 	vldr	s13, [pc, #72]	; 80011f4 <readCurrent+0x74>
 80011ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011b2:	edc1 7a00 	vstr	s15, [r1]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 80011b6:	8843      	ldrh	r3, [r0, #2]
 80011b8:	ee07 3a10 	vmov	s14, r3
 80011bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011c0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80011f8 <readCurrent+0x78>
 80011c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80011cc:	ed81 7a01 	vstr	s14, [r1, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 80011d0:	8883      	ldrh	r3, [r0, #4]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011fc <readCurrent+0x7c>
 80011de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011e6:	edc1 7a02 	vstr	s15, [r1, #8]
}
 80011ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	44fba000 	.word	0x44fba000
 80011f4:	bafdbcc5 	.word	0xbafdbcc5
 80011f8:	44fa8000 	.word	0x44fa8000
 80011fc:	44fd6000 	.word	0x44fd6000

08001200 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4604      	mov	r4, r0
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8001204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f003 fc2a 	bl	8004a64 <HAL_GPIO_ReadPin>
 8001210:	7020      	strb	r0, [r4, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8001212:	4d06      	ldr	r5, [pc, #24]	; (800122c <readHallSignal+0x2c>)
 8001214:	2108      	movs	r1, #8
 8001216:	4628      	mov	r0, r5
 8001218:	f003 fc24 	bl	8004a64 <HAL_GPIO_ReadPin>
 800121c:	7060      	strb	r0, [r4, #1]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 800121e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001222:	4628      	mov	r0, r5
 8001224:	f003 fc1e 	bl	8004a64 <HAL_GPIO_ReadPin>
 8001228:	70a0      	strb	r0, [r4, #2]
}
 800122a:	bd38      	pop	{r3, r4, r5, pc}
 800122c:	48000400 	.word	0x48000400

08001230 <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	4606      	mov	r6, r0
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 8001234:	4c16      	ldr	r4, [pc, #88]	; (8001290 <readElectFreqFromHallSignal+0x60>)
 8001236:	4d17      	ldr	r5, [pc, #92]	; (8001294 <readElectFreqFromHallSignal+0x64>)
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	6023      	str	r3, [r4, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 800123c:	f7ff ff44 	bl	80010c8 <readInputCaptureCnt>
 8001240:	6028      	str	r0, [r5, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 8001242:	6821      	ldr	r1, [r4, #0]
 8001244:	4288      	cmp	r0, r1
 8001246:	d108      	bne.n	800125a <readElectFreqFromHallSignal+0x2a>
		if( timeInterval > 0.0001f)
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);

		sNoInputCaptureCnt = 0;
	}
	else if(sNoInputCaptureCnt < 2000)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <readElectFreqFromHallSignal+0x68>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001250:	d21b      	bcs.n	800128a <readElectFreqFromHallSignal+0x5a>
		sNoInputCaptureCnt ++;
 8001252:	3301      	adds	r3, #1
 8001254:	4a10      	ldr	r2, [pc, #64]	; (8001298 <readElectFreqFromHallSignal+0x68>)
 8001256:	8013      	strh	r3, [r2, #0]
 8001258:	e00b      	b.n	8001272 <readElectFreqFromHallSignal+0x42>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 800125a:	f7ff ff3d 	bl	80010d8 <readTimeInterval>
		if( timeInterval > 0.0001f)
 800125e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800129c <readElectFreqFromHallSignal+0x6c>
 8001262:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dc03      	bgt.n	8001274 <readElectFreqFromHallSignal+0x44>
		sNoInputCaptureCnt = 0;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <readElectFreqFromHallSignal+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
	else
		*electFreq = 0;
}
 8001272:	bd70      	pop	{r4, r5, r6, pc}
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8001274:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80012a0 <readElectFreqFromHallSignal+0x70>
 8001278:	eef0 0a40 	vmov.f32	s1, s0
 800127c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001280:	f7ff fc8f 	bl	8000ba2 <gfDivideAvoidZero>
 8001284:	ed86 0a00 	vstr	s0, [r6]
 8001288:	e7f0      	b.n	800126c <readElectFreqFromHallSignal+0x3c>
		*electFreq = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	6033      	str	r3, [r6, #0]
}
 800128e:	e7f0      	b.n	8001272 <readElectFreqFromHallSignal+0x42>
 8001290:	2000012c 	.word	0x2000012c
 8001294:	20000128 	.word	0x20000128
 8001298:	20000130 	.word	0x20000130
 800129c:	38d1b717 	.word	0x38d1b717
 80012a0:	31ca1db9 	.word	0x31ca1db9

080012a4 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 80012a4:	b510      	push	{r4, lr}
 80012a6:	4604      	mov	r4, r0

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 80012a8:	f990 3000 	ldrsb.w	r3, [r0]
 80012ac:	b9c3      	cbnz	r3, 80012e0 <writeOutputMode+0x3c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b4:	4815      	ldr	r0, [pc, #84]	; (800130c <writeOutputMode+0x68>)
 80012b6:	f003 fbdc 	bl	8004a72 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);

	if(outputMode[1] == OUTPUTMODE_OPEN )
 80012ba:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80012be:	b9b3      	cbnz	r3, 80012ee <writeOutputMode+0x4a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c6:	4811      	ldr	r0, [pc, #68]	; (800130c <writeOutputMode+0x68>)
 80012c8:	f003 fbd3 	bl	8004a72 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);

	if(outputMode[2] == OUTPUTMODE_OPEN )
 80012cc:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80012d0:	b9a3      	cbnz	r3, 80012fc <writeOutputMode+0x58>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <writeOutputMode+0x68>)
 80012da:	f003 fbca 	bl	8004a72 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 80012de:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <writeOutputMode+0x68>)
 80012e8:	f003 fbc3 	bl	8004a72 <HAL_GPIO_WritePin>
 80012ec:	e7e5      	b.n	80012ba <writeOutputMode+0x16>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <writeOutputMode+0x68>)
 80012f6:	f003 fbbc 	bl	8004a72 <HAL_GPIO_WritePin>
 80012fa:	e7e7      	b.n	80012cc <writeOutputMode+0x28>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001302:	4802      	ldr	r0, [pc, #8]	; (800130c <writeOutputMode+0x68>)
 8001304:	f003 fbb5 	bl	8004a72 <HAL_GPIO_WritePin>
}
 8001308:	e7e9      	b.n	80012de <writeOutputMode+0x3a>
 800130a:	bf00      	nop
 800130c:	48000800 	.word	0x48000800

08001310 <writeDuty>:

void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8001310:	ed90 7a00 	vldr	s14, [r0]
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <writeDuty+0x4c>)
 8001316:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800131a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001326:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 800132a:	ed90 7a01 	vldr	s14, [r0, #4]
 800132e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8001342:	ed90 7a02 	vldr	s14, [r0, #8]
 8001346:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001356:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800135a:	4770      	bx	lr
 800135c:	40012c00 	.word	0x40012c00

08001360 <calcVoltageMode>:

	uint8_t hallInput;
	uint8_t voltageMode = 0;

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8001360:	7883      	ldrb	r3, [r0, #2]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	b2db      	uxtb	r3, r3
 8001366:	7842      	ldrb	r2, [r0, #1]
 8001368:	0052      	lsls	r2, r2, #1
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	4413      	add	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	7800      	ldrb	r0, [r0, #0]
 8001372:	4418      	add	r0, r3
 8001374:	b2c0      	uxtb	r0, r0

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001376:	1e43      	subs	r3, r0, #1
 8001378:	2b05      	cmp	r3, #5
 800137a:	d80c      	bhi.n	8001396 <calcVoltageMode+0x36>
 800137c:	e8df f003 	tbb	[pc, r3]
 8001380:	050e0d09 	.word	0x050e0d09
 8001384:	0307      	.short	0x0307
		break;
	  case 2:
		voltageMode = 4;
		break;
	  case 6:
		voltageMode = 5;
 8001386:	2005      	movs	r0, #5
		break;
 8001388:	4770      	bx	lr
	  case 4:
		voltageMode = 6;
 800138a:	2006      	movs	r0, #6
		break;
 800138c:	4770      	bx	lr
	  case 5:
		voltageMode = 1;
 800138e:	2001      	movs	r0, #1
		break;
 8001390:	4770      	bx	lr
	  case 1:
		voltageMode = 2;
 8001392:	2002      	movs	r0, #2
		break;
 8001394:	4770      	bx	lr
	  default :
		voltageMode = 0;
 8001396:	2000      	movs	r0, #0
	  break;
 8001398:	4770      	bx	lr
		voltageMode = 4;
 800139a:	2004      	movs	r0, #4
	}
	return voltageMode;
}
 800139c:	4770      	bx	lr
	...

080013a0 <calcElectAngle>:
void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 80013a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013a4:	ed2d 8b04 	vpush	{d8-d9}
 80013a8:	4680      	mov	r8, r0
 80013aa:	eef0 8a40 	vmov.f32	s17, s0
 80013ae:	460d      	mov	r5, r1
 80013b0:	4617      	mov	r7, r2
 80013b2:	461e      	mov	r6, r3
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80013b4:	4c65      	ldr	r4, [pc, #404]	; (800154c <calcElectAngle+0x1ac>)
 80013b6:	ed94 0a00 	vldr	s0, [r4]
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 80013ba:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8001550 <calcElectAngle+0x1b0>
 80013be:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001554 <calcElectAngle+0x1b4>
 80013c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80013c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80013ca:	f7ff fc2d 	bl	8000c28 <gUpperLowerLimit>
 80013ce:	eeb0 9a40 	vmov.f32	s18, s0
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80013d2:	ed94 7a00 	vldr	s14, [r4]
 80013d6:	eddf 7a60 	vldr	s15, [pc, #384]	; 8001558 <calcElectAngle+0x1b8>
 80013da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013de:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80013e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013ea:	ee87 8a87 	vdiv.f32	s16, s15, s14
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 80013ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800155c <calcElectAngle+0x1bc>
 80013f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80013f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80013fa:	ee27 8a88 	vmul.f32	s16, s15, s16
	sVoltageMode_pre = sVoltageMode;
 80013fe:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80015a4 <calcElectAngle+0x204>
 8001402:	f899 4000 	ldrb.w	r4, [r9]
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <calcElectAngle+0x1c0>)
 8001408:	701c      	strb	r4, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 800140a:	4640      	mov	r0, r8
 800140c:	f7ff ffa8 	bl	8001360 <calcVoltageMode>
 8001410:	f889 0000 	strb.w	r0, [r9]
	sElectAngleActual_pre = sElectAngleActual;
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <calcElectAngle+0x1c4>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b53      	ldr	r3, [pc, #332]	; (8001568 <calcElectAngle+0x1c8>)
 800141a:	601a      	str	r2, [r3, #0]

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 800141c:	1b04      	subs	r4, r0, r4
 800141e:	b2e3      	uxtb	r3, r4
 8001420:	b264      	sxtb	r4, r4

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8001422:	2c01      	cmp	r4, #1
 8001424:	dd11      	ble.n	800144a <calcElectAngle+0xaa>
		voltageMode_Diff -= 6;
 8001426:	3b06      	subs	r3, #6
 8001428:	b25c      	sxtb	r4, r3
	else if(voltageMode_Diff < -1)
		voltageMode_Diff += 6;

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800142a:	b10c      	cbz	r4, 8001430 <calcElectAngle+0x90>
		*rotDir = voltageMode_Diff;
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <calcElectAngle+0x1cc>)
 800142e:	701c      	strb	r4, [r3, #0]
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <calcElectAngle+0x1cc>)
 8001432:	f993 3000 	ldrsb.w	r3, [r3]
 8001436:	ee07 3a90 	vmov	s15, r3
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 800143a:	3801      	subs	r0, #1
 800143c:	2805      	cmp	r0, #5
 800143e:	d80a      	bhi.n	8001456 <calcElectAngle+0xb6>
 8001440:	e8df f000 	tbb	[pc, r0]
 8001444:	18091512 	.word	0x18091512
 8001448:	0f0c      	.short	0x0f0c
	else if(voltageMode_Diff < -1)
 800144a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800144e:	daec      	bge.n	800142a <calcElectAngle+0x8a>
		voltageMode_Diff += 6;
 8001450:	3306      	adds	r3, #6
 8001452:	b25c      	sxtb	r4, r3
 8001454:	e7e9      	b.n	800142a <calcElectAngle+0x8a>
		switch(voltageMode){
 8001456:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001550 <calcElectAngle+0x1b0>
 800145a:	e00d      	b.n	8001478 <calcElectAngle+0xd8>
			break;
		  case 4:
			  electAngle_Center = PIDIV3;
			break;
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 800145c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001570 <calcElectAngle+0x1d0>
			break;
 8001460:	e00a      	b.n	8001478 <calcElectAngle+0xd8>
		  case 6:
			  electAngle_Center = PI;
 8001462:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001574 <calcElectAngle+0x1d4>
			break;
 8001466:	e007      	b.n	8001478 <calcElectAngle+0xd8>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 8001468:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001578 <calcElectAngle+0x1d8>
			break;
 800146c:	e004      	b.n	8001478 <calcElectAngle+0xd8>
		  case 2:
			  electAngle_Center = -PIDIV3;
 800146e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800157c <calcElectAngle+0x1dc>
			break;
 8001472:	e001      	b.n	8001478 <calcElectAngle+0xd8>
			  electAngle_Center = PIDIV3;
 8001474:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001580 <calcElectAngle+0x1e0>
		  default :
			  electAngle_Center = 0.0f;
		  break;
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001584 <calcElectAngle+0x1e4>
 8001480:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001484:	ee37 0a67 	vsub.f32	s0, s14, s15
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8001488:	4c36      	ldr	r4, [pc, #216]	; (8001564 <calcElectAngle+0x1c4>)
 800148a:	ed84 0a00 	vstr	s0, [r4]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 800148e:	f7ff fba7 	bl	8000be0 <gfWrapTheta>
 8001492:	ed84 0a00 	vstr	s0, [r4]
	sFlgPLL_pre = sFlgPLL;
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <calcElectAngle+0x1e8>)
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	493c      	ldr	r1, [pc, #240]	; (800158c <calcElectAngle+0x1ec>)
 800149c:	700a      	strb	r2, [r1, #0]
	sFlgPLL = flgPLL;
 800149e:	701d      	strb	r5, [r3, #0]
	if(flgPLL == 1){
 80014a0:	2d01      	cmp	r5, #1
 80014a2:	d013      	beq.n	80014cc <calcElectAngle+0x12c>
		sElectAngleEstimate = sElectAngleActual;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <calcElectAngle+0x1f0>)
 80014a6:	ed83 0a00 	vstr	s0, [r3]
		sElectAngVeloEstimate = electFreq * TWOPI;
 80014aa:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001594 <calcElectAngle+0x1f4>
 80014ae:	ee68 8a80 	vmul.f32	s17, s17, s0
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <calcElectAngle+0x1ac>)
 80014b4:	edc3 8a00 	vstr	s17, [r3]
	*electAngle = sElectAngleEstimate;
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <calcElectAngle+0x1f0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	603b      	str	r3, [r7, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <calcElectAngle+0x1ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6033      	str	r3, [r6, #0]
}
 80014c4:	ecbd 8b04 	vpop	{d8-d9}
 80014c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ( sFlgPLL_pre == 0 ){
 80014cc:	b962      	cbnz	r2, 80014e8 <calcElectAngle+0x148>
			sElectAngVeloEstimate = electFreq * TWOPI;
 80014ce:	eddf 7a31 	vldr	s15, [pc, #196]	; 8001594 <calcElectAngle+0x1f4>
 80014d2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <calcElectAngle+0x1ac>)
 80014d8:	edc3 8a00 	vstr	s17, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <calcElectAngle+0x1f8>)
 80014de:	edc3 8a00 	vstr	s17, [r3]
			sElectAngleEstimate = sElectAngleActual;
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <calcElectAngle+0x1f0>)
 80014e4:	ed83 0a00 	vstr	s0, [r3]
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <calcElectAngle+0x1ac>)
 80014ea:	ed93 7a00 	vldr	s14, [r3]
 80014ee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800159c <calcElectAngle+0x1fc>
 80014f2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80014f6:	4c26      	ldr	r4, [pc, #152]	; (8001590 <calcElectAngle+0x1f0>)
 80014f8:	edd4 7a00 	vldr	s15, [r4]
 80014fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001500:	ed84 0a00 	vstr	s0, [r4]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8001504:	f7ff fb6c 	bl	8000be0 <gfWrapTheta>
 8001508:	ed84 0a00 	vstr	s0, [r4]
		if( sElectAngleActual != sElectAngleActual_pre){
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <calcElectAngle+0x1c4>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <calcElectAngle+0x1c8>)
 8001514:	ed93 7a00 	vldr	s14, [r3]
 8001518:	eef4 7a47 	vcmp.f32	s15, s14
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d0ca      	beq.n	80014b8 <calcElectAngle+0x118>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8001522:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8001526:	4c1e      	ldr	r4, [pc, #120]	; (80015a0 <calcElectAngle+0x200>)
 8001528:	ed84 0a00 	vstr	s0, [r4]
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 800152c:	f7ff fb58 	bl	8000be0 <gfWrapTheta>
 8001530:	ed84 0a00 	vstr	s0, [r4]
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <calcElectAngle+0x1f8>)
 8001536:	eeb0 1a48 	vmov.f32	s2, s16
 800153a:	eef0 0a49 	vmov.f32	s1, s18
 800153e:	f7ff fb23 	bl	8000b88 <cfPhaseLockedLoop>
 8001542:	4b02      	ldr	r3, [pc, #8]	; (800154c <calcElectAngle+0x1ac>)
 8001544:	ed83 0a00 	vstr	s0, [r3]
 8001548:	e7b6      	b.n	80014b8 <calcElectAngle+0x118>
 800154a:	bf00      	nop
 800154c:	20000134 	.word	0x20000134
 8001550:	00000000 	.word	0x00000000
 8001554:	43fa0000 	.word	0x43fa0000
 8001558:	3e22f983 	.word	0x3e22f983
 800155c:	3e4ccccd 	.word	0x3e4ccccd
 8001560:	20000152 	.word	0x20000152
 8001564:	20000138 	.word	0x20000138
 8001568:	2000013c 	.word	0x2000013c
 800156c:	20000150 	.word	0x20000150
 8001570:	40060a92 	.word	0x40060a92
 8001574:	40490fdb 	.word	0x40490fdb
 8001578:	c0060a92 	.word	0xc0060a92
 800157c:	bf860a92 	.word	0xbf860a92
 8001580:	3f860a92 	.word	0x3f860a92
 8001584:	3f060a92 	.word	0x3f060a92
 8001588:	20000148 	.word	0x20000148
 800158c:	20000149 	.word	0x20000149
 8001590:	20000144 	.word	0x20000144
 8001594:	40c90fdb 	.word	0x40c90fdb
 8001598:	2000014c 	.word	0x2000014c
 800159c:	4684d000 	.word	0x4684d000
 80015a0:	20000140 	.word	0x20000140
 80015a4:	20000151 	.word	0x20000151

080015a8 <VectorControlTasks>:
static inline void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(float *Idq_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80015a8:	b084      	sub	sp, #16
 80015aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015ae:	ed2d 8b0a 	vpush	{d8-d12}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	4680      	mov	r8, r0
 80015b6:	ad1d      	add	r5, sp, #116	; 0x74
 80015b8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80015bc:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80015be:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80015c0:	9b26      	ldr	r3, [sp, #152]	; 0x98

	outputMode[0] = OUTPUTMODE_POSITIVE;
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80015c6:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80015c8:	709a      	strb	r2, [r3, #2]
	ab2uvw(sVab, sVuvw);
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
}

static void uvw2ab(float* uvw, float* ab){
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80015ca:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 80015ce:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80015d2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80015d6:	ee26 8aa8 	vmul.f32	s16, s13, s17
 80015da:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80015de:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 80015e2:	ee67 8a28 	vmul.f32	s17, s14, s17
 80015e6:	ee38 8a68 	vsub.f32	s16, s16, s17
 80015ea:	eddf 9af3 	vldr	s19, [pc, #972]	; 80019b8 <VectorControlTasks+0x410>
 80015ee:	ee28 8a29 	vmul.f32	s16, s16, s19
 80015f2:	4ff2      	ldr	r7, [pc, #968]	; (80019bc <VectorControlTasks+0x414>)
 80015f4:	ed87 8a00 	vstr	s16, [r7]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 80015f8:	eddf 8af1 	vldr	s17, [pc, #964]	; 80019c0 <VectorControlTasks+0x418>
 80015fc:	ee26 9aa8 	vmul.f32	s18, s13, s17
 8001600:	ee67 8a28 	vmul.f32	s17, s14, s17
 8001604:	ee39 9a68 	vsub.f32	s18, s18, s17
 8001608:	ee29 9a29 	vmul.f32	s18, s18, s19
 800160c:	ed87 9a01 	vstr	s18, [r7, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001618:	ed9f 7aea 	vldr	s14, [pc, #936]	; 80019c4 <VectorControlTasks+0x41c>
 800161c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001620:	edc7 7a02 	vstr	s15, [r7, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001624:	eddd 8a1d 	vldr	s17, [sp, #116]	; 0x74
}

static void ab2dq(float theta, float* ab, float* dq){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001628:	eeb0 0a68 	vmov.f32	s0, s17
 800162c:	f005 fc7c 	bl	8006f28 <sinf>
 8001630:	eeb0 aa40 	vmov.f32	s20, s0
	cosTheta = cosf(theta);
 8001634:	eeb0 0a68 	vmov.f32	s0, s17
 8001638:	f005 fc32 	bl	8006ea0 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 800163c:	ee60 8a08 	vmul.f32	s17, s0, s16
 8001640:	ee2a 9a09 	vmul.f32	s18, s20, s18
 8001644:	ee78 8a89 	vadd.f32	s17, s17, s18
 8001648:	edc4 8a00 	vstr	s17, [r4]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 800164c:	ed97 ba00 	vldr	s22, [r7]
 8001650:	ee2b ba4a 	vnmul.f32	s22, s22, s20
 8001654:	edd7 7a01 	vldr	s15, [r7, #4]
 8001658:	ee20 0a27 	vmul.f32	s0, s0, s15
 800165c:	ee3b ba00 	vadd.f32	s22, s22, s0
 8001660:	ed84 ba01 	vstr	s22, [r4, #4]
	CurrentFbControl(Idq_ref, sensData, vectorControlData);
 8001664:	f10d 0c0c 	add.w	ip, sp, #12
 8001668:	46ae      	mov	lr, r5
 800166a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800166e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001672:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001676:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
	Kid = Kig;

	Ierr[0] = Igd_ref[0] - vectorControlData->Idq[0];
 800167a:	edd8 aa00 	vldr	s21, [r8]
 800167e:	ee7a aae8 	vsub.f32	s21, s21, s17
 8001682:	edcd aa01 	vstr	s21, [sp, #4]
	Ierr[1] = Igd_ref[1] - vectorControlData->Idq[1];
 8001686:	ed98 aa01 	vldr	s20, [r8, #4]
 800168a:	ee3a aa4b 	vsub.f32	s20, s20, s22
 800168e:	ed8d aa02 	vstr	s20, [sp, #8]

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001692:	ed9f 8acd 	vldr	s16, [pc, #820]	; 80019c8 <VectorControlTasks+0x420>
 8001696:	ee6a ba88 	vmul.f32	s23, s21, s16
 800169a:	edd4 0a04 	vldr	s1, [r4, #16]
 800169e:	ee7b baa0 	vadd.f32	s23, s23, s1
 80016a2:	edc4 ba04 	vstr	s23, [r4, #16]
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 80016a6:	ee2a 8a08 	vmul.f32	s16, s20, s16
 80016aa:	ed94 0a05 	vldr	s0, [r4, #20]
 80016ae:	ee38 8a00 	vadd.f32	s16, s16, s0
 80016b2:	ed84 8a05 	vstr	s16, [r4, #20]

	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 80016b6:	ed9d ca04 	vldr	s24, [sp, #16]
 80016ba:	eddf 7ac4 	vldr	s15, [pc, #784]	; 80019cc <VectorControlTasks+0x424>
 80016be:	ee6c 7a67 	vnmul.f32	s15, s24, s15
 80016c2:	ee17 0a90 	vmov	r0, s15
 80016c6:	f7ff f835 	bl	8000734 <__aeabi_f2d>
 80016ca:	a3b5      	add	r3, pc, #724	; (adr r3, 80019a0 <VectorControlTasks+0x3f8>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe fda2 	bl	8000218 <__aeabi_dmul>
 80016d4:	4680      	mov	r8, r0
 80016d6:	4689      	mov	r9, r1
 80016d8:	ee1b 0a10 	vmov	r0, s22
 80016dc:	f7ff f82a 	bl	8000734 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4640      	mov	r0, r8
 80016e6:	4649      	mov	r1, r9
 80016e8:	f7fe fd96 	bl	8000218 <__aeabi_dmul>
 80016ec:	f7ff f87a 	bl	80007e4 <__aeabi_d2f>
 80016f0:	ee09 0a10 	vmov	s18, r0
 80016f4:	61a0      	str	r0, [r4, #24]
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 80016f6:	ee1c 0a10 	vmov	r0, s24
 80016fa:	f7ff f81b 	bl	8000734 <__aeabi_f2d>
 80016fe:	4680      	mov	r8, r0
 8001700:	4689      	mov	r9, r1
 8001702:	ee18 0a90 	vmov	r0, s17
 8001706:	f7ff f815 	bl	8000734 <__aeabi_f2d>
 800170a:	a3a7      	add	r3, pc, #668	; (adr r3, 80019a8 <VectorControlTasks+0x400>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe fd82 	bl	8000218 <__aeabi_dmul>
 8001714:	a3a6      	add	r3, pc, #664	; (adr r3, 80019b0 <VectorControlTasks+0x408>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe fead 	bl	8000478 <__adddf3>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4640      	mov	r0, r8
 8001724:	4649      	mov	r1, r9
 8001726:	f7fe fd77 	bl	8000218 <__aeabi_dmul>
 800172a:	f7ff f85b 	bl	80007e4 <__aeabi_d2f>
 800172e:	ee00 0a10 	vmov	s0, r0
 8001732:	61e0      	str	r0, [r4, #28]

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8001734:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80019d0 <VectorControlTasks+0x428>
 8001738:	ee6a 0aa7 	vmul.f32	s1, s21, s15
 800173c:	ee7b 0aa0 	vadd.f32	s1, s23, s1
 8001740:	ee79 0a20 	vadd.f32	s1, s18, s1
 8001744:	edc4 0a02 	vstr	s1, [r4, #8]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8001748:	ee2a aa27 	vmul.f32	s20, s20, s15
 800174c:	ee38 8a0a 	vadd.f32	s16, s16, s20
 8001750:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001754:	ed84 0a03 	vstr	s0, [r4, #12]
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001758:	f10d 0c0c 	add.w	ip, sp, #12
 800175c:	46ae      	mov	lr, r5
 800175e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001762:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001766:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800176a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 800176e:	f005 fc21 	bl	8006fb4 <atan2f>
 8001772:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001776:	ed94 0a02 	vldr	s0, [r4, #8]
 800177a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800177e:	edd4 7a03 	vldr	s15, [r4, #12]
 8001782:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8001786:	ee30 0a27 	vadd.f32	s0, s0, s15
 800178a:	f005 fc35 	bl	8006ff8 <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 800178e:	ed84 0a08 	vstr	s0, [r4, #32]
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001792:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001796:	ee27 0a80 	vmul.f32	s0, s15, s0
 800179a:	ee60 9a29 	vmul.f32	s19, s0, s19
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 800179e:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
	limitVoltVectAmp(sensData, vectorControlData);
 80017a2:	f10d 0e0c 	add.w	lr, sp, #12
 80017a6:	46ac      	mov	ip, r5
 80017a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80017ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80017b0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80017b4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
	if( vectorControlData->Mod > MODLIMIT ){
 80017b8:	eddf 7a86 	vldr	s15, [pc, #536]	; 80019d4 <VectorControlTasks+0x42c>
 80017bc:	eef4 9ae7 	vcmpe.f32	s19, s15
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	dd29      	ble.n	800181a <VectorControlTasks+0x272>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 80017c6:	ed9d 8a08 	vldr	s16, [sp, #32]
 80017ca:	eddf 7a83 	vldr	s15, [pc, #524]	; 80019d8 <VectorControlTasks+0x430>
 80017ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80017d2:	eddf 8a80 	vldr	s17, [pc, #512]	; 80019d4 <VectorControlTasks+0x42c>
 80017d6:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 80017da:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 80017de:	eeb0 0a49 	vmov.f32	s0, s18
 80017e2:	f005 fb5d 	bl	8006ea0 <cosf>
 80017e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80017ea:	ed84 0a02 	vstr	s0, [r4, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 80017ee:	edd4 7a06 	vldr	s15, [r4, #24]
 80017f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80017f6:	ed84 0a04 	vstr	s0, [r4, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 80017fa:	eeb0 0a49 	vmov.f32	s0, s18
 80017fe:	f005 fb93 	bl	8006f28 <sinf>
 8001802:	ee28 8a00 	vmul.f32	s16, s16, s0
 8001806:	ed84 8a03 	vstr	s16, [r4, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 800180a:	ed94 0a07 	vldr	s0, [r4, #28]
 800180e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8001812:	ed84 8a05 	vstr	s16, [r4, #20]
		vectorControlData->Mod = MODLIMIT;
 8001816:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 800181a:	eddd 8a1d 	vldr	s17, [sp, #116]	; 0x74
	sinTheta = sinf(theta);
 800181e:	eeb0 0a68 	vmov.f32	s0, s17
 8001822:	f005 fb81 	bl	8006f28 <sinf>
 8001826:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 800182a:	eeb0 0a68 	vmov.f32	s0, s17
 800182e:	f005 fb37 	bl	8006ea0 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001832:	ed94 7a02 	vldr	s14, [r4, #8]
 8001836:	ee20 7a07 	vmul.f32	s14, s0, s14
 800183a:	edd4 7a03 	vldr	s15, [r4, #12]
 800183e:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001842:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <VectorControlTasks+0x434>)
 8001848:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 800184c:	edd4 6a02 	vldr	s13, [r4, #8]
 8001850:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001854:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001858:	ee38 8a00 	vadd.f32	s16, s16, s0
 800185c:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001860:	eddf 6a55 	vldr	s13, [pc, #340]	; 80019b8 <VectorControlTasks+0x410>
 8001864:	ee27 0a26 	vmul.f32	s0, s14, s13
 8001868:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <VectorControlTasks+0x438>)
 800186a:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 800186e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80019c0 <VectorControlTasks+0x418>
 800187a:	ee28 8a07 	vmul.f32	s16, s16, s14
 800187e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001882:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001886:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 800188a:	eeb1 7a40 	vneg.f32	s14, s0
 800188e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001892:	ed83 7a02 	vstr	s14, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8001896:	ed9d 6a23 	vldr	s12, [sp, #140]	; 0x8c
	if(Vuvw[1] > max)
 800189a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	f100 80a9 	bmi.w	80019f8 <VectorControlTasks+0x450>
	max = Vuvw[0];
 80018a6:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 80018aa:	4b4d      	ldr	r3, [pc, #308]	; (80019e0 <VectorControlTasks+0x438>)
 80018ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80018b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	dd01      	ble.n	80018be <VectorControlTasks+0x316>
		max = Vuvw[2];
 80018ba:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 80018be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	f300 809a 	bgt.w	80019fe <VectorControlTasks+0x456>
	min = Vuvw[0];
 80018ca:	eef0 5a40 	vmov.f32	s11, s0
	if(Vuvw[2] < min)
 80018ce:	eef4 6ae5 	vcmpe.f32	s13, s11
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d501      	bpl.n	80018dc <VectorControlTasks+0x334>
		min = Vuvw[2];
 80018d8:	eef0 5a66 	vmov.f32	s11, s13
	vo = (max + min) * 0.5f;
 80018dc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80018e0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80018e4:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 80018e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80018ec:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <VectorControlTasks+0x438>)
 80018ee:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 80018f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018f6:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 80018fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80018fe:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001902:	ee26 0a00 	vmul.f32	s0, s12, s0
 8001906:	ed86 0a00 	vstr	s0, [r6]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 800190a:	edd3 7a01 	vldr	s15, [r3, #4]
 800190e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001912:	edc6 7a01 	vstr	s15, [r6, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001916:	edd3 7a02 	vldr	s15, [r3, #8]
 800191a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800191e:	ed86 6a02 	vstr	s12, [r6, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001922:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001926:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800192a:	f7ff f97d 	bl	8000c28 <gUpperLowerLimit>
 800192e:	ed86 0a00 	vstr	s0, [r6]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001932:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001936:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800193a:	ed96 0a01 	vldr	s0, [r6, #4]
 800193e:	f7ff f973 	bl	8000c28 <gUpperLowerLimit>
 8001942:	ed86 0a01 	vstr	s0, [r6, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001946:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800194a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800194e:	ed96 0a02 	vldr	s0, [r6, #8]
 8001952:	f7ff f969 	bl	8000c28 <gUpperLowerLimit>
 8001956:	ed86 0a02 	vstr	s0, [r6, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 800195a:	edd6 7a00 	vldr	s15, [r6]
 800195e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001962:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001966:	edc6 7a00 	vstr	s15, [r6]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 800196a:	edd6 7a01 	vldr	s15, [r6, #4]
 800196e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001972:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001976:	edc6 7a01 	vstr	s15, [r6, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 800197a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800197e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001982:	ed86 0a02 	vstr	s0, [r6, #8]
	gLPF(vectorControlData->Idq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 8001986:	4817      	ldr	r0, [pc, #92]	; (80019e4 <VectorControlTasks+0x43c>)
 8001988:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80019e8 <VectorControlTasks+0x440>
 800198c:	eddf 0a17 	vldr	s1, [pc, #92]	; 80019ec <VectorControlTasks+0x444>
 8001990:	ed94 0a01 	vldr	s0, [r4, #4]
 8001994:	f7ff f964 	bl	8000c60 <gLPF>
}
 8001998:	b00b      	add	sp, #44	; 0x2c
 800199a:	ecbd 8b0a 	vpop	{d8-d12}
 800199e:	e027      	b.n	80019f0 <VectorControlTasks+0x448>
 80019a0:	9999999a 	.word	0x9999999a
 80019a4:	3fd99999 	.word	0x3fd99999
 80019a8:	66666667 	.word	0x66666667
 80019ac:	3f292a73 	.word	0x3f292a73
 80019b0:	20000000 	.word	0x20000000
 80019b4:	3f50e022 	.word	0x3f50e022
 80019b8:	3f5105ec 	.word	0x3f5105ec
 80019bc:	20000154 	.word	0x20000154
 80019c0:	3f5db3d7 	.word	0x3f5db3d7
 80019c4:	3f13cd3a 	.word	0x3f13cd3a
 80019c8:	3b68881c 	.word	0x3b68881c
 80019cc:	39fba882 	.word	0x39fba882
 80019d0:	3c45a6e4 	.word	0x3c45a6e4
 80019d4:	3f933333 	.word	0x3f933333
 80019d8:	3f1cc471 	.word	0x3f1cc471
 80019dc:	20000168 	.word	0x20000168
 80019e0:	20000170 	.word	0x20000170
 80019e4:	20000164 	.word	0x20000164
 80019e8:	3876b949 	.word	0x3876b949
 80019ec:	42fb3333 	.word	0x42fb3333
 80019f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019f4:	b004      	add	sp, #16
 80019f6:	4770      	bx	lr
		max = Vuvw[1];
 80019f8:	eeb0 7a67 	vmov.f32	s14, s15
 80019fc:	e755      	b.n	80018aa <VectorControlTasks+0x302>
		min = Vuvw[1];
 80019fe:	eef0 5a67 	vmov.f32	s11, s15
 8001a02:	e764      	b.n	80018ce <VectorControlTasks+0x326>

08001a04 <OpenLoopTasks>:
void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001a04:	b084      	sub	sp, #16
 8001a06:	b570      	push	{r4, r5, r6, lr}
 8001a08:	ed2d 8b06 	vpush	{d8-d10}
 8001a0c:	b088      	sub	sp, #32
 8001a0e:	eeb0 9a40 	vmov.f32	s18, s0
 8001a12:	ac12      	add	r4, sp, #72	; 0x48
 8001a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a18:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8001a1a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001a1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8001a22:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001a24:	709a      	strb	r2, [r3, #2]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8001a26:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 8001a2a:	ed9d 6a15 	vldr	s12, [sp, #84]	; 0x54
 8001a2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a32:	ee26 8a07 	vmul.f32	s16, s12, s14
 8001a36:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8001a3a:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 8001a3e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001a42:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001a46:	eddf 9ab7 	vldr	s19, [pc, #732]	; 8001d24 <OpenLoopTasks+0x320>
 8001a4a:	ee28 8a29 	vmul.f32	s16, s16, s19
 8001a4e:	4eb6      	ldr	r6, [pc, #728]	; (8001d28 <OpenLoopTasks+0x324>)
 8001a50:	ed86 8a00 	vstr	s16, [r6]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001a54:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001d2c <OpenLoopTasks+0x328>
 8001a58:	ee66 8a07 	vmul.f32	s17, s12, s14
 8001a5c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001a60:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8001a64:	ee67 8a29 	vmul.f32	s17, s14, s19
 8001a68:	edc6 8a01 	vstr	s17, [r6, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001a6c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a74:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001d30 <OpenLoopTasks+0x32c>
 8001a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7c:	edc6 7a02 	vstr	s15, [r6, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001a80:	eddd aa12 	vldr	s21, [sp, #72]	; 0x48
	sinTheta = sinf(theta);
 8001a84:	eeb0 0a6a 	vmov.f32	s0, s21
 8001a88:	f005 fa4e 	bl	8006f28 <sinf>
 8001a8c:	eeb0 aa40 	vmov.f32	s20, s0
	cosTheta = cosf(theta);
 8001a90:	eeb0 0a6a 	vmov.f32	s0, s21
 8001a94:	f005 fa04 	bl	8006ea0 <cosf>
 8001a98:	eef0 7a40 	vmov.f32	s15, s0
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001a9c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8001aa0:	ee6a 8a28 	vmul.f32	s17, s20, s17
 8001aa4:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001aa8:	ed84 8a00 	vstr	s16, [r4]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001aac:	ed96 7a00 	vldr	s14, [r6]
 8001ab0:	ee27 0a4a 	vnmul.f32	s0, s14, s20
 8001ab4:	ed96 7a01 	vldr	s14, [r6, #4]
 8001ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abc:	ee70 7a27 	vadd.f32	s15, s0, s15
 8001ac0:	edc4 7a01 	vstr	s15, [r4, #4]
	vectorControlData->Vdq[0] = 0.0f;
 8001ac4:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001d34 <OpenLoopTasks+0x330>
 8001ac8:	edc4 0a02 	vstr	s1, [r4, #8]
	vectorControlData->Vdq[1] = VamRef;
 8001acc:	ed84 9a03 	vstr	s18, [r4, #12]
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
 8001ad0:	edc4 0a04 	vstr	s1, [r4, #16]
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];
 8001ad4:	ed84 9a05 	vstr	s18, [r4, #20]
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001ad8:	f10d 0c04 	add.w	ip, sp, #4
 8001adc:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001ae0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001ae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ae8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001aec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8001af0:	eeb0 0a49 	vmov.f32	s0, s18
 8001af4:	f005 fa5e 	bl	8006fb4 <atan2f>
 8001af8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001afc:	ed94 0a02 	vldr	s0, [r4, #8]
 8001b00:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001b04:	edd4 7a03 	vldr	s15, [r4, #12]
 8001b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8001b0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001b10:	f005 fa72 	bl	8006ff8 <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001b14:	ed84 0a08 	vstr	s0, [r4, #32]
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001b18:	eddd 7a07 	vldr	s15, [sp, #28]
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001b1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001b20:	ee20 0a29 	vmul.f32	s0, s0, s19
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001b24:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	limitVoltVectAmp(sensData, vectorControlData);
 8001b28:	f10d 0c04 	add.w	ip, sp, #4
 8001b2c:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001b30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001b34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b38:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001b3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	if( vectorControlData->Mod > MODLIMIT ){
 8001b40:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8001d38 <OpenLoopTasks+0x334>
 8001b44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	dd29      	ble.n	8001ba2 <OpenLoopTasks+0x19e>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8001b4e:	ed9d 8a06 	vldr	s16, [sp, #24]
 8001b52:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8001d3c <OpenLoopTasks+0x338>
 8001b56:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001b5a:	eddf 8a77 	vldr	s17, [pc, #476]	; 8001d38 <OpenLoopTasks+0x334>
 8001b5e:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8001b62:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8001b66:	eeb0 0a49 	vmov.f32	s0, s18
 8001b6a:	f005 f999 	bl	8006ea0 <cosf>
 8001b6e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001b72:	ed84 0a02 	vstr	s0, [r4, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 8001b76:	edd4 7a06 	vldr	s15, [r4, #24]
 8001b7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001b7e:	ed84 0a04 	vstr	s0, [r4, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8001b82:	eeb0 0a49 	vmov.f32	s0, s18
 8001b86:	f005 f9cf 	bl	8006f28 <sinf>
 8001b8a:	ee28 8a00 	vmul.f32	s16, s16, s0
 8001b8e:	ed84 8a03 	vstr	s16, [r4, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 8001b92:	ed94 0a07 	vldr	s0, [r4, #28]
 8001b96:	ee38 8a40 	vsub.f32	s16, s16, s0
 8001b9a:	ed84 8a05 	vstr	s16, [r4, #20]
		vectorControlData->Mod = MODLIMIT;
 8001b9e:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001ba2:	eddd 8a12 	vldr	s17, [sp, #72]	; 0x48
	sinTheta = sinf(theta);
 8001ba6:	eeb0 0a68 	vmov.f32	s0, s17
 8001baa:	f005 f9bd 	bl	8006f28 <sinf>
 8001bae:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8001bb2:	eeb0 0a68 	vmov.f32	s0, s17
 8001bb6:	f005 f973 	bl	8006ea0 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001bba:	ed94 7a02 	vldr	s14, [r4, #8]
 8001bbe:	ee20 7a07 	vmul.f32	s14, s0, s14
 8001bc2:	edd4 7a03 	vldr	s15, [r4, #12]
 8001bc6:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001bca:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <OpenLoopTasks+0x33c>)
 8001bd0:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001bd4:	edd4 6a02 	vldr	s13, [r4, #8]
 8001bd8:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001bdc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001be0:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001be4:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001be8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001d24 <OpenLoopTasks+0x320>
 8001bec:	ee27 0a26 	vmul.f32	s0, s14, s13
 8001bf0:	4b54      	ldr	r3, [pc, #336]	; (8001d44 <OpenLoopTasks+0x340>)
 8001bf2:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8001bf6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8001bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001d2c <OpenLoopTasks+0x328>
 8001c02:	ee28 8a07 	vmul.f32	s16, s16, s14
 8001c06:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001c0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c0e:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8001c12:	eeb1 7a40 	vneg.f32	s14, s0
 8001c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c1a:	ed83 7a02 	vstr	s14, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8001c1e:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
	if(Vuvw[1] > max)
 8001c22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	d475      	bmi.n	8001d18 <OpenLoopTasks+0x314>
	max = Vuvw[0];
 8001c2c:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 8001c30:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <OpenLoopTasks+0x340>)
 8001c32:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c36:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dd01      	ble.n	8001c44 <OpenLoopTasks+0x240>
		max = Vuvw[2];
 8001c40:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 8001c44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	dc67      	bgt.n	8001d1e <OpenLoopTasks+0x31a>
	min = Vuvw[0];
 8001c4e:	eef0 5a40 	vmov.f32	s11, s0
	if(Vuvw[2] < min)
 8001c52:	eef4 6ae5 	vcmpe.f32	s13, s11
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d501      	bpl.n	8001c60 <OpenLoopTasks+0x25c>
		min = Vuvw[2];
 8001c5c:	eef0 5a66 	vmov.f32	s11, s13
	vo = (max + min) * 0.5f;
 8001c60:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001c64:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001c68:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 8001c6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <OpenLoopTasks+0x340>)
 8001c72:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001c76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c7a:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 8001c7e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001c82:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001c86:	ee26 0a00 	vmul.f32	s0, s12, s0
 8001c8a:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001c8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c96:	edc5 7a01 	vstr	s15, [r5, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001c9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ca2:	ed85 6a02 	vstr	s12, [r5, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001ca6:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001caa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001cae:	f7fe ffbb 	bl	8000c28 <gUpperLowerLimit>
 8001cb2:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001cb6:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001cba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001cbe:	ed95 0a01 	vldr	s0, [r5, #4]
 8001cc2:	f7fe ffb1 	bl	8000c28 <gUpperLowerLimit>
 8001cc6:	ed85 0a01 	vstr	s0, [r5, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001cca:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001cce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001cd2:	ed95 0a02 	vldr	s0, [r5, #8]
 8001cd6:	f7fe ffa7 	bl	8000c28 <gUpperLowerLimit>
 8001cda:	ed85 0a02 	vstr	s0, [r5, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001cde:	edd5 7a00 	vldr	s15, [r5]
 8001ce2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001ce6:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001cea:	edc5 7a00 	vstr	s15, [r5]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001cee:	edd5 7a01 	vldr	s15, [r5, #4]
 8001cf2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001cf6:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001cfa:	edc5 7a01 	vstr	s15, [r5, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001cfe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8001d02:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001d06:	ed85 0a02 	vstr	s0, [r5, #8]
}
 8001d0a:	b008      	add	sp, #32
 8001d0c:	ecbd 8b06 	vpop	{d8-d10}
 8001d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d14:	b004      	add	sp, #16
 8001d16:	4770      	bx	lr
		max = Vuvw[1];
 8001d18:	eeb0 7a67 	vmov.f32	s14, s15
 8001d1c:	e788      	b.n	8001c30 <OpenLoopTasks+0x22c>
		min = Vuvw[1];
 8001d1e:	eef0 5a67 	vmov.f32	s11, s15
 8001d22:	e796      	b.n	8001c52 <OpenLoopTasks+0x24e>
 8001d24:	3f5105ec 	.word	0x3f5105ec
 8001d28:	20000154 	.word	0x20000154
 8001d2c:	3f5db3d7 	.word	0x3f5db3d7
 8001d30:	3f13cd3a 	.word	0x3f13cd3a
 8001d34:	00000000 	.word	0x00000000
 8001d38:	3f933333 	.word	0x3f933333
 8001d3c:	3f1cc471 	.word	0x3f1cc471
 8001d40:	20000168 	.word	0x20000168
 8001d44:	20000170 	.word	0x20000170

08001d48 <calcElectAngleEstimate>:
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
	return angleErr;
}

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001d48:	b084      	sub	sp, #16
 8001d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d4e:	ed2d 8b04 	vpush	{d8-d9}
 8001d52:	b085      	sub	sp, #20
 8001d54:	4605      	mov	r5, r0
 8001d56:	a811      	add	r0, sp, #68	; 0x44
 8001d58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001d5c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001d5e:	68e6      	ldr	r6, [r4, #12]
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001d60:	ed9d 9a18 	vldr	s18, [sp, #96]	; 0x60
 8001d64:	eddf 9a52 	vldr	s19, [pc, #328]	; 8001eb0 <calcElectAngleEstimate+0x168>
 8001d68:	ee69 7a29 	vmul.f32	s15, s18, s19
 8001d6c:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8001d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d74:	ee17 0a90 	vmov	r0, s15
 8001d78:	f7fe fcdc 	bl	8000734 <__aeabi_f2d>
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	4689      	mov	r9, r1
 8001d80:	4630      	mov	r0, r6
 8001d82:	f7fe fcd7 	bl	8000734 <__aeabi_f2d>
 8001d86:	a348      	add	r3, pc, #288	; (adr r3, 8001ea8 <calcElectAngleEstimate+0x160>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fa44 	bl	8000218 <__aeabi_dmul>
 8001d90:	4606      	mov	r6, r0
 8001d92:	460f      	mov	r7, r1
 8001d94:	eddd 8a19 	vldr	s17, [sp, #100]	; 0x64
 8001d98:	ee18 0a90 	vmov	r0, s17
 8001d9c:	f7fe fcca 	bl	8000734 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4630      	mov	r0, r6
 8001da6:	4639      	mov	r1, r7
 8001da8:	f7fe fa36 	bl	8000218 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4640      	mov	r0, r8
 8001db2:	4649      	mov	r1, r9
 8001db4:	f7fe fb60 	bl	8000478 <__adddf3>
 8001db8:	f7fe fd14 	bl	80007e4 <__aeabi_d2f>
 8001dbc:	ee08 0a10 	vmov	s16, r0
 8001dc0:	9001      	str	r0, [sp, #4]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001dc2:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8001dc6:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 8001dca:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8001dce:	ee17 0a90 	vmov	r0, s15
 8001dd2:	f7fe fcaf 	bl	8000734 <__aeabi_f2d>
 8001dd6:	4680      	mov	r8, r0
 8001dd8:	4689      	mov	r9, r1
 8001dda:	ee19 0a10 	vmov	r0, s18
 8001dde:	f7fe fca9 	bl	8000734 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4630      	mov	r0, r6
 8001de8:	4639      	mov	r1, r7
 8001dea:	f7fe fa15 	bl	8000218 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4640      	mov	r0, r8
 8001df4:	4649      	mov	r1, r9
 8001df6:	f7fe fb3d 	bl	8000474 <__aeabi_dsub>
 8001dfa:	f7fe fcf3 	bl	80007e4 <__aeabi_d2f>
 8001dfe:	ee00 0a90 	vmov	s1, r0
 8001e02:	9002      	str	r0, [sp, #8]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001e04:	eeb1 0a48 	vneg.f32	s0, s16
 8001e08:	f005 f8d4 	bl	8006fb4 <atan2f>
	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001e0c:	ed84 0a01 	vstr	s0, [r4, #4]


	if( flgInit == 0){ // 初期化処理
 8001e10:	b975      	cbnz	r5, 8001e30 <calcElectAngleEstimate+0xe8>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001e14:	60a3      	str	r3, [r4, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001e18:	60e3      	str	r3, [r4, #12]
		electAngleEstimateData->wc_PLL = 0;
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	6022      	str	r2, [r4, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001e1e:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <calcElectAngleEstimate+0x16c>)
 8001e20:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001e22:	b005      	add	sp, #20
 8001e24:	ecbd 8b04 	vpop	{d8-d9}
 8001e28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e2c:	b004      	add	sp, #16
 8001e2e:	4770      	bx	lr
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	9303      	str	r3, [sp, #12]
		gRateLimit(200.0f * TWOPI, 50.0f, CARRIERCYCLE, &wc_PLL);
 8001e34:	ed9f 9a20 	vldr	s18, [pc, #128]	; 8001eb8 <calcElectAngleEstimate+0x170>
 8001e38:	a803      	add	r0, sp, #12
 8001e3a:	eeb0 1a49 	vmov.f32	s2, s18
 8001e3e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001ebc <calcElectAngleEstimate+0x174>
 8001e42:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001ec0 <calcElectAngleEstimate+0x178>
 8001e46:	f7fe ff1c 	bl	8000c82 <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001e4a:	eddd 8a03 	vldr	s17, [sp, #12]
 8001e4e:	edc4 8a00 	vstr	s17, [r4]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001e52:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8001ec4 <calcElectAngleEstimate+0x17c>
 8001e56:	ee28 8a88 	vmul.f32	s16, s17, s16
 8001e5a:	ee28 8a88 	vmul.f32	s16, s17, s16
 8001e5e:	ee28 8a09 	vmul.f32	s16, s16, s18
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001e62:	ed94 7a03 	vldr	s14, [r4, #12]
 8001e66:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001ec8 <calcElectAngleEstimate+0x180>
 8001e6a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8001e6e:	edd4 7a02 	vldr	s15, [r4, #8]
 8001e72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001e76:	ed84 0a02 	vstr	s0, [r4, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001e7a:	f7fe feb1 	bl	8000be0 <gfWrapTheta>
 8001e7e:	ed84 0a02 	vstr	s0, [r4, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001e82:	ed94 0a01 	vldr	s0, [r4, #4]
 8001e86:	f7fe feab 	bl	8000be0 <gfWrapTheta>
 8001e8a:	ed84 0a01 	vstr	s0, [r4, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001e8e:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <calcElectAngleEstimate+0x16c>)
 8001e90:	eeb0 1a48 	vmov.f32	s2, s16
 8001e94:	eef0 0a68 	vmov.f32	s1, s17
 8001e98:	f7fe fe76 	bl	8000b88 <cfPhaseLockedLoop>
 8001e9c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8001ea0:	e7bf      	b.n	8001e22 <calcElectAngleEstimate+0xda>
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	66666667 	.word	0x66666667
 8001eac:	3f292a73 	.word	0x3f292a73
 8001eb0:	3f75c28f 	.word	0x3f75c28f
 8001eb4:	20000160 	.word	0x20000160
 8001eb8:	3876b949 	.word	0x3876b949
 8001ebc:	42480000 	.word	0x42480000
 8001ec0:	449d1463 	.word	0x449d1463
 8001ec4:	3e4ccccd 	.word	0x3e4ccccd
 8001ec8:	4684d000 	.word	0x4684d000

08001ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	9405      	str	r4, [sp, #20]
 8001ed4:	9406      	str	r4, [sp, #24]
 8001ed6:	9407      	str	r4, [sp, #28]
 8001ed8:	9408      	str	r4, [sp, #32]
 8001eda:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <MX_GPIO_Init+0xc8>)
 8001ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ee0:	f042 0204 	orr.w	r2, r2, #4
 8001ee4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ee8:	f002 0204 	and.w	r2, r2, #4
 8001eec:	9201      	str	r2, [sp, #4]
 8001eee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef2:	f042 0220 	orr.w	r2, r2, #32
 8001ef6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001efa:	f002 0220 	and.w	r2, r2, #32
 8001efe:	9202      	str	r2, [sp, #8]
 8001f00:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f0c:	f002 0201 	and.w	r2, r2, #1
 8001f10:	9203      	str	r2, [sp, #12]
 8001f12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f16:	f042 0202 	orr.w	r2, r2, #2
 8001f1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	9304      	str	r3, [sp, #16]
 8001f24:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f26:	4622      	mov	r2, r4
 8001f28:	2120      	movs	r1, #32
 8001f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2e:	f002 fda0 	bl	8004a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001f32:	4d19      	ldr	r5, [pc, #100]	; (8001f98 <MX_GPIO_Init+0xcc>)
 8001f34:	4622      	mov	r2, r4
 8001f36:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	f002 fd99 	bl	8004a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f44:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f4a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	a905      	add	r1, sp, #20
 8001f50:	4628      	mov	r0, r5
 8001f52:	f002 fc9d 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f56:	2320      	movs	r3, #32
 8001f58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2601      	movs	r6, #1
 8001f5c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f62:	a905      	add	r1, sp, #20
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f002 fc92 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8001f6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f70:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	a905      	add	r1, sp, #20
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f002 fc88 	bl	8004890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f80:	4622      	mov	r2, r4
 8001f82:	4621      	mov	r1, r4
 8001f84:	2028      	movs	r0, #40	; 0x28
 8001f86:	f002 f959 	bl	800423c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f8a:	2028      	movs	r0, #40	; 0x28
 8001f8c:	f002 f98e 	bl	80042ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f90:	b00a      	add	sp, #40	; 0x28
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	48000800 	.word	0x48000800

08001f9c <MX_DMA_Init>:
{
 8001f9c:	b500      	push	{lr}
 8001f9e:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_DMA_Init+0x50>)
 8001fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fa4:	f042 0204 	orr.w	r2, r2, #4
 8001fa8:	649a      	str	r2, [r3, #72]	; 0x48
 8001faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fac:	f002 0204 	and.w	r2, r2, #4
 8001fb0:	9200      	str	r2, [sp, #0]
 8001fb2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	649a      	str	r2, [r3, #72]	; 0x48
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4611      	mov	r1, r2
 8001fca:	200b      	movs	r0, #11
 8001fcc:	f002 f936 	bl	800423c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fd0:	200b      	movs	r0, #11
 8001fd2:	f002 f96b 	bl	80042ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4611      	mov	r1, r2
 8001fda:	200c      	movs	r0, #12
 8001fdc:	f002 f92e 	bl	800423c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001fe0:	200c      	movs	r0, #12
 8001fe2:	f002 f963 	bl	80042ac <HAL_NVIC_EnableIRQ>
}
 8001fe6:	b003      	add	sp, #12
 8001fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fec:	40021000 	.word	0x40021000

08001ff0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <Error_Handler+0x2>

08001ff4 <MX_LPUART1_UART_Init>:
{
 8001ff4:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 8001ff6:	4815      	ldr	r0, [pc, #84]	; (800204c <MX_LPUART1_UART_Init+0x58>)
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_LPUART1_UART_Init+0x5c>)
 8001ffa:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ffc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002000:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	2300      	movs	r3, #0
 8002004:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002006:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002008:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800200a:	220c      	movs	r2, #12
 800200c:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002010:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002012:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002014:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002016:	f004 fe4e 	bl	8006cb6 <HAL_UART_Init>
 800201a:	b970      	cbnz	r0, 800203a <MX_LPUART1_UART_Init+0x46>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201c:	2100      	movs	r1, #0
 800201e:	480b      	ldr	r0, [pc, #44]	; (800204c <MX_LPUART1_UART_Init+0x58>)
 8002020:	f004 fec1 	bl	8006da6 <HAL_UARTEx_SetTxFifoThreshold>
 8002024:	b958      	cbnz	r0, 800203e <MX_LPUART1_UART_Init+0x4a>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002026:	2100      	movs	r1, #0
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <MX_LPUART1_UART_Init+0x58>)
 800202a:	f004 fee1 	bl	8006df0 <HAL_UARTEx_SetRxFifoThreshold>
 800202e:	b940      	cbnz	r0, 8002042 <MX_LPUART1_UART_Init+0x4e>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002030:	4806      	ldr	r0, [pc, #24]	; (800204c <MX_LPUART1_UART_Init+0x58>)
 8002032:	f004 fe99 	bl	8006d68 <HAL_UARTEx_DisableFifoMode>
 8002036:	b930      	cbnz	r0, 8002046 <MX_LPUART1_UART_Init+0x52>
}
 8002038:	bd08      	pop	{r3, pc}
    Error_Handler();
 800203a:	f7ff ffd9 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800203e:	f7ff ffd7 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002042:	f7ff ffd5 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002046:	f7ff ffd3 	bl	8001ff0 <Error_Handler>
 800204a:	bf00      	nop
 800204c:	200002bc 	.word	0x200002bc
 8002050:	40008000 	.word	0x40008000

08002054 <MX_ADC1_Init>:
{
 8002054:	b510      	push	{r4, lr}
 8002056:	b09a      	sub	sp, #104	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8002058:	2400      	movs	r4, #0
 800205a:	9417      	str	r4, [sp, #92]	; 0x5c
 800205c:	9418      	str	r4, [sp, #96]	; 0x60
 800205e:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 8002060:	2220      	movs	r2, #32
 8002062:	4621      	mov	r1, r4
 8002064:	a80f      	add	r0, sp, #60	; 0x3c
 8002066:	f004 ff13 	bl	8006e90 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800206a:	223c      	movs	r2, #60	; 0x3c
 800206c:	4621      	mov	r1, r4
 800206e:	4668      	mov	r0, sp
 8002070:	f004 ff0e 	bl	8006e90 <memset>
  hadc1.Instance = ADC1;
 8002074:	4841      	ldr	r0, [pc, #260]	; (800217c <MX_ADC1_Init+0x128>)
 8002076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800207a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800207c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002080:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002082:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002084:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8002086:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002088:	2301      	movs	r3, #1
 800208a:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800208c:	2204      	movs	r2, #4
 800208e:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002090:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002092:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002094:	2202      	movs	r2, #2
 8002096:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002098:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800209c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800209e:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020a4:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80020a6:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020aa:	f000 fd2f 	bl	8002b0c <HAL_ADC_Init>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d155      	bne.n	800215e <MX_ADC1_Init+0x10a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80020b2:	2300      	movs	r3, #0
 80020b4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80020b6:	a917      	add	r1, sp, #92	; 0x5c
 80020b8:	4830      	ldr	r0, [pc, #192]	; (800217c <MX_ADC1_Init+0x128>)
 80020ba:	f001 ffc3 	bl	8004044 <HAL_ADCEx_MultiModeConfigChannel>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d14f      	bne.n	8002162 <MX_ADC1_Init+0x10e>
  sConfig.Channel = ADC_CHANNEL_2;
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <MX_ADC1_Init+0x12c>)
 80020c4:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020c6:	2306      	movs	r3, #6
 80020c8:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80020ca:	2300      	movs	r3, #0
 80020cc:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020ce:	227f      	movs	r2, #127	; 0x7f
 80020d0:	9212      	str	r2, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020d2:	2204      	movs	r2, #4
 80020d4:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 80020d6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	a90f      	add	r1, sp, #60	; 0x3c
 80020da:	4828      	ldr	r0, [pc, #160]	; (800217c <MX_ADC1_Init+0x128>)
 80020dc:	f001 f838 	bl	8003150 <HAL_ADC_ConfigChannel>
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d140      	bne.n	8002166 <MX_ADC1_Init+0x112>
  sConfig.Channel = ADC_CHANNEL_8;
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <MX_ADC1_Init+0x130>)
 80020e6:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020e8:	230c      	movs	r3, #12
 80020ea:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ec:	a90f      	add	r1, sp, #60	; 0x3c
 80020ee:	4823      	ldr	r0, [pc, #140]	; (800217c <MX_ADC1_Init+0x128>)
 80020f0:	f001 f82e 	bl	8003150 <HAL_ADC_ConfigChannel>
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d138      	bne.n	800216a <MX_ADC1_Init+0x116>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <MX_ADC1_Init+0x134>)
 80020fa:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80020fc:	2309      	movs	r3, #9
 80020fe:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002100:	2300      	movs	r3, #0
 8002102:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002104:	227f      	movs	r2, #127	; 0x7f
 8002106:	9203      	str	r2, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002108:	2204      	movs	r2, #4
 800210a:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedOffset = 0;
 800210c:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800210e:	2203      	movs	r2, #3
 8002110:	9208      	str	r2, [sp, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002112:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002116:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800211a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002122:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002124:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002128:	4669      	mov	r1, sp
 800212a:	4814      	ldr	r0, [pc, #80]	; (800217c <MX_ADC1_Init+0x128>)
 800212c:	f001 fc52 	bl	80039d4 <HAL_ADCEx_InjectedConfigChannel>
 8002130:	b9e8      	cbnz	r0, 800216e <MX_ADC1_Init+0x11a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_ADC1_Init+0x138>)
 8002134:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002136:	f240 130f 	movw	r3, #271	; 0x10f
 800213a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800213c:	4669      	mov	r1, sp
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <MX_ADC1_Init+0x128>)
 8002140:	f001 fc48 	bl	80039d4 <HAL_ADCEx_InjectedConfigChannel>
 8002144:	b9a8      	cbnz	r0, 8002172 <MX_ADC1_Init+0x11e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MX_ADC1_Init+0x13c>)
 8002148:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800214a:	f240 2315 	movw	r3, #533	; 0x215
 800214e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002150:	4669      	mov	r1, sp
 8002152:	480a      	ldr	r0, [pc, #40]	; (800217c <MX_ADC1_Init+0x128>)
 8002154:	f001 fc3e 	bl	80039d4 <HAL_ADCEx_InjectedConfigChannel>
 8002158:	b968      	cbnz	r0, 8002176 <MX_ADC1_Init+0x122>
}
 800215a:	b01a      	add	sp, #104	; 0x68
 800215c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800215e:	f7ff ff47 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002162:	f7ff ff45 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002166:	f7ff ff43 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800216a:	f7ff ff41 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800216e:	f7ff ff3f 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002172:	f7ff ff3d 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002176:	f7ff ff3b 	bl	8001ff0 <Error_Handler>
 800217a:	bf00      	nop
 800217c:	2000017c 	.word	0x2000017c
 8002180:	08600004 	.word	0x08600004
 8002184:	21800100 	.word	0x21800100
 8002188:	04300002 	.word	0x04300002
 800218c:	1d500080 	.word	0x1d500080
 8002190:	19200040 	.word	0x19200040

08002194 <MX_TIM1_Init>:
{
 8002194:	b510      	push	{r4, lr}
 8002196:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	2400      	movs	r4, #0
 800219a:	9415      	str	r4, [sp, #84]	; 0x54
 800219c:	9416      	str	r4, [sp, #88]	; 0x58
 800219e:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a0:	940e      	str	r4, [sp, #56]	; 0x38
 80021a2:	940f      	str	r4, [sp, #60]	; 0x3c
 80021a4:	9410      	str	r4, [sp, #64]	; 0x40
 80021a6:	9411      	str	r4, [sp, #68]	; 0x44
 80021a8:	9412      	str	r4, [sp, #72]	; 0x48
 80021aa:	9413      	str	r4, [sp, #76]	; 0x4c
 80021ac:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ae:	2234      	movs	r2, #52	; 0x34
 80021b0:	4621      	mov	r1, r4
 80021b2:	a801      	add	r0, sp, #4
 80021b4:	f004 fe6c 	bl	8006e90 <memset>
  htim1.Instance = TIM1;
 80021b8:	4835      	ldr	r0, [pc, #212]	; (8002290 <MX_TIM1_Init+0xfc>)
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <MX_TIM1_Init+0x100>)
 80021bc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80021be:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021c0:	2320      	movs	r3, #32
 80021c2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 4999;
 80021c4:	f241 3387 	movw	r3, #4999	; 0x1387
 80021c8:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ca:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80021cc:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021d0:	f003 fdbe 	bl	8005d50 <HAL_TIM_PWM_Init>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d14c      	bne.n	8002272 <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80021d8:	2370      	movs	r3, #112	; 0x70
 80021da:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e2:	a915      	add	r1, sp, #84	; 0x54
 80021e4:	482a      	ldr	r0, [pc, #168]	; (8002290 <MX_TIM1_Init+0xfc>)
 80021e6:	f004 f9d5 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d143      	bne.n	8002276 <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ee:	2360      	movs	r3, #96	; 0x60
 80021f0:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80021f2:	2200      	movs	r2, #0
 80021f4:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f6:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f8:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fc:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021fe:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002200:	a90e      	add	r1, sp, #56	; 0x38
 8002202:	4823      	ldr	r0, [pc, #140]	; (8002290 <MX_TIM1_Init+0xfc>)
 8002204:	f003 fe52 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8002208:	2800      	cmp	r0, #0
 800220a:	d136      	bne.n	800227a <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800220c:	2204      	movs	r2, #4
 800220e:	a90e      	add	r1, sp, #56	; 0x38
 8002210:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_TIM1_Init+0xfc>)
 8002212:	f003 fe4b 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8002216:	2800      	cmp	r0, #0
 8002218:	d131      	bne.n	800227e <MX_TIM1_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800221a:	2208      	movs	r2, #8
 800221c:	a90e      	add	r1, sp, #56	; 0x38
 800221e:	481c      	ldr	r0, [pc, #112]	; (8002290 <MX_TIM1_Init+0xfc>)
 8002220:	f003 fe44 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8002224:	2800      	cmp	r0, #0
 8002226:	d12c      	bne.n	8002282 <MX_TIM1_Init+0xee>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002228:	2370      	movs	r3, #112	; 0x70
 800222a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800222c:	220c      	movs	r2, #12
 800222e:	a90e      	add	r1, sp, #56	; 0x38
 8002230:	4817      	ldr	r0, [pc, #92]	; (8002290 <MX_TIM1_Init+0xfc>)
 8002232:	f003 fe3b 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8002236:	bb30      	cbnz	r0, 8002286 <MX_TIM1_Init+0xf2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800223c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800223e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8002240:	2264      	movs	r2, #100	; 0x64
 8002242:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002244:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224a:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800224c:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800224e:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002250:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002256:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002258:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800225a:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800225c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800225e:	a901      	add	r1, sp, #4
 8002260:	480b      	ldr	r0, [pc, #44]	; (8002290 <MX_TIM1_Init+0xfc>)
 8002262:	f004 f9ed 	bl	8006640 <HAL_TIMEx_ConfigBreakDeadTime>
 8002266:	b980      	cbnz	r0, 800228a <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <MX_TIM1_Init+0xfc>)
 800226a:	f000 fb25 	bl	80028b8 <HAL_TIM_MspPostInit>
}
 800226e:	b018      	add	sp, #96	; 0x60
 8002270:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002272:	f7ff febd 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002276:	f7ff febb 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800227a:	f7ff feb9 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800227e:	f7ff feb7 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002282:	f7ff feb5 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002286:	f7ff feb3 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800228a:	f7ff feb1 	bl	8001ff0 <Error_Handler>
 800228e:	bf00      	nop
 8002290:	2000034c 	.word	0x2000034c
 8002294:	40012c00 	.word	0x40012c00

08002298 <MX_TIM2_Init>:
{
 8002298:	b500      	push	{lr}
 800229a:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229c:	2300      	movs	r3, #0
 800229e:	9305      	str	r3, [sp, #20]
 80022a0:	9306      	str	r3, [sp, #24]
 80022a2:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	9303      	str	r3, [sp, #12]
 80022aa:	9304      	str	r3, [sp, #16]
  htim2.Instance = TIM2;
 80022ac:	481d      	ldr	r0, [pc, #116]	; (8002324 <MX_TIM2_Init+0x8c>)
 80022ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b2:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80022b4:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4.294967295E9;
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295
 80022bc:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80022c2:	f003 fd75 	bl	8005db0 <HAL_TIM_IC_Init>
 80022c6:	bb10      	cbnz	r0, 800230e <MX_TIM2_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022cc:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ce:	a905      	add	r1, sp, #20
 80022d0:	4814      	ldr	r0, [pc, #80]	; (8002324 <MX_TIM2_Init+0x8c>)
 80022d2:	f004 f95f 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	b9e0      	cbnz	r0, 8002312 <MX_TIM2_Init+0x7a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022d8:	2200      	movs	r2, #0
 80022da:	9201      	str	r2, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022dc:	2301      	movs	r3, #1
 80022de:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022e0:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 1;
 80022e2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022e4:	a901      	add	r1, sp, #4
 80022e6:	480f      	ldr	r0, [pc, #60]	; (8002324 <MX_TIM2_Init+0x8c>)
 80022e8:	f003 febc 	bl	8006064 <HAL_TIM_IC_ConfigChannel>
 80022ec:	b998      	cbnz	r0, 8002316 <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022ee:	2204      	movs	r2, #4
 80022f0:	eb0d 0102 	add.w	r1, sp, r2
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <MX_TIM2_Init+0x8c>)
 80022f6:	f003 feb5 	bl	8006064 <HAL_TIM_IC_ConfigChannel>
 80022fa:	b970      	cbnz	r0, 800231a <MX_TIM2_Init+0x82>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022fc:	2208      	movs	r2, #8
 80022fe:	a901      	add	r1, sp, #4
 8002300:	4808      	ldr	r0, [pc, #32]	; (8002324 <MX_TIM2_Init+0x8c>)
 8002302:	f003 feaf 	bl	8006064 <HAL_TIM_IC_ConfigChannel>
 8002306:	b950      	cbnz	r0, 800231e <MX_TIM2_Init+0x86>
}
 8002308:	b009      	add	sp, #36	; 0x24
 800230a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800230e:	f7ff fe6f 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002312:	f7ff fe6d 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002316:	f7ff fe6b 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800231a:	f7ff fe69 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 800231e:	f7ff fe67 	bl	8001ff0 <Error_Handler>
 8002322:	bf00      	nop
 8002324:	20000398 	.word	0x20000398

08002328 <MX_DAC1_Init>:
{
 8002328:	b500      	push	{lr}
 800232a:	b08d      	sub	sp, #52	; 0x34
  DAC_ChannelConfTypeDef sConfig = {0};
 800232c:	2230      	movs	r2, #48	; 0x30
 800232e:	2100      	movs	r1, #0
 8002330:	4668      	mov	r0, sp
 8002332:	f004 fdad 	bl	8006e90 <memset>
  hdac1.Instance = DAC1;
 8002336:	4810      	ldr	r0, [pc, #64]	; (8002378 <MX_DAC1_Init+0x50>)
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_DAC1_Init+0x54>)
 800233a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800233c:	f001 ffd8 	bl	80042f0 <HAL_DAC_Init>
 8002340:	b9a8      	cbnz	r0, 800236e <MX_DAC1_Init+0x46>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002342:	2302      	movs	r3, #2
 8002344:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002346:	2200      	movs	r2, #0
 8002348:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800234c:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002350:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8002352:	9303      	str	r3, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002354:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002356:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002358:	2301      	movs	r3, #1
 800235a:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800235c:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800235e:	4669      	mov	r1, sp
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_DAC1_Init+0x50>)
 8002362:	f002 f825 	bl	80043b0 <HAL_DAC_ConfigChannel>
 8002366:	b920      	cbnz	r0, 8002372 <MX_DAC1_Init+0x4a>
}
 8002368:	b00d      	add	sp, #52	; 0x34
 800236a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800236e:	f7ff fe3f 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002372:	f7ff fe3d 	bl	8001ff0 <Error_Handler>
 8002376:	bf00      	nop
 8002378:	200001e8 	.word	0x200001e8
 800237c:	50000800 	.word	0x50000800

08002380 <MX_TIM7_Init>:
{
 8002380:	b500      	push	{lr}
 8002382:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	9302      	str	r3, [sp, #8]
 800238a:	9303      	str	r3, [sp, #12]
  htim7.Instance = TIM7;
 800238c:	480d      	ldr	r0, [pc, #52]	; (80023c4 <MX_TIM7_Init+0x44>)
 800238e:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <MX_TIM7_Init+0x48>)
 8002390:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 8002392:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 4999;
 8002396:	f241 3287 	movw	r2, #4999	; 0x1387
 800239a:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800239e:	f003 fca7 	bl	8005cf0 <HAL_TIM_Base_Init>
 80023a2:	b958      	cbnz	r0, 80023bc <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023a4:	2320      	movs	r3, #32
 80023a6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023ac:	a901      	add	r1, sp, #4
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM7_Init+0x44>)
 80023b0:	f004 f8f0 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 80023b4:	b920      	cbnz	r0, 80023c0 <MX_TIM7_Init+0x40>
}
 80023b6:	b005      	add	sp, #20
 80023b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80023bc:	f7ff fe18 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 80023c0:	f7ff fe16 	bl	8001ff0 <Error_Handler>
 80023c4:	200003e4 	.word	0x200003e4
 80023c8:	40001400 	.word	0x40001400

080023cc <SystemClock_Config>:
{
 80023cc:	b500      	push	{lr}
 80023ce:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d0:	2238      	movs	r2, #56	; 0x38
 80023d2:	2100      	movs	r1, #0
 80023d4:	a806      	add	r0, sp, #24
 80023d6:	f004 fd5b 	bl	8006e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023da:	2000      	movs	r0, #0
 80023dc:	9001      	str	r0, [sp, #4]
 80023de:	9002      	str	r0, [sp, #8]
 80023e0:	9003      	str	r0, [sp, #12]
 80023e2:	9004      	str	r0, [sp, #16]
 80023e4:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80023e6:	f002 fb61 	bl	8004aac <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ea:	2302      	movs	r3, #2
 80023ec:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023fa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80023fc:	2204      	movs	r2, #4
 80023fe:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002400:	2255      	movs	r2, #85	; 0x55
 8002402:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002404:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002406:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002408:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240a:	a806      	add	r0, sp, #24
 800240c:	f002 fc08 	bl	8004c20 <HAL_RCC_OscConfig>
 8002410:	b980      	cbnz	r0, 8002434 <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002412:	230f      	movs	r3, #15
 8002414:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002416:	2303      	movs	r3, #3
 8002418:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800241e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002420:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002422:	2104      	movs	r1, #4
 8002424:	eb0d 0001 	add.w	r0, sp, r1
 8002428:	f002 feb2 	bl	8005190 <HAL_RCC_ClockConfig>
 800242c:	b920      	cbnz	r0, 8002438 <SystemClock_Config+0x6c>
}
 800242e:	b015      	add	sp, #84	; 0x54
 8002430:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002434:	f7ff fddc 	bl	8001ff0 <Error_Handler>
    Error_Handler();
 8002438:	f7ff fdda 	bl	8001ff0 <Error_Handler>

0800243c <main>:
{
 800243c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800243e:	f000 fb2f 	bl	8002aa0 <HAL_Init>
  SystemClock_Config();
 8002442:	f7ff ffc3 	bl	80023cc <SystemClock_Config>
  MX_GPIO_Init();
 8002446:	f7ff fd41 	bl	8001ecc <MX_GPIO_Init>
  MX_DMA_Init();
 800244a:	f7ff fda7 	bl	8001f9c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800244e:	f7ff fdd1 	bl	8001ff4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8002452:	f7ff fdff 	bl	8002054 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002456:	f7ff fe9d 	bl	8002194 <MX_TIM1_Init>
  MX_TIM2_Init();
 800245a:	f7ff ff1d 	bl	8002298 <MX_TIM2_Init>
  MX_DAC1_Init();
 800245e:	f7ff ff63 	bl	8002328 <MX_DAC1_Init>
  MX_TIM7_Init();
 8002462:	f7ff ff8d 	bl	8002380 <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8002466:	4c3d      	ldr	r4, [pc, #244]	; (800255c <main+0x120>)
 8002468:	4620      	mov	r0, r4
 800246a:	f003 fb71 	bl	8005b50 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800246e:	4d3c      	ldr	r5, [pc, #240]	; (8002560 <main+0x124>)
 8002470:	4628      	mov	r0, r5
 8002472:	f001 f9f1 	bl	8003858 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8002476:	4e3b      	ldr	r6, [pc, #236]	; (8002564 <main+0x128>)
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800247e:	4630      	mov	r0, r6
 8002480:	f002 faf7 	bl	8004a72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248a:	4630      	mov	r0, r6
 800248c:	f002 faf1 	bl	8004a72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002496:	4630      	mov	r0, r6
 8002498:	f002 faeb 	bl	8004a72 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800249c:	2100      	movs	r1, #0
 800249e:	4620      	mov	r0, r4
 80024a0:	f003 fe52 	bl	8006148 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80024a4:	2100      	movs	r1, #0
 80024a6:	4620      	mov	r0, r4
 80024a8:	f003 fff2 	bl	8006490 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80024ac:	2104      	movs	r1, #4
 80024ae:	4620      	mov	r0, r4
 80024b0:	f003 fe4a 	bl	8006148 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80024b4:	2104      	movs	r1, #4
 80024b6:	4620      	mov	r0, r4
 80024b8:	f003 ffea 	bl	8006490 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80024bc:	2108      	movs	r1, #8
 80024be:	4620      	mov	r0, r4
 80024c0:	f003 fe42 	bl	8006148 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80024c4:	2108      	movs	r1, #8
 80024c6:	4620      	mov	r0, r4
 80024c8:	f003 ffe2 	bl	8006490 <HAL_TIMEx_PWMN_Start>
  TIM1 -> RCR = 1;
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <main+0x12c>)
 80024ce:	2601      	movs	r6, #1
 80024d0:	631e      	str	r6, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	4332      	orrs	r2, r6
 80024d6:	615a      	str	r2, [r3, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 80024d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024e2:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f042 0210 	orr.w	r2, r2, #16
 80024ea:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80024f2:	601a      	str	r2, [r3, #0]
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 80024f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f6:	3a28      	subs	r2, #40	; 0x28
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_Base_Start_IT(&htim2);
 80024fa:	4c1c      	ldr	r4, [pc, #112]	; (800256c <main+0x130>)
 80024fc:	4620      	mov	r0, r4
 80024fe:	f003 fb27 	bl	8005b50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002502:	2100      	movs	r1, #0
 8002504:	4620      	mov	r0, r4
 8002506:	f003 fed7 	bl	80062b8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800250a:	2104      	movs	r1, #4
 800250c:	4620      	mov	r0, r4
 800250e:	f003 fed3 	bl	80062b8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002512:	2108      	movs	r1, #8
 8002514:	4620      	mov	r0, r4
 8002516:	f003 fecf 	bl	80062b8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 800251a:	4c15      	ldr	r4, [pc, #84]	; (8002570 <main+0x134>)
 800251c:	4620      	mov	r0, r4
 800251e:	f003 fad1 	bl	8005ac4 <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8002522:	4631      	mov	r1, r6
 8002524:	4620      	mov	r0, r4
 8002526:	f003 fb5d 	bl	8005be4 <HAL_TIM_GenerateEvent>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 800252a:	2202      	movs	r2, #2
 800252c:	4911      	ldr	r1, [pc, #68]	; (8002574 <main+0x138>)
 800252e:	4628      	mov	r0, r5
 8002530:	f001 f8f6 	bl	8003720 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002534:	4c10      	ldr	r4, [pc, #64]	; (8002578 <main+0x13c>)
 8002536:	2100      	movs	r1, #0
 8002538:	4620      	mov	r0, r4
 800253a:	f001 feeb 	bl	8004314 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 800253e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002542:	2200      	movs	r2, #0
 8002544:	4611      	mov	r1, r2
 8002546:	4620      	mov	r0, r4
 8002548:	f001 ff19 	bl	800437e <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 800254c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002550:	2200      	movs	r2, #0
 8002552:	4611      	mov	r1, r2
 8002554:	4808      	ldr	r0, [pc, #32]	; (8002578 <main+0x13c>)
 8002556:	f001 ff12 	bl	800437e <HAL_DAC_SetValue>
  while (1)
 800255a:	e7f7      	b.n	800254c <main+0x110>
 800255c:	2000034c 	.word	0x2000034c
 8002560:	2000017c 	.word	0x2000017c
 8002564:	48000800 	.word	0x48000800
 8002568:	40012c00 	.word	0x40012c00
 800256c:	20000398 	.word	0x20000398
 8002570:	200003e4 	.word	0x200003e4
 8002574:	2000008c 	.word	0x2000008c
 8002578:	200001e8 	.word	0x200001e8

0800257c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b500      	push	{lr}
 800257e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_MspInit+0x34>)
 8002582:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	661a      	str	r2, [r3, #96]	; 0x60
 800258a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800258c:	f002 0201 	and.w	r2, r2, #1
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002596:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800259a:	659a      	str	r2, [r3, #88]	; 0x58
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025a6:	f002 fb07 	bl	8004bb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	b003      	add	sp, #12
 80025ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	b09e      	sub	sp, #120	; 0x78
 80025b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	2100      	movs	r1, #0
 80025bc:	9119      	str	r1, [sp, #100]	; 0x64
 80025be:	911a      	str	r1, [sp, #104]	; 0x68
 80025c0:	911b      	str	r1, [sp, #108]	; 0x6c
 80025c2:	911c      	str	r1, [sp, #112]	; 0x70
 80025c4:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c6:	2254      	movs	r2, #84	; 0x54
 80025c8:	a804      	add	r0, sp, #16
 80025ca:	f004 fc61 	bl	8006e90 <memset>
  if(hadc->Instance==ADC1)
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d4:	d001      	beq.n	80025da <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025d6:	b01e      	add	sp, #120	; 0x78
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025de:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025e4:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e6:	a804      	add	r0, sp, #16
 80025e8:	f002 fef8 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d14e      	bne.n	800268e <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_ADC_MspInit+0xe8>)
 80025f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80025fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002600:	9201      	str	r2, [sp, #4]
 8002602:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002606:	f042 0204 	orr.w	r2, r2, #4
 800260a:	64da      	str	r2, [r3, #76]	; 0x4c
 800260c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800260e:	f002 0204 	and.w	r2, r2, #4
 8002612:	9202      	str	r2, [sp, #8]
 8002614:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	64da      	str	r2, [r3, #76]	; 0x4c
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	9303      	str	r3, [sp, #12]
 8002626:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002628:	2307      	movs	r3, #7
 800262a:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262c:	2603      	movs	r6, #3
 800262e:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2500      	movs	r5, #0
 8002632:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002634:	a919      	add	r1, sp, #100	; 0x64
 8002636:	481a      	ldr	r0, [pc, #104]	; (80026a0 <HAL_ADC_MspInit+0xec>)
 8002638:	f002 f92a 	bl	8004890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800263c:	9619      	str	r6, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263e:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	a919      	add	r1, sp, #100	; 0x64
 8002644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002648:	f002 f922 	bl	8004890 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800264c:	4815      	ldr	r0, [pc, #84]	; (80026a4 <HAL_ADC_MspInit+0xf0>)
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_ADC_MspInit+0xf4>)
 8002650:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002652:	2305      	movs	r3, #5
 8002654:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002656:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002658:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800265e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002662:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002668:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800266a:	2320      	movs	r3, #32
 800266c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800266e:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002670:	f001 fff6 	bl	8004660 <HAL_DMA_Init>
 8002674:	b970      	cbnz	r0, 8002694 <HAL_ADC_MspInit+0xe0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_ADC_MspInit+0xf0>)
 8002678:	6563      	str	r3, [r4, #84]	; 0x54
 800267a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	4611      	mov	r1, r2
 8002680:	2012      	movs	r0, #18
 8002682:	f001 fddb 	bl	800423c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002686:	2012      	movs	r0, #18
 8002688:	f001 fe10 	bl	80042ac <HAL_NVIC_EnableIRQ>
}
 800268c:	e7a3      	b.n	80025d6 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 800268e:	f7ff fcaf 	bl	8001ff0 <Error_Handler>
 8002692:	e7ad      	b.n	80025f0 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8002694:	f7ff fcac 	bl	8001ff0 <Error_Handler>
 8002698:	e7ed      	b.n	8002676 <HAL_ADC_MspInit+0xc2>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	48000800 	.word	0x48000800
 80026a4:	200001fc 	.word	0x200001fc
 80026a8:	40020008 	.word	0x40020008

080026ac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80026ac:	b530      	push	{r4, r5, lr}
 80026ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	2300      	movs	r3, #0
 80026b2:	9303      	str	r3, [sp, #12]
 80026b4:	9304      	str	r3, [sp, #16]
 80026b6:	9305      	str	r3, [sp, #20]
 80026b8:	9306      	str	r3, [sp, #24]
 80026ba:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 80026bc:	6802      	ldr	r2, [r0, #0]
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_DAC_MspInit+0x98>)
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80026c4:	b009      	add	sp, #36	; 0x24
 80026c6:	bd30      	pop	{r4, r5, pc}
 80026c8:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 80026ca:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80026ce:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80026d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80026da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026dc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80026e0:	9201      	str	r2, [sp, #4]
 80026e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026f6:	2510      	movs	r5, #16
 80026f8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fa:	2303      	movs	r3, #3
 80026fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	a903      	add	r1, sp, #12
 8002700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002704:	f002 f8c4 	bl	8004890 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8002708:	480f      	ldr	r0, [pc, #60]	; (8002748 <HAL_DAC_MspInit+0x9c>)
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_DAC_MspInit+0xa0>)
 800270c:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800270e:	2306      	movs	r3, #6
 8002710:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002712:	6085      	str	r5, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800271c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002720:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002726:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002728:	2220      	movs	r2, #32
 800272a:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800272c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800272e:	f001 ff97 	bl	8004660 <HAL_DMA_Init>
 8002732:	b918      	cbnz	r0, 800273c <HAL_DAC_MspInit+0x90>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <HAL_DAC_MspInit+0x9c>)
 8002736:	60a3      	str	r3, [r4, #8]
 8002738:	629c      	str	r4, [r3, #40]	; 0x28
}
 800273a:	e7c3      	b.n	80026c4 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 800273c:	f7ff fc58 	bl	8001ff0 <Error_Handler>
 8002740:	e7f8      	b.n	8002734 <HAL_DAC_MspInit+0x88>
 8002742:	bf00      	nop
 8002744:	50000800 	.word	0x50000800
 8002748:	2000025c 	.word	0x2000025c
 800274c:	4002001c 	.word	0x4002001c

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b510      	push	{r4, lr}
 8002752:	b09c      	sub	sp, #112	; 0x70
 8002754:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	2100      	movs	r1, #0
 8002758:	9117      	str	r1, [sp, #92]	; 0x5c
 800275a:	9118      	str	r1, [sp, #96]	; 0x60
 800275c:	9119      	str	r1, [sp, #100]	; 0x64
 800275e:	911a      	str	r1, [sp, #104]	; 0x68
 8002760:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002762:	2254      	movs	r2, #84	; 0x54
 8002764:	a802      	add	r0, sp, #8
 8002766:	f004 fb93 	bl	8006e90 <memset>
  if(huart->Instance==LPUART1)
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_UART_MspInit+0x7c>)
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002772:	b01c      	add	sp, #112	; 0x70
 8002774:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002776:	2320      	movs	r3, #32
 8002778:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277a:	a802      	add	r0, sp, #8
 800277c:	f002 fe2e 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8002780:	bb00      	cbnz	r0, 80027c4 <HAL_UART_MspInit+0x74>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_UART_MspInit+0x80>)
 8002784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	65da      	str	r2, [r3, #92]	; 0x5c
 800278c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800278e:	f002 0201 	and.w	r2, r2, #1
 8002792:	9200      	str	r2, [sp, #0]
 8002794:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	64da      	str	r2, [r3, #76]	; 0x4c
 800279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80027a8:	230c      	movs	r3, #12
 80027aa:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2202      	movs	r2, #2
 80027ae:	9218      	str	r2, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2200      	movs	r2, #0
 80027b2:	9219      	str	r2, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	921a      	str	r2, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80027b6:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	a917      	add	r1, sp, #92	; 0x5c
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027be:	f002 f867 	bl	8004890 <HAL_GPIO_Init>
}
 80027c2:	e7d6      	b.n	8002772 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80027c4:	f7ff fc14 	bl	8001ff0 <Error_Handler>
 80027c8:	e7db      	b.n	8002782 <HAL_UART_MspInit+0x32>
 80027ca:	bf00      	nop
 80027cc:	40008000 	.word	0x40008000
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80027d4:	6802      	ldr	r2, [r0, #0]
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_TIM_PWM_MspInit+0x28>)
 80027d8:	429a      	cmp	r2, r3
 80027da:	d000      	beq.n	80027de <HAL_TIM_PWM_MspInit+0xa>
 80027dc:	4770      	bx	lr
{
 80027de:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027e0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80027e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ea:	661a      	str	r2, [r3, #96]	; 0x60
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027f6:	b002      	add	sp, #8
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40012c00 	.word	0x40012c00

08002800 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002800:	b530      	push	{r4, r5, lr}
 8002802:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	2300      	movs	r3, #0
 8002806:	9303      	str	r3, [sp, #12]
 8002808:	9304      	str	r3, [sp, #16]
 800280a:	9305      	str	r3, [sp, #20]
 800280c:	9306      	str	r3, [sp, #24]
 800280e:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM2)
 8002810:	6803      	ldr	r3, [r0, #0]
 8002812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002816:	d001      	beq.n	800281c <HAL_TIM_IC_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002818:	b009      	add	sp, #36	; 0x24
 800281a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800281c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002820:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
 8002828:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800282a:	f002 0201 	and.w	r2, r2, #1
 800282e:	9200      	str	r2, [sp, #0]
 8002830:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002834:	f042 0202 	orr.w	r2, r2, #2
 8002838:	64da      	str	r2, [r3, #76]	; 0x4c
 800283a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800283c:	f002 0202 	and.w	r2, r2, #2
 8002840:	9201      	str	r2, [sp, #4]
 8002842:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	64da      	str	r2, [r3, #76]	; 0x4c
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8002856:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800285a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2502      	movs	r5, #2
 800285e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002860:	2401      	movs	r4, #1
 8002862:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	a903      	add	r1, sp, #12
 8002866:	4808      	ldr	r0, [pc, #32]	; (8002888 <HAL_TIM_IC_MspInit+0x88>)
 8002868:	f002 f812 	bl	8004890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H1_Pin;
 800286c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002870:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800287a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 800287c:	a903      	add	r1, sp, #12
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f002 f805 	bl	8004890 <HAL_GPIO_Init>
}
 8002886:	e7c7      	b.n	8002818 <HAL_TIM_IC_MspInit+0x18>
 8002888:	48000400 	.word	0x48000400

0800288c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 800288c:	6802      	ldr	r2, [r0, #0]
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_TIM_Base_MspInit+0x28>)
 8002890:	429a      	cmp	r2, r3
 8002892:	d000      	beq.n	8002896 <HAL_TIM_Base_MspInit+0xa>
 8002894:	4770      	bx	lr
{
 8002896:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002898:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800289c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	659a      	str	r2, [r3, #88]	; 0x58
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80028ae:	b002      	add	sp, #8
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40001400 	.word	0x40001400

080028b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	2300      	movs	r3, #0
 80028be:	9303      	str	r3, [sp, #12]
 80028c0:	9304      	str	r3, [sp, #16]
 80028c2:	9305      	str	r3, [sp, #20]
 80028c4:	9306      	str	r3, [sp, #24]
 80028c6:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80028c8:	6802      	ldr	r2, [r0, #0]
 80028ca:	4b29      	ldr	r3, [pc, #164]	; (8002970 <HAL_TIM_MspPostInit+0xb8>)
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028d0:	b008      	add	sp, #32
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80028d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028da:	f042 0204 	orr.w	r2, r2, #4
 80028de:	64da      	str	r2, [r3, #76]	; 0x4c
 80028e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028e2:	f002 0204 	and.w	r2, r2, #4
 80028e6:	9200      	str	r2, [sp, #0]
 80028e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80028f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028f4:	f002 0201 	and.w	r2, r2, #1
 80028f8:	9201      	str	r2, [sp, #4]
 80028fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028fe:	f042 0202 	orr.w	r2, r2, #2
 8002902:	64da      	str	r2, [r3, #76]	; 0x4c
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	9302      	str	r3, [sp, #8]
 800290c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800290e:	2308      	movs	r3, #8
 8002910:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2502      	movs	r5, #2
 8002914:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002916:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002918:	a903      	add	r1, sp, #12
 800291a:	4816      	ldr	r0, [pc, #88]	; (8002974 <HAL_TIM_MspPostInit+0xbc>)
 800291c:	f001 ffb8 	bl	8004890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002920:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002924:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2400      	movs	r4, #0
 800292a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800292e:	2606      	movs	r6, #6
 8002930:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	a903      	add	r1, sp, #12
 8002934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002938:	f001 ffaa 	bl	8004890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800293c:	2301      	movs	r3, #1
 800293e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002946:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	4e0b      	ldr	r6, [pc, #44]	; (8002978 <HAL_TIM_MspPostInit+0xc0>)
 800294a:	a903      	add	r1, sp, #12
 800294c:	4630      	mov	r0, r6
 800294e:	f001 ff9f 	bl	8004890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002956:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800295e:	230c      	movs	r3, #12
 8002960:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	eb0d 0103 	add.w	r1, sp, r3
 8002966:	4630      	mov	r0, r6
 8002968:	f001 ff92 	bl	8004890 <HAL_GPIO_Init>
}
 800296c:	e7b0      	b.n	80028d0 <HAL_TIM_MspPostInit+0x18>
 800296e:	bf00      	nop
 8002970:	40012c00 	.word	0x40012c00
 8002974:	48000800 	.word	0x48000800
 8002978:	48000400 	.word	0x48000400

0800297c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800297c:	e7fe      	b.n	800297c <NMI_Handler>

0800297e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <HardFault_Handler>

08002980 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <MemManage_Handler>

08002982 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <BusFault_Handler>

08002984 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler>

08002986 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002986:	4770      	bx	lr

08002988 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298a:	4770      	bx	lr

0800298c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298e:	f000 f897 	bl	8002ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002992:	bd08      	pop	{r3, pc}

08002994 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002996:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Channel1_IRQHandler+0xc>)
 8002998:	f001 ff18 	bl	80047cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800299c:	bd08      	pop	{r3, pc}
 800299e:	bf00      	nop
 80029a0:	200001fc 	.word	0x200001fc

080029a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80029a6:	4802      	ldr	r0, [pc, #8]	; (80029b0 <DMA1_Channel2_IRQHandler+0xc>)
 80029a8:	f001 ff10 	bl	80047cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029ac:	bd08      	pop	{r3, pc}
 80029ae:	bf00      	nop
 80029b0:	2000025c 	.word	0x2000025c

080029b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80029b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029b6:	4808      	ldr	r0, [pc, #32]	; (80029d8 <ADC1_2_IRQHandler+0x24>)
 80029b8:	f000 fa06 	bl	8002dc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80029bc:	2120      	movs	r1, #32
 80029be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c2:	f002 f85b 	bl	8004a7c <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence();
 80029c6:	f7fe fad7 	bl	8000f78 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80029ca:	2120      	movs	r1, #32
 80029cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d0:	f002 f854 	bl	8004a7c <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029d4:	bd08      	pop	{r3, pc}
 80029d6:	bf00      	nop
 80029d8:	2000017c 	.word	0x2000017c

080029dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80029de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029e2:	f002 f855 	bl	8004a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029e6:	bd08      	pop	{r3, pc}

080029e8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029e8:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <SystemInit+0x10>)
 80029ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029fc:	480d      	ldr	r0, [pc, #52]	; (8002a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <LoopForever+0xe>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a18:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <LoopForever+0x16>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a26:	f7ff ffdf 	bl	80029e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f004 fa0d 	bl	8006e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a2e:	f7ff fd05 	bl	800243c <main>

08002a32 <LoopForever>:

LoopForever:
    b LoopForever
 8002a32:	e7fe      	b.n	8002a32 <LoopForever>
  ldr   r0, =_estack
 8002a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002a40:	080082cc 	.word	0x080082cc
  ldr r2, =_sbss
 8002a44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002a48:	20000434 	.word	0x20000434

08002a4c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC3_IRQHandler>
	...

08002a50 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_InitTick+0x44>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b90b      	cbnz	r3, 8002a5a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a56:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002a58:	4770      	bx	lr
{
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_InitTick+0x48>)
 8002a68:	6810      	ldr	r0, [r2, #0]
 8002a6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a6e:	f001 fc2b 	bl	80042c8 <HAL_SYSTICK_Config>
 8002a72:	b968      	cbnz	r0, 8002a90 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a74:	2c0f      	cmp	r4, #15
 8002a76:	d901      	bls.n	8002a7c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
 8002a7a:	e00a      	b.n	8002a92 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4621      	mov	r1, r4
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f001 fbda 	bl	800423c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_InitTick+0x4c>)
 8002a8a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
}
 8002a92:	bd10      	pop	{r4, pc}
 8002a94:	20000004 	.word	0x20000004
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000008 	.word	0x20000008

08002aa0 <HAL_Init>:
{
 8002aa0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa2:	2003      	movs	r0, #3
 8002aa4:	f001 fbb8 	bl	8004218 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7ff ffd1 	bl	8002a50 <HAL_InitTick>
 8002aae:	b110      	cbz	r0, 8002ab6 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002ab0:	2401      	movs	r4, #1
}
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	bd10      	pop	{r4, pc}
 8002ab6:	4604      	mov	r4, r0
    HAL_MspInit();
 8002ab8:	f7ff fd60 	bl	800257c <HAL_MspInit>
 8002abc:	e7f9      	b.n	8002ab2 <HAL_Init+0x12>
	...

08002ac0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_IncTick+0x10>)
 8002ac2:	6813      	ldr	r3, [r2, #0]
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <HAL_IncTick+0x14>)
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	440b      	add	r3, r1
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000430 	.word	0x20000430
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ad8:	4b01      	ldr	r3, [pc, #4]	; (8002ae0 <HAL_GetTick+0x8>)
 8002ada:	6818      	ldr	r0, [r3, #0]
}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000430 	.word	0x20000430

08002ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff fff6 	bl	8002ad8 <HAL_GetTick>
 8002aec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002af2:	d002      	beq.n	8002afa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_Delay+0x24>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afa:	f7ff ffed 	bl	8002ad8 <HAL_GetTick>
 8002afe:	1b40      	subs	r0, r0, r5
 8002b00:	42a0      	cmp	r0, r4
 8002b02:	d3fa      	bcc.n	8002afa <HAL_Delay+0x16>
  {
  }
}
 8002b04:	bd38      	pop	{r3, r4, r5, pc}
 8002b06:	bf00      	nop
 8002b08:	20000004 	.word	0x20000004

08002b0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b530      	push	{r4, r5, lr}
 8002b0e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b14:	2800      	cmp	r0, #0
 8002b16:	f000 8138 	beq.w	8002d8a <HAL_ADC_Init+0x27e>
 8002b1a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b1c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002b1e:	b313      	cbz	r3, 8002b66 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b20:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002b28:	d005      	beq.n	8002b36 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002b30:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002b34:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b36:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b38:	6893      	ldr	r3, [r2, #8]
 8002b3a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b3e:	d11f      	bne.n	8002b80 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8002b40:	6893      	ldr	r3, [r2, #8]
 8002b42:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b50:	4b8f      	ldr	r3, [pc, #572]	; (8002d90 <HAL_ADC_Init+0x284>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	4a8f      	ldr	r2, [pc, #572]	; (8002d94 <HAL_ADC_Init+0x288>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	3301      	adds	r3, #1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b64:	e009      	b.n	8002b7a <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8002b66:	f7ff fd25 	bl	80025b4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8002b6e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8002b72:	e7d5      	b.n	8002b20 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b7a:	9b01      	ldr	r3, [sp, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f9      	bne.n	8002b74 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b80:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b82:	6893      	ldr	r3, [r2, #8]
 8002b84:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b88:	d13d      	bne.n	8002c06 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b8c:	f043 0310 	orr.w	r3, r3, #16
 8002b90:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b9c:	6893      	ldr	r3, [r2, #8]
 8002b9e:	f013 0304 	ands.w	r3, r3, #4
 8002ba2:	d000      	beq.n	8002ba6 <HAL_ADC_Init+0x9a>
 8002ba4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ba6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002ba8:	f011 0f10 	tst.w	r1, #16
 8002bac:	f040 80e6 	bne.w	8002d7c <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 80e3 	bne.w	8002d7c <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc2:	6893      	ldr	r3, [r2, #8]
 8002bc4:	f013 0f01 	tst.w	r3, #1
 8002bc8:	d13e      	bne.n	8002c48 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bca:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002bce:	d01c      	beq.n	8002c0a <HAL_ADC_Init+0xfe>
 8002bd0:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <HAL_ADC_Init+0x28c>)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d019      	beq.n	8002c0a <HAL_ADC_Init+0xfe>
 8002bd6:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <HAL_ADC_Init+0x290>)
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	f011 0101 	ands.w	r1, r1, #1
 8002bde:	d000      	beq.n	8002be2 <HAL_ADC_Init+0xd6>
 8002be0:	2101      	movs	r1, #1
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_ADC_Init+0x294>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f013 0301 	ands.w	r3, r3, #1
 8002bea:	d000      	beq.n	8002bee <HAL_ADC_Init+0xe2>
 8002bec:	2301      	movs	r3, #1
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	496c      	ldr	r1, [pc, #432]	; (8002da4 <HAL_ADC_Init+0x298>)
 8002bf2:	6889      	ldr	r1, [r1, #8]
 8002bf4:	f011 0101 	ands.w	r1, r1, #1
 8002bf8:	d000      	beq.n	8002bfc <HAL_ADC_Init+0xf0>
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	e012      	b.n	8002c2c <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c06:	2000      	movs	r0, #0
 8002c08:	e7c8      	b.n	8002b9c <HAL_ADC_Init+0x90>
 8002c0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f013 0301 	ands.w	r3, r3, #1
 8002c14:	d000      	beq.n	8002c18 <HAL_ADC_Init+0x10c>
 8002c16:	2301      	movs	r3, #1
 8002c18:	495f      	ldr	r1, [pc, #380]	; (8002d98 <HAL_ADC_Init+0x28c>)
 8002c1a:	6889      	ldr	r1, [r1, #8]
 8002c1c:	f011 0101 	ands.w	r1, r1, #1
 8002c20:	d000      	beq.n	8002c24 <HAL_ADC_Init+0x118>
 8002c22:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c24:	430b      	orrs	r3, r1
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b163      	cbz	r3, 8002c48 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c2e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002c32:	d072      	beq.n	8002d1a <HAL_ADC_Init+0x20e>
 8002c34:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_ADC_Init+0x28c>)
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d06d      	beq.n	8002d16 <HAL_ADC_Init+0x20a>
 8002c3a:	495b      	ldr	r1, [pc, #364]	; (8002da8 <HAL_ADC_Init+0x29c>)
 8002c3c:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c3e:	688a      	ldr	r2, [r1, #8]
 8002c40:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c48:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 8002c4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c4c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8002c50:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8002c52:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8002c54:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8002c56:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c58:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c60:	2a01      	cmp	r2, #1
 8002c62:	d05c      	beq.n	8002d1e <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c66:	b122      	cbz	r2, 8002c72 <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c68:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c6e:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c70:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c72:	6821      	ldr	r1, [r4, #0]
 8002c74:	68cd      	ldr	r5, [r1, #12]
 8002c76:	4a4d      	ldr	r2, [pc, #308]	; (8002dac <HAL_ADC_Init+0x2a0>)
 8002c78:	402a      	ands	r2, r5
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c7e:	6822      	ldr	r2, [r4, #0]
 8002c80:	6913      	ldr	r3, [r2, #16]
 8002c82:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c8c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c8e:	688b      	ldr	r3, [r1, #8]
 8002c90:	f013 0304 	ands.w	r3, r3, #4
 8002c94:	d000      	beq.n	8002c98 <HAL_ADC_Init+0x18c>
 8002c96:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c98:	688a      	ldr	r2, [r1, #8]
 8002c9a:	f012 0208 	ands.w	r2, r2, #8
 8002c9e:	d000      	beq.n	8002ca2 <HAL_ADC_Init+0x196>
 8002ca0:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ca2:	bb4b      	cbnz	r3, 8002cf8 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ca4:	bb42      	cbnz	r2, 8002cf8 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ca6:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ca8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002cac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cae:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cb2:	68cb      	ldr	r3, [r1, #12]
 8002cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb8:	f023 0302 	bic.w	r3, r3, #2
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cc0:	6923      	ldr	r3, [r4, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d030      	beq.n	8002d28 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	6913      	ldr	r3, [r2, #16]
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cd0:	6822      	ldr	r2, [r4, #0]
 8002cd2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002cd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cde:	6921      	ldr	r1, [r4, #16]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ce6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d02b      	beq.n	8002d46 <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	6913      	ldr	r3, [r2, #16]
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cf8:	6963      	ldr	r3, [r4, #20]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d035      	beq.n	8002d6a <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d02:	f023 030f 	bic.w	r3, r3, #15
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002d14:	e037      	b.n	8002d86 <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d16:	4926      	ldr	r1, [pc, #152]	; (8002db0 <HAL_ADC_Init+0x2a4>)
 8002d18:	e790      	b.n	8002c3c <HAL_ADC_Init+0x130>
 8002d1a:	4925      	ldr	r1, [pc, #148]	; (8002db0 <HAL_ADC_Init+0x2a4>)
 8002d1c:	e78e      	b.n	8002c3c <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d20:	3a01      	subs	r2, #1
 8002d22:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002d26:	e79d      	b.n	8002c64 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	6913      	ldr	r3, [r2, #16]
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002d38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002d44:	e7cf      	b.n	8002ce6 <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d46:	6821      	ldr	r1, [r4, #0]
 8002d48:	690b      	ldr	r3, [r1, #16]
 8002d4a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d54:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002d56:	432a      	orrs	r2, r5
 8002d58:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8002d5a:	432a      	orrs	r2, r5
 8002d5c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8002d5e:	432a      	orrs	r2, r5
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	610b      	str	r3, [r1, #16]
 8002d68:	e7c6      	b.n	8002cf8 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d6a:	6821      	ldr	r1, [r4, #0]
 8002d6c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002d6e:	f023 030f 	bic.w	r3, r3, #15
 8002d72:	6a22      	ldr	r2, [r4, #32]
 8002d74:	3a01      	subs	r2, #1
 8002d76:	4313      	orrs	r3, r2
 8002d78:	630b      	str	r3, [r1, #48]	; 0x30
 8002d7a:	e7c5      	b.n	8002d08 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d7e:	f043 0310 	orr.w	r3, r3, #16
 8002d82:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002d86:	b003      	add	sp, #12
 8002d88:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	e7fb      	b.n	8002d86 <HAL_ADC_Init+0x27a>
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000
 8002d94:	053e2d63 	.word	0x053e2d63
 8002d98:	50000100 	.word	0x50000100
 8002d9c:	50000400 	.word	0x50000400
 8002da0:	50000500 	.word	0x50000500
 8002da4:	50000600 	.word	0x50000600
 8002da8:	50000700 	.word	0x50000700
 8002dac:	fff04007 	.word	0xfff04007
 8002db0:	50000300 	.word	0x50000300

08002db4 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002db4:	4770      	bx	lr

08002db6 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002db6:	4770      	bx	lr

08002db8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002db8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002dbc:	f7ff fffb 	bl	8002db6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc0:	bd08      	pop	{r3, pc}

08002dc2 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_ADC_ErrorCallback>:
}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_ADC_IRQHandler>:
{
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002dcc:	6803      	ldr	r3, [r0, #0]
 8002dce:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dd0:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd6:	d046      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x9e>
 8002dd8:	4a97      	ldr	r2, [pc, #604]	; (8003038 <HAL_ADC_IRQHandler+0x270>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d041      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x9a>
 8002dde:	4b97      	ldr	r3, [pc, #604]	; (800303c <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002de0:	689d      	ldr	r5, [r3, #8]
 8002de2:	f005 051f 	and.w	r5, r5, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002de6:	f016 0f02 	tst.w	r6, #2
 8002dea:	d010      	beq.n	8002e0e <HAL_ADC_IRQHandler+0x46>
 8002dec:	f017 0f02 	tst.w	r7, #2
 8002df0:	d00d      	beq.n	8002e0e <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002df4:	f013 0f10 	tst.w	r3, #16
 8002df8:	d103      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002dfa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e00:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e02:	4620      	mov	r0, r4
 8002e04:	f000 fde4 	bl	80039d0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e0e:	f016 0f04 	tst.w	r6, #4
 8002e12:	d002      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x52>
 8002e14:	f017 0f04 	tst.w	r7, #4
 8002e18:	d105      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x5e>
 8002e1a:	f016 0f08 	tst.w	r6, #8
 8002e1e:	d055      	beq.n	8002ecc <HAL_ADC_IRQHandler+0x104>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e20:	f017 0f08 	tst.w	r7, #8
 8002e24:	d052      	beq.n	8002ecc <HAL_ADC_IRQHandler+0x104>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e28:	f013 0f10 	tst.w	r3, #16
 8002e2c:	d103      	bne.n	8002e36 <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e34:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e36:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002e3e:	d13f      	bne.n	8002ec0 <HAL_ADC_IRQHandler+0xf8>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e40:	4a7d      	ldr	r2, [pc, #500]	; (8003038 <HAL_ADC_IRQHandler+0x270>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d014      	beq.n	8002e70 <HAL_ADC_IRQHandler+0xa8>
 8002e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00d      	beq.n	8002e6a <HAL_ADC_IRQHandler+0xa2>
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d010      	beq.n	8002e76 <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e54:	b17d      	cbz	r5, 8002e76 <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e56:	2d05      	cmp	r5, #5
 8002e58:	d00d      	beq.n	8002e76 <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e5a:	2d09      	cmp	r5, #9
 8002e5c:	d00b      	beq.n	8002e76 <HAL_ADC_IRQHandler+0xae>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e5e:	68d2      	ldr	r2, [r2, #12]
 8002e60:	e00a      	b.n	8002e78 <HAL_ADC_IRQHandler+0xb0>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e62:	4b77      	ldr	r3, [pc, #476]	; (8003040 <HAL_ADC_IRQHandler+0x278>)
 8002e64:	e7bc      	b.n	8002de0 <HAL_ADC_IRQHandler+0x18>
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <HAL_ADC_IRQHandler+0x278>)
 8002e68:	e7ba      	b.n	8002de0 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e6a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002e6e:	e7ef      	b.n	8002e50 <HAL_ADC_IRQHandler+0x88>
 8002e70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e74:	e7ec      	b.n	8002e50 <HAL_ADC_IRQHandler+0x88>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e76:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e78:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002e7c:	d120      	bne.n	8002ec0 <HAL_ADC_IRQHandler+0xf8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	f012 0f08 	tst.w	r2, #8
 8002e84:	d01c      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0xf8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	f012 0f04 	tst.w	r2, #4
 8002e8c:	d110      	bne.n	8002eb0 <HAL_ADC_IRQHandler+0xe8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	f022 020c 	bic.w	r2, r2, #12
 8002e94:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e96:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e9c:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ea0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_ADC_IRQHandler+0xf8>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002eae:	e007      	b.n	8002ec0 <HAL_ADC_IRQHandler+0xf8>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f7ff ff77 	bl	8002db4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	220c      	movs	r2, #12
 8002eca:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ecc:	f016 0f20 	tst.w	r6, #32
 8002ed0:	d002      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x110>
 8002ed2:	f017 0f20 	tst.w	r7, #32
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0x11c>
 8002ed8:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002edc:	d063      	beq.n	8002fa6 <HAL_ADC_IRQHandler+0x1de>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ede:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002ee2:	d060      	beq.n	8002fa6 <HAL_ADC_IRQHandler+0x1de>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ee4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ee6:	f013 0f10 	tst.w	r3, #16
 8002eea:	d103      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002eec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002eee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ef2:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ef4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ef8:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8002efc:	d116      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x164>
 8002efe:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002f06:	d113      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x168>
 8002f08:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f0a:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <HAL_ADC_IRQHandler+0x270>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d014      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x172>
 8002f10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00d      	beq.n	8002f34 <HAL_ADC_IRQHandler+0x16c>
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d010      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f1e:	b17d      	cbz	r5, 8002f40 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f20:	2d06      	cmp	r5, #6
 8002f22:	d00d      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f24:	2d07      	cmp	r5, #7
 8002f26:	d00b      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x178>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f28:	68d2      	ldr	r2, [r2, #12]
 8002f2a:	e00a      	b.n	8002f42 <HAL_ADC_IRQHandler+0x17a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	e7e7      	b.n	8002f00 <HAL_ADC_IRQHandler+0x138>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f30:	2000      	movs	r0, #0
 8002f32:	e7ea      	b.n	8002f0a <HAL_ADC_IRQHandler+0x142>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f34:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002f38:	e7ef      	b.n	8002f1a <HAL_ADC_IRQHandler+0x152>
 8002f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f3e:	e7ec      	b.n	8002f1a <HAL_ADC_IRQHandler+0x152>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f40:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f42:	b351      	cbz	r1, 8002f9a <HAL_ADC_IRQHandler+0x1d2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f44:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002f48:	d003      	beq.n	8002f52 <HAL_ADC_IRQHandler+0x18a>
 8002f4a:	b330      	cbz	r0, 8002f9a <HAL_ADC_IRQHandler+0x1d2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f4c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002f50:	d123      	bne.n	8002f9a <HAL_ADC_IRQHandler+0x1d2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f58:	d01f      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x1d2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f5a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002f5e:	d11c      	bne.n	8002f9a <HAL_ADC_IRQHandler+0x1d2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	f012 0f08 	tst.w	r2, #8
 8002f66:	d110      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x1c2>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f6e:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f76:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f7a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f7e:	d10c      	bne.n	8002f9a <HAL_ADC_IRQHandler+0x1d2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002f88:	e007      	b.n	8002f9a <HAL_ADC_IRQHandler+0x1d2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f000 fd14 	bl	80039c8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	2260      	movs	r2, #96	; 0x60
 8002fa4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002fa6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002faa:	d002      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x1ea>
 8002fac:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002fb0:	d136      	bne.n	8003020 <HAL_ADC_IRQHandler+0x258>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002fb2:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002fb6:	d002      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x1f6>
 8002fb8:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002fbc:	d142      	bne.n	8003044 <HAL_ADC_IRQHandler+0x27c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fbe:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002fc2:	d002      	beq.n	8002fca <HAL_ADC_IRQHandler+0x202>
 8002fc4:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002fc8:	d148      	bne.n	800305c <HAL_ADC_IRQHandler+0x294>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fca:	f016 0f10 	tst.w	r6, #16
 8002fce:	d020      	beq.n	8003012 <HAL_ADC_IRQHandler+0x24a>
 8002fd0:	f017 0f10 	tst.w	r7, #16
 8002fd4:	d01d      	beq.n	8003012 <HAL_ADC_IRQHandler+0x24a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fd8:	b16b      	cbz	r3, 8002ff6 <HAL_ADC_IRQHandler+0x22e>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fda:	2d00      	cmp	r5, #0
 8002fdc:	d04e      	beq.n	800307c <HAL_ADC_IRQHandler+0x2b4>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe4:	d048      	beq.n	8003078 <HAL_ADC_IRQHandler+0x2b0>
 8002fe6:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_ADC_IRQHandler+0x270>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d043      	beq.n	8003074 <HAL_ADC_IRQHandler+0x2ac>
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8002ff4:	d00a      	beq.n	800300c <HAL_ADC_IRQHandler+0x244>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ff6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffc:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ffe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff fedc 	bl	8002dc4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	2210      	movs	r2, #16
 8003010:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003012:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8003016:	d002      	beq.n	800301e <HAL_ADC_IRQHandler+0x256>
 8003018:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800301c:	d134      	bne.n	8003088 <HAL_ADC_IRQHandler+0x2c0>
}
 800301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003020:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003026:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff feca 	bl	8002dc2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e7bd      	b.n	8002fb2 <HAL_ADC_IRQHandler+0x1ea>
 8003036:	bf00      	nop
 8003038:	50000100 	.word	0x50000100
 800303c:	50000700 	.word	0x50000700
 8003040:	50000300 	.word	0x50000300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003044:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800304c:	4620      	mov	r0, r4
 800304e:	f000 fcbd 	bl	80039cc <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e7b0      	b.n	8002fbe <HAL_ADC_IRQHandler+0x1f6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800305c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800305e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003062:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003064:	4620      	mov	r0, r4
 8003066:	f000 fcb2 	bl	80039ce <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e7aa      	b.n	8002fca <HAL_ADC_IRQHandler+0x202>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_ADC_IRQHandler+0x2e0>)
 8003076:	e7ba      	b.n	8002fee <HAL_ADC_IRQHandler+0x226>
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_ADC_IRQHandler+0x2e0>)
 800307a:	e7b8      	b.n	8002fee <HAL_ADC_IRQHandler+0x226>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f013 0f01 	tst.w	r3, #1
 8003084:	d0c2      	beq.n	800300c <HAL_ADC_IRQHandler+0x244>
 8003086:	e7b6      	b.n	8002ff6 <HAL_ADC_IRQHandler+0x22e>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003088:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800308a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308e:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003090:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003092:	f043 0308 	orr.w	r3, r3, #8
 8003096:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309e:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80030a0:	4620      	mov	r0, r4
 80030a2:	f000 fc92 	bl	80039ca <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80030a6:	e7ba      	b.n	800301e <HAL_ADC_IRQHandler+0x256>
 80030a8:	50000300 	.word	0x50000300

080030ac <ADC_DMAConvCplt>:
{
 80030ac:	b508      	push	{r3, lr}
 80030ae:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80030b4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80030b8:	d130      	bne.n	800311c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80030bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c0:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030c2:	6803      	ldr	r3, [r0, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f012 0f08 	tst.w	r2, #8
 80030ca:	d014      	beq.n	80030f6 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80030d2:	d120      	bne.n	8003116 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80030da:	d11c      	bne.n	8003116 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030dc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80030de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e2:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80030e6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80030ea:	d114      	bne.n	8003116 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	65c3      	str	r3, [r0, #92]	; 0x5c
 80030f4:	e00f      	b.n	8003116 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f013 0f02 	tst.w	r3, #2
 80030fc:	d10b      	bne.n	8003116 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030fe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003104:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003106:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003108:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800310c:	d103      	bne.n	8003116 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8003116:	f7ff fe4d 	bl	8002db4 <HAL_ADC_ConvCpltCallback>
}
 800311a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800311c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800311e:	f012 0f10 	tst.w	r2, #16
 8003122:	d104      	bne.n	800312e <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003124:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003126:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003128:	4618      	mov	r0, r3
 800312a:	4790      	blx	r2
}
 800312c:	e7f5      	b.n	800311a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 800312e:	f7ff fe49 	bl	8002dc4 <HAL_ADC_ErrorCallback>
 8003132:	e7f2      	b.n	800311a <ADC_DMAConvCplt+0x6e>

08003134 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003134:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003136:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003138:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003140:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003148:	f7ff fe3c 	bl	8002dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800314c:	bd08      	pop	{r3, pc}
	...

08003150 <HAL_ADC_ConfigChannel>:
{
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003154:	2200      	movs	r2, #0
 8003156:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003158:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800315c:	2a01      	cmp	r2, #1
 800315e:	f000 8284 	beq.w	800366a <HAL_ADC_ConfigChannel+0x51a>
 8003162:	4603      	mov	r3, r0
 8003164:	2201      	movs	r2, #1
 8003166:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316a:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316c:	68a8      	ldr	r0, [r5, #8]
 800316e:	f010 0f04 	tst.w	r0, #4
 8003172:	d009      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003174:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003176:	f042 0220 	orr.w	r2, r2, #32
 800317a:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800317c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8003184:	b003      	add	sp, #12
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003188:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800318a:	3530      	adds	r5, #48	; 0x30
 800318c:	0a22      	lsrs	r2, r4, #8
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003194:	58a8      	ldr	r0, [r5, r2]
 8003196:	f004 0e1f 	and.w	lr, r4, #31
 800319a:	241f      	movs	r4, #31
 800319c:	fa04 f40e 	lsl.w	r4, r4, lr
 80031a0:	ea20 0004 	bic.w	r0, r0, r4
 80031a4:	680c      	ldr	r4, [r1, #0]
 80031a6:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80031aa:	fa0c fc0e 	lsl.w	ip, ip, lr
 80031ae:	ea40 000c 	orr.w	r0, r0, ip
 80031b2:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031b4:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031b6:	6882      	ldr	r2, [r0, #8]
 80031b8:	f012 0204 	ands.w	r2, r2, #4
 80031bc:	d000      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x70>
 80031be:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031c0:	6884      	ldr	r4, [r0, #8]
 80031c2:	f014 0408 	ands.w	r4, r4, #8
 80031c6:	d000      	beq.n	80031ca <HAL_ADC_ConfigChannel+0x7a>
 80031c8:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	d150      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d14e      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031d2:	688f      	ldr	r7, [r1, #8]
 80031d4:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 80031d8:	f000 8086 	beq.w	80032e8 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031dc:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031de:	3014      	adds	r0, #20
 80031e0:	0e72      	lsrs	r2, r6, #25
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80031e8:	5885      	ldr	r5, [r0, r2]
 80031ea:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 80031ee:	f04f 0c07 	mov.w	ip, #7
 80031f2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80031f6:	ea25 0c0c 	bic.w	ip, r5, ip
 80031fa:	fa07 f50e 	lsl.w	r5, r7, lr
 80031fe:	ea4c 0505 	orr.w	r5, ip, r5
 8003202:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003204:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003206:	6942      	ldr	r2, [r0, #20]
 8003208:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800320c:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800320e:	694d      	ldr	r5, [r1, #20]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	68c2      	ldr	r2, [r0, #12]
 8003214:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003218:	0052      	lsls	r2, r2, #1
 800321a:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800321e:	690e      	ldr	r6, [r1, #16]
 8003220:	2e04      	cmp	r6, #4
 8003222:	d079      	beq.n	8003318 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003224:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8003226:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800322a:	4dae      	ldr	r5, [pc, #696]	; (80034e4 <HAL_ADC_ConfigChannel+0x394>)
 800322c:	403d      	ands	r5, r7
 800322e:	680f      	ldr	r7, [r1, #0]
 8003230:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8003234:	433a      	orrs	r2, r7
 8003236:	4315      	orrs	r5, r2
 8003238:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800323c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	690e      	ldr	r6, [r1, #16]
 8003244:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003246:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003248:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 800324c:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8003250:	4328      	orrs	r0, r5
 8003252:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	690d      	ldr	r5, [r1, #16]
 800325a:	7f08      	ldrb	r0, [r1, #28]
 800325c:	2801      	cmp	r0, #1
 800325e:	d058      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003260:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003262:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003266:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 800326a:	4304      	orrs	r4, r0
 800326c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003270:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003272:	6890      	ldr	r0, [r2, #8]
 8003274:	f010 0f01 	tst.w	r0, #1
 8003278:	d112      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800327a:	6808      	ldr	r0, [r1, #0]
 800327c:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800327e:	4c9a      	ldr	r4, [pc, #616]	; (80034e8 <HAL_ADC_ConfigChannel+0x398>)
 8003280:	42a5      	cmp	r5, r4
 8003282:	f000 80b1 	beq.w	80033e8 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8003286:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800328a:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800328e:	ea24 0000 	bic.w	r0, r4, r0
 8003292:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003296:	68c8      	ldr	r0, [r1, #12]
 8003298:	4a93      	ldr	r2, [pc, #588]	; (80034e8 <HAL_ADC_ConfigChannel+0x398>)
 800329a:	4290      	cmp	r0, r2
 800329c:	f000 80ac 	beq.w	80033f8 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032a0:	680a      	ldr	r2, [r1, #0]
 80032a2:	4992      	ldr	r1, [pc, #584]	; (80034ec <HAL_ADC_ConfigChannel+0x39c>)
 80032a4:	420a      	tst	r2, r1
 80032a6:	f000 81da 	beq.w	800365e <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80032b0:	f000 8173 	beq.w	800359a <HAL_ADC_ConfigChannel+0x44a>
 80032b4:	488e      	ldr	r0, [pc, #568]	; (80034f0 <HAL_ADC_ConfigChannel+0x3a0>)
 80032b6:	4281      	cmp	r1, r0
 80032b8:	f000 816c 	beq.w	8003594 <HAL_ADC_ConfigChannel+0x444>
 80032bc:	488d      	ldr	r0, [pc, #564]	; (80034f4 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032be:	6880      	ldr	r0, [r0, #8]
 80032c0:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80032c4:	4d8c      	ldr	r5, [pc, #560]	; (80034f8 <HAL_ADC_ConfigChannel+0x3a8>)
 80032c6:	42aa      	cmp	r2, r5
 80032c8:	f000 8169 	beq.w	800359e <HAL_ADC_ConfigChannel+0x44e>
 80032cc:	4d8b      	ldr	r5, [pc, #556]	; (80034fc <HAL_ADC_ConfigChannel+0x3ac>)
 80032ce:	42aa      	cmp	r2, r5
 80032d0:	f000 8165 	beq.w	800359e <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d4:	4d8a      	ldr	r5, [pc, #552]	; (8003500 <HAL_ADC_ConfigChannel+0x3b0>)
 80032d6:	42aa      	cmp	r2, r5
 80032d8:	f000 8194 	beq.w	8003604 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032dc:	4d89      	ldr	r5, [pc, #548]	; (8003504 <HAL_ADC_ConfigChannel+0x3b4>)
 80032de:	42aa      	cmp	r2, r5
 80032e0:	f000 81a8 	beq.w	8003634 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e4:	2000      	movs	r0, #0
 80032e6:	e74a      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032e8:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032ea:	3014      	adds	r0, #20
 80032ec:	0e6a      	lsrs	r2, r5, #25
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80032f4:	5886      	ldr	r6, [r0, r2]
 80032f6:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80032fa:	2707      	movs	r7, #7
 80032fc:	fa07 f505 	lsl.w	r5, r7, r5
 8003300:	ea26 0505 	bic.w	r5, r6, r5
 8003304:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003306:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003308:	6942      	ldr	r2, [r0, #20]
 800330a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800330e:	6142      	str	r2, [r0, #20]
}
 8003310:	e77d      	b.n	800320e <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003312:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003316:	e7a3      	b.n	8003260 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003318:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800331a:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800331c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003320:	680a      	ldr	r2, [r1, #0]
 8003322:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003326:	bb85      	cbnz	r5, 800338a <HAL_ADC_ConfigChannel+0x23a>
 8003328:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800332c:	4294      	cmp	r4, r2
 800332e:	d034      	beq.n	800339a <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003330:	681c      	ldr	r4, [r3, #0]
 8003332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003334:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003336:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800333a:	680a      	ldr	r2, [r1, #0]
 800333c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003340:	bb85      	cbnz	r5, 80033a4 <HAL_ADC_ConfigChannel+0x254>
 8003342:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003346:	4290      	cmp	r0, r2
 8003348:	d034      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800334a:	681c      	ldr	r4, [r3, #0]
 800334c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800334e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003350:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003354:	680a      	ldr	r2, [r1, #0]
 8003356:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800335a:	bb85      	cbnz	r5, 80033be <HAL_ADC_ConfigChannel+0x26e>
 800335c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003360:	4290      	cmp	r0, r2
 8003362:	d034      	beq.n	80033ce <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003364:	681c      	ldr	r4, [r3, #0]
 8003366:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003368:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800336a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800336e:	680a      	ldr	r2, [r1, #0]
 8003370:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003374:	bb85      	cbnz	r5, 80033d8 <HAL_ADC_ConfigChannel+0x288>
 8003376:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800337a:	4290      	cmp	r0, r2
 800337c:	f47f af78 	bne.w	8003270 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8003380:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003382:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003386:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8003388:	e772      	b.n	8003270 <HAL_ADC_ConfigChannel+0x120>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800338e:	b112      	cbz	r2, 8003396 <HAL_ADC_ConfigChannel+0x246>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003390:	fab2 f282 	clz	r2, r2
 8003394:	e7ca      	b.n	800332c <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8003396:	2220      	movs	r2, #32
 8003398:	e7c8      	b.n	800332c <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 800339a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800339c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033a0:	6602      	str	r2, [r0, #96]	; 0x60
}
 80033a2:	e7c5      	b.n	8003330 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80033a8:	b112      	cbz	r2, 80033b0 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 80033aa:	fab2 f282 	clz	r2, r2
 80033ae:	e7ca      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 80033b0:	2220      	movs	r2, #32
 80033b2:	e7c8      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 80033b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ba:	6662      	str	r2, [r4, #100]	; 0x64
}
 80033bc:	e7c5      	b.n	800334a <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80033c2:	b112      	cbz	r2, 80033ca <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	e7ca      	b.n	8003360 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 80033ca:	2220      	movs	r2, #32
 80033cc:	e7c8      	b.n	8003360 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 80033ce:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80033d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033d4:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80033d6:	e7c5      	b.n	8003364 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80033dc:	b112      	cbz	r2, 80033e4 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	e7ca      	b.n	800337a <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 80033e4:	2220      	movs	r2, #32
 80033e6:	e7c8      	b.n	800337a <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 80033e8:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80033ec:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80033f0:	4320      	orrs	r0, r4
 80033f2:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 80033f6:	e74e      	b.n	8003296 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f8:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033fa:	680a      	ldr	r2, [r1, #0]
 80033fc:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003400:	2d00      	cmp	r5, #0
 8003402:	d138      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x326>
 8003404:	0e90      	lsrs	r0, r2, #26
 8003406:	3001      	adds	r0, #1
 8003408:	f000 001f 	and.w	r0, r0, #31
 800340c:	2809      	cmp	r0, #9
 800340e:	bf8c      	ite	hi
 8003410:	2000      	movhi	r0, #0
 8003412:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003414:	2800      	cmp	r0, #0
 8003416:	d077      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003418:	2d00      	cmp	r5, #0
 800341a:	d13b      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x344>
 800341c:	0e90      	lsrs	r0, r2, #26
 800341e:	3001      	adds	r0, #1
 8003420:	0680      	lsls	r0, r0, #26
 8003422:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003426:	2d00      	cmp	r5, #0
 8003428:	d140      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x35c>
 800342a:	0e96      	lsrs	r6, r2, #26
 800342c:	3601      	adds	r6, #1
 800342e:	f006 071f 	and.w	r7, r6, #31
 8003432:	2601      	movs	r6, #1
 8003434:	40be      	lsls	r6, r7
 8003436:	4330      	orrs	r0, r6
 8003438:	2d00      	cmp	r5, #0
 800343a:	d145      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x378>
 800343c:	0e92      	lsrs	r2, r2, #26
 800343e:	3201      	adds	r2, #1
 8003440:	f002 021f 	and.w	r2, r2, #31
 8003444:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003448:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344a:	4302      	orrs	r2, r0
 800344c:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800344e:	f104 0614 	add.w	r6, r4, #20
 8003452:	0e55      	lsrs	r5, r2, #25
 8003454:	00ad      	lsls	r5, r5, #2
 8003456:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800345a:	5974      	ldr	r4, [r6, r5]
 800345c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003460:	f04f 0c07 	mov.w	ip, #7
 8003464:	fa0c fc02 	lsl.w	ip, ip, r2
 8003468:	ea24 0c0c 	bic.w	ip, r4, ip
 800346c:	4090      	lsls	r0, r2
 800346e:	ea4c 0000 	orr.w	r0, ip, r0
 8003472:	5170      	str	r0, [r6, r5]
}
 8003474:	e714      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800347a:	b148      	cbz	r0, 8003490 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 800347c:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003480:	3001      	adds	r0, #1
 8003482:	f000 001f 	and.w	r0, r0, #31
 8003486:	2809      	cmp	r0, #9
 8003488:	bf8c      	ite	hi
 800348a:	2000      	movhi	r0, #0
 800348c:	2001      	movls	r0, #1
 800348e:	e7c1      	b.n	8003414 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8003490:	2020      	movs	r0, #32
 8003492:	e7f5      	b.n	8003480 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003498:	b130      	cbz	r0, 80034a8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800349a:	fab0 f080 	clz	r0, r0
 800349e:	3001      	adds	r0, #1
 80034a0:	0680      	lsls	r0, r0, #26
 80034a2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80034a6:	e7be      	b.n	8003426 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 80034a8:	2020      	movs	r0, #32
 80034aa:	e7f8      	b.n	800349e <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80034b0:	b146      	cbz	r6, 80034c4 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 80034b2:	fab6 f686 	clz	r6, r6
 80034b6:	3601      	adds	r6, #1
 80034b8:	f006 061f 	and.w	r6, r6, #31
 80034bc:	2701      	movs	r7, #1
 80034be:	fa07 f606 	lsl.w	r6, r7, r6
 80034c2:	e7b8      	b.n	8003436 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 80034c4:	2620      	movs	r6, #32
 80034c6:	e7f6      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80034cc:	b142      	cbz	r2, 80034e0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	3201      	adds	r2, #1
 80034d4:	f002 021f 	and.w	r2, r2, #31
 80034d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034dc:	0512      	lsls	r2, r2, #20
 80034de:	e7b4      	b.n	800344a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80034e0:	2220      	movs	r2, #32
 80034e2:	e7f6      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x382>
 80034e4:	03fff000 	.word	0x03fff000
 80034e8:	407f0000 	.word	0x407f0000
 80034ec:	80080000 	.word	0x80080000
 80034f0:	50000100 	.word	0x50000100
 80034f4:	50000700 	.word	0x50000700
 80034f8:	c3210000 	.word	0xc3210000
 80034fc:	90c00010 	.word	0x90c00010
 8003500:	c7520000 	.word	0xc7520000
 8003504:	cb840000 	.word	0xcb840000
 8003508:	b9cd      	cbnz	r5, 800353e <HAL_ADC_ConfigChannel+0x3ee>
 800350a:	0e90      	lsrs	r0, r2, #26
 800350c:	3001      	adds	r0, #1
 800350e:	0680      	lsls	r0, r0, #26
 8003510:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003514:	b9fd      	cbnz	r5, 8003556 <HAL_ADC_ConfigChannel+0x406>
 8003516:	0e96      	lsrs	r6, r2, #26
 8003518:	3601      	adds	r6, #1
 800351a:	f006 071f 	and.w	r7, r6, #31
 800351e:	2601      	movs	r6, #1
 8003520:	40be      	lsls	r6, r7
 8003522:	4330      	orrs	r0, r6
 8003524:	bb2d      	cbnz	r5, 8003572 <HAL_ADC_ConfigChannel+0x422>
 8003526:	0e92      	lsrs	r2, r2, #26
 8003528:	3201      	adds	r2, #1
 800352a:	f002 021f 	and.w	r2, r2, #31
 800352e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003532:	3a1e      	subs	r2, #30
 8003534:	0512      	lsls	r2, r2, #20
 8003536:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353a:	4302      	orrs	r2, r0
 800353c:	e786      	b.n	800344c <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003542:	b130      	cbz	r0, 8003552 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003544:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003548:	3001      	adds	r0, #1
 800354a:	0680      	lsls	r0, r0, #26
 800354c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003550:	e7e0      	b.n	8003514 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 8003552:	2020      	movs	r0, #32
 8003554:	e7f8      	b.n	8003548 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800355a:	b146      	cbz	r6, 800356e <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 800355c:	fab6 f686 	clz	r6, r6
 8003560:	3601      	adds	r6, #1
 8003562:	f006 061f 	and.w	r6, r6, #31
 8003566:	2701      	movs	r7, #1
 8003568:	fa07 f606 	lsl.w	r6, r7, r6
 800356c:	e7d9      	b.n	8003522 <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 800356e:	2620      	movs	r6, #32
 8003570:	e7f6      	b.n	8003560 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003576:	b15a      	cbz	r2, 8003590 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	3201      	adds	r2, #1
 800357e:	f002 021f 	and.w	r2, r2, #31
 8003582:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003586:	3a1e      	subs	r2, #30
 8003588:	0512      	lsls	r2, r2, #20
 800358a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800358e:	e7d4      	b.n	800353a <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8003590:	2220      	movs	r2, #32
 8003592:	e7f3      	b.n	800357c <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003594:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003598:	e691      	b.n	80032be <HAL_ADC_ConfigChannel+0x16e>
 800359a:	4835      	ldr	r0, [pc, #212]	; (8003670 <HAL_ADC_ConfigChannel+0x520>)
 800359c:	e68f      	b.n	80032be <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800359e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80035a2:	f47f ae97 	bne.w	80032d4 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035a6:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80035aa:	d004      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x466>
 80035ac:	4a31      	ldr	r2, [pc, #196]	; (8003674 <HAL_ADC_ConfigChannel+0x524>)
 80035ae:	4291      	cmp	r1, r2
 80035b0:	d001      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b2:	2000      	movs	r0, #0
 80035b4:	e5e3      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b6:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80035ba:	d019      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x4a0>
 80035bc:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <HAL_ADC_ConfigChannel+0x528>)
 80035be:	4291      	cmp	r1, r2
 80035c0:	d014      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x49c>
 80035c2:	492e      	ldr	r1, [pc, #184]	; (800367c <HAL_ADC_ConfigChannel+0x52c>)
 80035c4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035c8:	688a      	ldr	r2, [r1, #8]
 80035ca:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035ce:	4314      	orrs	r4, r2
 80035d0:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_ADC_ConfigChannel+0x530>)
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	0992      	lsrs	r2, r2, #6
 80035d8:	492a      	ldr	r1, [pc, #168]	; (8003684 <HAL_ADC_ConfigChannel+0x534>)
 80035da:	fba1 1202 	umull	r1, r2, r1, r2
 80035de:	0992      	lsrs	r2, r2, #6
 80035e0:	3201      	adds	r2, #1
 80035e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80035e6:	0092      	lsls	r2, r2, #2
 80035e8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80035ea:	e006      	b.n	80035fa <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ec:	4920      	ldr	r1, [pc, #128]	; (8003670 <HAL_ADC_ConfigChannel+0x520>)
 80035ee:	e7e9      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x474>
 80035f0:	491f      	ldr	r1, [pc, #124]	; (8003670 <HAL_ADC_ConfigChannel+0x520>)
 80035f2:	e7e7      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 80035f4:	9a01      	ldr	r2, [sp, #4]
 80035f6:	3a01      	subs	r2, #1
 80035f8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80035fa:	9a01      	ldr	r2, [sp, #4]
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	d1f9      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003600:	2000      	movs	r0, #0
 8003602:	e5bc      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003604:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003608:	f47f ae68 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003610:	d00e      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x4e0>
 8003612:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_ADC_ConfigChannel+0x528>)
 8003614:	4291      	cmp	r1, r2
 8003616:	d009      	beq.n	800362c <HAL_ADC_ConfigChannel+0x4dc>
 8003618:	4918      	ldr	r1, [pc, #96]	; (800367c <HAL_ADC_ConfigChannel+0x52c>)
 800361a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800361e:	688a      	ldr	r2, [r1, #8]
 8003620:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003624:	4314      	orrs	r4, r2
 8003626:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003628:	2000      	movs	r0, #0
}
 800362a:	e5a8      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362c:	4910      	ldr	r1, [pc, #64]	; (8003670 <HAL_ADC_ConfigChannel+0x520>)
 800362e:	e7f4      	b.n	800361a <HAL_ADC_ConfigChannel+0x4ca>
 8003630:	490f      	ldr	r1, [pc, #60]	; (8003670 <HAL_ADC_ConfigChannel+0x520>)
 8003632:	e7f2      	b.n	800361a <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003634:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003638:	d113      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 800363a:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <HAL_ADC_ConfigChannel+0x528>)
 800363c:	4291      	cmp	r1, r2
 800363e:	d012      	beq.n	8003666 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003640:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003644:	d009      	beq.n	800365a <HAL_ADC_ConfigChannel+0x50a>
 8003646:	480d      	ldr	r0, [pc, #52]	; (800367c <HAL_ADC_ConfigChannel+0x52c>)
 8003648:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800364c:	6881      	ldr	r1, [r0, #8]
 800364e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003652:	430a      	orrs	r2, r1
 8003654:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003656:	2000      	movs	r0, #0
}
 8003658:	e591      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800365a:	4805      	ldr	r0, [pc, #20]	; (8003670 <HAL_ADC_ConfigChannel+0x520>)
 800365c:	e7f4      	b.n	8003648 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365e:	2000      	movs	r0, #0
 8003660:	e58d      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
 8003662:	2000      	movs	r0, #0
 8003664:	e58b      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
 8003666:	2000      	movs	r0, #0
 8003668:	e589      	b.n	800317e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800366a:	2002      	movs	r0, #2
 800366c:	e58a      	b.n	8003184 <HAL_ADC_ConfigChannel+0x34>
 800366e:	bf00      	nop
 8003670:	50000300 	.word	0x50000300
 8003674:	50000600 	.word	0x50000600
 8003678:	50000100 	.word	0x50000100
 800367c:	50000700 	.word	0x50000700
 8003680:	20000000 	.word	0x20000000
 8003684:	053e2d63 	.word	0x053e2d63

08003688 <ADC_Enable>:
{
 8003688:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800368a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	f012 0f01 	tst.w	r2, #1
 8003692:	d140      	bne.n	8003716 <ADC_Enable+0x8e>
 8003694:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003696:	6899      	ldr	r1, [r3, #8]
 8003698:	4a20      	ldr	r2, [pc, #128]	; (800371c <ADC_Enable+0x94>)
 800369a:	4211      	tst	r1, r2
 800369c:	d009      	beq.n	80036b2 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80036a0:	f043 0310 	orr.w	r3, r3, #16
 80036a4:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80036ae:	2001      	movs	r0, #1
 80036b0:	e032      	b.n	8003718 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036b8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80036c2:	f7ff fa09 	bl	8002ad8 <HAL_GetTick>
 80036c6:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f012 0f01 	tst.w	r2, #1
 80036d0:	d11f      	bne.n	8003712 <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	f012 0f01 	tst.w	r2, #1
 80036d8:	d107      	bne.n	80036ea <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036e0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ea:	f7ff f9f5 	bl	8002ad8 <HAL_GetTick>
 80036ee:	1b43      	subs	r3, r0, r5
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d9e9      	bls.n	80036c8 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f013 0f01 	tst.w	r3, #1
 80036fc:	d1e4      	bne.n	80036c8 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003700:	f043 0310 	orr.w	r3, r3, #16
 8003704:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003706:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 800370e:	2001      	movs	r0, #1
 8003710:	e002      	b.n	8003718 <ADC_Enable+0x90>
  return HAL_OK;
 8003712:	2000      	movs	r0, #0
 8003714:	e000      	b.n	8003718 <ADC_Enable+0x90>
 8003716:	2000      	movs	r0, #0
}
 8003718:	bd38      	pop	{r3, r4, r5, pc}
 800371a:	bf00      	nop
 800371c:	8000003f 	.word	0x8000003f

08003720 <HAL_ADC_Start_DMA>:
{
 8003720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003724:	4604      	mov	r4, r0
 8003726:	460f      	mov	r7, r1
 8003728:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800372a:	6800      	ldr	r0, [r0, #0]
 800372c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003730:	d021      	beq.n	8003776 <HAL_ADC_Start_DMA+0x56>
 8003732:	4b42      	ldr	r3, [pc, #264]	; (800383c <HAL_ADC_Start_DMA+0x11c>)
 8003734:	4298      	cmp	r0, r3
 8003736:	d01b      	beq.n	8003770 <HAL_ADC_Start_DMA+0x50>
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800373a:	689e      	ldr	r6, [r3, #8]
 800373c:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003740:	6885      	ldr	r5, [r0, #8]
 8003742:	f015 0f04 	tst.w	r5, #4
 8003746:	d174      	bne.n	8003832 <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8003748:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800374c:	2b01      	cmp	r3, #1
 800374e:	d073      	beq.n	8003838 <HAL_ADC_Start_DMA+0x118>
 8003750:	2301      	movs	r3, #1
 8003752:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_ADC_Start_DMA+0x124>)
 8003758:	4298      	cmp	r0, r3
 800375a:	d00e      	beq.n	800377a <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800375c:	b16e      	cbz	r6, 800377a <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800375e:	2e05      	cmp	r6, #5
 8003760:	d00b      	beq.n	800377a <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003762:	2e09      	cmp	r6, #9
 8003764:	d009      	beq.n	800377a <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8003766:	2300      	movs	r3, #0
 8003768:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 800376c:	2001      	movs	r0, #1
 800376e:	e061      	b.n	8003834 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003770:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003774:	e7e1      	b.n	800373a <HAL_ADC_Start_DMA+0x1a>
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_ADC_Start_DMA+0x128>)
 8003778:	e7df      	b.n	800373a <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 800377a:	4620      	mov	r0, r4
 800377c:	f7ff ff84 	bl	8003688 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003780:	2800      	cmp	r0, #0
 8003782:	d152      	bne.n	800382a <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8003784:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003786:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_ADC_Start_DMA+0x11c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_ADC_Start_DMA+0xfe>
 800379c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d039      	beq.n	8003818 <HAL_ADC_Start_DMA+0xf8>
 80037a4:	461a      	mov	r2, r3
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d000      	beq.n	80037ac <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037aa:	b91e      	cbnz	r6, 80037b4 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037b2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037b6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80037ba:	d033      	beq.n	8003824 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037be:	f023 0306 	bic.w	r3, r3, #6
 80037c2:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_ADC_Start_DMA+0x12c>)
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037cc:	4a20      	ldr	r2, [pc, #128]	; (8003850 <HAL_ADC_Start_DMA+0x130>)
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037d2:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_ADC_Start_DMA+0x134>)
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	221c      	movs	r2, #28
 80037da:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80037dc:	2300      	movs	r3, #0
 80037de:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	6853      	ldr	r3, [r2, #4]
 80037e6:	f043 0310 	orr.w	r3, r3, #16
 80037ea:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	68d3      	ldr	r3, [r2, #12]
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037f6:	6821      	ldr	r1, [r4, #0]
 80037f8:	4643      	mov	r3, r8
 80037fa:	463a      	mov	r2, r7
 80037fc:	3140      	adds	r1, #64	; 0x40
 80037fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003800:	f000 ff9a 	bl	8004738 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003804:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003806:	6893      	ldr	r3, [r2, #8]
 8003808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800380c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6093      	str	r3, [r2, #8]
}
 8003816:	e00d      	b.n	8003834 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003818:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800381c:	e7c3      	b.n	80037a6 <HAL_ADC_Start_DMA+0x86>
 800381e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003822:	e7c0      	b.n	80037a6 <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8003824:	2300      	movs	r3, #0
 8003826:	6623      	str	r3, [r4, #96]	; 0x60
 8003828:	e7cc      	b.n	80037c4 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 800382a:	2300      	movs	r3, #0
 800382c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003830:	e000      	b.n	8003834 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8003832:	2002      	movs	r0, #2
}
 8003834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003838:	2002      	movs	r0, #2
 800383a:	e7fb      	b.n	8003834 <HAL_ADC_Start_DMA+0x114>
 800383c:	50000100 	.word	0x50000100
 8003840:	50000700 	.word	0x50000700
 8003844:	50000600 	.word	0x50000600
 8003848:	50000300 	.word	0x50000300
 800384c:	080030ad 	.word	0x080030ad
 8003850:	08002db9 	.word	0x08002db9
 8003854:	08003135 	.word	0x08003135

08003858 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800385c:	6803      	ldr	r3, [r0, #0]
 800385e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003862:	d073      	beq.n	800394c <HAL_ADCEx_InjectedStart_IT+0xf4>
 8003864:	4a55      	ldr	r2, [pc, #340]	; (80039bc <HAL_ADCEx_InjectedStart_IT+0x164>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d06d      	beq.n	8003946 <HAL_ADCEx_InjectedStart_IT+0xee>
 800386a:	4a55      	ldr	r2, [pc, #340]	; (80039c0 <HAL_ADCEx_InjectedStart_IT+0x168>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800386c:	6895      	ldr	r5, [r2, #8]
 800386e:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	f012 0f08 	tst.w	r2, #8
 8003878:	f040 809b 	bne.w	80039b2 <HAL_ADCEx_InjectedStart_IT+0x15a>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800387c:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	f413 7fc0 	tst.w	r3, #384	; 0x180
 8003884:	d101      	bne.n	800388a <HAL_ADCEx_InjectedStart_IT+0x32>
        && (tmp_config_injected_queue == 0UL)
 8003886:	2a00      	cmp	r2, #0
 8003888:	da62      	bge.n	8003950 <HAL_ADCEx_InjectedStart_IT+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800388a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800388e:	2b01      	cmp	r3, #1
 8003890:	f000 8091 	beq.w	80039b6 <HAL_ADCEx_InjectedStart_IT+0x15e>
 8003894:	2301      	movs	r3, #1
 8003896:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff fef4 	bl	8003688 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038a0:	2800      	cmp	r0, #0
 80038a2:	f040 8082 	bne.w	80039aa <HAL_ADCEx_InjectedStart_IT+0x152>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80038a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038ac:	d056      	beq.n	800395c <HAL_ADCEx_InjectedStart_IT+0x104>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038b0:	f023 0308 	bic.w	r3, r3, #8
 80038b4:	6623      	str	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80038b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038c4:	65e3      	str	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <HAL_ADCEx_InjectedStart_IT+0x164>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d04c      	beq.n	8003968 <HAL_ADCEx_InjectedStart_IT+0x110>
 80038ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d045      	beq.n	8003962 <HAL_ADCEx_InjectedStart_IT+0x10a>
 80038d6:	461a      	mov	r2, r3
 80038d8:	4293      	cmp	r3, r2
 80038da:	d000      	beq.n	80038de <HAL_ADCEx_InjectedStart_IT+0x86>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038dc:	b91d      	cbnz	r5, 80038e6 <HAL_ADCEx_InjectedStart_IT+0x8e>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038e0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80038e4:	65e2      	str	r2, [r4, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80038e6:	2260      	movs	r2, #96	; 0x60
 80038e8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038ea:	2300      	movs	r3, #0
 80038ec:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80038f8:	d003      	beq.n	8003902 <HAL_ADCEx_InjectedStart_IT+0xaa>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003900:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003902:	69a3      	ldr	r3, [r4, #24]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d032      	beq.n	800396e <HAL_ADCEx_InjectedStart_IT+0x116>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	6853      	ldr	r3, [r2, #4]
 800390c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003910:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	6853      	ldr	r3, [r2, #4]
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	6053      	str	r3, [r2, #4]
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_ADCEx_InjectedStart_IT+0x164>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d032      	beq.n	800398a <HAL_ADCEx_InjectedStart_IT+0x132>
 8003924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003928:	4293      	cmp	r3, r2
 800392a:	d02b      	beq.n	8003984 <HAL_ADCEx_InjectedStart_IT+0x12c>
 800392c:	461a      	mov	r2, r3
 800392e:	4293      	cmp	r3, r2
 8003930:	d02e      	beq.n	8003990 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003932:	b36d      	cbz	r5, 8003990 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003934:	2d06      	cmp	r5, #6
 8003936:	d02b      	beq.n	8003990 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003938:	2d07      	cmp	r5, #7
 800393a:	d029      	beq.n	8003990 <HAL_ADCEx_InjectedStart_IT+0x138>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800393c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800393e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003942:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003944:	e036      	b.n	80039b4 <HAL_ADCEx_InjectedStart_IT+0x15c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003946:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800394a:	e78f      	b.n	800386c <HAL_ADCEx_InjectedStart_IT+0x14>
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_ADCEx_InjectedStart_IT+0x16c>)
 800394e:	e78d      	b.n	800386c <HAL_ADCEx_InjectedStart_IT+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003950:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003952:	f043 0320 	orr.w	r3, r3, #32
 8003956:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8003958:	2001      	movs	r0, #1
 800395a:	e02b      	b.n	80039b4 <HAL_ADCEx_InjectedStart_IT+0x15c>
        ADC_CLEAR_ERRORCODE(hadc);
 800395c:	2300      	movs	r3, #0
 800395e:	6623      	str	r3, [r4, #96]	; 0x60
 8003960:	e7a9      	b.n	80038b6 <HAL_ADCEx_InjectedStart_IT+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003962:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003966:	e7b7      	b.n	80038d8 <HAL_ADCEx_InjectedStart_IT+0x80>
 8003968:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800396c:	e7b4      	b.n	80038d8 <HAL_ADCEx_InjectedStart_IT+0x80>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	6853      	ldr	r3, [r2, #4]
 8003972:	f023 0320 	bic.w	r3, r3, #32
 8003976:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	6853      	ldr	r3, [r2, #4]
 800397c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003980:	6053      	str	r3, [r2, #4]
          break;
 8003982:	e7cb      	b.n	800391c <HAL_ADCEx_InjectedStart_IT+0xc4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003984:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003988:	e7d1      	b.n	800392e <HAL_ADCEx_InjectedStart_IT+0xd6>
 800398a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800398e:	e7ce      	b.n	800392e <HAL_ADCEx_InjectedStart_IT+0xd6>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003990:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003992:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003996:	d10d      	bne.n	80039b4 <HAL_ADCEx_InjectedStart_IT+0x15c>
  MODIFY_REG(ADCx->CR,
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800399e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80039a2:	f042 0208 	orr.w	r2, r2, #8
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	e004      	b.n	80039b4 <HAL_ADCEx_InjectedStart_IT+0x15c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039aa:	2300      	movs	r3, #0
 80039ac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80039b0:	e000      	b.n	80039b4 <HAL_ADCEx_InjectedStart_IT+0x15c>
    return HAL_BUSY;
 80039b2:	2002      	movs	r0, #2
  }
}
 80039b4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80039b6:	2002      	movs	r0, #2
 80039b8:	e7fc      	b.n	80039b4 <HAL_ADCEx_InjectedStart_IT+0x15c>
 80039ba:	bf00      	nop
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000700 	.word	0x50000700
 80039c4:	50000300 	.word	0x50000300

080039c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80039c8:	4770      	bx	lr

080039ca <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80039ca:	4770      	bx	lr

080039cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039cc:	4770      	bx	lr

080039ce <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039ce:	4770      	bx	lr

080039d0 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80039d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d6:	b083      	sub	sp, #12
 80039d8:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80039da:	2200      	movs	r2, #0
 80039dc:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
  assert_param(IS_ADC_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039de:	6940      	ldr	r0, [r0, #20]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80039e4:	2a01      	cmp	r2, #1
 80039e6:	f000 831f 	beq.w	8004028 <HAL_ADCEx_InjectedConfigChannel+0x654>
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80039f0:	b1a8      	cbz	r0, 8003a1e <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80039f2:	6a0a      	ldr	r2, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80039f4:	2a01      	cmp	r2, #1
 80039f6:	d012      	beq.n	8003a1e <HAL_ADCEx_InjectedConfigChannel+0x4a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80039f8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80039fa:	2800      	cmp	r0, #0
 80039fc:	f040 80cd 	bne.w	8003b9a <HAL_ADCEx_InjectedConfigChannel+0x1c6>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003a00:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003a02:	2200      	movs	r2, #0
 8003a04:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003a06:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003a08:	2c00      	cmp	r4, #0
 8003a0a:	f000 80c3 	beq.w	8003b94 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003a0e:	6a0a      	ldr	r2, [r1, #32]
 8003a10:	3a01      	subs	r2, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003a12:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 8003a16:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003a18:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003a1a:	4314      	orrs	r4, r2
 8003a1c:	e0be      	b.n	8003b9c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003a1e:	684a      	ldr	r2, [r1, #4]
 8003a20:	2a09      	cmp	r2, #9
 8003a22:	f000 8097 	beq.w	8003b54 <HAL_ADCEx_InjectedConfigChannel+0x180>
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a26:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a28:	6890      	ldr	r0, [r2, #8]
 8003a2a:	f010 0f08 	tst.w	r0, #8
 8003a2e:	d110      	bne.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x7e>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003a30:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8003a34:	2800      	cmp	r0, #0
 8003a36:	f040 80d0 	bne.w	8003bda <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003a3a:	68d0      	ldr	r0, [r2, #12]
 8003a3c:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003a40:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8003a44:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003a48:	0524      	lsls	r4, r4, #20
 8003a4a:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8003a4e:	4320      	orrs	r0, r4
 8003a50:	60d0      	str	r0, [r2, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a52:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a54:	68a2      	ldr	r2, [r4, #8]
 8003a56:	f012 0204 	ands.w	r2, r2, #4
 8003a5a:	d000      	beq.n	8003a5e <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8003a5c:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a5e:	68a5      	ldr	r5, [r4, #8]
 8003a60:	f015 0508 	ands.w	r5, r5, #8
 8003a64:	d000      	beq.n	8003a68 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8003a66:	2501      	movs	r5, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a68:	2a00      	cmp	r2, #0
 8003a6a:	f040 8161 	bne.w	8003d30 <HAL_ADCEx_InjectedConfigChannel+0x35c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	f040 819b 	bne.w	8003daa <HAL_ADCEx_InjectedConfigChannel+0x3d6>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003a74:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003a76:	b11a      	cbz	r2, 8003a80 <HAL_ADCEx_InjectedConfigChannel+0xac>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003a78:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003a7a:	2a00      	cmp	r2, #0
 8003a7c:	f040 80bc 	bne.w	8003bf8 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003a80:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 8003a84:	2a01      	cmp	r2, #1
 8003a86:	f000 80b1 	beq.w	8003bec <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003a8a:	68e2      	ldr	r2, [r4, #12]
 8003a8c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003a90:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a92:	2000      	movs	r0, #0
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003a94:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8003a98:	2a01      	cmp	r2, #1
 8003a9a:	f000 80bc 	beq.w	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x242>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003a9e:	681c      	ldr	r4, [r3, #0]
 8003aa0:	6922      	ldr	r2, [r4, #16]
 8003aa2:	f022 0202 	bic.w	r2, r2, #2
 8003aa6:	6122      	str	r2, [r4, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003aa8:	688a      	ldr	r2, [r1, #8]
 8003aaa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003aae:	f000 80be 	beq.w	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x25a>
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003ab2:	681c      	ldr	r4, [r3, #0]
 8003ab4:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ab6:	f104 0c14 	add.w	ip, r4, #20
 8003aba:	0e77      	lsrs	r7, r6, #25
 8003abc:	00bf      	lsls	r7, r7, #2
 8003abe:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003ac2:	f85c 4007 	ldr.w	r4, [ip, r7]
 8003ac6:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003aca:	f04f 0e07 	mov.w	lr, #7
 8003ace:	fa0e fe06 	lsl.w	lr, lr, r6
 8003ad2:	ea24 040e 	bic.w	r4, r4, lr
 8003ad6:	40b2      	lsls	r2, r6
 8003ad8:	4322      	orrs	r2, r4
 8003ada:	f84c 2007 	str.w	r2, [ip, r7]

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ade:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ae0:	6962      	ldr	r2, [r4, #20]
 8003ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae6:	6162      	str	r2, [r4, #20]

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003ae8:	694c      	ldr	r4, [r1, #20]
 8003aea:	681e      	ldr	r6, [r3, #0]
 8003aec:	68f2      	ldr	r2, [r6, #12]
 8003aee:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003af2:	0052      	lsls	r2, r2, #1
 8003af4:	fa04 f202 	lsl.w	r2, r4, r2

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003af8:	f8d1 c010 	ldr.w	ip, [r1, #16]
 8003afc:	f1bc 0f04 	cmp.w	ip, #4
 8003b00:	f000 80af 	beq.w	8003c62 <HAL_ADCEx_InjectedConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b04:	3660      	adds	r6, #96	; 0x60
  MODIFY_REG(*preg,
 8003b06:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8003b0a:	4fa9      	ldr	r7, [pc, #676]	; (8003db0 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8003b0c:	4027      	ands	r7, r4
 8003b0e:	680c      	ldr	r4, [r1, #0]
 8003b10:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003b14:	4322      	orrs	r2, r4
 8003b16:	4317      	orrs	r7, r2
 8003b18:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8003b1c:	f846 702c 	str.w	r7, [r6, ip, lsl #2]
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	690f      	ldr	r7, [r1, #16]
 8003b24:	698c      	ldr	r4, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b26:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003b28:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8003b2c:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8003b30:	4334      	orrs	r4, r6
 8003b32:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	690e      	ldr	r6, [r1, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b3a:	7f0c      	ldrb	r4, [r1, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003b3c:	2c01      	cmp	r4, #1
 8003b3e:	f000 808d 	beq.w	8003c5c <HAL_ADCEx_InjectedConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b42:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003b44:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8003b48:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003b4c:	4325      	orrs	r5, r4
 8003b4e:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
}
 8003b52:	e0ee      	b.n	8003d32 <HAL_ADCEx_InjectedConfigChannel+0x35e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b54:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003b56:	b1bc      	cbz	r4, 8003b88 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b58:	6808      	ldr	r0, [r1, #0]
 8003b5a:	0e82      	lsrs	r2, r0, #26
 8003b5c:	0252      	lsls	r2, r2, #9
 8003b5e:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003b62:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 8003b66:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003b68:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b6a:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003b6c:	681c      	ldr	r4, [r3, #0]
 8003b6e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003b70:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8003b74:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003b78:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003b7c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003b80:	4310      	orrs	r0, r2
 8003b82:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003b84:	665a      	str	r2, [r3, #100]	; 0x64
 8003b86:	e74e      	b.n	8003a26 <HAL_ADCEx_InjectedConfigChannel+0x52>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003b88:	680a      	ldr	r2, [r1, #0]
 8003b8a:	0e92      	lsrs	r2, r2, #26
 8003b8c:	0252      	lsls	r2, r2, #9
 8003b8e:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
 8003b92:	e7eb      	b.n	8003b6c <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003b94:	6a0a      	ldr	r2, [r1, #32]
 8003b96:	1e54      	subs	r4, r2, #1
 8003b98:	e000      	b.n	8003b9c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003b9a:	2400      	movs	r4, #0
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003b9c:	6808      	ldr	r0, [r1, #0]
 8003b9e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003ba2:	684a      	ldr	r2, [r1, #4]
 8003ba4:	f002 021f 	and.w	r2, r2, #31
 8003ba8:	fa00 f202 	lsl.w	r2, r0, r2
 8003bac:	4322      	orrs	r2, r4
    hadc->InjectionConfig.ChannelCount--;
 8003bae:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003bb0:	3801      	subs	r0, #1
 8003bb2:	6698      	str	r0, [r3, #104]	; 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003bb4:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003bb6:	4322      	orrs	r2, r4
 8003bb8:	665a      	str	r2, [r3, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	f47f af33 	bne.w	8003a26 <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003bc0:	681c      	ldr	r4, [r3, #0]
 8003bc2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003bc4:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8003bc8:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003bcc:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003bd0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003bd4:	4302      	orrs	r2, r0
 8003bd6:	64e2      	str	r2, [r4, #76]	; 0x4c
 8003bd8:	e725      	b.n	8003a26 <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->CFGR,
 8003bda:	68d0      	ldr	r0, [r2, #12]
 8003bdc:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003be0:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 8003be4:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8003be8:	60d0      	str	r0, [r2, #12]
 8003bea:	e732      	b.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x7e>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003bec:	68e2      	ldr	r2, [r4, #12]
 8003bee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003bf2:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	e74d      	b.n	8003a94 <HAL_ADCEx_InjectedConfigChannel+0xc0>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003bf8:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8003bfc:	2801      	cmp	r0, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_ADCEx_InjectedConfigChannel+0x238>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c00:	68e2      	ldr	r2, [r4, #12]
 8003c02:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c06:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c08:	2000      	movs	r0, #0
 8003c0a:	e743      	b.n	8003a94 <HAL_ADCEx_InjectedConfigChannel+0xc0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c0e:	f042 0220 	orr.w	r2, r2, #32
 8003c12:	65da      	str	r2, [r3, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8003c14:	e73e      	b.n	8003a94 <HAL_ADCEx_InjectedConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->CFGR2,
 8003c16:	681e      	ldr	r6, [r3, #0]
 8003c18:	6932      	ldr	r2, [r6, #16]
 8003c1a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003c1e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8003c20:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8003c22:	433c      	orrs	r4, r7
 8003c24:	4322      	orrs	r2, r4
 8003c26:	f042 0202 	orr.w	r2, r2, #2
 8003c2a:	6132      	str	r2, [r6, #16]
 8003c2c:	e73c      	b.n	8003aa8 <HAL_ADCEx_InjectedConfigChannel+0xd4>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c2e:	681c      	ldr	r4, [r3, #0]
 8003c30:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c32:	3414      	adds	r4, #20
 8003c34:	0e72      	lsrs	r2, r6, #25
 8003c36:	0092      	lsls	r2, r2, #2
 8003c38:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003c3c:	58a7      	ldr	r7, [r4, r2]
 8003c3e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003c42:	f04f 0c07 	mov.w	ip, #7
 8003c46:	fa0c f606 	lsl.w	r6, ip, r6
 8003c4a:	ea27 0606 	bic.w	r6, r7, r6
 8003c4e:	50a6      	str	r6, [r4, r2]
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c50:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c52:	6962      	ldr	r2, [r4, #20]
 8003c54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c58:	6162      	str	r2, [r4, #20]
}
 8003c5a:	e745      	b.n	8003ae8 <HAL_ADCEx_InjectedConfigChannel+0x114>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003c5c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8003c60:	e76f      	b.n	8003b42 <HAL_ADCEx_InjectedConfigChannel+0x16e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c62:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003c64:	6e34      	ldr	r4, [r6, #96]	; 0x60
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c66:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003c6a:	680a      	ldr	r2, [r1, #0]
 8003c6c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003c70:	bb7d      	cbnz	r5, 8003cd2 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8003c72:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c76:	4294      	cmp	r4, r2
 8003c78:	d033      	beq.n	8003ce2 <HAL_ADCEx_InjectedConfigChannel+0x30e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c7a:	681d      	ldr	r5, [r3, #0]
 8003c7c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003c7e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8003c80:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003c84:	680a      	ldr	r2, [r1, #0]
 8003c86:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003c8a:	bb7e      	cbnz	r6, 8003cec <HAL_ADCEx_InjectedConfigChannel+0x318>
 8003c8c:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c90:	4294      	cmp	r4, r2
 8003c92:	d033      	beq.n	8003cfc <HAL_ADCEx_InjectedConfigChannel+0x328>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c94:	681d      	ldr	r5, [r3, #0]
 8003c96:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003c98:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8003c9a:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003c9e:	680a      	ldr	r2, [r1, #0]
 8003ca0:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003ca4:	bb7e      	cbnz	r6, 8003d06 <HAL_ADCEx_InjectedConfigChannel+0x332>
 8003ca6:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003caa:	4294      	cmp	r4, r2
 8003cac:	d033      	beq.n	8003d16 <HAL_ADCEx_InjectedConfigChannel+0x342>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cae:	681d      	ldr	r5, [r3, #0]
 8003cb0:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003cb2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8003cb4:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003cb8:	680a      	ldr	r2, [r1, #0]
 8003cba:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003cbe:	bb7e      	cbnz	r6, 8003d20 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8003cc0:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cc4:	4294      	cmp	r4, r2
 8003cc6:	d134      	bne.n	8003d32 <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 8003cc8:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cce:	66ea      	str	r2, [r5, #108]	; 0x6c
}
 8003cd0:	e02f      	b.n	8003d32 <HAL_ADCEx_InjectedConfigChannel+0x35e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003cd6:	b112      	cbz	r2, 8003cde <HAL_ADCEx_InjectedConfigChannel+0x30a>
  return __builtin_clz(value);
 8003cd8:	fab2 f282 	clz	r2, r2
 8003cdc:	e7cb      	b.n	8003c76 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
    return 32U;
 8003cde:	2220      	movs	r2, #32
 8003ce0:	e7c9      	b.n	8003c76 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
  MODIFY_REG(*preg,
 8003ce2:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003ce4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ce8:	6632      	str	r2, [r6, #96]	; 0x60
}
 8003cea:	e7c6      	b.n	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003cf0:	b112      	cbz	r2, 8003cf8 <HAL_ADCEx_InjectedConfigChannel+0x324>
  return __builtin_clz(value);
 8003cf2:	fab2 f282 	clz	r2, r2
 8003cf6:	e7cb      	b.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    return 32U;
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	e7c9      	b.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
  MODIFY_REG(*preg,
 8003cfc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d02:	666a      	str	r2, [r5, #100]	; 0x64
}
 8003d04:	e7c6      	b.n	8003c94 <HAL_ADCEx_InjectedConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003d0a:	b112      	cbz	r2, 8003d12 <HAL_ADCEx_InjectedConfigChannel+0x33e>
  return __builtin_clz(value);
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	e7cb      	b.n	8003caa <HAL_ADCEx_InjectedConfigChannel+0x2d6>
    return 32U;
 8003d12:	2220      	movs	r2, #32
 8003d14:	e7c9      	b.n	8003caa <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  MODIFY_REG(*preg,
 8003d16:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003d18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d1c:	66aa      	str	r2, [r5, #104]	; 0x68
}
 8003d1e:	e7c6      	b.n	8003cae <HAL_ADCEx_InjectedConfigChannel+0x2da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003d24:	b112      	cbz	r2, 8003d2c <HAL_ADCEx_InjectedConfigChannel+0x358>
  return __builtin_clz(value);
 8003d26:	fab2 f282 	clz	r2, r2
 8003d2a:	e7cb      	b.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    return 32U;
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	e7c9      	b.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d30:	2000      	movs	r0, #0
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d32:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d34:	6894      	ldr	r4, [r2, #8]
 8003d36:	f014 0f01 	tst.w	r4, #1
 8003d3a:	d110      	bne.n	8003d5e <HAL_ADCEx_InjectedConfigChannel+0x38a>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003d3c:	680c      	ldr	r4, [r1, #0]
 8003d3e:	68ce      	ldr	r6, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003d40:	4d1c      	ldr	r5, [pc, #112]	; (8003db4 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8003d42:	42ae      	cmp	r6, r5
 8003d44:	d046      	beq.n	8003dd4 <HAL_ADCEx_InjectedConfigChannel+0x400>
    CLEAR_BIT(ADCx->DIFSEL,
 8003d46:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003d4a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003d4e:	ea25 0404 	bic.w	r4, r5, r4
 8003d52:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d56:	68cc      	ldr	r4, [r1, #12]
 8003d58:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8003d5a:	4294      	cmp	r4, r2
 8003d5c:	d042      	beq.n	8003de4 <HAL_ADCEx_InjectedConfigChannel+0x410>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003d5e:	680a      	ldr	r2, [r1, #0]
 8003d60:	4915      	ldr	r1, [pc, #84]	; (8003db8 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8003d62:	420a      	tst	r2, r1
 8003d64:	d01c      	beq.n	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003d6c:	f000 80fb 	beq.w	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x592>
 8003d70:	4c12      	ldr	r4, [pc, #72]	; (8003dbc <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8003d72:	42a1      	cmp	r1, r4
 8003d74:	f000 80f4 	beq.w	8003f60 <HAL_ADCEx_InjectedConfigChannel+0x58c>
 8003d78:	4c11      	ldr	r4, [pc, #68]	; (8003dc0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d7a:	68a4      	ldr	r4, [r4, #8]
 8003d7c:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003d80:	4e10      	ldr	r6, [pc, #64]	; (8003dc4 <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
 8003d82:	42b2      	cmp	r2, r6
 8003d84:	f000 80f1 	beq.w	8003f6a <HAL_ADCEx_InjectedConfigChannel+0x596>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d88:	4e0f      	ldr	r6, [pc, #60]	; (8003dc8 <HAL_ADCEx_InjectedConfigChannel+0x3f4>)
 8003d8a:	42b2      	cmp	r2, r6
 8003d8c:	f000 80ed 	beq.w	8003f6a <HAL_ADCEx_InjectedConfigChannel+0x596>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003d90:	4e0e      	ldr	r6, [pc, #56]	; (8003dcc <HAL_ADCEx_InjectedConfigChannel+0x3f8>)
 8003d92:	42b2      	cmp	r2, r6
 8003d94:	f000 811a 	beq.w	8003fcc <HAL_ADCEx_InjectedConfigChannel+0x5f8>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003d98:	4e0d      	ldr	r6, [pc, #52]	; (8003dd0 <HAL_ADCEx_InjectedConfigChannel+0x3fc>)
 8003d9a:	42b2      	cmp	r2, r6
 8003d9c:	f000 812d 	beq.w	8003ffa <HAL_ADCEx_InjectedConfigChannel+0x626>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003da6:	b003      	add	sp, #12
 8003da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003daa:	2000      	movs	r0, #0
 8003dac:	e7c1      	b.n	8003d32 <HAL_ADCEx_InjectedConfigChannel+0x35e>
 8003dae:	bf00      	nop
 8003db0:	03fff000 	.word	0x03fff000
 8003db4:	407f0000 	.word	0x407f0000
 8003db8:	80080000 	.word	0x80080000
 8003dbc:	50000100 	.word	0x50000100
 8003dc0:	50000700 	.word	0x50000700
 8003dc4:	c3210000 	.word	0xc3210000
 8003dc8:	90c00010 	.word	0x90c00010
 8003dcc:	c7520000 	.word	0xc7520000
 8003dd0:	cb840000 	.word	0xcb840000
    SET_BIT(ADCx->DIFSEL,
 8003dd4:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003dd8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003ddc:	432c      	orrs	r4, r5
 8003dde:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
 8003de2:	e7b8      	b.n	8003d56 <HAL_ADCEx_InjectedConfigChannel+0x382>
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de4:	681d      	ldr	r5, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003de6:	680a      	ldr	r2, [r1, #0]
 8003de8:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003dec:	2e00      	cmp	r6, #0
 8003dee:	d137      	bne.n	8003e60 <HAL_ADCEx_InjectedConfigChannel+0x48c>
 8003df0:	0e94      	lsrs	r4, r2, #26
 8003df2:	3401      	adds	r4, #1
 8003df4:	f004 041f 	and.w	r4, r4, #31
 8003df8:	2c09      	cmp	r4, #9
 8003dfa:	bf8c      	ite	hi
 8003dfc:	2400      	movhi	r4, #0
 8003dfe:	2401      	movls	r4, #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e00:	2c00      	cmp	r4, #0
 8003e02:	d065      	beq.n	8003ed0 <HAL_ADCEx_InjectedConfigChannel+0x4fc>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003e04:	2e00      	cmp	r6, #0
 8003e06:	d13a      	bne.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x4aa>
 8003e08:	0e94      	lsrs	r4, r2, #26
 8003e0a:	3401      	adds	r4, #1
 8003e0c:	06a4      	lsls	r4, r4, #26
 8003e0e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e12:	2e00      	cmp	r6, #0
 8003e14:	d13f      	bne.n	8003e96 <HAL_ADCEx_InjectedConfigChannel+0x4c2>
 8003e16:	0e97      	lsrs	r7, r2, #26
 8003e18:	3701      	adds	r7, #1
 8003e1a:	f007 0c1f 	and.w	ip, r7, #31
 8003e1e:	2701      	movs	r7, #1
 8003e20:	fa07 f70c 	lsl.w	r7, r7, ip
 8003e24:	433c      	orrs	r4, r7
 8003e26:	2e00      	cmp	r6, #0
 8003e28:	d144      	bne.n	8003eb4 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
 8003e2a:	0e92      	lsrs	r2, r2, #26
 8003e2c:	3201      	adds	r2, #1
 8003e2e:	f002 021f 	and.w	r2, r2, #31
 8003e32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e36:	0512      	lsls	r2, r2, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e38:	4322      	orrs	r2, r4
 8003e3a:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e3c:	3514      	adds	r5, #20
 8003e3e:	0e56      	lsrs	r6, r2, #25
 8003e40:	00b6      	lsls	r6, r6, #2
 8003e42:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8003e46:	59af      	ldr	r7, [r5, r6]
 8003e48:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003e4c:	f04f 0c07 	mov.w	ip, #7
 8003e50:	fa0c fc02 	lsl.w	ip, ip, r2
 8003e54:	ea27 070c 	bic.w	r7, r7, ip
 8003e58:	4094      	lsls	r4, r2
 8003e5a:	433c      	orrs	r4, r7
 8003e5c:	51ac      	str	r4, [r5, r6]
}
 8003e5e:	e77e      	b.n	8003d5e <HAL_ADCEx_InjectedConfigChannel+0x38a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003e64:	b14c      	cbz	r4, 8003e7a <HAL_ADCEx_InjectedConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003e66:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003e6a:	3401      	adds	r4, #1
 8003e6c:	f004 041f 	and.w	r4, r4, #31
 8003e70:	2c09      	cmp	r4, #9
 8003e72:	bf8c      	ite	hi
 8003e74:	2400      	movhi	r4, #0
 8003e76:	2401      	movls	r4, #1
 8003e78:	e7c2      	b.n	8003e00 <HAL_ADCEx_InjectedConfigChannel+0x42c>
    return 32U;
 8003e7a:	2420      	movs	r4, #32
 8003e7c:	e7f5      	b.n	8003e6a <HAL_ADCEx_InjectedConfigChannel+0x496>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003e82:	b134      	cbz	r4, 8003e92 <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 8003e84:	fab4 f484 	clz	r4, r4
 8003e88:	3401      	adds	r4, #1
 8003e8a:	06a4      	lsls	r4, r4, #26
 8003e8c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e90:	e7bf      	b.n	8003e12 <HAL_ADCEx_InjectedConfigChannel+0x43e>
    return 32U;
 8003e92:	2420      	movs	r4, #32
 8003e94:	e7f8      	b.n	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8003e9a:	b14f      	cbz	r7, 8003eb0 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003e9c:	fab7 f787 	clz	r7, r7
 8003ea0:	3701      	adds	r7, #1
 8003ea2:	f007 071f 	and.w	r7, r7, #31
 8003ea6:	f04f 0c01 	mov.w	ip, #1
 8003eaa:	fa0c f707 	lsl.w	r7, ip, r7
 8003eae:	e7b9      	b.n	8003e24 <HAL_ADCEx_InjectedConfigChannel+0x450>
    return 32U;
 8003eb0:	2720      	movs	r7, #32
 8003eb2:	e7f5      	b.n	8003ea0 <HAL_ADCEx_InjectedConfigChannel+0x4cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003eb8:	b142      	cbz	r2, 8003ecc <HAL_ADCEx_InjectedConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003eba:	fab2 f282 	clz	r2, r2
 8003ebe:	3201      	adds	r2, #1
 8003ec0:	f002 021f 	and.w	r2, r2, #31
 8003ec4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ec8:	0512      	lsls	r2, r2, #20
 8003eca:	e7b5      	b.n	8003e38 <HAL_ADCEx_InjectedConfigChannel+0x464>
    return 32U;
 8003ecc:	2220      	movs	r2, #32
 8003ece:	e7f6      	b.n	8003ebe <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8003ed0:	b9d6      	cbnz	r6, 8003f08 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003ed2:	0e94      	lsrs	r4, r2, #26
 8003ed4:	3401      	adds	r4, #1
 8003ed6:	06a4      	lsls	r4, r4, #26
 8003ed8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003edc:	bb06      	cbnz	r6, 8003f20 <HAL_ADCEx_InjectedConfigChannel+0x54c>
 8003ede:	0e97      	lsrs	r7, r2, #26
 8003ee0:	3701      	adds	r7, #1
 8003ee2:	f007 0c1f 	and.w	ip, r7, #31
 8003ee6:	2701      	movs	r7, #1
 8003ee8:	fa07 f70c 	lsl.w	r7, r7, ip
 8003eec:	433c      	orrs	r4, r7
 8003eee:	bb36      	cbnz	r6, 8003f3e <HAL_ADCEx_InjectedConfigChannel+0x56a>
 8003ef0:	0e92      	lsrs	r2, r2, #26
 8003ef2:	3201      	adds	r2, #1
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003efc:	3a1e      	subs	r2, #30
 8003efe:	0512      	lsls	r2, r2, #20
 8003f00:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f04:	4322      	orrs	r2, r4
 8003f06:	e798      	b.n	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x466>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003f0c:	b134      	cbz	r4, 8003f1c <HAL_ADCEx_InjectedConfigChannel+0x548>
  return __builtin_clz(value);
 8003f0e:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003f12:	3401      	adds	r4, #1
 8003f14:	06a4      	lsls	r4, r4, #26
 8003f16:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003f1a:	e7df      	b.n	8003edc <HAL_ADCEx_InjectedConfigChannel+0x508>
    return 32U;
 8003f1c:	2420      	movs	r4, #32
 8003f1e:	e7f8      	b.n	8003f12 <HAL_ADCEx_InjectedConfigChannel+0x53e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8003f24:	b14f      	cbz	r7, 8003f3a <HAL_ADCEx_InjectedConfigChannel+0x566>
  return __builtin_clz(value);
 8003f26:	fab7 f787 	clz	r7, r7
 8003f2a:	3701      	adds	r7, #1
 8003f2c:	f007 071f 	and.w	r7, r7, #31
 8003f30:	f04f 0c01 	mov.w	ip, #1
 8003f34:	fa0c f707 	lsl.w	r7, ip, r7
 8003f38:	e7d8      	b.n	8003eec <HAL_ADCEx_InjectedConfigChannel+0x518>
    return 32U;
 8003f3a:	2720      	movs	r7, #32
 8003f3c:	e7f5      	b.n	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x556>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003f42:	b15a      	cbz	r2, 8003f5c <HAL_ADCEx_InjectedConfigChannel+0x588>
  return __builtin_clz(value);
 8003f44:	fab2 f282 	clz	r2, r2
 8003f48:	3201      	adds	r2, #1
 8003f4a:	f002 021f 	and.w	r2, r2, #31
 8003f4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003f52:	3a1e      	subs	r2, #30
 8003f54:	0512      	lsls	r2, r2, #20
 8003f56:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003f5a:	e7d3      	b.n	8003f04 <HAL_ADCEx_InjectedConfigChannel+0x530>
    return 32U;
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	e7f3      	b.n	8003f48 <HAL_ADCEx_InjectedConfigChannel+0x574>
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f60:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8003f64:	e709      	b.n	8003d7a <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8003f66:	4c31      	ldr	r4, [pc, #196]	; (800402c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003f68:	e707      	b.n	8003d7a <HAL_ADCEx_InjectedConfigChannel+0x3a6>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f6a:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8003f6e:	f47f af0f 	bne.w	8003d90 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f72:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003f76:	d003      	beq.n	8003f80 <HAL_ADCEx_InjectedConfigChannel+0x5ac>
 8003f78:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_ADCEx_InjectedConfigChannel+0x65c>)
 8003f7a:	4291      	cmp	r1, r2
 8003f7c:	f47f af10 	bne.w	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f80:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003f84:	d019      	beq.n	8003fba <HAL_ADCEx_InjectedConfigChannel+0x5e6>
 8003f86:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003f88:	4291      	cmp	r1, r2
 8003f8a:	d014      	beq.n	8003fb6 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8003f8c:	492a      	ldr	r1, [pc, #168]	; (8004038 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003f8e:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f92:	688a      	ldr	r2, [r1, #8]
 8003f94:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f98:	4315      	orrs	r5, r2
 8003f9a:	608d      	str	r5, [r1, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003f9c:	4a27      	ldr	r2, [pc, #156]	; (800403c <HAL_ADCEx_InjectedConfigChannel+0x668>)
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	0992      	lsrs	r2, r2, #6
 8003fa2:	4927      	ldr	r1, [pc, #156]	; (8004040 <HAL_ADCEx_InjectedConfigChannel+0x66c>)
 8003fa4:	fba1 1202 	umull	r1, r2, r1, r2
 8003fa8:	0992      	lsrs	r2, r2, #6
 8003faa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003fae:	0092      	lsls	r2, r2, #2
 8003fb0:	3218      	adds	r2, #24
 8003fb2:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8003fb4:	e006      	b.n	8003fc4 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fb6:	491d      	ldr	r1, [pc, #116]	; (800402c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003fb8:	e7e9      	b.n	8003f8e <HAL_ADCEx_InjectedConfigChannel+0x5ba>
 8003fba:	491c      	ldr	r1, [pc, #112]	; (800402c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003fbc:	e7e7      	b.n	8003f8e <HAL_ADCEx_InjectedConfigChannel+0x5ba>
          wait_loop_index--;
 8003fbe:	9a01      	ldr	r2, [sp, #4]
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8003fc4:	9a01      	ldr	r2, [sp, #4]
 8003fc6:	2a00      	cmp	r2, #0
 8003fc8:	d1f9      	bne.n	8003fbe <HAL_ADCEx_InjectedConfigChannel+0x5ea>
 8003fca:	e6e9      	b.n	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fcc:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8003fd0:	f47f aee2 	bne.w	8003d98 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fd4:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003fda:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003fdc:	4291      	cmp	r1, r2
 8003fde:	d008      	beq.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x61e>
 8003fe0:	4915      	ldr	r1, [pc, #84]	; (8004038 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003fe2:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 8003fe6:	688a      	ldr	r2, [r1, #8]
 8003fe8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003fec:	4315      	orrs	r5, r2
 8003fee:	608d      	str	r5, [r1, #8]
}
 8003ff0:	e6d6      	b.n	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8003ff2:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003ff4:	e7f5      	b.n	8003fe2 <HAL_ADCEx_InjectedConfigChannel+0x60e>
 8003ff6:	490d      	ldr	r1, [pc, #52]	; (800402c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003ff8:	e7f3      	b.n	8003fe2 <HAL_ADCEx_InjectedConfigChannel+0x60e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ffa:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8003ffe:	f47f aecf 	bne.w	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8004004:	4291      	cmp	r1, r2
 8004006:	f43f aecb 	beq.w	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800400a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800400e:	d008      	beq.n	8004022 <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8004010:	4909      	ldr	r1, [pc, #36]	; (8004038 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8004012:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004016:	688a      	ldr	r2, [r1, #8]
 8004018:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800401c:	4315      	orrs	r5, r2
 800401e:	608d      	str	r5, [r1, #8]
}
 8004020:	e6be      	b.n	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8004022:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8004026:	e7f4      	b.n	8004012 <HAL_ADCEx_InjectedConfigChannel+0x63e>
  __HAL_LOCK(hadc);
 8004028:	2002      	movs	r0, #2
 800402a:	e6bc      	b.n	8003da6 <HAL_ADCEx_InjectedConfigChannel+0x3d2>
 800402c:	50000300 	.word	0x50000300
 8004030:	50000600 	.word	0x50000600
 8004034:	50000100 	.word	0x50000100
 8004038:	50000700 	.word	0x50000700
 800403c:	20000000 	.word	0x20000000
 8004040:	053e2d63 	.word	0x053e2d63

08004044 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8004048:	2a01      	cmp	r2, #1
 800404a:	f000 80d6 	beq.w	80041fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 800404e:	b410      	push	{r4}
 8004050:	b09d      	sub	sp, #116	; 0x74
 8004052:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004054:	2201      	movs	r2, #1
 8004056:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800405a:	2200      	movs	r2, #0
 800405c:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800405e:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004060:	6800      	ldr	r0, [r0, #0]
 8004062:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8004066:	d047      	beq.n	80040f8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8004068:	4a65      	ldr	r2, [pc, #404]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800406a:	4290      	cmp	r0, r2
 800406c:	d047      	beq.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800406e:	2200      	movs	r2, #0
 8004070:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8004072:	9a01      	ldr	r2, [sp, #4]
 8004074:	2a00      	cmp	r2, #0
 8004076:	d046      	beq.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	f012 0204 	ands.w	r2, r2, #4
 800407e:	d000      	beq.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004080:	2201      	movs	r2, #1
 8004082:	6884      	ldr	r4, [r0, #8]
 8004084:	f014 0f04 	tst.w	r4, #4
 8004088:	f040 80a7 	bne.w	80041da <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 800408c:	2a00      	cmp	r2, #0
 800408e:	f040 80a4 	bne.w	80041da <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004092:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8004096:	d042      	beq.n	800411e <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8004098:	4a5a      	ldr	r2, [pc, #360]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800409a:	4290      	cmp	r0, r2
 800409c:	d03c      	beq.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800409e:	4a5a      	ldr	r2, [pc, #360]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040a0:	6808      	ldr	r0, [r1, #0]
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d05c      	beq.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040a6:	6890      	ldr	r0, [r2, #8]
 80040a8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80040ac:	684c      	ldr	r4, [r1, #4]
 80040ae:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80040b2:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 80040b6:	4320      	orrs	r0, r4
 80040b8:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80040c0:	d02f      	beq.n	8004122 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 80040c2:	4c50      	ldr	r4, [pc, #320]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040c4:	42a0      	cmp	r0, r4
 80040c6:	d02c      	beq.n	8004122 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040c8:	484d      	ldr	r0, [pc, #308]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80040ca:	6884      	ldr	r4, [r0, #8]
 80040cc:	f014 0401 	ands.w	r4, r4, #1
 80040d0:	d000      	beq.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80040d2:	2401      	movs	r4, #1
 80040d4:	484d      	ldr	r0, [pc, #308]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80040d6:	6880      	ldr	r0, [r0, #8]
 80040d8:	f010 0001 	ands.w	r0, r0, #1
 80040dc:	d000      	beq.n	80040e0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80040de:	2001      	movs	r0, #1
 80040e0:	4320      	orrs	r0, r4
 80040e2:	4c4b      	ldr	r4, [pc, #300]	; (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80040e4:	68a4      	ldr	r4, [r4, #8]
 80040e6:	f014 0401 	ands.w	r4, r4, #1
 80040ea:	d000      	beq.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80040ec:	2401      	movs	r4, #1
 80040ee:	4320      	orrs	r0, r4
 80040f0:	bf0c      	ite	eq
 80040f2:	2001      	moveq	r0, #1
 80040f4:	2000      	movne	r0, #0
 80040f6:	e025      	b.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040f8:	4a42      	ldr	r2, [pc, #264]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040fa:	9201      	str	r2, [sp, #4]
 80040fc:	e7b9      	b.n	8004072 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80040fe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	e7b5      	b.n	8004072 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004108:	f042 0220 	orr.w	r2, r2, #32
 800410c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8004114:	2001      	movs	r0, #1
 8004116:	e068      	b.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004118:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800411c:	e7c0      	b.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 800411e:	4a3d      	ldr	r2, [pc, #244]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004120:	e7be      	b.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8004122:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004126:	6880      	ldr	r0, [r0, #8]
 8004128:	f010 0001 	ands.w	r0, r0, #1
 800412c:	d000      	beq.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 800412e:	2001      	movs	r0, #1
 8004130:	4c34      	ldr	r4, [pc, #208]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004132:	68a4      	ldr	r4, [r4, #8]
 8004134:	f014 0401 	ands.w	r4, r4, #1
 8004138:	d000      	beq.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 800413a:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800413c:	4320      	orrs	r0, r4
 800413e:	bf0c      	ite	eq
 8004140:	2001      	moveq	r0, #1
 8004142:	2000      	movne	r0, #0
 8004144:	2800      	cmp	r0, #0
 8004146:	d054      	beq.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004148:	6890      	ldr	r0, [r2, #8]
 800414a:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 800414e:	f020 000f 	bic.w	r0, r0, #15
 8004152:	680c      	ldr	r4, [r1, #0]
 8004154:	6889      	ldr	r1, [r1, #8]
 8004156:	4321      	orrs	r1, r4
 8004158:	4308      	orrs	r0, r1
 800415a:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800415c:	2000      	movs	r0, #0
 800415e:	e041      	b.n	80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004160:	6891      	ldr	r1, [r2, #8]
 8004162:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004166:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004168:	6819      	ldr	r1, [r3, #0]
 800416a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800416e:	d01a      	beq.n	80041a6 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8004170:	4824      	ldr	r0, [pc, #144]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004172:	4281      	cmp	r1, r0
 8004174:	d017      	beq.n	80041a6 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8004176:	4922      	ldr	r1, [pc, #136]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004178:	6888      	ldr	r0, [r1, #8]
 800417a:	f010 0001 	ands.w	r0, r0, #1
 800417e:	d000      	beq.n	8004182 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004180:	2001      	movs	r0, #1
 8004182:	4922      	ldr	r1, [pc, #136]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8004184:	6889      	ldr	r1, [r1, #8]
 8004186:	f011 0101 	ands.w	r1, r1, #1
 800418a:	d000      	beq.n	800418e <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 800418c:	2101      	movs	r1, #1
 800418e:	4301      	orrs	r1, r0
 8004190:	481f      	ldr	r0, [pc, #124]	; (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004192:	6880      	ldr	r0, [r0, #8]
 8004194:	f010 0001 	ands.w	r0, r0, #1
 8004198:	d000      	beq.n	800419c <HAL_ADCEx_MultiModeConfigChannel+0x158>
 800419a:	2001      	movs	r0, #1
 800419c:	4301      	orrs	r1, r0
 800419e:	bf0c      	ite	eq
 80041a0:	2101      	moveq	r1, #1
 80041a2:	2100      	movne	r1, #0
 80041a4:	e010      	b.n	80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 80041a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80041aa:	6889      	ldr	r1, [r1, #8]
 80041ac:	f011 0101 	ands.w	r1, r1, #1
 80041b0:	d000      	beq.n	80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80041b2:	2101      	movs	r1, #1
 80041b4:	4813      	ldr	r0, [pc, #76]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80041b6:	6880      	ldr	r0, [r0, #8]
 80041b8:	f010 0001 	ands.w	r0, r0, #1
 80041bc:	d000      	beq.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 80041be:	2001      	movs	r0, #1
 80041c0:	4301      	orrs	r1, r0
 80041c2:	bf0c      	ite	eq
 80041c4:	2101      	moveq	r1, #1
 80041c6:	2100      	movne	r1, #0
 80041c8:	b1a9      	cbz	r1, 80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ca:	6891      	ldr	r1, [r2, #8]
 80041cc:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80041d0:	f021 010f 	bic.w	r1, r1, #15
 80041d4:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d6:	2000      	movs	r0, #0
 80041d8:	e004      	b.n	80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041dc:	f042 0220 	orr.w	r2, r2, #32
 80041e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80041e2:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80041ea:	b01d      	add	sp, #116	; 0x74
 80041ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041f0:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f2:	2000      	movs	r0, #0
 80041f4:	e7f6      	b.n	80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 80041f6:	2000      	movs	r0, #0
 80041f8:	e7f4      	b.n	80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 80041fa:	2002      	movs	r0, #2
}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	50000400 	.word	0x50000400
 8004204:	50000100 	.word	0x50000100
 8004208:	50000700 	.word	0x50000700
 800420c:	50000500 	.word	0x50000500
 8004210:	50000600 	.word	0x50000600
 8004214:	50000300 	.word	0x50000300

08004218 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800421a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004224:	0200      	lsls	r0, r0, #8
 8004226:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800422c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004234:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004236:	4770      	bx	lr
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_NVIC_SetPriority+0x68>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004246:	f1c3 0c07 	rsb	ip, r3, #7
 800424a:	f1bc 0f04 	cmp.w	ip, #4
 800424e:	bf28      	it	cs
 8004250:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004254:	f103 0e04 	add.w	lr, r3, #4
 8004258:	f1be 0f06 	cmp.w	lr, #6
 800425c:	d918      	bls.n	8004290 <HAL_NVIC_SetPriority+0x54>
 800425e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004260:	f04f 3eff 	mov.w	lr, #4294967295
 8004264:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004268:	ea21 010c 	bic.w	r1, r1, ip
 800426c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426e:	fa0e f303 	lsl.w	r3, lr, r3
 8004272:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004276:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004278:	2800      	cmp	r0, #0
 800427a:	db0b      	blt.n	8004294 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	0109      	lsls	r1, r1, #4
 800427e:	b2c9      	uxtb	r1, r1
 8004280:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004284:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004288:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800428c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004290:	2300      	movs	r3, #0
 8004292:	e7e5      	b.n	8004260 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004294:	f000 000f 	and.w	r0, r0, #15
 8004298:	0109      	lsls	r1, r1, #4
 800429a:	b2c9      	uxtb	r1, r1
 800429c:	4b02      	ldr	r3, [pc, #8]	; (80042a8 <HAL_NVIC_SetPriority+0x6c>)
 800429e:	5419      	strb	r1, [r3, r0]
 80042a0:	e7f4      	b.n	800428c <HAL_NVIC_SetPriority+0x50>
 80042a2:	bf00      	nop
 80042a4:	e000ed00 	.word	0xe000ed00
 80042a8:	e000ed14 	.word	0xe000ed14

080042ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80042ac:	2800      	cmp	r0, #0
 80042ae:	db07      	blt.n	80042c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b0:	f000 021f 	and.w	r2, r0, #31
 80042b4:	0940      	lsrs	r0, r0, #5
 80042b6:	2301      	movs	r3, #1
 80042b8:	4093      	lsls	r3, r2
 80042ba:	4a02      	ldr	r2, [pc, #8]	; (80042c4 <HAL_NVIC_EnableIRQ+0x18>)
 80042bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000e100 	.word	0xe000e100

080042c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c8:	3801      	subs	r0, #1
 80042ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80042ce:	d20b      	bcs.n	80042e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <HAL_SYSTICK_Config+0x24>)
 80042d8:	21f0      	movs	r1, #240	; 0xf0
 80042da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042de:	2000      	movs	r0, #0
 80042e0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042e2:	2207      	movs	r2, #7
 80042e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80042e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80042f0:	b170      	cbz	r0, 8004310 <HAL_DAC_Init+0x20>
{
 80042f2:	b510      	push	{r4, lr}
 80042f4:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042f6:	7903      	ldrb	r3, [r0, #4]
 80042f8:	b133      	cbz	r3, 8004308 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042fe:	2000      	movs	r0, #0
 8004300:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004302:	2301      	movs	r3, #1
 8004304:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8004306:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004308:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800430a:	f7fe f9cf 	bl	80026ac <HAL_DAC_MspInit>
 800430e:	e7f4      	b.n	80042fa <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8004310:	2001      	movs	r0, #1
}
 8004312:	4770      	bx	lr

08004314 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004314:	7943      	ldrb	r3, [r0, #5]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d02f      	beq.n	800437a <HAL_DAC_Start+0x66>
{
 800431a:	b570      	push	{r4, r5, r6, lr}
 800431c:	4604      	mov	r4, r0
 800431e:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8004320:	2001      	movs	r0, #1
 8004322:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	f001 0610 	and.w	r6, r1, #16
 8004330:	fa00 f106 	lsl.w	r1, r0, r6
 8004334:	430b      	orrs	r3, r1
 8004336:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004338:	f7fe fbd4 	bl	8002ae4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800433c:	b97d      	cbnz	r5, 800435e <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004346:	2b02      	cmp	r3, #2
 8004348:	d004      	beq.n	8004354 <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800434a:	2301      	movs	r3, #1
 800434c:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800434e:	2000      	movs	r0, #0
 8004350:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8004352:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004354:	6853      	ldr	r3, [r2, #4]
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6053      	str	r3, [r2, #4]
 800435c:	e7f5      	b.n	800434a <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	680a      	ldr	r2, [r1, #0]
 8004362:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8004366:	2302      	movs	r3, #2
 8004368:	fa03 f606 	lsl.w	r6, r3, r6
 800436c:	42b2      	cmp	r2, r6
 800436e:	d1ec      	bne.n	800434a <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004370:	684b      	ldr	r3, [r1, #4]
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	e7e7      	b.n	800434a <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 800437a:	2002      	movs	r0, #2
}
 800437c:	4770      	bx	lr

0800437e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800437e:	b410      	push	{r4}
 8004380:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8004382:	2400      	movs	r4, #0
 8004384:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004386:	6800      	ldr	r0, [r0, #0]
 8004388:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800438a:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 800438c:	b951      	cbnz	r1, 80043a4 <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800438e:	9901      	ldr	r1, [sp, #4]
 8004390:	440a      	add	r2, r1
 8004392:	3208      	adds	r2, #8
 8004394:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004396:	9a01      	ldr	r2, [sp, #4]
 8004398:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 800439a:	2000      	movs	r0, #0
 800439c:	b003      	add	sp, #12
 800439e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a2:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80043a4:	9901      	ldr	r1, [sp, #4]
 80043a6:	440a      	add	r2, r1
 80043a8:	3214      	adds	r2, #20
 80043aa:	9201      	str	r2, [sp, #4]
 80043ac:	e7f3      	b.n	8004396 <HAL_DAC_SetValue+0x18>
	...

080043b0 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043b0:	7943      	ldrb	r3, [r0, #5]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f000 80f4 	beq.w	80045a0 <HAL_DAC_ConfigChannel+0x1f0>
{
 80043b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043bc:	4604      	mov	r4, r0
 80043be:	460e      	mov	r6, r1
 80043c0:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 80043c2:	2301      	movs	r3, #1
 80043c4:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043c6:	2302      	movs	r3, #2
 80043c8:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80043ca:	688b      	ldr	r3, [r1, #8]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d017      	beq.n	8004400 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043d0:	69f3      	ldr	r3, [r6, #28]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d05e      	beq.n	8004494 <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80043da:	f005 0510 	and.w	r5, r5, #16
 80043de:	2307      	movs	r3, #7
 80043e0:	40ab      	lsls	r3, r5
 80043e2:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80043e6:	69b3      	ldr	r3, [r6, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d060      	beq.n	80044ae <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	f000 80bd 	beq.w	800456c <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80043f2:	6973      	ldr	r3, [r6, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f040 80bc 	bne.w	8004572 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80043fa:	f04f 0801 	mov.w	r8, #1
 80043fe:	e058      	b.n	80044b2 <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8004400:	f7fe fb6a 	bl	8002ad8 <HAL_GetTick>
 8004404:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8004406:	b17d      	cbz	r5, 8004428 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	da3a      	bge.n	8004486 <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004410:	f7fe fb62 	bl	8002ad8 <HAL_GetTick>
 8004414:	1bc0      	subs	r0, r0, r7
 8004416:	2801      	cmp	r0, #1
 8004418:	d9f6      	bls.n	8004408 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800441a:	6923      	ldr	r3, [r4, #16]
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004422:	2003      	movs	r0, #3
 8004424:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8004426:	e09f      	b.n	8004568 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004430:	d00b      	beq.n	800444a <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004432:	f7fe fb51 	bl	8002ad8 <HAL_GetTick>
 8004436:	1bc0      	subs	r0, r0, r7
 8004438:	2801      	cmp	r0, #1
 800443a:	d9f5      	bls.n	8004428 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	f043 0308 	orr.w	r3, r3, #8
 8004442:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004444:	2003      	movs	r0, #3
 8004446:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8004448:	e08e      	b.n	8004568 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 800444a:	2001      	movs	r0, #1
 800444c:	f7fe fb4a 	bl	8002ae4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800445a:	f005 0110 	and.w	r1, r5, #16
 800445e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004462:	408b      	lsls	r3, r1
 8004464:	ea22 0203 	bic.w	r2, r2, r3
 8004468:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800446a:	408b      	lsls	r3, r1
 800446c:	431a      	orrs	r2, r3
 800446e:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004474:	22ff      	movs	r2, #255	; 0xff
 8004476:	408a      	lsls	r2, r1
 8004478:	ea23 0302 	bic.w	r3, r3, r2
 800447c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800447e:	408a      	lsls	r2, r1
 8004480:	4313      	orrs	r3, r2
 8004482:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004484:	e7a4      	b.n	80043d0 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8004486:	2001      	movs	r0, #1
 8004488:	f7fe fb2c 	bl	8002ae4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
 8004492:	e7e0      	b.n	8004456 <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 8004494:	6821      	ldr	r1, [r4, #0]
 8004496:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004498:	f005 0010 	and.w	r0, r5, #16
 800449c:	231f      	movs	r3, #31
 800449e:	4083      	lsls	r3, r0
 80044a0:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80044a4:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044a6:	4083      	lsls	r3, r0
 80044a8:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80044aa:	638b      	str	r3, [r1, #56]	; 0x38
 80044ac:	e793      	b.n	80043d6 <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 80044ae:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80044b2:	68b3      	ldr	r3, [r6, #8]
 80044b4:	6972      	ldr	r2, [r6, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80044bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c0:	40aa      	lsls	r2, r5
 80044c2:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80044c6:	7932      	ldrb	r2, [r6, #4]
 80044c8:	2a01      	cmp	r2, #1
 80044ca:	d055      	beq.n	8004578 <HAL_DAC_ConfigChannel+0x1c8>
 80044cc:	f04f 0800 	mov.w	r8, #0
 80044d0:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80044d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d8:	40aa      	lsls	r2, r5
 80044da:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80044de:	7972      	ldrb	r2, [r6, #5]
 80044e0:	2a01      	cmp	r2, #1
 80044e2:	d04c      	beq.n	800457e <HAL_DAC_ConfigChannel+0x1ce>
 80044e4:	f04f 0800 	mov.w	r8, #0
 80044e8:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80044ec:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80044f0:	6833      	ldr	r3, [r6, #0]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d046      	beq.n	8004584 <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80044f6:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044f8:	fa08 f805 	lsl.w	r8, r8, r5
 80044fc:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004504:	6821      	ldr	r1, [r4, #0]
 8004506:	680b      	ldr	r3, [r1, #0]
 8004508:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800450c:	40aa      	lsls	r2, r5
 800450e:	ea23 0302 	bic.w	r3, r3, r2
 8004512:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004518:	f640 72fe 	movw	r2, #4094	; 0xffe
 800451c:	40aa      	lsls	r2, r5
 800451e:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004522:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004524:	40ab      	lsls	r3, r5
 8004526:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004528:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800452a:	6821      	ldr	r1, [r4, #0]
 800452c:	680b      	ldr	r3, [r1, #0]
 800452e:	22c0      	movs	r2, #192	; 0xc0
 8004530:	40aa      	lsls	r2, r5
 8004532:	ea23 0302 	bic.w	r3, r3, r2
 8004536:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004538:	68f2      	ldr	r2, [r6, #12]
 800453a:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800453e:	6932      	ldr	r2, [r6, #16]
 8004540:	0892      	lsrs	r2, r2, #2
 8004542:	0212      	lsls	r2, r2, #8
 8004544:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004548:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800454a:	6820      	ldr	r0, [r4, #0]
 800454c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800454e:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004552:	40a9      	lsls	r1, r5
 8004554:	ea23 0301 	bic.w	r3, r3, r1
 8004558:	fa02 f505 	lsl.w	r5, r2, r5
 800455c:	431d      	orrs	r5, r3
 800455e:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004560:	2301      	movs	r3, #1
 8004562:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004564:	2000      	movs	r0, #0
 8004566:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8004568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 800456c:	f04f 0801 	mov.w	r8, #1
 8004570:	e79f      	b.n	80044b2 <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 8004572:	f04f 0800 	mov.w	r8, #0
 8004576:	e79c      	b.n	80044b2 <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004578:	f44f 7880 	mov.w	r8, #256	; 0x100
 800457c:	e7a8      	b.n	80044d0 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800457e:	f44f 7800 	mov.w	r8, #512	; 0x200
 8004582:	e7b1      	b.n	80044e8 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004584:	f000 ff00 	bl	8005388 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_DAC_ConfigChannel+0x1f4>)
 800458a:	4298      	cmp	r0, r3
 800458c:	d902      	bls.n	8004594 <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800458e:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8004592:	e7b1      	b.n	80044f8 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <HAL_DAC_ConfigChannel+0x1f8>)
 8004596:	4298      	cmp	r0, r3
 8004598:	d9ae      	bls.n	80044f8 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800459a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800459e:	e7ab      	b.n	80044f8 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 80045a0:	2002      	movs	r0, #2
}
 80045a2:	4770      	bx	lr
 80045a4:	09896800 	.word	0x09896800
 80045a8:	04c4b400 	.word	0x04c4b400

080045ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ac:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ae:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80045b0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80045b2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80045b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80045b6:	b114      	cbz	r4, 80045be <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80045ba:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80045bc:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80045c0:	f004 0c1f 	and.w	ip, r4, #31
 80045c4:	2401      	movs	r4, #1
 80045c6:	fa04 f40c 	lsl.w	r4, r4, ip
 80045ca:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80045cc:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045ce:	6804      	ldr	r4, [r0, #0]
 80045d0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d2:	6883      	ldr	r3, [r0, #8]
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d005      	beq.n	80045e4 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80045d8:	6803      	ldr	r3, [r0, #0]
 80045da:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80045dc:	6803      	ldr	r3, [r0, #0]
 80045de:	60da      	str	r2, [r3, #12]
  }
}
 80045e0:	bc30      	pop	{r4, r5}
 80045e2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80045e4:	6803      	ldr	r3, [r0, #0]
 80045e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80045e8:	6803      	ldr	r3, [r0, #0]
 80045ea:	60d9      	str	r1, [r3, #12]
 80045ec:	e7f8      	b.n	80045e0 <DMA_SetConfig+0x34>
	...

080045f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045f0:	6803      	ldr	r3, [r0, #0]
 80045f2:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d813      	bhi.n	8004620 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80045f8:	490b      	ldr	r1, [pc, #44]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	3b08      	subs	r3, #8
 80045fe:	4a0b      	ldr	r2, [pc, #44]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004606:	f022 0203 	bic.w	r2, r2, #3
 800460a:	440a      	add	r2, r1
 800460c:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8004610:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004612:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8004616:	2201      	movs	r2, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800461e:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004620:	4904      	ldr	r1, [pc, #16]	; (8004634 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8004622:	e7ea      	b.n	80045fa <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8004624:	40020407 	.word	0x40020407
 8004628:	40020800 	.word	0x40020800
 800462c:	cccccccd 	.word	0xcccccccd
 8004630:	40020880 	.word	0x40020880
 8004634:	40020820 	.word	0x40020820

08004638 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004638:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800463a:	4a07      	ldr	r2, [pc, #28]	; (8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800463c:	441a      	add	r2, r3
 800463e:	0092      	lsls	r2, r2, #2
 8004640:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004642:	4a06      	ldr	r2, [pc, #24]	; (800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004644:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004646:	3b01      	subs	r3, #1
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2201      	movs	r2, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	1000823f 	.word	0x1000823f
 800465c:	40020940 	.word	0x40020940

08004660 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004660:	2800      	cmp	r0, #0
 8004662:	d05b      	beq.n	800471c <HAL_DMA_Init+0xbc>
{
 8004664:	b510      	push	{r4, lr}
 8004666:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004668:	6801      	ldr	r1, [r0, #0]
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_DMA_Init+0xc0>)
 800466c:	4299      	cmp	r1, r3
 800466e:	d83d      	bhi.n	80046ec <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004670:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <HAL_DMA_Init+0xc4>)
 8004672:	440b      	add	r3, r1
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_DMA_Init+0xc8>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_DMA_Init+0xcc>)
 8004682:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004684:	2302      	movs	r3, #2
 8004686:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800468a:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800468c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004690:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8004694:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8004698:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469a:	6920      	ldr	r0, [r4, #16]
 800469c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800469e:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	69a0      	ldr	r0, [r4, #24]
 80046a4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80046a6:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80046aa:	6a20      	ldr	r0, [r4, #32]
 80046ac:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80046ae:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80046b0:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7ff ff9c 	bl	80045f0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046b8:	68a3      	ldr	r3, [r4, #8]
 80046ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046be:	d020      	beq.n	8004702 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046c2:	7922      	ldrb	r2, [r4, #4]
 80046c4:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80046c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046ca:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d919      	bls.n	8004708 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046d8:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046da:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046dc:	2000      	movs	r0, #0
 80046de:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80046e6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80046ea:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_DMA_Init+0xd0>)
 80046ee:	440b      	add	r3, r1
 80046f0:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <HAL_DMA_Init+0xc8>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_DMA_Init+0xd4>)
 80046fe:	6403      	str	r3, [r0, #64]	; 0x40
 8004700:	e7c0      	b.n	8004684 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004702:	2300      	movs	r3, #0
 8004704:	6063      	str	r3, [r4, #4]
 8004706:	e7db      	b.n	80046c0 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004708:	4620      	mov	r0, r4
 800470a:	f7ff ff95 	bl	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800470e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004716:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	e7df      	b.n	80046dc <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 800471c:	2001      	movs	r0, #1
}
 800471e:	4770      	bx	lr
 8004720:	40020407 	.word	0x40020407
 8004724:	bffdfff8 	.word	0xbffdfff8
 8004728:	cccccccd 	.word	0xcccccccd
 800472c:	40020000 	.word	0x40020000
 8004730:	bffdfbf8 	.word	0xbffdfbf8
 8004734:	40020400 	.word	0x40020400

08004738 <HAL_DMA_Start_IT>:
{
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800473c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004740:	2801      	cmp	r0, #1
 8004742:	d041      	beq.n	80047c8 <HAL_DMA_Start_IT+0x90>
 8004744:	2001      	movs	r0, #1
 8004746:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800474a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800474e:	b2c0      	uxtb	r0, r0
 8004750:	2801      	cmp	r0, #1
 8004752:	d004      	beq.n	800475e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8004754:	2300      	movs	r3, #0
 8004756:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800475a:	2002      	movs	r0, #2
}
 800475c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800475e:	2002      	movs	r0, #2
 8004760:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004764:	2000      	movs	r0, #0
 8004766:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004768:	6825      	ldr	r5, [r4, #0]
 800476a:	6828      	ldr	r0, [r5, #0]
 800476c:	f020 0001 	bic.w	r0, r0, #1
 8004770:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004772:	4620      	mov	r0, r4
 8004774:	f7ff ff1a 	bl	80045ac <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800477a:	b1d3      	cbz	r3, 80047b2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	f043 030e 	orr.w	r3, r3, #14
 8004784:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004786:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800478e:	d003      	beq.n	8004798 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004796:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004798:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800479a:	b11b      	cbz	r3, 80047a4 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2000      	movs	r0, #0
 80047b0:	e7d4      	b.n	800475c <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	f043 030a 	orr.w	r3, r3, #10
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e7de      	b.n	8004786 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80047c8:	2002      	movs	r0, #2
 80047ca:	e7c7      	b.n	800475c <HAL_DMA_Start_IT+0x24>

080047cc <HAL_DMA_IRQHandler>:
{
 80047cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80047d0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80047d2:	6804      	ldr	r4, [r0, #0]
 80047d4:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80047d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2204      	movs	r2, #4
 80047de:	409a      	lsls	r2, r3
 80047e0:	420a      	tst	r2, r1
 80047e2:	d015      	beq.n	8004810 <HAL_DMA_IRQHandler+0x44>
 80047e4:	f015 0f04 	tst.w	r5, #4
 80047e8:	d012      	beq.n	8004810 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	f013 0f20 	tst.w	r3, #32
 80047f0:	d103      	bne.n	80047fa <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80047fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004802:	2304      	movs	r3, #4
 8004804:	4093      	lsls	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004808:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800480a:	b103      	cbz	r3, 800480e <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800480c:	4798      	blx	r3
}
 800480e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004810:	2202      	movs	r2, #2
 8004812:	409a      	lsls	r2, r3
 8004814:	420a      	tst	r2, r1
 8004816:	d01c      	beq.n	8004852 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8004818:	f015 0f02 	tst.w	r5, #2
 800481c:	d019      	beq.n	8004852 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	f013 0f20 	tst.w	r3, #32
 8004824:	d106      	bne.n	8004834 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	f023 030a 	bic.w	r3, r3, #10
 800482c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800482e:	2301      	movs	r3, #1
 8004830:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004834:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004836:	f003 021f 	and.w	r2, r3, #31
 800483a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800483c:	2302      	movs	r3, #2
 800483e:	4093      	lsls	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004842:	2300      	movs	r3, #0
 8004844:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8004848:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0df      	beq.n	800480e <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800484e:	4798      	blx	r3
 8004850:	e7dd      	b.n	800480e <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004852:	2208      	movs	r2, #8
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	420b      	tst	r3, r1
 800485a:	d0d8      	beq.n	800480e <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800485c:	f015 0f08 	tst.w	r5, #8
 8004860:	d0d5      	beq.n	800480e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	f023 030e 	bic.w	r3, r3, #14
 8004868:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800486a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004872:	2201      	movs	r2, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800487a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800487c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004880:	2300      	movs	r3, #0
 8004882:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004886:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0c0      	beq.n	800480e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800488c:	4798      	blx	r3
  return;
 800488e:	e7be      	b.n	800480e <HAL_DMA_IRQHandler+0x42>

08004890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004894:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004896:	e062      	b.n	800495e <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004898:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800489a:	005e      	lsls	r6, r3, #1
 800489c:	2403      	movs	r4, #3
 800489e:	40b4      	lsls	r4, r6
 80048a0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a4:	68cc      	ldr	r4, [r1, #12]
 80048a6:	40b4      	lsls	r4, r6
 80048a8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80048aa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ac:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ae:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048b2:	684c      	ldr	r4, [r1, #4]
 80048b4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80048b8:	409c      	lsls	r4, r3
 80048ba:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80048be:	6044      	str	r4, [r0, #4]
 80048c0:	e05e      	b.n	8004980 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048c2:	08dd      	lsrs	r5, r3, #3
 80048c4:	3508      	adds	r5, #8
 80048c6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048ca:	f003 0407 	and.w	r4, r3, #7
 80048ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80048d2:	240f      	movs	r4, #15
 80048d4:	fa04 f40c 	lsl.w	r4, r4, ip
 80048d8:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048dc:	690c      	ldr	r4, [r1, #16]
 80048de:	fa04 f40c 	lsl.w	r4, r4, ip
 80048e2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80048e6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80048ea:	e060      	b.n	80049ae <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048ec:	2405      	movs	r4, #5
 80048ee:	e000      	b.n	80048f2 <HAL_GPIO_Init+0x62>
 80048f0:	2400      	movs	r4, #0
 80048f2:	fa04 f40e 	lsl.w	r4, r4, lr
 80048f6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f8:	f10c 0c02 	add.w	ip, ip, #2
 80048fc:	4d55      	ldr	r5, [pc, #340]	; (8004a54 <HAL_GPIO_Init+0x1c4>)
 80048fe:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004902:	4c55      	ldr	r4, [pc, #340]	; (8004a58 <HAL_GPIO_Init+0x1c8>)
 8004904:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004906:	43d4      	mvns	r4, r2
 8004908:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800490c:	684f      	ldr	r7, [r1, #4]
 800490e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004912:	d001      	beq.n	8004918 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004914:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004918:	4d4f      	ldr	r5, [pc, #316]	; (8004a58 <HAL_GPIO_Init+0x1c8>)
 800491a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800491c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800491e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004922:	684f      	ldr	r7, [r1, #4]
 8004924:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004928:	d001      	beq.n	800492e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800492a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800492e:	4d4a      	ldr	r5, [pc, #296]	; (8004a58 <HAL_GPIO_Init+0x1c8>)
 8004930:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8004932:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004934:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004938:	684f      	ldr	r7, [r1, #4]
 800493a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800493e:	d001      	beq.n	8004944 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8004940:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8004944:	4d44      	ldr	r5, [pc, #272]	; (8004a58 <HAL_GPIO_Init+0x1c8>)
 8004946:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004948:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800494a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800494c:	684e      	ldr	r6, [r1, #4]
 800494e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8004952:	d001      	beq.n	8004958 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8004954:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8004958:	4a3f      	ldr	r2, [pc, #252]	; (8004a58 <HAL_GPIO_Init+0x1c8>)
 800495a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800495c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800495e:	680a      	ldr	r2, [r1, #0]
 8004960:	fa32 f403 	lsrs.w	r4, r2, r3
 8004964:	d074      	beq.n	8004a50 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004966:	f04f 0c01 	mov.w	ip, #1
 800496a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800496e:	ea1c 0202 	ands.w	r2, ip, r2
 8004972:	d0f3      	beq.n	800495c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004974:	684c      	ldr	r4, [r1, #4]
 8004976:	f004 0403 	and.w	r4, r4, #3
 800497a:	3c01      	subs	r4, #1
 800497c:	2c01      	cmp	r4, #1
 800497e:	d98b      	bls.n	8004898 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004980:	684c      	ldr	r4, [r1, #4]
 8004982:	f004 0403 	and.w	r4, r4, #3
 8004986:	2c03      	cmp	r4, #3
 8004988:	d00c      	beq.n	80049a4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800498a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800498c:	005d      	lsls	r5, r3, #1
 800498e:	f04f 0c03 	mov.w	ip, #3
 8004992:	fa0c fc05 	lsl.w	ip, ip, r5
 8004996:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800499a:	688c      	ldr	r4, [r1, #8]
 800499c:	40ac      	lsls	r4, r5
 800499e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80049a2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a4:	684c      	ldr	r4, [r1, #4]
 80049a6:	f004 0403 	and.w	r4, r4, #3
 80049aa:	2c02      	cmp	r4, #2
 80049ac:	d089      	beq.n	80048c2 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80049ae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80049b4:	f04f 0c03 	mov.w	ip, #3
 80049b8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80049bc:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049c0:	684c      	ldr	r4, [r1, #4]
 80049c2:	f004 0403 	and.w	r4, r4, #3
 80049c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80049ca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80049ce:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049d0:	684c      	ldr	r4, [r1, #4]
 80049d2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80049d6:	d0c1      	beq.n	800495c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d8:	4c20      	ldr	r4, [pc, #128]	; (8004a5c <HAL_GPIO_Init+0x1cc>)
 80049da:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80049dc:	f045 0501 	orr.w	r5, r5, #1
 80049e0:	6625      	str	r5, [r4, #96]	; 0x60
 80049e2:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80049e4:	f004 0401 	and.w	r4, r4, #1
 80049e8:	9401      	str	r4, [sp, #4]
 80049ea:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80049ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80049f0:	f10c 0502 	add.w	r5, ip, #2
 80049f4:	4c17      	ldr	r4, [pc, #92]	; (8004a54 <HAL_GPIO_Init+0x1c4>)
 80049f6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049fa:	f003 0403 	and.w	r4, r3, #3
 80049fe:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004a02:	240f      	movs	r4, #15
 8004a04:	fa04 f40e 	lsl.w	r4, r4, lr
 8004a08:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a0c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004a10:	f43f af6e 	beq.w	80048f0 <HAL_GPIO_Init+0x60>
 8004a14:	4c12      	ldr	r4, [pc, #72]	; (8004a60 <HAL_GPIO_Init+0x1d0>)
 8004a16:	42a0      	cmp	r0, r4
 8004a18:	d012      	beq.n	8004a40 <HAL_GPIO_Init+0x1b0>
 8004a1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a1e:	42a0      	cmp	r0, r4
 8004a20:	d010      	beq.n	8004a44 <HAL_GPIO_Init+0x1b4>
 8004a22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a26:	42a0      	cmp	r0, r4
 8004a28:	d00e      	beq.n	8004a48 <HAL_GPIO_Init+0x1b8>
 8004a2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a2e:	42a0      	cmp	r0, r4
 8004a30:	d00c      	beq.n	8004a4c <HAL_GPIO_Init+0x1bc>
 8004a32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a36:	42a0      	cmp	r0, r4
 8004a38:	f43f af58 	beq.w	80048ec <HAL_GPIO_Init+0x5c>
 8004a3c:	2406      	movs	r4, #6
 8004a3e:	e758      	b.n	80048f2 <HAL_GPIO_Init+0x62>
 8004a40:	2401      	movs	r4, #1
 8004a42:	e756      	b.n	80048f2 <HAL_GPIO_Init+0x62>
 8004a44:	2402      	movs	r4, #2
 8004a46:	e754      	b.n	80048f2 <HAL_GPIO_Init+0x62>
 8004a48:	2403      	movs	r4, #3
 8004a4a:	e752      	b.n	80048f2 <HAL_GPIO_Init+0x62>
 8004a4c:	2404      	movs	r4, #4
 8004a4e:	e750      	b.n	80048f2 <HAL_GPIO_Init+0x62>
  }
}
 8004a50:	b003      	add	sp, #12
 8004a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	48000400 	.word	0x48000400

08004a64 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a64:	6903      	ldr	r3, [r0, #16]
 8004a66:	4219      	tst	r1, r3
 8004a68:	d001      	beq.n	8004a6e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a6e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004a70:	4770      	bx	lr

08004a72 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a72:	b10a      	cbz	r2, 8004a78 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a74:	6181      	str	r1, [r0, #24]
 8004a76:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a78:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a7c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a7e:	ea01 0203 	and.w	r2, r1, r3
 8004a82:	ea21 0103 	bic.w	r1, r1, r3
 8004a86:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a8a:	6181      	str	r1, [r0, #24]
}
 8004a8c:	4770      	bx	lr

08004a8e <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004a90:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	4203      	tst	r3, r0
 8004a98:	d100      	bne.n	8004a9c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8004a9a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a9c:	4b02      	ldr	r3, [pc, #8]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004a9e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004aa0:	f7ff fff5 	bl	8004a8e <HAL_GPIO_EXTI_Callback>
}
 8004aa4:	e7f9      	b.n	8004a9a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004aa6:	bf00      	nop
 8004aa8:	40010400 	.word	0x40010400

08004aac <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d136      	bne.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ab0:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d008      	beq.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004abe:	4a3b      	ldr	r2, [pc, #236]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004ac0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004acc:	2000      	movs	r0, #0
 8004ace:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ad0:	4a36      	ldr	r2, [pc, #216]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004ad2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ada:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ae8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aea:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2232      	movs	r2, #50	; 0x32
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
 8004af4:	4a2f      	ldr	r2, [pc, #188]	; (8004bb4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	0c9b      	lsrs	r3, r3, #18
 8004afc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004afe:	e000      	b.n	8004b02 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8004b00:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b02:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b04:	6952      	ldr	r2, [r2, #20]
 8004b06:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b0a:	d001      	beq.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x64>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f7      	bne.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b10:	4b26      	ldr	r3, [pc, #152]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b18:	d144      	bne.n	8004ba4 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b22:	d008      	beq.n	8004b36 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b26:	6813      	ldr	r3, [r2, #0]
 8004b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b30:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004b32:	2000      	movs	r0, #0
 8004b34:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b36:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b42:	d008      	beq.n	8004b56 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b44:	4a19      	ldr	r2, [pc, #100]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8004b52:	2000      	movs	r0, #0
 8004b54:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b56:	4a15      	ldr	r2, [pc, #84]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b58:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b6e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2232      	movs	r2, #50	; 0x32
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	0c9b      	lsrs	r3, r3, #18
 8004b82:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b84:	e000      	b.n	8004b88 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8004b86:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b8a:	6952      	ldr	r2, [r2, #20]
 8004b8c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b90:	d001      	beq.n	8004b96 <HAL_PWREx_ControlVoltageScaling+0xea>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f7      	bne.n	8004b86 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b9e:	d103      	bne.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004ba4:	2003      	movs	r0, #3
 8004ba6:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004ba8:	2003      	movs	r0, #3
}
 8004baa:	4770      	bx	lr
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	20000000 	.word	0x20000000
 8004bb4:	431bde83 	.word	0x431bde83

08004bb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004bb8:	4a02      	ldr	r2, [pc, #8]	; (8004bc4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004bba:	6893      	ldr	r3, [r2, #8]
 8004bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bc0:	6093      	str	r3, [r2, #8]
}
 8004bc2:	4770      	bx	lr
 8004bc4:	40007000 	.word	0x40007000

08004bc8 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bd0:	68d8      	ldr	r0, [r3, #12]
 8004bd2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004bd6:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8004bd8:	2a03      	cmp	r2, #3
 8004bda:	d011      	beq.n	8004c00 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bdc:	480e      	ldr	r0, [pc, #56]	; (8004c18 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004bde:	fbb0 f0f3 	udiv	r0, r0, r3
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8004bea:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8004bfa:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bfe:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c00:	4806      	ldr	r0, [pc, #24]	; (8004c1c <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8004c02:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c06:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8004c0e:	fb03 f000 	mul.w	r0, r3, r0
    break;
 8004c12:	e7ec      	b.n	8004bee <RCC_GetSysClockFreqFromPLLSource+0x26>
 8004c14:	40021000 	.word	0x40021000
 8004c18:	00f42400 	.word	0x00f42400
 8004c1c:	016e3600 	.word	0x016e3600

08004c20 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004c20:	2800      	cmp	r0, #0
 8004c22:	f000 8254 	beq.w	80050ce <HAL_RCC_OscConfig+0x4ae>
{
 8004c26:	b570      	push	{r4, r5, r6, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2c:	6803      	ldr	r3, [r0, #0]
 8004c2e:	f013 0f01 	tst.w	r3, #1
 8004c32:	d037      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c34:	4aa4      	ldr	r2, [pc, #656]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004c36:	6893      	ldr	r3, [r2, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c3c:	68d2      	ldr	r2, [r2, #12]
 8004c3e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d023      	beq.n	8004c8e <HAL_RCC_OscConfig+0x6e>
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d023      	beq.n	8004c92 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4a:	6863      	ldr	r3, [r4, #4]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d04e      	beq.n	8004cf0 <HAL_RCC_OscConfig+0xd0>
 8004c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c56:	d051      	beq.n	8004cfc <HAL_RCC_OscConfig+0xdc>
 8004c58:	4b9b      	ldr	r3, [pc, #620]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c68:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d052      	beq.n	8004d16 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8004c70:	f7fd ff32 	bl	8002ad8 <HAL_GetTick>
 8004c74:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c76:	4b94      	ldr	r3, [pc, #592]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c7e:	d111      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fd ff2a 	bl	8002ad8 <HAL_GetTick>
 8004c84:	1b40      	subs	r0, r0, r5
 8004c86:	2864      	cmp	r0, #100	; 0x64
 8004c88:	d9f5      	bls.n	8004c76 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	e228      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c8e:	2a03      	cmp	r2, #3
 8004c90:	d1d9      	bne.n	8004c46 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c92:	4b8d      	ldr	r3, [pc, #564]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x84>
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8217 	beq.w	80050d2 <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	f013 0f02 	tst.w	r3, #2
 8004caa:	d05d      	beq.n	8004d68 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cac:	4a86      	ldr	r2, [pc, #536]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004cae:	6893      	ldr	r3, [r2, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb4:	68d2      	ldr	r2, [r2, #12]
 8004cb6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004cba:	2b0c      	cmp	r3, #12
 8004cbc:	d03a      	beq.n	8004d34 <HAL_RCC_OscConfig+0x114>
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d03a      	beq.n	8004d38 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d075      	beq.n	8004db4 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4a7f      	ldr	r2, [pc, #508]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cd2:	f7fd ff01 	bl	8002ad8 <HAL_GetTick>
 8004cd6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd8:	4b7b      	ldr	r3, [pc, #492]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ce0:	d15f      	bne.n	8004da2 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce2:	f7fd fef9 	bl	8002ad8 <HAL_GetTick>
 8004ce6:	1b40      	subs	r0, r0, r5
 8004ce8:	2802      	cmp	r0, #2
 8004cea:	d9f5      	bls.n	8004cd8 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8004cec:	2003      	movs	r0, #3
 8004cee:	e1f7      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf0:	4a75      	ldr	r2, [pc, #468]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e7b6      	b.n	8004c6a <HAL_RCC_OscConfig+0x4a>
 8004cfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d00:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e7a9      	b.n	8004c6a <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8004d16:	f7fd fedf 	bl	8002ad8 <HAL_GetTick>
 8004d1a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d1c:	4b6a      	ldr	r3, [pc, #424]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d24:	d0be      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d26:	f7fd fed7 	bl	8002ad8 <HAL_GetTick>
 8004d2a:	1b40      	subs	r0, r0, r5
 8004d2c:	2864      	cmp	r0, #100	; 0x64
 8004d2e:	d9f5      	bls.n	8004d1c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8004d30:	2003      	movs	r0, #3
 8004d32:	e1d5      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d34:	2a02      	cmp	r2, #2
 8004d36:	d1c2      	bne.n	8004cbe <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d38:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_OscConfig+0x12a>
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 81c6 	beq.w	80050d6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4a5f      	ldr	r2, [pc, #380]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004d4c:	6853      	ldr	r3, [r2, #4]
 8004d4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d52:	6921      	ldr	r1, [r4, #16]
 8004d54:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d58:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d5a:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	f7fd fe77 	bl	8002a50 <HAL_InitTick>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	f040 81b9 	bne.w	80050da <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	f013 0f08 	tst.w	r3, #8
 8004d6e:	d04c      	beq.n	8004e0a <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d70:	6963      	ldr	r3, [r4, #20]
 8004d72:	b39b      	cbz	r3, 8004ddc <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8004d74:	4a54      	ldr	r2, [pc, #336]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004d76:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d82:	f7fd fea9 	bl	8002ad8 <HAL_GetTick>
 8004d86:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d88:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8e:	f013 0f02 	tst.w	r3, #2
 8004d92:	d13a      	bne.n	8004e0a <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fd fea0 	bl	8002ad8 <HAL_GetTick>
 8004d98:	1b40      	subs	r0, r0, r5
 8004d9a:	2802      	cmp	r0, #2
 8004d9c:	d9f4      	bls.n	8004d88 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8004d9e:	2003      	movs	r0, #3
 8004da0:	e19e      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da2:	4a49      	ldr	r2, [pc, #292]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004da4:	6853      	ldr	r3, [r2, #4]
 8004da6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004daa:	6921      	ldr	r1, [r4, #16]
 8004dac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004db0:	6053      	str	r3, [r2, #4]
 8004db2:	e7d9      	b.n	8004d68 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8004db4:	4a44      	ldr	r2, [pc, #272]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dbe:	f7fd fe8b 	bl	8002ad8 <HAL_GetTick>
 8004dc2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dc4:	4b40      	ldr	r3, [pc, #256]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004dcc:	d0cc      	beq.n	8004d68 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dce:	f7fd fe83 	bl	8002ad8 <HAL_GetTick>
 8004dd2:	1b40      	subs	r0, r0, r5
 8004dd4:	2802      	cmp	r0, #2
 8004dd6:	d9f5      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8004dd8:	2003      	movs	r0, #3
 8004dda:	e181      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8004ddc:	4a3a      	ldr	r2, [pc, #232]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004dde:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004dea:	f7fd fe75 	bl	8002ad8 <HAL_GetTick>
 8004dee:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004df0:	4b35      	ldr	r3, [pc, #212]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df6:	f013 0f02 	tst.w	r3, #2
 8004dfa:	d006      	beq.n	8004e0a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfc:	f7fd fe6c 	bl	8002ad8 <HAL_GetTick>
 8004e00:	1b40      	subs	r0, r0, r5
 8004e02:	2802      	cmp	r0, #2
 8004e04:	d9f4      	bls.n	8004df0 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8004e06:	2003      	movs	r0, #3
 8004e08:	e16a      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f013 0f04 	tst.w	r3, #4
 8004e10:	f000 8081 	beq.w	8004f16 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e14:	4b2c      	ldr	r3, [pc, #176]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004e1c:	d136      	bne.n	8004e8c <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004e20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e32:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <HAL_RCC_OscConfig+0x2b0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3e:	68a3      	ldr	r3, [r4, #8]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d039      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x298>
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d045      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x2b4>
 8004e48:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004e4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004e56:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d043      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8004e68:	f7fd fe36 	bl	8002ad8 <HAL_GetTick>
 8004e6c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6e:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f013 0f02 	tst.w	r3, #2
 8004e78:	d14c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7a:	f7fd fe2d 	bl	8002ad8 <HAL_GetTick>
 8004e7e:	1b80      	subs	r0, r0, r6
 8004e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e84:	4298      	cmp	r0, r3
 8004e86:	d9f2      	bls.n	8004e6e <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8004e88:	2003      	movs	r0, #3
 8004e8a:	e129      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8004e8c:	2500      	movs	r5, #0
 8004e8e:	e7d1      	b.n	8004e34 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <HAL_RCC_OscConfig+0x2b0>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e98:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004e9a:	f7fd fe1d 	bl	8002ad8 <HAL_GetTick>
 8004e9e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_OscConfig+0x2b0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ea8:	d1c9      	bne.n	8004e3e <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eaa:	f7fd fe15 	bl	8002ad8 <HAL_GetTick>
 8004eae:	1b80      	subs	r0, r0, r6
 8004eb0:	2802      	cmp	r0, #2
 8004eb2:	d9f5      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	e113      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb8:	4a03      	ldr	r2, [pc, #12]	; (8004ec8 <HAL_RCC_OscConfig+0x2a8>)
 8004eba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec6:	e7cc      	b.n	8004e62 <HAL_RCC_OscConfig+0x242>
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	20000008 	.word	0x20000008
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	4b8a      	ldr	r3, [pc, #552]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004ed6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004eda:	f042 0204 	orr.w	r2, r2, #4
 8004ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004ee2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004eee:	e7b8      	b.n	8004e62 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8004ef0:	f7fd fdf2 	bl	8002ad8 <HAL_GetTick>
 8004ef4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef6:	4b82      	ldr	r3, [pc, #520]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f013 0f02 	tst.w	r3, #2
 8004f00:	d008      	beq.n	8004f14 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd fde9 	bl	8002ad8 <HAL_GetTick>
 8004f06:	1b80      	subs	r0, r0, r6
 8004f08:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	d9f2      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8004f10:	2003      	movs	r0, #3
 8004f12:	e0e5      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8004f14:	b9e5      	cbnz	r5, 8004f50 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	f013 0f20 	tst.w	r3, #32
 8004f1c:	d035      	beq.n	8004f8a <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f1e:	69a3      	ldr	r3, [r4, #24]
 8004f20:	b1e3      	cbz	r3, 8004f5c <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8004f22:	4a77      	ldr	r2, [pc, #476]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004f24:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004f30:	f7fd fdd2 	bl	8002ad8 <HAL_GetTick>
 8004f34:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f36:	4b72      	ldr	r3, [pc, #456]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f3c:	f013 0f02 	tst.w	r3, #2
 8004f40:	d123      	bne.n	8004f8a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f42:	f7fd fdc9 	bl	8002ad8 <HAL_GetTick>
 8004f46:	1b40      	subs	r0, r0, r5
 8004f48:	2802      	cmp	r0, #2
 8004f4a:	d9f4      	bls.n	8004f36 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	e0c7      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f50:	4a6b      	ldr	r2, [pc, #428]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004f52:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6593      	str	r3, [r2, #88]	; 0x58
 8004f5a:	e7dc      	b.n	8004f16 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8004f5c:	4a68      	ldr	r2, [pc, #416]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004f5e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004f6a:	f7fd fdb5 	bl	8002ad8 <HAL_GetTick>
 8004f6e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f70:	4b63      	ldr	r3, [pc, #396]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f76:	f013 0f02 	tst.w	r3, #2
 8004f7a:	d006      	beq.n	8004f8a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7c:	f7fd fdac 	bl	8002ad8 <HAL_GetTick>
 8004f80:	1b40      	subs	r0, r0, r5
 8004f82:	2802      	cmp	r0, #2
 8004f84:	d9f4      	bls.n	8004f70 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8004f86:	2003      	movs	r0, #3
 8004f88:	e0aa      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f8a:	69e3      	ldr	r3, [r4, #28]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a6 	beq.w	80050de <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f92:	4a5b      	ldr	r2, [pc, #364]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004f94:	6892      	ldr	r2, [r2, #8]
 8004f96:	f002 020c 	and.w	r2, r2, #12
 8004f9a:	2a0c      	cmp	r2, #12
 8004f9c:	d069      	beq.n	8005072 <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d01d      	beq.n	8004fde <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b57      	ldr	r3, [pc, #348]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004faa:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	f022 0203 	bic.w	r2, r2, #3
 8004fb2:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8004fba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fbe:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fd8a 	bl	8002ad8 <HAL_GetTick>
 8004fc4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc6:	4b4e      	ldr	r3, [pc, #312]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fce:	d04e      	beq.n	800506e <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fd fd82 	bl	8002ad8 <HAL_GetTick>
 8004fd4:	1b00      	subs	r0, r0, r4
 8004fd6:	2802      	cmp	r0, #2
 8004fd8:	d9f5      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8004fda:	2003      	movs	r0, #3
 8004fdc:	e080      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4a48      	ldr	r2, [pc, #288]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fe6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004fe8:	f7fd fd76 	bl	8002ad8 <HAL_GetTick>
 8004fec:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fee:	4b44      	ldr	r3, [pc, #272]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ff6:	d006      	beq.n	8005006 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff8:	f7fd fd6e 	bl	8002ad8 <HAL_GetTick>
 8004ffc:	1b40      	subs	r0, r0, r5
 8004ffe:	2802      	cmp	r0, #2
 8005000:	d9f5      	bls.n	8004fee <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8005002:	2003      	movs	r0, #3
 8005004:	e06c      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005006:	4a3e      	ldr	r2, [pc, #248]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8005008:	68d3      	ldr	r3, [r2, #12]
 800500a:	493e      	ldr	r1, [pc, #248]	; (8005104 <HAL_RCC_OscConfig+0x4e4>)
 800500c:	4019      	ands	r1, r3
 800500e:	6a23      	ldr	r3, [r4, #32]
 8005010:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005012:	3801      	subs	r0, #1
 8005014:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005018:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800501a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800501e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005020:	0840      	lsrs	r0, r0, #1
 8005022:	3801      	subs	r0, #1
 8005024:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8005028:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800502a:	0840      	lsrs	r0, r0, #1
 800502c:	3801      	subs	r0, #1
 800502e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8005032:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005034:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8005038:	430b      	orrs	r3, r1
 800503a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800503c:	6813      	ldr	r3, [r2, #0]
 800503e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005042:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005044:	68d3      	ldr	r3, [r2, #12]
 8005046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800504c:	f7fd fd44 	bl	8002ad8 <HAL_GetTick>
 8005050:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005052:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd fd3c 	bl	8002ad8 <HAL_GetTick>
 8005060:	1b00      	subs	r0, r0, r4
 8005062:	2802      	cmp	r0, #2
 8005064:	d9f5      	bls.n	8005052 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8005066:	2003      	movs	r0, #3
 8005068:	e03a      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800506a:	2000      	movs	r0, #0
 800506c:	e038      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
 800506e:	2000      	movs	r0, #0
 8005070:	e036      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005072:	2b01      	cmp	r3, #1
 8005074:	d036      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <HAL_RCC_OscConfig+0x4e0>)
 8005078:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507a:	f003 0103 	and.w	r1, r3, #3
 800507e:	6a22      	ldr	r2, [r4, #32]
 8005080:	4291      	cmp	r1, r2
 8005082:	d131      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005084:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005088:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800508a:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005090:	d12c      	bne.n	80050ec <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005092:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005096:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005098:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800509c:	d128      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800509e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80050a8:	d124      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050aa:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80050ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80050b0:	0852      	lsrs	r2, r2, #1
 80050b2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050b4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80050b8:	d11e      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050ba:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80050be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80050c0:	0852      	lsrs	r2, r2, #1
 80050c2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80050c8:	d118      	bne.n	80050fc <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 80050ca:	2000      	movs	r0, #0
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 80050ce:	2001      	movs	r0, #1
}
 80050d0:	4770      	bx	lr
        return HAL_ERROR;
 80050d2:	2001      	movs	r0, #1
 80050d4:	e004      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80050d6:	2001      	movs	r0, #1
 80050d8:	e002      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 80050da:	2001      	movs	r0, #1
 80050dc:	e000      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80050de:	2000      	movs	r0, #0
}
 80050e0:	b002      	add	sp, #8
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80050e4:	2001      	movs	r0, #1
 80050e6:	e7fb      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80050e8:	2001      	movs	r0, #1
 80050ea:	e7f9      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
 80050ec:	2001      	movs	r0, #1
 80050ee:	e7f7      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
 80050f0:	2001      	movs	r0, #1
 80050f2:	e7f5      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
 80050f4:	2001      	movs	r0, #1
 80050f6:	e7f3      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
 80050f8:	2001      	movs	r0, #1
 80050fa:	e7f1      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
 80050fc:	2001      	movs	r0, #1
 80050fe:	e7ef      	b.n	80050e0 <HAL_RCC_OscConfig+0x4c0>
 8005100:	40021000 	.word	0x40021000
 8005104:	019f800c 	.word	0x019f800c

08005108 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <HAL_RCC_GetSysClockFreq+0x7c>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b04      	cmp	r3, #4
 8005112:	d033      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b08      	cmp	r3, #8
 800511e:	d02f      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005120:	4b18      	ldr	r3, [pc, #96]	; (8005184 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d001      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 800512c:	2000      	movs	r0, #0
}
 800512e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005138:	68d8      	ldr	r0, [r3, #12]
 800513a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800513e:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8005140:	2a03      	cmp	r2, #3
 8005142:	d011      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005144:	4810      	ldr	r0, [pc, #64]	; (8005188 <HAL_RCC_GetSysClockFreq+0x80>)
 8005146:	fbb0 f0f3 	udiv	r0, r0, r3
 800514a:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <HAL_RCC_GetSysClockFreq+0x7c>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8005152:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800515e:	3301      	adds	r3, #1
 8005160:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005162:	fbb0 f0f3 	udiv	r0, r0, r3
 8005166:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005168:	4808      	ldr	r0, [pc, #32]	; (800518c <HAL_RCC_GetSysClockFreq+0x84>)
 800516a:	fbb0 f0f3 	udiv	r0, r0, r3
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8005176:	fb03 f000 	mul.w	r0, r3, r0
      break;
 800517a:	e7ec      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800517c:	4802      	ldr	r0, [pc, #8]	; (8005188 <HAL_RCC_GetSysClockFreq+0x80>)
 800517e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005180:	4802      	ldr	r0, [pc, #8]	; (800518c <HAL_RCC_GetSysClockFreq+0x84>)
 8005182:	4770      	bx	lr
 8005184:	40021000 	.word	0x40021000
 8005188:	00f42400 	.word	0x00f42400
 800518c:	016e3600 	.word	0x016e3600

08005190 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005190:	2800      	cmp	r0, #0
 8005192:	f000 80e6 	beq.w	8005362 <HAL_RCC_ClockConfig+0x1d2>
{
 8005196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005198:	460c      	mov	r4, r1
 800519a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800519c:	4b74      	ldr	r3, [pc, #464]	; (8005370 <HAL_RCC_ClockConfig+0x1e0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	428b      	cmp	r3, r1
 80051a6:	d20b      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a8:	4a71      	ldr	r2, [pc, #452]	; (8005370 <HAL_RCC_ClockConfig+0x1e0>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	f023 030f 	bic.w	r3, r3, #15
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b4:	6813      	ldr	r3, [r2, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	428b      	cmp	r3, r1
 80051bc:	f040 80d3 	bne.w	8005366 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c0:	682e      	ldr	r6, [r5, #0]
 80051c2:	f016 0601 	ands.w	r6, r6, #1
 80051c6:	d05f      	beq.n	8005288 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c8:	686b      	ldr	r3, [r5, #4]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d02f      	beq.n	800522e <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d04d      	beq.n	800526e <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d2:	4b68      	ldr	r3, [pc, #416]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80051da:	f000 80c6 	beq.w	800536a <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051de:	f7ff ff93 	bl	8005108 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80051e2:	4b65      	ldr	r3, [pc, #404]	; (8005378 <HAL_RCC_ClockConfig+0x1e8>)
 80051e4:	4298      	cmp	r0, r3
 80051e6:	d94d      	bls.n	8005284 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051e8:	4a62      	ldr	r2, [pc, #392]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 80051ea:	6893      	ldr	r3, [r2, #8]
 80051ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051f6:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f8:	4a5e      	ldr	r2, [pc, #376]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 80051fa:	6893      	ldr	r3, [r2, #8]
 80051fc:	f023 0303 	bic.w	r3, r3, #3
 8005200:	6869      	ldr	r1, [r5, #4]
 8005202:	430b      	orrs	r3, r1
 8005204:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005206:	f7fd fc67 	bl	8002ad8 <HAL_GetTick>
 800520a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520c:	4b59      	ldr	r3, [pc, #356]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	686a      	ldr	r2, [r5, #4]
 8005216:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800521a:	d035      	beq.n	8005288 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521c:	f7fd fc5c 	bl	8002ad8 <HAL_GetTick>
 8005220:	1bc0      	subs	r0, r0, r7
 8005222:	f241 3388 	movw	r3, #5000	; 0x1388
 8005226:	4298      	cmp	r0, r3
 8005228:	d9f0      	bls.n	800520c <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 800522a:	2003      	movs	r0, #3
 800522c:	e078      	b.n	8005320 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	4b51      	ldr	r3, [pc, #324]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8005238:	2001      	movs	r0, #1
 800523a:	e071      	b.n	8005320 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800523c:	f7ff fcc4 	bl	8004bc8 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8005240:	4b4d      	ldr	r3, [pc, #308]	; (8005378 <HAL_RCC_ClockConfig+0x1e8>)
 8005242:	4298      	cmp	r0, r3
 8005244:	d91a      	bls.n	800527c <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005246:	4b4b      	ldr	r3, [pc, #300]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005250:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005252:	f016 0602 	ands.w	r6, r6, #2
 8005256:	d0cf      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005258:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800525a:	b98b      	cbnz	r3, 8005280 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800525c:	4a45      	ldr	r2, [pc, #276]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 800525e:	6893      	ldr	r3, [r2, #8]
 8005260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800526a:	2680      	movs	r6, #128	; 0x80
 800526c:	e7c4      	b.n	80051f8 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005276:	d1b2      	bne.n	80051de <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8005278:	2001      	movs	r0, #1
 800527a:	e051      	b.n	8005320 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800527c:	2600      	movs	r6, #0
 800527e:	e7bb      	b.n	80051f8 <HAL_RCC_ClockConfig+0x68>
 8005280:	2600      	movs	r6, #0
 8005282:	e7b9      	b.n	80051f8 <HAL_RCC_ClockConfig+0x68>
 8005284:	2600      	movs	r6, #0
 8005286:	e7b7      	b.n	80051f8 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	f013 0f02 	tst.w	r3, #2
 800528e:	d048      	beq.n	8005322 <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	f013 0f04 	tst.w	r3, #4
 8005294:	d004      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005296:	4a37      	ldr	r2, [pc, #220]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 8005298:	6893      	ldr	r3, [r2, #8]
 800529a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800529e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	f013 0f08 	tst.w	r3, #8
 80052a6:	d006      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052a8:	4a32      	ldr	r2, [pc, #200]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 80052aa:	6893      	ldr	r3, [r2, #8]
 80052ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052b0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b6:	4a2f      	ldr	r2, [pc, #188]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 80052b8:	6893      	ldr	r3, [r2, #8]
 80052ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052be:	68a9      	ldr	r1, [r5, #8]
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c4:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <HAL_RCC_ClockConfig+0x1e0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	d830      	bhi.n	8005332 <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	f013 0f04 	tst.w	r3, #4
 80052d6:	d006      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4a26      	ldr	r2, [pc, #152]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 80052da:	6893      	ldr	r3, [r2, #8]
 80052dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052e0:	68e9      	ldr	r1, [r5, #12]
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e6:	682b      	ldr	r3, [r5, #0]
 80052e8:	f013 0f08 	tst.w	r3, #8
 80052ec:	d007      	beq.n	80052fe <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4a21      	ldr	r2, [pc, #132]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 80052f0:	6893      	ldr	r3, [r2, #8]
 80052f2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80052f6:	6929      	ldr	r1, [r5, #16]
 80052f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80052fc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052fe:	f7ff ff03 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800530a:	4a1c      	ldr	r2, [pc, #112]	; (800537c <HAL_RCC_ClockConfig+0x1ec>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	40d8      	lsrs	r0, r3
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 8005316:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	f7fd fb98 	bl	8002a50 <HAL_InitTick>
}
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8005322:	2e80      	cmp	r6, #128	; 0x80
 8005324:	d1ce      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <HAL_RCC_ClockConfig+0x1e4>)
 8005328:	6893      	ldr	r3, [r2, #8]
 800532a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	e7c8      	b.n	80052c4 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <HAL_RCC_ClockConfig+0x1e0>)
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	f023 030f 	bic.w	r3, r3, #15
 800533a:	4323      	orrs	r3, r4
 800533c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800533e:	f7fd fbcb 	bl	8002ad8 <HAL_GetTick>
 8005342:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_RCC_ClockConfig+0x1e0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	42a3      	cmp	r3, r4
 800534e:	d0bf      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fd fbc2 	bl	8002ad8 <HAL_GetTick>
 8005354:	1b80      	subs	r0, r0, r6
 8005356:	f241 3388 	movw	r3, #5000	; 0x1388
 800535a:	4298      	cmp	r0, r3
 800535c:	d9f2      	bls.n	8005344 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 800535e:	2003      	movs	r0, #3
 8005360:	e7de      	b.n	8005320 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8005362:	2001      	movs	r0, #1
}
 8005364:	4770      	bx	lr
      return HAL_ERROR;
 8005366:	2001      	movs	r0, #1
 8005368:	e7da      	b.n	8005320 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 800536a:	2001      	movs	r0, #1
 800536c:	e7d8      	b.n	8005320 <HAL_RCC_ClockConfig+0x190>
 800536e:	bf00      	nop
 8005370:	40022000 	.word	0x40022000
 8005374:	40021000 	.word	0x40021000
 8005378:	04c4b400 	.word	0x04c4b400
 800537c:	08007e6c 	.word	0x08007e6c
 8005380:	20000000 	.word	0x20000000
 8005384:	20000008 	.word	0x20000008

08005388 <HAL_RCC_GetHCLKFreq>:
}
 8005388:	4b01      	ldr	r3, [pc, #4]	; (8005390 <HAL_RCC_GetHCLKFreq+0x8>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000000 	.word	0x20000000

08005394 <HAL_RCC_GetPCLK1Freq>:
{
 8005394:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005396:	f7ff fff7 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80053a2:	4a04      	ldr	r2, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a4:	5cd3      	ldrb	r3, [r2, r3]
 80053a6:	f003 031f 	and.w	r3, r3, #31
}
 80053aa:	40d8      	lsrs	r0, r3
 80053ac:	bd08      	pop	{r3, pc}
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	08007e7c 	.word	0x08007e7c

080053b8 <HAL_RCC_GetPCLK2Freq>:
{
 80053b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053ba:	f7ff ffe5 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80053c6:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053c8:	5cd3      	ldrb	r3, [r2, r3]
 80053ca:	f003 031f 	and.w	r3, r3, #31
}
 80053ce:	40d8      	lsrs	r0, r3
 80053d0:	bd08      	pop	{r3, pc}
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
 80053d8:	08007e7c 	.word	0x08007e7c

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053de:	b083      	sub	sp, #12
 80053e0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e2:	6803      	ldr	r3, [r0, #0]
 80053e4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80053e8:	d06e      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ea:	4b35      	ldr	r3, [pc, #212]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80053f2:	d11e      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	4b32      	ldr	r3, [pc, #200]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80053f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053fc:	659a      	str	r2, [r3, #88]	; 0x58
 80053fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005408:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800540a:	4a2e      	ldr	r2, [pc, #184]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800540c:	6813      	ldr	r3, [r2, #0]
 800540e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005414:	f7fd fb60 	bl	8002ad8 <HAL_GetTick>
 8005418:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800541a:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005422:	d108      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005424:	f7fd fb58 	bl	8002ad8 <HAL_GetTick>
 8005428:	1b40      	subs	r0, r0, r5
 800542a:	2802      	cmp	r0, #2
 800542c:	d9f5      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800542e:	2503      	movs	r5, #3
 8005430:	e002      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8005432:	2600      	movs	r6, #0
 8005434:	e7e9      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005436:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8005438:	bb45      	cbnz	r5, 800548c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005440:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005444:	d015      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8005446:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005448:	429a      	cmp	r2, r3
 800544a:	d012      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800544e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005456:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800545a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800545e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005462:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005466:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800546a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800546e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005472:	f013 0f01 	tst.w	r3, #1
 8005476:	d110      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8005478:	b945      	cbnz	r5, 800548c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547a:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800547c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005484:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005486:	430b      	orrs	r3, r1
 8005488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800548c:	b1ee      	cbz	r6, 80054ca <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800548e:	4a0c      	ldr	r2, [pc, #48]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005490:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005496:	6593      	str	r3, [r2, #88]	; 0x58
 8005498:	e017      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 800549a:	f7fd fb1d 	bl	8002ad8 <HAL_GetTick>
 800549e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f013 0f02 	tst.w	r3, #2
 80054aa:	d1e5      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fd fb14 	bl	8002ad8 <HAL_GetTick>
 80054b0:	1bc0      	subs	r0, r0, r7
 80054b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80054b6:	4298      	cmp	r0, r3
 80054b8:	d9f2      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 80054ba:	2503      	movs	r5, #3
 80054bc:	e7dc      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054c8:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f013 0f01 	tst.w	r3, #1
 80054d0:	d008      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054d2:	4a9f      	ldr	r2, [pc, #636]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054d8:	f023 0303 	bic.w	r3, r3, #3
 80054dc:	6861      	ldr	r1, [r4, #4]
 80054de:	430b      	orrs	r3, r1
 80054e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f013 0f02 	tst.w	r3, #2
 80054ea:	d008      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054ec:	4a98      	ldr	r2, [pc, #608]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054f2:	f023 030c 	bic.w	r3, r3, #12
 80054f6:	68a1      	ldr	r1, [r4, #8]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f013 0f04 	tst.w	r3, #4
 8005504:	d008      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005506:	4a92      	ldr	r2, [pc, #584]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005508:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800550c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005510:	68e1      	ldr	r1, [r4, #12]
 8005512:	430b      	orrs	r3, r1
 8005514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	f013 0f08 	tst.w	r3, #8
 800551e:	d008      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005520:	4a8b      	ldr	r2, [pc, #556]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005522:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005526:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800552a:	6921      	ldr	r1, [r4, #16]
 800552c:	430b      	orrs	r3, r1
 800552e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	f013 0f10 	tst.w	r3, #16
 8005538:	d008      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800553a:	4a85      	ldr	r2, [pc, #532]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800553c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	6961      	ldr	r1, [r4, #20]
 8005546:	430b      	orrs	r3, r1
 8005548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	f013 0f20 	tst.w	r3, #32
 8005552:	d008      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005554:	4a7e      	ldr	r2, [pc, #504]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005556:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800555a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800555e:	69a1      	ldr	r1, [r4, #24]
 8005560:	430b      	orrs	r3, r1
 8005562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	f013 0f40 	tst.w	r3, #64	; 0x40
 800556c:	d008      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800556e:	4a78      	ldr	r2, [pc, #480]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005570:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005578:	69e1      	ldr	r1, [r4, #28]
 800557a:	430b      	orrs	r3, r1
 800557c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005586:	d008      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005588:	4a71      	ldr	r2, [pc, #452]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800558a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800558e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005592:	6a21      	ldr	r1, [r4, #32]
 8005594:	430b      	orrs	r3, r1
 8005596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055a0:	d008      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055a2:	4a6b      	ldr	r2, [pc, #428]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055ae:	430b      	orrs	r3, r1
 80055b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80055ba:	d008      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055bc:	4a64      	ldr	r2, [pc, #400]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055be:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80055c8:	430b      	orrs	r3, r1
 80055ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80055d4:	d008      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055d6:	4a5e      	ldr	r2, [pc, #376]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055dc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80055e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80055e2:	430b      	orrs	r3, r1
 80055e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80055ee:	d00c      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f0:	4a57      	ldr	r2, [pc, #348]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80055fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055fc:	430b      	orrs	r3, r1
 80055fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005608:	d079      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005610:	d00c      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005612:	4a4f      	ldr	r2, [pc, #316]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005614:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005618:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800561c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800561e:	430b      	orrs	r3, r1
 8005620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562a:	d06d      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005632:	d00c      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005634:	4a46      	ldr	r2, [pc, #280]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005636:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800563a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800563e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005640:	430b      	orrs	r3, r1
 8005642:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800564c:	d061      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005654:	d00c      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005656:	4a3e      	ldr	r2, [pc, #248]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005658:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800565c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005660:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005662:	430b      	orrs	r3, r1
 8005664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005668:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800566a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800566e:	d055      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005676:	d00c      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005678:	4a35      	ldr	r2, [pc, #212]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800567a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800567e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005682:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005684:	430b      	orrs	r3, r1
 8005686:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800568a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800568c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005690:	d049      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005698:	d00c      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800569a:	4a2d      	ldr	r2, [pc, #180]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800569c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80056a0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80056a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056a6:	430b      	orrs	r3, r1
 80056a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b2:	d03d      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80056ba:	d00c      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80056bc:	4a24      	ldr	r2, [pc, #144]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80056c2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80056c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056c8:	430b      	orrs	r3, r1
 80056ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80056ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d031      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80056dc:	d00c      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056de:	4a1c      	ldr	r2, [pc, #112]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056e0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80056e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80056ea:	430b      	orrs	r3, r1
 80056ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80056f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80056f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056f6:	d025      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 80056f8:	4628      	mov	r0, r5
 80056fa:	b003      	add	sp, #12
 80056fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fe:	68d3      	ldr	r3, [r2, #12]
 8005700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005704:	60d3      	str	r3, [r2, #12]
 8005706:	e780      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005708:	68d3      	ldr	r3, [r2, #12]
 800570a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800570e:	60d3      	str	r3, [r2, #12]
 8005710:	e78c      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005712:	68d3      	ldr	r3, [r2, #12]
 8005714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005718:	60d3      	str	r3, [r2, #12]
 800571a:	e798      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800571c:	68d3      	ldr	r3, [r2, #12]
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
 8005724:	e7a4      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005726:	68d3      	ldr	r3, [r2, #12]
 8005728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572c:	60d3      	str	r3, [r2, #12]
 800572e:	e7b0      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005730:	68d3      	ldr	r3, [r2, #12]
 8005732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005736:	60d3      	str	r3, [r2, #12]
 8005738:	e7bc      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800573a:	68d3      	ldr	r3, [r2, #12]
 800573c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005740:	60d3      	str	r3, [r2, #12]
 8005742:	e7c8      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	68d3      	ldr	r3, [r2, #12]
 8005746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800574a:	60d3      	str	r3, [r2, #12]
 800574c:	e7d4      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000

08005754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005756:	6a03      	ldr	r3, [r0, #32]
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005764:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005768:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	680c      	ldr	r4, [r1, #0]
 800576e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005770:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005774:	688c      	ldr	r4, [r1, #8]
 8005776:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005778:	4c21      	ldr	r4, [pc, #132]	; (8005800 <TIM_OC1_SetConfig+0xac>)
 800577a:	42a0      	cmp	r0, r4
 800577c:	d013      	beq.n	80057a6 <TIM_OC1_SetConfig+0x52>
 800577e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005782:	42a0      	cmp	r0, r4
 8005784:	d00f      	beq.n	80057a6 <TIM_OC1_SetConfig+0x52>
 8005786:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800578a:	42a0      	cmp	r0, r4
 800578c:	d00b      	beq.n	80057a6 <TIM_OC1_SetConfig+0x52>
 800578e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005792:	42a0      	cmp	r0, r4
 8005794:	d007      	beq.n	80057a6 <TIM_OC1_SetConfig+0x52>
 8005796:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800579a:	42a0      	cmp	r0, r4
 800579c:	d003      	beq.n	80057a6 <TIM_OC1_SetConfig+0x52>
 800579e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80057a2:	42a0      	cmp	r0, r4
 80057a4:	d105      	bne.n	80057b2 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057aa:	68cc      	ldr	r4, [r1, #12]
 80057ac:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ae:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b2:	4c13      	ldr	r4, [pc, #76]	; (8005800 <TIM_OC1_SetConfig+0xac>)
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d013      	beq.n	80057e0 <TIM_OC1_SetConfig+0x8c>
 80057b8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d00f      	beq.n	80057e0 <TIM_OC1_SetConfig+0x8c>
 80057c0:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80057c4:	42a0      	cmp	r0, r4
 80057c6:	d00b      	beq.n	80057e0 <TIM_OC1_SetConfig+0x8c>
 80057c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057cc:	42a0      	cmp	r0, r4
 80057ce:	d007      	beq.n	80057e0 <TIM_OC1_SetConfig+0x8c>
 80057d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d003      	beq.n	80057e0 <TIM_OC1_SetConfig+0x8c>
 80057d8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80057dc:	42a0      	cmp	r0, r4
 80057de:	d107      	bne.n	80057f0 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057e0:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e4:	694c      	ldr	r4, [r1, #20]
 80057e6:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ea:	698d      	ldr	r5, [r1, #24]
 80057ec:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f2:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f4:	684a      	ldr	r2, [r1, #4]
 80057f6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	6203      	str	r3, [r0, #32]
}
 80057fa:	bc30      	pop	{r4, r5}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40012c00 	.word	0x40012c00

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005806:	6a03      	ldr	r3, [r0, #32]
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005814:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005818:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581c:	680d      	ldr	r5, [r1, #0]
 800581e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005824:	688d      	ldr	r5, [r1, #8]
 8005826:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800582a:	4d1c      	ldr	r5, [pc, #112]	; (800589c <TIM_OC3_SetConfig+0x98>)
 800582c:	42a8      	cmp	r0, r5
 800582e:	d007      	beq.n	8005840 <TIM_OC3_SetConfig+0x3c>
 8005830:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005834:	42a8      	cmp	r0, r5
 8005836:	d003      	beq.n	8005840 <TIM_OC3_SetConfig+0x3c>
 8005838:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800583c:	42a8      	cmp	r0, r5
 800583e:	d106      	bne.n	800584e <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005844:	68cd      	ldr	r5, [r1, #12]
 8005846:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800584a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584e:	4d13      	ldr	r5, [pc, #76]	; (800589c <TIM_OC3_SetConfig+0x98>)
 8005850:	42a8      	cmp	r0, r5
 8005852:	d013      	beq.n	800587c <TIM_OC3_SetConfig+0x78>
 8005854:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005858:	42a8      	cmp	r0, r5
 800585a:	d00f      	beq.n	800587c <TIM_OC3_SetConfig+0x78>
 800585c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005860:	42a8      	cmp	r0, r5
 8005862:	d00b      	beq.n	800587c <TIM_OC3_SetConfig+0x78>
 8005864:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005868:	42a8      	cmp	r0, r5
 800586a:	d007      	beq.n	800587c <TIM_OC3_SetConfig+0x78>
 800586c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005870:	42a8      	cmp	r0, r5
 8005872:	d003      	beq.n	800587c <TIM_OC3_SetConfig+0x78>
 8005874:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005878:	42a8      	cmp	r0, r5
 800587a:	d107      	bne.n	800588c <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800587c:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005880:	694c      	ldr	r4, [r1, #20]
 8005882:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005886:	698c      	ldr	r4, [r1, #24]
 8005888:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800588e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005890:	684a      	ldr	r2, [r1, #4]
 8005892:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005894:	6203      	str	r3, [r0, #32]
}
 8005896:	bc30      	pop	{r4, r5}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40012c00 	.word	0x40012c00

080058a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058a2:	6a03      	ldr	r3, [r0, #32]
 80058a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80058b4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	680d      	ldr	r5, [r1, #0]
 80058ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058c2:	688d      	ldr	r5, [r1, #8]
 80058c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058c8:	4d1b      	ldr	r5, [pc, #108]	; (8005938 <TIM_OC4_SetConfig+0x98>)
 80058ca:	42a8      	cmp	r0, r5
 80058cc:	d007      	beq.n	80058de <TIM_OC4_SetConfig+0x3e>
 80058ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058d2:	42a8      	cmp	r0, r5
 80058d4:	d003      	beq.n	80058de <TIM_OC4_SetConfig+0x3e>
 80058d6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80058da:	42a8      	cmp	r0, r5
 80058dc:	d106      	bne.n	80058ec <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058e2:	68cd      	ldr	r5, [r1, #12]
 80058e4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80058e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	4d12      	ldr	r5, [pc, #72]	; (8005938 <TIM_OC4_SetConfig+0x98>)
 80058ee:	42a8      	cmp	r0, r5
 80058f0:	d013      	beq.n	800591a <TIM_OC4_SetConfig+0x7a>
 80058f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058f6:	42a8      	cmp	r0, r5
 80058f8:	d00f      	beq.n	800591a <TIM_OC4_SetConfig+0x7a>
 80058fa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80058fe:	42a8      	cmp	r0, r5
 8005900:	d00b      	beq.n	800591a <TIM_OC4_SetConfig+0x7a>
 8005902:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005906:	42a8      	cmp	r0, r5
 8005908:	d007      	beq.n	800591a <TIM_OC4_SetConfig+0x7a>
 800590a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800590e:	42a8      	cmp	r0, r5
 8005910:	d003      	beq.n	800591a <TIM_OC4_SetConfig+0x7a>
 8005912:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005916:	42a8      	cmp	r0, r5
 8005918:	d107      	bne.n	800592a <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800591a:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800591e:	694c      	ldr	r4, [r1, #20]
 8005920:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005924:	698c      	ldr	r4, [r1, #24]
 8005926:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800592e:	684a      	ldr	r2, [r1, #4]
 8005930:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005932:	6203      	str	r3, [r0, #32]
}
 8005934:	bc30      	pop	{r4, r5}
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00

0800593c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800593e:	6a03      	ldr	r3, [r0, #32]
 8005940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005944:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800594a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800594c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005950:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	680d      	ldr	r5, [r1, #0]
 8005956:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005958:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800595c:	688d      	ldr	r5, [r1, #8]
 800595e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005962:	4d11      	ldr	r5, [pc, #68]	; (80059a8 <TIM_OC5_SetConfig+0x6c>)
 8005964:	42a8      	cmp	r0, r5
 8005966:	d013      	beq.n	8005990 <TIM_OC5_SetConfig+0x54>
 8005968:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800596c:	42a8      	cmp	r0, r5
 800596e:	d00f      	beq.n	8005990 <TIM_OC5_SetConfig+0x54>
 8005970:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005974:	42a8      	cmp	r0, r5
 8005976:	d00b      	beq.n	8005990 <TIM_OC5_SetConfig+0x54>
 8005978:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800597c:	42a8      	cmp	r0, r5
 800597e:	d007      	beq.n	8005990 <TIM_OC5_SetConfig+0x54>
 8005980:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005984:	42a8      	cmp	r0, r5
 8005986:	d003      	beq.n	8005990 <TIM_OC5_SetConfig+0x54>
 8005988:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800598c:	42a8      	cmp	r0, r5
 800598e:	d104      	bne.n	800599a <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005990:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005994:	694d      	ldr	r5, [r1, #20]
 8005996:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800599c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800599e:	684a      	ldr	r2, [r1, #4]
 80059a0:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	6203      	str	r3, [r0, #32]
}
 80059a4:	bc30      	pop	{r4, r5}
 80059a6:	4770      	bx	lr
 80059a8:	40012c00 	.word	0x40012c00

080059ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059ae:	6a03      	ldr	r3, [r0, #32]
 80059b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ba:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80059c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c4:	680d      	ldr	r5, [r1, #0]
 80059c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059ce:	688d      	ldr	r5, [r1, #8]
 80059d0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d4:	4d11      	ldr	r5, [pc, #68]	; (8005a1c <TIM_OC6_SetConfig+0x70>)
 80059d6:	42a8      	cmp	r0, r5
 80059d8:	d013      	beq.n	8005a02 <TIM_OC6_SetConfig+0x56>
 80059da:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059de:	42a8      	cmp	r0, r5
 80059e0:	d00f      	beq.n	8005a02 <TIM_OC6_SetConfig+0x56>
 80059e2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80059e6:	42a8      	cmp	r0, r5
 80059e8:	d00b      	beq.n	8005a02 <TIM_OC6_SetConfig+0x56>
 80059ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059ee:	42a8      	cmp	r0, r5
 80059f0:	d007      	beq.n	8005a02 <TIM_OC6_SetConfig+0x56>
 80059f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059f6:	42a8      	cmp	r0, r5
 80059f8:	d003      	beq.n	8005a02 <TIM_OC6_SetConfig+0x56>
 80059fa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059fe:	42a8      	cmp	r0, r5
 8005a00:	d104      	bne.n	8005a0c <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a02:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a06:	694d      	ldr	r5, [r1, #20]
 8005a08:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a0e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a10:	684a      	ldr	r2, [r1, #4]
 8005a12:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	6203      	str	r3, [r0, #32]
}
 8005a16:	bc30      	pop	{r4, r5}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00

08005a20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a20:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a22:	6a04      	ldr	r4, [r0, #32]
 8005a24:	f024 0410 	bic.w	r4, r4, #16
 8005a28:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005a2c:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a2e:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a32:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a36:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a3a:	031b      	lsls	r3, r3, #12
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a42:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a46:	0109      	lsls	r1, r1, #4
 8005a48:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8005a4c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005a50:	6201      	str	r1, [r0, #32]
}
 8005a52:	bc30      	pop	{r4, r5}
 8005a54:	4770      	bx	lr

08005a56 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a56:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a58:	6a04      	ldr	r4, [r0, #32]
 8005a5a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8005a5e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a60:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8005a62:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a64:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8005a68:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a6c:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a78:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a7c:	0209      	lsls	r1, r1, #8
 8005a7e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8005a82:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a84:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8005a86:	6201      	str	r1, [r0, #32]
}
 8005a88:	bc30      	pop	{r4, r5}
 8005a8a:	4770      	bx	lr

08005a8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a8c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8e:	6a04      	ldr	r4, [r0, #32]
 8005a90:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8005a94:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a96:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8005a98:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a9a:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a9e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005aa2:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005aa6:	031b      	lsls	r3, r3, #12
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005aae:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ab2:	0309      	lsls	r1, r1, #12
 8005ab4:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8005ab8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005aba:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8005abc:	6201      	str	r1, [r0, #32]
}
 8005abe:	bc30      	pop	{r4, r5}
 8005ac0:	4770      	bx	lr
	...

08005ac4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d135      	bne.n	8005b3a <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_TIM_Base_Start+0x84>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d020      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	d01d      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
 8005ae2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d019      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
 8005aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d015      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
 8005af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d011      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
 8005afa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00d      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
 8005b02:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d009      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
 8005b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d005      	beq.n	8005b1e <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <HAL_TIM_Base_Start+0x88>)
 8005b22:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	2a06      	cmp	r2, #6
 8005b26:	d00a      	beq.n	8005b3e <HAL_TIM_Base_Start+0x7a>
 8005b28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005b36:	2000      	movs	r0, #0
 8005b38:	4770      	bx	lr
    return HAL_ERROR;
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	4770      	bx	lr
  return HAL_OK;
 8005b3e:	2000      	movs	r0, #0
 8005b40:	4770      	bx	lr
 8005b42:	2000      	movs	r0, #0
}
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	00010007 	.word	0x00010007

08005b50 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005b50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d13a      	bne.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b60:	6802      	ldr	r2, [r0, #0]
 8005b62:	68d3      	ldr	r3, [r2, #12]
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	; (8005bdc <HAL_TIM_Base_Start_IT+0x8c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d020      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b76:	d01d      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
 8005b78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d019      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
 8005b80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d015      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
 8005b88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d011      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
 8005b90:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00d      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
 8005b98:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
 8005ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d005      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb4:	6899      	ldr	r1, [r3, #8]
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <HAL_TIM_Base_Start_IT+0x90>)
 8005bb8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bba:	2a06      	cmp	r2, #6
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_TIM_Base_Start_IT+0x84>
 8005bbe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005bc2:	d009      	beq.n	8005bd8 <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bcc:	2000      	movs	r0, #0
 8005bce:	4770      	bx	lr
    return HAL_ERROR;
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	4770      	bx	lr
  return HAL_OK;
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	4770      	bx	lr
 8005bd8:	2000      	movs	r0, #0
}
 8005bda:	4770      	bx	lr
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	00010007 	.word	0x00010007

08005be4 <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 8005be4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d00e      	beq.n	8005c0a <HAL_TIM_GenerateEvent+0x26>
 8005bec:	2301      	movs	r3, #1
 8005bee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 8005bf8:	6802      	ldr	r2, [r0, #0]
 8005bfa:	6151      	str	r1, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005c00:	2300      	movs	r3, #0
 8005c02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005c06:	4618      	mov	r0, r3
 8005c08:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c0a:	2002      	movs	r0, #2
}
 8005c0c:	4770      	bx	lr
	...

08005c10 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005c10:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c12:	4a36      	ldr	r2, [pc, #216]	; (8005cec <TIM_Base_SetConfig+0xdc>)
 8005c14:	4290      	cmp	r0, r2
 8005c16:	d016      	beq.n	8005c46 <TIM_Base_SetConfig+0x36>
 8005c18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c1c:	d013      	beq.n	8005c46 <TIM_Base_SetConfig+0x36>
 8005c1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c22:	4290      	cmp	r0, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_Base_SetConfig+0x36>
 8005c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c2a:	4290      	cmp	r0, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_Base_SetConfig+0x36>
 8005c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c32:	4290      	cmp	r0, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_Base_SetConfig+0x36>
 8005c36:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005c3a:	4290      	cmp	r0, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_Base_SetConfig+0x36>
 8005c3e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005c42:	4290      	cmp	r0, r2
 8005c44:	d103      	bne.n	8005c4e <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c4a:	684a      	ldr	r2, [r1, #4]
 8005c4c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4e:	4a27      	ldr	r2, [pc, #156]	; (8005cec <TIM_Base_SetConfig+0xdc>)
 8005c50:	4290      	cmp	r0, r2
 8005c52:	d022      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c58:	d01f      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c5a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c5e:	4290      	cmp	r0, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c66:	4290      	cmp	r0, r2
 8005c68:	d017      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c6e:	4290      	cmp	r0, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c72:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005c76:	4290      	cmp	r0, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c7a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005c7e:	4290      	cmp	r0, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c86:	4290      	cmp	r0, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c8e:	4290      	cmp	r0, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c96:	4290      	cmp	r0, r2
 8005c98:	d103      	bne.n	8005ca2 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c9e:	68ca      	ldr	r2, [r1, #12]
 8005ca0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca6:	694a      	ldr	r2, [r1, #20]
 8005ca8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005caa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cac:	688b      	ldr	r3, [r1, #8]
 8005cae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cb0:	680b      	ldr	r3, [r1, #0]
 8005cb2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb4:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <TIM_Base_SetConfig+0xdc>)
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	d013      	beq.n	8005ce2 <TIM_Base_SetConfig+0xd2>
 8005cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_Base_SetConfig+0xd2>
 8005cc2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005cc6:	4298      	cmp	r0, r3
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_Base_SetConfig+0xd2>
 8005cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cce:	4298      	cmp	r0, r3
 8005cd0:	d007      	beq.n	8005ce2 <TIM_Base_SetConfig+0xd2>
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd6:	4298      	cmp	r0, r3
 8005cd8:	d003      	beq.n	8005ce2 <TIM_Base_SetConfig+0xd2>
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	4298      	cmp	r0, r3
 8005ce0:	d101      	bne.n	8005ce6 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce2:	690b      	ldr	r3, [r1, #16]
 8005ce4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	6143      	str	r3, [r0, #20]
}
 8005cea:	4770      	bx	lr
 8005cec:	40012c00 	.word	0x40012c00

08005cf0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005cf0:	b360      	cbz	r0, 8005d4c <HAL_TIM_Base_Init+0x5c>
{
 8005cf2:	b510      	push	{r4, lr}
 8005cf4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cfa:	b313      	cbz	r3, 8005d42 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d02:	4621      	mov	r1, r4
 8005d04:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d08:	f7ff ff82 	bl	8005c10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005d22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005d36:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d3e:	2000      	movs	r0, #0
}
 8005d40:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005d46:	f7fc fda1 	bl	800288c <HAL_TIM_Base_MspInit>
 8005d4a:	e7d7      	b.n	8005cfc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005d4c:	2001      	movs	r0, #1
}
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005d50:	b360      	cbz	r0, 8005dac <HAL_TIM_PWM_Init+0x5c>
{
 8005d52:	b510      	push	{r4, lr}
 8005d54:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d5a:	b313      	cbz	r3, 8005da2 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d62:	4621      	mov	r1, r4
 8005d64:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d68:	f7ff ff52 	bl	8005c10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005d82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005d96:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d9e:	2000      	movs	r0, #0
}
 8005da0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005da2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005da6:	f7fc fd15 	bl	80027d4 <HAL_TIM_PWM_MspInit>
 8005daa:	e7d7      	b.n	8005d5c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005dac:	2001      	movs	r0, #1
}
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005db0:	b360      	cbz	r0, 8005e0c <HAL_TIM_IC_Init+0x5c>
{
 8005db2:	b510      	push	{r4, lr}
 8005db4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005db6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005dba:	b313      	cbz	r3, 8005e02 <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f851 0b04 	ldr.w	r0, [r1], #4
 8005dc8:	f7ff ff22 	bl	8005c10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005dd6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005dda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005dde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005de2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005df2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005df6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005dfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005dfe:	2000      	movs	r0, #0
}
 8005e00:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005e02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8005e06:	f7fc fcfb 	bl	8002800 <HAL_TIM_IC_MspInit>
 8005e0a:	e7d7      	b.n	8005dbc <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8005e0c:	2001      	movs	r0, #1
}
 8005e0e:	4770      	bx	lr

08005e10 <TIM_OC2_SetConfig>:
{
 8005e10:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e12:	6a03      	ldr	r3, [r0, #32]
 8005e14:	f023 0310 	bic.w	r3, r3, #16
 8005e18:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005e1a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005e1c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005e1e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e20:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005e24:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	680d      	ldr	r5, [r1, #0]
 8005e2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005e2e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e32:	688d      	ldr	r5, [r1, #8]
 8005e34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e38:	4d1b      	ldr	r5, [pc, #108]	; (8005ea8 <TIM_OC2_SetConfig+0x98>)
 8005e3a:	42a8      	cmp	r0, r5
 8005e3c:	d007      	beq.n	8005e4e <TIM_OC2_SetConfig+0x3e>
 8005e3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005e42:	42a8      	cmp	r0, r5
 8005e44:	d003      	beq.n	8005e4e <TIM_OC2_SetConfig+0x3e>
 8005e46:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8005e4a:	42a8      	cmp	r0, r5
 8005e4c:	d106      	bne.n	8005e5c <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e52:	68cd      	ldr	r5, [r1, #12]
 8005e54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5c:	4d12      	ldr	r5, [pc, #72]	; (8005ea8 <TIM_OC2_SetConfig+0x98>)
 8005e5e:	42a8      	cmp	r0, r5
 8005e60:	d013      	beq.n	8005e8a <TIM_OC2_SetConfig+0x7a>
 8005e62:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005e66:	42a8      	cmp	r0, r5
 8005e68:	d00f      	beq.n	8005e8a <TIM_OC2_SetConfig+0x7a>
 8005e6a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005e6e:	42a8      	cmp	r0, r5
 8005e70:	d00b      	beq.n	8005e8a <TIM_OC2_SetConfig+0x7a>
 8005e72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e76:	42a8      	cmp	r0, r5
 8005e78:	d007      	beq.n	8005e8a <TIM_OC2_SetConfig+0x7a>
 8005e7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e7e:	42a8      	cmp	r0, r5
 8005e80:	d003      	beq.n	8005e8a <TIM_OC2_SetConfig+0x7a>
 8005e82:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005e86:	42a8      	cmp	r0, r5
 8005e88:	d107      	bne.n	8005e9a <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e8a:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e8e:	694c      	ldr	r4, [r1, #20]
 8005e90:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e94:	698c      	ldr	r4, [r1, #24]
 8005e96:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005e9a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e9c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e9e:	684a      	ldr	r2, [r1, #4]
 8005ea0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005ea2:	6203      	str	r3, [r0, #32]
}
 8005ea4:	bc30      	pop	{r4, r5}
 8005ea6:	4770      	bx	lr
 8005ea8:	40012c00 	.word	0x40012c00

08005eac <HAL_TIM_PWM_ConfigChannel>:
{
 8005eac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005eae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	f000 8095 	beq.w	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x136>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005ec2:	2a14      	cmp	r2, #20
 8005ec4:	f200 8088 	bhi.w	8005fd8 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005ec8:	e8df f002 	tbb	[pc, r2]
 8005ecc:	8686860b 	.word	0x8686860b
 8005ed0:	8686861f 	.word	0x8686861f
 8005ed4:	86868634 	.word	0x86868634
 8005ed8:	86868648 	.word	0x86868648
 8005edc:	8686865d 	.word	0x8686865d
 8005ee0:	71          	.byte	0x71
 8005ee1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee2:	6800      	ldr	r0, [r0, #0]
 8005ee4:	f7ff fc36 	bl	8005754 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	6993      	ldr	r3, [r2, #24]
 8005eec:	f043 0308 	orr.w	r3, r3, #8
 8005ef0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	6993      	ldr	r3, [r2, #24]
 8005ef6:	f023 0304 	bic.w	r3, r3, #4
 8005efa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	6993      	ldr	r3, [r2, #24]
 8005f00:	6929      	ldr	r1, [r5, #16]
 8005f02:	430b      	orrs	r3, r1
 8005f04:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2000      	movs	r0, #0
      break;
 8005f08:	e067      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	f7ff ff80 	bl	8005e10 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	6993      	ldr	r3, [r2, #24]
 8005f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f18:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	6993      	ldr	r3, [r2, #24]
 8005f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f22:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	6993      	ldr	r3, [r2, #24]
 8005f28:	6929      	ldr	r1, [r5, #16]
 8005f2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f2e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005f30:	2000      	movs	r0, #0
      break;
 8005f32:	e052      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f34:	6800      	ldr	r0, [r0, #0]
 8005f36:	f7ff fc65 	bl	8005804 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	69d3      	ldr	r3, [r2, #28]
 8005f3e:	f043 0308 	orr.w	r3, r3, #8
 8005f42:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f44:	6822      	ldr	r2, [r4, #0]
 8005f46:	69d3      	ldr	r3, [r2, #28]
 8005f48:	f023 0304 	bic.w	r3, r3, #4
 8005f4c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	69d3      	ldr	r3, [r2, #28]
 8005f52:	6929      	ldr	r1, [r5, #16]
 8005f54:	430b      	orrs	r3, r1
 8005f56:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2000      	movs	r0, #0
      break;
 8005f5a:	e03e      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f5c:	6800      	ldr	r0, [r0, #0]
 8005f5e:	f7ff fc9f 	bl	80058a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	69d3      	ldr	r3, [r2, #28]
 8005f66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f6a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	69d3      	ldr	r3, [r2, #28]
 8005f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f74:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	69d3      	ldr	r3, [r2, #28]
 8005f7a:	6929      	ldr	r1, [r5, #16]
 8005f7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f80:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005f82:	2000      	movs	r0, #0
      break;
 8005f84:	e029      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f86:	6800      	ldr	r0, [r0, #0]
 8005f88:	f7ff fcd8 	bl	800593c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f90:	f043 0308 	orr.w	r3, r3, #8
 8005f94:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f9a:	f023 0304 	bic.w	r3, r3, #4
 8005f9e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fa0:	6822      	ldr	r2, [r4, #0]
 8005fa2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005fa4:	6929      	ldr	r1, [r5, #16]
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005faa:	2000      	movs	r0, #0
      break;
 8005fac:	e015      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fae:	6800      	ldr	r0, [r0, #0]
 8005fb0:	f7ff fcfc 	bl	80059ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fbc:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc6:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005fcc:	6929      	ldr	r1, [r5, #16]
 8005fce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005fd2:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005fd4:	2000      	movs	r0, #0
      break;
 8005fd6:	e000      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8005fd8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005fe0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005fe2:	2002      	movs	r0, #2
 8005fe4:	e7fc      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

08005fe8 <TIM_TI1_SetConfig>:
{
 8005fe8:	b470      	push	{r4, r5, r6}
 8005fea:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fec:	6a04      	ldr	r4, [r0, #32]
 8005fee:	f024 0401 	bic.w	r4, r4, #1
 8005ff2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005ff6:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ff8:	4d18      	ldr	r5, [pc, #96]	; (800605c <TIM_TI1_SetConfig+0x74>)
 8005ffa:	42a8      	cmp	r0, r5
 8005ffc:	d01c      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
 8005ffe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006002:	d019      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
 8006004:	4a16      	ldr	r2, [pc, #88]	; (8006060 <TIM_TI1_SetConfig+0x78>)
 8006006:	4290      	cmp	r0, r2
 8006008:	d016      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
 800600a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800600e:	4290      	cmp	r0, r2
 8006010:	d012      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
 8006012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006016:	4290      	cmp	r0, r2
 8006018:	d00e      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
 800601a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800601e:	4290      	cmp	r0, r2
 8006020:	d00a      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
 8006022:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006026:	4290      	cmp	r0, r2
 8006028:	d006      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
 800602a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800602e:	4290      	cmp	r0, r2
 8006030:	d002      	beq.n	8006038 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006032:	f044 0201 	orr.w	r2, r4, #1
 8006036:	e003      	b.n	8006040 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006038:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800603c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006040:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	b2db      	uxtb	r3, r3
 8006048:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800604a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800604e:	f001 010a 	and.w	r1, r1, #10
 8006052:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8006054:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006056:	6201      	str	r1, [r0, #32]
}
 8006058:	bc70      	pop	{r4, r5, r6}
 800605a:	4770      	bx	lr
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40000400 	.word	0x40000400

08006064 <HAL_TIM_IC_ConfigChannel>:
{
 8006064:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006066:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d05a      	beq.n	8006124 <HAL_TIM_IC_ConfigChannel+0xc0>
 800606e:	4604      	mov	r4, r0
 8006070:	460d      	mov	r5, r1
 8006072:	2301      	movs	r3, #1
 8006074:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8006078:	b152      	cbz	r2, 8006090 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800607a:	2a04      	cmp	r2, #4
 800607c:	d01a      	beq.n	80060b4 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 800607e:	2a08      	cmp	r2, #8
 8006080:	d02b      	beq.n	80060da <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8006082:	2a0c      	cmp	r2, #12
 8006084:	d03b      	beq.n	80060fe <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8006086:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006088:	2300      	movs	r3, #0
 800608a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800608e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8006090:	68cb      	ldr	r3, [r1, #12]
 8006092:	684a      	ldr	r2, [r1, #4]
 8006094:	6809      	ldr	r1, [r1, #0]
 8006096:	6800      	ldr	r0, [r0, #0]
 8006098:	f7ff ffa6 	bl	8005fe8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	6993      	ldr	r3, [r2, #24]
 80060a0:	f023 030c 	bic.w	r3, r3, #12
 80060a4:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	6993      	ldr	r3, [r2, #24]
 80060aa:	68a9      	ldr	r1, [r5, #8]
 80060ac:	430b      	orrs	r3, r1
 80060ae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7e9      	b.n	8006088 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 80060b4:	68cb      	ldr	r3, [r1, #12]
 80060b6:	684a      	ldr	r2, [r1, #4]
 80060b8:	6809      	ldr	r1, [r1, #0]
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	f7ff fcb0 	bl	8005a20 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	6993      	ldr	r3, [r2, #24]
 80060c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060c8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060ca:	6822      	ldr	r2, [r4, #0]
 80060cc:	6993      	ldr	r3, [r2, #24]
 80060ce:	68a9      	ldr	r1, [r5, #8]
 80060d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80060d4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80060d6:	2000      	movs	r0, #0
 80060d8:	e7d6      	b.n	8006088 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80060da:	68cb      	ldr	r3, [r1, #12]
 80060dc:	684a      	ldr	r2, [r1, #4]
 80060de:	6809      	ldr	r1, [r1, #0]
 80060e0:	6800      	ldr	r0, [r0, #0]
 80060e2:	f7ff fcb8 	bl	8005a56 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	69d3      	ldr	r3, [r2, #28]
 80060ea:	f023 030c 	bic.w	r3, r3, #12
 80060ee:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060f0:	6822      	ldr	r2, [r4, #0]
 80060f2:	69d3      	ldr	r3, [r2, #28]
 80060f4:	68a9      	ldr	r1, [r5, #8]
 80060f6:	430b      	orrs	r3, r1
 80060f8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2000      	movs	r0, #0
 80060fc:	e7c4      	b.n	8006088 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 80060fe:	68cb      	ldr	r3, [r1, #12]
 8006100:	684a      	ldr	r2, [r1, #4]
 8006102:	6809      	ldr	r1, [r1, #0]
 8006104:	6800      	ldr	r0, [r0, #0]
 8006106:	f7ff fcc1 	bl	8005a8c <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	69d3      	ldr	r3, [r2, #28]
 800610e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006112:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006114:	6822      	ldr	r2, [r4, #0]
 8006116:	69d3      	ldr	r3, [r2, #28]
 8006118:	68a9      	ldr	r1, [r5, #8]
 800611a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800611e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006120:	2000      	movs	r0, #0
 8006122:	e7b1      	b.n	8006088 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8006124:	2002      	movs	r0, #2
 8006126:	e7b2      	b.n	800608e <HAL_TIM_IC_ConfigChannel+0x2a>

08006128 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006128:	f001 011f 	and.w	r1, r1, #31
 800612c:	2301      	movs	r3, #1
 800612e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006132:	6a03      	ldr	r3, [r0, #32]
 8006134:	ea23 030c 	bic.w	r3, r3, ip
 8006138:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800613a:	6a03      	ldr	r3, [r0, #32]
 800613c:	fa02 f101 	lsl.w	r1, r2, r1
 8006140:	430b      	orrs	r3, r1
 8006142:	6203      	str	r3, [r0, #32]
}
 8006144:	4770      	bx	lr
	...

08006148 <HAL_TIM_PWM_Start>:
{
 8006148:	b510      	push	{r4, lr}
 800614a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614c:	4608      	mov	r0, r1
 800614e:	2900      	cmp	r1, #0
 8006150:	d153      	bne.n	80061fa <HAL_TIM_PWM_Start+0xb2>
 8006152:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	bf18      	it	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 80a0 	bne.w	80062a4 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006164:	2800      	cmp	r0, #0
 8006166:	d173      	bne.n	8006250 <HAL_TIM_PWM_Start+0x108>
 8006168:	2302      	movs	r3, #2
 800616a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800616e:	2201      	movs	r2, #1
 8006170:	4601      	mov	r1, r0
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	f7ff ffd8 	bl	8006128 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	4a4d      	ldr	r2, [pc, #308]	; (80062b0 <HAL_TIM_PWM_Start+0x168>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x60>
 8006180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006184:	4293      	cmp	r3, r2
 8006186:	d00f      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x60>
 8006188:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800618c:	4293      	cmp	r3, r2
 800618e:	d00b      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x60>
 8006190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x60>
 8006198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x60>
 80061a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d103      	bne.n	80061b0 <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 80061a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	4a3f      	ldr	r2, [pc, #252]	; (80062b0 <HAL_TIM_PWM_Start+0x168>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d067      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d064      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
 80061be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d060      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
 80061c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d05c      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
 80061ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d058      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
 80061d6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80061da:	4293      	cmp	r3, r2
 80061dc:	d054      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
 80061de:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d050      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
 80061e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d04c      	beq.n	8006288 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80061f6:	2000      	movs	r0, #0
 80061f8:	e055      	b.n	80062a6 <HAL_TIM_PWM_Start+0x15e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fa:	2904      	cmp	r1, #4
 80061fc:	d00c      	beq.n	8006218 <HAL_TIM_PWM_Start+0xd0>
 80061fe:	2908      	cmp	r1, #8
 8006200:	d011      	beq.n	8006226 <HAL_TIM_PWM_Start+0xde>
 8006202:	290c      	cmp	r1, #12
 8006204:	d016      	beq.n	8006234 <HAL_TIM_PWM_Start+0xec>
 8006206:	2910      	cmp	r1, #16
 8006208:	d01b      	beq.n	8006242 <HAL_TIM_PWM_Start+0xfa>
 800620a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800620e:	b2db      	uxtb	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	bf18      	it	ne
 8006214:	2301      	movne	r3, #1
 8006216:	e7a2      	b.n	800615e <HAL_TIM_PWM_Start+0x16>
 8006218:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800621c:	b2db      	uxtb	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	bf18      	it	ne
 8006222:	2301      	movne	r3, #1
 8006224:	e79b      	b.n	800615e <HAL_TIM_PWM_Start+0x16>
 8006226:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800622a:	b2db      	uxtb	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	bf18      	it	ne
 8006230:	2301      	movne	r3, #1
 8006232:	e794      	b.n	800615e <HAL_TIM_PWM_Start+0x16>
 8006234:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	bf18      	it	ne
 800623e:	2301      	movne	r3, #1
 8006240:	e78d      	b.n	800615e <HAL_TIM_PWM_Start+0x16>
 8006242:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006246:	b2db      	uxtb	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	bf18      	it	ne
 800624c:	2301      	movne	r3, #1
 800624e:	e786      	b.n	800615e <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006250:	2804      	cmp	r0, #4
 8006252:	d009      	beq.n	8006268 <HAL_TIM_PWM_Start+0x120>
 8006254:	2808      	cmp	r0, #8
 8006256:	d00b      	beq.n	8006270 <HAL_TIM_PWM_Start+0x128>
 8006258:	280c      	cmp	r0, #12
 800625a:	d00d      	beq.n	8006278 <HAL_TIM_PWM_Start+0x130>
 800625c:	2810      	cmp	r0, #16
 800625e:	d00f      	beq.n	8006280 <HAL_TIM_PWM_Start+0x138>
 8006260:	2302      	movs	r3, #2
 8006262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006266:	e782      	b.n	800616e <HAL_TIM_PWM_Start+0x26>
 8006268:	2302      	movs	r3, #2
 800626a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800626e:	e77e      	b.n	800616e <HAL_TIM_PWM_Start+0x26>
 8006270:	2302      	movs	r3, #2
 8006272:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006276:	e77a      	b.n	800616e <HAL_TIM_PWM_Start+0x26>
 8006278:	2302      	movs	r3, #2
 800627a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800627e:	e776      	b.n	800616e <HAL_TIM_PWM_Start+0x26>
 8006280:	2302      	movs	r3, #2
 8006282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006286:	e772      	b.n	800616e <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006288:	6899      	ldr	r1, [r3, #8]
 800628a:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <HAL_TIM_PWM_Start+0x16c>)
 800628c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628e:	2a06      	cmp	r2, #6
 8006290:	d00a      	beq.n	80062a8 <HAL_TIM_PWM_Start+0x160>
 8006292:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006296:	d009      	beq.n	80062ac <HAL_TIM_PWM_Start+0x164>
      __HAL_TIM_ENABLE(htim);
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80062a0:	2000      	movs	r0, #0
 80062a2:	e000      	b.n	80062a6 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 80062a4:	2001      	movs	r0, #1
}
 80062a6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80062a8:	2000      	movs	r0, #0
 80062aa:	e7fc      	b.n	80062a6 <HAL_TIM_PWM_Start+0x15e>
 80062ac:	2000      	movs	r0, #0
 80062ae:	e7fa      	b.n	80062a6 <HAL_TIM_PWM_Start+0x15e>
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	00010007 	.word	0x00010007

080062b8 <HAL_TIM_IC_Start_IT>:
{
 80062b8:	b510      	push	{r4, lr}
 80062ba:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80062bc:	460b      	mov	r3, r1
 80062be:	bb19      	cbnz	r1, 8006308 <HAL_TIM_IC_Start_IT+0x50>
 80062c0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80062c4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d13a      	bne.n	8006340 <HAL_TIM_IC_Start_IT+0x88>
 80062ca:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80062ce:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80062d0:	2801      	cmp	r0, #1
 80062d2:	f040 80c0 	bne.w	8006456 <HAL_TIM_IC_Start_IT+0x19e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80062d6:	2a01      	cmp	r2, #1
 80062d8:	f040 80be 	bne.w	8006458 <HAL_TIM_IC_Start_IT+0x1a0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d13f      	bne.n	8006360 <HAL_TIM_IC_Start_IT+0xa8>
 80062e0:	2102      	movs	r1, #2
 80062e2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d156      	bne.n	8006398 <HAL_TIM_IC_Start_IT+0xe0>
 80062ea:	2102      	movs	r1, #2
 80062ec:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	f200 80b2 	bhi.w	800645a <HAL_TIM_IC_Start_IT+0x1a2>
 80062f6:	e8df f003 	tbb	[pc, r3]
 80062fa:	b05f      	.short	0xb05f
 80062fc:	b08eb0b0 	.word	0xb08eb0b0
 8006300:	b094b0b0 	.word	0xb094b0b0
 8006304:	b0b0      	.short	0xb0b0
 8006306:	9a          	.byte	0x9a
 8006307:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006308:	2904      	cmp	r1, #4
 800630a:	d009      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x68>
 800630c:	2908      	cmp	r1, #8
 800630e:	d00b      	beq.n	8006328 <HAL_TIM_IC_Start_IT+0x70>
 8006310:	290c      	cmp	r1, #12
 8006312:	d00d      	beq.n	8006330 <HAL_TIM_IC_Start_IT+0x78>
 8006314:	2910      	cmp	r1, #16
 8006316:	d00f      	beq.n	8006338 <HAL_TIM_IC_Start_IT+0x80>
 8006318:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800631c:	b2c0      	uxtb	r0, r0
 800631e:	e7d2      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0xe>
 8006320:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8006324:	b2c0      	uxtb	r0, r0
 8006326:	e7ce      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0xe>
 8006328:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800632c:	b2c0      	uxtb	r0, r0
 800632e:	e7ca      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0xe>
 8006330:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8006334:	b2c0      	uxtb	r0, r0
 8006336:	e7c6      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0xe>
 8006338:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800633c:	b2c0      	uxtb	r0, r0
 800633e:	e7c2      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006340:	2b04      	cmp	r3, #4
 8006342:	d005      	beq.n	8006350 <HAL_TIM_IC_Start_IT+0x98>
 8006344:	2b08      	cmp	r3, #8
 8006346:	d007      	beq.n	8006358 <HAL_TIM_IC_Start_IT+0xa0>
 8006348:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	e7bf      	b.n	80062d0 <HAL_TIM_IC_Start_IT+0x18>
 8006350:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	e7bb      	b.n	80062d0 <HAL_TIM_IC_Start_IT+0x18>
 8006358:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	e7b7      	b.n	80062d0 <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006360:	2b04      	cmp	r3, #4
 8006362:	d009      	beq.n	8006378 <HAL_TIM_IC_Start_IT+0xc0>
 8006364:	2b08      	cmp	r3, #8
 8006366:	d00b      	beq.n	8006380 <HAL_TIM_IC_Start_IT+0xc8>
 8006368:	2b0c      	cmp	r3, #12
 800636a:	d00d      	beq.n	8006388 <HAL_TIM_IC_Start_IT+0xd0>
 800636c:	2b10      	cmp	r3, #16
 800636e:	d00f      	beq.n	8006390 <HAL_TIM_IC_Start_IT+0xd8>
 8006370:	2102      	movs	r1, #2
 8006372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006376:	e7b6      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x2e>
 8006378:	2102      	movs	r1, #2
 800637a:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 800637e:	e7b2      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x2e>
 8006380:	2102      	movs	r1, #2
 8006382:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8006386:	e7ae      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x2e>
 8006388:	2102      	movs	r1, #2
 800638a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 800638e:	e7aa      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x2e>
 8006390:	2102      	movs	r1, #2
 8006392:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006396:	e7a6      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006398:	2b04      	cmp	r3, #4
 800639a:	d005      	beq.n	80063a8 <HAL_TIM_IC_Start_IT+0xf0>
 800639c:	2b08      	cmp	r3, #8
 800639e:	d007      	beq.n	80063b0 <HAL_TIM_IC_Start_IT+0xf8>
 80063a0:	2102      	movs	r1, #2
 80063a2:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 80063a6:	e7a3      	b.n	80062f0 <HAL_TIM_IC_Start_IT+0x38>
 80063a8:	2102      	movs	r1, #2
 80063aa:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063ae:	e79f      	b.n	80062f0 <HAL_TIM_IC_Start_IT+0x38>
 80063b0:	2102      	movs	r1, #2
 80063b2:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 80063b6:	e79b      	b.n	80062f0 <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063b8:	6821      	ldr	r1, [r4, #0]
 80063ba:	68ca      	ldr	r2, [r1, #12]
 80063bc:	f042 0202 	orr.w	r2, r2, #2
 80063c0:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063c2:	2201      	movs	r2, #1
 80063c4:	4619      	mov	r1, r3
 80063c6:	6820      	ldr	r0, [r4, #0]
 80063c8:	f7ff feae 	bl	8006128 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	4a26      	ldr	r2, [pc, #152]	; (8006468 <HAL_TIM_IC_Start_IT+0x1b0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d032      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
 80063d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d8:	d02f      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
 80063da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02b      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
 80063e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d027      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
 80063ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d023      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
 80063f2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01f      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
 80063fa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01b      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
 8006402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006406:	4293      	cmp	r3, r2
 8006408:	d017      	beq.n	800643a <HAL_TIM_IC_Start_IT+0x182>
      __HAL_TIM_ENABLE(htim);
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	2000      	movs	r0, #0
 8006414:	e020      	b.n	8006458 <HAL_TIM_IC_Start_IT+0x1a0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006416:	6821      	ldr	r1, [r4, #0]
 8006418:	68ca      	ldr	r2, [r1, #12]
 800641a:	f042 0204 	orr.w	r2, r2, #4
 800641e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8006420:	e7cf      	b.n	80063c2 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006422:	6821      	ldr	r1, [r4, #0]
 8006424:	68ca      	ldr	r2, [r1, #12]
 8006426:	f042 0208 	orr.w	r2, r2, #8
 800642a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800642c:	e7c9      	b.n	80063c2 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800642e:	6821      	ldr	r1, [r4, #0]
 8006430:	68ca      	ldr	r2, [r1, #12]
 8006432:	f042 0210 	orr.w	r2, r2, #16
 8006436:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8006438:	e7c3      	b.n	80063c2 <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643a:	6899      	ldr	r1, [r3, #8]
 800643c:	4a0b      	ldr	r2, [pc, #44]	; (800646c <HAL_TIM_IC_Start_IT+0x1b4>)
 800643e:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006440:	2a06      	cmp	r2, #6
 8006442:	d00c      	beq.n	800645e <HAL_TIM_IC_Start_IT+0x1a6>
 8006444:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006448:	d00b      	beq.n	8006462 <HAL_TIM_IC_Start_IT+0x1aa>
        __HAL_TIM_ENABLE(htim);
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f042 0201 	orr.w	r2, r2, #1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	2000      	movs	r0, #0
 8006454:	e000      	b.n	8006458 <HAL_TIM_IC_Start_IT+0x1a0>
    return HAL_ERROR;
 8006456:	2001      	movs	r0, #1
}
 8006458:	bd10      	pop	{r4, pc}
  switch (Channel)
 800645a:	4610      	mov	r0, r2
 800645c:	e7fc      	b.n	8006458 <HAL_TIM_IC_Start_IT+0x1a0>
 800645e:	2000      	movs	r0, #0
 8006460:	e7fa      	b.n	8006458 <HAL_TIM_IC_Start_IT+0x1a0>
 8006462:	2000      	movs	r0, #0
 8006464:	e7f8      	b.n	8006458 <HAL_TIM_IC_Start_IT+0x1a0>
 8006466:	bf00      	nop
 8006468:	40012c00 	.word	0x40012c00
 800646c:	00010007 	.word	0x00010007

08006470 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006470:	f001 011f 	and.w	r1, r1, #31
 8006474:	2304      	movs	r3, #4
 8006476:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800647a:	6a03      	ldr	r3, [r0, #32]
 800647c:	ea23 030c 	bic.w	r3, r3, ip
 8006480:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006482:	6a03      	ldr	r3, [r0, #32]
 8006484:	fa02 f101 	lsl.w	r1, r2, r1
 8006488:	430b      	orrs	r3, r1
 800648a:	6203      	str	r3, [r0, #32]
}
 800648c:	4770      	bx	lr
	...

08006490 <HAL_TIMEx_PWMN_Start>:
{
 8006490:	b510      	push	{r4, lr}
 8006492:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006494:	4608      	mov	r0, r1
 8006496:	2900      	cmp	r1, #0
 8006498:	d13b      	bne.n	8006512 <HAL_TIMEx_PWMN_Start+0x82>
 800649a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	bf18      	it	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d16a      	bne.n	8006580 <HAL_TIMEx_PWMN_Start+0xf0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d14a      	bne.n	8006544 <HAL_TIMEx_PWMN_Start+0xb4>
 80064ae:	2302      	movs	r3, #2
 80064b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80064b4:	2204      	movs	r2, #4
 80064b6:	4601      	mov	r1, r0
 80064b8:	6820      	ldr	r0, [r4, #0]
 80064ba:	f7ff ffd9 	bl	8006470 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c6:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	4a30      	ldr	r2, [pc, #192]	; (800658c <HAL_TIMEx_PWMN_Start+0xfc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d049      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d4:	d046      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
 80064d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80064da:	4293      	cmp	r3, r2
 80064dc:	d042      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
 80064de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d03e      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
 80064e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d03a      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
 80064ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d036      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
 80064f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d032      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
 80064fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006502:	4293      	cmp	r3, r2
 8006504:	d02e      	beq.n	8006564 <HAL_TIMEx_PWMN_Start+0xd4>
    __HAL_TIM_ENABLE(htim);
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800650e:	2000      	movs	r0, #0
 8006510:	e037      	b.n	8006582 <HAL_TIMEx_PWMN_Start+0xf2>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006512:	2904      	cmp	r1, #4
 8006514:	d008      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x98>
 8006516:	2908      	cmp	r1, #8
 8006518:	d00d      	beq.n	8006536 <HAL_TIMEx_PWMN_Start+0xa6>
 800651a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800651e:	b2db      	uxtb	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	bf18      	it	ne
 8006524:	2301      	movne	r3, #1
 8006526:	e7be      	b.n	80064a6 <HAL_TIMEx_PWMN_Start+0x16>
 8006528:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800652c:	b2db      	uxtb	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	bf18      	it	ne
 8006532:	2301      	movne	r3, #1
 8006534:	e7b7      	b.n	80064a6 <HAL_TIMEx_PWMN_Start+0x16>
 8006536:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800653a:	b2db      	uxtb	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	bf18      	it	ne
 8006540:	2301      	movne	r3, #1
 8006542:	e7b0      	b.n	80064a6 <HAL_TIMEx_PWMN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006544:	2804      	cmp	r0, #4
 8006546:	d005      	beq.n	8006554 <HAL_TIMEx_PWMN_Start+0xc4>
 8006548:	2808      	cmp	r0, #8
 800654a:	d007      	beq.n	800655c <HAL_TIMEx_PWMN_Start+0xcc>
 800654c:	2302      	movs	r3, #2
 800654e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8006552:	e7af      	b.n	80064b4 <HAL_TIMEx_PWMN_Start+0x24>
 8006554:	2302      	movs	r3, #2
 8006556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800655a:	e7ab      	b.n	80064b4 <HAL_TIMEx_PWMN_Start+0x24>
 800655c:	2302      	movs	r3, #2
 800655e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006562:	e7a7      	b.n	80064b4 <HAL_TIMEx_PWMN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <HAL_TIMEx_PWMN_Start+0x100>)
 8006568:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656a:	2a06      	cmp	r2, #6
 800656c:	d00a      	beq.n	8006584 <HAL_TIMEx_PWMN_Start+0xf4>
 800656e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006572:	d009      	beq.n	8006588 <HAL_TIMEx_PWMN_Start+0xf8>
      __HAL_TIM_ENABLE(htim);
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800657c:	2000      	movs	r0, #0
 800657e:	e000      	b.n	8006582 <HAL_TIMEx_PWMN_Start+0xf2>
    return HAL_ERROR;
 8006580:	2001      	movs	r0, #1
}
 8006582:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8006584:	2000      	movs	r0, #0
 8006586:	e7fc      	b.n	8006582 <HAL_TIMEx_PWMN_Start+0xf2>
 8006588:	2000      	movs	r0, #0
 800658a:	e7fa      	b.n	8006582 <HAL_TIMEx_PWMN_Start+0xf2>
 800658c:	40012c00 	.word	0x40012c00
 8006590:	00010007 	.word	0x00010007

08006594 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8006594:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d04c      	beq.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 800659c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800659e:	2301      	movs	r3, #1
 80065a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	2302      	movs	r3, #2
 80065a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80065aa:	6802      	ldr	r2, [r0, #0]
 80065ac:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80065ae:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065b0:	4d22      	ldr	r5, [pc, #136]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80065b2:	42aa      	cmp	r2, r5
 80065b4:	d007      	beq.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80065b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80065ba:	42aa      	cmp	r2, r5
 80065bc:	d003      	beq.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80065be:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80065c2:	42aa      	cmp	r2, r5
 80065c4:	d103      	bne.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x3a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ca:	684d      	ldr	r5, [r1, #4]
 80065cc:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80065ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065d6:	680d      	ldr	r5, [r1, #0]
 80065d8:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80065da:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065dc:	6803      	ldr	r3, [r0, #0]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01a      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e8:	d017      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80065ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80065f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80065fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00b      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006602:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006606:	4293      	cmp	r3, r2
 8006608:	d007      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800660a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006616:	4293      	cmp	r3, r2
 8006618:	d104      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0x90>
    tmpsmcr &= ~TIM_SMCR_MSM;
 800661a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800661e:	688a      	ldr	r2, [r1, #8]
 8006620:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8006622:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006624:	2301      	movs	r3, #1
 8006626:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800662a:	2300      	movs	r3, #0
 800662c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006630:	4618      	mov	r0, r3
}
 8006632:	bc30      	pop	{r4, r5}
 8006634:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006636:	2002      	movs	r0, #2
}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40012c00 	.word	0x40012c00

08006640 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8006640:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d060      	beq.n	800670a <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 8006648:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800664a:	2301      	movs	r3, #1
 800664c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006650:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006656:	688a      	ldr	r2, [r1, #8]
 8006658:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800665a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800665e:	684a      	ldr	r2, [r1, #4]
 8006660:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006666:	680a      	ldr	r2, [r1, #0]
 8006668:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800666a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666e:	690a      	ldr	r2, [r1, #16]
 8006670:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006676:	694a      	ldr	r2, [r1, #20]
 8006678:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800667a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800667e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006680:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006682:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006686:	698a      	ldr	r2, [r1, #24]
 8006688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800668c:	6802      	ldr	r2, [r0, #0]
 800668e:	4c20      	ldr	r4, [pc, #128]	; (8006710 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8006690:	42a2      	cmp	r2, r4
 8006692:	d007      	beq.n	80066a4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006694:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006698:	42a2      	cmp	r2, r4
 800669a:	d003      	beq.n	80066a4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800669c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80066a0:	42a2      	cmp	r2, r4
 80066a2:	d103      	bne.n	80066ac <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a8:	69cc      	ldr	r4, [r1, #28]
 80066aa:	4323      	orrs	r3, r4
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066ac:	4c18      	ldr	r4, [pc, #96]	; (8006710 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80066ae:	42a2      	cmp	r2, r4
 80066b0:	d007      	beq.n	80066c2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80066b2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80066b6:	42a2      	cmp	r2, r4
 80066b8:	d003      	beq.n	80066c2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80066ba:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80066be:	42a2      	cmp	r2, r4
 80066c0:	d11b      	bne.n	80066fa <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066c6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80066c8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d0:	6a0c      	ldr	r4, [r1, #32]
 80066d2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80066d8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80066da:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80066dc:	4c0c      	ldr	r4, [pc, #48]	; (8006710 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80066de:	42a2      	cmp	r2, r4
 80066e0:	d007      	beq.n	80066f2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80066e2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80066e6:	42a2      	cmp	r2, r4
 80066e8:	d003      	beq.n	80066f2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80066ea:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80066ee:	42a2      	cmp	r2, r4
 80066f0:	d103      	bne.n	80066fa <HAL_TIMEx_ConfigBreakDeadTime+0xba>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066f6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80066f8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80066fa:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80066fc:	2300      	movs	r3, #0
 80066fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006702:	4618      	mov	r0, r3
}
 8006704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006708:	4770      	bx	lr
  __HAL_LOCK(htim);
 800670a:	2002      	movs	r0, #2
}
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00

08006714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006718:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800671a:	6883      	ldr	r3, [r0, #8]
 800671c:	6902      	ldr	r2, [r0, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	6942      	ldr	r2, [r0, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	69c2      	ldr	r2, [r0, #28]
 8006726:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006728:	6808      	ldr	r0, [r1, #0]
 800672a:	4a96      	ldr	r2, [pc, #600]	; (8006984 <UART_SetConfig+0x270>)
 800672c:	4002      	ands	r2, r0
 800672e:	4313      	orrs	r3, r2
 8006730:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	6853      	ldr	r3, [r2, #4]
 8006736:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800673a:	68e1      	ldr	r1, [r4, #12]
 800673c:	430b      	orrs	r3, r1
 800673e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006740:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	4b90      	ldr	r3, [pc, #576]	; (8006988 <UART_SetConfig+0x274>)
 8006746:	429a      	cmp	r2, r3
 8006748:	d001      	beq.n	800674e <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800674a:	6a23      	ldr	r3, [r4, #32]
 800674c:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800674e:	6893      	ldr	r3, [r2, #8]
 8006750:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006754:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006758:	430b      	orrs	r3, r1
 800675a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006760:	f023 030f 	bic.w	r3, r3, #15
 8006764:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006766:	430b      	orrs	r3, r1
 8006768:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	4a87      	ldr	r2, [pc, #540]	; (800698c <UART_SetConfig+0x278>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d010      	beq.n	8006794 <UART_SetConfig+0x80>
 8006772:	4a87      	ldr	r2, [pc, #540]	; (8006990 <UART_SetConfig+0x27c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d021      	beq.n	80067bc <UART_SetConfig+0xa8>
 8006778:	4a86      	ldr	r2, [pc, #536]	; (8006994 <UART_SetConfig+0x280>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d037      	beq.n	80067ee <UART_SetConfig+0xda>
 800677e:	4a86      	ldr	r2, [pc, #536]	; (8006998 <UART_SetConfig+0x284>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d05c      	beq.n	800683e <UART_SetConfig+0x12a>
 8006784:	4a85      	ldr	r2, [pc, #532]	; (800699c <UART_SetConfig+0x288>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d06b      	beq.n	8006862 <UART_SetConfig+0x14e>
 800678a:	4a7f      	ldr	r2, [pc, #508]	; (8006988 <UART_SetConfig+0x274>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d07d      	beq.n	800688c <UART_SetConfig+0x178>
 8006790:	2210      	movs	r2, #16
 8006792:	e03a      	b.n	800680a <UART_SetConfig+0xf6>
 8006794:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8006798:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800679c:	f002 0203 	and.w	r2, r2, #3
 80067a0:	2a03      	cmp	r2, #3
 80067a2:	d809      	bhi.n	80067b8 <UART_SetConfig+0xa4>
 80067a4:	e8df f002 	tbb	[pc, r2]
 80067a8:	06870402 	.word	0x06870402
 80067ac:	2201      	movs	r2, #1
 80067ae:	e02c      	b.n	800680a <UART_SetConfig+0xf6>
 80067b0:	2204      	movs	r2, #4
 80067b2:	e02a      	b.n	800680a <UART_SetConfig+0xf6>
 80067b4:	2208      	movs	r2, #8
 80067b6:	e028      	b.n	800680a <UART_SetConfig+0xf6>
 80067b8:	2210      	movs	r2, #16
 80067ba:	e026      	b.n	800680a <UART_SetConfig+0xf6>
 80067bc:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80067c0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80067c4:	f002 020c 	and.w	r2, r2, #12
 80067c8:	2a0c      	cmp	r2, #12
 80067ca:	d80e      	bhi.n	80067ea <UART_SetConfig+0xd6>
 80067cc:	e8df f002 	tbb	[pc, r2]
 80067d0:	0d0d0d07 	.word	0x0d0d0d07
 80067d4:	0d0d0d09 	.word	0x0d0d0d09
 80067d8:	0d0d0d75 	.word	0x0d0d0d75
 80067dc:	0b          	.byte	0x0b
 80067dd:	00          	.byte	0x00
 80067de:	2200      	movs	r2, #0
 80067e0:	e013      	b.n	800680a <UART_SetConfig+0xf6>
 80067e2:	2204      	movs	r2, #4
 80067e4:	e011      	b.n	800680a <UART_SetConfig+0xf6>
 80067e6:	2208      	movs	r2, #8
 80067e8:	e00f      	b.n	800680a <UART_SetConfig+0xf6>
 80067ea:	2210      	movs	r2, #16
 80067ec:	e00d      	b.n	800680a <UART_SetConfig+0xf6>
 80067ee:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80067f2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80067f6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80067fa:	2a20      	cmp	r2, #32
 80067fc:	d05f      	beq.n	80068be <UART_SetConfig+0x1aa>
 80067fe:	d81a      	bhi.n	8006836 <UART_SetConfig+0x122>
 8006800:	2a00      	cmp	r2, #0
 8006802:	d05e      	beq.n	80068c2 <UART_SetConfig+0x1ae>
 8006804:	2a10      	cmp	r2, #16
 8006806:	d15e      	bne.n	80068c6 <UART_SetConfig+0x1b2>
 8006808:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800680a:	495f      	ldr	r1, [pc, #380]	; (8006988 <UART_SetConfig+0x274>)
 800680c:	428b      	cmp	r3, r1
 800680e:	d076      	beq.n	80068fe <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006810:	69e0      	ldr	r0, [r4, #28]
 8006812:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006816:	f000 80c9 	beq.w	80069ac <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 800681a:	2a08      	cmp	r2, #8
 800681c:	f200 8134 	bhi.w	8006a88 <UART_SetConfig+0x374>
 8006820:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006824:	011900f7 	.word	0x011900f7
 8006828:	013200f5 	.word	0x013200f5
 800682c:	0132011c 	.word	0x0132011c
 8006830:	01320132 	.word	0x01320132
 8006834:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006836:	2a30      	cmp	r2, #48	; 0x30
 8006838:	d147      	bne.n	80068ca <UART_SetConfig+0x1b6>
 800683a:	2208      	movs	r2, #8
 800683c:	e7e5      	b.n	800680a <UART_SetConfig+0xf6>
 800683e:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8006842:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006846:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800684a:	2a80      	cmp	r2, #128	; 0x80
 800684c:	d03f      	beq.n	80068ce <UART_SetConfig+0x1ba>
 800684e:	d804      	bhi.n	800685a <UART_SetConfig+0x146>
 8006850:	b3fa      	cbz	r2, 80068d2 <UART_SetConfig+0x1be>
 8006852:	2a40      	cmp	r2, #64	; 0x40
 8006854:	d13f      	bne.n	80068d6 <UART_SetConfig+0x1c2>
 8006856:	2204      	movs	r2, #4
 8006858:	e7d7      	b.n	800680a <UART_SetConfig+0xf6>
 800685a:	2ac0      	cmp	r2, #192	; 0xc0
 800685c:	d13d      	bne.n	80068da <UART_SetConfig+0x1c6>
 800685e:	2208      	movs	r2, #8
 8006860:	e7d3      	b.n	800680a <UART_SetConfig+0xf6>
 8006862:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8006866:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800686a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800686e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006872:	d034      	beq.n	80068de <UART_SetConfig+0x1ca>
 8006874:	d805      	bhi.n	8006882 <UART_SetConfig+0x16e>
 8006876:	b3a2      	cbz	r2, 80068e2 <UART_SetConfig+0x1ce>
 8006878:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800687c:	d133      	bne.n	80068e6 <UART_SetConfig+0x1d2>
 800687e:	2204      	movs	r2, #4
 8006880:	e7c3      	b.n	800680a <UART_SetConfig+0xf6>
 8006882:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006886:	d130      	bne.n	80068ea <UART_SetConfig+0x1d6>
 8006888:	2208      	movs	r2, #8
 800688a:	e7be      	b.n	800680a <UART_SetConfig+0xf6>
 800688c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8006890:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006894:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006898:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800689c:	d027      	beq.n	80068ee <UART_SetConfig+0x1da>
 800689e:	d805      	bhi.n	80068ac <UART_SetConfig+0x198>
 80068a0:	b33a      	cbz	r2, 80068f2 <UART_SetConfig+0x1de>
 80068a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80068a6:	d126      	bne.n	80068f6 <UART_SetConfig+0x1e2>
 80068a8:	2204      	movs	r2, #4
 80068aa:	e7ae      	b.n	800680a <UART_SetConfig+0xf6>
 80068ac:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80068b0:	d123      	bne.n	80068fa <UART_SetConfig+0x1e6>
 80068b2:	2208      	movs	r2, #8
 80068b4:	e7a9      	b.n	800680a <UART_SetConfig+0xf6>
 80068b6:	2202      	movs	r2, #2
 80068b8:	e7a7      	b.n	800680a <UART_SetConfig+0xf6>
 80068ba:	2202      	movs	r2, #2
 80068bc:	e7a5      	b.n	800680a <UART_SetConfig+0xf6>
 80068be:	2202      	movs	r2, #2
 80068c0:	e7a3      	b.n	800680a <UART_SetConfig+0xf6>
 80068c2:	2200      	movs	r2, #0
 80068c4:	e7a1      	b.n	800680a <UART_SetConfig+0xf6>
 80068c6:	2210      	movs	r2, #16
 80068c8:	e79f      	b.n	800680a <UART_SetConfig+0xf6>
 80068ca:	2210      	movs	r2, #16
 80068cc:	e79d      	b.n	800680a <UART_SetConfig+0xf6>
 80068ce:	2202      	movs	r2, #2
 80068d0:	e79b      	b.n	800680a <UART_SetConfig+0xf6>
 80068d2:	2200      	movs	r2, #0
 80068d4:	e799      	b.n	800680a <UART_SetConfig+0xf6>
 80068d6:	2210      	movs	r2, #16
 80068d8:	e797      	b.n	800680a <UART_SetConfig+0xf6>
 80068da:	2210      	movs	r2, #16
 80068dc:	e795      	b.n	800680a <UART_SetConfig+0xf6>
 80068de:	2202      	movs	r2, #2
 80068e0:	e793      	b.n	800680a <UART_SetConfig+0xf6>
 80068e2:	2200      	movs	r2, #0
 80068e4:	e791      	b.n	800680a <UART_SetConfig+0xf6>
 80068e6:	2210      	movs	r2, #16
 80068e8:	e78f      	b.n	800680a <UART_SetConfig+0xf6>
 80068ea:	2210      	movs	r2, #16
 80068ec:	e78d      	b.n	800680a <UART_SetConfig+0xf6>
 80068ee:	2202      	movs	r2, #2
 80068f0:	e78b      	b.n	800680a <UART_SetConfig+0xf6>
 80068f2:	2200      	movs	r2, #0
 80068f4:	e789      	b.n	800680a <UART_SetConfig+0xf6>
 80068f6:	2210      	movs	r2, #16
 80068f8:	e787      	b.n	800680a <UART_SetConfig+0xf6>
 80068fa:	2210      	movs	r2, #16
 80068fc:	e785      	b.n	800680a <UART_SetConfig+0xf6>
    switch (clocksource)
 80068fe:	2a08      	cmp	r2, #8
 8006900:	f200 80b2 	bhi.w	8006a68 <UART_SetConfig+0x354>
 8006904:	e8df f002 	tbb	[pc, r2]
 8006908:	b03bb008 	.word	0xb03bb008
 800690c:	b0b0b038 	.word	0xb0b0b038
 8006910:	05          	.byte	0x05
 8006911:	00          	.byte	0x00
 8006912:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006916:	e004      	b.n	8006922 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fe fd3c 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800691c:	2800      	cmp	r0, #0
 800691e:	f000 80a5 	beq.w	8006a6c <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006922:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006924:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <UART_SetConfig+0x28c>)
 8006926:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800692a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800692e:	6865      	ldr	r5, [r4, #4]
 8006930:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006934:	4299      	cmp	r1, r3
 8006936:	f200 809b 	bhi.w	8006a70 <UART_SetConfig+0x35c>
 800693a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800693e:	f200 8099 	bhi.w	8006a74 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006942:	2600      	movs	r6, #0
 8006944:	4633      	mov	r3, r6
 8006946:	4631      	mov	r1, r6
 8006948:	f7f9 ff9c 	bl	8000884 <__aeabi_uldivmod>
 800694c:	0209      	lsls	r1, r1, #8
 800694e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006952:	0200      	lsls	r0, r0, #8
 8006954:	086b      	lsrs	r3, r5, #1
 8006956:	18c0      	adds	r0, r0, r3
 8006958:	462a      	mov	r2, r5
 800695a:	4633      	mov	r3, r6
 800695c:	f141 0100 	adc.w	r1, r1, #0
 8006960:	f7f9 ff90 	bl	8000884 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006964:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006968:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <UART_SetConfig+0x290>)
 800696a:	429a      	cmp	r2, r3
 800696c:	f200 8084 	bhi.w	8006a78 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	60d8      	str	r0, [r3, #12]
 8006974:	4630      	mov	r0, r6
 8006976:	e065      	b.n	8006a44 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8006978:	f7fe fbc6 	bl	8005108 <HAL_RCC_GetSysClockFreq>
        break;
 800697c:	e7ce      	b.n	800691c <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800697e:	480a      	ldr	r0, [pc, #40]	; (80069a8 <UART_SetConfig+0x294>)
 8006980:	e7cf      	b.n	8006922 <UART_SetConfig+0x20e>
 8006982:	bf00      	nop
 8006984:	cfff69f3 	.word	0xcfff69f3
 8006988:	40008000 	.word	0x40008000
 800698c:	40013800 	.word	0x40013800
 8006990:	40004400 	.word	0x40004400
 8006994:	40004800 	.word	0x40004800
 8006998:	40004c00 	.word	0x40004c00
 800699c:	40005000 	.word	0x40005000
 80069a0:	08007e84 	.word	0x08007e84
 80069a4:	000ffcff 	.word	0x000ffcff
 80069a8:	00f42400 	.word	0x00f42400
    switch (clocksource)
 80069ac:	2a08      	cmp	r2, #8
 80069ae:	d865      	bhi.n	8006a7c <UART_SetConfig+0x368>
 80069b0:	e8df f002 	tbb	[pc, r2]
 80069b4:	64052707 	.word	0x64052707
 80069b8:	6464642a 	.word	0x6464642a
 80069bc:	0b          	.byte	0x0b
 80069bd:	00          	.byte	0x00
 80069be:	4835      	ldr	r0, [pc, #212]	; (8006a94 <UART_SetConfig+0x380>)
 80069c0:	e003      	b.n	80069ca <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c2:	f7fe fce7 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d05a      	beq.n	8006a80 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80069cc:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <UART_SetConfig+0x384>)
 80069ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80069d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80069d6:	6862      	ldr	r2, [r4, #4]
 80069d8:	0853      	lsrs	r3, r2, #1
 80069da:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80069de:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e2:	f1a0 0210 	sub.w	r2, r0, #16
 80069e6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d84a      	bhi.n	8006a84 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ee:	b283      	uxth	r3, r0
 80069f0:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069f4:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80069f8:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	60d8      	str	r0, [r3, #12]
 80069fe:	2000      	movs	r0, #0
 8006a00:	e020      	b.n	8006a44 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a02:	f7fe fcd9 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006a06:	e7de      	b.n	80069c6 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a08:	f7fe fb7e 	bl	8005108 <HAL_RCC_GetSysClockFreq>
        break;
 8006a0c:	e7db      	b.n	80069c6 <UART_SetConfig+0x2b2>
    switch (clocksource)
 8006a0e:	4821      	ldr	r0, [pc, #132]	; (8006a94 <UART_SetConfig+0x380>)
 8006a10:	e003      	b.n	8006a1a <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a12:	f7fe fcbf 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d038      	beq.n	8006a8c <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <UART_SetConfig+0x384>)
 8006a1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a22:	fbb0 f0f3 	udiv	r0, r0, r3
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006a2c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a30:	f1a0 0210 	sub.w	r2, r0, #16
 8006a34:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d829      	bhi.n	8006a90 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	b280      	uxth	r0, r0
 8006a40:	60d8      	str	r0, [r3, #12]
 8006a42:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a4a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006a52:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a56:	f7fe fcaf 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006a5a:	e7dc      	b.n	8006a16 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a5c:	f7fe fb54 	bl	8005108 <HAL_RCC_GetSysClockFreq>
        break;
 8006a60:	e7d9      	b.n	8006a16 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 8006a62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a66:	e7d8      	b.n	8006a1a <UART_SetConfig+0x306>
    switch (clocksource)
 8006a68:	2001      	movs	r0, #1
 8006a6a:	e7eb      	b.n	8006a44 <UART_SetConfig+0x330>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	e7e9      	b.n	8006a44 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006a70:	2001      	movs	r0, #1
 8006a72:	e7e7      	b.n	8006a44 <UART_SetConfig+0x330>
 8006a74:	2001      	movs	r0, #1
 8006a76:	e7e5      	b.n	8006a44 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8006a78:	2001      	movs	r0, #1
 8006a7a:	e7e3      	b.n	8006a44 <UART_SetConfig+0x330>
    switch (clocksource)
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	e7e1      	b.n	8006a44 <UART_SetConfig+0x330>
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7df      	b.n	8006a44 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006a84:	2001      	movs	r0, #1
 8006a86:	e7dd      	b.n	8006a44 <UART_SetConfig+0x330>
    switch (clocksource)
 8006a88:	2001      	movs	r0, #1
 8006a8a:	e7db      	b.n	8006a44 <UART_SetConfig+0x330>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e7d9      	b.n	8006a44 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006a90:	2001      	movs	r0, #1
 8006a92:	e7d7      	b.n	8006a44 <UART_SetConfig+0x330>
 8006a94:	00f42400 	.word	0x00f42400
 8006a98:	08007e84 	.word	0x08007e84

08006a9c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a9e:	f013 0f01 	tst.w	r3, #1
 8006aa2:	d006      	beq.n	8006ab2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa4:	6802      	ldr	r2, [r0, #0]
 8006aa6:	6853      	ldr	r3, [r2, #4]
 8006aa8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006aac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ab2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006ab4:	f013 0f02 	tst.w	r3, #2
 8006ab8:	d006      	beq.n	8006ac8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aba:	6802      	ldr	r2, [r0, #0]
 8006abc:	6853      	ldr	r3, [r2, #4]
 8006abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ac8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006aca:	f013 0f04 	tst.w	r3, #4
 8006ace:	d006      	beq.n	8006ade <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ad0:	6802      	ldr	r2, [r0, #0]
 8006ad2:	6853      	ldr	r3, [r2, #4]
 8006ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006ada:	430b      	orrs	r3, r1
 8006adc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ade:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006ae0:	f013 0f08 	tst.w	r3, #8
 8006ae4:	d006      	beq.n	8006af4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ae6:	6802      	ldr	r2, [r0, #0]
 8006ae8:	6853      	ldr	r3, [r2, #4]
 8006aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006af4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006af6:	f013 0f10 	tst.w	r3, #16
 8006afa:	d006      	beq.n	8006b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006afc:	6802      	ldr	r2, [r0, #0]
 8006afe:	6893      	ldr	r3, [r2, #8]
 8006b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b04:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b0c:	f013 0f20 	tst.w	r3, #32
 8006b10:	d006      	beq.n	8006b20 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b12:	6802      	ldr	r2, [r0, #0]
 8006b14:	6893      	ldr	r3, [r2, #8]
 8006b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b26:	d00a      	beq.n	8006b3e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b28:	6802      	ldr	r2, [r0, #0]
 8006b2a:	6853      	ldr	r3, [r2, #4]
 8006b2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b30:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006b32:	430b      	orrs	r3, r1
 8006b34:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3c:	d00b      	beq.n	8006b56 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b44:	d006      	beq.n	8006b54 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b46:	6802      	ldr	r2, [r0, #0]
 8006b48:	6853      	ldr	r3, [r2, #4]
 8006b4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006b4e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006b50:	430b      	orrs	r3, r1
 8006b52:	6053      	str	r3, [r2, #4]
  }
}
 8006b54:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b56:	6802      	ldr	r2, [r0, #0]
 8006b58:	6853      	ldr	r3, [r2, #4]
 8006b5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6053      	str	r3, [r2, #4]
 8006b64:	e7eb      	b.n	8006b3e <UART_AdvFeatureConfig+0xa2>

08006b66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	4616      	mov	r6, r2
 8006b70:	4699      	mov	r9, r3
 8006b72:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b76:	682c      	ldr	r4, [r5, #0]
 8006b78:	69e4      	ldr	r4, [r4, #28]
 8006b7a:	ea37 0304 	bics.w	r3, r7, r4
 8006b7e:	bf0c      	ite	eq
 8006b80:	f04f 0c01 	moveq.w	ip, #1
 8006b84:	f04f 0c00 	movne.w	ip, #0
 8006b88:	45b4      	cmp	ip, r6
 8006b8a:	d157      	bne.n	8006c3c <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006b90:	d0f1      	beq.n	8006b76 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b92:	f7fb ffa1 	bl	8002ad8 <HAL_GetTick>
 8006b96:	eba0 0009 	sub.w	r0, r0, r9
 8006b9a:	4540      	cmp	r0, r8
 8006b9c:	d82f      	bhi.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x98>
 8006b9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ba2:	d02c      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	f012 0f04 	tst.w	r2, #4
 8006bac:	d0e3      	beq.n	8006b76 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006bb4:	d0df      	beq.n	8006b76 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bbc:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	e852 3f00 	ldrex	r3, [r2]
 8006bc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	e842 3100 	strex	r1, r3, [r2]
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d1f6      	bne.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	f102 0308 	add.w	r3, r2, #8
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	3208      	adds	r2, #8
 8006bde:	e842 3100 	strex	r1, r3, [r2]
 8006be2:	2900      	cmp	r1, #0
 8006be4:	d1f3      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8006be6:	2320      	movs	r3, #32
 8006be8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006bec:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 8006bfa:	2003      	movs	r0, #3
 8006bfc:	e01f      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bfe:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	e852 3f00 	ldrex	r3, [r2]
 8006c04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	e842 3100 	strex	r1, r3, [r2]
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d1f6      	bne.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	f102 0308 	add.w	r3, r2, #8
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	3208      	adds	r2, #8
 8006c20:	e842 3100 	strex	r1, r3, [r2]
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d1f3      	bne.n	8006c10 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c2e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006c32:	2300      	movs	r3, #0
 8006c34:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006c38:	2003      	movs	r0, #3
 8006c3a:	e000      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8006c3c:	2000      	movs	r0, #0
}
 8006c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c42 <UART_CheckIdleState>:
{
 8006c42:	b530      	push	{r4, r5, lr}
 8006c44:	b083      	sub	sp, #12
 8006c46:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006c4e:	f7fb ff43 	bl	8002ad8 <HAL_GetTick>
 8006c52:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c54:	6822      	ldr	r2, [r4, #0]
 8006c56:	6812      	ldr	r2, [r2, #0]
 8006c58:	f012 0f08 	tst.w	r2, #8
 8006c5c:	d10f      	bne.n	8006c7e <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f013 0f04 	tst.w	r3, #4
 8006c66:	d118      	bne.n	8006c9a <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006c68:	2320      	movs	r3, #32
 8006c6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	2000      	movs	r0, #0
 8006c74:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006c76:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006c7a:	b003      	add	sp, #12
 8006c7c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	4603      	mov	r3, r0
 8006c86:	2200      	movs	r2, #0
 8006c88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f7ff ff6a 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d0e3      	beq.n	8006c5e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006c96:	2003      	movs	r0, #3
 8006c98:	e7ef      	b.n	8006c7a <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff ff5c 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d0da      	beq.n	8006c68 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006cb2:	2003      	movs	r0, #3
 8006cb4:	e7e1      	b.n	8006c7a <UART_CheckIdleState+0x38>

08006cb6 <HAL_UART_Init>:
  if (huart == NULL)
 8006cb6:	b378      	cbz	r0, 8006d18 <HAL_UART_Init+0x62>
{
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006cbc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006cc0:	b30b      	cbz	r3, 8006d06 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	2324      	movs	r3, #36	; 0x24
 8006cc4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff fd1e 	bl	8006714 <UART_SetConfig>
 8006cd8:	2801      	cmp	r0, #1
 8006cda:	d013      	beq.n	8006d04 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cde:	b9bb      	cbnz	r3, 8006d10 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	6853      	ldr	r3, [r2, #4]
 8006ce4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006ce8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	6893      	ldr	r3, [r2, #8]
 8006cee:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006cf2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff ff9f 	bl	8006c42 <UART_CheckIdleState>
}
 8006d04:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006d06:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006d0a:	f7fb fd21 	bl	8002750 <HAL_UART_MspInit>
 8006d0e:	e7d8      	b.n	8006cc2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7ff fec3 	bl	8006a9c <UART_AdvFeatureConfig>
 8006d16:	e7e3      	b.n	8006ce0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006d18:	2001      	movs	r0, #1
}
 8006d1a:	4770      	bx	lr

08006d1c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d1c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006d1e:	b92b      	cbnz	r3, 8006d2c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d26:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006d2a:	4770      	bx	lr
{
 8006d2c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d2e:	6803      	ldr	r3, [r0, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d36:	6899      	ldr	r1, [r3, #8]
 8006d38:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d3a:	4d09      	ldr	r5, [pc, #36]	; (8006d60 <UARTEx_SetNbDataToProcess+0x44>)
 8006d3c:	5c6b      	ldrb	r3, [r5, r1]
 8006d3e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d40:	4c08      	ldr	r4, [pc, #32]	; (8006d64 <UARTEx_SetNbDataToProcess+0x48>)
 8006d42:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d44:	fb93 f3f1 	sdiv	r3, r3, r1
 8006d48:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d4c:	5cab      	ldrb	r3, [r5, r2]
 8006d4e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d50:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d56:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006d5a:	bc30      	pop	{r4, r5}
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	08007ea4 	.word	0x08007ea4
 8006d64:	08007e9c 	.word	0x08007e9c

08006d68 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006d68:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d018      	beq.n	8006da2 <HAL_UARTEx_DisableFifoMode+0x3a>
 8006d70:	2301      	movs	r3, #1
 8006d72:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d76:	2324      	movs	r3, #36	; 0x24
 8006d78:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d7c:	6803      	ldr	r3, [r0, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d80:	6819      	ldr	r1, [r3, #0]
 8006d82:	f021 0101 	bic.w	r1, r1, #1
 8006d86:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d88:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d90:	6801      	ldr	r1, [r0, #0]
 8006d92:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d9a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006d9e:	4618      	mov	r0, r3
 8006da0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006da2:	2002      	movs	r0, #2
}
 8006da4:	4770      	bx	lr

08006da6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006da6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006da8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d01d      	beq.n	8006dec <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006db0:	4604      	mov	r4, r0
 8006db2:	2301      	movs	r3, #1
 8006db4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006db8:	2324      	movs	r3, #36	; 0x24
 8006dba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dbe:	6803      	ldr	r3, [r0, #0]
 8006dc0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	f022 0201 	bic.w	r2, r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dca:	6802      	ldr	r2, [r0, #0]
 8006dcc:	6893      	ldr	r3, [r2, #8]
 8006dce:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006dd2:	4319      	orrs	r1, r3
 8006dd4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006dd6:	f7ff ffa1 	bl	8006d1c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006dde:	2320      	movs	r3, #32
 8006de0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006de4:	2000      	movs	r0, #0
 8006de6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006dec:	2002      	movs	r0, #2
 8006dee:	e7fc      	b.n	8006dea <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006df0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006df0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006df2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d01d      	beq.n	8006e36 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e02:	2324      	movs	r3, #36	; 0x24
 8006e04:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e08:	6803      	ldr	r3, [r0, #0]
 8006e0a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e14:	6802      	ldr	r2, [r0, #0]
 8006e16:	6893      	ldr	r3, [r2, #8]
 8006e18:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006e1c:	4319      	orrs	r1, r3
 8006e1e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e20:	f7ff ff7c 	bl	8006d1c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e28:	2320      	movs	r3, #32
 8006e2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006e2e:	2000      	movs	r0, #0
 8006e30:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006e34:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e36:	2002      	movs	r0, #2
 8006e38:	e7fc      	b.n	8006e34 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006e3c <__errno>:
 8006e3c:	4b01      	ldr	r3, [pc, #4]	; (8006e44 <__errno+0x8>)
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	2000000c 	.word	0x2000000c

08006e48 <__libc_init_array>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	4d0d      	ldr	r5, [pc, #52]	; (8006e80 <__libc_init_array+0x38>)
 8006e4c:	4c0d      	ldr	r4, [pc, #52]	; (8006e84 <__libc_init_array+0x3c>)
 8006e4e:	1b64      	subs	r4, r4, r5
 8006e50:	10a4      	asrs	r4, r4, #2
 8006e52:	2600      	movs	r6, #0
 8006e54:	42a6      	cmp	r6, r4
 8006e56:	d109      	bne.n	8006e6c <__libc_init_array+0x24>
 8006e58:	4d0b      	ldr	r5, [pc, #44]	; (8006e88 <__libc_init_array+0x40>)
 8006e5a:	4c0c      	ldr	r4, [pc, #48]	; (8006e8c <__libc_init_array+0x44>)
 8006e5c:	f000 fffa 	bl	8007e54 <_init>
 8006e60:	1b64      	subs	r4, r4, r5
 8006e62:	10a4      	asrs	r4, r4, #2
 8006e64:	2600      	movs	r6, #0
 8006e66:	42a6      	cmp	r6, r4
 8006e68:	d105      	bne.n	8006e76 <__libc_init_array+0x2e>
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e70:	4798      	blx	r3
 8006e72:	3601      	adds	r6, #1
 8006e74:	e7ee      	b.n	8006e54 <__libc_init_array+0xc>
 8006e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7a:	4798      	blx	r3
 8006e7c:	3601      	adds	r6, #1
 8006e7e:	e7f2      	b.n	8006e66 <__libc_init_array+0x1e>
 8006e80:	080082c4 	.word	0x080082c4
 8006e84:	080082c4 	.word	0x080082c4
 8006e88:	080082c4 	.word	0x080082c4
 8006e8c:	080082c8 	.word	0x080082c8

08006e90 <memset>:
 8006e90:	4402      	add	r2, r0
 8006e92:	4603      	mov	r3, r0
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d100      	bne.n	8006e9a <memset+0xa>
 8006e98:	4770      	bx	lr
 8006e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9e:	e7f9      	b.n	8006e94 <memset+0x4>

08006ea0 <cosf>:
 8006ea0:	ee10 3a10 	vmov	r3, s0
 8006ea4:	b507      	push	{r0, r1, r2, lr}
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <cosf+0x80>)
 8006ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	4293      	cmp	r3, r2
 8006eae:	dc06      	bgt.n	8006ebe <cosf+0x1e>
 8006eb0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8006f24 <cosf+0x84>
 8006eb4:	b003      	add	sp, #12
 8006eb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eba:	f000 bb1d 	b.w	80074f8 <__kernel_cosf>
 8006ebe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006ec2:	db04      	blt.n	8006ece <cosf+0x2e>
 8006ec4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006ec8:	b003      	add	sp, #12
 8006eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ece:	4668      	mov	r0, sp
 8006ed0:	f000 f9d2 	bl	8007278 <__ieee754_rem_pio2f>
 8006ed4:	f000 0003 	and.w	r0, r0, #3
 8006ed8:	2801      	cmp	r0, #1
 8006eda:	d009      	beq.n	8006ef0 <cosf+0x50>
 8006edc:	2802      	cmp	r0, #2
 8006ede:	d010      	beq.n	8006f02 <cosf+0x62>
 8006ee0:	b9b0      	cbnz	r0, 8006f10 <cosf+0x70>
 8006ee2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ee6:	ed9d 0a00 	vldr	s0, [sp]
 8006eea:	f000 fb05 	bl	80074f8 <__kernel_cosf>
 8006eee:	e7eb      	b.n	8006ec8 <cosf+0x28>
 8006ef0:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ef4:	ed9d 0a00 	vldr	s0, [sp]
 8006ef8:	f000 fdd4 	bl	8007aa4 <__kernel_sinf>
 8006efc:	eeb1 0a40 	vneg.f32	s0, s0
 8006f00:	e7e2      	b.n	8006ec8 <cosf+0x28>
 8006f02:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f06:	ed9d 0a00 	vldr	s0, [sp]
 8006f0a:	f000 faf5 	bl	80074f8 <__kernel_cosf>
 8006f0e:	e7f5      	b.n	8006efc <cosf+0x5c>
 8006f10:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f14:	ed9d 0a00 	vldr	s0, [sp]
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f000 fdc3 	bl	8007aa4 <__kernel_sinf>
 8006f1e:	e7d3      	b.n	8006ec8 <cosf+0x28>
 8006f20:	3f490fd8 	.word	0x3f490fd8
 8006f24:	00000000 	.word	0x00000000

08006f28 <sinf>:
 8006f28:	ee10 3a10 	vmov	r3, s0
 8006f2c:	b507      	push	{r0, r1, r2, lr}
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <sinf+0x84>)
 8006f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f34:	4293      	cmp	r3, r2
 8006f36:	dc07      	bgt.n	8006f48 <sinf+0x20>
 8006f38:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006fb0 <sinf+0x88>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	b003      	add	sp, #12
 8006f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f44:	f000 bdae 	b.w	8007aa4 <__kernel_sinf>
 8006f48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f4c:	db04      	blt.n	8006f58 <sinf+0x30>
 8006f4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006f52:	b003      	add	sp, #12
 8006f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f58:	4668      	mov	r0, sp
 8006f5a:	f000 f98d 	bl	8007278 <__ieee754_rem_pio2f>
 8006f5e:	f000 0003 	and.w	r0, r0, #3
 8006f62:	2801      	cmp	r0, #1
 8006f64:	d00a      	beq.n	8006f7c <sinf+0x54>
 8006f66:	2802      	cmp	r0, #2
 8006f68:	d00f      	beq.n	8006f8a <sinf+0x62>
 8006f6a:	b9c0      	cbnz	r0, 8006f9e <sinf+0x76>
 8006f6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f70:	ed9d 0a00 	vldr	s0, [sp]
 8006f74:	2001      	movs	r0, #1
 8006f76:	f000 fd95 	bl	8007aa4 <__kernel_sinf>
 8006f7a:	e7ea      	b.n	8006f52 <sinf+0x2a>
 8006f7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f80:	ed9d 0a00 	vldr	s0, [sp]
 8006f84:	f000 fab8 	bl	80074f8 <__kernel_cosf>
 8006f88:	e7e3      	b.n	8006f52 <sinf+0x2a>
 8006f8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f8e:	ed9d 0a00 	vldr	s0, [sp]
 8006f92:	2001      	movs	r0, #1
 8006f94:	f000 fd86 	bl	8007aa4 <__kernel_sinf>
 8006f98:	eeb1 0a40 	vneg.f32	s0, s0
 8006f9c:	e7d9      	b.n	8006f52 <sinf+0x2a>
 8006f9e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fa2:	ed9d 0a00 	vldr	s0, [sp]
 8006fa6:	f000 faa7 	bl	80074f8 <__kernel_cosf>
 8006faa:	e7f5      	b.n	8006f98 <sinf+0x70>
 8006fac:	3f490fd8 	.word	0x3f490fd8
 8006fb0:	00000000 	.word	0x00000000

08006fb4 <atan2f>:
 8006fb4:	f000 b83e 	b.w	8007034 <__ieee754_atan2f>

08006fb8 <fmodf>:
 8006fb8:	b508      	push	{r3, lr}
 8006fba:	ed2d 8b02 	vpush	{d8}
 8006fbe:	eef0 8a40 	vmov.f32	s17, s0
 8006fc2:	eeb0 8a60 	vmov.f32	s16, s1
 8006fc6:	f000 f8d5 	bl	8007174 <__ieee754_fmodf>
 8006fca:	eef4 8a48 	vcmp.f32	s17, s16
 8006fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd2:	d60c      	bvs.n	8006fee <fmodf+0x36>
 8006fd4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006ff4 <fmodf+0x3c>
 8006fd8:	eeb4 8a68 	vcmp.f32	s16, s17
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	d105      	bne.n	8006fee <fmodf+0x36>
 8006fe2:	f7ff ff2b 	bl	8006e3c <__errno>
 8006fe6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006fea:	2321      	movs	r3, #33	; 0x21
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	ecbd 8b02 	vpop	{d8}
 8006ff2:	bd08      	pop	{r3, pc}
 8006ff4:	00000000 	.word	0x00000000

08006ff8 <sqrtf>:
 8006ff8:	b508      	push	{r3, lr}
 8006ffa:	ed2d 8b02 	vpush	{d8}
 8006ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8007002:	f000 fa75 	bl	80074f0 <__ieee754_sqrtf>
 8007006:	eeb4 8a48 	vcmp.f32	s16, s16
 800700a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700e:	d60c      	bvs.n	800702a <sqrtf+0x32>
 8007010:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007030 <sqrtf+0x38>
 8007014:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701c:	d505      	bpl.n	800702a <sqrtf+0x32>
 800701e:	f7ff ff0d 	bl	8006e3c <__errno>
 8007022:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007026:	2321      	movs	r3, #33	; 0x21
 8007028:	6003      	str	r3, [r0, #0]
 800702a:	ecbd 8b02 	vpop	{d8}
 800702e:	bd08      	pop	{r3, pc}
 8007030:	00000000 	.word	0x00000000

08007034 <__ieee754_atan2f>:
 8007034:	ee10 2a90 	vmov	r2, s1
 8007038:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800703c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007040:	b510      	push	{r4, lr}
 8007042:	eef0 7a40 	vmov.f32	s15, s0
 8007046:	dc06      	bgt.n	8007056 <__ieee754_atan2f+0x22>
 8007048:	ee10 0a10 	vmov	r0, s0
 800704c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007050:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007054:	dd04      	ble.n	8007060 <__ieee754_atan2f+0x2c>
 8007056:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800705a:	eeb0 0a67 	vmov.f32	s0, s15
 800705e:	bd10      	pop	{r4, pc}
 8007060:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007064:	d103      	bne.n	800706e <__ieee754_atan2f+0x3a>
 8007066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800706a:	f000 bd63 	b.w	8007b34 <atanf>
 800706e:	1794      	asrs	r4, r2, #30
 8007070:	f004 0402 	and.w	r4, r4, #2
 8007074:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007078:	b943      	cbnz	r3, 800708c <__ieee754_atan2f+0x58>
 800707a:	2c02      	cmp	r4, #2
 800707c:	d05e      	beq.n	800713c <__ieee754_atan2f+0x108>
 800707e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007150 <__ieee754_atan2f+0x11c>
 8007082:	2c03      	cmp	r4, #3
 8007084:	bf08      	it	eq
 8007086:	eef0 7a47 	vmoveq.f32	s15, s14
 800708a:	e7e6      	b.n	800705a <__ieee754_atan2f+0x26>
 800708c:	b941      	cbnz	r1, 80070a0 <__ieee754_atan2f+0x6c>
 800708e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007154 <__ieee754_atan2f+0x120>
 8007092:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007158 <__ieee754_atan2f+0x124>
 8007096:	2800      	cmp	r0, #0
 8007098:	bfb8      	it	lt
 800709a:	eef0 7a40 	vmovlt.f32	s15, s0
 800709e:	e7dc      	b.n	800705a <__ieee754_atan2f+0x26>
 80070a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80070a4:	d110      	bne.n	80070c8 <__ieee754_atan2f+0x94>
 80070a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80070ae:	d107      	bne.n	80070c0 <__ieee754_atan2f+0x8c>
 80070b0:	2c02      	cmp	r4, #2
 80070b2:	d846      	bhi.n	8007142 <__ieee754_atan2f+0x10e>
 80070b4:	4b29      	ldr	r3, [pc, #164]	; (800715c <__ieee754_atan2f+0x128>)
 80070b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070ba:	edd4 7a00 	vldr	s15, [r4]
 80070be:	e7cc      	b.n	800705a <__ieee754_atan2f+0x26>
 80070c0:	2c02      	cmp	r4, #2
 80070c2:	d841      	bhi.n	8007148 <__ieee754_atan2f+0x114>
 80070c4:	4b26      	ldr	r3, [pc, #152]	; (8007160 <__ieee754_atan2f+0x12c>)
 80070c6:	e7f6      	b.n	80070b6 <__ieee754_atan2f+0x82>
 80070c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070cc:	d0df      	beq.n	800708e <__ieee754_atan2f+0x5a>
 80070ce:	1a5b      	subs	r3, r3, r1
 80070d0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80070d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80070d8:	da1a      	bge.n	8007110 <__ieee754_atan2f+0xdc>
 80070da:	2a00      	cmp	r2, #0
 80070dc:	da01      	bge.n	80070e2 <__ieee754_atan2f+0xae>
 80070de:	313c      	adds	r1, #60	; 0x3c
 80070e0:	db19      	blt.n	8007116 <__ieee754_atan2f+0xe2>
 80070e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80070e6:	f000 fdf9 	bl	8007cdc <fabsf>
 80070ea:	f000 fd23 	bl	8007b34 <atanf>
 80070ee:	eef0 7a40 	vmov.f32	s15, s0
 80070f2:	2c01      	cmp	r4, #1
 80070f4:	d012      	beq.n	800711c <__ieee754_atan2f+0xe8>
 80070f6:	2c02      	cmp	r4, #2
 80070f8:	d017      	beq.n	800712a <__ieee754_atan2f+0xf6>
 80070fa:	2c00      	cmp	r4, #0
 80070fc:	d0ad      	beq.n	800705a <__ieee754_atan2f+0x26>
 80070fe:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007164 <__ieee754_atan2f+0x130>
 8007102:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007106:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007168 <__ieee754_atan2f+0x134>
 800710a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800710e:	e7a4      	b.n	800705a <__ieee754_atan2f+0x26>
 8007110:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007154 <__ieee754_atan2f+0x120>
 8007114:	e7ed      	b.n	80070f2 <__ieee754_atan2f+0xbe>
 8007116:	eddf 7a15 	vldr	s15, [pc, #84]	; 800716c <__ieee754_atan2f+0x138>
 800711a:	e7ea      	b.n	80070f2 <__ieee754_atan2f+0xbe>
 800711c:	ee17 3a90 	vmov	r3, s15
 8007120:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	e797      	b.n	800705a <__ieee754_atan2f+0x26>
 800712a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007164 <__ieee754_atan2f+0x130>
 800712e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007132:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007168 <__ieee754_atan2f+0x134>
 8007136:	ee70 7a67 	vsub.f32	s15, s0, s15
 800713a:	e78e      	b.n	800705a <__ieee754_atan2f+0x26>
 800713c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007168 <__ieee754_atan2f+0x134>
 8007140:	e78b      	b.n	800705a <__ieee754_atan2f+0x26>
 8007142:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007170 <__ieee754_atan2f+0x13c>
 8007146:	e788      	b.n	800705a <__ieee754_atan2f+0x26>
 8007148:	eddf 7a08 	vldr	s15, [pc, #32]	; 800716c <__ieee754_atan2f+0x138>
 800714c:	e785      	b.n	800705a <__ieee754_atan2f+0x26>
 800714e:	bf00      	nop
 8007150:	c0490fdb 	.word	0xc0490fdb
 8007154:	3fc90fdb 	.word	0x3fc90fdb
 8007158:	bfc90fdb 	.word	0xbfc90fdb
 800715c:	08007eac 	.word	0x08007eac
 8007160:	08007eb8 	.word	0x08007eb8
 8007164:	33bbbd2e 	.word	0x33bbbd2e
 8007168:	40490fdb 	.word	0x40490fdb
 800716c:	00000000 	.word	0x00000000
 8007170:	3f490fdb 	.word	0x3f490fdb

08007174 <__ieee754_fmodf>:
 8007174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007176:	ee10 5a90 	vmov	r5, s1
 800717a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800717e:	d009      	beq.n	8007194 <__ieee754_fmodf+0x20>
 8007180:	ee10 2a10 	vmov	r2, s0
 8007184:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007188:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800718c:	da02      	bge.n	8007194 <__ieee754_fmodf+0x20>
 800718e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007192:	dd04      	ble.n	800719e <__ieee754_fmodf+0x2a>
 8007194:	ee60 0a20 	vmul.f32	s1, s0, s1
 8007198:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719e:	42a3      	cmp	r3, r4
 80071a0:	dbfc      	blt.n	800719c <__ieee754_fmodf+0x28>
 80071a2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80071a6:	d105      	bne.n	80071b4 <__ieee754_fmodf+0x40>
 80071a8:	4b32      	ldr	r3, [pc, #200]	; (8007274 <__ieee754_fmodf+0x100>)
 80071aa:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80071ae:	ed93 0a00 	vldr	s0, [r3]
 80071b2:	e7f3      	b.n	800719c <__ieee754_fmodf+0x28>
 80071b4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80071b8:	d13f      	bne.n	800723a <__ieee754_fmodf+0xc6>
 80071ba:	0219      	lsls	r1, r3, #8
 80071bc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80071c0:	2900      	cmp	r1, #0
 80071c2:	dc37      	bgt.n	8007234 <__ieee754_fmodf+0xc0>
 80071c4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80071c8:	d13d      	bne.n	8007246 <__ieee754_fmodf+0xd2>
 80071ca:	0227      	lsls	r7, r4, #8
 80071cc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80071d0:	2f00      	cmp	r7, #0
 80071d2:	da35      	bge.n	8007240 <__ieee754_fmodf+0xcc>
 80071d4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80071d8:	bfbb      	ittet	lt
 80071da:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80071de:	1a12      	sublt	r2, r2, r0
 80071e0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80071e4:	4093      	lsllt	r3, r2
 80071e6:	bfa8      	it	ge
 80071e8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80071ec:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80071f0:	bfb5      	itete	lt
 80071f2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80071f6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80071fa:	1a52      	sublt	r2, r2, r1
 80071fc:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8007200:	bfb8      	it	lt
 8007202:	4094      	lsllt	r4, r2
 8007204:	1a40      	subs	r0, r0, r1
 8007206:	1b1a      	subs	r2, r3, r4
 8007208:	bb00      	cbnz	r0, 800724c <__ieee754_fmodf+0xd8>
 800720a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800720e:	bf38      	it	cc
 8007210:	4613      	movcc	r3, r2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0c8      	beq.n	80071a8 <__ieee754_fmodf+0x34>
 8007216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800721a:	db1f      	blt.n	800725c <__ieee754_fmodf+0xe8>
 800721c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007220:	db1f      	blt.n	8007262 <__ieee754_fmodf+0xee>
 8007222:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007226:	317f      	adds	r1, #127	; 0x7f
 8007228:	4333      	orrs	r3, r6
 800722a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800722e:	ee00 3a10 	vmov	s0, r3
 8007232:	e7b3      	b.n	800719c <__ieee754_fmodf+0x28>
 8007234:	3801      	subs	r0, #1
 8007236:	0049      	lsls	r1, r1, #1
 8007238:	e7c2      	b.n	80071c0 <__ieee754_fmodf+0x4c>
 800723a:	15d8      	asrs	r0, r3, #23
 800723c:	387f      	subs	r0, #127	; 0x7f
 800723e:	e7c1      	b.n	80071c4 <__ieee754_fmodf+0x50>
 8007240:	3901      	subs	r1, #1
 8007242:	007f      	lsls	r7, r7, #1
 8007244:	e7c4      	b.n	80071d0 <__ieee754_fmodf+0x5c>
 8007246:	15e1      	asrs	r1, r4, #23
 8007248:	397f      	subs	r1, #127	; 0x7f
 800724a:	e7c3      	b.n	80071d4 <__ieee754_fmodf+0x60>
 800724c:	2a00      	cmp	r2, #0
 800724e:	da02      	bge.n	8007256 <__ieee754_fmodf+0xe2>
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	3801      	subs	r0, #1
 8007254:	e7d7      	b.n	8007206 <__ieee754_fmodf+0x92>
 8007256:	d0a7      	beq.n	80071a8 <__ieee754_fmodf+0x34>
 8007258:	0053      	lsls	r3, r2, #1
 800725a:	e7fa      	b.n	8007252 <__ieee754_fmodf+0xde>
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	3901      	subs	r1, #1
 8007260:	e7d9      	b.n	8007216 <__ieee754_fmodf+0xa2>
 8007262:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8007266:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800726a:	3182      	adds	r1, #130	; 0x82
 800726c:	410b      	asrs	r3, r1
 800726e:	4333      	orrs	r3, r6
 8007270:	e7dd      	b.n	800722e <__ieee754_fmodf+0xba>
 8007272:	bf00      	nop
 8007274:	08007ec4 	.word	0x08007ec4

08007278 <__ieee754_rem_pio2f>:
 8007278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727a:	ee10 6a10 	vmov	r6, s0
 800727e:	4b8e      	ldr	r3, [pc, #568]	; (80074b8 <__ieee754_rem_pio2f+0x240>)
 8007280:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007284:	429d      	cmp	r5, r3
 8007286:	b087      	sub	sp, #28
 8007288:	eef0 7a40 	vmov.f32	s15, s0
 800728c:	4604      	mov	r4, r0
 800728e:	dc05      	bgt.n	800729c <__ieee754_rem_pio2f+0x24>
 8007290:	2300      	movs	r3, #0
 8007292:	ed80 0a00 	vstr	s0, [r0]
 8007296:	6043      	str	r3, [r0, #4]
 8007298:	2000      	movs	r0, #0
 800729a:	e01a      	b.n	80072d2 <__ieee754_rem_pio2f+0x5a>
 800729c:	4b87      	ldr	r3, [pc, #540]	; (80074bc <__ieee754_rem_pio2f+0x244>)
 800729e:	429d      	cmp	r5, r3
 80072a0:	dc46      	bgt.n	8007330 <__ieee754_rem_pio2f+0xb8>
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80074c0 <__ieee754_rem_pio2f+0x248>
 80072a8:	4b86      	ldr	r3, [pc, #536]	; (80074c4 <__ieee754_rem_pio2f+0x24c>)
 80072aa:	f025 050f 	bic.w	r5, r5, #15
 80072ae:	dd1f      	ble.n	80072f0 <__ieee754_rem_pio2f+0x78>
 80072b0:	429d      	cmp	r5, r3
 80072b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072b6:	d00e      	beq.n	80072d6 <__ieee754_rem_pio2f+0x5e>
 80072b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80074c8 <__ieee754_rem_pio2f+0x250>
 80072bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80072c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072c4:	ed80 0a00 	vstr	s0, [r0]
 80072c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072cc:	2001      	movs	r0, #1
 80072ce:	edc4 7a01 	vstr	s15, [r4, #4]
 80072d2:	b007      	add	sp, #28
 80072d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80074cc <__ieee754_rem_pio2f+0x254>
 80072da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80074d0 <__ieee754_rem_pio2f+0x258>
 80072de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80072e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072ea:	edc0 6a00 	vstr	s13, [r0]
 80072ee:	e7eb      	b.n	80072c8 <__ieee754_rem_pio2f+0x50>
 80072f0:	429d      	cmp	r5, r3
 80072f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80072f6:	d00e      	beq.n	8007316 <__ieee754_rem_pio2f+0x9e>
 80072f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80074c8 <__ieee754_rem_pio2f+0x250>
 80072fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007300:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007304:	ed80 0a00 	vstr	s0, [r0]
 8007308:	ee77 7a87 	vadd.f32	s15, s15, s14
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	edc4 7a01 	vstr	s15, [r4, #4]
 8007314:	e7dd      	b.n	80072d2 <__ieee754_rem_pio2f+0x5a>
 8007316:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80074cc <__ieee754_rem_pio2f+0x254>
 800731a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80074d0 <__ieee754_rem_pio2f+0x258>
 800731e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007322:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007326:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800732a:	edc0 6a00 	vstr	s13, [r0]
 800732e:	e7eb      	b.n	8007308 <__ieee754_rem_pio2f+0x90>
 8007330:	4b68      	ldr	r3, [pc, #416]	; (80074d4 <__ieee754_rem_pio2f+0x25c>)
 8007332:	429d      	cmp	r5, r3
 8007334:	dc72      	bgt.n	800741c <__ieee754_rem_pio2f+0x1a4>
 8007336:	f000 fcd1 	bl	8007cdc <fabsf>
 800733a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80074d8 <__ieee754_rem_pio2f+0x260>
 800733e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007342:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800734a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800734e:	ee17 0a90 	vmov	r0, s15
 8007352:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80074c0 <__ieee754_rem_pio2f+0x248>
 8007356:	eea7 0a67 	vfms.f32	s0, s14, s15
 800735a:	281f      	cmp	r0, #31
 800735c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80074c8 <__ieee754_rem_pio2f+0x250>
 8007360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007364:	eeb1 6a47 	vneg.f32	s12, s14
 8007368:	ee70 6a67 	vsub.f32	s13, s0, s15
 800736c:	ee16 2a90 	vmov	r2, s13
 8007370:	dc1c      	bgt.n	80073ac <__ieee754_rem_pio2f+0x134>
 8007372:	495a      	ldr	r1, [pc, #360]	; (80074dc <__ieee754_rem_pio2f+0x264>)
 8007374:	1e47      	subs	r7, r0, #1
 8007376:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800737a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800737e:	428b      	cmp	r3, r1
 8007380:	d014      	beq.n	80073ac <__ieee754_rem_pio2f+0x134>
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	ed94 7a00 	vldr	s14, [r4]
 8007388:	ee30 0a47 	vsub.f32	s0, s0, s14
 800738c:	2e00      	cmp	r6, #0
 800738e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007392:	ed84 0a01 	vstr	s0, [r4, #4]
 8007396:	da9c      	bge.n	80072d2 <__ieee754_rem_pio2f+0x5a>
 8007398:	eeb1 7a47 	vneg.f32	s14, s14
 800739c:	eeb1 0a40 	vneg.f32	s0, s0
 80073a0:	ed84 7a00 	vstr	s14, [r4]
 80073a4:	ed84 0a01 	vstr	s0, [r4, #4]
 80073a8:	4240      	negs	r0, r0
 80073aa:	e792      	b.n	80072d2 <__ieee754_rem_pio2f+0x5a>
 80073ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80073b0:	15eb      	asrs	r3, r5, #23
 80073b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80073b6:	2d08      	cmp	r5, #8
 80073b8:	dde3      	ble.n	8007382 <__ieee754_rem_pio2f+0x10a>
 80073ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 80074cc <__ieee754_rem_pio2f+0x254>
 80073be:	eddf 5a44 	vldr	s11, [pc, #272]	; 80074d0 <__ieee754_rem_pio2f+0x258>
 80073c2:	eef0 6a40 	vmov.f32	s13, s0
 80073c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80073ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80073ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 80073d2:	eef0 7a40 	vmov.f32	s15, s0
 80073d6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80073da:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80073de:	ee15 2a90 	vmov	r2, s11
 80073e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80073e6:	1a5b      	subs	r3, r3, r1
 80073e8:	2b19      	cmp	r3, #25
 80073ea:	dc04      	bgt.n	80073f6 <__ieee754_rem_pio2f+0x17e>
 80073ec:	edc4 5a00 	vstr	s11, [r4]
 80073f0:	eeb0 0a66 	vmov.f32	s0, s13
 80073f4:	e7c6      	b.n	8007384 <__ieee754_rem_pio2f+0x10c>
 80073f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80074e0 <__ieee754_rem_pio2f+0x268>
 80073fa:	eeb0 0a66 	vmov.f32	s0, s13
 80073fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007402:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007406:	eddf 6a37 	vldr	s13, [pc, #220]	; 80074e4 <__ieee754_rem_pio2f+0x26c>
 800740a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800740e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007412:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007416:	ed84 7a00 	vstr	s14, [r4]
 800741a:	e7b3      	b.n	8007384 <__ieee754_rem_pio2f+0x10c>
 800741c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007420:	db06      	blt.n	8007430 <__ieee754_rem_pio2f+0x1b8>
 8007422:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007426:	edc0 7a01 	vstr	s15, [r0, #4]
 800742a:	edc0 7a00 	vstr	s15, [r0]
 800742e:	e733      	b.n	8007298 <__ieee754_rem_pio2f+0x20>
 8007430:	15ea      	asrs	r2, r5, #23
 8007432:	3a86      	subs	r2, #134	; 0x86
 8007434:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007440:	eddf 6a29 	vldr	s13, [pc, #164]	; 80074e8 <__ieee754_rem_pio2f+0x270>
 8007444:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800744c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007450:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007454:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007458:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800745c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007460:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007468:	eef5 7a40 	vcmp.f32	s15, #0.0
 800746c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007470:	edcd 7a05 	vstr	s15, [sp, #20]
 8007474:	d11e      	bne.n	80074b4 <__ieee754_rem_pio2f+0x23c>
 8007476:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	bf14      	ite	ne
 8007480:	2302      	movne	r3, #2
 8007482:	2301      	moveq	r3, #1
 8007484:	4919      	ldr	r1, [pc, #100]	; (80074ec <__ieee754_rem_pio2f+0x274>)
 8007486:	9101      	str	r1, [sp, #4]
 8007488:	2102      	movs	r1, #2
 800748a:	9100      	str	r1, [sp, #0]
 800748c:	a803      	add	r0, sp, #12
 800748e:	4621      	mov	r1, r4
 8007490:	f000 f892 	bl	80075b8 <__kernel_rem_pio2f>
 8007494:	2e00      	cmp	r6, #0
 8007496:	f6bf af1c 	bge.w	80072d2 <__ieee754_rem_pio2f+0x5a>
 800749a:	edd4 7a00 	vldr	s15, [r4]
 800749e:	eef1 7a67 	vneg.f32	s15, s15
 80074a2:	edc4 7a00 	vstr	s15, [r4]
 80074a6:	edd4 7a01 	vldr	s15, [r4, #4]
 80074aa:	eef1 7a67 	vneg.f32	s15, s15
 80074ae:	edc4 7a01 	vstr	s15, [r4, #4]
 80074b2:	e779      	b.n	80073a8 <__ieee754_rem_pio2f+0x130>
 80074b4:	2303      	movs	r3, #3
 80074b6:	e7e5      	b.n	8007484 <__ieee754_rem_pio2f+0x20c>
 80074b8:	3f490fd8 	.word	0x3f490fd8
 80074bc:	4016cbe3 	.word	0x4016cbe3
 80074c0:	3fc90f80 	.word	0x3fc90f80
 80074c4:	3fc90fd0 	.word	0x3fc90fd0
 80074c8:	37354443 	.word	0x37354443
 80074cc:	37354400 	.word	0x37354400
 80074d0:	2e85a308 	.word	0x2e85a308
 80074d4:	43490f80 	.word	0x43490f80
 80074d8:	3f22f984 	.word	0x3f22f984
 80074dc:	08007ecc 	.word	0x08007ecc
 80074e0:	2e85a300 	.word	0x2e85a300
 80074e4:	248d3132 	.word	0x248d3132
 80074e8:	43800000 	.word	0x43800000
 80074ec:	08007f4c 	.word	0x08007f4c

080074f0 <__ieee754_sqrtf>:
 80074f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80074f4:	4770      	bx	lr
	...

080074f8 <__kernel_cosf>:
 80074f8:	ee10 3a10 	vmov	r3, s0
 80074fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007500:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007504:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007508:	da05      	bge.n	8007516 <__kernel_cosf+0x1e>
 800750a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800750e:	ee17 2a90 	vmov	r2, s15
 8007512:	2a00      	cmp	r2, #0
 8007514:	d03d      	beq.n	8007592 <__kernel_cosf+0x9a>
 8007516:	ee60 5a00 	vmul.f32	s11, s0, s0
 800751a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007598 <__kernel_cosf+0xa0>
 800751e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800759c <__kernel_cosf+0xa4>
 8007522:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80075a0 <__kernel_cosf+0xa8>
 8007526:	4a1f      	ldr	r2, [pc, #124]	; (80075a4 <__kernel_cosf+0xac>)
 8007528:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800752c:	4293      	cmp	r3, r2
 800752e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80075a8 <__kernel_cosf+0xb0>
 8007532:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007536:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80075ac <__kernel_cosf+0xb4>
 800753a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800753e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80075b0 <__kernel_cosf+0xb8>
 8007542:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007546:	eeb0 7a66 	vmov.f32	s14, s13
 800754a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800754e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007552:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007556:	ee67 6a25 	vmul.f32	s13, s14, s11
 800755a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800755e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007562:	dc04      	bgt.n	800756e <__kernel_cosf+0x76>
 8007564:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007568:	ee36 0a47 	vsub.f32	s0, s12, s14
 800756c:	4770      	bx	lr
 800756e:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <__kernel_cosf+0xbc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	bfda      	itte	le
 8007574:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007578:	ee06 3a90 	vmovle	s13, r3
 800757c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007580:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007584:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800758c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007590:	4770      	bx	lr
 8007592:	eeb0 0a46 	vmov.f32	s0, s12
 8007596:	4770      	bx	lr
 8007598:	ad47d74e 	.word	0xad47d74e
 800759c:	310f74f6 	.word	0x310f74f6
 80075a0:	3d2aaaab 	.word	0x3d2aaaab
 80075a4:	3e999999 	.word	0x3e999999
 80075a8:	b493f27c 	.word	0xb493f27c
 80075ac:	37d00d01 	.word	0x37d00d01
 80075b0:	bab60b61 	.word	0xbab60b61
 80075b4:	3f480000 	.word	0x3f480000

080075b8 <__kernel_rem_pio2f>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ed2d 8b04 	vpush	{d8-d9}
 80075c0:	b0d9      	sub	sp, #356	; 0x164
 80075c2:	4688      	mov	r8, r1
 80075c4:	9002      	str	r0, [sp, #8]
 80075c6:	49bb      	ldr	r1, [pc, #748]	; (80078b4 <__kernel_rem_pio2f+0x2fc>)
 80075c8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80075d0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80075d4:	1e59      	subs	r1, r3, #1
 80075d6:	1d13      	adds	r3, r2, #4
 80075d8:	db27      	blt.n	800762a <__kernel_rem_pio2f+0x72>
 80075da:	f1b2 0b03 	subs.w	fp, r2, #3
 80075de:	bf48      	it	mi
 80075e0:	f102 0b04 	addmi.w	fp, r2, #4
 80075e4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80075e8:	1c45      	adds	r5, r0, #1
 80075ea:	00ec      	lsls	r4, r5, #3
 80075ec:	1a47      	subs	r7, r0, r1
 80075ee:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80078c4 <__kernel_rem_pio2f+0x30c>
 80075f2:	9403      	str	r4, [sp, #12]
 80075f4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80075f8:	eb0a 0c01 	add.w	ip, sl, r1
 80075fc:	ae1c      	add	r6, sp, #112	; 0x70
 80075fe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8007602:	2400      	movs	r4, #0
 8007604:	4564      	cmp	r4, ip
 8007606:	dd12      	ble.n	800762e <__kernel_rem_pio2f+0x76>
 8007608:	9b01      	ldr	r3, [sp, #4]
 800760a:	ac1c      	add	r4, sp, #112	; 0x70
 800760c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007610:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8007614:	f04f 0c00 	mov.w	ip, #0
 8007618:	45d4      	cmp	ip, sl
 800761a:	dc27      	bgt.n	800766c <__kernel_rem_pio2f+0xb4>
 800761c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007620:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80078c4 <__kernel_rem_pio2f+0x30c>
 8007624:	4627      	mov	r7, r4
 8007626:	2600      	movs	r6, #0
 8007628:	e016      	b.n	8007658 <__kernel_rem_pio2f+0xa0>
 800762a:	2000      	movs	r0, #0
 800762c:	e7dc      	b.n	80075e8 <__kernel_rem_pio2f+0x30>
 800762e:	42e7      	cmn	r7, r4
 8007630:	bf5d      	ittte	pl
 8007632:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8007636:	ee07 3a90 	vmovpl	s15, r3
 800763a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800763e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007642:	ece6 7a01 	vstmia	r6!, {s15}
 8007646:	3401      	adds	r4, #1
 8007648:	e7dc      	b.n	8007604 <__kernel_rem_pio2f+0x4c>
 800764a:	ecf9 6a01 	vldmia	r9!, {s13}
 800764e:	ed97 7a00 	vldr	s14, [r7]
 8007652:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007656:	3601      	adds	r6, #1
 8007658:	428e      	cmp	r6, r1
 800765a:	f1a7 0704 	sub.w	r7, r7, #4
 800765e:	ddf4      	ble.n	800764a <__kernel_rem_pio2f+0x92>
 8007660:	eceb 7a01 	vstmia	fp!, {s15}
 8007664:	f10c 0c01 	add.w	ip, ip, #1
 8007668:	3404      	adds	r4, #4
 800766a:	e7d5      	b.n	8007618 <__kernel_rem_pio2f+0x60>
 800766c:	ab08      	add	r3, sp, #32
 800766e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007672:	eddf 8a93 	vldr	s17, [pc, #588]	; 80078c0 <__kernel_rem_pio2f+0x308>
 8007676:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80078bc <__kernel_rem_pio2f+0x304>
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007680:	4656      	mov	r6, sl
 8007682:	00b3      	lsls	r3, r6, #2
 8007684:	9305      	str	r3, [sp, #20]
 8007686:	ab58      	add	r3, sp, #352	; 0x160
 8007688:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800768c:	ac08      	add	r4, sp, #32
 800768e:	ab44      	add	r3, sp, #272	; 0x110
 8007690:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007694:	46a4      	mov	ip, r4
 8007696:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800769a:	4637      	mov	r7, r6
 800769c:	2f00      	cmp	r7, #0
 800769e:	f1a0 0004 	sub.w	r0, r0, #4
 80076a2:	dc4f      	bgt.n	8007744 <__kernel_rem_pio2f+0x18c>
 80076a4:	4628      	mov	r0, r5
 80076a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80076aa:	f000 fb61 	bl	8007d70 <scalbnf>
 80076ae:	eeb0 8a40 	vmov.f32	s16, s0
 80076b2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80076b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80076ba:	f000 fb17 	bl	8007cec <floorf>
 80076be:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80076c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80076cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80076d0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80076d4:	ee17 9a90 	vmov	r9, s15
 80076d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80076dc:	dd44      	ble.n	8007768 <__kernel_rem_pio2f+0x1b0>
 80076de:	f106 3cff 	add.w	ip, r6, #4294967295
 80076e2:	ab08      	add	r3, sp, #32
 80076e4:	f1c5 0e08 	rsb	lr, r5, #8
 80076e8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80076ec:	fa47 f00e 	asr.w	r0, r7, lr
 80076f0:	4481      	add	r9, r0
 80076f2:	fa00 f00e 	lsl.w	r0, r0, lr
 80076f6:	1a3f      	subs	r7, r7, r0
 80076f8:	f1c5 0007 	rsb	r0, r5, #7
 80076fc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007700:	4107      	asrs	r7, r0
 8007702:	2f00      	cmp	r7, #0
 8007704:	dd3f      	ble.n	8007786 <__kernel_rem_pio2f+0x1ce>
 8007706:	f04f 0e00 	mov.w	lr, #0
 800770a:	f109 0901 	add.w	r9, r9, #1
 800770e:	4673      	mov	r3, lr
 8007710:	4576      	cmp	r6, lr
 8007712:	dc6b      	bgt.n	80077ec <__kernel_rem_pio2f+0x234>
 8007714:	2d00      	cmp	r5, #0
 8007716:	dd04      	ble.n	8007722 <__kernel_rem_pio2f+0x16a>
 8007718:	2d01      	cmp	r5, #1
 800771a:	d078      	beq.n	800780e <__kernel_rem_pio2f+0x256>
 800771c:	2d02      	cmp	r5, #2
 800771e:	f000 8081 	beq.w	8007824 <__kernel_rem_pio2f+0x26c>
 8007722:	2f02      	cmp	r7, #2
 8007724:	d12f      	bne.n	8007786 <__kernel_rem_pio2f+0x1ce>
 8007726:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800772a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800772e:	b353      	cbz	r3, 8007786 <__kernel_rem_pio2f+0x1ce>
 8007730:	4628      	mov	r0, r5
 8007732:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007736:	f000 fb1b 	bl	8007d70 <scalbnf>
 800773a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800773e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007742:	e020      	b.n	8007786 <__kernel_rem_pio2f+0x1ce>
 8007744:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007748:	3f01      	subs	r7, #1
 800774a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800774e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007752:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007756:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800775a:	ecac 0a01 	vstmia	ip!, {s0}
 800775e:	ed90 0a00 	vldr	s0, [r0]
 8007762:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007766:	e799      	b.n	800769c <__kernel_rem_pio2f+0xe4>
 8007768:	d105      	bne.n	8007776 <__kernel_rem_pio2f+0x1be>
 800776a:	1e70      	subs	r0, r6, #1
 800776c:	ab08      	add	r3, sp, #32
 800776e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007772:	11ff      	asrs	r7, r7, #7
 8007774:	e7c5      	b.n	8007702 <__kernel_rem_pio2f+0x14a>
 8007776:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800777a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	da31      	bge.n	80077e8 <__kernel_rem_pio2f+0x230>
 8007784:	2700      	movs	r7, #0
 8007786:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800778a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778e:	f040 809b 	bne.w	80078c8 <__kernel_rem_pio2f+0x310>
 8007792:	1e74      	subs	r4, r6, #1
 8007794:	46a4      	mov	ip, r4
 8007796:	2000      	movs	r0, #0
 8007798:	45d4      	cmp	ip, sl
 800779a:	da4a      	bge.n	8007832 <__kernel_rem_pio2f+0x27a>
 800779c:	2800      	cmp	r0, #0
 800779e:	d07a      	beq.n	8007896 <__kernel_rem_pio2f+0x2de>
 80077a0:	ab08      	add	r3, sp, #32
 80077a2:	3d08      	subs	r5, #8
 80077a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8081 	beq.w	80078b0 <__kernel_rem_pio2f+0x2f8>
 80077ae:	4628      	mov	r0, r5
 80077b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80077b4:	00a5      	lsls	r5, r4, #2
 80077b6:	f000 fadb 	bl	8007d70 <scalbnf>
 80077ba:	aa44      	add	r2, sp, #272	; 0x110
 80077bc:	1d2b      	adds	r3, r5, #4
 80077be:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80078c0 <__kernel_rem_pio2f+0x308>
 80077c2:	18d1      	adds	r1, r2, r3
 80077c4:	4622      	mov	r2, r4
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	f280 80ae 	bge.w	8007928 <__kernel_rem_pio2f+0x370>
 80077cc:	4622      	mov	r2, r4
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	f2c0 80cc 	blt.w	800796c <__kernel_rem_pio2f+0x3b4>
 80077d4:	a944      	add	r1, sp, #272	; 0x110
 80077d6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80077da:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80078b8 <__kernel_rem_pio2f+0x300>
 80077de:	eddf 7a39 	vldr	s15, [pc, #228]	; 80078c4 <__kernel_rem_pio2f+0x30c>
 80077e2:	2000      	movs	r0, #0
 80077e4:	1aa1      	subs	r1, r4, r2
 80077e6:	e0b6      	b.n	8007956 <__kernel_rem_pio2f+0x39e>
 80077e8:	2702      	movs	r7, #2
 80077ea:	e78c      	b.n	8007706 <__kernel_rem_pio2f+0x14e>
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	b94b      	cbnz	r3, 8007804 <__kernel_rem_pio2f+0x24c>
 80077f0:	b118      	cbz	r0, 80077fa <__kernel_rem_pio2f+0x242>
 80077f2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80077f6:	6020      	str	r0, [r4, #0]
 80077f8:	2001      	movs	r0, #1
 80077fa:	f10e 0e01 	add.w	lr, lr, #1
 80077fe:	3404      	adds	r4, #4
 8007800:	4603      	mov	r3, r0
 8007802:	e785      	b.n	8007710 <__kernel_rem_pio2f+0x158>
 8007804:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007808:	6020      	str	r0, [r4, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	e7f5      	b.n	80077fa <__kernel_rem_pio2f+0x242>
 800780e:	1e74      	subs	r4, r6, #1
 8007810:	a808      	add	r0, sp, #32
 8007812:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007816:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800781a:	f10d 0c20 	add.w	ip, sp, #32
 800781e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8007822:	e77e      	b.n	8007722 <__kernel_rem_pio2f+0x16a>
 8007824:	1e74      	subs	r4, r6, #1
 8007826:	a808      	add	r0, sp, #32
 8007828:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800782c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007830:	e7f3      	b.n	800781a <__kernel_rem_pio2f+0x262>
 8007832:	ab08      	add	r3, sp, #32
 8007834:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007838:	f10c 3cff 	add.w	ip, ip, #4294967295
 800783c:	4318      	orrs	r0, r3
 800783e:	e7ab      	b.n	8007798 <__kernel_rem_pio2f+0x1e0>
 8007840:	f10c 0c01 	add.w	ip, ip, #1
 8007844:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8007848:	2c00      	cmp	r4, #0
 800784a:	d0f9      	beq.n	8007840 <__kernel_rem_pio2f+0x288>
 800784c:	9b05      	ldr	r3, [sp, #20]
 800784e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007852:	eb0d 0003 	add.w	r0, sp, r3
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	18f4      	adds	r4, r6, r3
 800785a:	ab1c      	add	r3, sp, #112	; 0x70
 800785c:	1c77      	adds	r7, r6, #1
 800785e:	384c      	subs	r0, #76	; 0x4c
 8007860:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007864:	4466      	add	r6, ip
 8007866:	42be      	cmp	r6, r7
 8007868:	f6ff af0b 	blt.w	8007682 <__kernel_rem_pio2f+0xca>
 800786c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8007870:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800787c:	f04f 0c00 	mov.w	ip, #0
 8007880:	ece4 7a01 	vstmia	r4!, {s15}
 8007884:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80078c4 <__kernel_rem_pio2f+0x30c>
 8007888:	46a1      	mov	r9, r4
 800788a:	458c      	cmp	ip, r1
 800788c:	dd07      	ble.n	800789e <__kernel_rem_pio2f+0x2e6>
 800788e:	ece0 7a01 	vstmia	r0!, {s15}
 8007892:	3701      	adds	r7, #1
 8007894:	e7e7      	b.n	8007866 <__kernel_rem_pio2f+0x2ae>
 8007896:	9804      	ldr	r0, [sp, #16]
 8007898:	f04f 0c01 	mov.w	ip, #1
 800789c:	e7d2      	b.n	8007844 <__kernel_rem_pio2f+0x28c>
 800789e:	ecfe 6a01 	vldmia	lr!, {s13}
 80078a2:	ed39 7a01 	vldmdb	r9!, {s14}
 80078a6:	f10c 0c01 	add.w	ip, ip, #1
 80078aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078ae:	e7ec      	b.n	800788a <__kernel_rem_pio2f+0x2d2>
 80078b0:	3c01      	subs	r4, #1
 80078b2:	e775      	b.n	80077a0 <__kernel_rem_pio2f+0x1e8>
 80078b4:	08008290 	.word	0x08008290
 80078b8:	08008264 	.word	0x08008264
 80078bc:	43800000 	.word	0x43800000
 80078c0:	3b800000 	.word	0x3b800000
 80078c4:	00000000 	.word	0x00000000
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	eeb0 0a48 	vmov.f32	s0, s16
 80078ce:	1a98      	subs	r0, r3, r2
 80078d0:	f000 fa4e 	bl	8007d70 <scalbnf>
 80078d4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80078bc <__kernel_rem_pio2f+0x304>
 80078d8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80078dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e0:	db19      	blt.n	8007916 <__kernel_rem_pio2f+0x35e>
 80078e2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80078c0 <__kernel_rem_pio2f+0x308>
 80078e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80078ea:	aa08      	add	r2, sp, #32
 80078ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f0:	1c74      	adds	r4, r6, #1
 80078f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078f6:	3508      	adds	r5, #8
 80078f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80078fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007900:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007904:	ee10 3a10 	vmov	r3, s0
 8007908:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800790c:	ee17 3a90 	vmov	r3, s15
 8007910:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007914:	e74b      	b.n	80077ae <__kernel_rem_pio2f+0x1f6>
 8007916:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800791a:	aa08      	add	r2, sp, #32
 800791c:	ee10 3a10 	vmov	r3, s0
 8007920:	4634      	mov	r4, r6
 8007922:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007926:	e742      	b.n	80077ae <__kernel_rem_pio2f+0x1f6>
 8007928:	a808      	add	r0, sp, #32
 800792a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800792e:	9001      	str	r0, [sp, #4]
 8007930:	ee07 0a90 	vmov	s15, r0
 8007934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007938:	3a01      	subs	r2, #1
 800793a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800793e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007942:	ed61 7a01 	vstmdb	r1!, {s15}
 8007946:	e73e      	b.n	80077c6 <__kernel_rem_pio2f+0x20e>
 8007948:	ecfc 6a01 	vldmia	ip!, {s13}
 800794c:	ecb6 7a01 	vldmia	r6!, {s14}
 8007950:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007954:	3001      	adds	r0, #1
 8007956:	4550      	cmp	r0, sl
 8007958:	dc01      	bgt.n	800795e <__kernel_rem_pio2f+0x3a6>
 800795a:	4288      	cmp	r0, r1
 800795c:	ddf4      	ble.n	8007948 <__kernel_rem_pio2f+0x390>
 800795e:	a858      	add	r0, sp, #352	; 0x160
 8007960:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007964:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007968:	3a01      	subs	r2, #1
 800796a:	e730      	b.n	80077ce <__kernel_rem_pio2f+0x216>
 800796c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800796e:	2a02      	cmp	r2, #2
 8007970:	dc09      	bgt.n	8007986 <__kernel_rem_pio2f+0x3ce>
 8007972:	2a00      	cmp	r2, #0
 8007974:	dc2a      	bgt.n	80079cc <__kernel_rem_pio2f+0x414>
 8007976:	d043      	beq.n	8007a00 <__kernel_rem_pio2f+0x448>
 8007978:	f009 0007 	and.w	r0, r9, #7
 800797c:	b059      	add	sp, #356	; 0x164
 800797e:	ecbd 8b04 	vpop	{d8-d9}
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007986:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007988:	2b03      	cmp	r3, #3
 800798a:	d1f5      	bne.n	8007978 <__kernel_rem_pio2f+0x3c0>
 800798c:	ab30      	add	r3, sp, #192	; 0xc0
 800798e:	442b      	add	r3, r5
 8007990:	461a      	mov	r2, r3
 8007992:	4619      	mov	r1, r3
 8007994:	4620      	mov	r0, r4
 8007996:	2800      	cmp	r0, #0
 8007998:	f1a1 0104 	sub.w	r1, r1, #4
 800799c:	dc51      	bgt.n	8007a42 <__kernel_rem_pio2f+0x48a>
 800799e:	4621      	mov	r1, r4
 80079a0:	2901      	cmp	r1, #1
 80079a2:	f1a2 0204 	sub.w	r2, r2, #4
 80079a6:	dc5c      	bgt.n	8007a62 <__kernel_rem_pio2f+0x4aa>
 80079a8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80078c4 <__kernel_rem_pio2f+0x30c>
 80079ac:	3304      	adds	r3, #4
 80079ae:	2c01      	cmp	r4, #1
 80079b0:	dc67      	bgt.n	8007a82 <__kernel_rem_pio2f+0x4ca>
 80079b2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80079b6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80079ba:	2f00      	cmp	r7, #0
 80079bc:	d167      	bne.n	8007a8e <__kernel_rem_pio2f+0x4d6>
 80079be:	edc8 6a00 	vstr	s13, [r8]
 80079c2:	ed88 7a01 	vstr	s14, [r8, #4]
 80079c6:	edc8 7a02 	vstr	s15, [r8, #8]
 80079ca:	e7d5      	b.n	8007978 <__kernel_rem_pio2f+0x3c0>
 80079cc:	aa30      	add	r2, sp, #192	; 0xc0
 80079ce:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80078c4 <__kernel_rem_pio2f+0x30c>
 80079d2:	4413      	add	r3, r2
 80079d4:	4622      	mov	r2, r4
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	da24      	bge.n	8007a24 <__kernel_rem_pio2f+0x46c>
 80079da:	b34f      	cbz	r7, 8007a30 <__kernel_rem_pio2f+0x478>
 80079dc:	eef1 7a47 	vneg.f32	s15, s14
 80079e0:	edc8 7a00 	vstr	s15, [r8]
 80079e4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80079e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079ec:	aa31      	add	r2, sp, #196	; 0xc4
 80079ee:	2301      	movs	r3, #1
 80079f0:	429c      	cmp	r4, r3
 80079f2:	da20      	bge.n	8007a36 <__kernel_rem_pio2f+0x47e>
 80079f4:	b10f      	cbz	r7, 80079fa <__kernel_rem_pio2f+0x442>
 80079f6:	eef1 7a67 	vneg.f32	s15, s15
 80079fa:	edc8 7a01 	vstr	s15, [r8, #4]
 80079fe:	e7bb      	b.n	8007978 <__kernel_rem_pio2f+0x3c0>
 8007a00:	aa30      	add	r2, sp, #192	; 0xc0
 8007a02:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80078c4 <__kernel_rem_pio2f+0x30c>
 8007a06:	4413      	add	r3, r2
 8007a08:	2c00      	cmp	r4, #0
 8007a0a:	da05      	bge.n	8007a18 <__kernel_rem_pio2f+0x460>
 8007a0c:	b10f      	cbz	r7, 8007a12 <__kernel_rem_pio2f+0x45a>
 8007a0e:	eef1 7a67 	vneg.f32	s15, s15
 8007a12:	edc8 7a00 	vstr	s15, [r8]
 8007a16:	e7af      	b.n	8007978 <__kernel_rem_pio2f+0x3c0>
 8007a18:	ed33 7a01 	vldmdb	r3!, {s14}
 8007a1c:	3c01      	subs	r4, #1
 8007a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a22:	e7f1      	b.n	8007a08 <__kernel_rem_pio2f+0x450>
 8007a24:	ed73 7a01 	vldmdb	r3!, {s15}
 8007a28:	3a01      	subs	r2, #1
 8007a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a2e:	e7d2      	b.n	80079d6 <__kernel_rem_pio2f+0x41e>
 8007a30:	eef0 7a47 	vmov.f32	s15, s14
 8007a34:	e7d4      	b.n	80079e0 <__kernel_rem_pio2f+0x428>
 8007a36:	ecb2 7a01 	vldmia	r2!, {s14}
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a40:	e7d6      	b.n	80079f0 <__kernel_rem_pio2f+0x438>
 8007a42:	edd1 7a00 	vldr	s15, [r1]
 8007a46:	edd1 6a01 	vldr	s13, [r1, #4]
 8007a4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a4e:	3801      	subs	r0, #1
 8007a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a54:	ed81 7a00 	vstr	s14, [r1]
 8007a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5c:	edc1 7a01 	vstr	s15, [r1, #4]
 8007a60:	e799      	b.n	8007996 <__kernel_rem_pio2f+0x3de>
 8007a62:	edd2 7a00 	vldr	s15, [r2]
 8007a66:	edd2 6a01 	vldr	s13, [r2, #4]
 8007a6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a6e:	3901      	subs	r1, #1
 8007a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a74:	ed82 7a00 	vstr	s14, [r2]
 8007a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7c:	edc2 7a01 	vstr	s15, [r2, #4]
 8007a80:	e78e      	b.n	80079a0 <__kernel_rem_pio2f+0x3e8>
 8007a82:	ed33 7a01 	vldmdb	r3!, {s14}
 8007a86:	3c01      	subs	r4, #1
 8007a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a8c:	e78f      	b.n	80079ae <__kernel_rem_pio2f+0x3f6>
 8007a8e:	eef1 6a66 	vneg.f32	s13, s13
 8007a92:	eeb1 7a47 	vneg.f32	s14, s14
 8007a96:	edc8 6a00 	vstr	s13, [r8]
 8007a9a:	ed88 7a01 	vstr	s14, [r8, #4]
 8007a9e:	eef1 7a67 	vneg.f32	s15, s15
 8007aa2:	e790      	b.n	80079c6 <__kernel_rem_pio2f+0x40e>

08007aa4 <__kernel_sinf>:
 8007aa4:	ee10 3a10 	vmov	r3, s0
 8007aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007ab0:	da04      	bge.n	8007abc <__kernel_sinf+0x18>
 8007ab2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ab6:	ee17 3a90 	vmov	r3, s15
 8007aba:	b35b      	cbz	r3, 8007b14 <__kernel_sinf+0x70>
 8007abc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ac0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007b18 <__kernel_sinf+0x74>
 8007ac4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007b1c <__kernel_sinf+0x78>
 8007ac8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007acc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007b20 <__kernel_sinf+0x7c>
 8007ad0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007ad4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007b24 <__kernel_sinf+0x80>
 8007ad8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007adc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007b28 <__kernel_sinf+0x84>
 8007ae0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007ae4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007ae8:	b930      	cbnz	r0, 8007af8 <__kernel_sinf+0x54>
 8007aea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007b2c <__kernel_sinf+0x88>
 8007aee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007af2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007af6:	4770      	bx	lr
 8007af8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007afc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007b00:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007b04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007b08:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007b30 <__kernel_sinf+0x8c>
 8007b0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007b10:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	2f2ec9d3 	.word	0x2f2ec9d3
 8007b1c:	b2d72f34 	.word	0xb2d72f34
 8007b20:	3638ef1b 	.word	0x3638ef1b
 8007b24:	b9500d01 	.word	0xb9500d01
 8007b28:	3c088889 	.word	0x3c088889
 8007b2c:	be2aaaab 	.word	0xbe2aaaab
 8007b30:	3e2aaaab 	.word	0x3e2aaaab

08007b34 <atanf>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	ee10 5a10 	vmov	r5, s0
 8007b3a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007b3e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007b42:	eef0 7a40 	vmov.f32	s15, s0
 8007b46:	db10      	blt.n	8007b6a <atanf+0x36>
 8007b48:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007b4c:	dd04      	ble.n	8007b58 <atanf+0x24>
 8007b4e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007b52:	eeb0 0a67 	vmov.f32	s0, s15
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007c90 <atanf+0x15c>
 8007b5c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007c94 <atanf+0x160>
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	bfd8      	it	le
 8007b64:	eef0 7a40 	vmovle.f32	s15, s0
 8007b68:	e7f3      	b.n	8007b52 <atanf+0x1e>
 8007b6a:	4b4b      	ldr	r3, [pc, #300]	; (8007c98 <atanf+0x164>)
 8007b6c:	429c      	cmp	r4, r3
 8007b6e:	dc10      	bgt.n	8007b92 <atanf+0x5e>
 8007b70:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007b74:	da0a      	bge.n	8007b8c <atanf+0x58>
 8007b76:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007c9c <atanf+0x168>
 8007b7a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b82:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8a:	dce2      	bgt.n	8007b52 <atanf+0x1e>
 8007b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b90:	e013      	b.n	8007bba <atanf+0x86>
 8007b92:	f000 f8a3 	bl	8007cdc <fabsf>
 8007b96:	4b42      	ldr	r3, [pc, #264]	; (8007ca0 <atanf+0x16c>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	dc4f      	bgt.n	8007c3c <atanf+0x108>
 8007b9c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	dc41      	bgt.n	8007c28 <atanf+0xf4>
 8007ba4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007ba8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007bac:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007bc0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007ca4 <atanf+0x170>
 8007bc4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007ca8 <atanf+0x174>
 8007bc8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007cac <atanf+0x178>
 8007bcc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007bd0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007bd4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007cb0 <atanf+0x17c>
 8007bd8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007bdc:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007cb4 <atanf+0x180>
 8007be0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007be4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007cb8 <atanf+0x184>
 8007be8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007bec:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007cbc <atanf+0x188>
 8007bf0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007bf4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007cc0 <atanf+0x18c>
 8007bf8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007bfc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007cc4 <atanf+0x190>
 8007c00:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007c04:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007cc8 <atanf+0x194>
 8007c08:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007c0c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007ccc <atanf+0x198>
 8007c10:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007c14:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007c18:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007c1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c20:	d121      	bne.n	8007c66 <atanf+0x132>
 8007c22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c26:	e794      	b.n	8007b52 <atanf+0x1e>
 8007c28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c2c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007c30:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c34:	2301      	movs	r3, #1
 8007c36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c3a:	e7be      	b.n	8007bba <atanf+0x86>
 8007c3c:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <atanf+0x19c>)
 8007c3e:	429c      	cmp	r4, r3
 8007c40:	dc0b      	bgt.n	8007c5a <atanf+0x126>
 8007c42:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007c4e:	2302      	movs	r3, #2
 8007c50:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c58:	e7af      	b.n	8007bba <atanf+0x86>
 8007c5a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007c5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c62:	2303      	movs	r3, #3
 8007c64:	e7a9      	b.n	8007bba <atanf+0x86>
 8007c66:	4a1b      	ldr	r2, [pc, #108]	; (8007cd4 <atanf+0x1a0>)
 8007c68:	491b      	ldr	r1, [pc, #108]	; (8007cd8 <atanf+0x1a4>)
 8007c6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007c6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007c72:	ed93 0a00 	vldr	s0, [r3]
 8007c76:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007c7a:	ed92 0a00 	vldr	s0, [r2]
 8007c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007c88:	bfb8      	it	lt
 8007c8a:	eef1 7a67 	vneglt.f32	s15, s15
 8007c8e:	e760      	b.n	8007b52 <atanf+0x1e>
 8007c90:	3fc90fdb 	.word	0x3fc90fdb
 8007c94:	bfc90fdb 	.word	0xbfc90fdb
 8007c98:	3edfffff 	.word	0x3edfffff
 8007c9c:	7149f2ca 	.word	0x7149f2ca
 8007ca0:	3f97ffff 	.word	0x3f97ffff
 8007ca4:	3c8569d7 	.word	0x3c8569d7
 8007ca8:	3d4bda59 	.word	0x3d4bda59
 8007cac:	bd6ef16b 	.word	0xbd6ef16b
 8007cb0:	3d886b35 	.word	0x3d886b35
 8007cb4:	3dba2e6e 	.word	0x3dba2e6e
 8007cb8:	3e124925 	.word	0x3e124925
 8007cbc:	3eaaaaab 	.word	0x3eaaaaab
 8007cc0:	bd15a221 	.word	0xbd15a221
 8007cc4:	bd9d8795 	.word	0xbd9d8795
 8007cc8:	bde38e38 	.word	0xbde38e38
 8007ccc:	be4ccccd 	.word	0xbe4ccccd
 8007cd0:	401bffff 	.word	0x401bffff
 8007cd4:	0800829c 	.word	0x0800829c
 8007cd8:	080082ac 	.word	0x080082ac

08007cdc <fabsf>:
 8007cdc:	ee10 3a10 	vmov	r3, s0
 8007ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ce4:	ee00 3a10 	vmov	s0, r3
 8007ce8:	4770      	bx	lr
	...

08007cec <floorf>:
 8007cec:	ee10 3a10 	vmov	r3, s0
 8007cf0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007cf4:	3a7f      	subs	r2, #127	; 0x7f
 8007cf6:	2a16      	cmp	r2, #22
 8007cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cfc:	dc2a      	bgt.n	8007d54 <floorf+0x68>
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	da11      	bge.n	8007d26 <floorf+0x3a>
 8007d02:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007d64 <floorf+0x78>
 8007d06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d12:	dd05      	ble.n	8007d20 <floorf+0x34>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	da23      	bge.n	8007d60 <floorf+0x74>
 8007d18:	4a13      	ldr	r2, [pc, #76]	; (8007d68 <floorf+0x7c>)
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	bf18      	it	ne
 8007d1e:	4613      	movne	r3, r2
 8007d20:	ee00 3a10 	vmov	s0, r3
 8007d24:	4770      	bx	lr
 8007d26:	4911      	ldr	r1, [pc, #68]	; (8007d6c <floorf+0x80>)
 8007d28:	4111      	asrs	r1, r2
 8007d2a:	420b      	tst	r3, r1
 8007d2c:	d0fa      	beq.n	8007d24 <floorf+0x38>
 8007d2e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007d64 <floorf+0x78>
 8007d32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d3e:	ddef      	ble.n	8007d20 <floorf+0x34>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfbe      	ittt	lt
 8007d44:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007d48:	fa40 f202 	asrlt.w	r2, r0, r2
 8007d4c:	189b      	addlt	r3, r3, r2
 8007d4e:	ea23 0301 	bic.w	r3, r3, r1
 8007d52:	e7e5      	b.n	8007d20 <floorf+0x34>
 8007d54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007d58:	d3e4      	bcc.n	8007d24 <floorf+0x38>
 8007d5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d5e:	4770      	bx	lr
 8007d60:	2300      	movs	r3, #0
 8007d62:	e7dd      	b.n	8007d20 <floorf+0x34>
 8007d64:	7149f2ca 	.word	0x7149f2ca
 8007d68:	bf800000 	.word	0xbf800000
 8007d6c:	007fffff 	.word	0x007fffff

08007d70 <scalbnf>:
 8007d70:	ee10 3a10 	vmov	r3, s0
 8007d74:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007d78:	d025      	beq.n	8007dc6 <scalbnf+0x56>
 8007d7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d7e:	d302      	bcc.n	8007d86 <scalbnf+0x16>
 8007d80:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d84:	4770      	bx	lr
 8007d86:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007d8a:	d122      	bne.n	8007dd2 <scalbnf+0x62>
 8007d8c:	4b2a      	ldr	r3, [pc, #168]	; (8007e38 <scalbnf+0xc8>)
 8007d8e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007e3c <scalbnf+0xcc>
 8007d92:	4298      	cmp	r0, r3
 8007d94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d98:	db16      	blt.n	8007dc8 <scalbnf+0x58>
 8007d9a:	ee10 3a10 	vmov	r3, s0
 8007d9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007da2:	3a19      	subs	r2, #25
 8007da4:	4402      	add	r2, r0
 8007da6:	2afe      	cmp	r2, #254	; 0xfe
 8007da8:	dd15      	ble.n	8007dd6 <scalbnf+0x66>
 8007daa:	ee10 3a10 	vmov	r3, s0
 8007dae:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007e40 <scalbnf+0xd0>
 8007db2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007e44 <scalbnf+0xd4>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	eeb0 7a67 	vmov.f32	s14, s15
 8007dbc:	bfb8      	it	lt
 8007dbe:	eef0 7a66 	vmovlt.f32	s15, s13
 8007dc2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007dc6:	4770      	bx	lr
 8007dc8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007e48 <scalbnf+0xd8>
 8007dcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007dd0:	4770      	bx	lr
 8007dd2:	0dd2      	lsrs	r2, r2, #23
 8007dd4:	e7e6      	b.n	8007da4 <scalbnf+0x34>
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	dd06      	ble.n	8007de8 <scalbnf+0x78>
 8007dda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007dde:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007de2:	ee00 3a10 	vmov	s0, r3
 8007de6:	4770      	bx	lr
 8007de8:	f112 0f16 	cmn.w	r2, #22
 8007dec:	da1a      	bge.n	8007e24 <scalbnf+0xb4>
 8007dee:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007df2:	4298      	cmp	r0, r3
 8007df4:	ee10 3a10 	vmov	r3, s0
 8007df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dfc:	dd0a      	ble.n	8007e14 <scalbnf+0xa4>
 8007dfe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007e40 <scalbnf+0xd0>
 8007e02:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007e44 <scalbnf+0xd4>
 8007e06:	eef0 7a40 	vmov.f32	s15, s0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf18      	it	ne
 8007e0e:	eeb0 0a47 	vmovne.f32	s0, s14
 8007e12:	e7db      	b.n	8007dcc <scalbnf+0x5c>
 8007e14:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007e48 <scalbnf+0xd8>
 8007e18:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007e4c <scalbnf+0xdc>
 8007e1c:	eef0 7a40 	vmov.f32	s15, s0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	e7f3      	b.n	8007e0c <scalbnf+0x9c>
 8007e24:	3219      	adds	r2, #25
 8007e26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e2a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007e2e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007e50 <scalbnf+0xe0>
 8007e32:	ee07 3a10 	vmov	s14, r3
 8007e36:	e7c4      	b.n	8007dc2 <scalbnf+0x52>
 8007e38:	ffff3cb0 	.word	0xffff3cb0
 8007e3c:	4c000000 	.word	0x4c000000
 8007e40:	7149f2ca 	.word	0x7149f2ca
 8007e44:	f149f2ca 	.word	0xf149f2ca
 8007e48:	0da24260 	.word	0x0da24260
 8007e4c:	8da24260 	.word	0x8da24260
 8007e50:	33000000 	.word	0x33000000

08007e54 <_init>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	bf00      	nop
 8007e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5a:	bc08      	pop	{r3}
 8007e5c:	469e      	mov	lr, r3
 8007e5e:	4770      	bx	lr

08007e60 <_fini>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr
