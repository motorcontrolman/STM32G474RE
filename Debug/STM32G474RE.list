
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009204  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097f4  080097f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097fc  080097fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08009874  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08009874  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001953f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e87  00000000  00000000  000395df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003c468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0003d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000378b  00000000  00000000  0003edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019180  00000000  00000000  00042583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011235c  00000000  00000000  0005b703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016da5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e04  00000000  00000000  0016dab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080093c4 	.word	0x080093c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080093c4 	.word	0x080093c4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	ed87 0a03 	vstr	s0, [r7, #12]
 8000526:	edc7 0a02 	vstr	s1, [r7, #8]
 800052a:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 800052e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000532:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	db0b      	blt.n	8000554 <gfDivideAvoidZero+0x38>
 800053c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000540:	edd7 7a01 	vldr	s15, [r7, #4]
 8000544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800054c:	d502      	bpl.n	8000554 <gfDivideAvoidZero+0x38>
		den = threshold;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	e017      	b.n	8000584 <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 8000554:	edd7 7a02 	vldr	s15, [r7, #8]
 8000558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800055c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000560:	d510      	bpl.n	8000584 <gfDivideAvoidZero+0x68>
 8000562:	edd7 7a01 	vldr	s15, [r7, #4]
 8000566:	eef1 7a67 	vneg.f32	s15, s15
 800056a:	ed97 7a02 	vldr	s14, [r7, #8]
 800056e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000576:	dd05      	ble.n	8000584 <gfDivideAvoidZero+0x68>
		den = -threshold;
 8000578:	edd7 7a01 	vldr	s15, [r7, #4]
 800057c:	eef1 7a67 	vneg.f32	s15, s15
 8000580:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 8000584:	edd7 6a03 	vldr	s13, [r7, #12]
 8000588:	ed97 7a02 	vldr	s14, [r7, #8]
 800058c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000590:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	ee07 3a90 	vmov	s15, r3
}
 800059a:	eeb0 0a67 	vmov.f32	s0, s15
 800059e:	371c      	adds	r7, #28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <gfWrapTheta>:

float gfWrapTheta(float theta){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 80005b2:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000618 <gfWrapTheta+0x70>
 80005b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80005ba:	f008 f94b 	bl	8008854 <fmodf>
 80005be:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 80005c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800061c <gfWrapTheta+0x74>
 80005ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d2:	dd08      	ble.n	80005e6 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 80005d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80005d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000618 <gfWrapTheta+0x70>
 80005dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80005e4:	e010      	b.n	8000608 <gfWrapTheta+0x60>
	else if( theta < -PI)
 80005e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000620 <gfWrapTheta+0x78>
 80005ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f6:	d507      	bpl.n	8000608 <gfWrapTheta+0x60>
		theta += TWOPI;
 80005f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005fc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000618 <gfWrapTheta+0x70>
 8000600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000604:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	ee07 3a90 	vmov	s15, r3
}
 800060e:	eeb0 0a67 	vmov.f32	s0, s15
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40c90fdb 	.word	0x40c90fdb
 800061c:	40490fdb 	.word	0x40490fdb
 8000620:	c0490fdb 	.word	0xc0490fdb

08000624 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	ed87 0a03 	vstr	s0, [r7, #12]
 800062e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000632:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000636:	ed97 7a03 	vldr	s14, [r7, #12]
 800063a:	edd7 7a02 	vldr	s15, [r7, #8]
 800063e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000646:	dd01      	ble.n	800064c <gUpperLowerLimit+0x28>
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 800064c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000650:	edd7 7a01 	vldr	s15, [r7, #4]
 8000654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065c:	d501      	bpl.n	8000662 <gUpperLowerLimit+0x3e>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60fb      	str	r3, [r7, #12]
	return input;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	ee07 3a90 	vmov	s15, r3
}
 8000668:	eeb0 0a67 	vmov.f32	s0, s15
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <readButton1>:



uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <readButton1+0x20>)
 8000684:	f004 fcf6 	bl	8005074 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
	return B1;
 800068c:	79fb      	ldrb	r3, [r7, #7]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	48000800 	.word	0x48000800

0800069c <readVolume>:
	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}

float readVolume(void){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <readVolume+0x3c>)
 80006a4:	885b      	ldrh	r3, [r3, #2]
 80006a6:	80fb      	strh	r3, [r7, #6]

	//Volume = Volume_ad * 0.0002442f;
	Volume = ((int16_t)Volume_ad - 856) * 0.000573394f;
 80006a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ac:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006b8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80006dc <readVolume+0x40>
 80006bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c0:	edc7 7a00 	vstr	s15, [r7]
	return Volume;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	ee07 3a90 	vmov	s15, r3
}
 80006ca:	eeb0 0a67 	vmov.f32	s0, s15
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	3a164fd2 	.word	0x3a164fd2

080006e0 <readVdc>:

float readVdc(void){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <readVdc+0x38>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * 0.0154305f; // 1/(9.31/(9.31+169)*4096/3.3V)
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800071c <readVdc+0x3c>
 80006fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006fe:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	ee07 3a90 	vmov	s15, r3
}
 8000708:	eeb0 0a67 	vmov.f32	s0, s15
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	2000008c 	.word	0x2000008c
 800071c:	3c7cd035 	.word	0x3c7cd035

08000720 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 800072a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800072e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000738:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800073c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3302      	adds	r3, #2
 8000744:	b292      	uxth	r2, r2
 8000746:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000748:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800074c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3304      	adds	r3, #4
 8000754:	b292      	uxth	r2, r2
 8000756:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - 1901) * -0.00193586253f;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000764:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80007d4 <readCurrent+0xb4>
 8000768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800076c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80007d8 <readCurrent+0xb8>
 8000770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - 1864) * -0.00193586253f;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3302      	adds	r3, #2
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000788:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007dc <readCurrent+0xbc>
 800078c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	3304      	adds	r3, #4
 8000794:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80007d8 <readCurrent+0xb8>
 8000798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800079c:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - 1871) * -0.00193586253f;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3304      	adds	r3, #4
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80007e0 <readCurrent+0xc0>
 80007b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3308      	adds	r3, #8
 80007ba:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007d8 <readCurrent+0xb8>
 80007be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c2:	edc3 7a00 	vstr	s15, [r3]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	44eda000 	.word	0x44eda000
 80007d8:	bafdbcc5 	.word	0xbafdbcc5
 80007dc:	44e90000 	.word	0x44e90000
 80007e0:	44e9e000 	.word	0x44e9e000

080007e4 <writeOutputMode>:
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
}

void writeOutputMode(int8_t* outputMode){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f993 3000 	ldrsb.w	r3, [r3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	4819      	ldr	r0, [pc, #100]	; (8000864 <writeOutputMode+0x80>)
 80007fe:	f004 fc51 	bl	80050a4 <HAL_GPIO_WritePin>
 8000802:	e005      	b.n	8000810 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <writeOutputMode+0x80>)
 800080c:	f004 fc4a 	bl	80050a4 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3301      	adds	r3, #1
 8000814:	f993 3000 	ldrsb.w	r3, [r3]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <writeOutputMode+0x80>)
 8000824:	f004 fc3e 	bl	80050a4 <HAL_GPIO_WritePin>
 8000828:	e005      	b.n	8000836 <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <writeOutputMode+0x80>)
 8000832:	f004 fc37 	bl	80050a4 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3302      	adds	r3, #2
 800083a:	f993 3000 	ldrsb.w	r3, [r3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d106      	bne.n	8000850 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <writeOutputMode+0x80>)
 800084a:	f004 fc2b 	bl	80050a4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 800084e:	e005      	b.n	800085c <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <writeOutputMode+0x80>)
 8000858:	f004 fc24 	bl	80050a4 <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	48000800 	.word	0x48000800

08000868 <writeDuty>:

void writeDuty(float* Duty){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	ed93 7a00 	vldr	s14, [r3]
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <writeDuty+0x80>)
 8000878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087a:	ee07 3a90 	vmov	s15, r3
 800087e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <writeDuty+0x80>)
 8000888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800088c:	ee17 2a90 	vmov	r2, s15
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3304      	adds	r3, #4
 8000896:	ed93 7a00 	vldr	s14, [r3]
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <writeDuty+0x80>)
 800089c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089e:	ee07 3a90 	vmov	s15, r3
 80008a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <writeDuty+0x80>)
 80008ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b0:	ee17 2a90 	vmov	r2, s15
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3308      	adds	r3, #8
 80008ba:	ed93 7a00 	vldr	s14, [r3]
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <writeDuty+0x80>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <writeDuty+0x80>)
 80008d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d4:	ee17 2a90 	vmov	r2, s15
 80008d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40012c00 	.word	0x40012c00

080008ec <OpenLoopTasks>:
	writeOutputMode(outputMode);
	writeDuty(Duty);

}

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float Vdc, float* Duty){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80008f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000900:	6079      	str	r1, [r7, #4]
	uint8_t outputMode[3];
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8000902:	2301      	movs	r3, #1
 8000904:	773b      	strb	r3, [r7, #28]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8000906:	2301      	movs	r3, #1
 8000908:	777b      	strb	r3, [r7, #29]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 800090a:	2301      	movs	r3, #1
 800090c:	77bb      	strb	r3, [r7, #30]

	uvw2ab(gIuvw, sIab);
 800090e:	4916      	ldr	r1, [pc, #88]	; (8000968 <OpenLoopTasks+0x7c>)
 8000910:	4816      	ldr	r0, [pc, #88]	; (800096c <OpenLoopTasks+0x80>)
 8000912:	f000 f835 	bl	8000980 <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 8000916:	4916      	ldr	r1, [pc, #88]	; (8000970 <OpenLoopTasks+0x84>)
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <OpenLoopTasks+0x7c>)
 800091a:	ed97 0a04 	vldr	s0, [r7, #16]
 800091e:	f000 f8b9 	bl	8000a94 <ab2dq>
	sVdq[0] = 0.0f;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <OpenLoopTasks+0x88>)
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
	sVdq[1] = VamRef;
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <OpenLoopTasks+0x88>)
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	6053      	str	r3, [r2, #4]
	dq2ab(theta, sVdq, sVab);
 8000930:	4911      	ldr	r1, [pc, #68]	; (8000978 <OpenLoopTasks+0x8c>)
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <OpenLoopTasks+0x88>)
 8000934:	ed97 0a04 	vldr	s0, [r7, #16]
 8000938:	f000 f8ee 	bl	8000b18 <dq2ab>
	ab2uvw(sVab, sVuvw);
 800093c:	490f      	ldr	r1, [pc, #60]	; (800097c <OpenLoopTasks+0x90>)
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <OpenLoopTasks+0x8c>)
 8000940:	f000 f866 	bl	8000a10 <ab2uvw>
	Vuvw2Duty(Vdc, sVuvw, Duty);
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <OpenLoopTasks+0x90>)
 8000948:	ed97 0a02 	vldr	s0, [r7, #8]
 800094c:	f000 f924 	bl	8000b98 <Vuvw2Duty>
	writeOutputMode(outputMode);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff45 	bl	80007e4 <writeOutputMode>
	writeDuty(Duty);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ff84 	bl	8000868 <writeDuty>

}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000c4 	.word	0x200000c4
 800096c:	200000a0 	.word	0x200000a0
 8000970:	200000cc 	.word	0x200000cc
 8000974:	200000d4 	.word	0x200000d4
 8000978:	200000dc 	.word	0x200000dc
 800097c:	200000e4 	.word	0x200000e4

08000980 <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	ed93 7a00 	vldr	s14, [r3]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3304      	adds	r3, #4
 8000994:	edd3 7a00 	vldr	s15, [r3]
 8000998:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800099c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3308      	adds	r3, #8
 80009a8:	edd3 7a00 	vldr	s15, [r3]
 80009ac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80009b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000a08 <uvw2ab+0x88>
 80009bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
 80009ca:	edd3 7a00 	vldr	s15, [r3]
 80009ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a0c <uvw2ab+0x8c>
 80009d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3308      	adds	r3, #8
 80009da:	edd3 7a00 	vldr	s15, [r3]
 80009de:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000a0c <uvw2ab+0x8c>
 80009e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	3304      	adds	r3, #4
 80009ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a08 <uvw2ab+0x88>
 80009f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f6:	edc3 7a00 	vstr	s15, [r3]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	3f5105ec 	.word	0x3f5105ec
 8000a0c:	3f5db3d7 	.word	0x3f5db3d7

08000a10 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000a8c <ab2uvw+0x7c>
 8000a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	edd3 7a00 	vldr	s15, [r3]
 8000a34:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8000a38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	edd3 7a00 	vldr	s15, [r3]
 8000a44:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000a90 <ab2uvw+0x80>
 8000a48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	3304      	adds	r3, #4
 8000a54:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000a8c <ab2uvw+0x7c>
 8000a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5c:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	edd3 7a00 	vldr	s15, [r3]
 8000a66:	eeb1 7a67 	vneg.f32	s14, s15
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	3308      	adds	r3, #8
 8000a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a7a:	edc3 7a00 	vstr	s15, [r3]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	3f5105ec 	.word	0x3f5105ec
 8000a90:	3f5db3d7 	.word	0x3f5db3d7

08000a94 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a9e:	60b8      	str	r0, [r7, #8]
 8000aa0:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8000aa2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000aa6:	f007 fe8f 	bl	80087c8 <sinf>
 8000aaa:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8000aae:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ab2:	f007 fe45 	bl	8008740 <cosf>
 8000ab6:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	ed93 7a00 	vldr	s14, [r3]
 8000ac0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3304      	adds	r3, #4
 8000acc:	edd3 6a00 	vldr	s13, [r3]
 8000ad0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	edd3 7a00 	vldr	s15, [r3]
 8000ae8:	eeb1 7a67 	vneg.f32	s14, s15
 8000aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8000af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3304      	adds	r3, #4
 8000af8:	edd3 6a00 	vldr	s13, [r3]
 8000afc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3304      	adds	r3, #4
 8000b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0c:	edc3 7a00 	vstr	s15, [r3]
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b22:	60b8      	str	r0, [r7, #8]
 8000b24:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8000b26:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b2a:	f007 fe4d 	bl	80087c8 <sinf>
 8000b2e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8000b32:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b36:	f007 fe03 	bl	8008740 <cosf>
 8000b3a:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	ed93 7a00 	vldr	s14, [r3]
 8000b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	edd3 6a00 	vldr	s13, [r3]
 8000b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	ed93 7a00 	vldr	s14, [r3]
 8000b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	3304      	adds	r3, #4
 8000b78:	edd3 6a00 	vldr	s13, [r3]
 8000b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3304      	adds	r3, #4
 8000b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b8c:	edc3 7a00 	vstr	s15, [r3]
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <Vuvw2Duty>:

static void Vuvw2Duty(float Vdc, float* Vuvw, float* Duty){
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ba2:	60b8      	str	r0, [r7, #8]
 8000ba4:	6079      	str	r1, [r7, #4]
	float TwoDivVH;

	TwoDivVH = gfDivideAvoidZero(2.0f, Vdc, 1.0f);//2/VH
 8000ba6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000baa:	edd7 0a03 	vldr	s1, [r7, #12]
 8000bae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000bb2:	f7ff fcb3 	bl	800051c <gfDivideAvoidZero>
 8000bb6:	ed87 0a05 	vstr	s0, [r7, #20]
	// Vuvw2Duty Vu/(VH*0.5) *
	Duty[0] = (Vuvw[0] * TwoDivVH);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	ed93 7a00 	vldr	s14, [r3]
 8000bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * TwoDivVH);
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	ed93 7a00 	vldr	s14, [r3]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be2:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = -Duty[0] - Duty[1];
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	edd3 7a00 	vldr	s15, [r3]
 8000bec:	eeb1 7a67 	vneg.f32	s14, s15
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	edd3 7a00 	vldr	s15, [r3]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c00:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000c0e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c12:	eeb0 0a67 	vmov.f32	s0, s15
 8000c16:	f7ff fd05 	bl	8000624 <gUpperLowerLimit>
 8000c1a:	eef0 7a40 	vmov.f32	s15, s0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3304      	adds	r3, #4
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	1d1c      	adds	r4, r3, #4
 8000c30:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000c34:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c38:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3c:	f7ff fcf2 	bl	8000624 <gUpperLowerLimit>
 8000c40:	eef0 7a40 	vmov.f32	s15, s0
 8000c44:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	edd3 7a00 	vldr	s15, [r3]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f103 0408 	add.w	r4, r3, #8
 8000c56:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000c5a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c62:	f7ff fcdf 	bl	8000624 <gUpperLowerLimit>
 8000c66:	eef0 7a40 	vmov.f32	s15, s0
 8000c6a:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3308      	adds	r3, #8
 8000cae:	edd3 7a00 	vldr	s15, [r3]
 8000cb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000cc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cc6:	edc3 7a00 	vstr	s15, [r3]

}
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd90      	pop	{r4, r7, pc}
	...

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fed5 	bl	8001a86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f862 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f000 fb20 	bl	8001324 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce4:	f000 faf4 	bl	80012d0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000ce8:	f000 f984 	bl	8000ff4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000cec:	f000 f8a6 	bl	8000e3c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cf0:	f000 f9ca 	bl	8001088 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cf4:	f000 fa82 	bl	80011fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000cf8:	4824      	ldr	r0, [pc, #144]	; (8000d8c <main+0xb8>)
 8000cfa:	f005 fa5f 	bl	80061bc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000cfe:	4824      	ldr	r0, [pc, #144]	; (8000d90 <main+0xbc>)
 8000d00:	f002 fd48 	bl	8003794 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0a:	4822      	ldr	r0, [pc, #136]	; (8000d94 <main+0xc0>)
 8000d0c:	f004 f9ca 	bl	80050a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d16:	481f      	ldr	r0, [pc, #124]	; (8000d94 <main+0xc0>)
 8000d18:	f004 f9c4 	bl	80050a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	481c      	ldr	r0, [pc, #112]	; (8000d94 <main+0xc0>)
 8000d24:	f004 f9be 	bl	80050a4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4818      	ldr	r0, [pc, #96]	; (8000d8c <main+0xb8>)
 8000d2c:	f005 fb16 	bl	800635c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	4816      	ldr	r0, [pc, #88]	; (8000d8c <main+0xb8>)
 8000d34:	f006 fc9e 	bl	8007674 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <main+0xb8>)
 8000d3c:	f005 fb0e 	bl	800635c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000d40:	2104      	movs	r1, #4
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <main+0xb8>)
 8000d44:	f006 fc96 	bl	8007674 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <main+0xb8>)
 8000d4c:	f005 fb06 	bl	800635c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000d50:	2108      	movs	r1, #8
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <main+0xb8>)
 8000d54:	f006 fc8e 	bl	8007674 <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 10;//for Carrier Top Interrupt
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <main+0xc4>)
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <main+0xc4>)
 8000d5e:	3b0a      	subs	r3, #10
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8000d62:	480e      	ldr	r0, [pc, #56]	; (8000d9c <main+0xc8>)
 8000d64:	f005 fa2a 	bl	80061bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d68:	2100      	movs	r1, #0
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <main+0xc8>)
 8000d6c:	f005 fc60 	bl	8006630 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000d70:	2104      	movs	r1, #4
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <main+0xc8>)
 8000d74:	f005 fc5c 	bl	8006630 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4808      	ldr	r0, [pc, #32]	; (8000d9c <main+0xc8>)
 8000d7c:	f005 fc58 	bl	8006630 <HAL_TIM_IC_Start_IT>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8000d80:	2202      	movs	r2, #2
 8000d82:	4907      	ldr	r1, [pc, #28]	; (8000da0 <main+0xcc>)
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <main+0xbc>)
 8000d86:	f001 faf5 	bl	8002374 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <main+0xb6>
 8000d8c:	2000024c 	.word	0x2000024c
 8000d90:	200000f0 	.word	0x200000f0
 8000d94:	48000800 	.word	0x48000800
 8000d98:	40012c00 	.word	0x40012c00
 8000d9c:	20000298 	.word	0x20000298
 8000da0:	2000008c 	.word	0x2000008c

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	2238      	movs	r2, #56	; 0x38
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f007 fcbc 	bl	8008730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f004 f9c2 	bl	8005150 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd6:	2340      	movs	r3, #64	; 0x40
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000de2:	2304      	movs	r3, #4
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000de6:	2355      	movs	r3, #85	; 0x55
 8000de8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 fa5c 	bl	80052b8 <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e06:	f000 fb11 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2104      	movs	r1, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 fd60 	bl	80058e8 <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e2e:	f000 fafd 	bl	800142c <Error_Handler>
  }
}
 8000e32:	bf00      	nop
 8000e34:	3750      	adds	r7, #80	; 0x50
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b09a      	sub	sp, #104	; 0x68
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e52:	2220      	movs	r2, #32
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f007 fc6a 	bl	8008730 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	223c      	movs	r2, #60	; 0x3c
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 fc64 	bl	8008730 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e68:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b57      	ldr	r3, [pc, #348]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e84:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000ea2:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ebc:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec4:	4b45      	ldr	r3, [pc, #276]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000eca:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed2:	4842      	ldr	r0, [pc, #264]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000ed4:	f001 f88c 	bl	8001ff0 <HAL_ADC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ede:	f000 faa5 	bl	800142c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ee6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000eea:	4619      	mov	r1, r3
 8000eec:	483b      	ldr	r0, [pc, #236]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000eee:	f003 fab5 	bl	800445c <HAL_ADCEx_MultiModeConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000ef8:	f000 fa98 	bl	800142c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <MX_ADC1_Init+0x1a4>)
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f00:	2306      	movs	r3, #6
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f04:	2300      	movs	r3, #0
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f08:	237f      	movs	r3, #127	; 0x7f
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4830      	ldr	r0, [pc, #192]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000f1c:	f001 fd86 	bl	8002a2c <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000f26:	f000 fa81 	bl	800142c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <MX_ADC1_Init+0x1a8>)
 8000f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f36:	4619      	mov	r1, r3
 8000f38:	4828      	ldr	r0, [pc, #160]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000f3a:	f001 fd77 	bl	8002a2c <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000f44:	f000 fa72 	bl	800142c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <MX_ADC1_Init+0x1ac>)
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f4c:	2309      	movs	r3, #9
 8000f4e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f54:	237f      	movs	r3, #127	; 0x7f
 8000f56:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000f8a:	f002 fd3b 	bl	8003a04 <HAL_ADCEx_InjectedConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8000f94:	f000 fa4a 	bl	800142c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_ADC1_Init+0x1b0>)
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f9c:	f240 130f 	movw	r3, #271	; 0x10f
 8000fa0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000fa8:	f002 fd2c 	bl	8003a04 <HAL_ADCEx_InjectedConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8000fb2:	f000 fa3b 	bl	800142c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_ADC1_Init+0x1b4>)
 8000fb8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000fba:	f240 2315 	movw	r3, #533	; 0x215
 8000fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_ADC1_Init+0x1a0>)
 8000fc6:	f002 fd1d 	bl	8003a04 <HAL_ADCEx_InjectedConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8000fd0:	f000 fa2c 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3768      	adds	r7, #104	; 0x68
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200000f0 	.word	0x200000f0
 8000fe0:	08600004 	.word	0x08600004
 8000fe4:	32601000 	.word	0x32601000
 8000fe8:	04300002 	.word	0x04300002
 8000fec:	1d500080 	.word	0x1d500080
 8000ff0:	19200040 	.word	0x19200040

08000ff4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <MX_LPUART1_UART_Init+0x90>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 8001038:	f006 fd4b 	bl	8007ad2 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001042:	f000 f9f3 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 800104a:	f007 fa7d 	bl	8008548 <HAL_UARTEx_SetTxFifoThreshold>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001054:	f000 f9ea 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 800105c:	f007 fab2 	bl	80085c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001066:	f000 f9e1 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_LPUART1_UART_Init+0x8c>)
 800106c:	f007 fa33 	bl	80084d6 <HAL_UARTEx_DisableFifoMode>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001076:	f000 f9d9 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001bc 	.word	0x200001bc
 8001084:	40008000 	.word	0x40008000

08001088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b098      	sub	sp, #96	; 0x60
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2234      	movs	r2, #52	; 0x34
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fb3b 	bl	8008730 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <MX_TIM1_Init+0x170>)
 80010be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010c6:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010c8:	2220      	movs	r2, #32
 80010ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80010d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e0:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e6:	4843      	ldr	r0, [pc, #268]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80010e8:	f005 f8e0 	bl	80062ac <HAL_TIM_PWM_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 f99b 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010f6:	2370      	movs	r3, #112	; 0x70
 80010f8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001102:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001106:	4619      	mov	r1, r3
 8001108:	483a      	ldr	r0, [pc, #232]	; (80011f4 <MX_TIM1_Init+0x16c>)
 800110a:	f006 fb75 	bl	80077f8 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001114:	f000 f98a 	bl	800142c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001118:	2360      	movs	r3, #96	; 0x60
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	482d      	ldr	r0, [pc, #180]	; (80011f4 <MX_TIM1_Init+0x16c>)
 800113e:	f005 fc63 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001148:	f000 f970 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	2204      	movs	r2, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4827      	ldr	r0, [pc, #156]	; (80011f4 <MX_TIM1_Init+0x16c>)
 8001156:	f005 fc57 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001160:	f000 f964 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001164:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001168:	2208      	movs	r2, #8
 800116a:	4619      	mov	r1, r3
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <MX_TIM1_Init+0x16c>)
 800116e:	f005 fc4b 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001178:	f000 f958 	bl	800142c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800117c:	2370      	movs	r3, #112	; 0x70
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001180:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001184:	220c      	movs	r2, #12
 8001186:	4619      	mov	r1, r3
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <MX_TIM1_Init+0x16c>)
 800118a:	f005 fc3d 	bl	8006a08 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001194:	f000 f94a 	bl	800142c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80011d6:	f006 fba5 	bl	8007924 <HAL_TIMEx_ConfigBreakDeadTime>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80011e0:	f000 f924 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <MX_TIM1_Init+0x16c>)
 80011e6:	f000 fae3 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 80011ea:	bf00      	nop
 80011ec:	3760      	adds	r7, #96	; 0x60
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000024c 	.word	0x2000024c
 80011f8:	40012c00 	.word	0x40012c00

080011fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_TIM2_Init+0xd0>)
 800121c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001220:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <MX_TIM2_Init+0xd0>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_TIM2_Init+0xd0>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <MX_TIM2_Init+0xd0>)
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_TIM2_Init+0xd0>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_TIM2_Init+0xd0>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <MX_TIM2_Init+0xd0>)
 8001244:	f005 f99c 	bl	8006580 <HAL_TIM_IC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800124e:	f000 f8ed 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <MX_TIM2_Init+0xd0>)
 8001262:	f006 fac9 	bl	80077f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800126c:	f000 f8de 	bl	800142c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001274:	2301      	movs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <MX_TIM2_Init+0xd0>)
 8001288:	f005 fb22 	bl	80068d0 <HAL_TIM_IC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001292:	f000 f8cb 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2204      	movs	r2, #4
 800129a:	4619      	mov	r1, r3
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <MX_TIM2_Init+0xd0>)
 800129e:	f005 fb17 	bl	80068d0 <HAL_TIM_IC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012a8:	f000 f8c0 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2208      	movs	r2, #8
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM2_Init+0xd0>)
 80012b4:	f005 fb0c 	bl	80068d0 <HAL_TIM_IC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80012be:	f000 f8b5 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000298 	.word	0x20000298

080012d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_DMA_Init+0x50>)
 80012d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <MX_DMA_Init+0x50>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6493      	str	r3, [r2, #72]	; 0x48
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_DMA_Init+0x50>)
 80012e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_DMA_Init+0x50>)
 80012f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <MX_DMA_Init+0x50>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6493      	str	r3, [r2, #72]	; 0x48
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_DMA_Init+0x50>)
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	200b      	movs	r0, #11
 800130c:	f003 fa89 	bl	8004822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001310:	200b      	movs	r0, #11
 8001312:	f003 faa0 	bl	8004856 <HAL_NVIC_EnableIRQ>

}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <MX_GPIO_Init+0x100>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a39      	ldr	r2, [pc, #228]	; (8001424 <MX_GPIO_Init+0x100>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <MX_GPIO_Init+0x100>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <MX_GPIO_Init+0x100>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a33      	ldr	r2, [pc, #204]	; (8001424 <MX_GPIO_Init+0x100>)
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <MX_GPIO_Init+0x100>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <MX_GPIO_Init+0x100>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a2d      	ldr	r2, [pc, #180]	; (8001424 <MX_GPIO_Init+0x100>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_GPIO_Init+0x100>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_GPIO_Init+0x100>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <MX_GPIO_Init+0x100>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_GPIO_Init+0x100>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2120      	movs	r1, #32
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f003 fe7f 	bl	80050a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <MX_GPIO_Init+0x104>)
 80013ae:	f003 fe79 	bl	80050a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <MX_GPIO_Init+0x104>)
 80013ca:	f003 fcd1 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ce:	2320      	movs	r3, #32
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f003 fcc2 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 80013ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MX_GPIO_Init+0x104>)
 8001406:	f003 fcb3 	bl	8004d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2028      	movs	r0, #40	; 0x28
 8001410:	f003 fa07 	bl	8004822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001414:	2028      	movs	r0, #40	; 0x28
 8001416:	f003 fa1e 	bl	8004856 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000800 	.word	0x48000800

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x44>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_MspInit+0x44>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6613      	str	r3, [r2, #96]	; 0x60
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x44>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x44>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x44>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x44>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800146e:	f003 ff13 	bl	8005298 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0a0      	sub	sp, #128	; 0x80
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	2254      	movs	r2, #84	; 0x54
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f007 f945 	bl	8008730 <memset>
  if(hadc->Instance==ADC1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ae:	f040 8098 	bne.w	80015e2 <HAL_ADC_MspInit+0x162>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fc2c 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80014ce:	f7ff ffad 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a45      	ldr	r2, [pc, #276]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 80014d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a3f      	ldr	r2, [pc, #252]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a39      	ldr	r2, [pc, #228]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a33      	ldr	r2, [pc, #204]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_ADC_MspInit+0x16c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001532:	2303      	movs	r3, #3
 8001534:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001536:	2303      	movs	r3, #3
 8001538:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001542:	4619      	mov	r1, r3
 8001544:	482a      	ldr	r0, [pc, #168]	; (80015f0 <HAL_ADC_MspInit+0x170>)
 8001546:	f003 fc13 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800154a:	2303      	movs	r3, #3
 800154c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f003 fc06 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001564:	2302      	movs	r3, #2
 8001566:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001568:	2303      	movs	r3, #3
 800156a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001574:	4619      	mov	r1, r3
 8001576:	481f      	ldr	r0, [pc, #124]	; (80015f4 <HAL_ADC_MspInit+0x174>)
 8001578:	f003 fbfa 	bl	8004d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 800157e:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <HAL_ADC_MspInit+0x17c>)
 8001580:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 8001584:	2205      	movs	r2, #5
 8001586:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 80015a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 80015ac:	2220      	movs	r2, #32
 80015ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 80015b8:	f003 f968 	bl	800488c <HAL_DMA_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80015c2:	f7ff ff33 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_ADC_MspInit+0x178>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2012      	movs	r0, #18
 80015d8:	f003 f923 	bl	8004822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015dc:	2012      	movs	r0, #18
 80015de:	f003 f93a 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3780      	adds	r7, #128	; 0x80
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000400 	.word	0x48000400
 80015f8:	2000015c 	.word	0x2000015c
 80015fc:	40020008 	.word	0x40020008

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09e      	sub	sp, #120	; 0x78
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2254      	movs	r2, #84	; 0x54
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f007 f885 	bl	8008730 <memset>
  if(huart->Instance==LPUART1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_UART_MspInit+0xa8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d136      	bne.n	800169e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001630:	2320      	movs	r3, #32
 8001632:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fb6f 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001648:	f7ff fef0 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_UART_MspInit+0xac>)
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_UART_MspInit+0xac>)
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_UART_MspInit+0xac>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800167c:	230c      	movs	r3, #12
 800167e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800168c:	230c      	movs	r3, #12
 800168e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f003 fb69 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3778      	adds	r7, #120	; 0x78
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40008000 	.word	0x40008000
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_TIM_PWM_MspInit+0x38>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10b      	bne.n	80016da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_TIM_PWM_MspInit+0x3c>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_TIM_PWM_MspInit+0x3c>)
 80016c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_TIM_PWM_MspInit+0x3c>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001710:	d146      	bne.n	80017a0 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_TIM_IC_MspInit+0xb8>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 800175a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800176c:	2301      	movs	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <HAL_TIM_IC_MspInit+0xbc>)
 8001778:	f003 fafa 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 800177c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800178e:	2301      	movs	r3, #1
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f003 fae8 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000400 	.word	0x48000400

080017b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <HAL_TIM_MspPostInit+0xa0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d139      	bne.n	8001846 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_TIM_MspPostInit+0xa4>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <HAL_TIM_MspPostInit+0xa4>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_TIM_MspPostInit+0xa4>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_TIM_MspPostInit+0xa4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_TIM_MspPostInit+0xa4>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_TIM_MspPostInit+0xa4>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001802:	2308      	movs	r3, #8
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001812:	2302      	movs	r3, #2
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	480e      	ldr	r0, [pc, #56]	; (8001858 <HAL_TIM_MspPostInit+0xa8>)
 800181e:	f003 faa7 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001822:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001834:	2306      	movs	r3, #6
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001842:	f003 fa95 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40021000 	.word	0x40021000
 8001858:	48000800 	.word	0x48000800

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler+0x4>

08001862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <MemManage_Handler+0x4>

0800186e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <UsageFault_Handler+0x4>

0800187a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a8:	f000 f940 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <DMA1_Channel1_IRQHandler+0x10>)
 80018b6:	f003 f90c 	bl	8004ad2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000015c 	.word	0x2000015c

080018c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <ADC1_2_IRQHandler+0x10c>)
 80018cc:	60bb      	str	r3, [r7, #8]
	float ErectFreqErr;
	float theta_tmp;
  uint8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018ce:	4841      	ldr	r0, [pc, #260]	; (80019d4 <ADC1_2_IRQHandler+0x110>)
 80018d0:	f000 fe24 	bl	800251c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018d4:	2120      	movs	r1, #32
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f003 fbfb 	bl	80050d4 <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 80018de:	f7fe fecb 	bl	8000678 <readButton1>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <ADC1_2_IRQHandler+0x114>)
 80018e8:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 80018ea:	f7fe fed7 	bl	800069c <readVolume>
 80018ee:	eef0 7a40 	vmov.f32	s15, s0
 80018f2:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <ADC1_2_IRQHandler+0x118>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]
readCurrent(gIuvw_AD, gIuvw);
 80018f8:	4939      	ldr	r1, [pc, #228]	; (80019e0 <ADC1_2_IRQHandler+0x11c>)
 80018fa:	483a      	ldr	r0, [pc, #232]	; (80019e4 <ADC1_2_IRQHandler+0x120>)
 80018fc:	f7fe ff10 	bl	8000720 <readCurrent>
	gVdc = readVdc();
 8001900:	f7fe feee 	bl	80006e0 <readVdc>
 8001904:	eef0 7a40 	vmov.f32	s15, s0
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <ADC1_2_IRQHandler+0x124>)
 800190a:	edc3 7a00 	vstr	s15, [r3]

	//DutyRef Calculation
	if ( gButton1 == 1 )
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <ADC1_2_IRQHandler+0x114>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d102      	bne.n	800191c <ADC1_2_IRQHandler+0x58>
	  rotDir = 1;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e001      	b.n	8001920 <ADC1_2_IRQHandler+0x5c>
	else
	  rotDir = -1;
 800191c:	23ff      	movs	r3, #255	; 0xff
 800191e:	73fb      	strb	r3, [r7, #15]
	ErectFreqErr = ErectFreqRef - gElectFreq;
	gDutyRef += ErectFreqErr * 0.0000001f;
	*/


	gDutyRef = (float)rotDir * gVolume;
 8001920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <ADC1_2_IRQHandler+0x118>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <ADC1_2_IRQHandler+0x128>)
 8001938:	edc3 7a00 	vstr	s15, [r3]
	if (gDutyRef > 1.0f) gDutyRef = 1.0f;
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <ADC1_2_IRQHandler+0x128>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	dd03      	ble.n	8001958 <ADC1_2_IRQHandler+0x94>
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <ADC1_2_IRQHandler+0x128>)
 8001952:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001956:	601a      	str	r2, [r3, #0]
	if (gDutyRef < -1.0f) gDutyRef = -1.0f;
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <ADC1_2_IRQHandler+0x128>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	d502      	bpl.n	8001972 <ADC1_2_IRQHandler+0xae>
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <ADC1_2_IRQHandler+0x128>)
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <ADC1_2_IRQHandler+0x12c>)
 8001970:	601a      	str	r2, [r3, #0]
	//sixStepTasks(gDutyRef, 0.0f, &gTheta, gDuty, outputMode);
	//write IO signals
	//writeOutputMode(outputMode);
	//writeDuty(gDuty);

	gTheta = gTheta + 200.0f * CARRIERCYCLE;
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <ADC1_2_IRQHandler+0x130>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80019f8 <ADC1_2_IRQHandler+0x134>
 800197c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <ADC1_2_IRQHandler+0x130>)
 8001982:	edc3 7a00 	vstr	s15, [r3]
	gTheta = gfWrapTheta(gTheta);
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <ADC1_2_IRQHandler+0x130>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	eeb0 0a67 	vmov.f32	s0, s15
 8001990:	f7fe fe0a 	bl	80005a8 <gfWrapTheta>
 8001994:	eef0 7a40 	vmov.f32	s15, s0
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <ADC1_2_IRQHandler+0x130>)
 800199a:	edc3 7a00 	vstr	s15, [r3]
OpenLoopTasks(2.0f, gTheta, gIuvw, gVdc, gDuty);
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <ADC1_2_IRQHandler+0x130>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <ADC1_2_IRQHandler+0x124>)
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	4914      	ldr	r1, [pc, #80]	; (80019fc <ADC1_2_IRQHandler+0x138>)
 80019ac:	eeb0 1a47 	vmov.f32	s2, s14
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <ADC1_2_IRQHandler+0x11c>)
 80019b2:	eef0 0a67 	vmov.f32	s1, s15
 80019b6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019ba:	f7fe ff97 	bl	80008ec <OpenLoopTasks>
//
//VectorControlTasks(Idq_ref, gTheta, gIuvw, gVdc, gDuty);

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80019be:	2120      	movs	r1, #32
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c4:	f003 fb86 	bl	80050d4 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	42c80000 	.word	0x42c80000
 80019d4:	200000f0 	.word	0x200000f0
 80019d8:	20000090 	.word	0x20000090
 80019dc:	2000009c 	.word	0x2000009c
 80019e0:	200000a0 	.word	0x200000a0
 80019e4:	200000ac 	.word	0x200000ac
 80019e8:	20000098 	.word	0x20000098
 80019ec:	200000b4 	.word	0x200000b4
 80019f0:	bf800000 	.word	0xbf800000
 80019f4:	20000094 	.word	0x20000094
 80019f8:	3c40c0c1 	.word	0x3c40c0c1
 80019fc:	200000b8 	.word	0x200000b8

08001a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a08:	f003 fb7e 	bl	8005108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <SystemInit+0x20>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <SystemInit+0x20>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490e      	ldr	r1, [pc, #56]	; (8001a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0b      	ldr	r4, [pc, #44]	; (8001a80 <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a5e:	f7ff ffd7 	bl	8001a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f006 fe41 	bl	80086e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a66:	f7ff f935 	bl	8000cd4 <main>

08001a6a <LoopForever>:

LoopForever:
    b LoopForever
 8001a6a:	e7fe      	b.n	8001a6a <LoopForever>
  ldr   r0, =_estack
 8001a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a78:	08009804 	.word	0x08009804
  ldr r2, =_sbss
 8001a7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a80:	200002e8 	.word	0x200002e8

08001a84 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC3_IRQHandler>

08001a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f002 febb 	bl	800480c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f80e 	bl	8001ab8 <HAL_InitTick>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	71fb      	strb	r3, [r7, #7]
 8001aa6:	e001      	b.n	8001aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa8:	f7ff fcc6 	bl	8001438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aac:	79fb      	ldrb	r3, [r7, #7]

}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_InitTick+0x68>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d022      	beq.n	8001b12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_InitTick+0x6c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_InitTick+0x68>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 fec6 	bl	8004872 <HAL_SYSTICK_Config>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	d809      	bhi.n	8001b06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af2:	2200      	movs	r2, #0
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295
 8001afa:	f002 fe92 	bl	8004822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_InitTick+0x70>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e007      	b.n	8001b16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e004      	b.n	8001b16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_IncTick+0x1c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_IncTick+0x20>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <HAL_IncTick+0x1c>)
 8001b3c:	6013      	str	r3, [r2, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	200002e4 	.word	0x200002e4
 8001b4c:	20000008 	.word	0x20000008

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	200002e4 	.word	0x200002e4

08001b68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3360      	adds	r3, #96	; 0x60
 8001be2:	461a      	mov	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <LL_ADC_SetOffset+0x44>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	03fff000 	.word	0x03fff000

08001c18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3360      	adds	r3, #96	; 0x60
 8001c26:	461a      	mov	r2, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3360      	adds	r3, #96	; 0x60
 8001c54:	461a      	mov	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3360      	adds	r3, #96	; 0x60
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3360      	adds	r3, #96	; 0x60
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	615a      	str	r2, [r3, #20]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b087      	sub	sp, #28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3330      	adds	r3, #48	; 0x30
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	4413      	add	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	211f      	movs	r1, #31
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	f003 011f 	and.w	r1, r3, #31
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3314      	adds	r3, #20
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0e5b      	lsrs	r3, r3, #25
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	0d1b      	lsrs	r3, r3, #20
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2107      	movs	r1, #7
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	401a      	ands	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0d1b      	lsrs	r3, r3, #20
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d10a      	bne.n	8001e32 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001e30:	e00a      	b.n	8001e48 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	407f0000 	.word	0x407f0000

08001e58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 031f 	and.w	r3, r3, #31
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6093      	str	r3, [r2, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ec8:	d101      	bne.n	8001ece <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f18:	d101      	bne.n	8001f1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <LL_ADC_IsEnabled+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_ADC_IsEnabled+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8e:	f043 0204 	orr.w	r2, r3, #4
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d101      	bne.n	8001fba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1af      	b.n	800236a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fa31 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff3f 	bl	8001eb4 <LL_ADC_IsDeepPowerDownEnabled>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff25 	bl	8001e90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff5a 	bl	8001f04 <LL_ADC_IsInternalRegulatorEnabled>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d115      	bne.n	8002082 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff3e 	bl	8001edc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002060:	4b9f      	ldr	r3, [pc, #636]	; (80022e0 <HAL_ADC_Init+0x2f0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	4a9f      	ldr	r2, [pc, #636]	; (80022e4 <HAL_ADC_Init+0x2f4>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002074:	e002      	b.n	800207c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3b01      	subs	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f9      	bne.n	8002076 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff3c 	bl	8001f04 <LL_ADC_IsInternalRegulatorEnabled>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10d      	bne.n	80020ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff75 	bl	8001fa2 <LL_ADC_REG_IsConversionOngoing>
 80020b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 8148 	bne.w	8002358 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 8144 	bne.w	8002358 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020d8:	f043 0202 	orr.w	r2, r3, #2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff35 	bl	8001f54 <LL_ADC_IsEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d141      	bne.n	8002174 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f8:	d004      	beq.n	8002104 <HAL_ADC_Init+0x114>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_ADC_Init+0x2f8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d10f      	bne.n	8002124 <HAL_ADC_Init+0x134>
 8002104:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002108:	f7ff ff24 	bl	8001f54 <LL_ADC_IsEnabled>
 800210c:	4604      	mov	r4, r0
 800210e:	4876      	ldr	r0, [pc, #472]	; (80022e8 <HAL_ADC_Init+0x2f8>)
 8002110:	f7ff ff20 	bl	8001f54 <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	4323      	orrs	r3, r4
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e012      	b.n	800214a <HAL_ADC_Init+0x15a>
 8002124:	4871      	ldr	r0, [pc, #452]	; (80022ec <HAL_ADC_Init+0x2fc>)
 8002126:	f7ff ff15 	bl	8001f54 <LL_ADC_IsEnabled>
 800212a:	4604      	mov	r4, r0
 800212c:	4870      	ldr	r0, [pc, #448]	; (80022f0 <HAL_ADC_Init+0x300>)
 800212e:	f7ff ff11 	bl	8001f54 <LL_ADC_IsEnabled>
 8002132:	4603      	mov	r3, r0
 8002134:	431c      	orrs	r4, r3
 8002136:	486f      	ldr	r0, [pc, #444]	; (80022f4 <HAL_ADC_Init+0x304>)
 8002138:	f7ff ff0c 	bl	8001f54 <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	4323      	orrs	r3, r4
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002156:	d004      	beq.n	8002162 <HAL_ADC_Init+0x172>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a62      	ldr	r2, [pc, #392]	; (80022e8 <HAL_ADC_Init+0x2f8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x176>
 8002162:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <HAL_ADC_Init+0x308>)
 8002164:	e000      	b.n	8002168 <HAL_ADC_Init+0x178>
 8002166:	4a65      	ldr	r2, [pc, #404]	; (80022fc <HAL_ADC_Init+0x30c>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f7ff fcfa 	bl	8001b68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7f5b      	ldrb	r3, [r3, #29]
 8002178:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800217e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002184:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800218a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002192:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d106      	bne.n	80021b0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	045b      	lsls	r3, r3, #17
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <HAL_ADC_Init+0x310>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	69b9      	ldr	r1, [r7, #24]
 80021dc:	430b      	orrs	r3, r1
 80021de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fed1 	bl	8001fa2 <LL_ADC_REG_IsConversionOngoing>
 8002200:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fede 	bl	8001fc8 <LL_ADC_INJ_IsConversionOngoing>
 800220c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d17f      	bne.n	8002314 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d17c      	bne.n	8002314 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800221e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002226:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002236:	f023 0302 	bic.w	r3, r3, #2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	430b      	orrs	r3, r1
 8002242:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d017      	beq.n	800227c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800225a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002264:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6911      	ldr	r1, [r2, #16]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800227a:	e013      	b.n	80022a4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800228a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800229c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d12a      	bne.n	8002304 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022d0:	430a      	orrs	r2, r1
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e019      	b.n	8002314 <HAL_ADC_Init+0x324>
 80022e0:	20000000 	.word	0x20000000
 80022e4:	053e2d63 	.word	0x053e2d63
 80022e8:	50000100 	.word	0x50000100
 80022ec:	50000400 	.word	0x50000400
 80022f0:	50000500 	.word	0x50000500
 80022f4:	50000600 	.word	0x50000600
 80022f8:	50000300 	.word	0x50000300
 80022fc:	50000700 	.word	0x50000700
 8002300:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10c      	bne.n	8002336 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f023 010f 	bic.w	r1, r3, #15
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
 8002334:	e007      	b.n	8002346 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 020f 	bic.w	r2, r2, #15
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	65da      	str	r2, [r3, #92]	; 0x5c
 8002356:	e007      	b.n	8002368 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	f043 0210 	orr.w	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002368:	7ffb      	ldrb	r3, [r7, #31]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop

08002374 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002388:	d004      	beq.n	8002394 <HAL_ADC_Start_DMA+0x20>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <HAL_ADC_Start_DMA+0x184>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <HAL_ADC_Start_DMA+0x24>
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_ADC_Start_DMA+0x188>)
 8002396:	e000      	b.n	800239a <HAL_ADC_Start_DMA+0x26>
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_ADC_Start_DMA+0x18c>)
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fd5c 	bl	8001e58 <LL_ADC_GetMultimode>
 80023a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fdfb 	bl	8001fa2 <LL_ADC_REG_IsConversionOngoing>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 809b 	bne.w	80024ea <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Start_DMA+0x4e>
 80023be:	2302      	movs	r3, #2
 80023c0:	e096      	b.n	80024f0 <HAL_ADC_Start_DMA+0x17c>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <HAL_ADC_Start_DMA+0x190>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d008      	beq.n	80023e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d002      	beq.n	80023e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b09      	cmp	r3, #9
 80023e4:	d17a      	bne.n	80024dc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 ff60 	bl	80032ac <ADC_Enable>
 80023ec:	4603      	mov	r3, r0
 80023ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d16d      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <HAL_ADC_Start_DMA+0x184>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_ADC_Start_DMA+0xb4>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3b      	ldr	r2, [pc, #236]	; (8002508 <HAL_ADC_Start_DMA+0x194>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d002      	beq.n	8002424 <HAL_ADC_Start_DMA+0xb0>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	e003      	b.n	800242c <HAL_ADC_Start_DMA+0xb8>
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_ADC_Start_DMA+0x198>)
 8002426:	e001      	b.n	800242c <HAL_ADC_Start_DMA+0xb8>
 8002428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4293      	cmp	r3, r2
 8002432:	d002      	beq.n	800243a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	f023 0206 	bic.w	r2, r3, #6
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	661a      	str	r2, [r3, #96]	; 0x60
 800245e:	e002      	b.n	8002466 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	4a29      	ldr	r2, [pc, #164]	; (8002510 <HAL_ADC_Start_DMA+0x19c>)
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	4a28      	ldr	r2, [pc, #160]	; (8002514 <HAL_ADC_Start_DMA+0x1a0>)
 8002474:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_ADC_Start_DMA+0x1a4>)
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	221c      	movs	r2, #28
 8002484:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0210 	orr.w	r2, r2, #16
 800249c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3340      	adds	r3, #64	; 0x40
 80024b8:	4619      	mov	r1, r3
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f002 fa8d 	bl	80049dc <HAL_DMA_Start_IT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fd55 	bl	8001f7a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024d0:	e00d      	b.n	80024ee <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80024da:	e008      	b.n	80024ee <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80024e8:	e001      	b.n	80024ee <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	50000100 	.word	0x50000100
 80024fc:	50000300 	.word	0x50000300
 8002500:	50000700 	.word	0x50000700
 8002504:	50000600 	.word	0x50000600
 8002508:	50000500 	.word	0x50000500
 800250c:	50000400 	.word	0x50000400
 8002510:	08003371 	.word	0x08003371
 8002514:	08003449 	.word	0x08003449
 8002518:	08003465 	.word	0x08003465

0800251c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002540:	d004      	beq.n	800254c <HAL_ADC_IRQHandler+0x30>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a8e      	ldr	r2, [pc, #568]	; (8002780 <HAL_ADC_IRQHandler+0x264>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_ADC_IRQHandler+0x34>
 800254c:	4b8d      	ldr	r3, [pc, #564]	; (8002784 <HAL_ADC_IRQHandler+0x268>)
 800254e:	e000      	b.n	8002552 <HAL_ADC_IRQHandler+0x36>
 8002550:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <HAL_ADC_IRQHandler+0x26c>)
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fc80 	bl	8001e58 <LL_ADC_GetMultimode>
 8002558:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d017      	beq.n	8002594 <HAL_ADC_IRQHandler+0x78>
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f001 fa32 	bl	80039f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x8c>
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8094 	beq.w	80026dc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 808e 	beq.w	80026dc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb95 	bl	8001d0c <LL_ADC_REG_IsTriggerSourceSWStart>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d072      	beq.n	80026ce <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a64      	ldr	r2, [pc, #400]	; (8002780 <HAL_ADC_IRQHandler+0x264>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_ADC_IRQHandler+0xea>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a65      	ldr	r2, [pc, #404]	; (800278c <HAL_ADC_IRQHandler+0x270>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d002      	beq.n	8002602 <HAL_ADC_IRQHandler+0xe6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	e003      	b.n	800260a <HAL_ADC_IRQHandler+0xee>
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_ADC_IRQHandler+0x274>)
 8002604:	e001      	b.n	800260a <HAL_ADC_IRQHandler+0xee>
 8002606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4293      	cmp	r3, r2
 8002610:	d008      	beq.n	8002624 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b05      	cmp	r3, #5
 800261c:	d002      	beq.n	8002624 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d104      	bne.n	800262e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	623b      	str	r3, [r7, #32]
 800262c:	e014      	b.n	8002658 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a53      	ldr	r2, [pc, #332]	; (8002780 <HAL_ADC_IRQHandler+0x264>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <HAL_ADC_IRQHandler+0x130>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a53      	ldr	r2, [pc, #332]	; (800278c <HAL_ADC_IRQHandler+0x270>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d002      	beq.n	8002648 <HAL_ADC_IRQHandler+0x12c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	e003      	b.n	8002650 <HAL_ADC_IRQHandler+0x134>
 8002648:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_ADC_IRQHandler+0x274>)
 800264a:	e001      	b.n	8002650 <HAL_ADC_IRQHandler+0x134>
 800264c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002650:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d135      	bne.n	80026ce <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b08      	cmp	r3, #8
 800266e:	d12e      	bne.n	80026ce <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fc94 	bl	8001fa2 <LL_ADC_REG_IsConversionOngoing>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11a      	bne.n	80026b6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020c 	bic.w	r2, r2, #12
 800268e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d112      	bne.n	80026ce <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80026b4:	e00b      	b.n	80026ce <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f984 	bl	80029dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	220c      	movs	r2, #12
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x1d4>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80b3 	beq.w	8002862 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80ad 	beq.w	8002862 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fb30 	bl	8001d8a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800272a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff faeb 	bl	8001d0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002736:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_ADC_IRQHandler+0x264>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_ADC_IRQHandler+0x23a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_ADC_IRQHandler+0x270>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d002      	beq.n	8002752 <HAL_ADC_IRQHandler+0x236>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	e003      	b.n	800275a <HAL_ADC_IRQHandler+0x23e>
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_ADC_IRQHandler+0x274>)
 8002754:	e001      	b.n	800275a <HAL_ADC_IRQHandler+0x23e>
 8002756:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4293      	cmp	r3, r2
 8002760:	d008      	beq.n	8002774 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d002      	beq.n	8002774 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b07      	cmp	r3, #7
 8002772:	d10f      	bne.n	8002794 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	e01f      	b.n	80027be <HAL_ADC_IRQHandler+0x2a2>
 800277e:	bf00      	nop
 8002780:	50000100 	.word	0x50000100
 8002784:	50000300 	.word	0x50000300
 8002788:	50000700 	.word	0x50000700
 800278c:	50000500 	.word	0x50000500
 8002790:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a8b      	ldr	r2, [pc, #556]	; (80029c8 <HAL_ADC_IRQHandler+0x4ac>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x296>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <HAL_ADC_IRQHandler+0x4b0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d002      	beq.n	80027ae <HAL_ADC_IRQHandler+0x292>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_IRQHandler+0x29a>
 80027ae:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_ADC_IRQHandler+0x4b4>)
 80027b0:	e001      	b.n	80027b6 <HAL_ADC_IRQHandler+0x29a>
 80027b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d047      	beq.n	8002854 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_ADC_IRQHandler+0x2c2>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d03f      	beq.n	8002854 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d13a      	bne.n	8002854 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d133      	bne.n	8002854 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12e      	bne.n	8002854 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fbe4 	bl	8001fc8 <LL_ADC_INJ_IsConversionOngoing>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11a      	bne.n	800283c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002814:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d112      	bne.n	8002854 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	65da      	str	r2, [r3, #92]	; 0x5c
 800283a:	e00b      	b.n	8002854 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f001 f8a3 	bl	80039a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2260      	movs	r2, #96	; 0x60
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d011      	beq.n	8002890 <HAL_ADC_IRQHandler+0x374>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8be 	bl	8002a04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d012      	beq.n	80028c0 <HAL_ADC_IRQHandler+0x3a4>
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00d      	beq.n	80028c0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f001 f889 	bl	80039c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x3d4>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f001 f87b 	bl	80039dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d043      	beq.n	8002982 <HAL_ADC_IRQHandler+0x466>
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03e      	beq.n	8002982 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e021      	b.n	8002956 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002920:	d004      	beq.n	800292c <HAL_ADC_IRQHandler+0x410>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_ADC_IRQHandler+0x4ac>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_ADC_IRQHandler+0x414>
 800292c:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_ADC_IRQHandler+0x4b8>)
 800292e:	e000      	b.n	8002932 <HAL_ADC_IRQHandler+0x416>
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_ADC_IRQHandler+0x4bc>)
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fa9e 	bl	8001e74 <LL_ADC_GetMultiDMATransfer>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800293e:	2301      	movs	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	e008      	b.n	8002956 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002952:	2301      	movs	r3, #1
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10e      	bne.n	800297a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	f043 0202 	orr.w	r2, r3, #2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f84f 	bl	8002a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2210      	movs	r2, #16
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d018      	beq.n	80029be <HAL_ADC_IRQHandler+0x4a2>
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d013      	beq.n	80029be <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a6:	f043 0208 	orr.w	r2, r3, #8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fffb 	bl	80039b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	50000100 	.word	0x50000100
 80029cc:	50000500 	.word	0x50000500
 80029d0:	50000400 	.word	0x50000400
 80029d4:	50000300 	.word	0x50000300
 80029d8:	50000700 	.word	0x50000700

080029dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b0b6      	sub	sp, #216	; 0xd8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x24>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f000 bc13 	b.w	8003276 <HAL_ADC_ConfigChannel+0x84a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff faa0 	bl	8001fa2 <LL_ADC_REG_IsConversionOngoing>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 83f3 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f7ff f95b 	bl	8001d32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fa8e 	bl	8001fa2 <LL_ADC_REG_IsConversionOngoing>
 8002a86:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fa9a 	bl	8001fc8 <LL_ADC_INJ_IsConversionOngoing>
 8002a94:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 81d9 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 81d4 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7ff f975 	bl	8001db0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f909 	bl	8001ce6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ad4:	e00e      	b.n	8002af4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f7ff f964 	bl	8001db0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f8f9 	bl	8001ce6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	08db      	lsrs	r3, r3, #3
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d022      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b26:	f7ff f853 	bl	8001bd0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f7ff f89f 	bl	8001c7a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6919      	ldr	r1, [r3, #16]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	7f1b      	ldrb	r3, [r3, #28]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x126>
 8002b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b50:	e000      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x128>
 8002b52:	2300      	movs	r3, #0
 8002b54:	461a      	mov	r2, r3
 8002b56:	f7ff f8ab 	bl	8001cb0 <LL_ADC_SetOffsetSaturation>
 8002b5a:	e17b      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f858 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x15c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff f84d 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	f003 021f 	and.w	r2, r3, #31
 8002b86:	e01e      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x19a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f842 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002baa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e004      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x1b2>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	e018      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1e4>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c02:	2320      	movs	r3, #32
 8002c04:	e004      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f811 	bl	8001c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe fff5 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x222>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe ffea 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	e01e      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x260>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe ffdf 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e004      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x278>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	e018      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x2aa>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e004      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe ffae 	bl	8001c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2102      	movs	r1, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff92 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x2e8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2102      	movs	r1, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe ff87 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	f003 021f 	and.w	r2, r3, #31
 8002d12:	e01e      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x326>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe ff7c 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e004      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x33e>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0e9b      	lsrs	r3, r3, #26
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	e016      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x36c>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e004      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d106      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2102      	movs	r1, #2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe ff4d 	bl	8001c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2103      	movs	r1, #3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe ff31 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x3aa>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe ff26 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	0e9b      	lsrs	r3, r3, #26
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	e017      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x3da>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2103      	movs	r1, #3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe ff1b 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x3f2>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	e011      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x416>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e003      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2103      	movs	r1, #3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fef8 	bl	8001c44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f87b 	bl	8001f54 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 813d 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f7fe ffc8 	bl	8001e08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4aa2      	ldr	r2, [pc, #648]	; (8003108 <HAL_ADC_ConfigChannel+0x6dc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f040 812e 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x480>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2b09      	cmp	r3, #9
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e019      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x4b4>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2b09      	cmp	r3, #9
 8002ed8:	bf94      	ite	ls
 8002eda:	2301      	movls	r3, #1
 8002edc:	2300      	movhi	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d079      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x4d4>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	069b      	lsls	r3, r3, #26
 8002efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efe:	e015      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x500>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x520>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	e017      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x550>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x576>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	051b      	lsls	r3, r3, #20
 8002fa0:	e018      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x5a8>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e003      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	e07e      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x5c8>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	069b      	lsls	r3, r3, #26
 8002fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff2:	e015      	b.n	8003020 <HAL_ADC_ConfigChannel+0x5f4>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e003      	b.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	069b      	lsls	r3, r3, #26
 800301c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x614>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	3301      	adds	r3, #1
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	e017      	b.n	8003070 <HAL_ADC_ConfigChannel+0x644>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	61fb      	str	r3, [r7, #28]
  return result;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003058:	2320      	movs	r3, #32
 800305a:	e003      	b.n	8003064 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	ea42 0103 	orr.w	r1, r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_ADC_ConfigChannel+0x670>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	3b1e      	subs	r3, #30
 8003094:	051b      	lsls	r3, r3, #20
 8003096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309a:	e01b      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x6a8>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	613b      	str	r3, [r7, #16]
  return result;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030b4:	2320      	movs	r3, #32
 80030b6:	e003      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f003 021f 	and.w	r2, r3, #31
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	3b1e      	subs	r3, #30
 80030ce:	051b      	lsls	r3, r3, #20
 80030d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d4:	430b      	orrs	r3, r1
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	6892      	ldr	r2, [r2, #8]
 80030da:	4619      	mov	r1, r3
 80030dc:	f7fe fe68 	bl	8001db0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_ADC_ConfigChannel+0x6e0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80be 	beq.w	800326a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x6d6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_ADC_ConfigChannel+0x6e4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10a      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x6ec>
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_ADC_ConfigChannel+0x6e8>)
 8003104:	e009      	b.n	800311a <HAL_ADC_ConfigChannel+0x6ee>
 8003106:	bf00      	nop
 8003108:	407f0000 	.word	0x407f0000
 800310c:	80080000 	.word	0x80080000
 8003110:	50000100 	.word	0x50000100
 8003114:	50000300 	.word	0x50000300
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fd4a 	bl	8001bb4 <LL_ADC_GetCommonPathInternalCh>
 8003120:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a56      	ldr	r2, [pc, #344]	; (8003284 <HAL_ADC_ConfigChannel+0x858>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x70c>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_ADC_ConfigChannel+0x85c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d13a      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d134      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314c:	d005      	beq.n	800315a <HAL_ADC_ConfigChannel+0x72e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4e      	ldr	r2, [pc, #312]	; (800328c <HAL_ADC_ConfigChannel+0x860>)
 8003154:	4293      	cmp	r3, r2
 8003156:	f040 8085 	bne.w	8003264 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003162:	d004      	beq.n	800316e <HAL_ADC_ConfigChannel+0x742>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a49      	ldr	r2, [pc, #292]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x746>
 800316e:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_ADC_ConfigChannel+0x868>)
 8003170:	e000      	b.n	8003174 <HAL_ADC_ConfigChannel+0x748>
 8003172:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 8003174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7fe fd05 	bl	8001b8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003184:	4b44      	ldr	r3, [pc, #272]	; (8003298 <HAL_ADC_ConfigChannel+0x86c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	4a44      	ldr	r2, [pc, #272]	; (800329c <HAL_ADC_ConfigChannel+0x870>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800319e:	e002      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f9      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ac:	e05a      	b.n	8003264 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3b      	ldr	r2, [pc, #236]	; (80032a0 <HAL_ADC_ConfigChannel+0x874>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d125      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x7d8>
 80031b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11f      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a31      	ldr	r2, [pc, #196]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d104      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x7ac>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <HAL_ADC_ConfigChannel+0x878>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d047      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e0:	d004      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x7c0>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x7c4>
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_ADC_ConfigChannel+0x868>)
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7c6>
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 80031f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7fe fcc6 	bl	8001b8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003202:	e031      	b.n	8003268 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_ADC_ConfigChannel+0x87c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12d      	bne.n	800326a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800320e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d127      	bne.n	800326a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322c:	d004      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x80c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x810>
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_ADC_ConfigChannel+0x868>)
 800323a:	e000      	b.n	800323e <HAL_ADC_ConfigChannel+0x812>
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 800323e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f7fe fca0 	bl	8001b8e <LL_ADC_SetCommonPathInternalCh>
 800324e:	e00c      	b.n	800326a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003262:	e002      	b.n	800326a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003268:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003272:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003276:	4618      	mov	r0, r3
 8003278:	37d8      	adds	r7, #216	; 0xd8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	50000700 	.word	0x50000700
 8003284:	c3210000 	.word	0xc3210000
 8003288:	90c00010 	.word	0x90c00010
 800328c:	50000600 	.word	0x50000600
 8003290:	50000100 	.word	0x50000100
 8003294:	50000300 	.word	0x50000300
 8003298:	20000000 	.word	0x20000000
 800329c:	053e2d63 	.word	0x053e2d63
 80032a0:	c7520000 	.word	0xc7520000
 80032a4:	50000500 	.word	0x50000500
 80032a8:	cb840000 	.word	0xcb840000

080032ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe fe4b 	bl	8001f54 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d14d      	bne.n	8003360 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <ADC_Enable+0xc0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e039      	b.n	8003362 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fe1a 	bl	8001f2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032f8:	f7fe fc2a 	bl	8001b50 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032fe:	e028      	b.n	8003352 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fe25 	bl	8001f54 <LL_ADC_IsEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fe09 	bl	8001f2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800331a:	f7fe fc19 	bl	8001b50 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d914      	bls.n	8003352 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d00d      	beq.n	8003352 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e007      	b.n	8003362 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d1cf      	bne.n	8003300 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	8000003f 	.word	0x8000003f

08003370 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d14b      	bne.n	8003422 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d021      	beq.n	80033e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fcaf 	bl	8001d0c <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d032      	beq.n	800341a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d12b      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11f      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80033e6:	e018      	b.n	800341a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d111      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fade 	bl	80029dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003420:	e00e      	b.n	8003440 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff faf2 	bl	8002a18 <HAL_ADC_ErrorCallback>
}
 8003434:	e004      	b.n	8003440 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff faca 	bl	80029f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	f043 0204 	orr.w	r2, r3, #4
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff fac4 	bl	8002a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <LL_ADC_SetCommonPathInternalCh>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_ADC_GetCommonPathInternalCh>:
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <LL_ADC_SetOffset>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3360      	adds	r3, #96	; 0x60
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <LL_ADC_SetOffset+0x44>)
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	601a      	str	r2, [r3, #0]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	03fff000 	.word	0x03fff000

08003524 <LL_ADC_GetOffsetChannel>:
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3360      	adds	r3, #96	; 0x60
 8003532:	461a      	mov	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_SetOffsetState>:
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3360      	adds	r3, #96	; 0x60
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	431a      	orrs	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_ADC_SetOffsetSign>:
{
 8003586:	b480      	push	{r7}
 8003588:	b087      	sub	sp, #28
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3360      	adds	r3, #96	; 0x60
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	601a      	str	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_ADC_SetOffsetSaturation>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3360      	adds	r3, #96	; 0x60
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	615a      	str	r2, [r3, #20]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_ADC_INJ_GetTrigAuto>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_SetChannelSamplingTime>:
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3314      	adds	r3, #20
 8003644:	461a      	mov	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	0e5b      	lsrs	r3, r3, #25
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0d1b      	lsrs	r3, r3, #20
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2107      	movs	r1, #7
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	401a      	ands	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	0d1b      	lsrs	r3, r3, #20
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	431a      	orrs	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <LL_ADC_SetChannelSingleDiff>:
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10a      	bne.n	80036b6 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80036b4:	e00a      	b.n	80036cc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c2:	43db      	mvns	r3, r3
 80036c4:	401a      	ands	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	407f0000 	.word	0x407f0000

080036dc <LL_ADC_GetMultimode>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 031f 	and.w	r3, r3, #31
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_ADC_IsEnabled>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <LL_ADC_IsEnabled+0x18>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_ADC_IsEnabled+0x1a>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_ADC_REG_IsConversionOngoing>:
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d101      	bne.n	8003736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_INJ_StartConversion>:
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003758:	f043 0208 	orr.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_ADC_INJ_IsConversionOngoing>:
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d101      	bne.n	8003784 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a4:	d004      	beq.n	80037b0 <HAL_ADCEx_InjectedStart_IT+0x1c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a78      	ldr	r2, [pc, #480]	; (800398c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_ADCEx_InjectedStart_IT+0x20>
 80037b0:	4b77      	ldr	r3, [pc, #476]	; (8003990 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 80037b2:	e000      	b.n	80037b6 <HAL_ADCEx_InjectedStart_IT+0x22>
 80037b4:	4b77      	ldr	r3, [pc, #476]	; (8003994 <HAL_ADCEx_InjectedStart_IT+0x200>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff90 	bl	80036dc <LL_ADC_GetMultimode>
 80037bc:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff ffd2 	bl	800376c <LL_ADC_INJ_IsConversionOngoing>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0d8      	b.n	8003984 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037dc:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0c0      	b.n	8003984 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_ADCEx_InjectedStart_IT+0x7c>
 800380c:	2302      	movs	r3, #2
 800380e:	e0b9      	b.n	8003984 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fd47 	bl	80032ac <ADC_Enable>
 800381e:	4603      	mov	r3, r0
 8003820:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 80a8 	bne.w	800397a <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d006      	beq.n	8003844 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383a:	f023 0208 	bic.w	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	661a      	str	r2, [r3, #96]	; 0x60
 8003842:	e002      	b.n	800384a <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_ADCEx_InjectedStart_IT+0xe8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_ADCEx_InjectedStart_IT+0x204>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d002      	beq.n	8003878 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	e003      	b.n	8003880 <HAL_ADCEx_InjectedStart_IT+0xec>
 8003878:	4b48      	ldr	r3, [pc, #288]	; (800399c <HAL_ADCEx_InjectedStart_IT+0x208>)
 800387a:	e001      	b.n	8003880 <HAL_ADCEx_InjectedStart_IT+0xec>
 800387c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	4293      	cmp	r3, r2
 8003886:	d002      	beq.n	800388e <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2260      	movs	r2, #96	; 0x60
 80038a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c6:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d110      	bne.n	80038f2 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0220 	bic.w	r2, r2, #32
 80038de:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ee:	605a      	str	r2, [r3, #4]
          break;
 80038f0:	e010      	b.n	8003914 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003900:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0220 	orr.w	r2, r2, #32
 8003910:	605a      	str	r2, [r3, #4]
          break;
 8003912:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_ADCEx_InjectedStart_IT+0x19e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d002      	beq.n	800392e <HAL_ADCEx_InjectedStart_IT+0x19a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	e003      	b.n	8003936 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_ADCEx_InjectedStart_IT+0x208>)
 8003930:	e001      	b.n	8003936 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8003932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	4293      	cmp	r3, r2
 800393c:	d008      	beq.n	8003950 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d002      	beq.n	8003950 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b07      	cmp	r3, #7
 800394e:	d10d      	bne.n	800396c <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fe5f 	bl	8003618 <LL_ADC_INJ_GetTrigAuto>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d110      	bne.n	8003982 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff feed 	bl	8003744 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800396a:	e00a      	b.n	8003982 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
 8003978:	e003      	b.n	8003982 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	50000100 	.word	0x50000100
 8003990:	50000300 	.word	0x50000300
 8003994:	50000700 	.word	0x50000700
 8003998:	50000500 	.word	0x50000500
 800399c:	50000400 	.word	0x50000400

080039a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0b6      	sub	sp, #216	; 0xd8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d102      	bne.n	8003a2e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f000 bcfd 	b.w	8004428 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d130      	bne.n	8003aa8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b09      	cmp	r3, #9
 8003a4c:	d179      	bne.n	8003b42 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	0e9b      	lsrs	r3, r3, #26
 8003a5c:	025b      	lsls	r3, r3, #9
 8003a5e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003a6a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a76:	e007      	b.n	8003a88 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	0e9b      	lsrs	r3, r3, #26
 8003a7e:	025b      	lsls	r3, r3, #9
 8003a80:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a8e:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aa4:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003aa6:	e04c      	b.n	8003b42 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11d      	bne.n	8003aec <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003ad4:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ae0:	e004      	b.n	8003aec <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	f003 021f 	and.w	r2, r3, #31
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b32:	4b5b      	ldr	r3, [pc, #364]	; (8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fe10 	bl	800376c <LL_ADC_INJ_IsConversionOngoing>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d124      	bne.n	8003b9c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d112      	bne.n	8003b82 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b6c:	055a      	lsls	r2, r3, #21
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b74:	051b      	lsls	r3, r3, #20
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	e00c      	b.n	8003b9c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b92:	055a      	lsls	r2, r3, #21
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fdbc 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 8003ba6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fddc 	bl	800376c <LL_ADC_INJ_IsConversionOngoing>
 8003bb4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 822e 	bne.w	800401e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 8229 	bne.w	800401e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d108      	bne.n	8003bf8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003bf4:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003bf6:	e01f      	b.n	8003c38 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c06:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c08:	e016      	b.n	8003c38 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d109      	bne.n	8003c28 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c26:	e007      	b.n	8003c38 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c36:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d110      	bne.n	8003c64 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	430b      	orrs	r3, r1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0202 	orr.w	r2, r2, #2
 8003c60:	611a      	str	r2, [r3, #16]
 8003c62:	e007      	b.n	8003c74 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0202 	bic.w	r2, r2, #2
 8003c72:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7c:	d112      	bne.n	8003ca4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2200      	movs	r2, #0
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7ff fcd3 	bl	8003634 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fcab 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c9c:	e011      	b.n	8003cc2 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003c9e:	bf00      	nop
 8003ca0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f7ff fcbf 	bl	8003634 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fc98 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d022      	beq.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6919      	ldr	r1, [r3, #16]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf4:	f7ff fbf2 	bl	80034dc <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6919      	ldr	r1, [r3, #16]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f7ff fc3e 	bl	8003586 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1e:	e000      	b.n	8003d22 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003d20:	2300      	movs	r3, #0
 8003d22:	461a      	mov	r2, r3
 8003d24:	f7ff fc4a 	bl	80035bc <LL_ADC_SetOffsetSaturation>
 8003d28:	e179      	b.n	800401e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fbf7 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fbec 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	0e9b      	lsrs	r3, r3, #26
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	e01e      	b.n	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fbe1 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003d7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	e004      	b.n	8003d92 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	e018      	b.n	8003dde <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003dc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	e004      	b.n	8003dde <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d106      	bne.n	8003df0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fbb0 	bl	8003550 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fb94 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fb89 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003e12:	4603      	mov	r3, r0
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	f003 021f 	and.w	r2, r3, #31
 8003e1a:	e01e      	b.n	8003e5a <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fb7e 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	e004      	b.n	8003e58 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	0e9b      	lsrs	r3, r3, #26
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	e018      	b.n	8003ea4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003e96:	2320      	movs	r3, #32
 8003e98:	e004      	b.n	8003ea4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d106      	bne.n	8003eb6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fb4d 	bl	8003550 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fb31 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fb26 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	0e9b      	lsrs	r3, r3, #26
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	e01e      	b.n	8003f20 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fb1b 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003f10:	2320      	movs	r3, #32
 8003f12:	e004      	b.n	8003f1e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	e014      	b.n	8003f62 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e004      	b.n	8003f62 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d106      	bne.n	8003f74 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff faee 	bl	8003550 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2103      	movs	r1, #3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fad2 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2103      	movs	r1, #3
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fac7 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	e017      	b.n	8003fd0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fabc 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003fbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003fc2:	2320      	movs	r3, #32
 8003fc4:	e003      	b.n	8003fce <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	e011      	b.n	800400c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004000:	2320      	movs	r3, #32
 8004002:	e003      	b.n	800400c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800400c:	429a      	cmp	r2, r3
 800400e:	d106      	bne.n	800401e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	2103      	movs	r1, #3
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fa99 	bl	8003550 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fb68 	bl	80036f8 <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 813d 	bne.w	80042aa <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	461a      	mov	r2, r3
 800403e:	f7ff fb25 	bl	800368c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4aa2      	ldr	r2, [pc, #648]	; (80042d0 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	f040 812e 	bne.w	80042aa <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	0e9b      	lsrs	r3, r3, #26
 8004064:	3301      	adds	r3, #1
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2b09      	cmp	r3, #9
 800406c:	bf94      	ite	ls
 800406e:	2301      	movls	r3, #1
 8004070:	2300      	movhi	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	e019      	b.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800407e:	fa93 f3a3 	rbit	r3, r3
 8004082:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800408e:	2320      	movs	r3, #32
 8004090:	e003      	b.n	800409a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004094:	fab3 f383 	clz	r3, r3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d079      	beq.n	80041a2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0e9b      	lsrs	r3, r3, #26
 80040c0:	3301      	adds	r3, #1
 80040c2:	069b      	lsls	r3, r3, #26
 80040c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040c8:	e015      	b.n	80040f6 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80040dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e003      	b.n	80040ee <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80040e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	069b      	lsls	r3, r3, #26
 80040f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	3301      	adds	r3, #1
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	e017      	b.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800412e:	2320      	movs	r3, #32
 8004130:	e003      	b.n	800413a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	ea42 0103 	orr.w	r1, r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	3301      	adds	r3, #1
 800415e:	f003 021f 	and.w	r2, r3, #31
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	051b      	lsls	r3, r3, #20
 800416a:	e018      	b.n	800419e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e003      	b.n	8004190 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f003 021f 	and.w	r2, r3, #31
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800419e:	430b      	orrs	r3, r1
 80041a0:	e07e      	b.n	80042a0 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	0e9b      	lsrs	r3, r3, #26
 80041b4:	3301      	adds	r3, #1
 80041b6:	069b      	lsls	r3, r3, #26
 80041b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041bc:	e015      	b.n	80041ea <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80041d6:	2320      	movs	r3, #32
 80041d8:	e003      	b.n	80041e2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	3301      	adds	r3, #1
 80041e4:	069b      	lsls	r3, r3, #26
 80041e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_ADCEx_InjectedConfigChannel+0x806>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0e9b      	lsrs	r3, r3, #26
 80041fc:	3301      	adds	r3, #1
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	e017      	b.n	800423a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	61bb      	str	r3, [r7, #24]
  return result;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004222:	2320      	movs	r3, #32
 8004224:	e003      	b.n	800422e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	b2db      	uxtb	r3, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	ea42 0103 	orr.w	r1, r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10d      	bne.n	8004266 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	0e9b      	lsrs	r3, r3, #26
 8004250:	3301      	adds	r3, #1
 8004252:	f003 021f 	and.w	r2, r3, #31
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	3b1e      	subs	r3, #30
 800425e:	051b      	lsls	r3, r3, #20
 8004260:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004264:	e01b      	b.n	800429e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	60fb      	str	r3, [r7, #12]
  return result;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 800427e:	2320      	movs	r3, #32
 8004280:	e003      	b.n	800428a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4613      	mov	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	3b1e      	subs	r3, #30
 8004298:	051b      	lsls	r3, r3, #20
 800429a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800429e:	430b      	orrs	r3, r1
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	6892      	ldr	r2, [r2, #8]
 80042a4:	4619      	mov	r1, r3
 80042a6:	f7ff f9c5 	bl	8003634 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80b2 	beq.w	800441c <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c0:	d004      	beq.n	80042cc <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d109      	bne.n	80042e0 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80042ce:	e008      	b.n	80042e2 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80042d0:	407f0000 	.word	0x407f0000
 80042d4:	80080000 	.word	0x80080000
 80042d8:	50000100 	.word	0x50000100
 80042dc:	50000300 	.word	0x50000300
 80042e0:	4b53      	ldr	r3, [pc, #332]	; (8004430 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f8eb 	bl	80034be <LL_ADC_GetCommonPathInternalCh>
 80042e8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a50      	ldr	r2, [pc, #320]	; (8004434 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4f      	ldr	r2, [pc, #316]	; (8004438 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d139      	bne.n	8004374 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d133      	bne.n	8004374 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004314:	d004      	beq.n	8004320 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a48      	ldr	r2, [pc, #288]	; (800443c <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d17a      	bne.n	8004416 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004328:	d004      	beq.n	8004334 <HAL_ADCEx_InjectedConfigChannel+0x930>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a44      	ldr	r2, [pc, #272]	; (8004440 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004334:	4a43      	ldr	r2, [pc, #268]	; (8004444 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004336:	e000      	b.n	800433a <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004338:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800433a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800433e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f7ff f8a7 	bl	8003498 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	4a3e      	ldr	r2, [pc, #248]	; (800444c <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	099a      	lsrs	r2, r3, #6
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3318      	adds	r3, #24
 8004362:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004364:	e002      	b.n	800436c <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3b01      	subs	r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f9      	bne.n	8004366 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004372:	e050      	b.n	8004416 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a35      	ldr	r2, [pc, #212]	; (8004450 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d125      	bne.n	80043ca <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800437e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11f      	bne.n	80043ca <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d104      	bne.n	800439e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2e      	ldr	r2, [pc, #184]	; (8004454 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d03d      	beq.n	800441a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a6:	d004      	beq.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a24      	ldr	r2, [pc, #144]	; (8004440 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80043b2:	4a24      	ldr	r2, [pc, #144]	; (8004444 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80043b4:	e000      	b.n	80043b8 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80043b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f7ff f868 	bl	8003498 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c8:	e027      	b.n	800441a <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d123      	bne.n	800441c <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11d      	bne.n	800441c <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a16      	ldr	r2, [pc, #88]	; (8004440 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f2:	d004      	beq.n	80043fe <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80043fe:	4a11      	ldr	r2, [pc, #68]	; (8004444 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004400:	e000      	b.n	8004404 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f7ff f842 	bl	8003498 <LL_ADC_SetCommonPathInternalCh>
 8004414:	e002      	b.n	800441c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800441a:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004424:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004428:	4618      	mov	r0, r3
 800442a:	37d8      	adds	r7, #216	; 0xd8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	50000700 	.word	0x50000700
 8004434:	c3210000 	.word	0xc3210000
 8004438:	90c00010 	.word	0x90c00010
 800443c:	50000600 	.word	0x50000600
 8004440:	50000100 	.word	0x50000100
 8004444:	50000300 	.word	0x50000300
 8004448:	20000000 	.word	0x20000000
 800444c:	053e2d63 	.word	0x053e2d63
 8004450:	c7520000 	.word	0xc7520000
 8004454:	50000500 	.word	0x50000500
 8004458:	cb840000 	.word	0xcb840000

0800445c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b0a1      	sub	sp, #132	; 0x84
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004476:	2302      	movs	r3, #2
 8004478:	e0e7      	b.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004482:	2300      	movs	r3, #0
 8004484:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004486:	2300      	movs	r3, #0
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004492:	d102      	bne.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004494:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	e009      	b.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d102      	bne.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80044a4:	4b6d      	ldr	r3, [pc, #436]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	e001      	b.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0be      	b.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff f925 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 80044d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff f91f 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 80a0 	bne.w	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 809c 	bne.w	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f8:	d004      	beq.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a55      	ldr	r2, [pc, #340]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004506:	e000      	b.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004508:	4b56      	ldr	r3, [pc, #344]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800450a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d04b      	beq.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004526:	035b      	lsls	r3, r3, #13
 8004528:	430b      	orrs	r3, r1
 800452a:	431a      	orrs	r2, r3
 800452c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004538:	d004      	beq.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a45      	ldr	r2, [pc, #276]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10f      	bne.n	8004564 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004544:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004548:	f7ff f8d6 	bl	80036f8 <LL_ADC_IsEnabled>
 800454c:	4604      	mov	r4, r0
 800454e:	4841      	ldr	r0, [pc, #260]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004550:	f7ff f8d2 	bl	80036f8 <LL_ADC_IsEnabled>
 8004554:	4603      	mov	r3, r0
 8004556:	4323      	orrs	r3, r4
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e012      	b.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004564:	483c      	ldr	r0, [pc, #240]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004566:	f7ff f8c7 	bl	80036f8 <LL_ADC_IsEnabled>
 800456a:	4604      	mov	r4, r0
 800456c:	483b      	ldr	r0, [pc, #236]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800456e:	f7ff f8c3 	bl	80036f8 <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	431c      	orrs	r4, r3
 8004576:	483c      	ldr	r0, [pc, #240]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004578:	f7ff f8be 	bl	80036f8 <LL_ADC_IsEnabled>
 800457c:	4603      	mov	r3, r0
 800457e:	4323      	orrs	r3, r4
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d056      	beq.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800458e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004596:	f023 030f 	bic.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	6892      	ldr	r2, [r2, #8]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045aa:	e047      	b.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c0:	d004      	beq.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10f      	bne.n	80045ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80045cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045d0:	f7ff f892 	bl	80036f8 <LL_ADC_IsEnabled>
 80045d4:	4604      	mov	r4, r0
 80045d6:	481f      	ldr	r0, [pc, #124]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045d8:	f7ff f88e 	bl	80036f8 <LL_ADC_IsEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	4323      	orrs	r3, r4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e012      	b.n	8004612 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045ec:	481a      	ldr	r0, [pc, #104]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045ee:	f7ff f883 	bl	80036f8 <LL_ADC_IsEnabled>
 80045f2:	4604      	mov	r4, r0
 80045f4:	4819      	ldr	r0, [pc, #100]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045f6:	f7ff f87f 	bl	80036f8 <LL_ADC_IsEnabled>
 80045fa:	4603      	mov	r3, r0
 80045fc:	431c      	orrs	r4, r3
 80045fe:	481a      	ldr	r0, [pc, #104]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004600:	f7ff f87a 	bl	80036f8 <LL_ADC_IsEnabled>
 8004604:	4603      	mov	r3, r0
 8004606:	4323      	orrs	r3, r4
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d012      	beq.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800461e:	f023 030f 	bic.w	r3, r3, #15
 8004622:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004624:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004626:	e009      	b.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800463a:	e000      	b.n	800463e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800463c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004646:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800464a:	4618      	mov	r0, r3
 800464c:	3784      	adds	r7, #132	; 0x84
 800464e:	46bd      	mov	sp, r7
 8004650:	bd90      	pop	{r4, r7, pc}
 8004652:	bf00      	nop
 8004654:	50000100 	.word	0x50000100
 8004658:	50000400 	.word	0x50000400
 800465c:	50000500 	.word	0x50000500
 8004660:	50000300 	.word	0x50000300
 8004664:	50000700 	.word	0x50000700
 8004668:	50000600 	.word	0x50000600

0800466c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004688:	4013      	ands	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	60d3      	str	r3, [r2, #12]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <__NVIC_GetPriorityGrouping+0x18>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 0307 	and.w	r3, r3, #7
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db0b      	blt.n	80046fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	f003 021f 	and.w	r2, r3, #31
 80046e8:	4907      	ldr	r1, [pc, #28]	; (8004708 <__NVIC_EnableIRQ+0x38>)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2001      	movs	r0, #1
 80046f2:	fa00 f202 	lsl.w	r2, r0, r2
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000e100 	.word	0xe000e100

0800470c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471c:	2b00      	cmp	r3, #0
 800471e:	db0a      	blt.n	8004736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	490c      	ldr	r1, [pc, #48]	; (8004758 <__NVIC_SetPriority+0x4c>)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	0112      	lsls	r2, r2, #4
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	440b      	add	r3, r1
 8004730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004734:	e00a      	b.n	800474c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4908      	ldr	r1, [pc, #32]	; (800475c <__NVIC_SetPriority+0x50>)
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	3b04      	subs	r3, #4
 8004744:	0112      	lsls	r2, r2, #4
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	440b      	add	r3, r1
 800474a:	761a      	strb	r2, [r3, #24]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	e000e100 	.word	0xe000e100
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	; 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f1c3 0307 	rsb	r3, r3, #7
 800477a:	2b04      	cmp	r3, #4
 800477c:	bf28      	it	cs
 800477e:	2304      	movcs	r3, #4
 8004780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3304      	adds	r3, #4
 8004786:	2b06      	cmp	r3, #6
 8004788:	d902      	bls.n	8004790 <NVIC_EncodePriority+0x30>
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3b03      	subs	r3, #3
 800478e:	e000      	b.n	8004792 <NVIC_EncodePriority+0x32>
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	401a      	ands	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a8:	f04f 31ff 	mov.w	r1, #4294967295
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	43d9      	mvns	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b8:	4313      	orrs	r3, r2
         );
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d8:	d301      	bcc.n	80047de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047da:	2301      	movs	r3, #1
 80047dc:	e00f      	b.n	80047fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <SysTick_Config+0x40>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047e6:	210f      	movs	r1, #15
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	f7ff ff8e 	bl	800470c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <SysTick_Config+0x40>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047f6:	4b04      	ldr	r3, [pc, #16]	; (8004808 <SysTick_Config+0x40>)
 80047f8:	2207      	movs	r2, #7
 80047fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	e000e010 	.word	0xe000e010

0800480c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff ff29 	bl	800466c <__NVIC_SetPriorityGrouping>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af00      	add	r7, sp, #0
 8004828:	4603      	mov	r3, r0
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004830:	f7ff ff40 	bl	80046b4 <__NVIC_GetPriorityGrouping>
 8004834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f7ff ff90 	bl	8004760 <NVIC_EncodePriority>
 8004840:	4602      	mov	r2, r0
 8004842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff5f 	bl	800470c <__NVIC_SetPriority>
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ff33 	bl	80046d0 <__NVIC_EnableIRQ>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ffa4 	bl	80047c8 <SysTick_Config>
 8004880:	4603      	mov	r3, r0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e08d      	b.n	80049ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_DMA_Init+0x138>)
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d80f      	bhi.n	80048ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b45      	ldr	r3, [pc, #276]	; (80049c8 <HAL_DMA_Init+0x13c>)
 80048b2:	4413      	add	r3, r2
 80048b4:	4a45      	ldr	r2, [pc, #276]	; (80049cc <HAL_DMA_Init+0x140>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	009a      	lsls	r2, r3, #2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a42      	ldr	r2, [pc, #264]	; (80049d0 <HAL_DMA_Init+0x144>)
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
 80048c8:	e00e      	b.n	80048e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <HAL_DMA_Init+0x148>)
 80048d2:	4413      	add	r3, r2
 80048d4:	4a3d      	ldr	r2, [pc, #244]	; (80049cc <HAL_DMA_Init+0x140>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	009a      	lsls	r2, r3, #2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <HAL_DMA_Init+0x14c>)
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800490c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9b6 	bl	8004cac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004948:	d102      	bne.n	8004950 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004964:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_DMA_Init+0x104>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d80c      	bhi.n	8004990 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9d6 	bl	8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	e008      	b.n	80049a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40020407 	.word	0x40020407
 80049c8:	bffdfff8 	.word	0xbffdfff8
 80049cc:	cccccccd 	.word	0xcccccccd
 80049d0:	40020000 	.word	0x40020000
 80049d4:	bffdfbf8 	.word	0xbffdfbf8
 80049d8:	40020400 	.word	0x40020400

080049dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_DMA_Start_IT+0x20>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e066      	b.n	8004aca <HAL_DMA_Start_IT+0xee>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d155      	bne.n	8004abc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f8fb 	bl	8004c30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 020e 	orr.w	r2, r2, #14
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e00f      	b.n	8004a74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 020a 	orr.w	r2, r2, #10
 8004a72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e005      	b.n	8004ac8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2204      	movs	r2, #4
 8004af4:	409a      	lsls	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d026      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x7a>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d021      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0204 	bic.w	r2, r2, #4
 8004b24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f003 021f 	and.w	r2, r3, #31
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2104      	movs	r1, #4
 8004b34:	fa01 f202 	lsl.w	r2, r1, r2
 8004b38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d071      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b4a:	e06c      	b.n	8004c26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2202      	movs	r2, #2
 8004b56:	409a      	lsls	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02e      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d029      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 020a 	bic.w	r2, r2, #10
 8004b86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d038      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004bbc:	e033      	b.n	8004c26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d02a      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d025      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 020e 	bic.w	r2, r2, #14
 8004bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	f003 021f 	and.w	r2, r3, #31
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
}
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d004      	beq.n	8004c5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f003 021f 	and.w	r2, r3, #31
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2101      	movs	r1, #1
 8004c68:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d108      	bne.n	8004c90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c8e:	e007      	b.n	8004ca0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d802      	bhi.n	8004cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e001      	b.n	8004cca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004cc6:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004cc8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	3b08      	subs	r3, #8
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004cf6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	2201      	movs	r2, #1
 8004d00:	409a      	lsls	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40020407 	.word	0x40020407
 8004d18:	40020800 	.word	0x40020800
 8004d1c:	40020820 	.word	0x40020820
 8004d20:	cccccccd 	.word	0xcccccccd
 8004d24:	40020880 	.word	0x40020880

08004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d4a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2201      	movs	r2, #1
 8004d56:	409a      	lsls	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	1000823f 	.word	0x1000823f
 8004d6c:	40020940 	.word	0x40020940

08004d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d7e:	e15a      	b.n	8005036 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 814c 	beq.w	8005030 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d005      	beq.n	8004db0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d130      	bne.n	8004e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004de6:	2201      	movs	r2, #1
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4013      	ands	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 0201 	and.w	r2, r3, #1
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d017      	beq.n	8004e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2203      	movs	r2, #3
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d123      	bne.n	8004ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	08da      	lsrs	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3208      	adds	r2, #8
 8004e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	220f      	movs	r2, #15
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	08da      	lsrs	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3208      	adds	r2, #8
 8004e9c:	6939      	ldr	r1, [r7, #16]
 8004e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	2203      	movs	r2, #3
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 0203 	and.w	r2, r3, #3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80a6 	beq.w	8005030 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee4:	4b5b      	ldr	r3, [pc, #364]	; (8005054 <HAL_GPIO_Init+0x2e4>)
 8004ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee8:	4a5a      	ldr	r2, [pc, #360]	; (8005054 <HAL_GPIO_Init+0x2e4>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6613      	str	r3, [r2, #96]	; 0x60
 8004ef0:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_GPIO_Init+0x2e4>)
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004efc:	4a56      	ldr	r2, [pc, #344]	; (8005058 <HAL_GPIO_Init+0x2e8>)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	3302      	adds	r3, #2
 8004f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	220f      	movs	r2, #15
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f26:	d01f      	beq.n	8004f68 <HAL_GPIO_Init+0x1f8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a4c      	ldr	r2, [pc, #304]	; (800505c <HAL_GPIO_Init+0x2ec>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d019      	beq.n	8004f64 <HAL_GPIO_Init+0x1f4>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a4b      	ldr	r2, [pc, #300]	; (8005060 <HAL_GPIO_Init+0x2f0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_GPIO_Init+0x1f0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a4a      	ldr	r2, [pc, #296]	; (8005064 <HAL_GPIO_Init+0x2f4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00d      	beq.n	8004f5c <HAL_GPIO_Init+0x1ec>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a49      	ldr	r2, [pc, #292]	; (8005068 <HAL_GPIO_Init+0x2f8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <HAL_GPIO_Init+0x1e8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a48      	ldr	r2, [pc, #288]	; (800506c <HAL_GPIO_Init+0x2fc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_GPIO_Init+0x1e4>
 8004f50:	2305      	movs	r3, #5
 8004f52:	e00a      	b.n	8004f6a <HAL_GPIO_Init+0x1fa>
 8004f54:	2306      	movs	r3, #6
 8004f56:	e008      	b.n	8004f6a <HAL_GPIO_Init+0x1fa>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	e006      	b.n	8004f6a <HAL_GPIO_Init+0x1fa>
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e004      	b.n	8004f6a <HAL_GPIO_Init+0x1fa>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e002      	b.n	8004f6a <HAL_GPIO_Init+0x1fa>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <HAL_GPIO_Init+0x1fa>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	f002 0203 	and.w	r2, r2, #3
 8004f70:	0092      	lsls	r2, r2, #2
 8004f72:	4093      	lsls	r3, r2
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f7a:	4937      	ldr	r1, [pc, #220]	; (8005058 <HAL_GPIO_Init+0x2e8>)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	3302      	adds	r3, #2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f88:	4b39      	ldr	r3, [pc, #228]	; (8005070 <HAL_GPIO_Init+0x300>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fac:	4a30      	ldr	r2, [pc, #192]	; (8005070 <HAL_GPIO_Init+0x300>)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <HAL_GPIO_Init+0x300>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fd6:	4a26      	ldr	r2, [pc, #152]	; (8005070 <HAL_GPIO_Init+0x300>)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <HAL_GPIO_Init+0x300>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005000:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <HAL_GPIO_Init+0x300>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005006:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <HAL_GPIO_Init+0x300>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800502a:	4a11      	ldr	r2, [pc, #68]	; (8005070 <HAL_GPIO_Init+0x300>)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3301      	adds	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f ae9d 	bne.w	8004d80 <HAL_GPIO_Init+0x10>
  }
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40021000 	.word	0x40021000
 8005058:	40010000 	.word	0x40010000
 800505c:	48000400 	.word	0x48000400
 8005060:	48000800 	.word	0x48000800
 8005064:	48000c00 	.word	0x48000c00
 8005068:	48001000 	.word	0x48001000
 800506c:	48001400 	.word	0x48001400
 8005070:	40010400 	.word	0x40010400

08005074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e001      	b.n	8005096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	807b      	strh	r3, [r7, #2]
 80050b0:	4613      	mov	r3, r2
 80050b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050b4:	787b      	ldrb	r3, [r7, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ba:	887a      	ldrh	r2, [r7, #2]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050c0:	e002      	b.n	80050c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050e6:	887a      	ldrh	r2, [r7, #2]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4013      	ands	r3, r2
 80050ec:	041a      	lsls	r2, r3, #16
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	43d9      	mvns	r1, r3
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	400b      	ands	r3, r1
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	619a      	str	r2, [r3, #24]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800511e:	4a05      	ldr	r2, [pc, #20]	; (8005134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f806 	bl	8005138 <HAL_GPIO_EXTI_Callback>
  }
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40010400 	.word	0x40010400

08005138 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d141      	bne.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800515e:	4b4b      	ldr	r3, [pc, #300]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	d131      	bne.n	80051d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800516c:	4b47      	ldr	r3, [pc, #284]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005172:	4a46      	ldr	r2, [pc, #280]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800517c:	4b43      	ldr	r3, [pc, #268]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005184:	4a41      	ldr	r2, [pc, #260]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800518a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800518c:	4b40      	ldr	r3, [pc, #256]	; (8005290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2232      	movs	r2, #50	; 0x32
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	4a3f      	ldr	r2, [pc, #252]	; (8005294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	0c9b      	lsrs	r3, r3, #18
 800519e:	3301      	adds	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051a2:	e002      	b.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051aa:	4b38      	ldr	r3, [pc, #224]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	d102      	bne.n	80051be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f2      	bne.n	80051a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051be:	4b33      	ldr	r3, [pc, #204]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ca:	d158      	bne.n	800527e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e057      	b.n	8005280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051d0:	4b2e      	ldr	r3, [pc, #184]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d6:	4a2d      	ldr	r2, [pc, #180]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051e0:	e04d      	b.n	800527e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e8:	d141      	bne.n	800526e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051ea:	4b28      	ldr	r3, [pc, #160]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f6:	d131      	bne.n	800525c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051f8:	4b24      	ldr	r3, [pc, #144]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fe:	4a23      	ldr	r2, [pc, #140]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005208:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2232      	movs	r2, #50	; 0x32
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	0c9b      	lsrs	r3, r3, #18
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800522e:	e002      	b.n	8005236 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b01      	subs	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005236:	4b15      	ldr	r3, [pc, #84]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005242:	d102      	bne.n	800524a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f2      	bne.n	8005230 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005256:	d112      	bne.n	800527e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e011      	b.n	8005280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005262:	4a0a      	ldr	r2, [pc, #40]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800526c:	e007      	b.n	800527e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800526e:	4b07      	ldr	r3, [pc, #28]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005276:	4a05      	ldr	r2, [pc, #20]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800527c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40007000 	.word	0x40007000
 8005290:	20000000 	.word	0x20000000
 8005294:	431bde83 	.word	0x431bde83

08005298 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a6:	6093      	str	r3, [r2, #8]
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40007000 	.word	0x40007000

080052b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e306      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d075      	beq.n	80053c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d6:	4b97      	ldr	r3, [pc, #604]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e0:	4b94      	ldr	r3, [pc, #592]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d102      	bne.n	80052f6 <HAL_RCC_OscConfig+0x3e>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_OscConfig+0x44>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d10b      	bne.n	8005314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	4b8d      	ldr	r3, [pc, #564]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05b      	beq.n	80053c0 <HAL_RCC_OscConfig+0x108>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d157      	bne.n	80053c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e2e1      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531c:	d106      	bne.n	800532c <HAL_RCC_OscConfig+0x74>
 800531e:	4b85      	ldr	r3, [pc, #532]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a84      	ldr	r2, [pc, #528]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e01d      	b.n	8005368 <HAL_RCC_OscConfig+0xb0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0x98>
 8005336:	4b7f      	ldr	r3, [pc, #508]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a7e      	ldr	r2, [pc, #504]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800533c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b7c      	ldr	r3, [pc, #496]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7b      	ldr	r2, [pc, #492]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e00b      	b.n	8005368 <HAL_RCC_OscConfig+0xb0>
 8005350:	4b78      	ldr	r3, [pc, #480]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a77      	ldr	r2, [pc, #476]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b75      	ldr	r3, [pc, #468]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a74      	ldr	r2, [pc, #464]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fc fbee 	bl	8001b50 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005378:	f7fc fbea 	bl	8001b50 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e2a6      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800538a:	4b6a      	ldr	r3, [pc, #424]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0xc0>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fc fbda 	bl	8001b50 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a0:	f7fc fbd6 	bl	8001b50 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	; 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e292      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053b2:	4b60      	ldr	r3, [pc, #384]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0xe8>
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d075      	beq.n	80054ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ce:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d8:	4b56      	ldr	r3, [pc, #344]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d102      	bne.n	80053ee <HAL_RCC_OscConfig+0x136>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d002      	beq.n	80053f4 <HAL_RCC_OscConfig+0x13c>
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11f      	bne.n	8005434 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f4:	4b4f      	ldr	r3, [pc, #316]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_OscConfig+0x154>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e265      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b49      	ldr	r3, [pc, #292]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	4946      	ldr	r1, [pc, #280]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005420:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_RCC_OscConfig+0x280>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7fc fb47 	bl	8001ab8 <HAL_InitTick>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d043      	beq.n	80054b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e251      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d023      	beq.n	8005484 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543c:	4b3d      	ldr	r3, [pc, #244]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a3c      	ldr	r2, [pc, #240]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fc fb82 	bl	8001b50 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005450:	f7fc fb7e 	bl	8001b50 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e23a      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	061b      	lsls	r3, r3, #24
 800547c:	492d      	ldr	r1, [pc, #180]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	604b      	str	r3, [r1, #4]
 8005482:	e01a      	b.n	80054ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2a      	ldr	r2, [pc, #168]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800548a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fc fb5e 	bl	8001b50 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7fc fb5a 	bl	8001b50 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e216      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054aa:	4b22      	ldr	r3, [pc, #136]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x1e0>
 80054b6:	e000      	b.n	80054ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d041      	beq.n	800554a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01c      	beq.n	8005508 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ce:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80054d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d4:	4a17      	ldr	r2, [pc, #92]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054de:	f7fc fb37 	bl	8001b50 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e6:	f7fc fb33 	bl	8001b50 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e1ef      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80054fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0ef      	beq.n	80054e6 <HAL_RCC_OscConfig+0x22e>
 8005506:	e020      	b.n	800554a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 800550a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fc fb1a 	bl	8001b50 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800551e:	e00d      	b.n	800553c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005520:	f7fc fb16 	bl	8001b50 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d906      	bls.n	800553c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e1d2      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800553c:	4b8c      	ldr	r3, [pc, #560]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1ea      	bne.n	8005520 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80a6 	beq.w	80056a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005558:	2300      	movs	r3, #0
 800555a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800555c:	4b84      	ldr	r3, [pc, #528]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_OscConfig+0x2b4>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x2b6>
 800556c:	2300      	movs	r3, #0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	4b7f      	ldr	r3, [pc, #508]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	4a7e      	ldr	r2, [pc, #504]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6593      	str	r3, [r2, #88]	; 0x58
 800557e:	4b7c      	ldr	r3, [pc, #496]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800558a:	2301      	movs	r3, #1
 800558c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558e:	4b79      	ldr	r3, [pc, #484]	; (8005774 <HAL_RCC_OscConfig+0x4bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d118      	bne.n	80055cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800559a:	4b76      	ldr	r3, [pc, #472]	; (8005774 <HAL_RCC_OscConfig+0x4bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a75      	ldr	r2, [pc, #468]	; (8005774 <HAL_RCC_OscConfig+0x4bc>)
 80055a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055a6:	f7fc fad3 	bl	8001b50 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ae:	f7fc facf 	bl	8001b50 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e18b      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c0:	4b6c      	ldr	r3, [pc, #432]	; (8005774 <HAL_RCC_OscConfig+0x4bc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d108      	bne.n	80055e6 <HAL_RCC_OscConfig+0x32e>
 80055d4:	4b66      	ldr	r3, [pc, #408]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	4a65      	ldr	r2, [pc, #404]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055e4:	e024      	b.n	8005630 <HAL_RCC_OscConfig+0x378>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d110      	bne.n	8005610 <HAL_RCC_OscConfig+0x358>
 80055ee:	4b60      	ldr	r3, [pc, #384]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f4:	4a5e      	ldr	r2, [pc, #376]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055fe:	4b5c      	ldr	r3, [pc, #368]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	4a5a      	ldr	r2, [pc, #360]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800560e:	e00f      	b.n	8005630 <HAL_RCC_OscConfig+0x378>
 8005610:	4b57      	ldr	r3, [pc, #348]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005616:	4a56      	ldr	r2, [pc, #344]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005620:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	4a52      	ldr	r2, [pc, #328]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005628:	f023 0304 	bic.w	r3, r3, #4
 800562c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d016      	beq.n	8005666 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fc fa8a 	bl	8001b50 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563e:	e00a      	b.n	8005656 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005640:	f7fc fa86 	bl	8001b50 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f241 3288 	movw	r2, #5000	; 0x1388
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e140      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005656:	4b46      	ldr	r3, [pc, #280]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ed      	beq.n	8005640 <HAL_RCC_OscConfig+0x388>
 8005664:	e015      	b.n	8005692 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fc fa73 	bl	8001b50 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fc fa6f 	bl	8001b50 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e129      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005684:	4b3a      	ldr	r3, [pc, #232]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1ed      	bne.n	800566e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005692:	7ffb      	ldrb	r3, [r7, #31]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005698:	4b35      	ldr	r3, [pc, #212]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	4a34      	ldr	r2, [pc, #208]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 800569e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d03c      	beq.n	800572a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01c      	beq.n	80056f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80056ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056be:	4a2c      	ldr	r2, [pc, #176]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fc fa42 	bl	8001b50 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056d0:	f7fc fa3e 	bl	8001b50 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0fa      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056e2:	4b23      	ldr	r3, [pc, #140]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80056e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ef      	beq.n	80056d0 <HAL_RCC_OscConfig+0x418>
 80056f0:	e01b      	b.n	800572a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056f2:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80056f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005702:	f7fc fa25 	bl	8001b50 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800570a:	f7fc fa21 	bl	8001b50 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0dd      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800571c:	4b14      	ldr	r3, [pc, #80]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 800571e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1ef      	bne.n	800570a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80d1 	beq.w	80058d6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	2b0c      	cmp	r3, #12
 800573e:	f000 808b 	beq.w	8005858 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d15e      	bne.n	8005808 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a08      	ldr	r2, [pc, #32]	; (8005770 <HAL_RCC_OscConfig+0x4b8>)
 8005750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fc f9fb 	bl	8001b50 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800575c:	e00c      	b.n	8005778 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575e:	f7fc f9f7 	bl	8001b50 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d905      	bls.n	8005778 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e0b3      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
 8005770:	40021000 	.word	0x40021000
 8005774:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005778:	4b59      	ldr	r3, [pc, #356]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ec      	bne.n	800575e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005784:	4b56      	ldr	r3, [pc, #344]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	4b56      	ldr	r3, [pc, #344]	; (80058e4 <HAL_RCC_OscConfig+0x62c>)
 800578a:	4013      	ands	r3, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6a11      	ldr	r1, [r2, #32]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005794:	3a01      	subs	r2, #1
 8005796:	0112      	lsls	r2, r2, #4
 8005798:	4311      	orrs	r1, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800579e:	0212      	lsls	r2, r2, #8
 80057a0:	4311      	orrs	r1, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057a6:	0852      	lsrs	r2, r2, #1
 80057a8:	3a01      	subs	r2, #1
 80057aa:	0552      	lsls	r2, r2, #21
 80057ac:	4311      	orrs	r1, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057b2:	0852      	lsrs	r2, r2, #1
 80057b4:	3a01      	subs	r2, #1
 80057b6:	0652      	lsls	r2, r2, #25
 80057b8:	4311      	orrs	r1, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057be:	06d2      	lsls	r2, r2, #27
 80057c0:	430a      	orrs	r2, r1
 80057c2:	4947      	ldr	r1, [pc, #284]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c8:	4b45      	ldr	r3, [pc, #276]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a44      	ldr	r2, [pc, #272]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 80057ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057d4:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4a41      	ldr	r2, [pc, #260]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 80057da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fc f9b6 	bl	8001b50 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fc f9b2 	bl	8001b50 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e06e      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fa:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x530>
 8005806:	e066      	b.n	80058d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005808:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a34      	ldr	r2, [pc, #208]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 800580e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005812:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005814:	4b32      	ldr	r3, [pc, #200]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a31      	ldr	r2, [pc, #196]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 800581a:	f023 0303 	bic.w	r3, r3, #3
 800581e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005820:	4b2f      	ldr	r3, [pc, #188]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4a2e      	ldr	r2, [pc, #184]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005826:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800582a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fc f98e 	bl	8001b50 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005838:	f7fc f98a 	bl	8001b50 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e046      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584a:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x580>
 8005856:	e03e      	b.n	80058d6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e039      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005864:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f003 0203 	and.w	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	429a      	cmp	r2, r3
 8005876:	d12c      	bne.n	80058d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	3b01      	subs	r3, #1
 8005884:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005886:	429a      	cmp	r2, r3
 8005888:	d123      	bne.n	80058d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d11b      	bne.n	80058d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d113      	bne.n	80058d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	3b01      	subs	r3, #1
 80058b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d109      	bne.n	80058d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	3b01      	subs	r3, #1
 80058cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40021000 	.word	0x40021000
 80058e4:	019f800c 	.word	0x019f800c

080058e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e11e      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005900:	4b91      	ldr	r3, [pc, #580]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d910      	bls.n	8005930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b8e      	ldr	r3, [pc, #568]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 020f 	bic.w	r2, r3, #15
 8005916:	498c      	ldr	r1, [pc, #560]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b8a      	ldr	r3, [pc, #552]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e106      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d073      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d129      	bne.n	8005998 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005944:	4b81      	ldr	r3, [pc, #516]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0f4      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005954:	f000 f99e 	bl	8005c94 <RCC_GetSysClockFreqFromPLLSource>
 8005958:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4a7c      	ldr	r2, [pc, #496]	; (8005b50 <HAL_RCC_ClockConfig+0x268>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d93f      	bls.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005962:	4b7a      	ldr	r3, [pc, #488]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d033      	beq.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	d12f      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005982:	4b72      	ldr	r3, [pc, #456]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598a:	4a70      	ldr	r2, [pc, #448]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 800598c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005990:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e024      	b.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d107      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a0:	4b6a      	ldr	r3, [pc, #424]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0c6      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059b0:	4b66      	ldr	r3, [pc, #408]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0be      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059c0:	f000 f8ce 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 80059c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4a61      	ldr	r2, [pc, #388]	; (8005b50 <HAL_RCC_ClockConfig+0x268>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d909      	bls.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ce:	4b5f      	ldr	r3, [pc, #380]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d6:	4a5d      	ldr	r2, [pc, #372]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059e2:	4b5a      	ldr	r3, [pc, #360]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4957      	ldr	r1, [pc, #348]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f4:	f7fc f8ac 	bl	8001b50 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fc f8a8 	bl	8001b50 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e095      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	4b4e      	ldr	r3, [pc, #312]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 020c 	and.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d1eb      	bne.n	80059fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d023      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a3c:	4b43      	ldr	r3, [pc, #268]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	4a42      	ldr	r2, [pc, #264]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a54:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a5c:	4a3b      	ldr	r2, [pc, #236]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a64:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4936      	ldr	r1, [pc, #216]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d105      	bne.n	8005a8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a7e:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4a32      	ldr	r2, [pc, #200]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d21d      	bcs.n	8005ad4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a98:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 020f 	bic.w	r2, r3, #15
 8005aa0:	4929      	ldr	r1, [pc, #164]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005aa8:	f7fc f852 	bl	8001b50 <HAL_GetTick>
 8005aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab0:	f7fc f84e 	bl	8001b50 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e03b      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1ed      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4917      	ldr	r1, [pc, #92]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005afe:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	490f      	ldr	r1, [pc, #60]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b12:	f000 f825 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8005b16:	4602      	mov	r2, r0
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	490c      	ldr	r1, [pc, #48]	; (8005b54 <HAL_RCC_ClockConfig+0x26c>)
 8005b24:	5ccb      	ldrb	r3, [r1, r3]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <HAL_RCC_ClockConfig+0x270>)
 8005b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <HAL_RCC_ClockConfig+0x274>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fb ffbe 	bl	8001ab8 <HAL_InitTick>
 8005b3c:	4603      	mov	r3, r0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40022000 	.word	0x40022000
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	04c4b400 	.word	0x04c4b400
 8005b54:	080093dc 	.word	0x080093dc
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	20000004 	.word	0x20000004

08005b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b66:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d102      	bne.n	8005b78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b72:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	e047      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b78:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 030c 	and.w	r3, r3, #12
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d102      	bne.n	8005b8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b84:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	e03e      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b8a:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d136      	bne.n	8005c04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b96:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	3301      	adds	r3, #1
 8005bac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bb4:	4a1a      	ldr	r2, [pc, #104]	; (8005c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bbe:	68d2      	ldr	r2, [r2, #12]
 8005bc0:	0a12      	lsrs	r2, r2, #8
 8005bc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	617b      	str	r3, [r7, #20]
      break;
 8005bcc:	e00c      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bce:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd8:	68d2      	ldr	r2, [r2, #12]
 8005bda:	0a12      	lsrs	r2, r2, #8
 8005bdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
      break;
 8005be6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0e5b      	lsrs	r3, r3, #25
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	e001      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c08:	693b      	ldr	r3, [r7, #16]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	00f42400 	.word	0x00f42400
 8005c20:	016e3600 	.word	0x016e3600

08005c24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000000 	.word	0x20000000

08005c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c40:	f7ff fff0 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4904      	ldr	r1, [pc, #16]	; (8005c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40021000 	.word	0x40021000
 8005c64:	080093ec 	.word	0x080093ec

08005c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c6c:	f7ff ffda 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0adb      	lsrs	r3, r3, #11
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4904      	ldr	r1, [pc, #16]	; (8005c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	080093ec 	.word	0x080093ec

08005c94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c9a:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d10c      	bne.n	8005cd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cb8:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cc2:	68d2      	ldr	r2, [r2, #12]
 8005cc4:	0a12      	lsrs	r2, r2, #8
 8005cc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	617b      	str	r3, [r7, #20]
    break;
 8005cd0:	e00c      	b.n	8005cec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cd2:	4a12      	ldr	r2, [pc, #72]	; (8005d1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4a0e      	ldr	r2, [pc, #56]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cdc:	68d2      	ldr	r2, [r2, #12]
 8005cde:	0a12      	lsrs	r2, r2, #8
 8005ce0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
    break;
 8005cea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0e5b      	lsrs	r3, r3, #25
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d06:	687b      	ldr	r3, [r7, #4]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40021000 	.word	0x40021000
 8005d18:	016e3600 	.word	0x016e3600
 8005d1c:	00f42400 	.word	0x00f42400

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8098 	beq.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d42:	4b43      	ldr	r3, [pc, #268]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4e:	4b40      	ldr	r3, [pc, #256]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d58:	6593      	str	r3, [r2, #88]	; 0x58
 8005d5a:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d66:	2301      	movs	r3, #1
 8005d68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d6a:	4b3a      	ldr	r3, [pc, #232]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a39      	ldr	r2, [pc, #228]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d76:	f7fb feeb 	bl	8001b50 <HAL_GetTick>
 8005d7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d7c:	e009      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7e:	f7fb fee7 	bl	8001b50 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d902      	bls.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	74fb      	strb	r3, [r7, #19]
        break;
 8005d90:	e005      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d92:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ef      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d159      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005da4:	4b2a      	ldr	r3, [pc, #168]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01e      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d019      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dc0:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dcc:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dec:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfe:	f7fb fea7 	bl	8001b50 <HAL_GetTick>
 8005e02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e04:	e00b      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e06:	f7fb fea3 	bl	8001b50 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d902      	bls.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e1c:	e006      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0ec      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e2c:	7cfb      	ldrb	r3, [r7, #19]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10b      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	4903      	ldr	r1, [pc, #12]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e48:	e008      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e4a:	7cfb      	ldrb	r3, [r7, #19]
 8005e4c:	74bb      	strb	r3, [r7, #18]
 8005e4e:	e005      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e5c:	7c7b      	ldrb	r3, [r7, #17]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4ba7      	ldr	r3, [pc, #668]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	4aa6      	ldr	r2, [pc, #664]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e7a:	4ba1      	ldr	r3, [pc, #644]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	f023 0203 	bic.w	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	499d      	ldr	r1, [pc, #628]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e9c:	4b98      	ldr	r3, [pc, #608]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea2:	f023 020c 	bic.w	r2, r3, #12
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4995      	ldr	r1, [pc, #596]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ebe:	4b90      	ldr	r3, [pc, #576]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	498c      	ldr	r1, [pc, #560]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ee0:	4b87      	ldr	r3, [pc, #540]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	4984      	ldr	r1, [pc, #528]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f02:	4b7f      	ldr	r3, [pc, #508]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	497b      	ldr	r1, [pc, #492]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f24:	4b76      	ldr	r3, [pc, #472]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	4973      	ldr	r1, [pc, #460]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f46:	4b6e      	ldr	r3, [pc, #440]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	496a      	ldr	r1, [pc, #424]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f68:	4b65      	ldr	r3, [pc, #404]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	4962      	ldr	r1, [pc, #392]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f8a:	4b5d      	ldr	r3, [pc, #372]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	4959      	ldr	r1, [pc, #356]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fac:	4b54      	ldr	r3, [pc, #336]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fb2:	f023 0203 	bic.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	4951      	ldr	r1, [pc, #324]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fce:	4b4c      	ldr	r3, [pc, #304]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4948      	ldr	r1, [pc, #288]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d015      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ff0:	4b43      	ldr	r3, [pc, #268]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	4940      	ldr	r1, [pc, #256]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600e:	d105      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006010:	4b3b      	ldr	r3, [pc, #236]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800601a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006024:	2b00      	cmp	r3, #0
 8006026:	d015      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006028:	4b35      	ldr	r3, [pc, #212]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	4932      	ldr	r1, [pc, #200]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006046:	d105      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006048:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a2c      	ldr	r2, [pc, #176]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006052:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006066:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	4924      	ldr	r1, [pc, #144]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800608a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006098:	4b19      	ldr	r3, [pc, #100]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	4916      	ldr	r1, [pc, #88]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b6:	d105      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a10      	ldr	r2, [pc, #64]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d019      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	4908      	ldr	r1, [pc, #32]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ee:	d109      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f0:	4b03      	ldr	r3, [pc, #12]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a02      	ldr	r2, [pc, #8]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060fa:	60d3      	str	r3, [r2, #12]
 80060fc:	e002      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d015      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006110:	4b29      	ldr	r3, [pc, #164]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611e:	4926      	ldr	r1, [pc, #152]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800612e:	d105      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006130:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a20      	ldr	r2, [pc, #128]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800613a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006156:	4918      	ldr	r1, [pc, #96]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006172:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d015      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006180:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618e:	490a      	ldr	r1, [pc, #40]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800619e:	d105      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80061ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40021000 	.word	0x40021000

080061bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d001      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e054      	b.n	800627e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a26      	ldr	r2, [pc, #152]	; (800628c <HAL_TIM_Base_Start_IT+0xd0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d01d      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a22      	ldr	r2, [pc, #136]	; (8006290 <HAL_TIM_Base_Start_IT+0xd4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a21      	ldr	r2, [pc, #132]	; (8006294 <HAL_TIM_Base_Start_IT+0xd8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <HAL_TIM_Base_Start_IT+0xdc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1e      	ldr	r2, [pc, #120]	; (800629c <HAL_TIM_Base_Start_IT+0xe0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1c      	ldr	r2, [pc, #112]	; (80062a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d115      	bne.n	8006268 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	4b19      	ldr	r3, [pc, #100]	; (80062a8 <HAL_TIM_Base_Start_IT+0xec>)
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b06      	cmp	r3, #6
 800624c:	d015      	beq.n	800627a <HAL_TIM_Base_Start_IT+0xbe>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006254:	d011      	beq.n	800627a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006266:	e008      	b.n	800627a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e000      	b.n	800627c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40013400 	.word	0x40013400
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40015000 	.word	0x40015000
 80062a8:	00010007 	.word	0x00010007

080062ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e049      	b.n	8006352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fb f9ec 	bl	80016b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f000 fca0 	bl	8006c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_TIM_PWM_Start+0x24>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e03c      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b04      	cmp	r3, #4
 8006384:	d109      	bne.n	800639a <HAL_TIM_PWM_Start+0x3e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e02f      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d109      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x58>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	e022      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b0c      	cmp	r3, #12
 80063b8:	d109      	bne.n	80063ce <HAL_TIM_PWM_Start+0x72>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	bf14      	ite	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	2300      	moveq	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	e015      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d109      	bne.n	80063e8 <HAL_TIM_PWM_Start+0x8c>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e008      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e0a6      	b.n	8006550 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0xb6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006410:	e023      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b04      	cmp	r3, #4
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0xc6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	e01b      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xd6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006430:	e013      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d104      	bne.n	8006442 <HAL_TIM_PWM_Start+0xe6>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006440:	e00b      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b10      	cmp	r3, #16
 8006446:	d104      	bne.n	8006452 <HAL_TIM_PWM_Start+0xf6>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006450:	e003      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2201      	movs	r2, #1
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f001 f8e0 	bl	8007628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3a      	ldr	r2, [pc, #232]	; (8006558 <HAL_TIM_PWM_Start+0x1fc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a39      	ldr	r2, [pc, #228]	; (800655c <HAL_TIM_PWM_Start+0x200>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a37      	ldr	r2, [pc, #220]	; (8006560 <HAL_TIM_PWM_Start+0x204>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a36      	ldr	r2, [pc, #216]	; (8006564 <HAL_TIM_PWM_Start+0x208>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a34      	ldr	r2, [pc, #208]	; (8006568 <HAL_TIM_PWM_Start+0x20c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a33      	ldr	r2, [pc, #204]	; (800656c <HAL_TIM_PWM_Start+0x210>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x14c>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <HAL_TIM_PWM_Start+0x14e>
 80064a8:	2300      	movs	r3, #0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a25      	ldr	r2, [pc, #148]	; (8006558 <HAL_TIM_PWM_Start+0x1fc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d0:	d01d      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a26      	ldr	r2, [pc, #152]	; (8006570 <HAL_TIM_PWM_Start+0x214>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a24      	ldr	r2, [pc, #144]	; (8006574 <HAL_TIM_PWM_Start+0x218>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a23      	ldr	r2, [pc, #140]	; (8006578 <HAL_TIM_PWM_Start+0x21c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a19      	ldr	r2, [pc, #100]	; (800655c <HAL_TIM_PWM_Start+0x200>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <HAL_TIM_PWM_Start+0x204>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_TIM_PWM_Start+0x210>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d115      	bne.n	800653a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	4b19      	ldr	r3, [pc, #100]	; (800657c <HAL_TIM_PWM_Start+0x220>)
 8006516:	4013      	ands	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b06      	cmp	r3, #6
 800651e:	d015      	beq.n	800654c <HAL_TIM_PWM_Start+0x1f0>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006526:	d011      	beq.n	800654c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006538:	e008      	b.n	800654c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e000      	b.n	800654e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40013400 	.word	0x40013400
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800
 800656c:	40015000 	.word	0x40015000
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	00010007 	.word	0x00010007

08006580 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e049      	b.n	8006626 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fb f8a2 	bl	80016f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f000 fb36 	bl	8006c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_TIM_IC_Start_IT+0x1e>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800664a:	b2db      	uxtb	r3, r3
 800664c:	e023      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x66>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d104      	bne.n	800665e <HAL_TIM_IC_Start_IT+0x2e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800665a:	b2db      	uxtb	r3, r3
 800665c:	e01b      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x66>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d104      	bne.n	800666e <HAL_TIM_IC_Start_IT+0x3e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800666a:	b2db      	uxtb	r3, r3
 800666c:	e013      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x66>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d104      	bne.n	800667e <HAL_TIM_IC_Start_IT+0x4e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667a:	b2db      	uxtb	r3, r3
 800667c:	e00b      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x66>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b10      	cmp	r3, #16
 8006682:	d104      	bne.n	800668e <HAL_TIM_IC_Start_IT+0x5e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800668a:	b2db      	uxtb	r3, r3
 800668c:	e003      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x66>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006694:	b2db      	uxtb	r3, r3
 8006696:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <HAL_TIM_IC_Start_IT+0x78>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e013      	b.n	80066d0 <HAL_TIM_IC_Start_IT+0xa0>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d104      	bne.n	80066b8 <HAL_TIM_IC_Start_IT+0x88>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	e00b      	b.n	80066d0 <HAL_TIM_IC_Start_IT+0xa0>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d104      	bne.n	80066c8 <HAL_TIM_IC_Start_IT+0x98>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e003      	b.n	80066d0 <HAL_TIM_IC_Start_IT+0xa0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d102      	bne.n	80066de <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80066d8:	7b7b      	ldrb	r3, [r7, #13]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d001      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e0e2      	b.n	80068a8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_IC_Start_IT+0xc2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	e023      	b.n	800673a <HAL_TIM_IC_Start_IT+0x10a>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_IC_Start_IT+0xd2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006700:	e01b      	b.n	800673a <HAL_TIM_IC_Start_IT+0x10a>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d104      	bne.n	8006712 <HAL_TIM_IC_Start_IT+0xe2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	e013      	b.n	800673a <HAL_TIM_IC_Start_IT+0x10a>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d104      	bne.n	8006722 <HAL_TIM_IC_Start_IT+0xf2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006720:	e00b      	b.n	800673a <HAL_TIM_IC_Start_IT+0x10a>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b10      	cmp	r3, #16
 8006726:	d104      	bne.n	8006732 <HAL_TIM_IC_Start_IT+0x102>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006730:	e003      	b.n	800673a <HAL_TIM_IC_Start_IT+0x10a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_TIM_IC_Start_IT+0x11a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006748:	e013      	b.n	8006772 <HAL_TIM_IC_Start_IT+0x142>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d104      	bne.n	800675a <HAL_TIM_IC_Start_IT+0x12a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006758:	e00b      	b.n	8006772 <HAL_TIM_IC_Start_IT+0x142>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d104      	bne.n	800676a <HAL_TIM_IC_Start_IT+0x13a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006768:	e003      	b.n	8006772 <HAL_TIM_IC_Start_IT+0x142>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b0c      	cmp	r3, #12
 8006776:	d841      	bhi.n	80067fc <HAL_TIM_IC_Start_IT+0x1cc>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HAL_TIM_IC_Start_IT+0x150>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067b5 	.word	0x080067b5
 8006784:	080067fd 	.word	0x080067fd
 8006788:	080067fd 	.word	0x080067fd
 800678c:	080067fd 	.word	0x080067fd
 8006790:	080067c7 	.word	0x080067c7
 8006794:	080067fd 	.word	0x080067fd
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	080067d9 	.word	0x080067d9
 80067a4:	080067fd 	.word	0x080067fd
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	080067eb 	.word	0x080067eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0202 	orr.w	r2, r2, #2
 80067c2:	60da      	str	r2, [r3, #12]
      break;
 80067c4:	e01d      	b.n	8006802 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0204 	orr.w	r2, r2, #4
 80067d4:	60da      	str	r2, [r3, #12]
      break;
 80067d6:	e014      	b.n	8006802 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0208 	orr.w	r2, r2, #8
 80067e6:	60da      	str	r2, [r3, #12]
      break;
 80067e8:	e00b      	b.n	8006802 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0210 	orr.w	r2, r2, #16
 80067f8:	60da      	str	r2, [r3, #12]
      break;
 80067fa:	e002      	b.n	8006802 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006800:	bf00      	nop
  }

  if (status == HAL_OK)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d14e      	bne.n	80068a6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2201      	movs	r2, #1
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 ff09 	bl	8007628 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <HAL_TIM_IC_Start_IT+0x280>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d022      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x236>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006828:	d01d      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x236>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <HAL_TIM_IC_Start_IT+0x284>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d018      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x236>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <HAL_TIM_IC_Start_IT+0x288>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x236>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_TIM_IC_Start_IT+0x28c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00e      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x236>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIM_IC_Start_IT+0x290>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x236>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_TIM_IC_Start_IT+0x294>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d004      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x236>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a19      	ldr	r2, [pc, #100]	; (80068c8 <HAL_TIM_IC_Start_IT+0x298>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d115      	bne.n	8006892 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	4b17      	ldr	r3, [pc, #92]	; (80068cc <HAL_TIM_IC_Start_IT+0x29c>)
 800686e:	4013      	ands	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b06      	cmp	r3, #6
 8006876:	d015      	beq.n	80068a4 <HAL_TIM_IC_Start_IT+0x274>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687e:	d011      	beq.n	80068a4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	e008      	b.n	80068a4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40015000 	.word	0x40015000
 80068cc:	00010007 	.word	0x00010007

080068d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e088      	b.n	8006a00 <HAL_TIM_IC_ConfigChannel+0x130>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11b      	bne.n	8006934 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f000 fd62 	bl	80073d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 020c 	bic.w	r2, r2, #12
 800691e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6999      	ldr	r1, [r3, #24]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	619a      	str	r2, [r3, #24]
 8006932:	e060      	b.n	80069f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b04      	cmp	r3, #4
 8006938:	d11c      	bne.n	8006974 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f000 fdb7 	bl	80074bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800695c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6999      	ldr	r1, [r3, #24]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	021a      	lsls	r2, r3, #8
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	619a      	str	r2, [r3, #24]
 8006972:	e040      	b.n	80069f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d11b      	bne.n	80069b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6819      	ldr	r1, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f000 fdd4 	bl	8007536 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69da      	ldr	r2, [r3, #28]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 020c 	bic.w	r2, r2, #12
 800699c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69d9      	ldr	r1, [r3, #28]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	61da      	str	r2, [r3, #28]
 80069b0:	e021      	b.n	80069f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	d11c      	bne.n	80069f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6819      	ldr	r1, [r3, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f000 fdf1 	bl	80075ae <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69da      	ldr	r2, [r3, #28]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69d9      	ldr	r1, [r3, #28]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	021a      	lsls	r2, r3, #8
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	61da      	str	r2, [r3, #28]
 80069f0:	e001      	b.n	80069f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a22:	2302      	movs	r3, #2
 8006a24:	e0ff      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b14      	cmp	r3, #20
 8006a32:	f200 80f0 	bhi.w	8006c16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a91 	.word	0x08006a91
 8006a40:	08006c17 	.word	0x08006c17
 8006a44:	08006c17 	.word	0x08006c17
 8006a48:	08006c17 	.word	0x08006c17
 8006a4c:	08006ad1 	.word	0x08006ad1
 8006a50:	08006c17 	.word	0x08006c17
 8006a54:	08006c17 	.word	0x08006c17
 8006a58:	08006c17 	.word	0x08006c17
 8006a5c:	08006b13 	.word	0x08006b13
 8006a60:	08006c17 	.word	0x08006c17
 8006a64:	08006c17 	.word	0x08006c17
 8006a68:	08006c17 	.word	0x08006c17
 8006a6c:	08006b53 	.word	0x08006b53
 8006a70:	08006c17 	.word	0x08006c17
 8006a74:	08006c17 	.word	0x08006c17
 8006a78:	08006c17 	.word	0x08006c17
 8006a7c:	08006b95 	.word	0x08006b95
 8006a80:	08006c17 	.word	0x08006c17
 8006a84:	08006c17 	.word	0x08006c17
 8006a88:	08006c17 	.word	0x08006c17
 8006a8c:	08006bd5 	.word	0x08006bd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 f972 	bl	8006d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0208 	orr.w	r2, r2, #8
 8006aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6999      	ldr	r1, [r3, #24]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	619a      	str	r2, [r3, #24]
      break;
 8006ace:	e0a5      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 f9ec 	bl	8006eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6999      	ldr	r1, [r3, #24]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	619a      	str	r2, [r3, #24]
      break;
 8006b10:	e084      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fa5f 	bl	8006fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0208 	orr.w	r2, r2, #8
 8006b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0204 	bic.w	r2, r2, #4
 8006b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	61da      	str	r2, [r3, #28]
      break;
 8006b50:	e064      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fad1 	bl	8007100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69d9      	ldr	r1, [r3, #28]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	021a      	lsls	r2, r3, #8
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	61da      	str	r2, [r3, #28]
      break;
 8006b92:	e043      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fb44 	bl	8007228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0208 	orr.w	r2, r2, #8
 8006bae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0204 	bic.w	r2, r2, #4
 8006bbe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006bd2:	e023      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fb8e 	bl	80072fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	021a      	lsls	r2, r3, #8
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c14:	e002      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a46      	ldr	r2, [pc, #280]	; (8006d5c <TIM_Base_SetConfig+0x12c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d017      	beq.n	8006c78 <TIM_Base_SetConfig+0x48>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4e:	d013      	beq.n	8006c78 <TIM_Base_SetConfig+0x48>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a43      	ldr	r2, [pc, #268]	; (8006d60 <TIM_Base_SetConfig+0x130>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00f      	beq.n	8006c78 <TIM_Base_SetConfig+0x48>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a42      	ldr	r2, [pc, #264]	; (8006d64 <TIM_Base_SetConfig+0x134>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <TIM_Base_SetConfig+0x48>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a41      	ldr	r2, [pc, #260]	; (8006d68 <TIM_Base_SetConfig+0x138>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d007      	beq.n	8006c78 <TIM_Base_SetConfig+0x48>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a40      	ldr	r2, [pc, #256]	; (8006d6c <TIM_Base_SetConfig+0x13c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_Base_SetConfig+0x48>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a3f      	ldr	r2, [pc, #252]	; (8006d70 <TIM_Base_SetConfig+0x140>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d108      	bne.n	8006c8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a33      	ldr	r2, [pc, #204]	; (8006d5c <TIM_Base_SetConfig+0x12c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d023      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c98:	d01f      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a30      	ldr	r2, [pc, #192]	; (8006d60 <TIM_Base_SetConfig+0x130>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01b      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2f      	ldr	r2, [pc, #188]	; (8006d64 <TIM_Base_SetConfig+0x134>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d017      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a2e      	ldr	r2, [pc, #184]	; (8006d68 <TIM_Base_SetConfig+0x138>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2d      	ldr	r2, [pc, #180]	; (8006d6c <TIM_Base_SetConfig+0x13c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2d      	ldr	r2, [pc, #180]	; (8006d74 <TIM_Base_SetConfig+0x144>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2c      	ldr	r2, [pc, #176]	; (8006d78 <TIM_Base_SetConfig+0x148>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2b      	ldr	r2, [pc, #172]	; (8006d7c <TIM_Base_SetConfig+0x14c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_Base_SetConfig+0xaa>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a26      	ldr	r2, [pc, #152]	; (8006d70 <TIM_Base_SetConfig+0x140>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a12      	ldr	r2, [pc, #72]	; (8006d5c <TIM_Base_SetConfig+0x12c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <TIM_Base_SetConfig+0x110>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <TIM_Base_SetConfig+0x13c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00f      	beq.n	8006d40 <TIM_Base_SetConfig+0x110>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <TIM_Base_SetConfig+0x144>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00b      	beq.n	8006d40 <TIM_Base_SetConfig+0x110>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <TIM_Base_SetConfig+0x148>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_Base_SetConfig+0x110>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a12      	ldr	r2, [pc, #72]	; (8006d7c <TIM_Base_SetConfig+0x14c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_Base_SetConfig+0x110>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a0d      	ldr	r2, [pc, #52]	; (8006d70 <TIM_Base_SetConfig+0x140>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d103      	bne.n	8006d48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	615a      	str	r2, [r3, #20]
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40012c00 	.word	0x40012c00
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	40013400 	.word	0x40013400
 8006d70:	40015000 	.word	0x40015000
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40014400 	.word	0x40014400
 8006d7c:	40014800 	.word	0x40014800

08006d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0201 	bic.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 0302 	bic.w	r3, r3, #2
 8006dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a30      	ldr	r2, [pc, #192]	; (8006e9c <TIM_OC1_SetConfig+0x11c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d013      	beq.n	8006e08 <TIM_OC1_SetConfig+0x88>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a2f      	ldr	r2, [pc, #188]	; (8006ea0 <TIM_OC1_SetConfig+0x120>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00f      	beq.n	8006e08 <TIM_OC1_SetConfig+0x88>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a2e      	ldr	r2, [pc, #184]	; (8006ea4 <TIM_OC1_SetConfig+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00b      	beq.n	8006e08 <TIM_OC1_SetConfig+0x88>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a2d      	ldr	r2, [pc, #180]	; (8006ea8 <TIM_OC1_SetConfig+0x128>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d007      	beq.n	8006e08 <TIM_OC1_SetConfig+0x88>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a2c      	ldr	r2, [pc, #176]	; (8006eac <TIM_OC1_SetConfig+0x12c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_OC1_SetConfig+0x88>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2b      	ldr	r2, [pc, #172]	; (8006eb0 <TIM_OC1_SetConfig+0x130>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d10c      	bne.n	8006e22 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f023 0308 	bic.w	r3, r3, #8
 8006e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 0304 	bic.w	r3, r3, #4
 8006e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <TIM_OC1_SetConfig+0x11c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d013      	beq.n	8006e52 <TIM_OC1_SetConfig+0xd2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <TIM_OC1_SetConfig+0x120>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00f      	beq.n	8006e52 <TIM_OC1_SetConfig+0xd2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <TIM_OC1_SetConfig+0x124>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00b      	beq.n	8006e52 <TIM_OC1_SetConfig+0xd2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <TIM_OC1_SetConfig+0x128>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d007      	beq.n	8006e52 <TIM_OC1_SetConfig+0xd2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <TIM_OC1_SetConfig+0x12c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d003      	beq.n	8006e52 <TIM_OC1_SetConfig+0xd2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <TIM_OC1_SetConfig+0x130>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d111      	bne.n	8006e76 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	621a      	str	r2, [r3, #32]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800
 8006eb0:	40015000 	.word	0x40015000

08006eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f023 0210 	bic.w	r2, r3, #16
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f023 0320 	bic.w	r3, r3, #32
 8006f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a2c      	ldr	r2, [pc, #176]	; (8006fc4 <TIM_OC2_SetConfig+0x110>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_OC2_SetConfig+0x74>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2b      	ldr	r2, [pc, #172]	; (8006fc8 <TIM_OC2_SetConfig+0x114>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_OC2_SetConfig+0x74>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <TIM_OC2_SetConfig+0x118>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d10d      	bne.n	8006f44 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1f      	ldr	r2, [pc, #124]	; (8006fc4 <TIM_OC2_SetConfig+0x110>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <TIM_OC2_SetConfig+0xc0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <TIM_OC2_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00f      	beq.n	8006f74 <TIM_OC2_SetConfig+0xc0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <TIM_OC2_SetConfig+0x11c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00b      	beq.n	8006f74 <TIM_OC2_SetConfig+0xc0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a1d      	ldr	r2, [pc, #116]	; (8006fd4 <TIM_OC2_SetConfig+0x120>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d007      	beq.n	8006f74 <TIM_OC2_SetConfig+0xc0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <TIM_OC2_SetConfig+0x124>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_OC2_SetConfig+0xc0>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <TIM_OC2_SetConfig+0x118>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d113      	bne.n	8006f9c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40013400 	.word	0x40013400
 8006fcc:	40015000 	.word	0x40015000
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800

08006fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2b      	ldr	r2, [pc, #172]	; (80070e8 <TIM_OC3_SetConfig+0x10c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d007      	beq.n	800704e <TIM_OC3_SetConfig+0x72>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <TIM_OC3_SetConfig+0x110>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d003      	beq.n	800704e <TIM_OC3_SetConfig+0x72>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a29      	ldr	r2, [pc, #164]	; (80070f0 <TIM_OC3_SetConfig+0x114>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d10d      	bne.n	800706a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <TIM_OC3_SetConfig+0x10c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <TIM_OC3_SetConfig+0xbe>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1d      	ldr	r2, [pc, #116]	; (80070ec <TIM_OC3_SetConfig+0x110>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00f      	beq.n	800709a <TIM_OC3_SetConfig+0xbe>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <TIM_OC3_SetConfig+0x118>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00b      	beq.n	800709a <TIM_OC3_SetConfig+0xbe>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <TIM_OC3_SetConfig+0x11c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d007      	beq.n	800709a <TIM_OC3_SetConfig+0xbe>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1b      	ldr	r2, [pc, #108]	; (80070fc <TIM_OC3_SetConfig+0x120>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_OC3_SetConfig+0xbe>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <TIM_OC3_SetConfig+0x114>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d113      	bne.n	80070c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40015000 	.word	0x40015000
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800714e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	031b      	lsls	r3, r3, #12
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <TIM_OC4_SetConfig+0x110>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_OC4_SetConfig+0x74>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a2b      	ldr	r2, [pc, #172]	; (8007214 <TIM_OC4_SetConfig+0x114>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC4_SetConfig+0x74>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <TIM_OC4_SetConfig+0x118>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d10d      	bne.n	8007190 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	031b      	lsls	r3, r3, #12
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1f      	ldr	r2, [pc, #124]	; (8007210 <TIM_OC4_SetConfig+0x110>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <TIM_OC4_SetConfig+0xc0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <TIM_OC4_SetConfig+0x114>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00f      	beq.n	80071c0 <TIM_OC4_SetConfig+0xc0>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <TIM_OC4_SetConfig+0x11c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <TIM_OC4_SetConfig+0xc0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <TIM_OC4_SetConfig+0x120>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_OC4_SetConfig+0xc0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <TIM_OC4_SetConfig+0x124>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_OC4_SetConfig+0xc0>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a17      	ldr	r2, [pc, #92]	; (8007218 <TIM_OC4_SetConfig+0x118>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d113      	bne.n	80071e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	019b      	lsls	r3, r3, #6
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	019b      	lsls	r3, r3, #6
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40013400 	.word	0x40013400
 8007218:	40015000 	.word	0x40015000
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800

08007228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800726c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a19      	ldr	r2, [pc, #100]	; (80072e4 <TIM_OC5_SetConfig+0xbc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <TIM_OC5_SetConfig+0x82>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <TIM_OC5_SetConfig+0xc0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00f      	beq.n	80072aa <TIM_OC5_SetConfig+0x82>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a17      	ldr	r2, [pc, #92]	; (80072ec <TIM_OC5_SetConfig+0xc4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00b      	beq.n	80072aa <TIM_OC5_SetConfig+0x82>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <TIM_OC5_SetConfig+0xc8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d007      	beq.n	80072aa <TIM_OC5_SetConfig+0x82>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <TIM_OC5_SetConfig+0xcc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d003      	beq.n	80072aa <TIM_OC5_SetConfig+0x82>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <TIM_OC5_SetConfig+0xd0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d109      	bne.n	80072be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	621a      	str	r2, [r3, #32]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800
 80072f8:	40015000 	.word	0x40015000

080072fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <TIM_OC6_SetConfig+0xc0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <TIM_OC6_SetConfig+0x84>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a19      	ldr	r2, [pc, #100]	; (80073c0 <TIM_OC6_SetConfig+0xc4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00f      	beq.n	8007380 <TIM_OC6_SetConfig+0x84>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a18      	ldr	r2, [pc, #96]	; (80073c4 <TIM_OC6_SetConfig+0xc8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00b      	beq.n	8007380 <TIM_OC6_SetConfig+0x84>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a17      	ldr	r2, [pc, #92]	; (80073c8 <TIM_OC6_SetConfig+0xcc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_OC6_SetConfig+0x84>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a16      	ldr	r2, [pc, #88]	; (80073cc <TIM_OC6_SetConfig+0xd0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_OC6_SetConfig+0x84>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <TIM_OC6_SetConfig+0xd4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d109      	bne.n	8007394 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	029b      	lsls	r3, r3, #10
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	40013400 	.word	0x40013400
 80073c4:	40014000 	.word	0x40014000
 80073c8:	40014400 	.word	0x40014400
 80073cc:	40014800 	.word	0x40014800
 80073d0:	40015000 	.word	0x40015000

080073d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f023 0201 	bic.w	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <TIM_TI1_SetConfig+0xcc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01b      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d017      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4a25      	ldr	r2, [pc, #148]	; (80074a4 <TIM_TI1_SetConfig+0xd0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4a24      	ldr	r2, [pc, #144]	; (80074a8 <TIM_TI1_SetConfig+0xd4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00f      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a23      	ldr	r2, [pc, #140]	; (80074ac <TIM_TI1_SetConfig+0xd8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <TIM_TI1_SetConfig+0xdc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4a21      	ldr	r2, [pc, #132]	; (80074b4 <TIM_TI1_SetConfig+0xe0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <TIM_TI1_SetConfig+0xe4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <TIM_TI1_SetConfig+0x6a>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <TIM_TI1_SetConfig+0x6c>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e003      	b.n	800745e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	b2db      	uxtb	r3, r3
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f023 030a 	bic.w	r3, r3, #10
 8007478:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f003 030a 	and.w	r3, r3, #10
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	40000400 	.word	0x40000400
 80074a8:	40000800 	.word	0x40000800
 80074ac:	40000c00 	.word	0x40000c00
 80074b0:	40013400 	.word	0x40013400
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40015000 	.word	0x40015000

080074bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f023 0210 	bic.w	r2, r3, #16
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	031b      	lsls	r3, r3, #12
 8007500:	b29b      	uxth	r3, r3
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800750e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007536:	b480      	push	{r7}
 8007538:	b087      	sub	sp, #28
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4313      	orrs	r3, r2
 800756a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007572:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	b2db      	uxtb	r3, r3
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007586:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	621a      	str	r2, [r3, #32]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b087      	sub	sp, #28
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	031b      	lsls	r3, r3, #12
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007600:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	031b      	lsls	r3, r3, #12
 8007606:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	2201      	movs	r2, #1
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1a      	ldr	r2, [r3, #32]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	43db      	mvns	r3, r3
 800764a:	401a      	ands	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1a      	ldr	r2, [r3, #32]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	fa01 f303 	lsl.w	r3, r1, r3
 8007660:	431a      	orrs	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <HAL_TIMEx_PWMN_Start+0x24>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	bf14      	ite	ne
 8007690:	2301      	movne	r3, #1
 8007692:	2300      	moveq	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e022      	b.n	80076de <HAL_TIMEx_PWMN_Start+0x6a>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b04      	cmp	r3, #4
 800769c:	d109      	bne.n	80076b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	bf14      	ite	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	2300      	moveq	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	e015      	b.n	80076de <HAL_TIMEx_PWMN_Start+0x6a>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d109      	bne.n	80076cc <HAL_TIMEx_PWMN_Start+0x58>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	bf14      	ite	ne
 80076c4:	2301      	movne	r3, #1
 80076c6:	2300      	moveq	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	e008      	b.n	80076de <HAL_TIMEx_PWMN_Start+0x6a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e073      	b.n	80077ce <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <HAL_TIMEx_PWMN_Start+0x82>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f4:	e013      	b.n	800771e <HAL_TIMEx_PWMN_Start+0xaa>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d104      	bne.n	8007706 <HAL_TIMEx_PWMN_Start+0x92>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007704:	e00b      	b.n	800771e <HAL_TIMEx_PWMN_Start+0xaa>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b08      	cmp	r3, #8
 800770a:	d104      	bne.n	8007716 <HAL_TIMEx_PWMN_Start+0xa2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007714:	e003      	b.n	800771e <HAL_TIMEx_PWMN_Start+0xaa>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2204      	movs	r2, #4
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f9ae 	bl	8007a88 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800773a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a25      	ldr	r2, [pc, #148]	; (80077d8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d022      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d01d      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a21      	ldr	r2, [pc, #132]	; (80077dc <HAL_TIMEx_PWMN_Start+0x168>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a20      	ldr	r2, [pc, #128]	; (80077e0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_TIMEx_PWMN_Start+0x170>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1d      	ldr	r2, [pc, #116]	; (80077e8 <HAL_TIMEx_PWMN_Start+0x174>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <HAL_TIMEx_PWMN_Start+0x178>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1a      	ldr	r2, [pc, #104]	; (80077f0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d115      	bne.n	80077b8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <HAL_TIMEx_PWMN_Start+0x180>)
 8007794:	4013      	ands	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b06      	cmp	r3, #6
 800779c:	d015      	beq.n	80077ca <HAL_TIMEx_PWMN_Start+0x156>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a4:	d011      	beq.n	80077ca <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0201 	orr.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b6:	e008      	b.n	80077ca <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e000      	b.n	80077cc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40012c00 	.word	0x40012c00
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40013400 	.word	0x40013400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40015000 	.word	0x40015000
 80077f4:	00010007 	.word	0x00010007

080077f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800780c:	2302      	movs	r3, #2
 800780e:	e074      	b.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a34      	ldr	r2, [pc, #208]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d009      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a33      	ldr	r2, [pc, #204]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d004      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a31      	ldr	r2, [pc, #196]	; (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d108      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007854:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a21      	ldr	r2, [pc, #132]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d022      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007890:	d01d      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1d      	ldr	r2, [pc, #116]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1c      	ldr	r2, [pc, #112]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a15      	ldr	r2, [pc, #84]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a18      	ldr	r2, [pc, #96]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a11      	ldr	r2, [pc, #68]	; (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d10c      	bne.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40015000 	.word	0x40015000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40014000 	.word	0x40014000

08007924 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800793c:	2302      	movs	r3, #2
 800793e:	e096      	b.n	8007a6e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a2f      	ldr	r2, [pc, #188]	; (8007a7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d009      	beq.n	80079d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a2d      	ldr	r2, [pc, #180]	; (8007a80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2c      	ldr	r2, [pc, #176]	; (8007a84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d106      	bne.n	80079e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a24      	ldr	r2, [pc, #144]	; (8007a7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d009      	beq.n	8007a04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a22      	ldr	r2, [pc, #136]	; (8007a80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a21      	ldr	r2, [pc, #132]	; (8007a84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d12b      	bne.n	8007a5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	051b      	lsls	r3, r3, #20
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d009      	beq.n	8007a4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a10      	ldr	r2, [pc, #64]	; (8007a80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a0e      	ldr	r2, [pc, #56]	; (8007a84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d106      	bne.n	8007a5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40013400 	.word	0x40013400
 8007a84:	40015000 	.word	0x40015000

08007a88 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	401a      	ands	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1a      	ldr	r2, [r3, #32]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e042      	b.n	8007b6a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7f9 fd82 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2224      	movs	r2, #36	; 0x24
 8007b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0201 	bic.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f82d 	bl	8007b74 <UART_SetConfig>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e022      	b.n	8007b6a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb1d 	bl	800816c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f042 0201 	orr.w	r2, r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fba4 	bl	80082b0 <UART_CheckIdleState>
 8007b68:	4603      	mov	r3, r0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b78:	b08c      	sub	sp, #48	; 0x30
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4baa      	ldr	r3, [pc, #680]	; (8007e4c <UART_SetConfig+0x2d8>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bac:	430b      	orrs	r3, r1
 8007bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a9f      	ldr	r2, [pc, #636]	; (8007e50 <UART_SetConfig+0x2dc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007bea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	f023 010f 	bic.w	r1, r3, #15
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a90      	ldr	r2, [pc, #576]	; (8007e54 <UART_SetConfig+0x2e0>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d125      	bne.n	8007c64 <UART_SetConfig+0xf0>
 8007c18:	4b8f      	ldr	r3, [pc, #572]	; (8007e58 <UART_SetConfig+0x2e4>)
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d81a      	bhi.n	8007c5c <UART_SetConfig+0xe8>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0xb8>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c55 	.word	0x08007c55
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c42:	e116      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007c44:	2302      	movs	r3, #2
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c4a:	e112      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c52:	e10e      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	e10a      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c62:	e106      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a7c      	ldr	r2, [pc, #496]	; (8007e5c <UART_SetConfig+0x2e8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d138      	bne.n	8007ce0 <UART_SetConfig+0x16c>
 8007c6e:	4b7a      	ldr	r3, [pc, #488]	; (8007e58 <UART_SetConfig+0x2e4>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c74:	f003 030c 	and.w	r3, r3, #12
 8007c78:	2b0c      	cmp	r3, #12
 8007c7a:	d82d      	bhi.n	8007cd8 <UART_SetConfig+0x164>
 8007c7c:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <UART_SetConfig+0x110>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007cb9 	.word	0x08007cb9
 8007c88:	08007cd9 	.word	0x08007cd9
 8007c8c:	08007cd9 	.word	0x08007cd9
 8007c90:	08007cd9 	.word	0x08007cd9
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007cd9 	.word	0x08007cd9
 8007c9c:	08007cd9 	.word	0x08007cd9
 8007ca0:	08007cd9 	.word	0x08007cd9
 8007ca4:	08007cc1 	.word	0x08007cc1
 8007ca8:	08007cd9 	.word	0x08007cd9
 8007cac:	08007cd9 	.word	0x08007cd9
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cbe:	e0d8      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cc6:	e0d4      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cce:	e0d0      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cd6:	e0cc      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e0c8      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a5e      	ldr	r2, [pc, #376]	; (8007e60 <UART_SetConfig+0x2ec>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d125      	bne.n	8007d36 <UART_SetConfig+0x1c2>
 8007cea:	4b5b      	ldr	r3, [pc, #364]	; (8007e58 <UART_SetConfig+0x2e4>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cf4:	2b30      	cmp	r3, #48	; 0x30
 8007cf6:	d016      	beq.n	8007d26 <UART_SetConfig+0x1b2>
 8007cf8:	2b30      	cmp	r3, #48	; 0x30
 8007cfa:	d818      	bhi.n	8007d2e <UART_SetConfig+0x1ba>
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d00a      	beq.n	8007d16 <UART_SetConfig+0x1a2>
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d814      	bhi.n	8007d2e <UART_SetConfig+0x1ba>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <UART_SetConfig+0x19a>
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d008      	beq.n	8007d1e <UART_SetConfig+0x1aa>
 8007d0c:	e00f      	b.n	8007d2e <UART_SetConfig+0x1ba>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d14:	e0ad      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d16:	2302      	movs	r3, #2
 8007d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d1c:	e0a9      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d1e:	2304      	movs	r3, #4
 8007d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d24:	e0a5      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d26:	2308      	movs	r3, #8
 8007d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d2c:	e0a1      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d2e:	2310      	movs	r3, #16
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d34:	e09d      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a4a      	ldr	r2, [pc, #296]	; (8007e64 <UART_SetConfig+0x2f0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d125      	bne.n	8007d8c <UART_SetConfig+0x218>
 8007d40:	4b45      	ldr	r3, [pc, #276]	; (8007e58 <UART_SetConfig+0x2e4>)
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d4c:	d016      	beq.n	8007d7c <UART_SetConfig+0x208>
 8007d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d50:	d818      	bhi.n	8007d84 <UART_SetConfig+0x210>
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d00a      	beq.n	8007d6c <UART_SetConfig+0x1f8>
 8007d56:	2b80      	cmp	r3, #128	; 0x80
 8007d58:	d814      	bhi.n	8007d84 <UART_SetConfig+0x210>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <UART_SetConfig+0x1f0>
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d008      	beq.n	8007d74 <UART_SetConfig+0x200>
 8007d62:	e00f      	b.n	8007d84 <UART_SetConfig+0x210>
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6a:	e082      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d72:	e07e      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d74:	2304      	movs	r3, #4
 8007d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7a:	e07a      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d82:	e076      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d84:	2310      	movs	r3, #16
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8a:	e072      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a35      	ldr	r2, [pc, #212]	; (8007e68 <UART_SetConfig+0x2f4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d12a      	bne.n	8007dec <UART_SetConfig+0x278>
 8007d96:	4b30      	ldr	r3, [pc, #192]	; (8007e58 <UART_SetConfig+0x2e4>)
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da4:	d01a      	beq.n	8007ddc <UART_SetConfig+0x268>
 8007da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007daa:	d81b      	bhi.n	8007de4 <UART_SetConfig+0x270>
 8007dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db0:	d00c      	beq.n	8007dcc <UART_SetConfig+0x258>
 8007db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db6:	d815      	bhi.n	8007de4 <UART_SetConfig+0x270>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <UART_SetConfig+0x250>
 8007dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc0:	d008      	beq.n	8007dd4 <UART_SetConfig+0x260>
 8007dc2:	e00f      	b.n	8007de4 <UART_SetConfig+0x270>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dca:	e052      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd2:	e04e      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dda:	e04a      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de2:	e046      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dea:	e042      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a17      	ldr	r2, [pc, #92]	; (8007e50 <UART_SetConfig+0x2dc>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d13a      	bne.n	8007e6c <UART_SetConfig+0x2f8>
 8007df6:	4b18      	ldr	r3, [pc, #96]	; (8007e58 <UART_SetConfig+0x2e4>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e04:	d01a      	beq.n	8007e3c <UART_SetConfig+0x2c8>
 8007e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e0a:	d81b      	bhi.n	8007e44 <UART_SetConfig+0x2d0>
 8007e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e10:	d00c      	beq.n	8007e2c <UART_SetConfig+0x2b8>
 8007e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e16:	d815      	bhi.n	8007e44 <UART_SetConfig+0x2d0>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <UART_SetConfig+0x2b0>
 8007e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e20:	d008      	beq.n	8007e34 <UART_SetConfig+0x2c0>
 8007e22:	e00f      	b.n	8007e44 <UART_SetConfig+0x2d0>
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e2a:	e022      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e32:	e01e      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e3a:	e01a      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e42:	e016      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e4a:	e012      	b.n	8007e72 <UART_SetConfig+0x2fe>
 8007e4c:	cfff69f3 	.word	0xcfff69f3
 8007e50:	40008000 	.word	0x40008000
 8007e54:	40013800 	.word	0x40013800
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40004400 	.word	0x40004400
 8007e60:	40004800 	.word	0x40004800
 8007e64:	40004c00 	.word	0x40004c00
 8007e68:	40005000 	.word	0x40005000
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4aae      	ldr	r2, [pc, #696]	; (8008130 <UART_SetConfig+0x5bc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	f040 8097 	bne.w	8007fac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	d823      	bhi.n	8007ece <UART_SetConfig+0x35a>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0x318>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007ecf 	.word	0x08007ecf
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08007ecf 	.word	0x08007ecf
 8007e9c:	08007ebf 	.word	0x08007ebf
 8007ea0:	08007ecf 	.word	0x08007ecf
 8007ea4:	08007ecf 	.word	0x08007ecf
 8007ea8:	08007ecf 	.word	0x08007ecf
 8007eac:	08007ec7 	.word	0x08007ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb0:	f7fd fec4 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 8007eb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eb6:	e010      	b.n	8007eda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb8:	4b9e      	ldr	r3, [pc, #632]	; (8008134 <UART_SetConfig+0x5c0>)
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ebc:	e00d      	b.n	8007eda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ebe:	f7fd fe4f 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8007ec2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ec4:	e009      	b.n	8007eda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ecc:	e005      	b.n	8007eda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8130 	beq.w	8008142 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	4a94      	ldr	r2, [pc, #592]	; (8008138 <UART_SetConfig+0x5c4>)
 8007ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eec:	461a      	mov	r2, r3
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	4413      	add	r3, r2
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d305      	bcc.n	8007f12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d903      	bls.n	8007f1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f18:	e113      	b.n	8008142 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	60bb      	str	r3, [r7, #8]
 8007f20:	60fa      	str	r2, [r7, #12]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	4a84      	ldr	r2, [pc, #528]	; (8008138 <UART_SetConfig+0x5c4>)
 8007f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2200      	movs	r2, #0
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f3c:	f7f8 f96c 	bl	8000218 <__aeabi_uldivmod>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4610      	mov	r0, r2
 8007f46:	4619      	mov	r1, r3
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	020b      	lsls	r3, r1, #8
 8007f52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f56:	0202      	lsls	r2, r0, #8
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	6849      	ldr	r1, [r1, #4]
 8007f5c:	0849      	lsrs	r1, r1, #1
 8007f5e:	2000      	movs	r0, #0
 8007f60:	460c      	mov	r4, r1
 8007f62:	4605      	mov	r5, r0
 8007f64:	eb12 0804 	adds.w	r8, r2, r4
 8007f68:	eb43 0905 	adc.w	r9, r3, r5
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	469a      	mov	sl, r3
 8007f74:	4693      	mov	fp, r2
 8007f76:	4652      	mov	r2, sl
 8007f78:	465b      	mov	r3, fp
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f94b 	bl	8000218 <__aeabi_uldivmod>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4613      	mov	r3, r2
 8007f88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f90:	d308      	bcc.n	8007fa4 <UART_SetConfig+0x430>
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f98:	d204      	bcs.n	8007fa4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6a3a      	ldr	r2, [r7, #32]
 8007fa0:	60da      	str	r2, [r3, #12]
 8007fa2:	e0ce      	b.n	8008142 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007faa:	e0ca      	b.n	8008142 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb4:	d166      	bne.n	8008084 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d827      	bhi.n	800800e <UART_SetConfig+0x49a>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <UART_SetConfig+0x450>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fe9 	.word	0x08007fe9
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007ff9 	.word	0x08007ff9
 8007fd0:	0800800f 	.word	0x0800800f
 8007fd4:	08007fff 	.word	0x08007fff
 8007fd8:	0800800f 	.word	0x0800800f
 8007fdc:	0800800f 	.word	0x0800800f
 8007fe0:	0800800f 	.word	0x0800800f
 8007fe4:	08008007 	.word	0x08008007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe8:	f7fd fe28 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 8007fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fee:	e014      	b.n	800801a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff0:	f7fd fe3a 	bl	8005c68 <HAL_RCC_GetPCLK2Freq>
 8007ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ff6:	e010      	b.n	800801a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff8:	4b4e      	ldr	r3, [pc, #312]	; (8008134 <UART_SetConfig+0x5c0>)
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ffc:	e00d      	b.n	800801a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffe:	f7fd fdaf 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8008002:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008004:	e009      	b.n	800801a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800800c:	e005      	b.n	800801a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8090 	beq.w	8008142 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	4a44      	ldr	r2, [pc, #272]	; (8008138 <UART_SetConfig+0x5c4>)
 8008028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800802c:	461a      	mov	r2, r3
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	fbb3 f3f2 	udiv	r3, r3, r2
 8008034:	005a      	lsls	r2, r3, #1
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	441a      	add	r2, r3
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	2b0f      	cmp	r3, #15
 800804c:	d916      	bls.n	800807c <UART_SetConfig+0x508>
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008054:	d212      	bcs.n	800807c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	b29b      	uxth	r3, r3
 800805a:	f023 030f 	bic.w	r3, r3, #15
 800805e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	085b      	lsrs	r3, r3, #1
 8008064:	b29b      	uxth	r3, r3
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	b29a      	uxth	r2, r3
 800806c:	8bfb      	ldrh	r3, [r7, #30]
 800806e:	4313      	orrs	r3, r2
 8008070:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	8bfa      	ldrh	r2, [r7, #30]
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	e062      	b.n	8008142 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008082:	e05e      	b.n	8008142 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008084:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008088:	2b08      	cmp	r3, #8
 800808a:	d828      	bhi.n	80080de <UART_SetConfig+0x56a>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <UART_SetConfig+0x520>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080c1 	.word	0x080080c1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	080080df 	.word	0x080080df
 80080a4:	080080cf 	.word	0x080080cf
 80080a8:	080080df 	.word	0x080080df
 80080ac:	080080df 	.word	0x080080df
 80080b0:	080080df 	.word	0x080080df
 80080b4:	080080d7 	.word	0x080080d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b8:	f7fd fdc0 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 80080bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080be:	e014      	b.n	80080ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080c0:	f7fd fdd2 	bl	8005c68 <HAL_RCC_GetPCLK2Freq>
 80080c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080c6:	e010      	b.n	80080ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c8:	4b1a      	ldr	r3, [pc, #104]	; (8008134 <UART_SetConfig+0x5c0>)
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080cc:	e00d      	b.n	80080ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ce:	f7fd fd47 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 80080d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080d4:	e009      	b.n	80080ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080dc:	e005      	b.n	80080ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080e8:	bf00      	nop
    }

    if (pclk != 0U)
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d028      	beq.n	8008142 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	4a10      	ldr	r2, [pc, #64]	; (8008138 <UART_SetConfig+0x5c4>)
 80080f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080fa:	461a      	mov	r2, r3
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	441a      	add	r2, r3
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	2b0f      	cmp	r3, #15
 8008118:	d910      	bls.n	800813c <UART_SetConfig+0x5c8>
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008120:	d20c      	bcs.n	800813c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	b29a      	uxth	r2, r3
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60da      	str	r2, [r3, #12]
 800812c:	e009      	b.n	8008142 <UART_SetConfig+0x5ce>
 800812e:	bf00      	nop
 8008130:	40008000 	.word	0x40008000
 8008134:	00f42400 	.word	0x00f42400
 8008138:	080093f4 	.word	0x080093f4
      }
      else
      {
        ret = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2201      	movs	r2, #1
 8008146:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2201      	movs	r2, #1
 800814e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2200      	movs	r2, #0
 8008156:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800815e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008162:	4618      	mov	r0, r3
 8008164:	3730      	adds	r7, #48	; 0x30
 8008166:	46bd      	mov	sp, r7
 8008168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800816c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01a      	beq.n	8008282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800826a:	d10a      	bne.n	8008282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	605a      	str	r2, [r3, #4]
  }
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082c0:	f7f9 fc46 	bl	8001b50 <HAL_GetTick>
 80082c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d10e      	bne.n	80082f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f82f 	bl	8008346 <UART_WaitOnFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e025      	b.n	800833e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d10e      	bne.n	800831e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f819 	bl	8008346 <UART_WaitOnFlagUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e00f      	b.n	800833e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b09c      	sub	sp, #112	; 0x70
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	4613      	mov	r3, r2
 8008354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008356:	e0a9      	b.n	80084ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835e:	f000 80a5 	beq.w	80084ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008362:	f7f9 fbf5 	bl	8001b50 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800836e:	429a      	cmp	r2, r3
 8008370:	d302      	bcc.n	8008378 <UART_WaitOnFlagUntilTimeout+0x32>
 8008372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008374:	2b00      	cmp	r3, #0
 8008376:	d140      	bne.n	80083fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800838c:	667b      	str	r3, [r7, #100]	; 0x64
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008398:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800839c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e6      	bne.n	8008378 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3308      	adds	r3, #8
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	f023 0301 	bic.w	r3, r3, #1
 80083c0:	663b      	str	r3, [r7, #96]	; 0x60
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3308      	adds	r3, #8
 80083c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80083cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e5      	bne.n	80083aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e069      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d051      	beq.n	80084ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008416:	d149      	bne.n	80084ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008420:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
 8008442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e6      	bne.n	8008422 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3308      	adds	r3, #8
 800845a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	613b      	str	r3, [r7, #16]
   return(result);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f023 0301 	bic.w	r3, r3, #1
 800846a:	66bb      	str	r3, [r7, #104]	; 0x68
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008474:	623a      	str	r2, [r7, #32]
 8008476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	6a3a      	ldr	r2, [r7, #32]
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	61bb      	str	r3, [r7, #24]
   return(result);
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2220      	movs	r2, #32
 800848c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e010      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	69da      	ldr	r2, [r3, #28]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4013      	ands	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	f43f af46 	beq.w	8008358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3770      	adds	r7, #112	; 0x70
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_UARTEx_DisableFifoMode+0x16>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e027      	b.n	800853c <HAL_UARTEx_DisableFifoMode+0x66>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2224      	movs	r2, #36	; 0x24
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800851a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e02d      	b.n	80085bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2224      	movs	r2, #36	; 0x24
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 0201 	bic.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f84f 	bl	8008640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e02d      	b.n	8008638 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2224      	movs	r2, #36	; 0x24
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0201 	bic.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f811 	bl	8008640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800864c:	2b00      	cmp	r3, #0
 800864e:	d108      	bne.n	8008662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008660:	e031      	b.n	80086c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008662:	2308      	movs	r3, #8
 8008664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008666:	2308      	movs	r3, #8
 8008668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	0e5b      	lsrs	r3, r3, #25
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	0f5b      	lsrs	r3, r3, #29
 8008682:	b2db      	uxtb	r3, r3
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	7b3a      	ldrb	r2, [r7, #12]
 800868e:	4911      	ldr	r1, [pc, #68]	; (80086d4 <UARTEx_SetNbDataToProcess+0x94>)
 8008690:	5c8a      	ldrb	r2, [r1, r2]
 8008692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008696:	7b3a      	ldrb	r2, [r7, #12]
 8008698:	490f      	ldr	r1, [pc, #60]	; (80086d8 <UARTEx_SetNbDataToProcess+0x98>)
 800869a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800869c:	fb93 f3f2 	sdiv	r3, r3, r2
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	7b7a      	ldrb	r2, [r7, #13]
 80086ac:	4909      	ldr	r1, [pc, #36]	; (80086d4 <UARTEx_SetNbDataToProcess+0x94>)
 80086ae:	5c8a      	ldrb	r2, [r1, r2]
 80086b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086b4:	7b7a      	ldrb	r2, [r7, #13]
 80086b6:	4908      	ldr	r1, [pc, #32]	; (80086d8 <UARTEx_SetNbDataToProcess+0x98>)
 80086b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80086c6:	bf00      	nop
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	0800940c 	.word	0x0800940c
 80086d8:	08009414 	.word	0x08009414

080086dc <__errno>:
 80086dc:	4b01      	ldr	r3, [pc, #4]	; (80086e4 <__errno+0x8>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	2000000c 	.word	0x2000000c

080086e8 <__libc_init_array>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	4d0d      	ldr	r5, [pc, #52]	; (8008720 <__libc_init_array+0x38>)
 80086ec:	4c0d      	ldr	r4, [pc, #52]	; (8008724 <__libc_init_array+0x3c>)
 80086ee:	1b64      	subs	r4, r4, r5
 80086f0:	10a4      	asrs	r4, r4, #2
 80086f2:	2600      	movs	r6, #0
 80086f4:	42a6      	cmp	r6, r4
 80086f6:	d109      	bne.n	800870c <__libc_init_array+0x24>
 80086f8:	4d0b      	ldr	r5, [pc, #44]	; (8008728 <__libc_init_array+0x40>)
 80086fa:	4c0c      	ldr	r4, [pc, #48]	; (800872c <__libc_init_array+0x44>)
 80086fc:	f000 fe62 	bl	80093c4 <_init>
 8008700:	1b64      	subs	r4, r4, r5
 8008702:	10a4      	asrs	r4, r4, #2
 8008704:	2600      	movs	r6, #0
 8008706:	42a6      	cmp	r6, r4
 8008708:	d105      	bne.n	8008716 <__libc_init_array+0x2e>
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008710:	4798      	blx	r3
 8008712:	3601      	adds	r6, #1
 8008714:	e7ee      	b.n	80086f4 <__libc_init_array+0xc>
 8008716:	f855 3b04 	ldr.w	r3, [r5], #4
 800871a:	4798      	blx	r3
 800871c:	3601      	adds	r6, #1
 800871e:	e7f2      	b.n	8008706 <__libc_init_array+0x1e>
 8008720:	080097fc 	.word	0x080097fc
 8008724:	080097fc 	.word	0x080097fc
 8008728:	080097fc 	.word	0x080097fc
 800872c:	08009800 	.word	0x08009800

08008730 <memset>:
 8008730:	4402      	add	r2, r0
 8008732:	4603      	mov	r3, r0
 8008734:	4293      	cmp	r3, r2
 8008736:	d100      	bne.n	800873a <memset+0xa>
 8008738:	4770      	bx	lr
 800873a:	f803 1b01 	strb.w	r1, [r3], #1
 800873e:	e7f9      	b.n	8008734 <memset+0x4>

08008740 <cosf>:
 8008740:	ee10 3a10 	vmov	r3, s0
 8008744:	b507      	push	{r0, r1, r2, lr}
 8008746:	4a1e      	ldr	r2, [pc, #120]	; (80087c0 <cosf+0x80>)
 8008748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800874c:	4293      	cmp	r3, r2
 800874e:	dc06      	bgt.n	800875e <cosf+0x1e>
 8008750:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80087c4 <cosf+0x84>
 8008754:	b003      	add	sp, #12
 8008756:	f85d eb04 	ldr.w	lr, [sp], #4
 800875a:	f000 ba59 	b.w	8008c10 <__kernel_cosf>
 800875e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008762:	db04      	blt.n	800876e <cosf+0x2e>
 8008764:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008768:	b003      	add	sp, #12
 800876a:	f85d fb04 	ldr.w	pc, [sp], #4
 800876e:	4668      	mov	r0, sp
 8008770:	f000 f912 	bl	8008998 <__ieee754_rem_pio2f>
 8008774:	f000 0003 	and.w	r0, r0, #3
 8008778:	2801      	cmp	r0, #1
 800877a:	d009      	beq.n	8008790 <cosf+0x50>
 800877c:	2802      	cmp	r0, #2
 800877e:	d010      	beq.n	80087a2 <cosf+0x62>
 8008780:	b9b0      	cbnz	r0, 80087b0 <cosf+0x70>
 8008782:	eddd 0a01 	vldr	s1, [sp, #4]
 8008786:	ed9d 0a00 	vldr	s0, [sp]
 800878a:	f000 fa41 	bl	8008c10 <__kernel_cosf>
 800878e:	e7eb      	b.n	8008768 <cosf+0x28>
 8008790:	eddd 0a01 	vldr	s1, [sp, #4]
 8008794:	ed9d 0a00 	vldr	s0, [sp]
 8008798:	f000 fd10 	bl	80091bc <__kernel_sinf>
 800879c:	eeb1 0a40 	vneg.f32	s0, s0
 80087a0:	e7e2      	b.n	8008768 <cosf+0x28>
 80087a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80087a6:	ed9d 0a00 	vldr	s0, [sp]
 80087aa:	f000 fa31 	bl	8008c10 <__kernel_cosf>
 80087ae:	e7f5      	b.n	800879c <cosf+0x5c>
 80087b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80087b4:	ed9d 0a00 	vldr	s0, [sp]
 80087b8:	2001      	movs	r0, #1
 80087ba:	f000 fcff 	bl	80091bc <__kernel_sinf>
 80087be:	e7d3      	b.n	8008768 <cosf+0x28>
 80087c0:	3f490fd8 	.word	0x3f490fd8
 80087c4:	00000000 	.word	0x00000000

080087c8 <sinf>:
 80087c8:	ee10 3a10 	vmov	r3, s0
 80087cc:	b507      	push	{r0, r1, r2, lr}
 80087ce:	4a1f      	ldr	r2, [pc, #124]	; (800884c <sinf+0x84>)
 80087d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087d4:	4293      	cmp	r3, r2
 80087d6:	dc07      	bgt.n	80087e8 <sinf+0x20>
 80087d8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008850 <sinf+0x88>
 80087dc:	2000      	movs	r0, #0
 80087de:	b003      	add	sp, #12
 80087e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e4:	f000 bcea 	b.w	80091bc <__kernel_sinf>
 80087e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80087ec:	db04      	blt.n	80087f8 <sinf+0x30>
 80087ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 80087f2:	b003      	add	sp, #12
 80087f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80087f8:	4668      	mov	r0, sp
 80087fa:	f000 f8cd 	bl	8008998 <__ieee754_rem_pio2f>
 80087fe:	f000 0003 	and.w	r0, r0, #3
 8008802:	2801      	cmp	r0, #1
 8008804:	d00a      	beq.n	800881c <sinf+0x54>
 8008806:	2802      	cmp	r0, #2
 8008808:	d00f      	beq.n	800882a <sinf+0x62>
 800880a:	b9c0      	cbnz	r0, 800883e <sinf+0x76>
 800880c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008810:	ed9d 0a00 	vldr	s0, [sp]
 8008814:	2001      	movs	r0, #1
 8008816:	f000 fcd1 	bl	80091bc <__kernel_sinf>
 800881a:	e7ea      	b.n	80087f2 <sinf+0x2a>
 800881c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008820:	ed9d 0a00 	vldr	s0, [sp]
 8008824:	f000 f9f4 	bl	8008c10 <__kernel_cosf>
 8008828:	e7e3      	b.n	80087f2 <sinf+0x2a>
 800882a:	eddd 0a01 	vldr	s1, [sp, #4]
 800882e:	ed9d 0a00 	vldr	s0, [sp]
 8008832:	2001      	movs	r0, #1
 8008834:	f000 fcc2 	bl	80091bc <__kernel_sinf>
 8008838:	eeb1 0a40 	vneg.f32	s0, s0
 800883c:	e7d9      	b.n	80087f2 <sinf+0x2a>
 800883e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008842:	ed9d 0a00 	vldr	s0, [sp]
 8008846:	f000 f9e3 	bl	8008c10 <__kernel_cosf>
 800884a:	e7f5      	b.n	8008838 <sinf+0x70>
 800884c:	3f490fd8 	.word	0x3f490fd8
 8008850:	00000000 	.word	0x00000000

08008854 <fmodf>:
 8008854:	b508      	push	{r3, lr}
 8008856:	ed2d 8b02 	vpush	{d8}
 800885a:	eef0 8a40 	vmov.f32	s17, s0
 800885e:	eeb0 8a60 	vmov.f32	s16, s1
 8008862:	f000 f817 	bl	8008894 <__ieee754_fmodf>
 8008866:	eef4 8a48 	vcmp.f32	s17, s16
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d60c      	bvs.n	800888a <fmodf+0x36>
 8008870:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008890 <fmodf+0x3c>
 8008874:	eeb4 8a68 	vcmp.f32	s16, s17
 8008878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887c:	d105      	bne.n	800888a <fmodf+0x36>
 800887e:	f7ff ff2d 	bl	80086dc <__errno>
 8008882:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008886:	2321      	movs	r3, #33	; 0x21
 8008888:	6003      	str	r3, [r0, #0]
 800888a:	ecbd 8b02 	vpop	{d8}
 800888e:	bd08      	pop	{r3, pc}
 8008890:	00000000 	.word	0x00000000

08008894 <__ieee754_fmodf>:
 8008894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008896:	ee10 5a90 	vmov	r5, s1
 800889a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800889e:	d009      	beq.n	80088b4 <__ieee754_fmodf+0x20>
 80088a0:	ee10 2a10 	vmov	r2, s0
 80088a4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80088a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80088ac:	da02      	bge.n	80088b4 <__ieee754_fmodf+0x20>
 80088ae:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80088b2:	dd04      	ble.n	80088be <__ieee754_fmodf+0x2a>
 80088b4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80088b8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80088bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088be:	42a3      	cmp	r3, r4
 80088c0:	dbfc      	blt.n	80088bc <__ieee754_fmodf+0x28>
 80088c2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80088c6:	d105      	bne.n	80088d4 <__ieee754_fmodf+0x40>
 80088c8:	4b32      	ldr	r3, [pc, #200]	; (8008994 <__ieee754_fmodf+0x100>)
 80088ca:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80088ce:	ed93 0a00 	vldr	s0, [r3]
 80088d2:	e7f3      	b.n	80088bc <__ieee754_fmodf+0x28>
 80088d4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80088d8:	d13f      	bne.n	800895a <__ieee754_fmodf+0xc6>
 80088da:	0219      	lsls	r1, r3, #8
 80088dc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80088e0:	2900      	cmp	r1, #0
 80088e2:	dc37      	bgt.n	8008954 <__ieee754_fmodf+0xc0>
 80088e4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80088e8:	d13d      	bne.n	8008966 <__ieee754_fmodf+0xd2>
 80088ea:	0227      	lsls	r7, r4, #8
 80088ec:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80088f0:	2f00      	cmp	r7, #0
 80088f2:	da35      	bge.n	8008960 <__ieee754_fmodf+0xcc>
 80088f4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80088f8:	bfbb      	ittet	lt
 80088fa:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80088fe:	1a12      	sublt	r2, r2, r0
 8008900:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8008904:	4093      	lsllt	r3, r2
 8008906:	bfa8      	it	ge
 8008908:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800890c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008910:	bfb5      	itete	lt
 8008912:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008916:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800891a:	1a52      	sublt	r2, r2, r1
 800891c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8008920:	bfb8      	it	lt
 8008922:	4094      	lsllt	r4, r2
 8008924:	1a40      	subs	r0, r0, r1
 8008926:	1b1a      	subs	r2, r3, r4
 8008928:	bb00      	cbnz	r0, 800896c <__ieee754_fmodf+0xd8>
 800892a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800892e:	bf38      	it	cc
 8008930:	4613      	movcc	r3, r2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0c8      	beq.n	80088c8 <__ieee754_fmodf+0x34>
 8008936:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800893a:	db1f      	blt.n	800897c <__ieee754_fmodf+0xe8>
 800893c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008940:	db1f      	blt.n	8008982 <__ieee754_fmodf+0xee>
 8008942:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008946:	317f      	adds	r1, #127	; 0x7f
 8008948:	4333      	orrs	r3, r6
 800894a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800894e:	ee00 3a10 	vmov	s0, r3
 8008952:	e7b3      	b.n	80088bc <__ieee754_fmodf+0x28>
 8008954:	3801      	subs	r0, #1
 8008956:	0049      	lsls	r1, r1, #1
 8008958:	e7c2      	b.n	80088e0 <__ieee754_fmodf+0x4c>
 800895a:	15d8      	asrs	r0, r3, #23
 800895c:	387f      	subs	r0, #127	; 0x7f
 800895e:	e7c1      	b.n	80088e4 <__ieee754_fmodf+0x50>
 8008960:	3901      	subs	r1, #1
 8008962:	007f      	lsls	r7, r7, #1
 8008964:	e7c4      	b.n	80088f0 <__ieee754_fmodf+0x5c>
 8008966:	15e1      	asrs	r1, r4, #23
 8008968:	397f      	subs	r1, #127	; 0x7f
 800896a:	e7c3      	b.n	80088f4 <__ieee754_fmodf+0x60>
 800896c:	2a00      	cmp	r2, #0
 800896e:	da02      	bge.n	8008976 <__ieee754_fmodf+0xe2>
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	3801      	subs	r0, #1
 8008974:	e7d7      	b.n	8008926 <__ieee754_fmodf+0x92>
 8008976:	d0a7      	beq.n	80088c8 <__ieee754_fmodf+0x34>
 8008978:	0053      	lsls	r3, r2, #1
 800897a:	e7fa      	b.n	8008972 <__ieee754_fmodf+0xde>
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	3901      	subs	r1, #1
 8008980:	e7d9      	b.n	8008936 <__ieee754_fmodf+0xa2>
 8008982:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8008986:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800898a:	3182      	adds	r1, #130	; 0x82
 800898c:	410b      	asrs	r3, r1
 800898e:	4333      	orrs	r3, r6
 8008990:	e7dd      	b.n	800894e <__ieee754_fmodf+0xba>
 8008992:	bf00      	nop
 8008994:	0800941c 	.word	0x0800941c

08008998 <__ieee754_rem_pio2f>:
 8008998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899a:	ee10 6a10 	vmov	r6, s0
 800899e:	4b8e      	ldr	r3, [pc, #568]	; (8008bd8 <__ieee754_rem_pio2f+0x240>)
 80089a0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80089a4:	429d      	cmp	r5, r3
 80089a6:	b087      	sub	sp, #28
 80089a8:	eef0 7a40 	vmov.f32	s15, s0
 80089ac:	4604      	mov	r4, r0
 80089ae:	dc05      	bgt.n	80089bc <__ieee754_rem_pio2f+0x24>
 80089b0:	2300      	movs	r3, #0
 80089b2:	ed80 0a00 	vstr	s0, [r0]
 80089b6:	6043      	str	r3, [r0, #4]
 80089b8:	2000      	movs	r0, #0
 80089ba:	e01a      	b.n	80089f2 <__ieee754_rem_pio2f+0x5a>
 80089bc:	4b87      	ldr	r3, [pc, #540]	; (8008bdc <__ieee754_rem_pio2f+0x244>)
 80089be:	429d      	cmp	r5, r3
 80089c0:	dc46      	bgt.n	8008a50 <__ieee754_rem_pio2f+0xb8>
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008be0 <__ieee754_rem_pio2f+0x248>
 80089c8:	4b86      	ldr	r3, [pc, #536]	; (8008be4 <__ieee754_rem_pio2f+0x24c>)
 80089ca:	f025 050f 	bic.w	r5, r5, #15
 80089ce:	dd1f      	ble.n	8008a10 <__ieee754_rem_pio2f+0x78>
 80089d0:	429d      	cmp	r5, r3
 80089d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80089d6:	d00e      	beq.n	80089f6 <__ieee754_rem_pio2f+0x5e>
 80089d8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008be8 <__ieee754_rem_pio2f+0x250>
 80089dc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80089e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80089e4:	ed80 0a00 	vstr	s0, [r0]
 80089e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089ec:	2001      	movs	r0, #1
 80089ee:	edc4 7a01 	vstr	s15, [r4, #4]
 80089f2:	b007      	add	sp, #28
 80089f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089f6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008bec <__ieee754_rem_pio2f+0x254>
 80089fa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008bf0 <__ieee754_rem_pio2f+0x258>
 80089fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008a02:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008a06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a0a:	edc0 6a00 	vstr	s13, [r0]
 8008a0e:	e7eb      	b.n	80089e8 <__ieee754_rem_pio2f+0x50>
 8008a10:	429d      	cmp	r5, r3
 8008a12:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008a16:	d00e      	beq.n	8008a36 <__ieee754_rem_pio2f+0x9e>
 8008a18:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008be8 <__ieee754_rem_pio2f+0x250>
 8008a1c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008a20:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008a24:	ed80 0a00 	vstr	s0, [r0]
 8008a28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	edc4 7a01 	vstr	s15, [r4, #4]
 8008a34:	e7dd      	b.n	80089f2 <__ieee754_rem_pio2f+0x5a>
 8008a36:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008bec <__ieee754_rem_pio2f+0x254>
 8008a3a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008bf0 <__ieee754_rem_pio2f+0x258>
 8008a3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008a42:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008a46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a4a:	edc0 6a00 	vstr	s13, [r0]
 8008a4e:	e7eb      	b.n	8008a28 <__ieee754_rem_pio2f+0x90>
 8008a50:	4b68      	ldr	r3, [pc, #416]	; (8008bf4 <__ieee754_rem_pio2f+0x25c>)
 8008a52:	429d      	cmp	r5, r3
 8008a54:	dc72      	bgt.n	8008b3c <__ieee754_rem_pio2f+0x1a4>
 8008a56:	f000 fbf9 	bl	800924c <fabsf>
 8008a5a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008bf8 <__ieee754_rem_pio2f+0x260>
 8008a5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008a62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a6e:	ee17 0a90 	vmov	r0, s15
 8008a72:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008be0 <__ieee754_rem_pio2f+0x248>
 8008a76:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008a7a:	281f      	cmp	r0, #31
 8008a7c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008be8 <__ieee754_rem_pio2f+0x250>
 8008a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a84:	eeb1 6a47 	vneg.f32	s12, s14
 8008a88:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008a8c:	ee16 2a90 	vmov	r2, s13
 8008a90:	dc1c      	bgt.n	8008acc <__ieee754_rem_pio2f+0x134>
 8008a92:	495a      	ldr	r1, [pc, #360]	; (8008bfc <__ieee754_rem_pio2f+0x264>)
 8008a94:	1e47      	subs	r7, r0, #1
 8008a96:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008a9a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008a9e:	428b      	cmp	r3, r1
 8008aa0:	d014      	beq.n	8008acc <__ieee754_rem_pio2f+0x134>
 8008aa2:	6022      	str	r2, [r4, #0]
 8008aa4:	ed94 7a00 	vldr	s14, [r4]
 8008aa8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008ab2:	ed84 0a01 	vstr	s0, [r4, #4]
 8008ab6:	da9c      	bge.n	80089f2 <__ieee754_rem_pio2f+0x5a>
 8008ab8:	eeb1 7a47 	vneg.f32	s14, s14
 8008abc:	eeb1 0a40 	vneg.f32	s0, s0
 8008ac0:	ed84 7a00 	vstr	s14, [r4]
 8008ac4:	ed84 0a01 	vstr	s0, [r4, #4]
 8008ac8:	4240      	negs	r0, r0
 8008aca:	e792      	b.n	80089f2 <__ieee754_rem_pio2f+0x5a>
 8008acc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008ad0:	15eb      	asrs	r3, r5, #23
 8008ad2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008ad6:	2d08      	cmp	r5, #8
 8008ad8:	dde3      	ble.n	8008aa2 <__ieee754_rem_pio2f+0x10a>
 8008ada:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008bec <__ieee754_rem_pio2f+0x254>
 8008ade:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008bf0 <__ieee754_rem_pio2f+0x258>
 8008ae2:	eef0 6a40 	vmov.f32	s13, s0
 8008ae6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008aea:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008aee:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008af2:	eef0 7a40 	vmov.f32	s15, s0
 8008af6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008afa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008afe:	ee15 2a90 	vmov	r2, s11
 8008b02:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008b06:	1a5b      	subs	r3, r3, r1
 8008b08:	2b19      	cmp	r3, #25
 8008b0a:	dc04      	bgt.n	8008b16 <__ieee754_rem_pio2f+0x17e>
 8008b0c:	edc4 5a00 	vstr	s11, [r4]
 8008b10:	eeb0 0a66 	vmov.f32	s0, s13
 8008b14:	e7c6      	b.n	8008aa4 <__ieee754_rem_pio2f+0x10c>
 8008b16:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008c00 <__ieee754_rem_pio2f+0x268>
 8008b1a:	eeb0 0a66 	vmov.f32	s0, s13
 8008b1e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008b22:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008b26:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008c04 <__ieee754_rem_pio2f+0x26c>
 8008b2a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008b2e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008b32:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008b36:	ed84 7a00 	vstr	s14, [r4]
 8008b3a:	e7b3      	b.n	8008aa4 <__ieee754_rem_pio2f+0x10c>
 8008b3c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008b40:	db06      	blt.n	8008b50 <__ieee754_rem_pio2f+0x1b8>
 8008b42:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008b46:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b4a:	edc0 7a00 	vstr	s15, [r0]
 8008b4e:	e733      	b.n	80089b8 <__ieee754_rem_pio2f+0x20>
 8008b50:	15ea      	asrs	r2, r5, #23
 8008b52:	3a86      	subs	r2, #134	; 0x86
 8008b54:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008b58:	ee07 3a90 	vmov	s15, r3
 8008b5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b60:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008c08 <__ieee754_rem_pio2f+0x270>
 8008b64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b6c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008b70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b80:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008b84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b90:	edcd 7a05 	vstr	s15, [sp, #20]
 8008b94:	d11e      	bne.n	8008bd4 <__ieee754_rem_pio2f+0x23c>
 8008b96:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9e:	bf14      	ite	ne
 8008ba0:	2302      	movne	r3, #2
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	4919      	ldr	r1, [pc, #100]	; (8008c0c <__ieee754_rem_pio2f+0x274>)
 8008ba6:	9101      	str	r1, [sp, #4]
 8008ba8:	2102      	movs	r1, #2
 8008baa:	9100      	str	r1, [sp, #0]
 8008bac:	a803      	add	r0, sp, #12
 8008bae:	4621      	mov	r1, r4
 8008bb0:	f000 f88e 	bl	8008cd0 <__kernel_rem_pio2f>
 8008bb4:	2e00      	cmp	r6, #0
 8008bb6:	f6bf af1c 	bge.w	80089f2 <__ieee754_rem_pio2f+0x5a>
 8008bba:	edd4 7a00 	vldr	s15, [r4]
 8008bbe:	eef1 7a67 	vneg.f32	s15, s15
 8008bc2:	edc4 7a00 	vstr	s15, [r4]
 8008bc6:	edd4 7a01 	vldr	s15, [r4, #4]
 8008bca:	eef1 7a67 	vneg.f32	s15, s15
 8008bce:	edc4 7a01 	vstr	s15, [r4, #4]
 8008bd2:	e779      	b.n	8008ac8 <__ieee754_rem_pio2f+0x130>
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e7e5      	b.n	8008ba4 <__ieee754_rem_pio2f+0x20c>
 8008bd8:	3f490fd8 	.word	0x3f490fd8
 8008bdc:	4016cbe3 	.word	0x4016cbe3
 8008be0:	3fc90f80 	.word	0x3fc90f80
 8008be4:	3fc90fd0 	.word	0x3fc90fd0
 8008be8:	37354443 	.word	0x37354443
 8008bec:	37354400 	.word	0x37354400
 8008bf0:	2e85a308 	.word	0x2e85a308
 8008bf4:	43490f80 	.word	0x43490f80
 8008bf8:	3f22f984 	.word	0x3f22f984
 8008bfc:	08009424 	.word	0x08009424
 8008c00:	2e85a300 	.word	0x2e85a300
 8008c04:	248d3132 	.word	0x248d3132
 8008c08:	43800000 	.word	0x43800000
 8008c0c:	080094a4 	.word	0x080094a4

08008c10 <__kernel_cosf>:
 8008c10:	ee10 3a10 	vmov	r3, s0
 8008c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008c1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008c20:	da05      	bge.n	8008c2e <__kernel_cosf+0x1e>
 8008c22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008c26:	ee17 2a90 	vmov	r2, s15
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	d03d      	beq.n	8008caa <__kernel_cosf+0x9a>
 8008c2e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008c32:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008cb0 <__kernel_cosf+0xa0>
 8008c36:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008cb4 <__kernel_cosf+0xa4>
 8008c3a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008cb8 <__kernel_cosf+0xa8>
 8008c3e:	4a1f      	ldr	r2, [pc, #124]	; (8008cbc <__kernel_cosf+0xac>)
 8008c40:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008c44:	4293      	cmp	r3, r2
 8008c46:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008cc0 <__kernel_cosf+0xb0>
 8008c4a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008c4e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008cc4 <__kernel_cosf+0xb4>
 8008c52:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008c56:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008cc8 <__kernel_cosf+0xb8>
 8008c5a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008c5e:	eeb0 7a66 	vmov.f32	s14, s13
 8008c62:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008c66:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008c6a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008c6e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008c72:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008c76:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008c7a:	dc04      	bgt.n	8008c86 <__kernel_cosf+0x76>
 8008c7c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008c80:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008c84:	4770      	bx	lr
 8008c86:	4a11      	ldr	r2, [pc, #68]	; (8008ccc <__kernel_cosf+0xbc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	bfda      	itte	le
 8008c8c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008c90:	ee06 3a90 	vmovle	s13, r3
 8008c94:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008c98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c9c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008ca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ca4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008ca8:	4770      	bx	lr
 8008caa:	eeb0 0a46 	vmov.f32	s0, s12
 8008cae:	4770      	bx	lr
 8008cb0:	ad47d74e 	.word	0xad47d74e
 8008cb4:	310f74f6 	.word	0x310f74f6
 8008cb8:	3d2aaaab 	.word	0x3d2aaaab
 8008cbc:	3e999999 	.word	0x3e999999
 8008cc0:	b493f27c 	.word	0xb493f27c
 8008cc4:	37d00d01 	.word	0x37d00d01
 8008cc8:	bab60b61 	.word	0xbab60b61
 8008ccc:	3f480000 	.word	0x3f480000

08008cd0 <__kernel_rem_pio2f>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	ed2d 8b04 	vpush	{d8-d9}
 8008cd8:	b0d9      	sub	sp, #356	; 0x164
 8008cda:	4688      	mov	r8, r1
 8008cdc:	9002      	str	r0, [sp, #8]
 8008cde:	49bb      	ldr	r1, [pc, #748]	; (8008fcc <__kernel_rem_pio2f+0x2fc>)
 8008ce0:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008ce8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008cec:	1e59      	subs	r1, r3, #1
 8008cee:	1d13      	adds	r3, r2, #4
 8008cf0:	db27      	blt.n	8008d42 <__kernel_rem_pio2f+0x72>
 8008cf2:	f1b2 0b03 	subs.w	fp, r2, #3
 8008cf6:	bf48      	it	mi
 8008cf8:	f102 0b04 	addmi.w	fp, r2, #4
 8008cfc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008d00:	1c45      	adds	r5, r0, #1
 8008d02:	00ec      	lsls	r4, r5, #3
 8008d04:	1a47      	subs	r7, r0, r1
 8008d06:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008fdc <__kernel_rem_pio2f+0x30c>
 8008d0a:	9403      	str	r4, [sp, #12]
 8008d0c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008d10:	eb0a 0c01 	add.w	ip, sl, r1
 8008d14:	ae1c      	add	r6, sp, #112	; 0x70
 8008d16:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008d1a:	2400      	movs	r4, #0
 8008d1c:	4564      	cmp	r4, ip
 8008d1e:	dd12      	ble.n	8008d46 <__kernel_rem_pio2f+0x76>
 8008d20:	9b01      	ldr	r3, [sp, #4]
 8008d22:	ac1c      	add	r4, sp, #112	; 0x70
 8008d24:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008d28:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008d2c:	f04f 0c00 	mov.w	ip, #0
 8008d30:	45d4      	cmp	ip, sl
 8008d32:	dc27      	bgt.n	8008d84 <__kernel_rem_pio2f+0xb4>
 8008d34:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008d38:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008fdc <__kernel_rem_pio2f+0x30c>
 8008d3c:	4627      	mov	r7, r4
 8008d3e:	2600      	movs	r6, #0
 8008d40:	e016      	b.n	8008d70 <__kernel_rem_pio2f+0xa0>
 8008d42:	2000      	movs	r0, #0
 8008d44:	e7dc      	b.n	8008d00 <__kernel_rem_pio2f+0x30>
 8008d46:	42e7      	cmn	r7, r4
 8008d48:	bf5d      	ittte	pl
 8008d4a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008d4e:	ee07 3a90 	vmovpl	s15, r3
 8008d52:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008d56:	eef0 7a47 	vmovmi.f32	s15, s14
 8008d5a:	ece6 7a01 	vstmia	r6!, {s15}
 8008d5e:	3401      	adds	r4, #1
 8008d60:	e7dc      	b.n	8008d1c <__kernel_rem_pio2f+0x4c>
 8008d62:	ecf9 6a01 	vldmia	r9!, {s13}
 8008d66:	ed97 7a00 	vldr	s14, [r7]
 8008d6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008d6e:	3601      	adds	r6, #1
 8008d70:	428e      	cmp	r6, r1
 8008d72:	f1a7 0704 	sub.w	r7, r7, #4
 8008d76:	ddf4      	ble.n	8008d62 <__kernel_rem_pio2f+0x92>
 8008d78:	eceb 7a01 	vstmia	fp!, {s15}
 8008d7c:	f10c 0c01 	add.w	ip, ip, #1
 8008d80:	3404      	adds	r4, #4
 8008d82:	e7d5      	b.n	8008d30 <__kernel_rem_pio2f+0x60>
 8008d84:	ab08      	add	r3, sp, #32
 8008d86:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008d8a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008fd8 <__kernel_rem_pio2f+0x308>
 8008d8e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008fd4 <__kernel_rem_pio2f+0x304>
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008d98:	4656      	mov	r6, sl
 8008d9a:	00b3      	lsls	r3, r6, #2
 8008d9c:	9305      	str	r3, [sp, #20]
 8008d9e:	ab58      	add	r3, sp, #352	; 0x160
 8008da0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008da4:	ac08      	add	r4, sp, #32
 8008da6:	ab44      	add	r3, sp, #272	; 0x110
 8008da8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008dac:	46a4      	mov	ip, r4
 8008dae:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008db2:	4637      	mov	r7, r6
 8008db4:	2f00      	cmp	r7, #0
 8008db6:	f1a0 0004 	sub.w	r0, r0, #4
 8008dba:	dc4f      	bgt.n	8008e5c <__kernel_rem_pio2f+0x18c>
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008dc2:	f000 fa8d 	bl	80092e0 <scalbnf>
 8008dc6:	eeb0 8a40 	vmov.f32	s16, s0
 8008dca:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008dce:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008dd2:	f000 fa43 	bl	800925c <floorf>
 8008dd6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008dda:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008dde:	2d00      	cmp	r5, #0
 8008de0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008de4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008de8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008dec:	ee17 9a90 	vmov	r9, s15
 8008df0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008df4:	dd44      	ble.n	8008e80 <__kernel_rem_pio2f+0x1b0>
 8008df6:	f106 3cff 	add.w	ip, r6, #4294967295
 8008dfa:	ab08      	add	r3, sp, #32
 8008dfc:	f1c5 0e08 	rsb	lr, r5, #8
 8008e00:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008e04:	fa47 f00e 	asr.w	r0, r7, lr
 8008e08:	4481      	add	r9, r0
 8008e0a:	fa00 f00e 	lsl.w	r0, r0, lr
 8008e0e:	1a3f      	subs	r7, r7, r0
 8008e10:	f1c5 0007 	rsb	r0, r5, #7
 8008e14:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008e18:	4107      	asrs	r7, r0
 8008e1a:	2f00      	cmp	r7, #0
 8008e1c:	dd3f      	ble.n	8008e9e <__kernel_rem_pio2f+0x1ce>
 8008e1e:	f04f 0e00 	mov.w	lr, #0
 8008e22:	f109 0901 	add.w	r9, r9, #1
 8008e26:	4673      	mov	r3, lr
 8008e28:	4576      	cmp	r6, lr
 8008e2a:	dc6b      	bgt.n	8008f04 <__kernel_rem_pio2f+0x234>
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	dd04      	ble.n	8008e3a <__kernel_rem_pio2f+0x16a>
 8008e30:	2d01      	cmp	r5, #1
 8008e32:	d078      	beq.n	8008f26 <__kernel_rem_pio2f+0x256>
 8008e34:	2d02      	cmp	r5, #2
 8008e36:	f000 8081 	beq.w	8008f3c <__kernel_rem_pio2f+0x26c>
 8008e3a:	2f02      	cmp	r7, #2
 8008e3c:	d12f      	bne.n	8008e9e <__kernel_rem_pio2f+0x1ce>
 8008e3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008e42:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008e46:	b353      	cbz	r3, 8008e9e <__kernel_rem_pio2f+0x1ce>
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008e4e:	f000 fa47 	bl	80092e0 <scalbnf>
 8008e52:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008e56:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008e5a:	e020      	b.n	8008e9e <__kernel_rem_pio2f+0x1ce>
 8008e5c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008e60:	3f01      	subs	r7, #1
 8008e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e6a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008e6e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008e72:	ecac 0a01 	vstmia	ip!, {s0}
 8008e76:	ed90 0a00 	vldr	s0, [r0]
 8008e7a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008e7e:	e799      	b.n	8008db4 <__kernel_rem_pio2f+0xe4>
 8008e80:	d105      	bne.n	8008e8e <__kernel_rem_pio2f+0x1be>
 8008e82:	1e70      	subs	r0, r6, #1
 8008e84:	ab08      	add	r3, sp, #32
 8008e86:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008e8a:	11ff      	asrs	r7, r7, #7
 8008e8c:	e7c5      	b.n	8008e1a <__kernel_rem_pio2f+0x14a>
 8008e8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008e92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9a:	da31      	bge.n	8008f00 <__kernel_rem_pio2f+0x230>
 8008e9c:	2700      	movs	r7, #0
 8008e9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea6:	f040 809b 	bne.w	8008fe0 <__kernel_rem_pio2f+0x310>
 8008eaa:	1e74      	subs	r4, r6, #1
 8008eac:	46a4      	mov	ip, r4
 8008eae:	2000      	movs	r0, #0
 8008eb0:	45d4      	cmp	ip, sl
 8008eb2:	da4a      	bge.n	8008f4a <__kernel_rem_pio2f+0x27a>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d07a      	beq.n	8008fae <__kernel_rem_pio2f+0x2de>
 8008eb8:	ab08      	add	r3, sp, #32
 8008eba:	3d08      	subs	r5, #8
 8008ebc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8081 	beq.w	8008fc8 <__kernel_rem_pio2f+0x2f8>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008ecc:	00a5      	lsls	r5, r4, #2
 8008ece:	f000 fa07 	bl	80092e0 <scalbnf>
 8008ed2:	aa44      	add	r2, sp, #272	; 0x110
 8008ed4:	1d2b      	adds	r3, r5, #4
 8008ed6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008fd8 <__kernel_rem_pio2f+0x308>
 8008eda:	18d1      	adds	r1, r2, r3
 8008edc:	4622      	mov	r2, r4
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	f280 80ae 	bge.w	8009040 <__kernel_rem_pio2f+0x370>
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	f2c0 80cc 	blt.w	8009084 <__kernel_rem_pio2f+0x3b4>
 8008eec:	a944      	add	r1, sp, #272	; 0x110
 8008eee:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008ef2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008fd0 <__kernel_rem_pio2f+0x300>
 8008ef6:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008fdc <__kernel_rem_pio2f+0x30c>
 8008efa:	2000      	movs	r0, #0
 8008efc:	1aa1      	subs	r1, r4, r2
 8008efe:	e0b6      	b.n	800906e <__kernel_rem_pio2f+0x39e>
 8008f00:	2702      	movs	r7, #2
 8008f02:	e78c      	b.n	8008e1e <__kernel_rem_pio2f+0x14e>
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	b94b      	cbnz	r3, 8008f1c <__kernel_rem_pio2f+0x24c>
 8008f08:	b118      	cbz	r0, 8008f12 <__kernel_rem_pio2f+0x242>
 8008f0a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008f0e:	6020      	str	r0, [r4, #0]
 8008f10:	2001      	movs	r0, #1
 8008f12:	f10e 0e01 	add.w	lr, lr, #1
 8008f16:	3404      	adds	r4, #4
 8008f18:	4603      	mov	r3, r0
 8008f1a:	e785      	b.n	8008e28 <__kernel_rem_pio2f+0x158>
 8008f1c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008f20:	6020      	str	r0, [r4, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	e7f5      	b.n	8008f12 <__kernel_rem_pio2f+0x242>
 8008f26:	1e74      	subs	r4, r6, #1
 8008f28:	a808      	add	r0, sp, #32
 8008f2a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008f2e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008f32:	f10d 0c20 	add.w	ip, sp, #32
 8008f36:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008f3a:	e77e      	b.n	8008e3a <__kernel_rem_pio2f+0x16a>
 8008f3c:	1e74      	subs	r4, r6, #1
 8008f3e:	a808      	add	r0, sp, #32
 8008f40:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008f44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008f48:	e7f3      	b.n	8008f32 <__kernel_rem_pio2f+0x262>
 8008f4a:	ab08      	add	r3, sp, #32
 8008f4c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008f50:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f54:	4318      	orrs	r0, r3
 8008f56:	e7ab      	b.n	8008eb0 <__kernel_rem_pio2f+0x1e0>
 8008f58:	f10c 0c01 	add.w	ip, ip, #1
 8008f5c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008f60:	2c00      	cmp	r4, #0
 8008f62:	d0f9      	beq.n	8008f58 <__kernel_rem_pio2f+0x288>
 8008f64:	9b05      	ldr	r3, [sp, #20]
 8008f66:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008f6a:	eb0d 0003 	add.w	r0, sp, r3
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	18f4      	adds	r4, r6, r3
 8008f72:	ab1c      	add	r3, sp, #112	; 0x70
 8008f74:	1c77      	adds	r7, r6, #1
 8008f76:	384c      	subs	r0, #76	; 0x4c
 8008f78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f7c:	4466      	add	r6, ip
 8008f7e:	42be      	cmp	r6, r7
 8008f80:	f6ff af0b 	blt.w	8008d9a <__kernel_rem_pio2f+0xca>
 8008f84:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008f88:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008f8c:	ee07 3a90 	vmov	s15, r3
 8008f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f94:	f04f 0c00 	mov.w	ip, #0
 8008f98:	ece4 7a01 	vstmia	r4!, {s15}
 8008f9c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008fdc <__kernel_rem_pio2f+0x30c>
 8008fa0:	46a1      	mov	r9, r4
 8008fa2:	458c      	cmp	ip, r1
 8008fa4:	dd07      	ble.n	8008fb6 <__kernel_rem_pio2f+0x2e6>
 8008fa6:	ece0 7a01 	vstmia	r0!, {s15}
 8008faa:	3701      	adds	r7, #1
 8008fac:	e7e7      	b.n	8008f7e <__kernel_rem_pio2f+0x2ae>
 8008fae:	9804      	ldr	r0, [sp, #16]
 8008fb0:	f04f 0c01 	mov.w	ip, #1
 8008fb4:	e7d2      	b.n	8008f5c <__kernel_rem_pio2f+0x28c>
 8008fb6:	ecfe 6a01 	vldmia	lr!, {s13}
 8008fba:	ed39 7a01 	vldmdb	r9!, {s14}
 8008fbe:	f10c 0c01 	add.w	ip, ip, #1
 8008fc2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008fc6:	e7ec      	b.n	8008fa2 <__kernel_rem_pio2f+0x2d2>
 8008fc8:	3c01      	subs	r4, #1
 8008fca:	e775      	b.n	8008eb8 <__kernel_rem_pio2f+0x1e8>
 8008fcc:	080097e8 	.word	0x080097e8
 8008fd0:	080097bc 	.word	0x080097bc
 8008fd4:	43800000 	.word	0x43800000
 8008fd8:	3b800000 	.word	0x3b800000
 8008fdc:	00000000 	.word	0x00000000
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8008fe6:	1a98      	subs	r0, r3, r2
 8008fe8:	f000 f97a 	bl	80092e0 <scalbnf>
 8008fec:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008fd4 <__kernel_rem_pio2f+0x304>
 8008ff0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff8:	db19      	blt.n	800902e <__kernel_rem_pio2f+0x35e>
 8008ffa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008fd8 <__kernel_rem_pio2f+0x308>
 8008ffe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009002:	aa08      	add	r2, sp, #32
 8009004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009008:	1c74      	adds	r4, r6, #1
 800900a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800900e:	3508      	adds	r5, #8
 8009010:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009018:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800901c:	ee10 3a10 	vmov	r3, s0
 8009020:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009024:	ee17 3a90 	vmov	r3, s15
 8009028:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800902c:	e74b      	b.n	8008ec6 <__kernel_rem_pio2f+0x1f6>
 800902e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009032:	aa08      	add	r2, sp, #32
 8009034:	ee10 3a10 	vmov	r3, s0
 8009038:	4634      	mov	r4, r6
 800903a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800903e:	e742      	b.n	8008ec6 <__kernel_rem_pio2f+0x1f6>
 8009040:	a808      	add	r0, sp, #32
 8009042:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009046:	9001      	str	r0, [sp, #4]
 8009048:	ee07 0a90 	vmov	s15, r0
 800904c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009050:	3a01      	subs	r2, #1
 8009052:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009056:	ee20 0a07 	vmul.f32	s0, s0, s14
 800905a:	ed61 7a01 	vstmdb	r1!, {s15}
 800905e:	e73e      	b.n	8008ede <__kernel_rem_pio2f+0x20e>
 8009060:	ecfc 6a01 	vldmia	ip!, {s13}
 8009064:	ecb6 7a01 	vldmia	r6!, {s14}
 8009068:	eee6 7a87 	vfma.f32	s15, s13, s14
 800906c:	3001      	adds	r0, #1
 800906e:	4550      	cmp	r0, sl
 8009070:	dc01      	bgt.n	8009076 <__kernel_rem_pio2f+0x3a6>
 8009072:	4288      	cmp	r0, r1
 8009074:	ddf4      	ble.n	8009060 <__kernel_rem_pio2f+0x390>
 8009076:	a858      	add	r0, sp, #352	; 0x160
 8009078:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800907c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009080:	3a01      	subs	r2, #1
 8009082:	e730      	b.n	8008ee6 <__kernel_rem_pio2f+0x216>
 8009084:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8009086:	2a02      	cmp	r2, #2
 8009088:	dc09      	bgt.n	800909e <__kernel_rem_pio2f+0x3ce>
 800908a:	2a00      	cmp	r2, #0
 800908c:	dc2a      	bgt.n	80090e4 <__kernel_rem_pio2f+0x414>
 800908e:	d043      	beq.n	8009118 <__kernel_rem_pio2f+0x448>
 8009090:	f009 0007 	and.w	r0, r9, #7
 8009094:	b059      	add	sp, #356	; 0x164
 8009096:	ecbd 8b04 	vpop	{d8-d9}
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d1f5      	bne.n	8009090 <__kernel_rem_pio2f+0x3c0>
 80090a4:	ab30      	add	r3, sp, #192	; 0xc0
 80090a6:	442b      	add	r3, r5
 80090a8:	461a      	mov	r2, r3
 80090aa:	4619      	mov	r1, r3
 80090ac:	4620      	mov	r0, r4
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f1a1 0104 	sub.w	r1, r1, #4
 80090b4:	dc51      	bgt.n	800915a <__kernel_rem_pio2f+0x48a>
 80090b6:	4621      	mov	r1, r4
 80090b8:	2901      	cmp	r1, #1
 80090ba:	f1a2 0204 	sub.w	r2, r2, #4
 80090be:	dc5c      	bgt.n	800917a <__kernel_rem_pio2f+0x4aa>
 80090c0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008fdc <__kernel_rem_pio2f+0x30c>
 80090c4:	3304      	adds	r3, #4
 80090c6:	2c01      	cmp	r4, #1
 80090c8:	dc67      	bgt.n	800919a <__kernel_rem_pio2f+0x4ca>
 80090ca:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80090ce:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80090d2:	2f00      	cmp	r7, #0
 80090d4:	d167      	bne.n	80091a6 <__kernel_rem_pio2f+0x4d6>
 80090d6:	edc8 6a00 	vstr	s13, [r8]
 80090da:	ed88 7a01 	vstr	s14, [r8, #4]
 80090de:	edc8 7a02 	vstr	s15, [r8, #8]
 80090e2:	e7d5      	b.n	8009090 <__kernel_rem_pio2f+0x3c0>
 80090e4:	aa30      	add	r2, sp, #192	; 0xc0
 80090e6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008fdc <__kernel_rem_pio2f+0x30c>
 80090ea:	4413      	add	r3, r2
 80090ec:	4622      	mov	r2, r4
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	da24      	bge.n	800913c <__kernel_rem_pio2f+0x46c>
 80090f2:	b34f      	cbz	r7, 8009148 <__kernel_rem_pio2f+0x478>
 80090f4:	eef1 7a47 	vneg.f32	s15, s14
 80090f8:	edc8 7a00 	vstr	s15, [r8]
 80090fc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009104:	aa31      	add	r2, sp, #196	; 0xc4
 8009106:	2301      	movs	r3, #1
 8009108:	429c      	cmp	r4, r3
 800910a:	da20      	bge.n	800914e <__kernel_rem_pio2f+0x47e>
 800910c:	b10f      	cbz	r7, 8009112 <__kernel_rem_pio2f+0x442>
 800910e:	eef1 7a67 	vneg.f32	s15, s15
 8009112:	edc8 7a01 	vstr	s15, [r8, #4]
 8009116:	e7bb      	b.n	8009090 <__kernel_rem_pio2f+0x3c0>
 8009118:	aa30      	add	r2, sp, #192	; 0xc0
 800911a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008fdc <__kernel_rem_pio2f+0x30c>
 800911e:	4413      	add	r3, r2
 8009120:	2c00      	cmp	r4, #0
 8009122:	da05      	bge.n	8009130 <__kernel_rem_pio2f+0x460>
 8009124:	b10f      	cbz	r7, 800912a <__kernel_rem_pio2f+0x45a>
 8009126:	eef1 7a67 	vneg.f32	s15, s15
 800912a:	edc8 7a00 	vstr	s15, [r8]
 800912e:	e7af      	b.n	8009090 <__kernel_rem_pio2f+0x3c0>
 8009130:	ed33 7a01 	vldmdb	r3!, {s14}
 8009134:	3c01      	subs	r4, #1
 8009136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800913a:	e7f1      	b.n	8009120 <__kernel_rem_pio2f+0x450>
 800913c:	ed73 7a01 	vldmdb	r3!, {s15}
 8009140:	3a01      	subs	r2, #1
 8009142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009146:	e7d2      	b.n	80090ee <__kernel_rem_pio2f+0x41e>
 8009148:	eef0 7a47 	vmov.f32	s15, s14
 800914c:	e7d4      	b.n	80090f8 <__kernel_rem_pio2f+0x428>
 800914e:	ecb2 7a01 	vldmia	r2!, {s14}
 8009152:	3301      	adds	r3, #1
 8009154:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009158:	e7d6      	b.n	8009108 <__kernel_rem_pio2f+0x438>
 800915a:	edd1 7a00 	vldr	s15, [r1]
 800915e:	edd1 6a01 	vldr	s13, [r1, #4]
 8009162:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009166:	3801      	subs	r0, #1
 8009168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800916c:	ed81 7a00 	vstr	s14, [r1]
 8009170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009174:	edc1 7a01 	vstr	s15, [r1, #4]
 8009178:	e799      	b.n	80090ae <__kernel_rem_pio2f+0x3de>
 800917a:	edd2 7a00 	vldr	s15, [r2]
 800917e:	edd2 6a01 	vldr	s13, [r2, #4]
 8009182:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009186:	3901      	subs	r1, #1
 8009188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800918c:	ed82 7a00 	vstr	s14, [r2]
 8009190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009194:	edc2 7a01 	vstr	s15, [r2, #4]
 8009198:	e78e      	b.n	80090b8 <__kernel_rem_pio2f+0x3e8>
 800919a:	ed33 7a01 	vldmdb	r3!, {s14}
 800919e:	3c01      	subs	r4, #1
 80091a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091a4:	e78f      	b.n	80090c6 <__kernel_rem_pio2f+0x3f6>
 80091a6:	eef1 6a66 	vneg.f32	s13, s13
 80091aa:	eeb1 7a47 	vneg.f32	s14, s14
 80091ae:	edc8 6a00 	vstr	s13, [r8]
 80091b2:	ed88 7a01 	vstr	s14, [r8, #4]
 80091b6:	eef1 7a67 	vneg.f32	s15, s15
 80091ba:	e790      	b.n	80090de <__kernel_rem_pio2f+0x40e>

080091bc <__kernel_sinf>:
 80091bc:	ee10 3a10 	vmov	r3, s0
 80091c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80091c8:	da04      	bge.n	80091d4 <__kernel_sinf+0x18>
 80091ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80091ce:	ee17 3a90 	vmov	r3, s15
 80091d2:	b35b      	cbz	r3, 800922c <__kernel_sinf+0x70>
 80091d4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80091d8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009230 <__kernel_sinf+0x74>
 80091dc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009234 <__kernel_sinf+0x78>
 80091e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80091e4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009238 <__kernel_sinf+0x7c>
 80091e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80091ec:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800923c <__kernel_sinf+0x80>
 80091f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80091f4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009240 <__kernel_sinf+0x84>
 80091f8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80091fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009200:	b930      	cbnz	r0, 8009210 <__kernel_sinf+0x54>
 8009202:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009244 <__kernel_sinf+0x88>
 8009206:	eea7 6a27 	vfma.f32	s12, s14, s15
 800920a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800920e:	4770      	bx	lr
 8009210:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009214:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009218:	eee0 7a86 	vfma.f32	s15, s1, s12
 800921c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009220:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009248 <__kernel_sinf+0x8c>
 8009224:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009228:	ee30 0a60 	vsub.f32	s0, s0, s1
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	2f2ec9d3 	.word	0x2f2ec9d3
 8009234:	b2d72f34 	.word	0xb2d72f34
 8009238:	3638ef1b 	.word	0x3638ef1b
 800923c:	b9500d01 	.word	0xb9500d01
 8009240:	3c088889 	.word	0x3c088889
 8009244:	be2aaaab 	.word	0xbe2aaaab
 8009248:	3e2aaaab 	.word	0x3e2aaaab

0800924c <fabsf>:
 800924c:	ee10 3a10 	vmov	r3, s0
 8009250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009254:	ee00 3a10 	vmov	s0, r3
 8009258:	4770      	bx	lr
	...

0800925c <floorf>:
 800925c:	ee10 3a10 	vmov	r3, s0
 8009260:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009264:	3a7f      	subs	r2, #127	; 0x7f
 8009266:	2a16      	cmp	r2, #22
 8009268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800926c:	dc2a      	bgt.n	80092c4 <floorf+0x68>
 800926e:	2a00      	cmp	r2, #0
 8009270:	da11      	bge.n	8009296 <floorf+0x3a>
 8009272:	eddf 7a18 	vldr	s15, [pc, #96]	; 80092d4 <floorf+0x78>
 8009276:	ee30 0a27 	vadd.f32	s0, s0, s15
 800927a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800927e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009282:	dd05      	ble.n	8009290 <floorf+0x34>
 8009284:	2b00      	cmp	r3, #0
 8009286:	da23      	bge.n	80092d0 <floorf+0x74>
 8009288:	4a13      	ldr	r2, [pc, #76]	; (80092d8 <floorf+0x7c>)
 800928a:	2900      	cmp	r1, #0
 800928c:	bf18      	it	ne
 800928e:	4613      	movne	r3, r2
 8009290:	ee00 3a10 	vmov	s0, r3
 8009294:	4770      	bx	lr
 8009296:	4911      	ldr	r1, [pc, #68]	; (80092dc <floorf+0x80>)
 8009298:	4111      	asrs	r1, r2
 800929a:	420b      	tst	r3, r1
 800929c:	d0fa      	beq.n	8009294 <floorf+0x38>
 800929e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80092d4 <floorf+0x78>
 80092a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80092a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80092aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ae:	ddef      	ble.n	8009290 <floorf+0x34>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bfbe      	ittt	lt
 80092b4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80092b8:	fa40 f202 	asrlt.w	r2, r0, r2
 80092bc:	189b      	addlt	r3, r3, r2
 80092be:	ea23 0301 	bic.w	r3, r3, r1
 80092c2:	e7e5      	b.n	8009290 <floorf+0x34>
 80092c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80092c8:	d3e4      	bcc.n	8009294 <floorf+0x38>
 80092ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80092ce:	4770      	bx	lr
 80092d0:	2300      	movs	r3, #0
 80092d2:	e7dd      	b.n	8009290 <floorf+0x34>
 80092d4:	7149f2ca 	.word	0x7149f2ca
 80092d8:	bf800000 	.word	0xbf800000
 80092dc:	007fffff 	.word	0x007fffff

080092e0 <scalbnf>:
 80092e0:	ee10 3a10 	vmov	r3, s0
 80092e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80092e8:	d025      	beq.n	8009336 <scalbnf+0x56>
 80092ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80092ee:	d302      	bcc.n	80092f6 <scalbnf+0x16>
 80092f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80092f4:	4770      	bx	lr
 80092f6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80092fa:	d122      	bne.n	8009342 <scalbnf+0x62>
 80092fc:	4b2a      	ldr	r3, [pc, #168]	; (80093a8 <scalbnf+0xc8>)
 80092fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80093ac <scalbnf+0xcc>
 8009302:	4298      	cmp	r0, r3
 8009304:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009308:	db16      	blt.n	8009338 <scalbnf+0x58>
 800930a:	ee10 3a10 	vmov	r3, s0
 800930e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009312:	3a19      	subs	r2, #25
 8009314:	4402      	add	r2, r0
 8009316:	2afe      	cmp	r2, #254	; 0xfe
 8009318:	dd15      	ble.n	8009346 <scalbnf+0x66>
 800931a:	ee10 3a10 	vmov	r3, s0
 800931e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80093b0 <scalbnf+0xd0>
 8009322:	eddf 6a24 	vldr	s13, [pc, #144]	; 80093b4 <scalbnf+0xd4>
 8009326:	2b00      	cmp	r3, #0
 8009328:	eeb0 7a67 	vmov.f32	s14, s15
 800932c:	bfb8      	it	lt
 800932e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009332:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009336:	4770      	bx	lr
 8009338:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80093b8 <scalbnf+0xd8>
 800933c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009340:	4770      	bx	lr
 8009342:	0dd2      	lsrs	r2, r2, #23
 8009344:	e7e6      	b.n	8009314 <scalbnf+0x34>
 8009346:	2a00      	cmp	r2, #0
 8009348:	dd06      	ble.n	8009358 <scalbnf+0x78>
 800934a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800934e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009352:	ee00 3a10 	vmov	s0, r3
 8009356:	4770      	bx	lr
 8009358:	f112 0f16 	cmn.w	r2, #22
 800935c:	da1a      	bge.n	8009394 <scalbnf+0xb4>
 800935e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009362:	4298      	cmp	r0, r3
 8009364:	ee10 3a10 	vmov	r3, s0
 8009368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800936c:	dd0a      	ble.n	8009384 <scalbnf+0xa4>
 800936e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80093b0 <scalbnf+0xd0>
 8009372:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80093b4 <scalbnf+0xd4>
 8009376:	eef0 7a40 	vmov.f32	s15, s0
 800937a:	2b00      	cmp	r3, #0
 800937c:	bf18      	it	ne
 800937e:	eeb0 0a47 	vmovne.f32	s0, s14
 8009382:	e7db      	b.n	800933c <scalbnf+0x5c>
 8009384:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80093b8 <scalbnf+0xd8>
 8009388:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80093bc <scalbnf+0xdc>
 800938c:	eef0 7a40 	vmov.f32	s15, s0
 8009390:	2b00      	cmp	r3, #0
 8009392:	e7f3      	b.n	800937c <scalbnf+0x9c>
 8009394:	3219      	adds	r2, #25
 8009396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800939a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800939e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80093c0 <scalbnf+0xe0>
 80093a2:	ee07 3a10 	vmov	s14, r3
 80093a6:	e7c4      	b.n	8009332 <scalbnf+0x52>
 80093a8:	ffff3cb0 	.word	0xffff3cb0
 80093ac:	4c000000 	.word	0x4c000000
 80093b0:	7149f2ca 	.word	0x7149f2ca
 80093b4:	f149f2ca 	.word	0xf149f2ca
 80093b8:	0da24260 	.word	0x0da24260
 80093bc:	8da24260 	.word	0x8da24260
 80093c0:	33000000 	.word	0x33000000

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr
