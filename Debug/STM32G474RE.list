
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c04  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007ddc  08007ddc  00017ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800822c  0800822c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008234  08008234  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800823c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000070  080082ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080082ac  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000240d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395a  00000000  00000000  00044174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00019b32  00000000  00000000  00047ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00061600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a0  00000000  00000000  00062a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e1a  00000000  00000000  00064100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025283  00000000  00000000  0008df1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115a32  00000000  00000000  000b319d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c8bcf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039d4  00000000  00000000  001c8c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007dc4 	.word	0x08007dc4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08007dc4 	.word	0x08007dc4

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b974 	b.w	8000b84 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468e      	mov	lr, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d14d      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c2:	428a      	cmp	r2, r1
 80008c4:	4694      	mov	ip, r2
 80008c6:	d969      	bls.n	800099c <__udivmoddi4+0xe8>
 80008c8:	fab2 f282 	clz	r2, r2
 80008cc:	b152      	cbz	r2, 80008e4 <__udivmoddi4+0x30>
 80008ce:	fa01 f302 	lsl.w	r3, r1, r2
 80008d2:	f1c2 0120 	rsb	r1, r2, #32
 80008d6:	fa20 f101 	lsr.w	r1, r0, r1
 80008da:	fa0c fc02 	lsl.w	ip, ip, r2
 80008de:	ea41 0e03 	orr.w	lr, r1, r3
 80008e2:	4094      	lsls	r4, r2
 80008e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e8:	0c21      	lsrs	r1, r4, #16
 80008ea:	fbbe f6f8 	udiv	r6, lr, r8
 80008ee:	fa1f f78c 	uxth.w	r7, ip
 80008f2:	fb08 e316 	mls	r3, r8, r6, lr
 80008f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008fa:	fb06 f107 	mul.w	r1, r6, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 30ff 	add.w	r0, r6, #4294967295
 800090a:	f080 811f 	bcs.w	8000b4c <__udivmoddi4+0x298>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 811c 	bls.w	8000b4c <__udivmoddi4+0x298>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a5b      	subs	r3, r3, r1
 800091a:	b2a4      	uxth	r4, r4
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3310 	mls	r3, r8, r0, r3
 8000924:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000928:	fb00 f707 	mul.w	r7, r0, r7
 800092c:	42a7      	cmp	r7, r4
 800092e:	d90a      	bls.n	8000946 <__udivmoddi4+0x92>
 8000930:	eb1c 0404 	adds.w	r4, ip, r4
 8000934:	f100 33ff 	add.w	r3, r0, #4294967295
 8000938:	f080 810a 	bcs.w	8000b50 <__udivmoddi4+0x29c>
 800093c:	42a7      	cmp	r7, r4
 800093e:	f240 8107 	bls.w	8000b50 <__udivmoddi4+0x29c>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094a:	1be4      	subs	r4, r4, r7
 800094c:	2600      	movs	r6, #0
 800094e:	b11d      	cbz	r5, 8000958 <__udivmoddi4+0xa4>
 8000950:	40d4      	lsrs	r4, r2
 8000952:	2300      	movs	r3, #0
 8000954:	e9c5 4300 	strd	r4, r3, [r5]
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d909      	bls.n	8000976 <__udivmoddi4+0xc2>
 8000962:	2d00      	cmp	r5, #0
 8000964:	f000 80ef 	beq.w	8000b46 <__udivmoddi4+0x292>
 8000968:	2600      	movs	r6, #0
 800096a:	e9c5 0100 	strd	r0, r1, [r5]
 800096e:	4630      	mov	r0, r6
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	fab3 f683 	clz	r6, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d14a      	bne.n	8000a14 <__udivmoddi4+0x160>
 800097e:	428b      	cmp	r3, r1
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xd4>
 8000982:	4282      	cmp	r2, r0
 8000984:	f200 80f9 	bhi.w	8000b7a <__udivmoddi4+0x2c6>
 8000988:	1a84      	subs	r4, r0, r2
 800098a:	eb61 0303 	sbc.w	r3, r1, r3
 800098e:	2001      	movs	r0, #1
 8000990:	469e      	mov	lr, r3
 8000992:	2d00      	cmp	r5, #0
 8000994:	d0e0      	beq.n	8000958 <__udivmoddi4+0xa4>
 8000996:	e9c5 4e00 	strd	r4, lr, [r5]
 800099a:	e7dd      	b.n	8000958 <__udivmoddi4+0xa4>
 800099c:	b902      	cbnz	r2, 80009a0 <__udivmoddi4+0xec>
 800099e:	deff      	udf	#255	; 0xff
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	f040 8092 	bne.w	8000ace <__udivmoddi4+0x21a>
 80009aa:	eba1 010c 	sub.w	r1, r1, ip
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2601      	movs	r6, #1
 80009b8:	0c20      	lsrs	r0, r4, #16
 80009ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80009be:	fb07 1113 	mls	r1, r7, r3, r1
 80009c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c6:	fb0e f003 	mul.w	r0, lr, r3
 80009ca:	4288      	cmp	r0, r1
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x12c>
 80009ce:	eb1c 0101 	adds.w	r1, ip, r1
 80009d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x12a>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 80009de:	4643      	mov	r3, r8
 80009e0:	1a09      	subs	r1, r1, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x156>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x154>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2ca>
 8000a08:	4608      	mov	r0, r1
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a12:	e79c      	b.n	800094e <__udivmoddi4+0x9a>
 8000a14:	f1c6 0720 	rsb	r7, r6, #32
 8000a18:	40b3      	lsls	r3, r6
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa20 f407 	lsr.w	r4, r0, r7
 8000a26:	fa01 f306 	lsl.w	r3, r1, r6
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	40f9      	lsrs	r1, r7
 8000a2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a32:	fa00 f306 	lsl.w	r3, r0, r6
 8000a36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a3a:	0c20      	lsrs	r0, r4, #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fb09 1118 	mls	r1, r9, r8, r1
 8000a44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a48:	fb08 f00e 	mul.w	r0, r8, lr
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b8>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2bc>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2bc>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a74:	fb09 1110 	mls	r1, r9, r0, r1
 8000a78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a80:	458e      	cmp	lr, r1
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1e2>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2b4>
 8000a8e:	458e      	cmp	lr, r1
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2b4>
 8000a92:	3802      	subs	r0, #2
 8000a94:	4461      	add	r1, ip
 8000a96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9e:	eba1 010e 	sub.w	r1, r1, lr
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46a6      	mov	lr, r4
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x2a4>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x2a0>
 8000aac:	b15d      	cbz	r5, 8000ac6 <__udivmoddi4+0x212>
 8000aae:	ebb3 0208 	subs.w	r2, r3, r8
 8000ab2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aba:	fa22 f306 	lsr.w	r3, r2, r6
 8000abe:	40f1      	lsrs	r1, r6
 8000ac0:	431f      	orrs	r7, r3
 8000ac2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	40d8      	lsrs	r0, r3
 8000ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad8:	fa21 f303 	lsr.w	r3, r1, r3
 8000adc:	4091      	lsls	r1, r2
 8000ade:	4301      	orrs	r1, r0
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aec:	fb07 3610 	mls	r6, r7, r0, r3
 8000af0:	0c0b      	lsrs	r3, r1, #16
 8000af2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af6:	fb00 f60e 	mul.w	r6, r0, lr
 8000afa:	429e      	cmp	r6, r3
 8000afc:	fa04 f402 	lsl.w	r4, r4, r2
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x260>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b8>
 8000b0c:	429e      	cmp	r6, r3
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b8>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	1b9b      	subs	r3, r3, r6
 8000b16:	b289      	uxth	r1, r1
 8000b18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b24:	fb06 f30e 	mul.w	r3, r6, lr
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x28a>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b3a:	3e02      	subs	r6, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0x104>
 8000b46:	462e      	mov	r6, r5
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e705      	b.n	8000958 <__udivmoddi4+0xa4>
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	e6e3      	b.n	8000918 <__udivmoddi4+0x64>
 8000b50:	4618      	mov	r0, r3
 8000b52:	e6f8      	b.n	8000946 <__udivmoddi4+0x92>
 8000b54:	454b      	cmp	r3, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f8>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b60:	3801      	subs	r0, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f8>
 8000b64:	4646      	mov	r6, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x28a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1e2>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b8>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4461      	add	r1, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x12c>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e709      	b.n	8000992 <__udivmoddi4+0xde>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x156>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <cfPhaseLockedLoop>:

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000b88:	ee20 1a01 	vmul.f32	s2, s0, s2
 8000b8c:	edd0 7a00 	vldr	s15, [r0]
 8000b90:	ee31 1a27 	vadd.f32	s2, s2, s15
 8000b94:	ed80 1a00 	vstr	s2, [r0]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000b98:	ee20 0a20 	vmul.f32	s0, s0, s1

	return ElectAngVeloEstimate;
}
 8000b9c:	ee31 0a00 	vadd.f32	s0, s2, s0
 8000ba0:	4770      	bx	lr

08000ba2 <gfDivideAvoidZero>:
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
	float result;
	if ( den >= 0 && den < threshold )
 8000ba2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000baa:	db04      	blt.n	8000bb6 <gfDivideAvoidZero+0x14>
 8000bac:	eef4 0ac1 	vcmpe.f32	s1, s2
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	d411      	bmi.n	8000bda <gfDivideAvoidZero+0x38>
		den = threshold;
	else if( den < 0 && den > -threshold)
 8000bb6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	d402      	bmi.n	8000bc6 <gfDivideAvoidZero+0x24>
		den = -threshold;

	result = num / den;
	return result;
}
 8000bc0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8000bc4:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 8000bc6:	eeb1 1a41 	vneg.f32	s2, s2
 8000bca:	eeb4 1ae0 	vcmpe.f32	s2, s1
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	d5f5      	bpl.n	8000bc0 <gfDivideAvoidZero+0x1e>
		den = -threshold;
 8000bd4:	eef0 0a41 	vmov.f32	s1, s2
 8000bd8:	e7f2      	b.n	8000bc0 <gfDivideAvoidZero+0x1e>
		den = threshold;
 8000bda:	eef0 0a41 	vmov.f32	s1, s2
 8000bde:	e7ef      	b.n	8000bc0 <gfDivideAvoidZero+0x1e>

08000be0 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000be0:	b508      	push	{r3, lr}
	theta = fmodf(theta, TWOPI);
 8000be2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000c1c <gfWrapTheta+0x3c>
 8000be6:	f006 f99f 	bl	8006f28 <fmodf>
	if( theta > PI)
 8000bea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000c20 <gfWrapTheta+0x40>
 8000bee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf6:	dd04      	ble.n	8000c02 <gfWrapTheta+0x22>
		theta -= TWOPI;
 8000bf8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000c1c <gfWrapTheta+0x3c>
 8000bfc:	ee30 0a67 	vsub.f32	s0, s0, s15
	else if( theta < -PI)
		theta += TWOPI;

	return theta;
}
 8000c00:	bd08      	pop	{r3, pc}
	else if( theta < -PI)
 8000c02:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000c24 <gfWrapTheta+0x44>
 8000c06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	d5f7      	bpl.n	8000c00 <gfWrapTheta+0x20>
		theta += TWOPI;
 8000c10:	eddf 7a02 	vldr	s15, [pc, #8]	; 8000c1c <gfWrapTheta+0x3c>
 8000c14:	ee30 0a27 	vadd.f32	s0, s0, s15
	return theta;
 8000c18:	e7f2      	b.n	8000c00 <gfWrapTheta+0x20>
 8000c1a:	bf00      	nop
 8000c1c:	40c90fdb 	.word	0x40c90fdb
 8000c20:	40490fdb 	.word	0x40490fdb
 8000c24:	c0490fdb 	.word	0xc0490fdb

08000c28 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000c28:	eef0 7a40 	vmov.f32	s15, s0
 8000c2c:	eeb0 0a41 	vmov.f32	s0, s2
	if(input > Upper) input = Upper;
 8000c30:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c38:	dc01      	bgt.n	8000c3e <gUpperLowerLimit+0x16>
 8000c3a:	eef0 0a67 	vmov.f32	s1, s15
	if(input < Lower) input = Lower;
 8000c3e:	eef4 0ac0 	vcmpe.f32	s1, s0
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d401      	bmi.n	8000c4c <gUpperLowerLimit+0x24>
 8000c48:	eeb0 0a60 	vmov.f32	s0, s1
	return input;
}
 8000c4c:	4770      	bx	lr

08000c4e <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	outputMode[0] = OUTPUTMODE_OPEN;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	700b      	strb	r3, [r1, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 8000c52:	704b      	strb	r3, [r1, #1]
	outputMode[2] = OUTPUTMODE_OPEN;
 8000c54:	708b      	strb	r3, [r1, #2]
	Duty[0] = 0.0f;
 8000c56:	2300      	movs	r3, #0
 8000c58:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 8000c5a:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 8000c5c:	6083      	str	r3, [r0, #8]
}
 8000c5e:	4770      	bx	lr

08000c60 <gLPF>:
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 8000c60:	ee20 1a81 	vmul.f32	s2, s1, s2
	yn_1 = *y;
 8000c64:	ed90 7a00 	vldr	s14, [r0]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000c68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c6c:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8000c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c74:	ee21 1a00 	vmul.f32	s2, s2, s0
 8000c78:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000c7c:	edc0 7a00 	vstr	s15, [r0]
}
 8000c80:	4770      	bx	lr

08000c82 <gRateLimit>:
	// time constant tau = 1/wc
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 8000c82:	ee60 0a81 	vmul.f32	s1, s1, s2
	yn_1 = *y;
 8000c86:	edd0 7a00 	vldr	s15, [r0]

	if( r > yn_1 )
 8000c8a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	d504      	bpl.n	8000c9e <gRateLimit+0x1c>
		ytmp = yn_1 + dy;
 8000c94:	ee30 7aa7 	vadd.f32	s14, s1, s15
	else if( r < yn_1 )
		ytmp = yn_1 - dy;

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 8000c98:	ed80 7a00 	vstr	s14, [r0]

}
 8000c9c:	4770      	bx	lr
	else if( r < yn_1 )
 8000c9e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	ddf7      	ble.n	8000c98 <gRateLimit+0x16>
		ytmp = yn_1 - dy;
 8000ca8:	ee37 7ae0 	vsub.f32	s14, s15, s1
 8000cac:	e7f4      	b.n	8000c98 <gRateLimit+0x16>
	...

08000cb0 <slctPosModeForSensorless>:
	}
}

static void slctPosModeForSensorless(float electAngVelo, uint8_t* posMode){

	if(*posMode != POSMODE_SENSORLESS){
 8000cb0:	7803      	ldrb	r3, [r0, #0]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d00c      	beq.n	8000cd0 <slctPosModeForSensorless+0x20>
		if (electAngVelo > ELECTANGVELO_FREERUN2SENSORLESS)
 8000cb6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000cec <slctPosModeForSensorless+0x3c>
 8000cba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	dd02      	ble.n	8000cca <slctPosModeForSensorless+0x1a>
			*posMode = POSMODE_SENSORLESS;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	7003      	strb	r3, [r0, #0]
 8000cc8:	4770      	bx	lr
		else
			*posMode = POSMODE_FREERUN;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	7003      	strb	r3, [r0, #0]
 8000cce:	4770      	bx	lr
	}
	else if(*posMode == POSMODE_SENSORLESS){
		if (electAngVelo < ELECTANGVELO_SENSORLESS2FREERUN)
 8000cd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000cf0 <slctPosModeForSensorless+0x40>
 8000cd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	d502      	bpl.n	8000ce4 <slctPosModeForSensorless+0x34>
			*posMode = POSMODE_FREERUN;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	7003      	strb	r3, [r0, #0]
 8000ce2:	4770      	bx	lr
		else
			*posMode = POSMODE_SENSORLESS;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	7003      	strb	r3, [r0, #0]
	}
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	43c80000 	.word	0x43c80000
 8000cf0:	43960000 	.word	0x43960000

08000cf4 <slctDrvModeForSensorless>:

static void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode){

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000cf4:	7803      	ldrb	r3, [r0, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d00c      	beq.n	8000d14 <slctDrvModeForSensorless+0x20>
		if (electAngVelo > ELECTANGVELO_OPENLOOP2VECTORCONTROL)
 8000cfa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000d30 <slctDrvModeForSensorless+0x3c>
 8000cfe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	dd02      	ble.n	8000d0e <slctDrvModeForSensorless+0x1a>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	7003      	strb	r3, [r0, #0]
 8000d0c:	4770      	bx	lr
		else
			*drvMode = DRVMODE_OPENLOOP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	7003      	strb	r3, [r0, #0]
 8000d12:	4770      	bx	lr
	}
	else if(*drvMode == DRVMODE_VECTORCONTROL){
		if (electAngVelo < ELECTANGVELO_VECTORCONTROL2OPENLOOP)
 8000d14:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000d34 <slctDrvModeForSensorless+0x40>
 8000d18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	d502      	bpl.n	8000d28 <slctDrvModeForSensorless+0x34>
			*drvMode = DRVMODE_OPENLOOP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	7003      	strb	r3, [r0, #0]
 8000d26:	4770      	bx	lr
		else
			*drvMode = DRVMODE_VECTORCONTROL;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	7003      	strb	r3, [r0, #0]
	}
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	44160000 	.word	0x44160000
 8000d34:	43fa0000 	.word	0x43fa0000

08000d38 <slctElectAngleFromPosMode>:

static void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b093      	sub	sp, #76	; 0x4c
 8000d3c:	460c      	mov	r4, r1
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 8000d3e:	2804      	cmp	r0, #4
 8000d40:	d870      	bhi.n	8000e24 <slctElectAngleFromPosMode+0xec>
 8000d42:	e8df f000 	tbb	[pc, r0]
 8000d46:	0803      	.short	0x0803
 8000d48:	4234      	.short	0x4234
 8000d4a:	50          	.byte	0x50
 8000d4b:	00          	.byte	0x00
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	600b      	str	r3, [r1, #0]
		sensData->electAngVelo = 0.0f;
 8000d50:	604b      	str	r3, [r1, #4]
	default:
		sensData->electAngle = 0.0f;
		sensData->electAngVelo = 0.0f;
		break;
	}
}
 8000d52:	b013      	add	sp, #76	; 0x4c
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000d56:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <slctElectAngleFromPosMode+0xf4>)
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	edc1 7a01 	vstr	s15, [r1, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000d60:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000e30 <slctElectAngleFromPosMode+0xf8>
 8000d64:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <slctElectAngleFromPosMode+0xfc>)
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d72:	ed83 0a00 	vstr	s0, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 8000d76:	f7ff ff33 	bl	8000be0 <gfWrapTheta>
 8000d7a:	ed84 0a00 	vstr	s0, [r4]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000d7e:	4e2e      	ldr	r6, [pc, #184]	; (8000e38 <slctElectAngleFromPosMode+0x100>)
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <slctElectAngleFromPosMode+0x104>)
 8000d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d84:	ac04      	add	r4, sp, #16
 8000d86:	4d2e      	ldr	r5, [pc, #184]	; (8000e40 <slctElectAngleFromPosMode+0x108>)
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d98:	f106 030c 	add.w	r3, r6, #12
 8000d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000da2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 ffa8 	bl	8001cfc <calcElectAngleEstimate>
		break;
 8000dac:	e7d1      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000dae:	ab10      	add	r3, sp, #64	; 0x40
 8000db0:	aa11      	add	r2, sp, #68	; 0x44
 8000db2:	2100      	movs	r1, #0
 8000db4:	4823      	ldr	r0, [pc, #140]	; (8000e44 <slctElectAngleFromPosMode+0x10c>)
 8000db6:	ed90 0a00 	vldr	s0, [r0]
 8000dba:	4823      	ldr	r0, [pc, #140]	; (8000e48 <slctElectAngleFromPosMode+0x110>)
 8000dbc:	f000 fb02 	bl	80013c4 <calcElectAngle>
		sensData->electAngle = electAngle;
 8000dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000dc2:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = electAngVelo;
 8000dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000dc6:	6063      	str	r3, [r4, #4]
		break;
 8000dc8:	e7c3      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000dca:	ab10      	add	r3, sp, #64	; 0x40
 8000dcc:	aa11      	add	r2, sp, #68	; 0x44
 8000dce:	2101      	movs	r1, #1
 8000dd0:	481c      	ldr	r0, [pc, #112]	; (8000e44 <slctElectAngleFromPosMode+0x10c>)
 8000dd2:	ed90 0a00 	vldr	s0, [r0]
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <slctElectAngleFromPosMode+0x110>)
 8000dd8:	f000 faf4 	bl	80013c4 <calcElectAngle>
		sensData->electAngle = electAngle;
 8000ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000dde:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = electAngVelo;
 8000de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000de2:	6063      	str	r3, [r4, #4]
		break;
 8000de4:	e7b5      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000de6:	4e14      	ldr	r6, [pc, #80]	; (8000e38 <slctElectAngleFromPosMode+0x100>)
 8000de8:	4f14      	ldr	r7, [pc, #80]	; (8000e3c <slctElectAngleFromPosMode+0x104>)
 8000dea:	970f      	str	r7, [sp, #60]	; 0x3c
 8000dec:	f10d 0c10 	add.w	ip, sp, #16
 8000df0:	4d13      	ldr	r5, [pc, #76]	; (8000e40 <slctElectAngleFromPosMode+0x108>)
 8000df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8000e06:	f106 030c 	add.w	r3, r6, #12
 8000e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000e10:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 ff71 	bl	8001cfc <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6063      	str	r3, [r4, #4]
		break;
 8000e22:	e796      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
		sensData->electAngle = 0.0f;
 8000e24:	2300      	movs	r3, #0
 8000e26:	600b      	str	r3, [r1, #0]
		sensData->electAngVelo = 0.0f;
 8000e28:	604b      	str	r3, [r1, #4]
}
 8000e2a:	e792      	b.n	8000d52 <slctElectAngleFromPosMode+0x1a>
 8000e2c:	200000bc 	.word	0x200000bc
 8000e30:	4684d000 	.word	0x4684d000
 8000e34:	200000d0 	.word	0x200000d0
 8000e38:	200000e0 	.word	0x200000e0
 8000e3c:	200000c0 	.word	0x200000c0
 8000e40:	200000fc 	.word	0x200000fc
 8000e44:	20000094 	.word	0x20000094
 8000e48:	20000098 	.word	0x20000098
 8000e4c:	00000000 	.word	0x00000000

08000e50 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000e50:	b084      	sub	sp, #16
 8000e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	4604      	mov	r4, r0
 8000e5a:	a811      	add	r0, sp, #68	; 0x44
 8000e5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e60:	9d18      	ldr	r5, [sp, #96]	; 0x60
	float VamRef;
	float ModRef = 1.13;
	float ModErr;

	//Idq_ref[0] = 0.0f;
	ModErr = ModRef - vectorControlData->Mod;
 8000e62:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
	sId_ref_i = sId_ref_i + 0.0003 * ModErr;
 8000e66:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000f80 <slctCntlFromDrvMode+0x130>
 8000e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6e:	ee17 0a90 	vmov	r0, s15
 8000e72:	f7ff fc5f 	bl	8000734 <__aeabi_f2d>
 8000e76:	a340      	add	r3, pc, #256	; (adr r3, 8000f78 <slctCntlFromDrvMode+0x128>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff f9cc 	bl	8000218 <__aeabi_dmul>
 8000e80:	4606      	mov	r6, r0
 8000e82:	460f      	mov	r7, r1
 8000e84:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8000f84 <slctCntlFromDrvMode+0x134>
 8000e88:	f8d8 0000 	ldr.w	r0, [r8]
 8000e8c:	f7ff fc52 	bl	8000734 <__aeabi_f2d>
 8000e90:	4632      	mov	r2, r6
 8000e92:	463b      	mov	r3, r7
 8000e94:	f7ff faf0 	bl	8000478 <__adddf3>
 8000e98:	f7ff fca4 	bl	80007e4 <__aeabi_d2f>
 8000e9c:	ee07 0a90 	vmov	s15, r0
 8000ea0:	f8c8 0000 	str.w	r0, [r8]

	if( sId_ref_i > 0)
 8000ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	dd02      	ble.n	8000eb4 <slctCntlFromDrvMode+0x64>
			sId_ref_i = 0;
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f8c8 2000 	str.w	r2, [r8]
	if( sId_ref_i < -1.0f)
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <slctCntlFromDrvMode+0x134>)
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8000ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	d419      	bmi.n	8000efc <slctCntlFromDrvMode+0xac>
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <slctCntlFromDrvMode+0x134>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	9308      	str	r3, [sp, #32]

	Idq_ref[1] = IQREFMAX * gVolume * gButton1;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <slctCntlFromDrvMode+0x138>)
 8000ed0:	ed93 7a00 	vldr	s14, [r3]
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <slctCntlFromDrvMode+0x13c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

	switch(drvMode){
 8000ee8:	2c02      	cmp	r4, #2
 8000eea:	d013      	beq.n	8000f14 <slctCntlFromDrvMode+0xc4>
 8000eec:	2c04      	cmp	r4, #4
 8000eee:	d031      	beq.n	8000f54 <slctCntlFromDrvMode+0x104>
 8000ef0:	b13c      	cbz	r4, 8000f02 <slctCntlFromDrvMode+0xb2>
			break;
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(Idq_ref, sensData, vectorControlData, Duty, outputMode);
			break;
		default :
			gOffDuty(Duty, outputMode);
 8000ef2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000ef4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8000ef6:	f7ff feaa 	bl	8000c4e <gOffDuty>
	}
}
 8000efa:	e006      	b.n	8000f0a <slctCntlFromDrvMode+0xba>
				sId_ref_i = -1.0f;
 8000efc:	edc3 7a00 	vstr	s15, [r3]
 8000f00:	e7e2      	b.n	8000ec8 <slctCntlFromDrvMode+0x78>
			gOffDuty(Duty, outputMode);
 8000f02:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000f04:	9819      	ldr	r0, [sp, #100]	; 0x64
 8000f06:	f7ff fea2 	bl	8000c4e <gOffDuty>
}
 8000f0a:	b00a      	add	sp, #40	; 0x28
 8000f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f10:	b004      	add	sp, #16
 8000f12:	4770      	bx	lr
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * ( 0.3f + 0.7f * gVolume);//sElectAngVeloRefRateLimit * 0.001 );
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <slctCntlFromDrvMode+0x140>)
 8000f16:	ed93 0a05 	vldr	s0, [r3, #20]
 8000f1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8000f94 <slctCntlFromDrvMode+0x144>
 8000f1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000f22:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8000f98 <slctCntlFromDrvMode+0x148>
 8000f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f2a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000f9c <slctCntlFromDrvMode+0x14c>
 8000f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 8000f32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000f34:	9305      	str	r3, [sp, #20]
 8000f36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	9503      	str	r5, [sp, #12]
 8000f3c:	ab15      	add	r3, sp, #84	; 0x54
 8000f3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8000f46:	ab11      	add	r3, sp, #68	; 0x44
 8000f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f4a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000f4e:	f000 fd33 	bl	80019b8 <OpenLoopTasks>
			break;
 8000f52:	e7da      	b.n	8000f0a <slctCntlFromDrvMode+0xba>
			VectorControlTasks(Idq_ref, sensData, vectorControlData, Duty, outputMode);
 8000f54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000f56:	9306      	str	r3, [sp, #24]
 8000f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000f5a:	9305      	str	r3, [sp, #20]
 8000f5c:	9504      	str	r5, [sp, #16]
 8000f5e:	ab14      	add	r3, sp, #80	; 0x50
 8000f60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f62:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000f66:	ab11      	add	r3, sp, #68	; 0x44
 8000f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f6a:	a808      	add	r0, sp, #32
 8000f6c:	f000 fb2e 	bl	80015cc <VectorControlTasks>
			break;
 8000f70:	e7cb      	b.n	8000f0a <slctCntlFromDrvMode+0xba>
 8000f72:	bf00      	nop
 8000f74:	f3af 8000 	nop.w
 8000f78:	30553261 	.word	0x30553261
 8000f7c:	3f33a92a 	.word	0x3f33a92a
 8000f80:	3f90a3d7 	.word	0x3f90a3d7
 8000f84:	200000d4 	.word	0x200000d4
 8000f88:	200000a4 	.word	0x200000a4
 8000f8c:	20000090 	.word	0x20000090
 8000f90:	200000e0 	.word	0x200000e0
 8000f94:	3f1cc471 	.word	0x3f1cc471
 8000f98:	3f333333 	.word	0x3f333333
 8000f9c:	3e99999a 	.word	0x3e99999a

08000fa0 <Sequence>:
void Sequence(void){
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	b088      	sub	sp, #32
	gButton1 = readButton1();
 8000fa4:	f000 f892 	bl	80010cc <readButton1>
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <Sequence+0xec>)
 8000faa:	7018      	strb	r0, [r3, #0]
	gVolume = readVolume();
 8000fac:	f000 f8ce 	bl	800114c <readVolume>
 8000fb0:	4b37      	ldr	r3, [pc, #220]	; (8001090 <Sequence+0xf0>)
 8000fb2:	ed83 0a00 	vstr	s0, [r3]
	readHallSignal(gHall);
 8000fb6:	4837      	ldr	r0, [pc, #220]	; (8001094 <Sequence+0xf4>)
 8000fb8:	f000 f934 	bl	8001224 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 8000fbc:	4836      	ldr	r0, [pc, #216]	; (8001098 <Sequence+0xf8>)
 8000fbe:	f000 f949 	bl	8001254 <readElectFreqFromHallSignal>
	readCurrent(gIuvw_AD, sSensData.Iuvw);
 8000fc2:	4c36      	ldr	r4, [pc, #216]	; (800109c <Sequence+0xfc>)
 8000fc4:	f104 0108 	add.w	r1, r4, #8
 8000fc8:	4835      	ldr	r0, [pc, #212]	; (80010a0 <Sequence+0x100>)
 8000fca:	f000 f8eb 	bl	80011a4 <readCurrent>
	sSensData.Vdc = readVdc();
 8000fce:	f000 f8d9 	bl	8001184 <readVdc>
 8000fd2:	eef0 0a40 	vmov.f32	s1, s0
 8000fd6:	ed84 0a05 	vstr	s0, [r4, #20]
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc, 1.0f);;
 8000fda:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000fde:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000fe2:	f7ff fdde 	bl	8000ba2 <gfDivideAvoidZero>
 8000fe6:	ed84 0a06 	vstr	s0, [r4, #24]
	if(sInitCnt < 500){
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <Sequence+0x104>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff2:	d22a      	bcs.n	800104a <Sequence+0xaa>
		sInitCnt++;
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <Sequence+0x104>)
 8000ff8:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <Sequence+0x108>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <Sequence+0x10c>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <Sequence+0x110>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
	slctElectAngleFromPosMode(sPosMode, &sSensData);
 800100c:	4c23      	ldr	r4, [pc, #140]	; (800109c <Sequence+0xfc>)
 800100e:	4621      	mov	r1, r4
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <Sequence+0x108>)
 8001012:	7818      	ldrb	r0, [r3, #0]
 8001014:	f7ff fe90 	bl	8000d38 <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 8001018:	4e26      	ldr	r6, [pc, #152]	; (80010b4 <Sequence+0x114>)
 800101a:	9606      	str	r6, [sp, #24]
 800101c:	4d26      	ldr	r5, [pc, #152]	; (80010b8 <Sequence+0x118>)
 800101e:	9505      	str	r5, [sp, #20]
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <Sequence+0x11c>)
 8001022:	9304      	str	r3, [sp, #16]
 8001024:	f104 030c 	add.w	r3, r4, #12
 8001028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800102e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <Sequence+0x10c>)
 8001034:	7800      	ldrb	r0, [r0, #0]
 8001036:	f7ff ff0b 	bl	8000e50 <slctCntlFromDrvMode>
	writeOutputMode(sOutputMode);
 800103a:	4630      	mov	r0, r6
 800103c:	f000 f944 	bl	80012c8 <writeOutputMode>
	writeDuty(sDuty);
 8001040:	4628      	mov	r0, r5
 8001042:	f000 f977 	bl	8001334 <writeDuty>
}
 8001046:	b008      	add	sp, #32
 8001048:	bd70      	pop	{r4, r5, r6, pc}
		if(gButton1 == 1)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <Sequence+0xec>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d00e      	beq.n	8001070 <Sequence+0xd0>
			sElectAngVeloRefRateLimit = 0;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <Sequence+0x110>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
		slctPosModeForSensorless(sSensData.electAngVelo, &sPosMode);
 8001058:	4c10      	ldr	r4, [pc, #64]	; (800109c <Sequence+0xfc>)
 800105a:	4813      	ldr	r0, [pc, #76]	; (80010a8 <Sequence+0x108>)
 800105c:	ed94 0a01 	vldr	s0, [r4, #4]
 8001060:	f7ff fe26 	bl	8000cb0 <slctPosModeForSensorless>
		slctDrvModeForSensorless(sSensData.electAngVelo, &sDrvMode);
 8001064:	4811      	ldr	r0, [pc, #68]	; (80010ac <Sequence+0x10c>)
 8001066:	ed94 0a01 	vldr	s0, [r4, #4]
 800106a:	f7ff fe43 	bl	8000cf4 <slctDrvModeForSensorless>
 800106e:	e7cd      	b.n	800100c <Sequence+0x6c>
			sElectAngVeloRef = 1000.0f;
 8001070:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80010c0 <Sequence+0x120>
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <Sequence+0x124>)
 8001076:	ed83 0a00 	vstr	s0, [r3]
			gRateLimit(sElectAngVeloRef, 1000.0f, CARRIERCYCLE, &sElectAngVeloRefRateLimit);
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <Sequence+0x110>)
 800107c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80010c8 <Sequence+0x128>
 8001080:	eef0 0a40 	vmov.f32	s1, s0
 8001084:	f7ff fdfd 	bl	8000c82 <gRateLimit>
 8001088:	e7e6      	b.n	8001058 <Sequence+0xb8>
 800108a:	bf00      	nop
 800108c:	20000090 	.word	0x20000090
 8001090:	200000a4 	.word	0x200000a4
 8001094:	20000098 	.word	0x20000098
 8001098:	20000094 	.word	0x20000094
 800109c:	200000e0 	.word	0x200000e0
 80010a0:	2000009c 	.word	0x2000009c
 80010a4:	200000d8 	.word	0x200000d8
 80010a8:	200000df 	.word	0x200000df
 80010ac:	200000a8 	.word	0x200000a8
 80010b0:	200000bc 	.word	0x200000bc
 80010b4:	200000dc 	.word	0x200000dc
 80010b8:	200000ac 	.word	0x200000ac
 80010bc:	200000fc 	.word	0x200000fc
 80010c0:	447a0000 	.word	0x447a0000
 80010c4:	200000b8 	.word	0x200000b8
 80010c8:	3876b949 	.word	0x3876b949

080010cc <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 80010cc:	b500      	push	{lr}
 80010ce:	b083      	sub	sp, #12
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80010d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <readButton1+0x1c>)
 80010d6:	f003 fc7d 	bl	80049d4 <HAL_GPIO_ReadPin>
 80010da:	f88d 0007 	strb.w	r0, [sp, #7]
	return B1;
 80010de:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010e2:	b003      	add	sp, #12
 80010e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80010e8:	48000800 	.word	0x48000800

080010ec <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 80010ec:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 80010ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	9301      	str	r3, [sp, #4]

	return inputCaptureCnt;
 80010f6:	9801      	ldr	r0, [sp, #4]
}
 80010f8:	b002      	add	sp, #8
 80010fa:	4770      	bx	lr

080010fc <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 80010fc:	ee07 0a90 	vmov	s15, r0
 8001100:	ee00 1a10 	vmov	s0, r1
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8001104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 800110a:	1c53      	adds	r3, r2, #1
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	ee07 3a10 	vmov	s14, r3


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8001112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001116:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800111a:	ee77 7ac0 	vsub.f32	s15, s15, s0

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 800111e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001122:	eeb1 7a47 	vneg.f32	s14, s14
 8001126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd05      	ble.n	800113c <readTimeInterval+0x40>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8001130:	ee07 2a10 	vmov	s14, r2
 8001134:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001138:	ee77 7a87 	vadd.f32	s15, s15, s14

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}
 800113c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001148 <readTimeInterval+0x4c>
 8001140:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	4d221fe8 	.word	0x4d221fe8

0800114c <readVolume>:
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <readVolume+0x2c>)
 800114e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001152:	3b63      	subs	r3, #99	; 0x63
 8001154:	ee00 3a10 	vmov	s0, r3
 8001158:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800115c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800117c <readVolume+0x30>
 8001160:	ee20 0a27 	vmul.f32	s0, s0, s15
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 8001164:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d400      	bmi.n	8001170 <readVolume+0x24>
	return Volume;
}
 800116e:	4770      	bx	lr
	if( Volume < 0) Volume = 0;
 8001170:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001180 <readVolume+0x34>
	return Volume;
 8001174:	e7fb      	b.n	800116e <readVolume+0x22>
 8001176:	bf00      	nop
 8001178:	2000008c 	.word	0x2000008c
 800117c:	398007f8 	.word	0x398007f8
 8001180:	00000000 	.word	0x00000000

08001184 <readVdc>:

float readVdc(void){
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <readVdc+0x18>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	ee07 3a90 	vmov	s15, r3
	Vdc = Vdc_ad * AD2VOLTAGE;
 800118c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return Vdc;
}
 8001190:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80011a0 <readVdc+0x1c>
 8001194:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	3c7cd035 	.word	0x3c7cd035

080011a4 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 80011a4:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 80011a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 80011b2:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 80011b6:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 80011b8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80011bc:	8082      	strh	r2, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001214 <readCurrent+0x70>
 80011ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011ce:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001218 <readCurrent+0x74>
 80011d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011d6:	edc1 7a00 	vstr	s15, [r1]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 80011da:	8843      	ldrh	r3, [r0, #2]
 80011dc:	ee07 3a10 	vmov	s14, r3
 80011e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011e4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800121c <readCurrent+0x78>
 80011e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80011f0:	ed81 7a01 	vstr	s14, [r1, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 80011f4:	8883      	ldrh	r3, [r0, #4]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001220 <readCurrent+0x7c>
 8001202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001206:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800120a:	edc1 7a02 	vstr	s15, [r1, #8]
}
 800120e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	44ee0000 	.word	0x44ee0000
 8001218:	bafdbcc5 	.word	0xbafdbcc5
 800121c:	44efe000 	.word	0x44efe000
 8001220:	44ef8000 	.word	0x44ef8000

08001224 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8001224:	b538      	push	{r3, r4, r5, lr}
 8001226:	4604      	mov	r4, r0
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8001228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f003 fbd0 	bl	80049d4 <HAL_GPIO_ReadPin>
 8001234:	7020      	strb	r0, [r4, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8001236:	4d06      	ldr	r5, [pc, #24]	; (8001250 <readHallSignal+0x2c>)
 8001238:	2108      	movs	r1, #8
 800123a:	4628      	mov	r0, r5
 800123c:	f003 fbca 	bl	80049d4 <HAL_GPIO_ReadPin>
 8001240:	7060      	strb	r0, [r4, #1]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8001242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001246:	4628      	mov	r0, r5
 8001248:	f003 fbc4 	bl	80049d4 <HAL_GPIO_ReadPin>
 800124c:	70a0      	strb	r0, [r4, #2]
}
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	48000400 	.word	0x48000400

08001254 <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8001254:	b570      	push	{r4, r5, r6, lr}
 8001256:	4606      	mov	r6, r0
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 8001258:	4c16      	ldr	r4, [pc, #88]	; (80012b4 <readElectFreqFromHallSignal+0x60>)
 800125a:	4d17      	ldr	r5, [pc, #92]	; (80012b8 <readElectFreqFromHallSignal+0x64>)
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	6023      	str	r3, [r4, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 8001260:	f7ff ff44 	bl	80010ec <readInputCaptureCnt>
 8001264:	6028      	str	r0, [r5, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 8001266:	6821      	ldr	r1, [r4, #0]
 8001268:	4288      	cmp	r0, r1
 800126a:	d108      	bne.n	800127e <readElectFreqFromHallSignal+0x2a>
		if( timeInterval > 0.0001f)
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);

		sNoInputCaptureCnt = 0;
	}
	else if(sNoInputCaptureCnt < 2000)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <readElectFreqFromHallSignal+0x68>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001274:	d21b      	bcs.n	80012ae <readElectFreqFromHallSignal+0x5a>
		sNoInputCaptureCnt ++;
 8001276:	3301      	adds	r3, #1
 8001278:	4a10      	ldr	r2, [pc, #64]	; (80012bc <readElectFreqFromHallSignal+0x68>)
 800127a:	8013      	strh	r3, [r2, #0]
 800127c:	e00b      	b.n	8001296 <readElectFreqFromHallSignal+0x42>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 800127e:	f7ff ff3d 	bl	80010fc <readTimeInterval>
		if( timeInterval > 0.0001f)
 8001282:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80012c0 <readElectFreqFromHallSignal+0x6c>
 8001286:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	dc03      	bgt.n	8001298 <readElectFreqFromHallSignal+0x44>
		sNoInputCaptureCnt = 0;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <readElectFreqFromHallSignal+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	801a      	strh	r2, [r3, #0]
	else
		*electFreq = 0;
}
 8001296:	bd70      	pop	{r4, r5, r6, pc}
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8001298:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80012c4 <readElectFreqFromHallSignal+0x70>
 800129c:	eef0 0a40 	vmov.f32	s1, s0
 80012a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012a4:	f7ff fc7d 	bl	8000ba2 <gfDivideAvoidZero>
 80012a8:	ed86 0a00 	vstr	s0, [r6]
 80012ac:	e7f0      	b.n	8001290 <readElectFreqFromHallSignal+0x3c>
		*electFreq = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	6033      	str	r3, [r6, #0]
}
 80012b2:	e7f0      	b.n	8001296 <readElectFreqFromHallSignal+0x42>
 80012b4:	2000012c 	.word	0x2000012c
 80012b8:	20000128 	.word	0x20000128
 80012bc:	20000130 	.word	0x20000130
 80012c0:	38d1b717 	.word	0x38d1b717
 80012c4:	31ca1db9 	.word	0x31ca1db9

080012c8 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 80012c8:	b510      	push	{r4, lr}
 80012ca:	4604      	mov	r4, r0

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 80012cc:	f990 3000 	ldrsb.w	r3, [r0]
 80012d0:	b9c3      	cbnz	r3, 8001304 <writeOutputMode+0x3c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d8:	4815      	ldr	r0, [pc, #84]	; (8001330 <writeOutputMode+0x68>)
 80012da:	f003 fb82 	bl	80049e2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);

	if(outputMode[1] == OUTPUTMODE_OPEN )
 80012de:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80012e2:	b9b3      	cbnz	r3, 8001312 <writeOutputMode+0x4a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <writeOutputMode+0x68>)
 80012ec:	f003 fb79 	bl	80049e2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);

	if(outputMode[2] == OUTPUTMODE_OPEN )
 80012f0:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80012f4:	b9a3      	cbnz	r3, 8001320 <writeOutputMode+0x58>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <writeOutputMode+0x68>)
 80012fe:	f003 fb70 	bl	80049e2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8001302:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <writeOutputMode+0x68>)
 800130c:	f003 fb69 	bl	80049e2 <HAL_GPIO_WritePin>
 8001310:	e7e5      	b.n	80012de <writeOutputMode+0x16>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <writeOutputMode+0x68>)
 800131a:	f003 fb62 	bl	80049e2 <HAL_GPIO_WritePin>
 800131e:	e7e7      	b.n	80012f0 <writeOutputMode+0x28>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	4802      	ldr	r0, [pc, #8]	; (8001330 <writeOutputMode+0x68>)
 8001328:	f003 fb5b 	bl	80049e2 <HAL_GPIO_WritePin>
}
 800132c:	e7e9      	b.n	8001302 <writeOutputMode+0x3a>
 800132e:	bf00      	nop
 8001330:	48000800 	.word	0x48000800

08001334 <writeDuty>:

void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8001334:	ed90 7a00 	vldr	s14, [r0]
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <writeDuty+0x4c>)
 800133a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 800134e:	ed90 7a01 	vldr	s14, [r0, #4]
 8001352:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001362:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8001366:	ed90 7a02 	vldr	s14, [r0, #8]
 800136a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800136e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800137a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800137e:	4770      	bx	lr
 8001380:	40012c00 	.word	0x40012c00

08001384 <calcVoltageMode>:

	uint8_t hallInput;
	uint8_t voltageMode = 0;

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8001384:	7883      	ldrb	r3, [r0, #2]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	b2db      	uxtb	r3, r3
 800138a:	7842      	ldrb	r2, [r0, #1]
 800138c:	0052      	lsls	r2, r2, #1
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	7800      	ldrb	r0, [r0, #0]
 8001396:	4418      	add	r0, r3
 8001398:	b2c0      	uxtb	r0, r0

	// Decode digital signal to voltage mode
	switch(hallInput){
 800139a:	1e43      	subs	r3, r0, #1
 800139c:	2b05      	cmp	r3, #5
 800139e:	d80c      	bhi.n	80013ba <calcVoltageMode+0x36>
 80013a0:	e8df f003 	tbb	[pc, r3]
 80013a4:	050e0d09 	.word	0x050e0d09
 80013a8:	0307      	.short	0x0307
		break;
	  case 2:
		voltageMode = 4;
		break;
	  case 6:
		voltageMode = 5;
 80013aa:	2005      	movs	r0, #5
		break;
 80013ac:	4770      	bx	lr
	  case 4:
		voltageMode = 6;
 80013ae:	2006      	movs	r0, #6
		break;
 80013b0:	4770      	bx	lr
	  case 5:
		voltageMode = 1;
 80013b2:	2001      	movs	r0, #1
		break;
 80013b4:	4770      	bx	lr
	  case 1:
		voltageMode = 2;
 80013b6:	2002      	movs	r0, #2
		break;
 80013b8:	4770      	bx	lr
	  default :
		voltageMode = 0;
 80013ba:	2000      	movs	r0, #0
	  break;
 80013bc:	4770      	bx	lr
		voltageMode = 4;
 80013be:	2004      	movs	r0, #4
	}
	return voltageMode;
}
 80013c0:	4770      	bx	lr
	...

080013c4 <calcElectAngle>:
void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 80013c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013c8:	ed2d 8b04 	vpush	{d8-d9}
 80013cc:	4680      	mov	r8, r0
 80013ce:	eef0 8a40 	vmov.f32	s17, s0
 80013d2:	460d      	mov	r5, r1
 80013d4:	4617      	mov	r7, r2
 80013d6:	461e      	mov	r6, r3
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80013d8:	4c65      	ldr	r4, [pc, #404]	; (8001570 <calcElectAngle+0x1ac>)
 80013da:	ed94 0a00 	vldr	s0, [r4]
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 80013de:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8001574 <calcElectAngle+0x1b0>
 80013e2:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001578 <calcElectAngle+0x1b4>
 80013e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80013ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80013ee:	f7ff fc1b 	bl	8000c28 <gUpperLowerLimit>
 80013f2:	eeb0 9a40 	vmov.f32	s18, s0
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80013f6:	ed94 7a00 	vldr	s14, [r4]
 80013fa:	eddf 7a60 	vldr	s15, [pc, #384]	; 800157c <calcElectAngle+0x1b8>
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001402:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8001406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800140e:	ee87 8a87 	vdiv.f32	s16, s15, s14
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001412:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001580 <calcElectAngle+0x1bc>
 8001416:	ee60 7a27 	vmul.f32	s15, s0, s15
 800141a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800141e:	ee27 8a88 	vmul.f32	s16, s15, s16
	sVoltageMode_pre = sVoltageMode;
 8001422:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80015c8 <calcElectAngle+0x204>
 8001426:	f899 4000 	ldrb.w	r4, [r9]
 800142a:	4b56      	ldr	r3, [pc, #344]	; (8001584 <calcElectAngle+0x1c0>)
 800142c:	701c      	strb	r4, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 800142e:	4640      	mov	r0, r8
 8001430:	f7ff ffa8 	bl	8001384 <calcVoltageMode>
 8001434:	f889 0000 	strb.w	r0, [r9]
	sElectAngleActual_pre = sElectAngleActual;
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <calcElectAngle+0x1c4>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <calcElectAngle+0x1c8>)
 800143e:	601a      	str	r2, [r3, #0]

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8001440:	1b04      	subs	r4, r0, r4
 8001442:	b2e3      	uxtb	r3, r4
 8001444:	b264      	sxtb	r4, r4

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8001446:	2c01      	cmp	r4, #1
 8001448:	dd11      	ble.n	800146e <calcElectAngle+0xaa>
		voltageMode_Diff -= 6;
 800144a:	3b06      	subs	r3, #6
 800144c:	b25c      	sxtb	r4, r3
	else if(voltageMode_Diff < -1)
		voltageMode_Diff += 6;

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800144e:	b10c      	cbz	r4, 8001454 <calcElectAngle+0x90>
		*rotDir = voltageMode_Diff;
 8001450:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <calcElectAngle+0x1cc>)
 8001452:	701c      	strb	r4, [r3, #0]
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <calcElectAngle+0x1cc>)
 8001456:	f993 3000 	ldrsb.w	r3, [r3]
 800145a:	ee07 3a90 	vmov	s15, r3
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 800145e:	3801      	subs	r0, #1
 8001460:	2805      	cmp	r0, #5
 8001462:	d80a      	bhi.n	800147a <calcElectAngle+0xb6>
 8001464:	e8df f000 	tbb	[pc, r0]
 8001468:	18091512 	.word	0x18091512
 800146c:	0f0c      	.short	0x0f0c
	else if(voltageMode_Diff < -1)
 800146e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001472:	daec      	bge.n	800144e <calcElectAngle+0x8a>
		voltageMode_Diff += 6;
 8001474:	3306      	adds	r3, #6
 8001476:	b25c      	sxtb	r4, r3
 8001478:	e7e9      	b.n	800144e <calcElectAngle+0x8a>
		switch(voltageMode){
 800147a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001574 <calcElectAngle+0x1b0>
 800147e:	e00d      	b.n	800149c <calcElectAngle+0xd8>
			break;
		  case 4:
			  electAngle_Center = PIDIV3;
			break;
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8001480:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001594 <calcElectAngle+0x1d0>
			break;
 8001484:	e00a      	b.n	800149c <calcElectAngle+0xd8>
		  case 6:
			  electAngle_Center = PI;
 8001486:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001598 <calcElectAngle+0x1d4>
			break;
 800148a:	e007      	b.n	800149c <calcElectAngle+0xd8>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <calcElectAngle+0x1d8>
			break;
 8001490:	e004      	b.n	800149c <calcElectAngle+0xd8>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8001492:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80015a0 <calcElectAngle+0x1dc>
			break;
 8001496:	e001      	b.n	800149c <calcElectAngle+0xd8>
			  electAngle_Center = PIDIV3;
 8001498:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a4 <calcElectAngle+0x1e0>
		  default :
			  electAngle_Center = 0.0f;
		  break;
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 800149c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80015a8 <calcElectAngle+0x1e4>
 80014a4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80014a8:	ee37 0a67 	vsub.f32	s0, s14, s15
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 80014ac:	4c36      	ldr	r4, [pc, #216]	; (8001588 <calcElectAngle+0x1c4>)
 80014ae:	ed84 0a00 	vstr	s0, [r4]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 80014b2:	f7ff fb95 	bl	8000be0 <gfWrapTheta>
 80014b6:	ed84 0a00 	vstr	s0, [r4]
	sFlgPLL_pre = sFlgPLL;
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <calcElectAngle+0x1e8>)
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	493c      	ldr	r1, [pc, #240]	; (80015b0 <calcElectAngle+0x1ec>)
 80014c0:	700a      	strb	r2, [r1, #0]
	sFlgPLL = flgPLL;
 80014c2:	701d      	strb	r5, [r3, #0]
	if(flgPLL == 1){
 80014c4:	2d01      	cmp	r5, #1
 80014c6:	d013      	beq.n	80014f0 <calcElectAngle+0x12c>
		sElectAngleEstimate = sElectAngleActual;
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <calcElectAngle+0x1f0>)
 80014ca:	ed83 0a00 	vstr	s0, [r3]
		sElectAngVeloEstimate = electFreq * TWOPI;
 80014ce:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80015b8 <calcElectAngle+0x1f4>
 80014d2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <calcElectAngle+0x1ac>)
 80014d8:	edc3 8a00 	vstr	s17, [r3]
	*electAngle = sElectAngleEstimate;
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <calcElectAngle+0x1f0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	603b      	str	r3, [r7, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <calcElectAngle+0x1ac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6033      	str	r3, [r6, #0]
}
 80014e8:	ecbd 8b04 	vpop	{d8-d9}
 80014ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ( sFlgPLL_pre == 0 ){
 80014f0:	b962      	cbnz	r2, 800150c <calcElectAngle+0x148>
			sElectAngVeloEstimate = electFreq * TWOPI;
 80014f2:	eddf 7a31 	vldr	s15, [pc, #196]	; 80015b8 <calcElectAngle+0x1f4>
 80014f6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <calcElectAngle+0x1ac>)
 80014fc:	edc3 8a00 	vstr	s17, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8001500:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <calcElectAngle+0x1f8>)
 8001502:	edc3 8a00 	vstr	s17, [r3]
			sElectAngleEstimate = sElectAngleActual;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <calcElectAngle+0x1f0>)
 8001508:	ed83 0a00 	vstr	s0, [r3]
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <calcElectAngle+0x1ac>)
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80015c0 <calcElectAngle+0x1fc>
 8001516:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800151a:	4c26      	ldr	r4, [pc, #152]	; (80015b4 <calcElectAngle+0x1f0>)
 800151c:	edd4 7a00 	vldr	s15, [r4]
 8001520:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001524:	ed84 0a00 	vstr	s0, [r4]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8001528:	f7ff fb5a 	bl	8000be0 <gfWrapTheta>
 800152c:	ed84 0a00 	vstr	s0, [r4]
		if( sElectAngleActual != sElectAngleActual_pre){
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <calcElectAngle+0x1c4>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <calcElectAngle+0x1c8>)
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	eef4 7a47 	vcmp.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d0ca      	beq.n	80014dc <calcElectAngle+0x118>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8001546:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800154a:	4c1e      	ldr	r4, [pc, #120]	; (80015c4 <calcElectAngle+0x200>)
 800154c:	ed84 0a00 	vstr	s0, [r4]
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001550:	f7ff fb46 	bl	8000be0 <gfWrapTheta>
 8001554:	ed84 0a00 	vstr	s0, [r4]
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001558:	4818      	ldr	r0, [pc, #96]	; (80015bc <calcElectAngle+0x1f8>)
 800155a:	eeb0 1a48 	vmov.f32	s2, s16
 800155e:	eef0 0a49 	vmov.f32	s1, s18
 8001562:	f7ff fb11 	bl	8000b88 <cfPhaseLockedLoop>
 8001566:	4b02      	ldr	r3, [pc, #8]	; (8001570 <calcElectAngle+0x1ac>)
 8001568:	ed83 0a00 	vstr	s0, [r3]
 800156c:	e7b6      	b.n	80014dc <calcElectAngle+0x118>
 800156e:	bf00      	nop
 8001570:	20000134 	.word	0x20000134
 8001574:	00000000 	.word	0x00000000
 8001578:	43fa0000 	.word	0x43fa0000
 800157c:	3e22f983 	.word	0x3e22f983
 8001580:	3e4ccccd 	.word	0x3e4ccccd
 8001584:	20000152 	.word	0x20000152
 8001588:	20000138 	.word	0x20000138
 800158c:	2000013c 	.word	0x2000013c
 8001590:	20000150 	.word	0x20000150
 8001594:	40060a92 	.word	0x40060a92
 8001598:	40490fdb 	.word	0x40490fdb
 800159c:	c0060a92 	.word	0xc0060a92
 80015a0:	bf860a92 	.word	0xbf860a92
 80015a4:	3f860a92 	.word	0x3f860a92
 80015a8:	3f060a92 	.word	0x3f060a92
 80015ac:	20000148 	.word	0x20000148
 80015b0:	20000149 	.word	0x20000149
 80015b4:	20000144 	.word	0x20000144
 80015b8:	40c90fdb 	.word	0x40c90fdb
 80015bc:	2000014c 	.word	0x2000014c
 80015c0:	4684d000 	.word	0x4684d000
 80015c4:	20000140 	.word	0x20000140
 80015c8:	20000151 	.word	0x20000151

080015cc <VectorControlTasks>:
static inline void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(float *Idq_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80015cc:	b084      	sub	sp, #16
 80015ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d2:	ed2d 8b06 	vpush	{d8-d10}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	4680      	mov	r8, r0
 80015da:	ad17      	add	r5, sp, #92	; 0x5c
 80015dc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80015e0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80015e2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80015e4:	9b20      	ldr	r3, [sp, #128]	; 0x80

	outputMode[0] = OUTPUTMODE_POSITIVE;
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80015ea:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80015ec:	709a      	strb	r2, [r3, #2]
	ab2uvw(sVab, sVuvw);
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
}

static void uvw2ab(float* uvw, float* ab){
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80015ee:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 80015f2:	ed9d 6a1a 	vldr	s12, [sp, #104]	; 0x68
 80015f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80015fa:	ee26 8a27 	vmul.f32	s16, s12, s15
 80015fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8001602:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 8001606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800160e:	eddf 8adb 	vldr	s17, [pc, #876]	; 800197c <VectorControlTasks+0x3b0>
 8001612:	ee28 8a28 	vmul.f32	s16, s16, s17
 8001616:	4fda      	ldr	r7, [pc, #872]	; (8001980 <VectorControlTasks+0x3b4>)
 8001618:	ed87 8a00 	vstr	s16, [r7]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 800161c:	eddf 7ad9 	vldr	s15, [pc, #868]	; 8001984 <VectorControlTasks+0x3b8>
 8001620:	ee26 9a27 	vmul.f32	s18, s12, s15
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee39 9a67 	vsub.f32	s18, s18, s15
 800162c:	ee29 9a28 	vmul.f32	s18, s18, s17
 8001630:	ed87 9a01 	vstr	s18, [r7, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001634:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001638:	ee37 7a26 	vadd.f32	s14, s14, s13
 800163c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8001988 <VectorControlTasks+0x3bc>
 8001640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001644:	ed87 7a02 	vstr	s14, [r7, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001648:	ed9d aa17 	vldr	s20, [sp, #92]	; 0x5c
}

static void ab2dq(float theta, float* ab, float* dq){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800164c:	eeb0 0a4a 	vmov.f32	s0, s20
 8001650:	f005 fc22 	bl	8006e98 <sinf>
 8001654:	eef0 9a40 	vmov.f32	s19, s0
	cosTheta = cosf(theta);
 8001658:	eeb0 0a4a 	vmov.f32	s0, s20
 800165c:	f005 fbd8 	bl	8006e10 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001660:	ee60 7a08 	vmul.f32	s15, s0, s16
 8001664:	ee29 9a89 	vmul.f32	s18, s19, s18
 8001668:	ee77 7a89 	vadd.f32	s15, s15, s18
 800166c:	edc4 7a00 	vstr	s15, [r4]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001670:	edd7 0a00 	vldr	s1, [r7]
 8001674:	ee60 0ae9 	vnmul.f32	s1, s1, s19
 8001678:	ed97 7a01 	vldr	s14, [r7, #4]
 800167c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001680:	ee70 0a80 	vadd.f32	s1, s1, s0
 8001684:	edc4 0a01 	vstr	s1, [r4, #4]
	CurrentFbControl(Idq_ref, sensData, vectorControlData);
 8001688:	f10d 0c0c 	add.w	ip, sp, #12
 800168c:	46ae      	mov	lr, r5
 800168e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001692:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001696:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800169a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
	Kid = Kig;

	Ierr[0] = Igd_ref[0] - vectorControlData->Idq[0];
 800169e:	ed98 6a00 	vldr	s12, [r8]
 80016a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016a6:	ed8d 6a01 	vstr	s12, [sp, #4]
	Ierr[1] = Igd_ref[1] - vectorControlData->Idq[1];
 80016aa:	edd8 6a01 	vldr	s13, [r8, #4]
 80016ae:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80016b2:	edcd 6a02 	vstr	s13, [sp, #8]

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 80016b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800198c <VectorControlTasks+0x3c0>
 80016ba:	ee66 5a07 	vmul.f32	s11, s12, s14
 80016be:	ed94 5a04 	vldr	s10, [r4, #16]
 80016c2:	ee75 5a85 	vadd.f32	s11, s11, s10
 80016c6:	edc4 5a04 	vstr	s11, [r4, #16]
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 80016ca:	ee26 7a87 	vmul.f32	s14, s13, s14
 80016ce:	ed94 0a05 	vldr	s0, [r4, #20]
 80016d2:	ee37 7a00 	vadd.f32	s14, s14, s0
 80016d6:	ed84 7a05 	vstr	s14, [r4, #20]

	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 80016da:	ed9d 0a04 	vldr	s0, [sp, #16]
 80016de:	ed9f 5aac 	vldr	s10, [pc, #688]	; 8001990 <VectorControlTasks+0x3c4>
 80016e2:	ee60 4a45 	vnmul.f32	s9, s0, s10
 80016e6:	ee60 0aa4 	vmul.f32	s1, s1, s9
 80016ea:	edc4 0a06 	vstr	s1, [r4, #24]
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 80016ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80016f2:	ed9f 5aa8 	vldr	s10, [pc, #672]	; 8001994 <VectorControlTasks+0x3c8>
 80016f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80016fa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80016fe:	edc4 7a07 	vstr	s15, [r4, #28]

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8001702:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8001998 <VectorControlTasks+0x3cc>
 8001706:	ee26 6a00 	vmul.f32	s12, s12, s0
 800170a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800170e:	ee70 0a86 	vadd.f32	s1, s1, s12
 8001712:	edc4 0a02 	vstr	s1, [r4, #8]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8001716:	ee66 6a80 	vmul.f32	s13, s13, s0
 800171a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800171e:	ee37 0a87 	vadd.f32	s0, s15, s14
 8001722:	ed84 0a03 	vstr	s0, [r4, #12]
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001726:	f10d 0c0c 	add.w	ip, sp, #12
 800172a:	46ae      	mov	lr, r5
 800172c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001730:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001734:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001738:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 800173c:	f005 fbf2 	bl	8006f24 <atan2f>
 8001740:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001744:	ed94 0a02 	vldr	s0, [r4, #8]
 8001748:	ee20 0a00 	vmul.f32	s0, s0, s0
 800174c:	edd4 7a03 	vldr	s15, [r4, #12]
 8001750:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8001754:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001758:	f005 fc06 	bl	8006f68 <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 800175c:	ed84 0a08 	vstr	s0, [r4, #32]
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001760:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001764:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001768:	ee60 8a28 	vmul.f32	s17, s0, s17
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 800176c:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	limitVoltVectAmp(sensData, vectorControlData);
 8001770:	f10d 0e0c 	add.w	lr, sp, #12
 8001774:	46ac      	mov	ip, r5
 8001776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800177a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800177e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001782:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
	if( vectorControlData->Mod > MODLIMIT ){
 8001786:	eddf 7a85 	vldr	s15, [pc, #532]	; 800199c <VectorControlTasks+0x3d0>
 800178a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	dd29      	ble.n	80017e8 <VectorControlTasks+0x21c>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8001794:	ed9d 8a08 	vldr	s16, [sp, #32]
 8001798:	eddf 7a81 	vldr	s15, [pc, #516]	; 80019a0 <VectorControlTasks+0x3d4>
 800179c:	ee28 8a27 	vmul.f32	s16, s16, s15
 80017a0:	eddf 8a7e 	vldr	s17, [pc, #504]	; 800199c <VectorControlTasks+0x3d0>
 80017a4:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 80017a8:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 80017ac:	eeb0 0a49 	vmov.f32	s0, s18
 80017b0:	f005 fb2e 	bl	8006e10 <cosf>
 80017b4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80017b8:	ed84 0a02 	vstr	s0, [r4, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 80017bc:	edd4 7a06 	vldr	s15, [r4, #24]
 80017c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80017c4:	ed84 0a04 	vstr	s0, [r4, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 80017c8:	eeb0 0a49 	vmov.f32	s0, s18
 80017cc:	f005 fb64 	bl	8006e98 <sinf>
 80017d0:	ee28 8a00 	vmul.f32	s16, s16, s0
 80017d4:	ed84 8a03 	vstr	s16, [r4, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 80017d8:	ed94 0a07 	vldr	s0, [r4, #28]
 80017dc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80017e0:	ed84 8a05 	vstr	s16, [r4, #20]
		vectorControlData->Mod = MODLIMIT;
 80017e4:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 80017e8:	eddd 8a17 	vldr	s17, [sp, #92]	; 0x5c
	sinTheta = sinf(theta);
 80017ec:	eeb0 0a68 	vmov.f32	s0, s17
 80017f0:	f005 fb52 	bl	8006e98 <sinf>
 80017f4:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 80017f8:	eeb0 0a68 	vmov.f32	s0, s17
 80017fc:	f005 fb08 	bl	8006e10 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001800:	ed94 7a02 	vldr	s14, [r4, #8]
 8001804:	ee20 7a07 	vmul.f32	s14, s0, s14
 8001808:	edd4 7a03 	vldr	s15, [r4, #12]
 800180c:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001810:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001814:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <VectorControlTasks+0x3d8>)
 8001816:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 800181a:	edd4 6a02 	vldr	s13, [r4, #8]
 800181e:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001822:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001826:	ee38 8a00 	vadd.f32	s16, s16, s0
 800182a:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 800182e:	eddf 6a53 	vldr	s13, [pc, #332]	; 800197c <VectorControlTasks+0x3b0>
 8001832:	ee27 0a26 	vmul.f32	s0, s14, s13
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <VectorControlTasks+0x3dc>)
 8001838:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 800183c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001984 <VectorControlTasks+0x3b8>
 8001848:	ee28 8a07 	vmul.f32	s16, s16, s14
 800184c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001850:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001854:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8001858:	eeb1 7a40 	vneg.f32	s14, s0
 800185c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001860:	ed83 7a02 	vstr	s14, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8001864:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
	if(Vuvw[1] > max)
 8001868:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	d47e      	bmi.n	8001970 <VectorControlTasks+0x3a4>
	max = Vuvw[0];
 8001872:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <VectorControlTasks+0x3dc>)
 8001878:	edd3 6a02 	vldr	s13, [r3, #8]
 800187c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	dd01      	ble.n	800188a <VectorControlTasks+0x2be>
		max = Vuvw[2];
 8001886:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 800188a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	dc70      	bgt.n	8001976 <VectorControlTasks+0x3aa>
	min = Vuvw[0];
 8001894:	eef0 5a40 	vmov.f32	s11, s0
	if(Vuvw[2] < min)
 8001898:	eef4 6ae5 	vcmpe.f32	s13, s11
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	d501      	bpl.n	80018a6 <VectorControlTasks+0x2da>
		min = Vuvw[2];
 80018a2:	eef0 5a66 	vmov.f32	s11, s13
	vo = (max + min) * 0.5f;
 80018a6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80018aa:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80018ae:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 80018b2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80018b6:	4b3c      	ldr	r3, [pc, #240]	; (80019a8 <VectorControlTasks+0x3dc>)
 80018b8:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 80018bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018c0:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 80018c4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80018c8:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 80018cc:	ee26 0a00 	vmul.f32	s0, s12, s0
 80018d0:	ed86 0a00 	vstr	s0, [r6]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 80018d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018dc:	edc6 7a01 	vstr	s15, [r6, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 80018e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018e8:	ed86 6a02 	vstr	s12, [r6, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 80018ec:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80018f4:	f7ff f998 	bl	8000c28 <gUpperLowerLimit>
 80018f8:	ed86 0a00 	vstr	s0, [r6]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 80018fc:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001900:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001904:	ed96 0a01 	vldr	s0, [r6, #4]
 8001908:	f7ff f98e 	bl	8000c28 <gUpperLowerLimit>
 800190c:	ed86 0a01 	vstr	s0, [r6, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001910:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001914:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001918:	ed96 0a02 	vldr	s0, [r6, #8]
 800191c:	f7ff f984 	bl	8000c28 <gUpperLowerLimit>
 8001920:	ed86 0a02 	vstr	s0, [r6, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001924:	edd6 7a00 	vldr	s15, [r6]
 8001928:	ee67 7a88 	vmul.f32	s15, s15, s16
 800192c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001930:	edc6 7a00 	vstr	s15, [r6]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001934:	edd6 7a01 	vldr	s15, [r6, #4]
 8001938:	ee67 7a88 	vmul.f32	s15, s15, s16
 800193c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001940:	edc6 7a01 	vstr	s15, [r6, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001944:	ee20 0a08 	vmul.f32	s0, s0, s16
 8001948:	ee30 0a08 	vadd.f32	s0, s0, s16
 800194c:	ed86 0a02 	vstr	s0, [r6, #8]
	gLPF(vectorControlData->Idq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <VectorControlTasks+0x3e0>)
 8001952:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80019b0 <VectorControlTasks+0x3e4>
 8001956:	eddf 0a17 	vldr	s1, [pc, #92]	; 80019b4 <VectorControlTasks+0x3e8>
 800195a:	ed94 0a01 	vldr	s0, [r4, #4]
 800195e:	f7ff f97f 	bl	8000c60 <gLPF>
}
 8001962:	b00a      	add	sp, #40	; 0x28
 8001964:	ecbd 8b06 	vpop	{d8-d10}
 8001968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800196c:	b004      	add	sp, #16
 800196e:	4770      	bx	lr
		max = Vuvw[1];
 8001970:	eeb0 7a67 	vmov.f32	s14, s15
 8001974:	e77f      	b.n	8001876 <VectorControlTasks+0x2aa>
		min = Vuvw[1];
 8001976:	eef0 5a67 	vmov.f32	s11, s15
 800197a:	e78d      	b.n	8001898 <VectorControlTasks+0x2cc>
 800197c:	3f5105ec 	.word	0x3f5105ec
 8001980:	20000154 	.word	0x20000154
 8001984:	3f5db3d7 	.word	0x3f5db3d7
 8001988:	3f13cd3a 	.word	0x3f13cd3a
 800198c:	3bcb8997 	.word	0x3bcb8997
 8001990:	39fba882 	.word	0x39fba882
 8001994:	3a870111 	.word	0x3a870111
 8001998:	3cf7109e 	.word	0x3cf7109e
 800199c:	3f933333 	.word	0x3f933333
 80019a0:	3f1cc471 	.word	0x3f1cc471
 80019a4:	20000168 	.word	0x20000168
 80019a8:	20000170 	.word	0x20000170
 80019ac:	20000164 	.word	0x20000164
 80019b0:	3876b949 	.word	0x3876b949
 80019b4:	42fb3333 	.word	0x42fb3333

080019b8 <OpenLoopTasks>:
void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80019b8:	b084      	sub	sp, #16
 80019ba:	b570      	push	{r4, r5, r6, lr}
 80019bc:	ed2d 8b06 	vpush	{d8-d10}
 80019c0:	b088      	sub	sp, #32
 80019c2:	eeb0 9a40 	vmov.f32	s18, s0
 80019c6:	ac12      	add	r4, sp, #72	; 0x48
 80019c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019cc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80019ce:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80019d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	outputMode[0] = OUTPUTMODE_POSITIVE;
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80019d6:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80019d8:	709a      	strb	r2, [r3, #2]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80019da:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80019de:	ed9d 6a15 	vldr	s12, [sp, #84]	; 0x54
 80019e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019e6:	ee26 8a07 	vmul.f32	s16, s12, s14
 80019ea:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80019ee:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 80019f2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80019f6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80019fa:	eddf 9ab7 	vldr	s19, [pc, #732]	; 8001cd8 <OpenLoopTasks+0x320>
 80019fe:	ee28 8a29 	vmul.f32	s16, s16, s19
 8001a02:	4eb6      	ldr	r6, [pc, #728]	; (8001cdc <OpenLoopTasks+0x324>)
 8001a04:	ed86 8a00 	vstr	s16, [r6]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001a08:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001ce0 <OpenLoopTasks+0x328>
 8001a0c:	ee66 8a07 	vmul.f32	s17, s12, s14
 8001a10:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001a14:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8001a18:	ee67 8a29 	vmul.f32	s17, s14, s19
 8001a1c:	edc6 8a01 	vstr	s17, [r6, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001a20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a28:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001ce4 <OpenLoopTasks+0x32c>
 8001a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a30:	edc6 7a02 	vstr	s15, [r6, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001a34:	eddd aa12 	vldr	s21, [sp, #72]	; 0x48
	sinTheta = sinf(theta);
 8001a38:	eeb0 0a6a 	vmov.f32	s0, s21
 8001a3c:	f005 fa2c 	bl	8006e98 <sinf>
 8001a40:	eeb0 aa40 	vmov.f32	s20, s0
	cosTheta = cosf(theta);
 8001a44:	eeb0 0a6a 	vmov.f32	s0, s21
 8001a48:	f005 f9e2 	bl	8006e10 <cosf>
 8001a4c:	eef0 7a40 	vmov.f32	s15, s0
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001a50:	ee20 8a08 	vmul.f32	s16, s0, s16
 8001a54:	ee6a 8a28 	vmul.f32	s17, s20, s17
 8001a58:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001a5c:	ed84 8a00 	vstr	s16, [r4]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001a60:	ed96 7a00 	vldr	s14, [r6]
 8001a64:	ee27 0a4a 	vnmul.f32	s0, s14, s20
 8001a68:	ed96 7a01 	vldr	s14, [r6, #4]
 8001a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a70:	ee70 7a27 	vadd.f32	s15, s0, s15
 8001a74:	edc4 7a01 	vstr	s15, [r4, #4]
	vectorControlData->Vdq[0] = 0.0f;
 8001a78:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001ce8 <OpenLoopTasks+0x330>
 8001a7c:	edc4 0a02 	vstr	s1, [r4, #8]
	vectorControlData->Vdq[1] = VamRef;
 8001a80:	ed84 9a03 	vstr	s18, [r4, #12]
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
 8001a84:	edc4 0a04 	vstr	s1, [r4, #16]
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];
 8001a88:	ed84 9a05 	vstr	s18, [r4, #20]
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001a8c:	f10d 0c04 	add.w	ip, sp, #4
 8001a90:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001a94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001a9c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001aa0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8001aa4:	eeb0 0a49 	vmov.f32	s0, s18
 8001aa8:	f005 fa3c 	bl	8006f24 <atan2f>
 8001aac:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001ab0:	ed94 0a02 	vldr	s0, [r4, #8]
 8001ab4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001ab8:	edd4 7a03 	vldr	s15, [r4, #12]
 8001abc:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8001ac0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001ac4:	f005 fa50 	bl	8006f68 <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001ac8:	ed84 0a08 	vstr	s0, [r4, #32]
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001acc:	eddd 7a07 	vldr	s15, [sp, #28]
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001ad0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001ad4:	ee20 0a29 	vmul.f32	s0, s0, s19
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001ad8:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	limitVoltVectAmp(sensData, vectorControlData);
 8001adc:	f10d 0c04 	add.w	ip, sp, #4
 8001ae0:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001ae4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001aec:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001af0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	if( vectorControlData->Mod > MODLIMIT ){
 8001af4:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8001cec <OpenLoopTasks+0x334>
 8001af8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	dd29      	ble.n	8001b56 <OpenLoopTasks+0x19e>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8001b02:	ed9d 8a06 	vldr	s16, [sp, #24]
 8001b06:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8001cf0 <OpenLoopTasks+0x338>
 8001b0a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001b0e:	eddf 8a77 	vldr	s17, [pc, #476]	; 8001cec <OpenLoopTasks+0x334>
 8001b12:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8001b16:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8001b1a:	eeb0 0a49 	vmov.f32	s0, s18
 8001b1e:	f005 f977 	bl	8006e10 <cosf>
 8001b22:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001b26:	ed84 0a02 	vstr	s0, [r4, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 8001b2a:	edd4 7a06 	vldr	s15, [r4, #24]
 8001b2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001b32:	ed84 0a04 	vstr	s0, [r4, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8001b36:	eeb0 0a49 	vmov.f32	s0, s18
 8001b3a:	f005 f9ad 	bl	8006e98 <sinf>
 8001b3e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8001b42:	ed84 8a03 	vstr	s16, [r4, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 8001b46:	ed94 0a07 	vldr	s0, [r4, #28]
 8001b4a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8001b4e:	ed84 8a05 	vstr	s16, [r4, #20]
		vectorControlData->Mod = MODLIMIT;
 8001b52:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001b56:	eddd 8a12 	vldr	s17, [sp, #72]	; 0x48
	sinTheta = sinf(theta);
 8001b5a:	eeb0 0a68 	vmov.f32	s0, s17
 8001b5e:	f005 f99b 	bl	8006e98 <sinf>
 8001b62:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8001b66:	eeb0 0a68 	vmov.f32	s0, s17
 8001b6a:	f005 f951 	bl	8006e10 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001b6e:	ed94 7a02 	vldr	s14, [r4, #8]
 8001b72:	ee20 7a07 	vmul.f32	s14, s0, s14
 8001b76:	edd4 7a03 	vldr	s15, [r4, #12]
 8001b7a:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001b7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001b82:	4b5c      	ldr	r3, [pc, #368]	; (8001cf4 <OpenLoopTasks+0x33c>)
 8001b84:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001b88:	edd4 6a02 	vldr	s13, [r4, #8]
 8001b8c:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001b90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001b94:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001b98:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001b9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001cd8 <OpenLoopTasks+0x320>
 8001ba0:	ee27 0a26 	vmul.f32	s0, s14, s13
 8001ba4:	4b54      	ldr	r3, [pc, #336]	; (8001cf8 <OpenLoopTasks+0x340>)
 8001ba6:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8001baa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8001bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001ce0 <OpenLoopTasks+0x328>
 8001bb6:	ee28 8a07 	vmul.f32	s16, s16, s14
 8001bba:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001bbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bc2:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8001bc6:	eeb1 7a40 	vneg.f32	s14, s0
 8001bca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bce:	ed83 7a02 	vstr	s14, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8001bd2:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
	if(Vuvw[1] > max)
 8001bd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d475      	bmi.n	8001ccc <OpenLoopTasks+0x314>
	max = Vuvw[0];
 8001be0:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 8001be4:	4b44      	ldr	r3, [pc, #272]	; (8001cf8 <OpenLoopTasks+0x340>)
 8001be6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bea:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	dd01      	ble.n	8001bf8 <OpenLoopTasks+0x240>
		max = Vuvw[2];
 8001bf4:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 8001bf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	dc67      	bgt.n	8001cd2 <OpenLoopTasks+0x31a>
	min = Vuvw[0];
 8001c02:	eef0 5a40 	vmov.f32	s11, s0
	if(Vuvw[2] < min)
 8001c06:	eef4 6ae5 	vcmpe.f32	s13, s11
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d501      	bpl.n	8001c14 <OpenLoopTasks+0x25c>
		min = Vuvw[2];
 8001c10:	eef0 5a66 	vmov.f32	s11, s13
	vo = (max + min) * 0.5f;
 8001c14:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001c18:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001c1c:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 8001c20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <OpenLoopTasks+0x340>)
 8001c26:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c2e:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 8001c32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001c36:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001c3a:	ee26 0a00 	vmul.f32	s0, s12, s0
 8001c3e:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c46:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c4a:	edc5 7a01 	vstr	s15, [r5, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001c4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c52:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c56:	ed85 6a02 	vstr	s12, [r5, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001c5a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c5e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c62:	f7fe ffe1 	bl	8000c28 <gUpperLowerLimit>
 8001c66:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001c6a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c6e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c72:	ed95 0a01 	vldr	s0, [r5, #4]
 8001c76:	f7fe ffd7 	bl	8000c28 <gUpperLowerLimit>
 8001c7a:	ed85 0a01 	vstr	s0, [r5, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001c7e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c82:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c86:	ed95 0a02 	vldr	s0, [r5, #8]
 8001c8a:	f7fe ffcd 	bl	8000c28 <gUpperLowerLimit>
 8001c8e:	ed85 0a02 	vstr	s0, [r5, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001c92:	edd5 7a00 	vldr	s15, [r5]
 8001c96:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c9a:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001c9e:	edc5 7a00 	vstr	s15, [r5]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001ca2:	edd5 7a01 	vldr	s15, [r5, #4]
 8001ca6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001caa:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001cae:	edc5 7a01 	vstr	s15, [r5, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001cb2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8001cb6:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001cba:	ed85 0a02 	vstr	s0, [r5, #8]
}
 8001cbe:	b008      	add	sp, #32
 8001cc0:	ecbd 8b06 	vpop	{d8-d10}
 8001cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001cc8:	b004      	add	sp, #16
 8001cca:	4770      	bx	lr
		max = Vuvw[1];
 8001ccc:	eeb0 7a67 	vmov.f32	s14, s15
 8001cd0:	e788      	b.n	8001be4 <OpenLoopTasks+0x22c>
		min = Vuvw[1];
 8001cd2:	eef0 5a67 	vmov.f32	s11, s15
 8001cd6:	e796      	b.n	8001c06 <OpenLoopTasks+0x24e>
 8001cd8:	3f5105ec 	.word	0x3f5105ec
 8001cdc:	20000154 	.word	0x20000154
 8001ce0:	3f5db3d7 	.word	0x3f5db3d7
 8001ce4:	3f13cd3a 	.word	0x3f13cd3a
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	3f933333 	.word	0x3f933333
 8001cf0:	3f1cc471 	.word	0x3f1cc471
 8001cf4:	20000168 	.word	0x20000168
 8001cf8:	20000170 	.word	0x20000170

08001cfc <calcElectAngleEstimate>:
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
	return angleErr;
}

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	b530      	push	{r4, r5, lr}
 8001d00:	ed2d 8b04 	vpush	{d8-d9}
 8001d04:	b085      	sub	sp, #20
 8001d06:	4605      	mov	r5, r0
 8001d08:	a80d      	add	r0, sp, #52	; 0x34
 8001d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001d0e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001d10:	ed94 7a03 	vldr	s14, [r4, #12]
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001d14:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 8001d18:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001df8 <calcElectAngleEstimate+0xfc>
 8001d1c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001d20:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
 8001d24:	ee30 0a46 	vsub.f32	s0, s0, s12
 8001d28:	eddf 0a34 	vldr	s1, [pc, #208]	; 8001dfc <calcElectAngleEstimate+0x100>
 8001d2c:	ee27 7a20 	vmul.f32	s14, s14, s1
 8001d30:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 8001d34:	ee27 6a20 	vmul.f32	s12, s14, s1
 8001d38:	ee30 0a06 	vadd.f32	s0, s0, s12
 8001d3c:	ed8d 0a01 	vstr	s0, [sp, #4]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001d40:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001d44:	eddd 0a17 	vldr	s1, [sp, #92]	; 0x5c
 8001d48:	ee70 0ae6 	vsub.f32	s1, s1, s13
 8001d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d50:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8001d54:	edcd 0a02 	vstr	s1, [sp, #8]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001d58:	eeb1 0a40 	vneg.f32	s0, s0
 8001d5c:	f005 f8e2 	bl	8006f24 <atan2f>
	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001d60:	ed84 0a01 	vstr	s0, [r4, #4]


	if( flgInit == 0){ // 初期化処理
 8001d64:	b975      	cbnz	r5, 8001d84 <calcElectAngleEstimate+0x88>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d68:	60a3      	str	r3, [r4, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d6c:	60e3      	str	r3, [r4, #12]
		electAngleEstimateData->wc_PLL = 0;
 8001d6e:	2200      	movs	r2, #0
 8001d70:	6022      	str	r2, [r4, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001d72:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <calcElectAngleEstimate+0x104>)
 8001d74:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001d76:	b005      	add	sp, #20
 8001d78:	ecbd 8b04 	vpop	{d8-d9}
 8001d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d80:	b004      	add	sp, #16
 8001d82:	4770      	bx	lr
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	9303      	str	r3, [sp, #12]
		gRateLimit(100.0f * TWOPI, 200.0f, CARRIERCYCLE, &wc_PLL);
 8001d88:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 8001e04 <calcElectAngleEstimate+0x108>
 8001d8c:	a803      	add	r0, sp, #12
 8001d8e:	eeb0 1a49 	vmov.f32	s2, s18
 8001d92:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001e08 <calcElectAngleEstimate+0x10c>
 8001d96:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001e0c <calcElectAngleEstimate+0x110>
 8001d9a:	f7fe ff72 	bl	8000c82 <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001d9e:	eddd 8a03 	vldr	s17, [sp, #12]
 8001da2:	edc4 8a00 	vstr	s17, [r4]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001da6:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 8001e10 <calcElectAngleEstimate+0x114>
 8001daa:	ee28 8a88 	vmul.f32	s16, s17, s16
 8001dae:	ee28 8a88 	vmul.f32	s16, s17, s16
 8001db2:	ee28 8a09 	vmul.f32	s16, s16, s18
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001db6:	ed94 7a03 	vldr	s14, [r4, #12]
 8001dba:	eddf 7a16 	vldr	s15, [pc, #88]	; 8001e14 <calcElectAngleEstimate+0x118>
 8001dbe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8001dc2:	edd4 7a02 	vldr	s15, [r4, #8]
 8001dc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001dca:	ed84 0a02 	vstr	s0, [r4, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001dce:	f7fe ff07 	bl	8000be0 <gfWrapTheta>
 8001dd2:	ed84 0a02 	vstr	s0, [r4, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001dd6:	ed94 0a01 	vldr	s0, [r4, #4]
 8001dda:	f7fe ff01 	bl	8000be0 <gfWrapTheta>
 8001dde:	ed84 0a01 	vstr	s0, [r4, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001de2:	4807      	ldr	r0, [pc, #28]	; (8001e00 <calcElectAngleEstimate+0x104>)
 8001de4:	eeb0 1a48 	vmov.f32	s2, s16
 8001de8:	eef0 0a68 	vmov.f32	s1, s17
 8001dec:	f7fe fecc 	bl	8000b88 <cfPhaseLockedLoop>
 8001df0:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8001df4:	e7bf      	b.n	8001d76 <calcElectAngleEstimate+0x7a>
 8001df6:	bf00      	nop
 8001df8:	3fd71dc9 	.word	0x3fd71dc9
 8001dfc:	39fba882 	.word	0x39fba882
 8001e00:	20000160 	.word	0x20000160
 8001e04:	3876b949 	.word	0x3876b949
 8001e08:	43480000 	.word	0x43480000
 8001e0c:	441d1463 	.word	0x441d1463
 8001e10:	3e4ccccd 	.word	0x3e4ccccd
 8001e14:	4684d000 	.word	0x4684d000

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	2400      	movs	r4, #0
 8001e1e:	9405      	str	r4, [sp, #20]
 8001e20:	9406      	str	r4, [sp, #24]
 8001e22:	9407      	str	r4, [sp, #28]
 8001e24:	9408      	str	r4, [sp, #32]
 8001e26:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <MX_GPIO_Init+0xc8>)
 8001e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e2c:	f042 0204 	orr.w	r2, r2, #4
 8001e30:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e34:	f002 0204 	and.w	r2, r2, #4
 8001e38:	9201      	str	r2, [sp, #4]
 8001e3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e46:	f002 0220 	and.w	r2, r2, #32
 8001e4a:	9202      	str	r2, [sp, #8]
 8001e4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e58:	f002 0201 	and.w	r2, r2, #1
 8001e5c:	9203      	str	r2, [sp, #12]
 8001e5e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e62:	f042 0202 	orr.w	r2, r2, #2
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	9304      	str	r3, [sp, #16]
 8001e70:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e72:	4622      	mov	r2, r4
 8001e74:	2120      	movs	r1, #32
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f002 fdb2 	bl	80049e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001e7e:	4d19      	ldr	r5, [pc, #100]	; (8001ee4 <MX_GPIO_Init+0xcc>)
 8001e80:	4622      	mov	r2, r4
 8001e82:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001e86:	4628      	mov	r0, r5
 8001e88:	f002 fdab 	bl	80049e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e90:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e96:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	a905      	add	r1, sp, #20
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	f002 fcaf 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2601      	movs	r6, #1
 8001ea8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001eae:	a905      	add	r1, sp, #20
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f002 fca4 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8001eb8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ebc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	a905      	add	r1, sp, #20
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	f002 fc9a 	bl	8004800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ecc:	4622      	mov	r2, r4
 8001ece:	4621      	mov	r1, r4
 8001ed0:	2028      	movs	r0, #40	; 0x28
 8001ed2:	f002 f96b 	bl	80041ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ed6:	2028      	movs	r0, #40	; 0x28
 8001ed8:	f002 f9a0 	bl	800421c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001edc:	b00a      	add	sp, #40	; 0x28
 8001ede:	bd70      	pop	{r4, r5, r6, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000800 	.word	0x48000800

08001ee8 <MX_DMA_Init>:
{
 8001ee8:	b500      	push	{lr}
 8001eea:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_DMA_Init+0x50>)
 8001eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ef0:	f042 0204 	orr.w	r2, r2, #4
 8001ef4:	649a      	str	r2, [r3, #72]	; 0x48
 8001ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ef8:	f002 0204 	and.w	r2, r2, #4
 8001efc:	9200      	str	r2, [sp, #0]
 8001efe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	649a      	str	r2, [r3, #72]	; 0x48
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	4611      	mov	r1, r2
 8001f16:	200b      	movs	r0, #11
 8001f18:	f002 f948 	bl	80041ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f1c:	200b      	movs	r0, #11
 8001f1e:	f002 f97d 	bl	800421c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	4611      	mov	r1, r2
 8001f26:	200c      	movs	r0, #12
 8001f28:	f002 f940 	bl	80041ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f2c:	200c      	movs	r0, #12
 8001f2e:	f002 f975 	bl	800421c <HAL_NVIC_EnableIRQ>
}
 8001f32:	b003      	add	sp, #12
 8001f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f38:	40021000 	.word	0x40021000

08001f3c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <Error_Handler+0x2>

08001f40 <MX_LPUART1_UART_Init>:
{
 8001f40:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 8001f42:	4815      	ldr	r0, [pc, #84]	; (8001f98 <MX_LPUART1_UART_Init+0x58>)
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_LPUART1_UART_Init+0x5c>)
 8001f46:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001f48:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f4c:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f52:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f54:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f56:	220c      	movs	r2, #12
 8001f58:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5c:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f5e:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f60:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f62:	f004 fe60 	bl	8006c26 <HAL_UART_Init>
 8001f66:	b970      	cbnz	r0, 8001f86 <MX_LPUART1_UART_Init+0x46>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <MX_LPUART1_UART_Init+0x58>)
 8001f6c:	f004 fed3 	bl	8006d16 <HAL_UARTEx_SetTxFifoThreshold>
 8001f70:	b958      	cbnz	r0, 8001f8a <MX_LPUART1_UART_Init+0x4a>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	4808      	ldr	r0, [pc, #32]	; (8001f98 <MX_LPUART1_UART_Init+0x58>)
 8001f76:	f004 fef3 	bl	8006d60 <HAL_UARTEx_SetRxFifoThreshold>
 8001f7a:	b940      	cbnz	r0, 8001f8e <MX_LPUART1_UART_Init+0x4e>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <MX_LPUART1_UART_Init+0x58>)
 8001f7e:	f004 feab 	bl	8006cd8 <HAL_UARTEx_DisableFifoMode>
 8001f82:	b930      	cbnz	r0, 8001f92 <MX_LPUART1_UART_Init+0x52>
}
 8001f84:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f86:	f7ff ffd9 	bl	8001f3c <Error_Handler>
    Error_Handler();
 8001f8a:	f7ff ffd7 	bl	8001f3c <Error_Handler>
    Error_Handler();
 8001f8e:	f7ff ffd5 	bl	8001f3c <Error_Handler>
    Error_Handler();
 8001f92:	f7ff ffd3 	bl	8001f3c <Error_Handler>
 8001f96:	bf00      	nop
 8001f98:	200002bc 	.word	0x200002bc
 8001f9c:	40008000 	.word	0x40008000

08001fa0 <MX_ADC1_Init>:
{
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	b09a      	sub	sp, #104	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	9417      	str	r4, [sp, #92]	; 0x5c
 8001fa8:	9418      	str	r4, [sp, #96]	; 0x60
 8001faa:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fac:	2220      	movs	r2, #32
 8001fae:	4621      	mov	r1, r4
 8001fb0:	a80f      	add	r0, sp, #60	; 0x3c
 8001fb2:	f004 ff25 	bl	8006e00 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001fb6:	223c      	movs	r2, #60	; 0x3c
 8001fb8:	4621      	mov	r1, r4
 8001fba:	4668      	mov	r0, sp
 8001fbc:	f004 ff20 	bl	8006e00 <memset>
  hadc1.Instance = ADC1;
 8001fc0:	4841      	ldr	r0, [pc, #260]	; (80020c8 <MX_ADC1_Init+0x128>)
 8001fc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fc6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fc8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001fcc:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fce:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fd0:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001fd2:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fd8:	2204      	movs	r2, #4
 8001fda:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fdc:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fde:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fe4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fea:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ff0:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001ff2:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ff6:	f000 fd41 	bl	8002a7c <HAL_ADC_Init>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d155      	bne.n	80020aa <MX_ADC1_Init+0x10a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002002:	a917      	add	r1, sp, #92	; 0x5c
 8002004:	4830      	ldr	r0, [pc, #192]	; (80020c8 <MX_ADC1_Init+0x128>)
 8002006:	f001 ffd5 	bl	8003fb4 <HAL_ADCEx_MultiModeConfigChannel>
 800200a:	2800      	cmp	r0, #0
 800200c:	d14f      	bne.n	80020ae <MX_ADC1_Init+0x10e>
  sConfig.Channel = ADC_CHANNEL_2;
 800200e:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <MX_ADC1_Init+0x12c>)
 8002010:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002012:	2306      	movs	r3, #6
 8002014:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002016:	2300      	movs	r3, #0
 8002018:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800201a:	227f      	movs	r2, #127	; 0x7f
 800201c:	9212      	str	r2, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800201e:	2204      	movs	r2, #4
 8002020:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8002022:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002024:	a90f      	add	r1, sp, #60	; 0x3c
 8002026:	4828      	ldr	r0, [pc, #160]	; (80020c8 <MX_ADC1_Init+0x128>)
 8002028:	f001 f84a 	bl	80030c0 <HAL_ADC_ConfigChannel>
 800202c:	2800      	cmp	r0, #0
 800202e:	d140      	bne.n	80020b2 <MX_ADC1_Init+0x112>
  sConfig.Channel = ADC_CHANNEL_12;
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <MX_ADC1_Init+0x130>)
 8002032:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002034:	230c      	movs	r3, #12
 8002036:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002038:	a90f      	add	r1, sp, #60	; 0x3c
 800203a:	4823      	ldr	r0, [pc, #140]	; (80020c8 <MX_ADC1_Init+0x128>)
 800203c:	f001 f840 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8002040:	2800      	cmp	r0, #0
 8002042:	d138      	bne.n	80020b6 <MX_ADC1_Init+0x116>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <MX_ADC1_Init+0x134>)
 8002046:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002048:	2309      	movs	r3, #9
 800204a:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800204c:	2300      	movs	r3, #0
 800204e:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002050:	227f      	movs	r2, #127	; 0x7f
 8002052:	9203      	str	r2, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002054:	2204      	movs	r2, #4
 8002056:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedOffset = 0;
 8002058:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800205a:	2203      	movs	r2, #3
 800205c:	9208      	str	r2, [sp, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800205e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002062:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002066:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800206e:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002070:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002074:	4669      	mov	r1, sp
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_ADC1_Init+0x128>)
 8002078:	f001 fc64 	bl	8003944 <HAL_ADCEx_InjectedConfigChannel>
 800207c:	b9e8      	cbnz	r0, 80020ba <MX_ADC1_Init+0x11a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <MX_ADC1_Init+0x138>)
 8002080:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002082:	f240 130f 	movw	r3, #271	; 0x10f
 8002086:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002088:	4669      	mov	r1, sp
 800208a:	480f      	ldr	r0, [pc, #60]	; (80020c8 <MX_ADC1_Init+0x128>)
 800208c:	f001 fc5a 	bl	8003944 <HAL_ADCEx_InjectedConfigChannel>
 8002090:	b9a8      	cbnz	r0, 80020be <MX_ADC1_Init+0x11e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_ADC1_Init+0x13c>)
 8002094:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8002096:	f240 2315 	movw	r3, #533	; 0x215
 800209a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800209c:	4669      	mov	r1, sp
 800209e:	480a      	ldr	r0, [pc, #40]	; (80020c8 <MX_ADC1_Init+0x128>)
 80020a0:	f001 fc50 	bl	8003944 <HAL_ADCEx_InjectedConfigChannel>
 80020a4:	b968      	cbnz	r0, 80020c2 <MX_ADC1_Init+0x122>
}
 80020a6:	b01a      	add	sp, #104	; 0x68
 80020a8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020aa:	f7ff ff47 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80020ae:	f7ff ff45 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80020b2:	f7ff ff43 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80020b6:	f7ff ff41 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80020ba:	f7ff ff3f 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80020be:	f7ff ff3d 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80020c2:	f7ff ff3b 	bl	8001f3c <Error_Handler>
 80020c6:	bf00      	nop
 80020c8:	2000017c 	.word	0x2000017c
 80020cc:	08600004 	.word	0x08600004
 80020d0:	32601000 	.word	0x32601000
 80020d4:	04300002 	.word	0x04300002
 80020d8:	1d500080 	.word	0x1d500080
 80020dc:	19200040 	.word	0x19200040

080020e0 <MX_TIM1_Init>:
{
 80020e0:	b510      	push	{r4, lr}
 80020e2:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	2400      	movs	r4, #0
 80020e6:	9415      	str	r4, [sp, #84]	; 0x54
 80020e8:	9416      	str	r4, [sp, #88]	; 0x58
 80020ea:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ec:	940e      	str	r4, [sp, #56]	; 0x38
 80020ee:	940f      	str	r4, [sp, #60]	; 0x3c
 80020f0:	9410      	str	r4, [sp, #64]	; 0x40
 80020f2:	9411      	str	r4, [sp, #68]	; 0x44
 80020f4:	9412      	str	r4, [sp, #72]	; 0x48
 80020f6:	9413      	str	r4, [sp, #76]	; 0x4c
 80020f8:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020fa:	2234      	movs	r2, #52	; 0x34
 80020fc:	4621      	mov	r1, r4
 80020fe:	a801      	add	r0, sp, #4
 8002100:	f004 fe7e 	bl	8006e00 <memset>
  htim1.Instance = TIM1;
 8002104:	4835      	ldr	r0, [pc, #212]	; (80021dc <MX_TIM1_Init+0xfc>)
 8002106:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <MX_TIM1_Init+0x100>)
 8002108:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800210a:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800210c:	2320      	movs	r3, #32
 800210e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 4999;
 8002110:	f241 3387 	movw	r3, #4999	; 0x1387
 8002114:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002118:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800211c:	f003 fdd0 	bl	8005cc0 <HAL_TIM_PWM_Init>
 8002120:	2800      	cmp	r0, #0
 8002122:	d14c      	bne.n	80021be <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002124:	2370      	movs	r3, #112	; 0x70
 8002126:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800212e:	a915      	add	r1, sp, #84	; 0x54
 8002130:	482a      	ldr	r0, [pc, #168]	; (80021dc <MX_TIM1_Init+0xfc>)
 8002132:	f004 f9e7 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	2800      	cmp	r0, #0
 8002138:	d143      	bne.n	80021c2 <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213a:	2360      	movs	r3, #96	; 0x60
 800213c:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800213e:	2200      	movs	r2, #0
 8002140:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002142:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002144:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002146:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002148:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800214a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800214c:	a90e      	add	r1, sp, #56	; 0x38
 800214e:	4823      	ldr	r0, [pc, #140]	; (80021dc <MX_TIM1_Init+0xfc>)
 8002150:	f003 fe64 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 8002154:	2800      	cmp	r0, #0
 8002156:	d136      	bne.n	80021c6 <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002158:	2204      	movs	r2, #4
 800215a:	a90e      	add	r1, sp, #56	; 0x38
 800215c:	481f      	ldr	r0, [pc, #124]	; (80021dc <MX_TIM1_Init+0xfc>)
 800215e:	f003 fe5d 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 8002162:	2800      	cmp	r0, #0
 8002164:	d131      	bne.n	80021ca <MX_TIM1_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002166:	2208      	movs	r2, #8
 8002168:	a90e      	add	r1, sp, #56	; 0x38
 800216a:	481c      	ldr	r0, [pc, #112]	; (80021dc <MX_TIM1_Init+0xfc>)
 800216c:	f003 fe56 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 8002170:	2800      	cmp	r0, #0
 8002172:	d12c      	bne.n	80021ce <MX_TIM1_Init+0xee>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002174:	2370      	movs	r3, #112	; 0x70
 8002176:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002178:	220c      	movs	r2, #12
 800217a:	a90e      	add	r1, sp, #56	; 0x38
 800217c:	4817      	ldr	r0, [pc, #92]	; (80021dc <MX_TIM1_Init+0xfc>)
 800217e:	f003 fe4d 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 8002182:	bb30      	cbnz	r0, 80021d2 <MX_TIM1_Init+0xf2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002188:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800218c:	2264      	movs	r2, #100	; 0x64
 800218e:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002190:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002196:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002198:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800219a:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800219c:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800219e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a2:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021a4:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80021a6:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021a8:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021aa:	a901      	add	r1, sp, #4
 80021ac:	480b      	ldr	r0, [pc, #44]	; (80021dc <MX_TIM1_Init+0xfc>)
 80021ae:	f004 f9ff 	bl	80065b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80021b2:	b980      	cbnz	r0, 80021d6 <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 80021b4:	4809      	ldr	r0, [pc, #36]	; (80021dc <MX_TIM1_Init+0xfc>)
 80021b6:	f000 fb37 	bl	8002828 <HAL_TIM_MspPostInit>
}
 80021ba:	b018      	add	sp, #96	; 0x60
 80021bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80021be:	f7ff febd 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80021c2:	f7ff febb 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80021c6:	f7ff feb9 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80021ca:	f7ff feb7 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80021ce:	f7ff feb5 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80021d2:	f7ff feb3 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80021d6:	f7ff feb1 	bl	8001f3c <Error_Handler>
 80021da:	bf00      	nop
 80021dc:	2000034c 	.word	0x2000034c
 80021e0:	40012c00 	.word	0x40012c00

080021e4 <MX_TIM2_Init>:
{
 80021e4:	b500      	push	{lr}
 80021e6:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	2300      	movs	r3, #0
 80021ea:	9305      	str	r3, [sp, #20]
 80021ec:	9306      	str	r3, [sp, #24]
 80021ee:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9302      	str	r3, [sp, #8]
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	9304      	str	r3, [sp, #16]
  htim2.Instance = TIM2;
 80021f8:	481d      	ldr	r0, [pc, #116]	; (8002270 <MX_TIM2_Init+0x8c>)
 80021fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fe:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002200:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002202:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4.294967295E9;
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800220e:	f003 fd87 	bl	8005d20 <HAL_TIM_IC_Init>
 8002212:	bb10      	cbnz	r0, 800225a <MX_TIM2_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002218:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221a:	a905      	add	r1, sp, #20
 800221c:	4814      	ldr	r0, [pc, #80]	; (8002270 <MX_TIM2_Init+0x8c>)
 800221e:	f004 f971 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 8002222:	b9e0      	cbnz	r0, 800225e <MX_TIM2_Init+0x7a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002224:	2200      	movs	r2, #0
 8002226:	9201      	str	r2, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002228:	2301      	movs	r3, #1
 800222a:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800222c:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 1;
 800222e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002230:	a901      	add	r1, sp, #4
 8002232:	480f      	ldr	r0, [pc, #60]	; (8002270 <MX_TIM2_Init+0x8c>)
 8002234:	f003 fece 	bl	8005fd4 <HAL_TIM_IC_ConfigChannel>
 8002238:	b998      	cbnz	r0, 8002262 <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800223a:	2204      	movs	r2, #4
 800223c:	eb0d 0102 	add.w	r1, sp, r2
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <MX_TIM2_Init+0x8c>)
 8002242:	f003 fec7 	bl	8005fd4 <HAL_TIM_IC_ConfigChannel>
 8002246:	b970      	cbnz	r0, 8002266 <MX_TIM2_Init+0x82>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002248:	2208      	movs	r2, #8
 800224a:	a901      	add	r1, sp, #4
 800224c:	4808      	ldr	r0, [pc, #32]	; (8002270 <MX_TIM2_Init+0x8c>)
 800224e:	f003 fec1 	bl	8005fd4 <HAL_TIM_IC_ConfigChannel>
 8002252:	b950      	cbnz	r0, 800226a <MX_TIM2_Init+0x86>
}
 8002254:	b009      	add	sp, #36	; 0x24
 8002256:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800225a:	f7ff fe6f 	bl	8001f3c <Error_Handler>
    Error_Handler();
 800225e:	f7ff fe6d 	bl	8001f3c <Error_Handler>
    Error_Handler();
 8002262:	f7ff fe6b 	bl	8001f3c <Error_Handler>
    Error_Handler();
 8002266:	f7ff fe69 	bl	8001f3c <Error_Handler>
    Error_Handler();
 800226a:	f7ff fe67 	bl	8001f3c <Error_Handler>
 800226e:	bf00      	nop
 8002270:	20000398 	.word	0x20000398

08002274 <MX_DAC1_Init>:
{
 8002274:	b500      	push	{lr}
 8002276:	b08d      	sub	sp, #52	; 0x34
  DAC_ChannelConfTypeDef sConfig = {0};
 8002278:	2230      	movs	r2, #48	; 0x30
 800227a:	2100      	movs	r1, #0
 800227c:	4668      	mov	r0, sp
 800227e:	f004 fdbf 	bl	8006e00 <memset>
  hdac1.Instance = DAC1;
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <MX_DAC1_Init+0x50>)
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_DAC1_Init+0x54>)
 8002286:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002288:	f001 ffea 	bl	8004260 <HAL_DAC_Init>
 800228c:	b9a8      	cbnz	r0, 80022ba <MX_DAC1_Init+0x46>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800228e:	2302      	movs	r3, #2
 8002290:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002292:	2200      	movs	r2, #0
 8002294:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002298:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800229c:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800229e:	9303      	str	r3, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80022a0:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80022a2:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80022a4:	2301      	movs	r3, #1
 80022a6:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80022a8:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80022aa:	4669      	mov	r1, sp
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_DAC1_Init+0x50>)
 80022ae:	f002 f837 	bl	8004320 <HAL_DAC_ConfigChannel>
 80022b2:	b920      	cbnz	r0, 80022be <MX_DAC1_Init+0x4a>
}
 80022b4:	b00d      	add	sp, #52	; 0x34
 80022b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022ba:	f7ff fe3f 	bl	8001f3c <Error_Handler>
    Error_Handler();
 80022be:	f7ff fe3d 	bl	8001f3c <Error_Handler>
 80022c2:	bf00      	nop
 80022c4:	200001e8 	.word	0x200001e8
 80022c8:	50000800 	.word	0x50000800

080022cc <MX_TIM7_Init>:
{
 80022cc:	b500      	push	{lr}
 80022ce:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	9303      	str	r3, [sp, #12]
  htim7.Instance = TIM7;
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <MX_TIM7_Init+0x44>)
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <MX_TIM7_Init+0x48>)
 80022dc:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 80022de:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 4999;
 80022e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80022e6:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022ea:	f003 fcb9 	bl	8005c60 <HAL_TIM_Base_Init>
 80022ee:	b958      	cbnz	r0, 8002308 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022f0:	2320      	movs	r3, #32
 80022f2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022f8:	a901      	add	r1, sp, #4
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_TIM7_Init+0x44>)
 80022fc:	f004 f902 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	b920      	cbnz	r0, 800230c <MX_TIM7_Init+0x40>
}
 8002302:	b005      	add	sp, #20
 8002304:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002308:	f7ff fe18 	bl	8001f3c <Error_Handler>
    Error_Handler();
 800230c:	f7ff fe16 	bl	8001f3c <Error_Handler>
 8002310:	200003e4 	.word	0x200003e4
 8002314:	40001400 	.word	0x40001400

08002318 <SystemClock_Config>:
{
 8002318:	b500      	push	{lr}
 800231a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231c:	2238      	movs	r2, #56	; 0x38
 800231e:	2100      	movs	r1, #0
 8002320:	a806      	add	r0, sp, #24
 8002322:	f004 fd6d 	bl	8006e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002326:	2000      	movs	r0, #0
 8002328:	9001      	str	r0, [sp, #4]
 800232a:	9002      	str	r0, [sp, #8]
 800232c:	9003      	str	r0, [sp, #12]
 800232e:	9004      	str	r0, [sp, #16]
 8002330:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002332:	f002 fb73 	bl	8004a1c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002336:	2302      	movs	r3, #2
 8002338:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800233a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800233e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002340:	2240      	movs	r2, #64	; 0x40
 8002342:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002344:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002346:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002348:	2204      	movs	r2, #4
 800234a:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800234c:	2255      	movs	r2, #85	; 0x55
 800234e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002350:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002352:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002354:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002356:	a806      	add	r0, sp, #24
 8002358:	f002 fc1a 	bl	8004b90 <HAL_RCC_OscConfig>
 800235c:	b980      	cbnz	r0, 8002380 <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235e:	230f      	movs	r3, #15
 8002360:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002362:	2303      	movs	r3, #3
 8002364:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800236a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800236e:	2104      	movs	r1, #4
 8002370:	eb0d 0001 	add.w	r0, sp, r1
 8002374:	f002 fec4 	bl	8005100 <HAL_RCC_ClockConfig>
 8002378:	b920      	cbnz	r0, 8002384 <SystemClock_Config+0x6c>
}
 800237a:	b015      	add	sp, #84	; 0x54
 800237c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002380:	f7ff fddc 	bl	8001f3c <Error_Handler>
    Error_Handler();
 8002384:	f7ff fdda 	bl	8001f3c <Error_Handler>

08002388 <main>:
{
 8002388:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800238a:	f000 fb41 	bl	8002a10 <HAL_Init>
  SystemClock_Config();
 800238e:	f7ff ffc3 	bl	8002318 <SystemClock_Config>
  MX_GPIO_Init();
 8002392:	f7ff fd41 	bl	8001e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8002396:	f7ff fda7 	bl	8001ee8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800239a:	f7ff fdd1 	bl	8001f40 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800239e:	f7ff fdff 	bl	8001fa0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80023a2:	f7ff fe9d 	bl	80020e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80023a6:	f7ff ff1d 	bl	80021e4 <MX_TIM2_Init>
  MX_DAC1_Init();
 80023aa:	f7ff ff63 	bl	8002274 <MX_DAC1_Init>
  MX_TIM7_Init();
 80023ae:	f7ff ff8d 	bl	80022cc <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80023b2:	4c3d      	ldr	r4, [pc, #244]	; (80024a8 <main+0x120>)
 80023b4:	4620      	mov	r0, r4
 80023b6:	f003 fb83 	bl	8005ac0 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80023ba:	4d3c      	ldr	r5, [pc, #240]	; (80024ac <main+0x124>)
 80023bc:	4628      	mov	r0, r5
 80023be:	f001 fa03 	bl	80037c8 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80023c2:	4e3b      	ldr	r6, [pc, #236]	; (80024b0 <main+0x128>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ca:	4630      	mov	r0, r6
 80023cc:	f002 fb09 	bl	80049e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d6:	4630      	mov	r0, r6
 80023d8:	f002 fb03 	bl	80049e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e2:	4630      	mov	r0, r6
 80023e4:	f002 fafd 	bl	80049e2 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80023e8:	2100      	movs	r1, #0
 80023ea:	4620      	mov	r0, r4
 80023ec:	f003 fe64 	bl	80060b8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80023f0:	2100      	movs	r1, #0
 80023f2:	4620      	mov	r0, r4
 80023f4:	f004 f804 	bl	8006400 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80023f8:	2104      	movs	r1, #4
 80023fa:	4620      	mov	r0, r4
 80023fc:	f003 fe5c 	bl	80060b8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002400:	2104      	movs	r1, #4
 8002402:	4620      	mov	r0, r4
 8002404:	f003 fffc 	bl	8006400 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002408:	2108      	movs	r1, #8
 800240a:	4620      	mov	r0, r4
 800240c:	f003 fe54 	bl	80060b8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002410:	2108      	movs	r1, #8
 8002412:	4620      	mov	r0, r4
 8002414:	f003 fff4 	bl	8006400 <HAL_TIMEx_PWMN_Start>
  TIM1 -> RCR = 1;
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <main+0x12c>)
 800241a:	2601      	movs	r6, #1
 800241c:	631e      	str	r6, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	4332      	orrs	r2, r6
 8002422:	615a      	str	r2, [r3, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8002424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800242e:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f042 0210 	orr.w	r2, r2, #16
 8002436:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800243e:	601a      	str	r2, [r3, #0]
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	3a28      	subs	r2, #40	; 0x28
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_Base_Start_IT(&htim2);
 8002446:	4c1c      	ldr	r4, [pc, #112]	; (80024b8 <main+0x130>)
 8002448:	4620      	mov	r0, r4
 800244a:	f003 fb39 	bl	8005ac0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800244e:	2100      	movs	r1, #0
 8002450:	4620      	mov	r0, r4
 8002452:	f003 fee9 	bl	8006228 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002456:	2104      	movs	r1, #4
 8002458:	4620      	mov	r0, r4
 800245a:	f003 fee5 	bl	8006228 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800245e:	2108      	movs	r1, #8
 8002460:	4620      	mov	r0, r4
 8002462:	f003 fee1 	bl	8006228 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 8002466:	4c15      	ldr	r4, [pc, #84]	; (80024bc <main+0x134>)
 8002468:	4620      	mov	r0, r4
 800246a:	f003 fae3 	bl	8005a34 <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 800246e:	4631      	mov	r1, r6
 8002470:	4620      	mov	r0, r4
 8002472:	f003 fb6f 	bl	8005b54 <HAL_TIM_GenerateEvent>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8002476:	2202      	movs	r2, #2
 8002478:	4911      	ldr	r1, [pc, #68]	; (80024c0 <main+0x138>)
 800247a:	4628      	mov	r0, r5
 800247c:	f001 f908 	bl	8003690 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002480:	4c10      	ldr	r4, [pc, #64]	; (80024c4 <main+0x13c>)
 8002482:	2100      	movs	r1, #0
 8002484:	4620      	mov	r0, r4
 8002486:	f001 fefd 	bl	8004284 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 800248a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800248e:	2200      	movs	r2, #0
 8002490:	4611      	mov	r1, r2
 8002492:	4620      	mov	r0, r4
 8002494:	f001 ff2b 	bl	80042ee <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8002498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800249c:	2200      	movs	r2, #0
 800249e:	4611      	mov	r1, r2
 80024a0:	4808      	ldr	r0, [pc, #32]	; (80024c4 <main+0x13c>)
 80024a2:	f001 ff24 	bl	80042ee <HAL_DAC_SetValue>
  while (1)
 80024a6:	e7f7      	b.n	8002498 <main+0x110>
 80024a8:	2000034c 	.word	0x2000034c
 80024ac:	2000017c 	.word	0x2000017c
 80024b0:	48000800 	.word	0x48000800
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	20000398 	.word	0x20000398
 80024bc:	200003e4 	.word	0x200003e4
 80024c0:	2000008c 	.word	0x2000008c
 80024c4:	200001e8 	.word	0x200001e8

080024c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b500      	push	{lr}
 80024ca:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_MspInit+0x34>)
 80024ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	661a      	str	r2, [r3, #96]	; 0x60
 80024d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024d8:	f002 0201 	and.w	r2, r2, #1
 80024dc:	9200      	str	r2, [sp, #0]
 80024de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024e6:	659a      	str	r2, [r3, #88]	; 0x58
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024f2:	f002 fb19 	bl	8004b28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	b003      	add	sp, #12
 80024f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	b09e      	sub	sp, #120	; 0x78
 8002504:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002506:	2100      	movs	r1, #0
 8002508:	9119      	str	r1, [sp, #100]	; 0x64
 800250a:	911a      	str	r1, [sp, #104]	; 0x68
 800250c:	911b      	str	r1, [sp, #108]	; 0x6c
 800250e:	911c      	str	r1, [sp, #112]	; 0x70
 8002510:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002512:	2254      	movs	r2, #84	; 0x54
 8002514:	a804      	add	r0, sp, #16
 8002516:	f004 fc73 	bl	8006e00 <memset>
  if(hadc->Instance==ADC1)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002520:	d001      	beq.n	8002526 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002522:	b01e      	add	sp, #120	; 0x78
 8002524:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800252a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800252c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002530:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002532:	a804      	add	r0, sp, #16
 8002534:	f002 ff0a 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 8002538:	2800      	cmp	r0, #0
 800253a:	d15f      	bne.n	80025fc <HAL_ADC_MspInit+0xfc>
    __HAL_RCC_ADC12_CLK_ENABLE();
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_ADC_MspInit+0x108>)
 800253e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002544:	64da      	str	r2, [r3, #76]	; 0x4c
 8002546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002548:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800254c:	9200      	str	r2, [sp, #0]
 800254e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002552:	f042 0204 	orr.w	r2, r2, #4
 8002556:	64da      	str	r2, [r3, #76]	; 0x4c
 8002558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800255a:	f002 0204 	and.w	r2, r2, #4
 800255e:	9201      	str	r2, [sp, #4]
 8002560:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	64da      	str	r2, [r3, #76]	; 0x4c
 800256a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800256c:	f002 0201 	and.w	r2, r2, #1
 8002570:	9202      	str	r2, [sp, #8]
 8002572:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002576:	f042 0202 	orr.w	r2, r2, #2
 800257a:	64da      	str	r2, [r3, #76]	; 0x4c
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002586:	2307      	movs	r3, #7
 8002588:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258a:	2603      	movs	r6, #3
 800258c:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2500      	movs	r5, #0
 8002590:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002592:	a919      	add	r1, sp, #100	; 0x64
 8002594:	481d      	ldr	r0, [pc, #116]	; (800260c <HAL_ADC_MspInit+0x10c>)
 8002596:	f002 f933 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800259a:	9619      	str	r6, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800259c:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	a919      	add	r1, sp, #100	; 0x64
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a6:	f002 f92b 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025aa:	2302      	movs	r3, #2
 80025ac:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ae:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	951b      	str	r5, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	a919      	add	r1, sp, #100	; 0x64
 80025b4:	4816      	ldr	r0, [pc, #88]	; (8002610 <HAL_ADC_MspInit+0x110>)
 80025b6:	f002 f923 	bl	8004800 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80025ba:	4816      	ldr	r0, [pc, #88]	; (8002614 <HAL_ADC_MspInit+0x114>)
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_ADC_MspInit+0x118>)
 80025be:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80025c0:	2305      	movs	r3, #5
 80025c2:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c4:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c6:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d0:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d6:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025d8:	2320      	movs	r3, #32
 80025da:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025dc:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025de:	f001 fff7 	bl	80045d0 <HAL_DMA_Init>
 80025e2:	b970      	cbnz	r0, 8002602 <HAL_ADC_MspInit+0x102>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_ADC_MspInit+0x114>)
 80025e6:	6563      	str	r3, [r4, #84]	; 0x54
 80025e8:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	4611      	mov	r1, r2
 80025ee:	2012      	movs	r0, #18
 80025f0:	f001 fddc 	bl	80041ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025f4:	2012      	movs	r0, #18
 80025f6:	f001 fe11 	bl	800421c <HAL_NVIC_EnableIRQ>
}
 80025fa:	e792      	b.n	8002522 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80025fc:	f7ff fc9e 	bl	8001f3c <Error_Handler>
 8002600:	e79c      	b.n	800253c <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8002602:	f7ff fc9b 	bl	8001f3c <Error_Handler>
 8002606:	e7ed      	b.n	80025e4 <HAL_ADC_MspInit+0xe4>
 8002608:	40021000 	.word	0x40021000
 800260c:	48000800 	.word	0x48000800
 8002610:	48000400 	.word	0x48000400
 8002614:	200001fc 	.word	0x200001fc
 8002618:	40020008 	.word	0x40020008

0800261c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800261c:	b530      	push	{r4, r5, lr}
 800261e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	2300      	movs	r3, #0
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	9304      	str	r3, [sp, #16]
 8002626:	9305      	str	r3, [sp, #20]
 8002628:	9306      	str	r3, [sp, #24]
 800262a:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 800262c:	6802      	ldr	r2, [r0, #0]
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_DAC_MspInit+0x98>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002634:	b009      	add	sp, #36	; 0x24
 8002636:	bd30      	pop	{r4, r5, pc}
 8002638:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 800263a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800263e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002644:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002648:	64da      	str	r2, [r3, #76]	; 0x4c
 800264a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800264c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002650:	9201      	str	r2, [sp, #4]
 8002652:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	64da      	str	r2, [r3, #76]	; 0x4c
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	9302      	str	r3, [sp, #8]
 8002664:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002666:	2510      	movs	r5, #16
 8002668:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266a:	2303      	movs	r3, #3
 800266c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	a903      	add	r1, sp, #12
 8002670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002674:	f002 f8c4 	bl	8004800 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8002678:	480f      	ldr	r0, [pc, #60]	; (80026b8 <HAL_DAC_MspInit+0x9c>)
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_DAC_MspInit+0xa0>)
 800267c:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800267e:	2306      	movs	r3, #6
 8002680:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002682:	6085      	str	r5, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800268c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002690:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002696:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002698:	2220      	movs	r2, #32
 800269a:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800269c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800269e:	f001 ff97 	bl	80045d0 <HAL_DMA_Init>
 80026a2:	b918      	cbnz	r0, 80026ac <HAL_DAC_MspInit+0x90>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_DAC_MspInit+0x9c>)
 80026a6:	60a3      	str	r3, [r4, #8]
 80026a8:	629c      	str	r4, [r3, #40]	; 0x28
}
 80026aa:	e7c3      	b.n	8002634 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 80026ac:	f7ff fc46 	bl	8001f3c <Error_Handler>
 80026b0:	e7f8      	b.n	80026a4 <HAL_DAC_MspInit+0x88>
 80026b2:	bf00      	nop
 80026b4:	50000800 	.word	0x50000800
 80026b8:	2000025c 	.word	0x2000025c
 80026bc:	4002001c 	.word	0x4002001c

080026c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c0:	b510      	push	{r4, lr}
 80026c2:	b09c      	sub	sp, #112	; 0x70
 80026c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c6:	2100      	movs	r1, #0
 80026c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80026ca:	9118      	str	r1, [sp, #96]	; 0x60
 80026cc:	9119      	str	r1, [sp, #100]	; 0x64
 80026ce:	911a      	str	r1, [sp, #104]	; 0x68
 80026d0:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026d2:	2254      	movs	r2, #84	; 0x54
 80026d4:	a802      	add	r0, sp, #8
 80026d6:	f004 fb93 	bl	8006e00 <memset>
  if(huart->Instance==LPUART1)
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_UART_MspInit+0x7c>)
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80026e2:	b01c      	add	sp, #112	; 0x70
 80026e4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026e6:	2320      	movs	r3, #32
 80026e8:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ea:	a802      	add	r0, sp, #8
 80026ec:	f002 fe2e 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 80026f0:	bb00      	cbnz	r0, 8002734 <HAL_UART_MspInit+0x74>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_UART_MspInit+0x80>)
 80026f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80026fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026fe:	f002 0201 	and.w	r2, r2, #1
 8002702:	9200      	str	r2, [sp, #0]
 8002704:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	64da      	str	r2, [r3, #76]	; 0x4c
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002718:	230c      	movs	r3, #12
 800271a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2202      	movs	r2, #2
 800271e:	9218      	str	r2, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2200      	movs	r2, #0
 8002722:	9219      	str	r2, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	921a      	str	r2, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002726:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	a917      	add	r1, sp, #92	; 0x5c
 800272a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272e:	f002 f867 	bl	8004800 <HAL_GPIO_Init>
}
 8002732:	e7d6      	b.n	80026e2 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002734:	f7ff fc02 	bl	8001f3c <Error_Handler>
 8002738:	e7db      	b.n	80026f2 <HAL_UART_MspInit+0x32>
 800273a:	bf00      	nop
 800273c:	40008000 	.word	0x40008000
 8002740:	40021000 	.word	0x40021000

08002744 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8002744:	6802      	ldr	r2, [r0, #0]
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_TIM_PWM_MspInit+0x28>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d000      	beq.n	800274e <HAL_TIM_PWM_MspInit+0xa>
 800274c:	4770      	bx	lr
{
 800274e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002750:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002754:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275a:	661a      	str	r2, [r3, #96]	; 0x60
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002766:	b002      	add	sp, #8
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40012c00 	.word	0x40012c00

08002770 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002770:	b530      	push	{r4, r5, lr}
 8002772:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	2300      	movs	r3, #0
 8002776:	9303      	str	r3, [sp, #12]
 8002778:	9304      	str	r3, [sp, #16]
 800277a:	9305      	str	r3, [sp, #20]
 800277c:	9306      	str	r3, [sp, #24]
 800277e:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM2)
 8002780:	6803      	ldr	r3, [r0, #0]
 8002782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002786:	d001      	beq.n	800278c <HAL_TIM_IC_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002788:	b009      	add	sp, #36	; 0x24
 800278a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800278c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	659a      	str	r2, [r3, #88]	; 0x58
 8002798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800279a:	f002 0201 	and.w	r2, r2, #1
 800279e:	9200      	str	r2, [sp, #0]
 80027a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027a4:	f042 0202 	orr.w	r2, r2, #2
 80027a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80027aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ac:	f002 0202 	and.w	r2, r2, #2
 80027b0:	9201      	str	r2, [sp, #4]
 80027b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 80027c6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80027ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2502      	movs	r5, #2
 80027ce:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027d0:	2401      	movs	r4, #1
 80027d2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	a903      	add	r1, sp, #12
 80027d6:	4808      	ldr	r0, [pc, #32]	; (80027f8 <HAL_TIM_IC_MspInit+0x88>)
 80027d8:	f002 f812 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H1_Pin;
 80027dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ea:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80027ec:	a903      	add	r1, sp, #12
 80027ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f2:	f002 f805 	bl	8004800 <HAL_GPIO_Init>
}
 80027f6:	e7c7      	b.n	8002788 <HAL_TIM_IC_MspInit+0x18>
 80027f8:	48000400 	.word	0x48000400

080027fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 80027fc:	6802      	ldr	r2, [r0, #0]
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_TIM_Base_MspInit+0x28>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d000      	beq.n	8002806 <HAL_TIM_Base_MspInit+0xa>
 8002804:	4770      	bx	lr
{
 8002806:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002808:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800280c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	659a      	str	r2, [r3, #88]	; 0x58
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800281e:	b002      	add	sp, #8
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40001400 	.word	0x40001400

08002828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	2300      	movs	r3, #0
 800282e:	9303      	str	r3, [sp, #12]
 8002830:	9304      	str	r3, [sp, #16]
 8002832:	9305      	str	r3, [sp, #20]
 8002834:	9306      	str	r3, [sp, #24]
 8002836:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8002838:	6802      	ldr	r2, [r0, #0]
 800283a:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_TIM_MspPostInit+0xb8>)
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002840:	b008      	add	sp, #32
 8002842:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002844:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800284a:	f042 0204 	orr.w	r2, r2, #4
 800284e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002852:	f002 0204 	and.w	r2, r2, #4
 8002856:	9200      	str	r2, [sp, #0]
 8002858:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	64da      	str	r2, [r3, #76]	; 0x4c
 8002862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002864:	f002 0201 	and.w	r2, r2, #1
 8002868:	9201      	str	r2, [sp, #4]
 800286a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800286e:	f042 0202 	orr.w	r2, r2, #2
 8002872:	64da      	str	r2, [r3, #76]	; 0x4c
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	9302      	str	r3, [sp, #8]
 800287c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800287e:	2308      	movs	r3, #8
 8002880:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2502      	movs	r5, #2
 8002884:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002886:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002888:	a903      	add	r1, sp, #12
 800288a:	4816      	ldr	r0, [pc, #88]	; (80028e4 <HAL_TIM_MspPostInit+0xbc>)
 800288c:	f001 ffb8 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002890:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002894:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2400      	movs	r4, #0
 800289a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800289e:	2606      	movs	r6, #6
 80028a0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	a903      	add	r1, sp, #12
 80028a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a8:	f001 ffaa 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028ac:	2301      	movs	r3, #1
 80028ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028b6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b8:	4e0b      	ldr	r6, [pc, #44]	; (80028e8 <HAL_TIM_MspPostInit+0xc0>)
 80028ba:	a903      	add	r1, sp, #12
 80028bc:	4630      	mov	r0, r6
 80028be:	f001 ff9f 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80028ce:	230c      	movs	r3, #12
 80028d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	eb0d 0103 	add.w	r1, sp, r3
 80028d6:	4630      	mov	r0, r6
 80028d8:	f001 ff92 	bl	8004800 <HAL_GPIO_Init>
}
 80028dc:	e7b0      	b.n	8002840 <HAL_TIM_MspPostInit+0x18>
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	48000800 	.word	0x48000800
 80028e8:	48000400 	.word	0x48000400

080028ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler>

080028ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <HardFault_Handler>

080028f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <MemManage_Handler>

080028f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <BusFault_Handler>

080028f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <UsageFault_Handler>

080028f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f8:	4770      	bx	lr

080028fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	4770      	bx	lr

080028fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fe:	f000 f897 	bl	8002a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002902:	bd08      	pop	{r3, pc}

08002904 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002904:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002906:	4802      	ldr	r0, [pc, #8]	; (8002910 <DMA1_Channel1_IRQHandler+0xc>)
 8002908:	f001 ff18 	bl	800473c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800290c:	bd08      	pop	{r3, pc}
 800290e:	bf00      	nop
 8002910:	200001fc 	.word	0x200001fc

08002914 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002916:	4802      	ldr	r0, [pc, #8]	; (8002920 <DMA1_Channel2_IRQHandler+0xc>)
 8002918:	f001 ff10 	bl	800473c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800291c:	bd08      	pop	{r3, pc}
 800291e:	bf00      	nop
 8002920:	2000025c 	.word	0x2000025c

08002924 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002924:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002926:	4808      	ldr	r0, [pc, #32]	; (8002948 <ADC1_2_IRQHandler+0x24>)
 8002928:	f000 fa06 	bl	8002d38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800292c:	2120      	movs	r1, #32
 800292e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002932:	f002 f85b 	bl	80049ec <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence();
 8002936:	f7fe fb33 	bl	8000fa0 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800293a:	2120      	movs	r1, #32
 800293c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002940:	f002 f854 	bl	80049ec <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002944:	bd08      	pop	{r3, pc}
 8002946:	bf00      	nop
 8002948:	2000017c 	.word	0x2000017c

0800294c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800294c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800294e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002952:	f002 f855 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002956:	bd08      	pop	{r3, pc}

08002958 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002958:	4a03      	ldr	r2, [pc, #12]	; (8002968 <SystemInit+0x10>)
 800295a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800295e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002962:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800296c:	480d      	ldr	r0, [pc, #52]	; (80029a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800296e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002972:	490e      	ldr	r1, [pc, #56]	; (80029ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <LoopForever+0xe>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002988:	4c0b      	ldr	r4, [pc, #44]	; (80029b8 <LoopForever+0x16>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002996:	f7ff ffdf 	bl	8002958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f004 fa0d 	bl	8006db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800299e:	f7ff fcf3 	bl	8002388 <main>

080029a2 <LoopForever>:

LoopForever:
    b LoopForever
 80029a2:	e7fe      	b.n	80029a2 <LoopForever>
  ldr   r0, =_estack
 80029a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80029b0:	0800823c 	.word	0x0800823c
  ldr r2, =_sbss
 80029b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80029b8:	20000434 	.word	0x20000434

080029bc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC3_IRQHandler>
	...

080029c0 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_InitTick+0x44>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	b90b      	cbnz	r3, 80029ca <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80029c8:	4770      	bx	lr
{
 80029ca:	b510      	push	{r4, lr}
 80029cc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_InitTick+0x48>)
 80029d8:	6810      	ldr	r0, [r2, #0]
 80029da:	fbb0 f0f3 	udiv	r0, r0, r3
 80029de:	f001 fc2b 	bl	8004238 <HAL_SYSTICK_Config>
 80029e2:	b968      	cbnz	r0, 8002a00 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e4:	2c0f      	cmp	r4, #15
 80029e6:	d901      	bls.n	80029ec <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80029e8:	2001      	movs	r0, #1
 80029ea:	e00a      	b.n	8002a02 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	4621      	mov	r1, r4
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f001 fbda 	bl	80041ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <HAL_InitTick+0x4c>)
 80029fa:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80029fc:	2000      	movs	r0, #0
 80029fe:	e000      	b.n	8002a02 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
}
 8002a02:	bd10      	pop	{r4, pc}
 8002a04:	20000004 	.word	0x20000004
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000008 	.word	0x20000008

08002a10 <HAL_Init>:
{
 8002a10:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a12:	2003      	movs	r0, #3
 8002a14:	f001 fbb8 	bl	8004188 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff ffd1 	bl	80029c0 <HAL_InitTick>
 8002a1e:	b110      	cbz	r0, 8002a26 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002a20:	2401      	movs	r4, #1
}
 8002a22:	4620      	mov	r0, r4
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	4604      	mov	r4, r0
    HAL_MspInit();
 8002a28:	f7ff fd4e 	bl	80024c8 <HAL_MspInit>
 8002a2c:	e7f9      	b.n	8002a22 <HAL_Init+0x12>
	...

08002a30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <HAL_IncTick+0x10>)
 8002a32:	6813      	ldr	r3, [r2, #0]
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_IncTick+0x14>)
 8002a36:	6809      	ldr	r1, [r1, #0]
 8002a38:	440b      	add	r3, r1
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000430 	.word	0x20000430
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a48:	4b01      	ldr	r3, [pc, #4]	; (8002a50 <HAL_GetTick+0x8>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000430 	.word	0x20000430

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff fff6 	bl	8002a48 <HAL_GetTick>
 8002a5c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002a62:	d002      	beq.n	8002a6a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <HAL_Delay+0x24>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6a:	f7ff ffed 	bl	8002a48 <HAL_GetTick>
 8002a6e:	1b40      	subs	r0, r0, r5
 8002a70:	42a0      	cmp	r0, r4
 8002a72:	d3fa      	bcc.n	8002a6a <HAL_Delay+0x16>
  {
  }
}
 8002a74:	bd38      	pop	{r3, r4, r5, pc}
 8002a76:	bf00      	nop
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b530      	push	{r4, r5, lr}
 8002a7e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a84:	2800      	cmp	r0, #0
 8002a86:	f000 8138 	beq.w	8002cfa <HAL_ADC_Init+0x27e>
 8002a8a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a8c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002a8e:	b313      	cbz	r3, 8002ad6 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a90:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002a98:	d005      	beq.n	8002aa6 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002aa0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002aa4:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa6:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aa8:	6893      	ldr	r3, [r2, #8]
 8002aaa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002aae:	d11f      	bne.n	8002af0 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8002ab0:	6893      	ldr	r3, [r2, #8]
 8002ab2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ab6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac0:	4b8f      	ldr	r3, [pc, #572]	; (8002d00 <HAL_ADC_Init+0x284>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	4a8f      	ldr	r2, [pc, #572]	; (8002d04 <HAL_ADC_Init+0x288>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002ad4:	e009      	b.n	8002aea <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8002ad6:	f7ff fd13 	bl	8002500 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	2300      	movs	r3, #0
 8002adc:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8002ade:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8002ae2:	e7d5      	b.n	8002a90 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002ae4:	9b01      	ldr	r3, [sp, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002aea:	9b01      	ldr	r3, [sp, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002af0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002af2:	6893      	ldr	r3, [r2, #8]
 8002af4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002af8:	d13d      	bne.n	8002b76 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b0a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b0c:	6893      	ldr	r3, [r2, #8]
 8002b0e:	f013 0304 	ands.w	r3, r3, #4
 8002b12:	d000      	beq.n	8002b16 <HAL_ADC_Init+0x9a>
 8002b14:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b16:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002b18:	f011 0f10 	tst.w	r1, #16
 8002b1c:	f040 80e6 	bne.w	8002cec <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 80e3 	bne.w	8002cec <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b32:	6893      	ldr	r3, [r2, #8]
 8002b34:	f013 0f01 	tst.w	r3, #1
 8002b38:	d13e      	bne.n	8002bb8 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b3a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002b3e:	d01c      	beq.n	8002b7a <HAL_ADC_Init+0xfe>
 8002b40:	4b71      	ldr	r3, [pc, #452]	; (8002d08 <HAL_ADC_Init+0x28c>)
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d019      	beq.n	8002b7a <HAL_ADC_Init+0xfe>
 8002b46:	4b71      	ldr	r3, [pc, #452]	; (8002d0c <HAL_ADC_Init+0x290>)
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	f011 0101 	ands.w	r1, r1, #1
 8002b4e:	d000      	beq.n	8002b52 <HAL_ADC_Init+0xd6>
 8002b50:	2101      	movs	r1, #1
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_ADC_Init+0x294>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f013 0301 	ands.w	r3, r3, #1
 8002b5a:	d000      	beq.n	8002b5e <HAL_ADC_Init+0xe2>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	496c      	ldr	r1, [pc, #432]	; (8002d14 <HAL_ADC_Init+0x298>)
 8002b62:	6889      	ldr	r1, [r1, #8]
 8002b64:	f011 0101 	ands.w	r1, r1, #1
 8002b68:	d000      	beq.n	8002b6c <HAL_ADC_Init+0xf0>
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	e012      	b.n	8002b9c <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b76:	2000      	movs	r0, #0
 8002b78:	e7c8      	b.n	8002b0c <HAL_ADC_Init+0x90>
 8002b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f013 0301 	ands.w	r3, r3, #1
 8002b84:	d000      	beq.n	8002b88 <HAL_ADC_Init+0x10c>
 8002b86:	2301      	movs	r3, #1
 8002b88:	495f      	ldr	r1, [pc, #380]	; (8002d08 <HAL_ADC_Init+0x28c>)
 8002b8a:	6889      	ldr	r1, [r1, #8]
 8002b8c:	f011 0101 	ands.w	r1, r1, #1
 8002b90:	d000      	beq.n	8002b94 <HAL_ADC_Init+0x118>
 8002b92:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b94:	430b      	orrs	r3, r1
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b163      	cbz	r3, 8002bb8 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b9e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002ba2:	d072      	beq.n	8002c8a <HAL_ADC_Init+0x20e>
 8002ba4:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_ADC_Init+0x28c>)
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d06d      	beq.n	8002c86 <HAL_ADC_Init+0x20a>
 8002baa:	495b      	ldr	r1, [pc, #364]	; (8002d18 <HAL_ADC_Init+0x29c>)
 8002bac:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bae:	688a      	ldr	r2, [r1, #8]
 8002bb0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb8:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 8002bba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bbc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8002bc0:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8002bc2:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8002bc4:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8002bc6:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bc8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bd0:	2a01      	cmp	r2, #1
 8002bd2:	d05c      	beq.n	8002c8e <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bd6:	b122      	cbz	r2, 8002be2 <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd8:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002bde:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002be0:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002be2:	6821      	ldr	r1, [r4, #0]
 8002be4:	68cd      	ldr	r5, [r1, #12]
 8002be6:	4a4d      	ldr	r2, [pc, #308]	; (8002d1c <HAL_ADC_Init+0x2a0>)
 8002be8:	402a      	ands	r2, r5
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	6913      	ldr	r3, [r2, #16]
 8002bf2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bfc:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bfe:	688b      	ldr	r3, [r1, #8]
 8002c00:	f013 0304 	ands.w	r3, r3, #4
 8002c04:	d000      	beq.n	8002c08 <HAL_ADC_Init+0x18c>
 8002c06:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c08:	688a      	ldr	r2, [r1, #8]
 8002c0a:	f012 0208 	ands.w	r2, r2, #8
 8002c0e:	d000      	beq.n	8002c12 <HAL_ADC_Init+0x196>
 8002c10:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c12:	bb4b      	cbnz	r3, 8002c68 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c14:	bb42      	cbnz	r2, 8002c68 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c16:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c18:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002c1c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c1e:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c22:	68cb      	ldr	r3, [r1, #12]
 8002c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c28:	f023 0302 	bic.w	r3, r3, #2
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c30:	6923      	ldr	r3, [r4, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d030      	beq.n	8002c98 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	6913      	ldr	r3, [r2, #16]
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002c46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c4e:	6921      	ldr	r1, [r4, #16]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c56:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d02b      	beq.n	8002cb6 <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	6913      	ldr	r3, [r2, #16]
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c68:	6963      	ldr	r3, [r4, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d035      	beq.n	8002cda <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002c72:	f023 030f 	bic.w	r3, r3, #15
 8002c76:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002c84:	e037      	b.n	8002cf6 <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c86:	4926      	ldr	r1, [pc, #152]	; (8002d20 <HAL_ADC_Init+0x2a4>)
 8002c88:	e790      	b.n	8002bac <HAL_ADC_Init+0x130>
 8002c8a:	4925      	ldr	r1, [pc, #148]	; (8002d20 <HAL_ADC_Init+0x2a4>)
 8002c8c:	e78e      	b.n	8002bac <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c90:	3a01      	subs	r2, #1
 8002c92:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002c96:	e79d      	b.n	8002bd4 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	6913      	ldr	r3, [r2, #16]
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002ca8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cb4:	e7cf      	b.n	8002c56 <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cb6:	6821      	ldr	r1, [r4, #0]
 8002cb8:	690b      	ldr	r3, [r1, #16]
 8002cba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cbe:	f023 0304 	bic.w	r3, r3, #4
 8002cc2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002cc4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002cc6:	432a      	orrs	r2, r5
 8002cc8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8002cca:	432a      	orrs	r2, r5
 8002ccc:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8002cce:	432a      	orrs	r2, r5
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	610b      	str	r3, [r1, #16]
 8002cd8:	e7c6      	b.n	8002c68 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cda:	6821      	ldr	r1, [r4, #0]
 8002cdc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002cde:	f023 030f 	bic.w	r3, r3, #15
 8002ce2:	6a22      	ldr	r2, [r4, #32]
 8002ce4:	3a01      	subs	r2, #1
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	630b      	str	r3, [r1, #48]	; 0x30
 8002cea:	e7c5      	b.n	8002c78 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002cf6:	b003      	add	sp, #12
 8002cf8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	e7fb      	b.n	8002cf6 <HAL_ADC_Init+0x27a>
 8002cfe:	bf00      	nop
 8002d00:	20000000 	.word	0x20000000
 8002d04:	053e2d63 	.word	0x053e2d63
 8002d08:	50000100 	.word	0x50000100
 8002d0c:	50000400 	.word	0x50000400
 8002d10:	50000500 	.word	0x50000500
 8002d14:	50000600 	.word	0x50000600
 8002d18:	50000700 	.word	0x50000700
 8002d1c:	fff04007 	.word	0xfff04007
 8002d20:	50000300 	.word	0x50000300

08002d24 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d24:	4770      	bx	lr

08002d26 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d26:	4770      	bx	lr

08002d28 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d28:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d2a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002d2c:	f7ff fffb 	bl	8002d26 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d30:	bd08      	pop	{r3, pc}

08002d32 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_ErrorCallback>:
}
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_ADC_IRQHandler>:
{
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d40:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d46:	d046      	beq.n	8002dd6 <HAL_ADC_IRQHandler+0x9e>
 8002d48:	4a97      	ldr	r2, [pc, #604]	; (8002fa8 <HAL_ADC_IRQHandler+0x270>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d041      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x9a>
 8002d4e:	4b97      	ldr	r3, [pc, #604]	; (8002fac <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d50:	689d      	ldr	r5, [r3, #8]
 8002d52:	f005 051f 	and.w	r5, r5, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d56:	f016 0f02 	tst.w	r6, #2
 8002d5a:	d010      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x46>
 8002d5c:	f017 0f02 	tst.w	r7, #2
 8002d60:	d00d      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d64:	f013 0f10 	tst.w	r3, #16
 8002d68:	d103      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d70:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d72:	4620      	mov	r0, r4
 8002d74:	f000 fde4 	bl	8003940 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d7e:	f016 0f04 	tst.w	r6, #4
 8002d82:	d002      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x52>
 8002d84:	f017 0f04 	tst.w	r7, #4
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x5e>
 8002d8a:	f016 0f08 	tst.w	r6, #8
 8002d8e:	d055      	beq.n	8002e3c <HAL_ADC_IRQHandler+0x104>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d90:	f017 0f08 	tst.w	r7, #8
 8002d94:	d052      	beq.n	8002e3c <HAL_ADC_IRQHandler+0x104>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d96:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d98:	f013 0f10 	tst.w	r3, #16
 8002d9c:	d103      	bne.n	8002da6 <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da4:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002da6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002dae:	d13f      	bne.n	8002e30 <HAL_ADC_IRQHandler+0xf8>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002db0:	4a7d      	ldr	r2, [pc, #500]	; (8002fa8 <HAL_ADC_IRQHandler+0x270>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d014      	beq.n	8002de0 <HAL_ADC_IRQHandler+0xa8>
 8002db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_ADC_IRQHandler+0xa2>
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d010      	beq.n	8002de6 <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dc4:	b17d      	cbz	r5, 8002de6 <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dc6:	2d05      	cmp	r5, #5
 8002dc8:	d00d      	beq.n	8002de6 <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dca:	2d09      	cmp	r5, #9
 8002dcc:	d00b      	beq.n	8002de6 <HAL_ADC_IRQHandler+0xae>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dce:	68d2      	ldr	r2, [r2, #12]
 8002dd0:	e00a      	b.n	8002de8 <HAL_ADC_IRQHandler+0xb0>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd2:	4b77      	ldr	r3, [pc, #476]	; (8002fb0 <HAL_ADC_IRQHandler+0x278>)
 8002dd4:	e7bc      	b.n	8002d50 <HAL_ADC_IRQHandler+0x18>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_ADC_IRQHandler+0x278>)
 8002dd8:	e7ba      	b.n	8002d50 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dda:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002dde:	e7ef      	b.n	8002dc0 <HAL_ADC_IRQHandler+0x88>
 8002de0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002de4:	e7ec      	b.n	8002dc0 <HAL_ADC_IRQHandler+0x88>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002de6:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002de8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002dec:	d120      	bne.n	8002e30 <HAL_ADC_IRQHandler+0xf8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f012 0f08 	tst.w	r2, #8
 8002df4:	d01c      	beq.n	8002e30 <HAL_ADC_IRQHandler+0xf8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	f012 0f04 	tst.w	r2, #4
 8002dfc:	d110      	bne.n	8002e20 <HAL_ADC_IRQHandler+0xe8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	f022 020c 	bic.w	r2, r2, #12
 8002e04:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0c:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e10:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002e14:	d10c      	bne.n	8002e30 <HAL_ADC_IRQHandler+0xf8>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002e1e:	e007      	b.n	8002e30 <HAL_ADC_IRQHandler+0xf8>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e22:	f043 0310 	orr.w	r3, r3, #16
 8002e26:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7ff ff77 	bl	8002d24 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	220c      	movs	r2, #12
 8002e3a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e3c:	f016 0f20 	tst.w	r6, #32
 8002e40:	d002      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x110>
 8002e42:	f017 0f20 	tst.w	r7, #32
 8002e46:	d105      	bne.n	8002e54 <HAL_ADC_IRQHandler+0x11c>
 8002e48:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002e4c:	d063      	beq.n	8002f16 <HAL_ADC_IRQHandler+0x1de>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e4e:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002e52:	d060      	beq.n	8002f16 <HAL_ADC_IRQHandler+0x1de>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e56:	f013 0f10 	tst.w	r3, #16
 8002e5a:	d103      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x12c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e62:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e64:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e68:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8002e6c:	d116      	bne.n	8002e9c <HAL_ADC_IRQHandler+0x164>
 8002e6e:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002e76:	d113      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x168>
 8002e78:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e7a:	4a4b      	ldr	r2, [pc, #300]	; (8002fa8 <HAL_ADC_IRQHandler+0x270>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d014      	beq.n	8002eaa <HAL_ADC_IRQHandler+0x172>
 8002e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00d      	beq.n	8002ea4 <HAL_ADC_IRQHandler+0x16c>
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d010      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e8e:	b17d      	cbz	r5, 8002eb0 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e90:	2d06      	cmp	r5, #6
 8002e92:	d00d      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x178>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e94:	2d07      	cmp	r5, #7
 8002e96:	d00b      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x178>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	e00a      	b.n	8002eb2 <HAL_ADC_IRQHandler+0x17a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	e7e7      	b.n	8002e70 <HAL_ADC_IRQHandler+0x138>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	e7ea      	b.n	8002e7a <HAL_ADC_IRQHandler+0x142>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ea4:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002ea8:	e7ef      	b.n	8002e8a <HAL_ADC_IRQHandler+0x152>
 8002eaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002eae:	e7ec      	b.n	8002e8a <HAL_ADC_IRQHandler+0x152>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002eb0:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002eb2:	b351      	cbz	r1, 8002f0a <HAL_ADC_IRQHandler+0x1d2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002eb4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002eb8:	d003      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x18a>
 8002eba:	b330      	cbz	r0, 8002f0a <HAL_ADC_IRQHandler+0x1d2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002ebc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002ec0:	d123      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x1d2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ec8:	d01f      	beq.n	8002f0a <HAL_ADC_IRQHandler+0x1d2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002eca:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002ece:	d11c      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x1d2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	f012 0f08 	tst.w	r2, #8
 8002ed6:	d110      	bne.n	8002efa <HAL_ADC_IRQHandler+0x1c2>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ede:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ee0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ee6:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ee8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002eea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002eee:	d10c      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x1d2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002ef8:	e007      	b.n	8002f0a <HAL_ADC_IRQHandler+0x1d2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002efc:	f043 0310 	orr.w	r3, r3, #16
 8002f00:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f000 fd14 	bl	8003938 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	2260      	movs	r2, #96	; 0x60
 8002f14:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f16:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002f1a:	d002      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x1ea>
 8002f1c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002f20:	d136      	bne.n	8002f90 <HAL_ADC_IRQHandler+0x258>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f22:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002f26:	d002      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x1f6>
 8002f28:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002f2c:	d142      	bne.n	8002fb4 <HAL_ADC_IRQHandler+0x27c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f2e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002f32:	d002      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x202>
 8002f34:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002f38:	d148      	bne.n	8002fcc <HAL_ADC_IRQHandler+0x294>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f3a:	f016 0f10 	tst.w	r6, #16
 8002f3e:	d020      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x24a>
 8002f40:	f017 0f10 	tst.w	r7, #16
 8002f44:	d01d      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x24a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f48:	b16b      	cbz	r3, 8002f66 <HAL_ADC_IRQHandler+0x22e>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	d04e      	beq.n	8002fec <HAL_ADC_IRQHandler+0x2b4>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f54:	d048      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x2b0>
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <HAL_ADC_IRQHandler+0x270>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d043      	beq.n	8002fe4 <HAL_ADC_IRQHandler+0x2ac>
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_ADC_IRQHandler+0x274>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8002f64:	d00a      	beq.n	8002f7c <HAL_ADC_IRQHandler+0x244>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6c:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7ff fedc 	bl	8002d34 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	2210      	movs	r2, #16
 8002f80:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f82:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002f86:	d002      	beq.n	8002f8e <HAL_ADC_IRQHandler+0x256>
 8002f88:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8002f8c:	d134      	bne.n	8002ff8 <HAL_ADC_IRQHandler+0x2c0>
}
 8002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f96:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff feca 	bl	8002d32 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e7bd      	b.n	8002f22 <HAL_ADC_IRQHandler+0x1ea>
 8002fa6:	bf00      	nop
 8002fa8:	50000100 	.word	0x50000100
 8002fac:	50000700 	.word	0x50000700
 8002fb0:	50000300 	.word	0x50000300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fba:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 fcbd 	bl	800393c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e7b0      	b.n	8002f2e <HAL_ADC_IRQHandler+0x1f6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fcc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f000 fcb2 	bl	800393e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e7aa      	b.n	8002f3a <HAL_ADC_IRQHandler+0x202>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_ADC_IRQHandler+0x2e0>)
 8002fe6:	e7ba      	b.n	8002f5e <HAL_ADC_IRQHandler+0x226>
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_ADC_IRQHandler+0x2e0>)
 8002fea:	e7b8      	b.n	8002f5e <HAL_ADC_IRQHandler+0x226>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f013 0f01 	tst.w	r3, #1
 8002ff4:	d0c2      	beq.n	8002f7c <HAL_ADC_IRQHandler+0x244>
 8002ff6:	e7b6      	b.n	8002f66 <HAL_ADC_IRQHandler+0x22e>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ff8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffe:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003000:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300e:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003010:	4620      	mov	r0, r4
 8003012:	f000 fc92 	bl	800393a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8003016:	e7ba      	b.n	8002f8e <HAL_ADC_IRQHandler+0x256>
 8003018:	50000300 	.word	0x50000300

0800301c <ADC_DMAConvCplt>:
{
 800301c:	b508      	push	{r3, lr}
 800301e:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003020:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003022:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003024:	f012 0f50 	tst.w	r2, #80	; 0x50
 8003028:	d130      	bne.n	800308c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800302a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800302c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003030:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003032:	6803      	ldr	r3, [r0, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f012 0f08 	tst.w	r2, #8
 800303a:	d014      	beq.n	8003066 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003042:	d120      	bne.n	8003086 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800304a:	d11c      	bne.n	8003086 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800304c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800304e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003052:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003054:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003056:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800305a:	d114      	bne.n	8003086 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800305c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003064:	e00f      	b.n	8003086 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f013 0f02 	tst.w	r3, #2
 800306c:	d10b      	bne.n	8003086 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800306e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003074:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003076:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003078:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800307c:	d103      	bne.n	8003086 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800307e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8003086:	f7ff fe4d 	bl	8002d24 <HAL_ADC_ConvCpltCallback>
}
 800308a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800308c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800308e:	f012 0f10 	tst.w	r2, #16
 8003092:	d104      	bne.n	800309e <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003094:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003098:	4618      	mov	r0, r3
 800309a:	4790      	blx	r2
}
 800309c:	e7f5      	b.n	800308a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 800309e:	f7ff fe49 	bl	8002d34 <HAL_ADC_ErrorCallback>
 80030a2:	e7f2      	b.n	800308a <ADC_DMAConvCplt+0x6e>

080030a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030a4:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a6:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80030aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ae:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030b8:	f7ff fe3c 	bl	8002d34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030bc:	bd08      	pop	{r3, pc}
	...

080030c0 <HAL_ADC_ConfigChannel>:
{
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2200      	movs	r2, #0
 80030c6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80030c8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80030cc:	2a01      	cmp	r2, #1
 80030ce:	f000 8284 	beq.w	80035da <HAL_ADC_ConfigChannel+0x51a>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2201      	movs	r2, #1
 80030d6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030da:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030dc:	68a8      	ldr	r0, [r5, #8]
 80030de:	f010 0f04 	tst.w	r0, #4
 80030e2:	d009      	beq.n	80030f8 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030e6:	f042 0220 	orr.w	r2, r2, #32
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80030ec:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80030f4:	b003      	add	sp, #12
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030f8:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030fa:	3530      	adds	r5, #48	; 0x30
 80030fc:	0a22      	lsrs	r2, r4, #8
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003104:	58a8      	ldr	r0, [r5, r2]
 8003106:	f004 0e1f 	and.w	lr, r4, #31
 800310a:	241f      	movs	r4, #31
 800310c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003110:	ea20 0004 	bic.w	r0, r0, r4
 8003114:	680c      	ldr	r4, [r1, #0]
 8003116:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 800311a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800311e:	ea40 000c 	orr.w	r0, r0, ip
 8003122:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003124:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003126:	6882      	ldr	r2, [r0, #8]
 8003128:	f012 0204 	ands.w	r2, r2, #4
 800312c:	d000      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x70>
 800312e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003130:	6884      	ldr	r4, [r0, #8]
 8003132:	f014 0408 	ands.w	r4, r4, #8
 8003136:	d000      	beq.n	800313a <HAL_ADC_ConfigChannel+0x7a>
 8003138:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800313a:	2a00      	cmp	r2, #0
 800313c:	d150      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800313e:	2c00      	cmp	r4, #0
 8003140:	d14e      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003142:	688f      	ldr	r7, [r1, #8]
 8003144:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8003148:	f000 8086 	beq.w	8003258 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800314c:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800314e:	3014      	adds	r0, #20
 8003150:	0e72      	lsrs	r2, r6, #25
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003158:	5885      	ldr	r5, [r0, r2]
 800315a:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 800315e:	f04f 0c07 	mov.w	ip, #7
 8003162:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003166:	ea25 0c0c 	bic.w	ip, r5, ip
 800316a:	fa07 f50e 	lsl.w	r5, r7, lr
 800316e:	ea4c 0505 	orr.w	r5, ip, r5
 8003172:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003174:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003176:	6942      	ldr	r2, [r0, #20]
 8003178:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800317c:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800317e:	694d      	ldr	r5, [r1, #20]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	68c2      	ldr	r2, [r0, #12]
 8003184:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003188:	0052      	lsls	r2, r2, #1
 800318a:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800318e:	690e      	ldr	r6, [r1, #16]
 8003190:	2e04      	cmp	r6, #4
 8003192:	d079      	beq.n	8003288 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003194:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8003196:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800319a:	4dae      	ldr	r5, [pc, #696]	; (8003454 <HAL_ADC_ConfigChannel+0x394>)
 800319c:	403d      	ands	r5, r7
 800319e:	680f      	ldr	r7, [r1, #0]
 80031a0:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80031a4:	433a      	orrs	r2, r7
 80031a6:	4315      	orrs	r5, r2
 80031a8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80031ac:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	690e      	ldr	r6, [r1, #16]
 80031b4:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b6:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80031b8:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80031bc:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80031c0:	4328      	orrs	r0, r5
 80031c2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	690d      	ldr	r5, [r1, #16]
 80031ca:	7f08      	ldrb	r0, [r1, #28]
 80031cc:	2801      	cmp	r0, #1
 80031ce:	d058      	beq.n	8003282 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d0:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80031d2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80031d6:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80031da:	4304      	orrs	r4, r0
 80031dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e0:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031e2:	6890      	ldr	r0, [r2, #8]
 80031e4:	f010 0f01 	tst.w	r0, #1
 80031e8:	d112      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031ea:	6808      	ldr	r0, [r1, #0]
 80031ec:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80031ee:	4c9a      	ldr	r4, [pc, #616]	; (8003458 <HAL_ADC_ConfigChannel+0x398>)
 80031f0:	42a5      	cmp	r5, r4
 80031f2:	f000 80b1 	beq.w	8003358 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 80031f6:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80031fa:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80031fe:	ea24 0000 	bic.w	r0, r4, r0
 8003202:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003206:	68c8      	ldr	r0, [r1, #12]
 8003208:	4a93      	ldr	r2, [pc, #588]	; (8003458 <HAL_ADC_ConfigChannel+0x398>)
 800320a:	4290      	cmp	r0, r2
 800320c:	f000 80ac 	beq.w	8003368 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003210:	680a      	ldr	r2, [r1, #0]
 8003212:	4992      	ldr	r1, [pc, #584]	; (800345c <HAL_ADC_ConfigChannel+0x39c>)
 8003214:	420a      	tst	r2, r1
 8003216:	f000 81da 	beq.w	80035ce <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003220:	f000 8173 	beq.w	800350a <HAL_ADC_ConfigChannel+0x44a>
 8003224:	488e      	ldr	r0, [pc, #568]	; (8003460 <HAL_ADC_ConfigChannel+0x3a0>)
 8003226:	4281      	cmp	r1, r0
 8003228:	f000 816c 	beq.w	8003504 <HAL_ADC_ConfigChannel+0x444>
 800322c:	488d      	ldr	r0, [pc, #564]	; (8003464 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800322e:	6880      	ldr	r0, [r0, #8]
 8003230:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003234:	4d8c      	ldr	r5, [pc, #560]	; (8003468 <HAL_ADC_ConfigChannel+0x3a8>)
 8003236:	42aa      	cmp	r2, r5
 8003238:	f000 8169 	beq.w	800350e <HAL_ADC_ConfigChannel+0x44e>
 800323c:	4d8b      	ldr	r5, [pc, #556]	; (800346c <HAL_ADC_ConfigChannel+0x3ac>)
 800323e:	42aa      	cmp	r2, r5
 8003240:	f000 8165 	beq.w	800350e <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003244:	4d8a      	ldr	r5, [pc, #552]	; (8003470 <HAL_ADC_ConfigChannel+0x3b0>)
 8003246:	42aa      	cmp	r2, r5
 8003248:	f000 8194 	beq.w	8003574 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800324c:	4d89      	ldr	r5, [pc, #548]	; (8003474 <HAL_ADC_ConfigChannel+0x3b4>)
 800324e:	42aa      	cmp	r2, r5
 8003250:	f000 81a8 	beq.w	80035a4 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003254:	2000      	movs	r0, #0
 8003256:	e74a      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003258:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800325a:	3014      	adds	r0, #20
 800325c:	0e6a      	lsrs	r2, r5, #25
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003264:	5886      	ldr	r6, [r0, r2]
 8003266:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800326a:	2707      	movs	r7, #7
 800326c:	fa07 f505 	lsl.w	r5, r7, r5
 8003270:	ea26 0505 	bic.w	r5, r6, r5
 8003274:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003276:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003278:	6942      	ldr	r2, [r0, #20]
 800327a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800327e:	6142      	str	r2, [r0, #20]
}
 8003280:	e77d      	b.n	800317e <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003282:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003286:	e7a3      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003288:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800328a:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800328c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003290:	680a      	ldr	r2, [r1, #0]
 8003292:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003296:	bb85      	cbnz	r5, 80032fa <HAL_ADC_ConfigChannel+0x23a>
 8003298:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800329c:	4294      	cmp	r4, r2
 800329e:	d034      	beq.n	800330a <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032a0:	681c      	ldr	r4, [r3, #0]
 80032a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80032a6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032aa:	680a      	ldr	r2, [r1, #0]
 80032ac:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80032b0:	bb85      	cbnz	r5, 8003314 <HAL_ADC_ConfigChannel+0x254>
 80032b2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032b6:	4290      	cmp	r0, r2
 80032b8:	d034      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ba:	681c      	ldr	r4, [r3, #0]
 80032bc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80032be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80032c0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032c4:	680a      	ldr	r2, [r1, #0]
 80032c6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80032ca:	bb85      	cbnz	r5, 800332e <HAL_ADC_ConfigChannel+0x26e>
 80032cc:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032d0:	4290      	cmp	r0, r2
 80032d2:	d034      	beq.n	800333e <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80032d8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80032da:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032de:	680a      	ldr	r2, [r1, #0]
 80032e0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80032e4:	bb85      	cbnz	r5, 8003348 <HAL_ADC_ConfigChannel+0x288>
 80032e6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ea:	4290      	cmp	r0, r2
 80032ec:	f47f af78 	bne.w	80031e0 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 80032f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80032f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032f6:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 80032f8:	e772      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x120>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032fe:	b112      	cbz	r2, 8003306 <HAL_ADC_ConfigChannel+0x246>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	e7ca      	b.n	800329c <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8003306:	2220      	movs	r2, #32
 8003308:	e7c8      	b.n	800329c <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 800330a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800330c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003310:	6602      	str	r2, [r0, #96]	; 0x60
}
 8003312:	e7c5      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003318:	b112      	cbz	r2, 8003320 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 800331a:	fab2 f282 	clz	r2, r2
 800331e:	e7ca      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8003320:	2220      	movs	r2, #32
 8003322:	e7c8      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8003324:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003326:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800332a:	6662      	str	r2, [r4, #100]	; 0x64
}
 800332c:	e7c5      	b.n	80032ba <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003332:	b112      	cbz	r2, 800333a <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8003334:	fab2 f282 	clz	r2, r2
 8003338:	e7ca      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 800333a:	2220      	movs	r2, #32
 800333c:	e7c8      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 800333e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003340:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003344:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003346:	e7c5      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800334c:	b112      	cbz	r2, 8003354 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	e7ca      	b.n	80032ea <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8003354:	2220      	movs	r2, #32
 8003356:	e7c8      	b.n	80032ea <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8003358:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800335c:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003360:	4320      	orrs	r0, r4
 8003362:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8003366:	e74e      	b.n	8003206 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003368:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800336a:	680a      	ldr	r2, [r1, #0]
 800336c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003370:	2d00      	cmp	r5, #0
 8003372:	d138      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x326>
 8003374:	0e90      	lsrs	r0, r2, #26
 8003376:	3001      	adds	r0, #1
 8003378:	f000 001f 	and.w	r0, r0, #31
 800337c:	2809      	cmp	r0, #9
 800337e:	bf8c      	ite	hi
 8003380:	2000      	movhi	r0, #0
 8003382:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003384:	2800      	cmp	r0, #0
 8003386:	d077      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003388:	2d00      	cmp	r5, #0
 800338a:	d13b      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x344>
 800338c:	0e90      	lsrs	r0, r2, #26
 800338e:	3001      	adds	r0, #1
 8003390:	0680      	lsls	r0, r0, #26
 8003392:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003396:	2d00      	cmp	r5, #0
 8003398:	d140      	bne.n	800341c <HAL_ADC_ConfigChannel+0x35c>
 800339a:	0e96      	lsrs	r6, r2, #26
 800339c:	3601      	adds	r6, #1
 800339e:	f006 071f 	and.w	r7, r6, #31
 80033a2:	2601      	movs	r6, #1
 80033a4:	40be      	lsls	r6, r7
 80033a6:	4330      	orrs	r0, r6
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	d145      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x378>
 80033ac:	0e92      	lsrs	r2, r2, #26
 80033ae:	3201      	adds	r2, #1
 80033b0:	f002 021f 	and.w	r2, r2, #31
 80033b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80033b8:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ba:	4302      	orrs	r2, r0
 80033bc:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033be:	f104 0614 	add.w	r6, r4, #20
 80033c2:	0e55      	lsrs	r5, r2, #25
 80033c4:	00ad      	lsls	r5, r5, #2
 80033c6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80033ca:	5974      	ldr	r4, [r6, r5]
 80033cc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80033d0:	f04f 0c07 	mov.w	ip, #7
 80033d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80033d8:	ea24 0c0c 	bic.w	ip, r4, ip
 80033dc:	4090      	lsls	r0, r2
 80033de:	ea4c 0000 	orr.w	r0, ip, r0
 80033e2:	5170      	str	r0, [r6, r5]
}
 80033e4:	e714      	b.n	8003210 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80033ea:	b148      	cbz	r0, 8003400 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 80033ec:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033f0:	3001      	adds	r0, #1
 80033f2:	f000 001f 	and.w	r0, r0, #31
 80033f6:	2809      	cmp	r0, #9
 80033f8:	bf8c      	ite	hi
 80033fa:	2000      	movhi	r0, #0
 80033fc:	2001      	movls	r0, #1
 80033fe:	e7c1      	b.n	8003384 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8003400:	2020      	movs	r0, #32
 8003402:	e7f5      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003408:	b130      	cbz	r0, 8003418 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800340a:	fab0 f080 	clz	r0, r0
 800340e:	3001      	adds	r0, #1
 8003410:	0680      	lsls	r0, r0, #26
 8003412:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003416:	e7be      	b.n	8003396 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8003418:	2020      	movs	r0, #32
 800341a:	e7f8      	b.n	800340e <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003420:	b146      	cbz	r6, 8003434 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8003422:	fab6 f686 	clz	r6, r6
 8003426:	3601      	adds	r6, #1
 8003428:	f006 061f 	and.w	r6, r6, #31
 800342c:	2701      	movs	r7, #1
 800342e:	fa07 f606 	lsl.w	r6, r7, r6
 8003432:	e7b8      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8003434:	2620      	movs	r6, #32
 8003436:	e7f6      	b.n	8003426 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800343c:	b142      	cbz	r2, 8003450 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800343e:	fab2 f282 	clz	r2, r2
 8003442:	3201      	adds	r2, #1
 8003444:	f002 021f 	and.w	r2, r2, #31
 8003448:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800344c:	0512      	lsls	r2, r2, #20
 800344e:	e7b4      	b.n	80033ba <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003450:	2220      	movs	r2, #32
 8003452:	e7f6      	b.n	8003442 <HAL_ADC_ConfigChannel+0x382>
 8003454:	03fff000 	.word	0x03fff000
 8003458:	407f0000 	.word	0x407f0000
 800345c:	80080000 	.word	0x80080000
 8003460:	50000100 	.word	0x50000100
 8003464:	50000700 	.word	0x50000700
 8003468:	c3210000 	.word	0xc3210000
 800346c:	90c00010 	.word	0x90c00010
 8003470:	c7520000 	.word	0xc7520000
 8003474:	cb840000 	.word	0xcb840000
 8003478:	b9cd      	cbnz	r5, 80034ae <HAL_ADC_ConfigChannel+0x3ee>
 800347a:	0e90      	lsrs	r0, r2, #26
 800347c:	3001      	adds	r0, #1
 800347e:	0680      	lsls	r0, r0, #26
 8003480:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003484:	b9fd      	cbnz	r5, 80034c6 <HAL_ADC_ConfigChannel+0x406>
 8003486:	0e96      	lsrs	r6, r2, #26
 8003488:	3601      	adds	r6, #1
 800348a:	f006 071f 	and.w	r7, r6, #31
 800348e:	2601      	movs	r6, #1
 8003490:	40be      	lsls	r6, r7
 8003492:	4330      	orrs	r0, r6
 8003494:	bb2d      	cbnz	r5, 80034e2 <HAL_ADC_ConfigChannel+0x422>
 8003496:	0e92      	lsrs	r2, r2, #26
 8003498:	3201      	adds	r2, #1
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034a2:	3a1e      	subs	r2, #30
 80034a4:	0512      	lsls	r2, r2, #20
 80034a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034aa:	4302      	orrs	r2, r0
 80034ac:	e786      	b.n	80033bc <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80034b2:	b130      	cbz	r0, 80034c2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80034b4:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b8:	3001      	adds	r0, #1
 80034ba:	0680      	lsls	r0, r0, #26
 80034bc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80034c0:	e7e0      	b.n	8003484 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 80034c2:	2020      	movs	r0, #32
 80034c4:	e7f8      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80034ca:	b146      	cbz	r6, 80034de <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 80034cc:	fab6 f686 	clz	r6, r6
 80034d0:	3601      	adds	r6, #1
 80034d2:	f006 061f 	and.w	r6, r6, #31
 80034d6:	2701      	movs	r7, #1
 80034d8:	fa07 f606 	lsl.w	r6, r7, r6
 80034dc:	e7d9      	b.n	8003492 <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 80034de:	2620      	movs	r6, #32
 80034e0:	e7f6      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80034e6:	b15a      	cbz	r2, 8003500 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	3201      	adds	r2, #1
 80034ee:	f002 021f 	and.w	r2, r2, #31
 80034f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034f6:	3a1e      	subs	r2, #30
 80034f8:	0512      	lsls	r2, r2, #20
 80034fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80034fe:	e7d4      	b.n	80034aa <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8003500:	2220      	movs	r2, #32
 8003502:	e7f3      	b.n	80034ec <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003504:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003508:	e691      	b.n	800322e <HAL_ADC_ConfigChannel+0x16e>
 800350a:	4835      	ldr	r0, [pc, #212]	; (80035e0 <HAL_ADC_ConfigChannel+0x520>)
 800350c:	e68f      	b.n	800322e <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800350e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003512:	f47f ae97 	bne.w	8003244 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003516:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800351a:	d004      	beq.n	8003526 <HAL_ADC_ConfigChannel+0x466>
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_ADC_ConfigChannel+0x524>)
 800351e:	4291      	cmp	r1, r2
 8003520:	d001      	beq.n	8003526 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003522:	2000      	movs	r0, #0
 8003524:	e5e3      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003526:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800352a:	d019      	beq.n	8003560 <HAL_ADC_ConfigChannel+0x4a0>
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <HAL_ADC_ConfigChannel+0x528>)
 800352e:	4291      	cmp	r1, r2
 8003530:	d014      	beq.n	800355c <HAL_ADC_ConfigChannel+0x49c>
 8003532:	492e      	ldr	r1, [pc, #184]	; (80035ec <HAL_ADC_ConfigChannel+0x52c>)
 8003534:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003538:	688a      	ldr	r2, [r1, #8]
 800353a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800353e:	4314      	orrs	r4, r2
 8003540:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003542:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <HAL_ADC_ConfigChannel+0x530>)
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	0992      	lsrs	r2, r2, #6
 8003548:	492a      	ldr	r1, [pc, #168]	; (80035f4 <HAL_ADC_ConfigChannel+0x534>)
 800354a:	fba1 1202 	umull	r1, r2, r1, r2
 800354e:	0992      	lsrs	r2, r2, #6
 8003550:	3201      	adds	r2, #1
 8003552:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800355a:	e006      	b.n	800356a <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800355c:	4920      	ldr	r1, [pc, #128]	; (80035e0 <HAL_ADC_ConfigChannel+0x520>)
 800355e:	e7e9      	b.n	8003534 <HAL_ADC_ConfigChannel+0x474>
 8003560:	491f      	ldr	r1, [pc, #124]	; (80035e0 <HAL_ADC_ConfigChannel+0x520>)
 8003562:	e7e7      	b.n	8003534 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8003564:	9a01      	ldr	r2, [sp, #4]
 8003566:	3a01      	subs	r2, #1
 8003568:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800356a:	9a01      	ldr	r2, [sp, #4]
 800356c:	2a00      	cmp	r2, #0
 800356e:	d1f9      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003570:	2000      	movs	r0, #0
 8003572:	e5bc      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003574:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003578:	f47f ae68 	bne.w	800324c <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003580:	d00e      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0x4e0>
 8003582:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_ADC_ConfigChannel+0x528>)
 8003584:	4291      	cmp	r1, r2
 8003586:	d009      	beq.n	800359c <HAL_ADC_ConfigChannel+0x4dc>
 8003588:	4918      	ldr	r1, [pc, #96]	; (80035ec <HAL_ADC_ConfigChannel+0x52c>)
 800358a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800358e:	688a      	ldr	r2, [r1, #8]
 8003590:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003594:	4314      	orrs	r4, r2
 8003596:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003598:	2000      	movs	r0, #0
}
 800359a:	e5a8      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800359c:	4910      	ldr	r1, [pc, #64]	; (80035e0 <HAL_ADC_ConfigChannel+0x520>)
 800359e:	e7f4      	b.n	800358a <HAL_ADC_ConfigChannel+0x4ca>
 80035a0:	490f      	ldr	r1, [pc, #60]	; (80035e0 <HAL_ADC_ConfigChannel+0x520>)
 80035a2:	e7f2      	b.n	800358a <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035a4:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80035a8:	d113      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_ADC_ConfigChannel+0x528>)
 80035ac:	4291      	cmp	r1, r2
 80035ae:	d012      	beq.n	80035d6 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80035b4:	d009      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x50a>
 80035b6:	480d      	ldr	r0, [pc, #52]	; (80035ec <HAL_ADC_ConfigChannel+0x52c>)
 80035b8:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035bc:	6881      	ldr	r1, [r0, #8]
 80035be:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80035c2:	430a      	orrs	r2, r1
 80035c4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c6:	2000      	movs	r0, #0
}
 80035c8:	e591      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ca:	4805      	ldr	r0, [pc, #20]	; (80035e0 <HAL_ADC_ConfigChannel+0x520>)
 80035cc:	e7f4      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ce:	2000      	movs	r0, #0
 80035d0:	e58d      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
 80035d2:	2000      	movs	r0, #0
 80035d4:	e58b      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
 80035d6:	2000      	movs	r0, #0
 80035d8:	e589      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80035da:	2002      	movs	r0, #2
 80035dc:	e58a      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x34>
 80035de:	bf00      	nop
 80035e0:	50000300 	.word	0x50000300
 80035e4:	50000600 	.word	0x50000600
 80035e8:	50000100 	.word	0x50000100
 80035ec:	50000700 	.word	0x50000700
 80035f0:	20000000 	.word	0x20000000
 80035f4:	053e2d63 	.word	0x053e2d63

080035f8 <ADC_Enable>:
{
 80035f8:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035fa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	f012 0f01 	tst.w	r2, #1
 8003602:	d140      	bne.n	8003686 <ADC_Enable+0x8e>
 8003604:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	4a20      	ldr	r2, [pc, #128]	; (800368c <ADC_Enable+0x94>)
 800360a:	4211      	tst	r1, r2
 800360c:	d009      	beq.n	8003622 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003610:	f043 0310 	orr.w	r3, r3, #16
 8003614:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003616:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 800361e:	2001      	movs	r0, #1
 8003620:	e032      	b.n	8003688 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003628:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003632:	f7ff fa09 	bl	8002a48 <HAL_GetTick>
 8003636:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	f012 0f01 	tst.w	r2, #1
 8003640:	d11f      	bne.n	8003682 <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	f012 0f01 	tst.w	r2, #1
 8003648:	d107      	bne.n	800365a <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003650:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800365a:	f7ff f9f5 	bl	8002a48 <HAL_GetTick>
 800365e:	1b43      	subs	r3, r0, r5
 8003660:	2b02      	cmp	r3, #2
 8003662:	d9e9      	bls.n	8003638 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f013 0f01 	tst.w	r3, #1
 800366c:	d1e4      	bne.n	8003638 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003670:	f043 0310 	orr.w	r3, r3, #16
 8003674:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 800367e:	2001      	movs	r0, #1
 8003680:	e002      	b.n	8003688 <ADC_Enable+0x90>
  return HAL_OK;
 8003682:	2000      	movs	r0, #0
 8003684:	e000      	b.n	8003688 <ADC_Enable+0x90>
 8003686:	2000      	movs	r0, #0
}
 8003688:	bd38      	pop	{r3, r4, r5, pc}
 800368a:	bf00      	nop
 800368c:	8000003f 	.word	0x8000003f

08003690 <HAL_ADC_Start_DMA>:
{
 8003690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003694:	4604      	mov	r4, r0
 8003696:	460f      	mov	r7, r1
 8003698:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369a:	6800      	ldr	r0, [r0, #0]
 800369c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80036a0:	d021      	beq.n	80036e6 <HAL_ADC_Start_DMA+0x56>
 80036a2:	4b42      	ldr	r3, [pc, #264]	; (80037ac <HAL_ADC_Start_DMA+0x11c>)
 80036a4:	4298      	cmp	r0, r3
 80036a6:	d01b      	beq.n	80036e0 <HAL_ADC_Start_DMA+0x50>
 80036a8:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036aa:	689e      	ldr	r6, [r3, #8]
 80036ac:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036b0:	6885      	ldr	r5, [r0, #8]
 80036b2:	f015 0f04 	tst.w	r5, #4
 80036b6:	d174      	bne.n	80037a2 <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 80036b8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d073      	beq.n	80037a8 <HAL_ADC_Start_DMA+0x118>
 80036c0:	2301      	movs	r3, #1
 80036c2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_ADC_Start_DMA+0x124>)
 80036c8:	4298      	cmp	r0, r3
 80036ca:	d00e      	beq.n	80036ea <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036cc:	b16e      	cbz	r6, 80036ea <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036ce:	2e05      	cmp	r6, #5
 80036d0:	d00b      	beq.n	80036ea <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036d2:	2e09      	cmp	r6, #9
 80036d4:	d009      	beq.n	80036ea <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 80036d6:	2300      	movs	r3, #0
 80036d8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80036dc:	2001      	movs	r0, #1
 80036de:	e061      	b.n	80037a4 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80036e4:	e7e1      	b.n	80036aa <HAL_ADC_Start_DMA+0x1a>
 80036e6:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_ADC_Start_DMA+0x128>)
 80036e8:	e7df      	b.n	80036aa <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff ff84 	bl	80035f8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d152      	bne.n	800379a <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 80036f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <HAL_ADC_Start_DMA+0x11c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_ADC_Start_DMA+0xfe>
 800370c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003710:	4293      	cmp	r3, r2
 8003712:	d039      	beq.n	8003788 <HAL_ADC_Start_DMA+0xf8>
 8003714:	461a      	mov	r2, r3
 8003716:	4293      	cmp	r3, r2
 8003718:	d000      	beq.n	800371c <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800371a:	b91e      	cbnz	r6, 8003724 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800371c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800371e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003722:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003724:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003726:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800372a:	d033      	beq.n	8003794 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800372c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800372e:	f023 0306 	bic.w	r3, r3, #6
 8003732:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003734:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_ADC_Start_DMA+0x12c>)
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800373a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <HAL_ADC_Start_DMA+0x130>)
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003740:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003742:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <HAL_ADC_Start_DMA+0x134>)
 8003744:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	221c      	movs	r2, #28
 800374a:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 800374c:	2300      	movs	r3, #0
 800374e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	6853      	ldr	r3, [r2, #4]
 8003756:	f043 0310 	orr.w	r3, r3, #16
 800375a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	68d3      	ldr	r3, [r2, #12]
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003766:	6821      	ldr	r1, [r4, #0]
 8003768:	4643      	mov	r3, r8
 800376a:	463a      	mov	r2, r7
 800376c:	3140      	adds	r1, #64	; 0x40
 800376e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003770:	f000 ff9a 	bl	80046a8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003774:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003776:	6893      	ldr	r3, [r2, #8]
 8003778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800377c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6093      	str	r3, [r2, #8]
}
 8003786:	e00d      	b.n	80037a4 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003788:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800378c:	e7c3      	b.n	8003716 <HAL_ADC_Start_DMA+0x86>
 800378e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003792:	e7c0      	b.n	8003716 <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8003794:	2300      	movs	r3, #0
 8003796:	6623      	str	r3, [r4, #96]	; 0x60
 8003798:	e7cc      	b.n	8003734 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 800379a:	2300      	movs	r3, #0
 800379c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80037a0:	e000      	b.n	80037a4 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 80037a2:	2002      	movs	r0, #2
}
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 80037a8:	2002      	movs	r0, #2
 80037aa:	e7fb      	b.n	80037a4 <HAL_ADC_Start_DMA+0x114>
 80037ac:	50000100 	.word	0x50000100
 80037b0:	50000700 	.word	0x50000700
 80037b4:	50000600 	.word	0x50000600
 80037b8:	50000300 	.word	0x50000300
 80037bc:	0800301d 	.word	0x0800301d
 80037c0:	08002d29 	.word	0x08002d29
 80037c4:	080030a5 	.word	0x080030a5

080037c8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037cc:	6803      	ldr	r3, [r0, #0]
 80037ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d2:	d073      	beq.n	80038bc <HAL_ADCEx_InjectedStart_IT+0xf4>
 80037d4:	4a55      	ldr	r2, [pc, #340]	; (800392c <HAL_ADCEx_InjectedStart_IT+0x164>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d06d      	beq.n	80038b6 <HAL_ADCEx_InjectedStart_IT+0xee>
 80037da:	4a55      	ldr	r2, [pc, #340]	; (8003930 <HAL_ADCEx_InjectedStart_IT+0x168>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037dc:	6895      	ldr	r5, [r2, #8]
 80037de:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	f012 0f08 	tst.w	r2, #8
 80037e8:	f040 809b 	bne.w	8003922 <HAL_ADCEx_InjectedStart_IT+0x15a>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80037ec:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	f413 7fc0 	tst.w	r3, #384	; 0x180
 80037f4:	d101      	bne.n	80037fa <HAL_ADCEx_InjectedStart_IT+0x32>
        && (tmp_config_injected_queue == 0UL)
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	da62      	bge.n	80038c0 <HAL_ADCEx_InjectedStart_IT+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80037fa:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80037fe:	2b01      	cmp	r3, #1
 8003800:	f000 8091 	beq.w	8003926 <HAL_ADCEx_InjectedStart_IT+0x15e>
 8003804:	2301      	movs	r3, #1
 8003806:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800380a:	4620      	mov	r0, r4
 800380c:	f7ff fef4 	bl	80035f8 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003810:	2800      	cmp	r0, #0
 8003812:	f040 8082 	bne.w	800391a <HAL_ADCEx_InjectedStart_IT+0x152>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003816:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003818:	f413 7f80 	tst.w	r3, #256	; 0x100
 800381c:	d056      	beq.n	80038cc <HAL_ADCEx_InjectedStart_IT+0x104>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800381e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003820:	f023 0308 	bic.w	r3, r3, #8
 8003824:	6623      	str	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003826:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003828:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003834:	65e3      	str	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	4a3c      	ldr	r2, [pc, #240]	; (800392c <HAL_ADCEx_InjectedStart_IT+0x164>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04c      	beq.n	80038d8 <HAL_ADCEx_InjectedStart_IT+0x110>
 800383e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003842:	4293      	cmp	r3, r2
 8003844:	d045      	beq.n	80038d2 <HAL_ADCEx_InjectedStart_IT+0x10a>
 8003846:	461a      	mov	r2, r3
 8003848:	4293      	cmp	r3, r2
 800384a:	d000      	beq.n	800384e <HAL_ADCEx_InjectedStart_IT+0x86>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800384c:	b91d      	cbnz	r5, 8003856 <HAL_ADCEx_InjectedStart_IT+0x8e>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800384e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003850:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003854:	65e2      	str	r2, [r4, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003856:	2260      	movs	r2, #96	; 0x60
 8003858:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800385a:	2300      	movs	r3, #0
 800385c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8003868:	d003      	beq.n	8003872 <HAL_ADCEx_InjectedStart_IT+0xaa>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003870:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003872:	69a3      	ldr	r3, [r4, #24]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d032      	beq.n	80038de <HAL_ADCEx_InjectedStart_IT+0x116>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	6853      	ldr	r3, [r2, #4]
 800387c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003880:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	6853      	ldr	r3, [r2, #4]
 8003886:	f043 0320 	orr.w	r3, r3, #32
 800388a:	6053      	str	r3, [r2, #4]
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	4a27      	ldr	r2, [pc, #156]	; (800392c <HAL_ADCEx_InjectedStart_IT+0x164>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d032      	beq.n	80038fa <HAL_ADCEx_InjectedStart_IT+0x132>
 8003894:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003898:	4293      	cmp	r3, r2
 800389a:	d02b      	beq.n	80038f4 <HAL_ADCEx_InjectedStart_IT+0x12c>
 800389c:	461a      	mov	r2, r3
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02e      	beq.n	8003900 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038a2:	b36d      	cbz	r5, 8003900 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038a4:	2d06      	cmp	r5, #6
 80038a6:	d02b      	beq.n	8003900 <HAL_ADCEx_InjectedStart_IT+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038a8:	2d07      	cmp	r5, #7
 80038aa:	d029      	beq.n	8003900 <HAL_ADCEx_InjectedStart_IT+0x138>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80038b4:	e036      	b.n	8003924 <HAL_ADCEx_InjectedStart_IT+0x15c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038b6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80038ba:	e78f      	b.n	80037dc <HAL_ADCEx_InjectedStart_IT+0x14>
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <HAL_ADCEx_InjectedStart_IT+0x16c>)
 80038be:	e78d      	b.n	80037dc <HAL_ADCEx_InjectedStart_IT+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038c2:	f043 0320 	orr.w	r3, r3, #32
 80038c6:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80038c8:	2001      	movs	r0, #1
 80038ca:	e02b      	b.n	8003924 <HAL_ADCEx_InjectedStart_IT+0x15c>
        ADC_CLEAR_ERRORCODE(hadc);
 80038cc:	2300      	movs	r3, #0
 80038ce:	6623      	str	r3, [r4, #96]	; 0x60
 80038d0:	e7a9      	b.n	8003826 <HAL_ADCEx_InjectedStart_IT+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038d2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80038d6:	e7b7      	b.n	8003848 <HAL_ADCEx_InjectedStart_IT+0x80>
 80038d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80038dc:	e7b4      	b.n	8003848 <HAL_ADCEx_InjectedStart_IT+0x80>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	6853      	ldr	r3, [r2, #4]
 80038e2:	f023 0320 	bic.w	r3, r3, #32
 80038e6:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	6853      	ldr	r3, [r2, #4]
 80038ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f0:	6053      	str	r3, [r2, #4]
          break;
 80038f2:	e7cb      	b.n	800388c <HAL_ADCEx_InjectedStart_IT+0xc4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038f4:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80038f8:	e7d1      	b.n	800389e <HAL_ADCEx_InjectedStart_IT+0xd6>
 80038fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80038fe:	e7ce      	b.n	800389e <HAL_ADCEx_InjectedStart_IT+0xd6>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003900:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003902:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003906:	d10d      	bne.n	8003924 <HAL_ADCEx_InjectedStart_IT+0x15c>
  MODIFY_REG(ADCx->CR,
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800390e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	e004      	b.n	8003924 <HAL_ADCEx_InjectedStart_IT+0x15c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800391a:	2300      	movs	r3, #0
 800391c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003920:	e000      	b.n	8003924 <HAL_ADCEx_InjectedStart_IT+0x15c>
    return HAL_BUSY;
 8003922:	2002      	movs	r0, #2
  }
}
 8003924:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8003926:	2002      	movs	r0, #2
 8003928:	e7fc      	b.n	8003924 <HAL_ADCEx_InjectedStart_IT+0x15c>
 800392a:	bf00      	nop
 800392c:	50000100 	.word	0x50000100
 8003930:	50000700 	.word	0x50000700
 8003934:	50000300 	.word	0x50000300

08003938 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003938:	4770      	bx	lr

0800393a <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800393a:	4770      	bx	lr

0800393c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800393c:	4770      	bx	lr

0800393e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800393e:	4770      	bx	lr

08003940 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003940:	4770      	bx	lr
	...

08003944 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b083      	sub	sp, #12
 8003948:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800394a:	2200      	movs	r2, #0
 800394c:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
  assert_param(IS_ADC_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800394e:	6940      	ldr	r0, [r0, #20]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003950:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003954:	2a01      	cmp	r2, #1
 8003956:	f000 831f 	beq.w	8003f98 <HAL_ADCEx_InjectedConfigChannel+0x654>
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003960:	b1a8      	cbz	r0, 800398e <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003962:	6a0a      	ldr	r2, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003964:	2a01      	cmp	r2, #1
 8003966:	d012      	beq.n	800398e <HAL_ADCEx_InjectedConfigChannel+0x4a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003968:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800396a:	2800      	cmp	r0, #0
 800396c:	f040 80cd 	bne.w	8003b0a <HAL_ADCEx_InjectedConfigChannel+0x1c6>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003970:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003972:	2200      	movs	r2, #0
 8003974:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003976:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003978:	2c00      	cmp	r4, #0
 800397a:	f000 80c3 	beq.w	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800397e:	6a0a      	ldr	r2, [r1, #32]
 8003980:	3a01      	subs	r2, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003982:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 8003986:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003988:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800398a:	4314      	orrs	r4, r2
 800398c:	e0be      	b.n	8003b0c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800398e:	684a      	ldr	r2, [r1, #4]
 8003990:	2a09      	cmp	r2, #9
 8003992:	f000 8097 	beq.w	8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x180>
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003996:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003998:	6890      	ldr	r0, [r2, #8]
 800399a:	f010 0f08 	tst.w	r0, #8
 800399e:	d110      	bne.n	80039c2 <HAL_ADCEx_InjectedConfigChannel+0x7e>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80039a0:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80039a4:	2800      	cmp	r0, #0
 80039a6:	f040 80d0 	bne.w	8003b4a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80039aa:	68d0      	ldr	r0, [r2, #12]
 80039ac:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80039b0:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 80039b4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 80039b8:	0524      	lsls	r4, r4, #20
 80039ba:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 80039be:	4320      	orrs	r0, r4
 80039c0:	60d0      	str	r0, [r2, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c2:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039c4:	68a2      	ldr	r2, [r4, #8]
 80039c6:	f012 0204 	ands.w	r2, r2, #4
 80039ca:	d000      	beq.n	80039ce <HAL_ADCEx_InjectedConfigChannel+0x8a>
 80039cc:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039ce:	68a5      	ldr	r5, [r4, #8]
 80039d0:	f015 0508 	ands.w	r5, r5, #8
 80039d4:	d000      	beq.n	80039d8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80039d6:	2501      	movs	r5, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039d8:	2a00      	cmp	r2, #0
 80039da:	f040 8161 	bne.w	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x35c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039de:	2d00      	cmp	r5, #0
 80039e0:	f040 819b 	bne.w	8003d1a <HAL_ADCEx_InjectedConfigChannel+0x3d6>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80039e4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80039e6:	b11a      	cbz	r2, 80039f0 <HAL_ADCEx_InjectedConfigChannel+0xac>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80039e8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	f040 80bc 	bne.w	8003b68 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80039f0:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 80039f4:	2a01      	cmp	r2, #1
 80039f6:	f000 80b1 	beq.w	8003b5c <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80039fa:	68e2      	ldr	r2, [r4, #12]
 80039fc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003a00:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a02:	2000      	movs	r0, #0
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003a04:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8003a08:	2a01      	cmp	r2, #1
 8003a0a:	f000 80bc 	beq.w	8003b86 <HAL_ADCEx_InjectedConfigChannel+0x242>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003a0e:	681c      	ldr	r4, [r3, #0]
 8003a10:	6922      	ldr	r2, [r4, #16]
 8003a12:	f022 0202 	bic.w	r2, r2, #2
 8003a16:	6122      	str	r2, [r4, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a18:	688a      	ldr	r2, [r1, #8]
 8003a1a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003a1e:	f000 80be 	beq.w	8003b9e <HAL_ADCEx_InjectedConfigChannel+0x25a>
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003a22:	681c      	ldr	r4, [r3, #0]
 8003a24:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a26:	f104 0c14 	add.w	ip, r4, #20
 8003a2a:	0e77      	lsrs	r7, r6, #25
 8003a2c:	00bf      	lsls	r7, r7, #2
 8003a2e:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003a32:	f85c 4007 	ldr.w	r4, [ip, r7]
 8003a36:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003a3a:	f04f 0e07 	mov.w	lr, #7
 8003a3e:	fa0e fe06 	lsl.w	lr, lr, r6
 8003a42:	ea24 040e 	bic.w	r4, r4, lr
 8003a46:	40b2      	lsls	r2, r6
 8003a48:	4322      	orrs	r2, r4
 8003a4a:	f84c 2007 	str.w	r2, [ip, r7]

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a4e:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a50:	6962      	ldr	r2, [r4, #20]
 8003a52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a56:	6162      	str	r2, [r4, #20]

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003a58:	694c      	ldr	r4, [r1, #20]
 8003a5a:	681e      	ldr	r6, [r3, #0]
 8003a5c:	68f2      	ldr	r2, [r6, #12]
 8003a5e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a62:	0052      	lsls	r2, r2, #1
 8003a64:	fa04 f202 	lsl.w	r2, r4, r2

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003a68:	f8d1 c010 	ldr.w	ip, [r1, #16]
 8003a6c:	f1bc 0f04 	cmp.w	ip, #4
 8003a70:	f000 80af 	beq.w	8003bd2 <HAL_ADCEx_InjectedConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a74:	3660      	adds	r6, #96	; 0x60
  MODIFY_REG(*preg,
 8003a76:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8003a7a:	4fa9      	ldr	r7, [pc, #676]	; (8003d20 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8003a7c:	4027      	ands	r7, r4
 8003a7e:	680c      	ldr	r4, [r1, #0]
 8003a80:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003a84:	4322      	orrs	r2, r4
 8003a86:	4317      	orrs	r7, r2
 8003a88:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8003a8c:	f846 702c 	str.w	r7, [r6, ip, lsl #2]
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	690f      	ldr	r7, [r1, #16]
 8003a94:	698c      	ldr	r4, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a96:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003a98:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8003a9c:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8003aa0:	4334      	orrs	r4, r6
 8003aa2:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	690e      	ldr	r6, [r1, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003aaa:	7f0c      	ldrb	r4, [r1, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003aac:	2c01      	cmp	r4, #1
 8003aae:	f000 808d 	beq.w	8003bcc <HAL_ADCEx_InjectedConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab2:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003ab4:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8003ab8:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003abc:	4325      	orrs	r5, r4
 8003abe:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
}
 8003ac2:	e0ee      	b.n	8003ca2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ac4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003ac6:	b1bc      	cbz	r4, 8003af8 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003ac8:	6808      	ldr	r0, [r1, #0]
 8003aca:	0e82      	lsrs	r2, r0, #26
 8003acc:	0252      	lsls	r2, r2, #9
 8003ace:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003ad2:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 8003ad6:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003ad8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003ada:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003adc:	681c      	ldr	r4, [r3, #0]
 8003ade:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003ae0:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8003ae4:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003ae8:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003aec:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003af0:	4310      	orrs	r0, r2
 8003af2:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003af4:	665a      	str	r2, [r3, #100]	; 0x64
 8003af6:	e74e      	b.n	8003996 <HAL_ADCEx_InjectedConfigChannel+0x52>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003af8:	680a      	ldr	r2, [r1, #0]
 8003afa:	0e92      	lsrs	r2, r2, #26
 8003afc:	0252      	lsls	r2, r2, #9
 8003afe:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
 8003b02:	e7eb      	b.n	8003adc <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003b04:	6a0a      	ldr	r2, [r1, #32]
 8003b06:	1e54      	subs	r4, r2, #1
 8003b08:	e000      	b.n	8003b0c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003b0a:	2400      	movs	r4, #0
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003b0c:	6808      	ldr	r0, [r1, #0]
 8003b0e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003b12:	684a      	ldr	r2, [r1, #4]
 8003b14:	f002 021f 	and.w	r2, r2, #31
 8003b18:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1c:	4322      	orrs	r2, r4
    hadc->InjectionConfig.ChannelCount--;
 8003b1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003b20:	3801      	subs	r0, #1
 8003b22:	6698      	str	r0, [r3, #104]	; 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003b24:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003b26:	4322      	orrs	r2, r4
 8003b28:	665a      	str	r2, [r3, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f47f af33 	bne.w	8003996 <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003b30:	681c      	ldr	r4, [r3, #0]
 8003b32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003b34:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8003b38:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8003b3c:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8003b40:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003b44:	4302      	orrs	r2, r0
 8003b46:	64e2      	str	r2, [r4, #76]	; 0x4c
 8003b48:	e725      	b.n	8003996 <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->CFGR,
 8003b4a:	68d0      	ldr	r0, [r2, #12]
 8003b4c:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003b50:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 8003b54:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8003b58:	60d0      	str	r0, [r2, #12]
 8003b5a:	e732      	b.n	80039c2 <HAL_ADCEx_InjectedConfigChannel+0x7e>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003b5c:	68e2      	ldr	r2, [r4, #12]
 8003b5e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003b62:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b64:	2000      	movs	r0, #0
 8003b66:	e74d      	b.n	8003a04 <HAL_ADCEx_InjectedConfigChannel+0xc0>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003b68:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8003b6c:	2801      	cmp	r0, #1
 8003b6e:	d005      	beq.n	8003b7c <HAL_ADCEx_InjectedConfigChannel+0x238>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003b70:	68e2      	ldr	r2, [r4, #12]
 8003b72:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003b76:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e743      	b.n	8003a04 <HAL_ADCEx_InjectedConfigChannel+0xc0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b7e:	f042 0220 	orr.w	r2, r2, #32
 8003b82:	65da      	str	r2, [r3, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8003b84:	e73e      	b.n	8003a04 <HAL_ADCEx_InjectedConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->CFGR2,
 8003b86:	681e      	ldr	r6, [r3, #0]
 8003b88:	6932      	ldr	r2, [r6, #16]
 8003b8a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003b8e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8003b90:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8003b92:	433c      	orrs	r4, r7
 8003b94:	4322      	orrs	r2, r4
 8003b96:	f042 0202 	orr.w	r2, r2, #2
 8003b9a:	6132      	str	r2, [r6, #16]
 8003b9c:	e73c      	b.n	8003a18 <HAL_ADCEx_InjectedConfigChannel+0xd4>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b9e:	681c      	ldr	r4, [r3, #0]
 8003ba0:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ba2:	3414      	adds	r4, #20
 8003ba4:	0e72      	lsrs	r2, r6, #25
 8003ba6:	0092      	lsls	r2, r2, #2
 8003ba8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003bac:	58a7      	ldr	r7, [r4, r2]
 8003bae:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003bb2:	f04f 0c07 	mov.w	ip, #7
 8003bb6:	fa0c f606 	lsl.w	r6, ip, r6
 8003bba:	ea27 0606 	bic.w	r6, r7, r6
 8003bbe:	50a6      	str	r6, [r4, r2]
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bc0:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bc2:	6962      	ldr	r2, [r4, #20]
 8003bc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bc8:	6162      	str	r2, [r4, #20]
}
 8003bca:	e745      	b.n	8003a58 <HAL_ADCEx_InjectedConfigChannel+0x114>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003bcc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8003bd0:	e76f      	b.n	8003ab2 <HAL_ADCEx_InjectedConfigChannel+0x16e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bd2:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003bd4:	6e34      	ldr	r4, [r6, #96]	; 0x60
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bd6:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003bda:	680a      	ldr	r2, [r1, #0]
 8003bdc:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003be0:	bb7d      	cbnz	r5, 8003c42 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8003be2:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003be6:	4294      	cmp	r4, r2
 8003be8:	d033      	beq.n	8003c52 <HAL_ADCEx_InjectedConfigChannel+0x30e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bea:	681d      	ldr	r5, [r3, #0]
 8003bec:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003bee:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8003bf0:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003bf4:	680a      	ldr	r2, [r1, #0]
 8003bf6:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003bfa:	bb7e      	cbnz	r6, 8003c5c <HAL_ADCEx_InjectedConfigChannel+0x318>
 8003bfc:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c00:	4294      	cmp	r4, r2
 8003c02:	d033      	beq.n	8003c6c <HAL_ADCEx_InjectedConfigChannel+0x328>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c04:	681d      	ldr	r5, [r3, #0]
 8003c06:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003c08:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8003c0a:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003c0e:	680a      	ldr	r2, [r1, #0]
 8003c10:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003c14:	bb7e      	cbnz	r6, 8003c76 <HAL_ADCEx_InjectedConfigChannel+0x332>
 8003c16:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c1a:	4294      	cmp	r4, r2
 8003c1c:	d033      	beq.n	8003c86 <HAL_ADCEx_InjectedConfigChannel+0x342>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c1e:	681d      	ldr	r5, [r3, #0]
 8003c20:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003c22:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8003c24:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003c28:	680a      	ldr	r2, [r1, #0]
 8003c2a:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003c2e:	bb7e      	cbnz	r6, 8003c90 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8003c30:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c34:	4294      	cmp	r4, r2
 8003c36:	d134      	bne.n	8003ca2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 8003c38:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003c3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c3e:	66ea      	str	r2, [r5, #108]	; 0x6c
}
 8003c40:	e02f      	b.n	8003ca2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c46:	b112      	cbz	r2, 8003c4e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  return __builtin_clz(value);
 8003c48:	fab2 f282 	clz	r2, r2
 8003c4c:	e7cb      	b.n	8003be6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
    return 32U;
 8003c4e:	2220      	movs	r2, #32
 8003c50:	e7c9      	b.n	8003be6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
  MODIFY_REG(*preg,
 8003c52:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003c54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c58:	6632      	str	r2, [r6, #96]	; 0x60
}
 8003c5a:	e7c6      	b.n	8003bea <HAL_ADCEx_InjectedConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c60:	b112      	cbz	r2, 8003c68 <HAL_ADCEx_InjectedConfigChannel+0x324>
  return __builtin_clz(value);
 8003c62:	fab2 f282 	clz	r2, r2
 8003c66:	e7cb      	b.n	8003c00 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    return 32U;
 8003c68:	2220      	movs	r2, #32
 8003c6a:	e7c9      	b.n	8003c00 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
  MODIFY_REG(*preg,
 8003c6c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c72:	666a      	str	r2, [r5, #100]	; 0x64
}
 8003c74:	e7c6      	b.n	8003c04 <HAL_ADCEx_InjectedConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c7a:	b112      	cbz	r2, 8003c82 <HAL_ADCEx_InjectedConfigChannel+0x33e>
  return __builtin_clz(value);
 8003c7c:	fab2 f282 	clz	r2, r2
 8003c80:	e7cb      	b.n	8003c1a <HAL_ADCEx_InjectedConfigChannel+0x2d6>
    return 32U;
 8003c82:	2220      	movs	r2, #32
 8003c84:	e7c9      	b.n	8003c1a <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  MODIFY_REG(*preg,
 8003c86:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003c88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c8c:	66aa      	str	r2, [r5, #104]	; 0x68
}
 8003c8e:	e7c6      	b.n	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x2da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c94:	b112      	cbz	r2, 8003c9c <HAL_ADCEx_InjectedConfigChannel+0x358>
  return __builtin_clz(value);
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	e7cb      	b.n	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    return 32U;
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	e7c9      	b.n	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca0:	2000      	movs	r0, #0
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ca2:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca4:	6894      	ldr	r4, [r2, #8]
 8003ca6:	f014 0f01 	tst.w	r4, #1
 8003caa:	d110      	bne.n	8003cce <HAL_ADCEx_InjectedConfigChannel+0x38a>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003cac:	680c      	ldr	r4, [r1, #0]
 8003cae:	68ce      	ldr	r6, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003cb0:	4d1c      	ldr	r5, [pc, #112]	; (8003d24 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8003cb2:	42ae      	cmp	r6, r5
 8003cb4:	d046      	beq.n	8003d44 <HAL_ADCEx_InjectedConfigChannel+0x400>
    CLEAR_BIT(ADCx->DIFSEL,
 8003cb6:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003cba:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003cbe:	ea25 0404 	bic.w	r4, r5, r4
 8003cc2:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cc6:	68cc      	ldr	r4, [r1, #12]
 8003cc8:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8003cca:	4294      	cmp	r4, r2
 8003ccc:	d042      	beq.n	8003d54 <HAL_ADCEx_InjectedConfigChannel+0x410>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003cce:	680a      	ldr	r2, [r1, #0]
 8003cd0:	4915      	ldr	r1, [pc, #84]	; (8003d28 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8003cd2:	420a      	tst	r2, r1
 8003cd4:	d01c      	beq.n	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003cdc:	f000 80fb 	beq.w	8003ed6 <HAL_ADCEx_InjectedConfigChannel+0x592>
 8003ce0:	4c12      	ldr	r4, [pc, #72]	; (8003d2c <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8003ce2:	42a1      	cmp	r1, r4
 8003ce4:	f000 80f4 	beq.w	8003ed0 <HAL_ADCEx_InjectedConfigChannel+0x58c>
 8003ce8:	4c11      	ldr	r4, [pc, #68]	; (8003d30 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003cea:	68a4      	ldr	r4, [r4, #8]
 8003cec:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003cf0:	4e10      	ldr	r6, [pc, #64]	; (8003d34 <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
 8003cf2:	42b2      	cmp	r2, r6
 8003cf4:	f000 80f1 	beq.w	8003eda <HAL_ADCEx_InjectedConfigChannel+0x596>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003cf8:	4e0f      	ldr	r6, [pc, #60]	; (8003d38 <HAL_ADCEx_InjectedConfigChannel+0x3f4>)
 8003cfa:	42b2      	cmp	r2, r6
 8003cfc:	f000 80ed 	beq.w	8003eda <HAL_ADCEx_InjectedConfigChannel+0x596>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003d00:	4e0e      	ldr	r6, [pc, #56]	; (8003d3c <HAL_ADCEx_InjectedConfigChannel+0x3f8>)
 8003d02:	42b2      	cmp	r2, r6
 8003d04:	f000 811a 	beq.w	8003f3c <HAL_ADCEx_InjectedConfigChannel+0x5f8>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003d08:	4e0d      	ldr	r6, [pc, #52]	; (8003d40 <HAL_ADCEx_InjectedConfigChannel+0x3fc>)
 8003d0a:	42b2      	cmp	r2, r6
 8003d0c:	f000 812d 	beq.w	8003f6a <HAL_ADCEx_InjectedConfigChannel+0x626>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003d16:	b003      	add	sp, #12
 8003d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e7c1      	b.n	8003ca2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
 8003d1e:	bf00      	nop
 8003d20:	03fff000 	.word	0x03fff000
 8003d24:	407f0000 	.word	0x407f0000
 8003d28:	80080000 	.word	0x80080000
 8003d2c:	50000100 	.word	0x50000100
 8003d30:	50000700 	.word	0x50000700
 8003d34:	c3210000 	.word	0xc3210000
 8003d38:	90c00010 	.word	0x90c00010
 8003d3c:	c7520000 	.word	0xc7520000
 8003d40:	cb840000 	.word	0xcb840000
    SET_BIT(ADCx->DIFSEL,
 8003d44:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003d48:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003d4c:	432c      	orrs	r4, r5
 8003d4e:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
 8003d52:	e7b8      	b.n	8003cc6 <HAL_ADCEx_InjectedConfigChannel+0x382>
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d54:	681d      	ldr	r5, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003d56:	680a      	ldr	r2, [r1, #0]
 8003d58:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003d5c:	2e00      	cmp	r6, #0
 8003d5e:	d137      	bne.n	8003dd0 <HAL_ADCEx_InjectedConfigChannel+0x48c>
 8003d60:	0e94      	lsrs	r4, r2, #26
 8003d62:	3401      	adds	r4, #1
 8003d64:	f004 041f 	and.w	r4, r4, #31
 8003d68:	2c09      	cmp	r4, #9
 8003d6a:	bf8c      	ite	hi
 8003d6c:	2400      	movhi	r4, #0
 8003d6e:	2401      	movls	r4, #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d70:	2c00      	cmp	r4, #0
 8003d72:	d065      	beq.n	8003e40 <HAL_ADCEx_InjectedConfigChannel+0x4fc>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003d74:	2e00      	cmp	r6, #0
 8003d76:	d13a      	bne.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0x4aa>
 8003d78:	0e94      	lsrs	r4, r2, #26
 8003d7a:	3401      	adds	r4, #1
 8003d7c:	06a4      	lsls	r4, r4, #26
 8003d7e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003d82:	2e00      	cmp	r6, #0
 8003d84:	d13f      	bne.n	8003e06 <HAL_ADCEx_InjectedConfigChannel+0x4c2>
 8003d86:	0e97      	lsrs	r7, r2, #26
 8003d88:	3701      	adds	r7, #1
 8003d8a:	f007 0c1f 	and.w	ip, r7, #31
 8003d8e:	2701      	movs	r7, #1
 8003d90:	fa07 f70c 	lsl.w	r7, r7, ip
 8003d94:	433c      	orrs	r4, r7
 8003d96:	2e00      	cmp	r6, #0
 8003d98:	d144      	bne.n	8003e24 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
 8003d9a:	0e92      	lsrs	r2, r2, #26
 8003d9c:	3201      	adds	r2, #1
 8003d9e:	f002 021f 	and.w	r2, r2, #31
 8003da2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003da6:	0512      	lsls	r2, r2, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da8:	4322      	orrs	r2, r4
 8003daa:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dac:	3514      	adds	r5, #20
 8003dae:	0e56      	lsrs	r6, r2, #25
 8003db0:	00b6      	lsls	r6, r6, #2
 8003db2:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8003db6:	59af      	ldr	r7, [r5, r6]
 8003db8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003dbc:	f04f 0c07 	mov.w	ip, #7
 8003dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8003dc4:	ea27 070c 	bic.w	r7, r7, ip
 8003dc8:	4094      	lsls	r4, r2
 8003dca:	433c      	orrs	r4, r7
 8003dcc:	51ac      	str	r4, [r5, r6]
}
 8003dce:	e77e      	b.n	8003cce <HAL_ADCEx_InjectedConfigChannel+0x38a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003dd4:	b14c      	cbz	r4, 8003dea <HAL_ADCEx_InjectedConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003dd6:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003dda:	3401      	adds	r4, #1
 8003ddc:	f004 041f 	and.w	r4, r4, #31
 8003de0:	2c09      	cmp	r4, #9
 8003de2:	bf8c      	ite	hi
 8003de4:	2400      	movhi	r4, #0
 8003de6:	2401      	movls	r4, #1
 8003de8:	e7c2      	b.n	8003d70 <HAL_ADCEx_InjectedConfigChannel+0x42c>
    return 32U;
 8003dea:	2420      	movs	r4, #32
 8003dec:	e7f5      	b.n	8003dda <HAL_ADCEx_InjectedConfigChannel+0x496>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003df2:	b134      	cbz	r4, 8003e02 <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 8003df4:	fab4 f484 	clz	r4, r4
 8003df8:	3401      	adds	r4, #1
 8003dfa:	06a4      	lsls	r4, r4, #26
 8003dfc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e00:	e7bf      	b.n	8003d82 <HAL_ADCEx_InjectedConfigChannel+0x43e>
    return 32U;
 8003e02:	2420      	movs	r4, #32
 8003e04:	e7f8      	b.n	8003df8 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8003e0a:	b14f      	cbz	r7, 8003e20 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003e0c:	fab7 f787 	clz	r7, r7
 8003e10:	3701      	adds	r7, #1
 8003e12:	f007 071f 	and.w	r7, r7, #31
 8003e16:	f04f 0c01 	mov.w	ip, #1
 8003e1a:	fa0c f707 	lsl.w	r7, ip, r7
 8003e1e:	e7b9      	b.n	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x450>
    return 32U;
 8003e20:	2720      	movs	r7, #32
 8003e22:	e7f5      	b.n	8003e10 <HAL_ADCEx_InjectedConfigChannel+0x4cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003e28:	b142      	cbz	r2, 8003e3c <HAL_ADCEx_InjectedConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003e2a:	fab2 f282 	clz	r2, r2
 8003e2e:	3201      	adds	r2, #1
 8003e30:	f002 021f 	and.w	r2, r2, #31
 8003e34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e38:	0512      	lsls	r2, r2, #20
 8003e3a:	e7b5      	b.n	8003da8 <HAL_ADCEx_InjectedConfigChannel+0x464>
    return 32U;
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	e7f6      	b.n	8003e2e <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8003e40:	b9d6      	cbnz	r6, 8003e78 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003e42:	0e94      	lsrs	r4, r2, #26
 8003e44:	3401      	adds	r4, #1
 8003e46:	06a4      	lsls	r4, r4, #26
 8003e48:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e4c:	bb06      	cbnz	r6, 8003e90 <HAL_ADCEx_InjectedConfigChannel+0x54c>
 8003e4e:	0e97      	lsrs	r7, r2, #26
 8003e50:	3701      	adds	r7, #1
 8003e52:	f007 0c1f 	and.w	ip, r7, #31
 8003e56:	2701      	movs	r7, #1
 8003e58:	fa07 f70c 	lsl.w	r7, r7, ip
 8003e5c:	433c      	orrs	r4, r7
 8003e5e:	bb36      	cbnz	r6, 8003eae <HAL_ADCEx_InjectedConfigChannel+0x56a>
 8003e60:	0e92      	lsrs	r2, r2, #26
 8003e62:	3201      	adds	r2, #1
 8003e64:	f002 021f 	and.w	r2, r2, #31
 8003e68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e6c:	3a1e      	subs	r2, #30
 8003e6e:	0512      	lsls	r2, r2, #20
 8003e70:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e74:	4322      	orrs	r2, r4
 8003e76:	e798      	b.n	8003daa <HAL_ADCEx_InjectedConfigChannel+0x466>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003e7c:	b134      	cbz	r4, 8003e8c <HAL_ADCEx_InjectedConfigChannel+0x548>
  return __builtin_clz(value);
 8003e7e:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003e82:	3401      	adds	r4, #1
 8003e84:	06a4      	lsls	r4, r4, #26
 8003e86:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e8a:	e7df      	b.n	8003e4c <HAL_ADCEx_InjectedConfigChannel+0x508>
    return 32U;
 8003e8c:	2420      	movs	r4, #32
 8003e8e:	e7f8      	b.n	8003e82 <HAL_ADCEx_InjectedConfigChannel+0x53e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8003e94:	b14f      	cbz	r7, 8003eaa <HAL_ADCEx_InjectedConfigChannel+0x566>
  return __builtin_clz(value);
 8003e96:	fab7 f787 	clz	r7, r7
 8003e9a:	3701      	adds	r7, #1
 8003e9c:	f007 071f 	and.w	r7, r7, #31
 8003ea0:	f04f 0c01 	mov.w	ip, #1
 8003ea4:	fa0c f707 	lsl.w	r7, ip, r7
 8003ea8:	e7d8      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x518>
    return 32U;
 8003eaa:	2720      	movs	r7, #32
 8003eac:	e7f5      	b.n	8003e9a <HAL_ADCEx_InjectedConfigChannel+0x556>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003eb2:	b15a      	cbz	r2, 8003ecc <HAL_ADCEx_InjectedConfigChannel+0x588>
  return __builtin_clz(value);
 8003eb4:	fab2 f282 	clz	r2, r2
 8003eb8:	3201      	adds	r2, #1
 8003eba:	f002 021f 	and.w	r2, r2, #31
 8003ebe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ec2:	3a1e      	subs	r2, #30
 8003ec4:	0512      	lsls	r2, r2, #20
 8003ec6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003eca:	e7d3      	b.n	8003e74 <HAL_ADCEx_InjectedConfigChannel+0x530>
    return 32U;
 8003ecc:	2220      	movs	r2, #32
 8003ece:	e7f3      	b.n	8003eb8 <HAL_ADCEx_InjectedConfigChannel+0x574>
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ed0:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8003ed4:	e709      	b.n	8003cea <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8003ed6:	4c31      	ldr	r4, [pc, #196]	; (8003f9c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003ed8:	e707      	b.n	8003cea <HAL_ADCEx_InjectedConfigChannel+0x3a6>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eda:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8003ede:	f47f af0f 	bne.w	8003d00 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ee2:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003ee6:	d003      	beq.n	8003ef0 <HAL_ADCEx_InjectedConfigChannel+0x5ac>
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <HAL_ADCEx_InjectedConfigChannel+0x65c>)
 8003eea:	4291      	cmp	r1, r2
 8003eec:	f47f af10 	bne.w	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ef0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003ef4:	d019      	beq.n	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
 8003ef6:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003ef8:	4291      	cmp	r1, r2
 8003efa:	d014      	beq.n	8003f26 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8003efc:	492a      	ldr	r1, [pc, #168]	; (8003fa8 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003efe:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f02:	688a      	ldr	r2, [r1, #8]
 8003f04:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f08:	4315      	orrs	r5, r2
 8003f0a:	608d      	str	r5, [r1, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003f0c:	4a27      	ldr	r2, [pc, #156]	; (8003fac <HAL_ADCEx_InjectedConfigChannel+0x668>)
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	0992      	lsrs	r2, r2, #6
 8003f12:	4927      	ldr	r1, [pc, #156]	; (8003fb0 <HAL_ADCEx_InjectedConfigChannel+0x66c>)
 8003f14:	fba1 1202 	umull	r1, r2, r1, r2
 8003f18:	0992      	lsrs	r2, r2, #6
 8003f1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003f1e:	0092      	lsls	r2, r2, #2
 8003f20:	3218      	adds	r2, #24
 8003f22:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8003f24:	e006      	b.n	8003f34 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f26:	491d      	ldr	r1, [pc, #116]	; (8003f9c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003f28:	e7e9      	b.n	8003efe <HAL_ADCEx_InjectedConfigChannel+0x5ba>
 8003f2a:	491c      	ldr	r1, [pc, #112]	; (8003f9c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003f2c:	e7e7      	b.n	8003efe <HAL_ADCEx_InjectedConfigChannel+0x5ba>
          wait_loop_index--;
 8003f2e:	9a01      	ldr	r2, [sp, #4]
 8003f30:	3a01      	subs	r2, #1
 8003f32:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8003f34:	9a01      	ldr	r2, [sp, #4]
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d1f9      	bne.n	8003f2e <HAL_ADCEx_InjectedConfigChannel+0x5ea>
 8003f3a:	e6e9      	b.n	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f3c:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8003f40:	f47f aee2 	bne.w	8003d08 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f44:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003f48:	d00d      	beq.n	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003f4c:	4291      	cmp	r1, r2
 8003f4e:	d008      	beq.n	8003f62 <HAL_ADCEx_InjectedConfigChannel+0x61e>
 8003f50:	4915      	ldr	r1, [pc, #84]	; (8003fa8 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003f52:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 8003f56:	688a      	ldr	r2, [r1, #8]
 8003f58:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f5c:	4315      	orrs	r5, r2
 8003f5e:	608d      	str	r5, [r1, #8]
}
 8003f60:	e6d6      	b.n	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8003f62:	490e      	ldr	r1, [pc, #56]	; (8003f9c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003f64:	e7f5      	b.n	8003f52 <HAL_ADCEx_InjectedConfigChannel+0x60e>
 8003f66:	490d      	ldr	r1, [pc, #52]	; (8003f9c <HAL_ADCEx_InjectedConfigChannel+0x658>)
 8003f68:	e7f3      	b.n	8003f52 <HAL_ADCEx_InjectedConfigChannel+0x60e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f6a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8003f6e:	f47f aecf 	bne.w	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
      if (ADC_VREFINT_INSTANCE(hadc))
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <HAL_ADCEx_InjectedConfigChannel+0x660>)
 8003f74:	4291      	cmp	r1, r2
 8003f76:	f43f aecb 	beq.w	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f7a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003f7e:	d008      	beq.n	8003f92 <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8003f80:	4909      	ldr	r1, [pc, #36]	; (8003fa8 <HAL_ADCEx_InjectedConfigChannel+0x664>)
 8003f82:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f86:	688a      	ldr	r2, [r1, #8]
 8003f88:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f8c:	4315      	orrs	r5, r2
 8003f8e:	608d      	str	r5, [r1, #8]
}
 8003f90:	e6be      	b.n	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8003f92:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8003f96:	e7f4      	b.n	8003f82 <HAL_ADCEx_InjectedConfigChannel+0x63e>
  __HAL_LOCK(hadc);
 8003f98:	2002      	movs	r0, #2
 8003f9a:	e6bc      	b.n	8003d16 <HAL_ADCEx_InjectedConfigChannel+0x3d2>
 8003f9c:	50000300 	.word	0x50000300
 8003fa0:	50000600 	.word	0x50000600
 8003fa4:	50000100 	.word	0x50000100
 8003fa8:	50000700 	.word	0x50000700
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	053e2d63 	.word	0x053e2d63

08003fb4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003fb8:	2a01      	cmp	r2, #1
 8003fba:	f000 80d6 	beq.w	800416a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8003fbe:	b410      	push	{r4}
 8003fc0:	b09d      	sub	sp, #116	; 0x74
 8003fc2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003fce:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fd0:	6800      	ldr	r0, [r0, #0]
 8003fd2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003fd6:	d047      	beq.n	8004068 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003fd8:	4a65      	ldr	r2, [pc, #404]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003fda:	4290      	cmp	r0, r2
 8003fdc:	d047      	beq.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003fde:	2200      	movs	r2, #0
 8003fe0:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003fe2:	9a01      	ldr	r2, [sp, #4]
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	d046      	beq.n	8004076 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fe8:	6892      	ldr	r2, [r2, #8]
 8003fea:	f012 0204 	ands.w	r2, r2, #4
 8003fee:	d000      	beq.n	8003ff2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	6884      	ldr	r4, [r0, #8]
 8003ff4:	f014 0f04 	tst.w	r4, #4
 8003ff8:	f040 80a7 	bne.w	800414a <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ffc:	2a00      	cmp	r2, #0
 8003ffe:	f040 80a4 	bne.w	800414a <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004002:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8004006:	d042      	beq.n	800408e <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8004008:	4a5a      	ldr	r2, [pc, #360]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800400a:	4290      	cmp	r0, r2
 800400c:	d03c      	beq.n	8004088 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800400e:	4a5a      	ldr	r2, [pc, #360]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004010:	6808      	ldr	r0, [r1, #0]
 8004012:	2800      	cmp	r0, #0
 8004014:	d05c      	beq.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004016:	6890      	ldr	r0, [r2, #8]
 8004018:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800401c:	684c      	ldr	r4, [r1, #4]
 800401e:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004022:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8004026:	4320      	orrs	r0, r4
 8004028:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8004030:	d02f      	beq.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8004032:	4c50      	ldr	r4, [pc, #320]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004034:	42a0      	cmp	r0, r4
 8004036:	d02c      	beq.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004038:	484d      	ldr	r0, [pc, #308]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800403a:	6884      	ldr	r4, [r0, #8]
 800403c:	f014 0401 	ands.w	r4, r4, #1
 8004040:	d000      	beq.n	8004044 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8004042:	2401      	movs	r4, #1
 8004044:	484d      	ldr	r0, [pc, #308]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8004046:	6880      	ldr	r0, [r0, #8]
 8004048:	f010 0001 	ands.w	r0, r0, #1
 800404c:	d000      	beq.n	8004050 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 800404e:	2001      	movs	r0, #1
 8004050:	4320      	orrs	r0, r4
 8004052:	4c4b      	ldr	r4, [pc, #300]	; (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004054:	68a4      	ldr	r4, [r4, #8]
 8004056:	f014 0401 	ands.w	r4, r4, #1
 800405a:	d000      	beq.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800405c:	2401      	movs	r4, #1
 800405e:	4320      	orrs	r0, r4
 8004060:	bf0c      	ite	eq
 8004062:	2001      	moveq	r0, #1
 8004064:	2000      	movne	r0, #0
 8004066:	e025      	b.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004068:	4a42      	ldr	r2, [pc, #264]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800406a:	9201      	str	r2, [sp, #4]
 800406c:	e7b9      	b.n	8003fe2 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 800406e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004072:	9201      	str	r2, [sp, #4]
 8004074:	e7b5      	b.n	8003fe2 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004078:	f042 0220 	orr.w	r2, r2, #32
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8004084:	2001      	movs	r0, #1
 8004086:	e068      	b.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004088:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800408c:	e7c0      	b.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 800408e:	4a3d      	ldr	r2, [pc, #244]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004090:	e7be      	b.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8004092:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004096:	6880      	ldr	r0, [r0, #8]
 8004098:	f010 0001 	ands.w	r0, r0, #1
 800409c:	d000      	beq.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 800409e:	2001      	movs	r0, #1
 80040a0:	4c34      	ldr	r4, [pc, #208]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040a2:	68a4      	ldr	r4, [r4, #8]
 80040a4:	f014 0401 	ands.w	r4, r4, #1
 80040a8:	d000      	beq.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80040aa:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ac:	4320      	orrs	r0, r4
 80040ae:	bf0c      	ite	eq
 80040b0:	2001      	moveq	r0, #1
 80040b2:	2000      	movne	r0, #0
 80040b4:	2800      	cmp	r0, #0
 80040b6:	d054      	beq.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040b8:	6890      	ldr	r0, [r2, #8]
 80040ba:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 80040be:	f020 000f 	bic.w	r0, r0, #15
 80040c2:	680c      	ldr	r4, [r1, #0]
 80040c4:	6889      	ldr	r1, [r1, #8]
 80040c6:	4321      	orrs	r1, r4
 80040c8:	4308      	orrs	r0, r1
 80040ca:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040cc:	2000      	movs	r0, #0
 80040ce:	e041      	b.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040d0:	6891      	ldr	r1, [r2, #8]
 80040d2:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80040d6:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80040de:	d01a      	beq.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 80040e0:	4824      	ldr	r0, [pc, #144]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040e2:	4281      	cmp	r1, r0
 80040e4:	d017      	beq.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 80040e6:	4922      	ldr	r1, [pc, #136]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80040e8:	6888      	ldr	r0, [r1, #8]
 80040ea:	f010 0001 	ands.w	r0, r0, #1
 80040ee:	d000      	beq.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80040f0:	2001      	movs	r0, #1
 80040f2:	4922      	ldr	r1, [pc, #136]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80040f4:	6889      	ldr	r1, [r1, #8]
 80040f6:	f011 0101 	ands.w	r1, r1, #1
 80040fa:	d000      	beq.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 80040fc:	2101      	movs	r1, #1
 80040fe:	4301      	orrs	r1, r0
 8004100:	481f      	ldr	r0, [pc, #124]	; (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004102:	6880      	ldr	r0, [r0, #8]
 8004104:	f010 0001 	ands.w	r0, r0, #1
 8004108:	d000      	beq.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0x158>
 800410a:	2001      	movs	r0, #1
 800410c:	4301      	orrs	r1, r0
 800410e:	bf0c      	ite	eq
 8004110:	2101      	moveq	r1, #1
 8004112:	2100      	movne	r1, #0
 8004114:	e010      	b.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8004116:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800411a:	6889      	ldr	r1, [r1, #8]
 800411c:	f011 0101 	ands.w	r1, r1, #1
 8004120:	d000      	beq.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004122:	2101      	movs	r1, #1
 8004124:	4813      	ldr	r0, [pc, #76]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004126:	6880      	ldr	r0, [r0, #8]
 8004128:	f010 0001 	ands.w	r0, r0, #1
 800412c:	d000      	beq.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 800412e:	2001      	movs	r0, #1
 8004130:	4301      	orrs	r1, r0
 8004132:	bf0c      	ite	eq
 8004134:	2101      	moveq	r1, #1
 8004136:	2100      	movne	r1, #0
 8004138:	b1a9      	cbz	r1, 8004166 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800413a:	6891      	ldr	r1, [r2, #8]
 800413c:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8004140:	f021 010f 	bic.w	r1, r1, #15
 8004144:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004146:	2000      	movs	r0, #0
 8004148:	e004      	b.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800414c:	f042 0220 	orr.w	r2, r2, #32
 8004150:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004152:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800415a:	b01d      	add	sp, #116	; 0x74
 800415c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004160:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004162:	2000      	movs	r0, #0
 8004164:	e7f6      	b.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 8004166:	2000      	movs	r0, #0
 8004168:	e7f4      	b.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 800416a:	2002      	movs	r0, #2
}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	50000400 	.word	0x50000400
 8004174:	50000100 	.word	0x50000100
 8004178:	50000700 	.word	0x50000700
 800417c:	50000500 	.word	0x50000500
 8004180:	50000600 	.word	0x50000600
 8004184:	50000300 	.word	0x50000300

08004188 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004188:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800418a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800418c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004194:	0200      	lsls	r0, r0, #8
 8004196:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800419a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800419c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80041a4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ac:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_NVIC_SetPriority+0x68>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b6:	f1c3 0c07 	rsb	ip, r3, #7
 80041ba:	f1bc 0f04 	cmp.w	ip, #4
 80041be:	bf28      	it	cs
 80041c0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c4:	f103 0e04 	add.w	lr, r3, #4
 80041c8:	f1be 0f06 	cmp.w	lr, #6
 80041cc:	d918      	bls.n	8004200 <HAL_NVIC_SetPriority+0x54>
 80041ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 3eff 	mov.w	lr, #4294967295
 80041d4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80041d8:	ea21 010c 	bic.w	r1, r1, ip
 80041dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041de:	fa0e f303 	lsl.w	r3, lr, r3
 80041e2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80041e8:	2800      	cmp	r0, #0
 80041ea:	db0b      	blt.n	8004204 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	0109      	lsls	r1, r1, #4
 80041ee:	b2c9      	uxtb	r1, r1
 80041f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80041f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80041f8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80041fc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004200:	2300      	movs	r3, #0
 8004202:	e7e5      	b.n	80041d0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	f000 000f 	and.w	r0, r0, #15
 8004208:	0109      	lsls	r1, r1, #4
 800420a:	b2c9      	uxtb	r1, r1
 800420c:	4b02      	ldr	r3, [pc, #8]	; (8004218 <HAL_NVIC_SetPriority+0x6c>)
 800420e:	5419      	strb	r1, [r3, r0]
 8004210:	e7f4      	b.n	80041fc <HAL_NVIC_SetPriority+0x50>
 8004212:	bf00      	nop
 8004214:	e000ed00 	.word	0xe000ed00
 8004218:	e000ed14 	.word	0xe000ed14

0800421c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800421c:	2800      	cmp	r0, #0
 800421e:	db07      	blt.n	8004230 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004220:	f000 021f 	and.w	r2, r0, #31
 8004224:	0940      	lsrs	r0, r0, #5
 8004226:	2301      	movs	r3, #1
 8004228:	4093      	lsls	r3, r2
 800422a:	4a02      	ldr	r2, [pc, #8]	; (8004234 <HAL_NVIC_EnableIRQ+0x18>)
 800422c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000e100 	.word	0xe000e100

08004238 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004238:	3801      	subs	r0, #1
 800423a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800423e:	d20b      	bcs.n	8004258 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004240:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004244:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <HAL_SYSTICK_Config+0x24>)
 8004248:	21f0      	movs	r1, #240	; 0xf0
 800424a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800424e:	2000      	movs	r0, #0
 8004250:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	2207      	movs	r2, #7
 8004254:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004256:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004258:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004260:	b170      	cbz	r0, 8004280 <HAL_DAC_Init+0x20>
{
 8004262:	b510      	push	{r4, lr}
 8004264:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004266:	7903      	ldrb	r3, [r0, #4]
 8004268:	b133      	cbz	r3, 8004278 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800426a:	2302      	movs	r3, #2
 800426c:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800426e:	2000      	movs	r0, #0
 8004270:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004272:	2301      	movs	r3, #1
 8004274:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8004276:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004278:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800427a:	f7fe f9cf 	bl	800261c <HAL_DAC_MspInit>
 800427e:	e7f4      	b.n	800426a <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8004280:	2001      	movs	r0, #1
}
 8004282:	4770      	bx	lr

08004284 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004284:	7943      	ldrb	r3, [r0, #5]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d02f      	beq.n	80042ea <HAL_DAC_Start+0x66>
{
 800428a:	b570      	push	{r4, r5, r6, lr}
 800428c:	4604      	mov	r4, r0
 800428e:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8004290:	2001      	movs	r0, #1
 8004292:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004294:	2302      	movs	r3, #2
 8004296:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	f001 0610 	and.w	r6, r1, #16
 80042a0:	fa00 f106 	lsl.w	r1, r0, r6
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80042a8:	f7fe fbd4 	bl	8002a54 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80042ac:	b97d      	cbnz	r5, 80042ce <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d004      	beq.n	80042c4 <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042ba:	2301      	movs	r3, #1
 80042bc:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042be:	2000      	movs	r0, #0
 80042c0:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80042c4:	6853      	ldr	r3, [r2, #4]
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	e7f5      	b.n	80042ba <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80042ce:	6821      	ldr	r1, [r4, #0]
 80042d0:	680a      	ldr	r2, [r1, #0]
 80042d2:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 80042d6:	2302      	movs	r3, #2
 80042d8:	fa03 f606 	lsl.w	r6, r3, r6
 80042dc:	42b2      	cmp	r2, r6
 80042de:	d1ec      	bne.n	80042ba <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80042e0:	684b      	ldr	r3, [r1, #4]
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	e7e7      	b.n	80042ba <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 80042ea:	2002      	movs	r0, #2
}
 80042ec:	4770      	bx	lr

080042ee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80042ee:	b410      	push	{r4}
 80042f0:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 80042f2:	2400      	movs	r4, #0
 80042f4:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80042f6:	6800      	ldr	r0, [r0, #0]
 80042f8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80042fa:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80042fc:	b951      	cbnz	r1, 8004314 <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80042fe:	9901      	ldr	r1, [sp, #4]
 8004300:	440a      	add	r2, r1
 8004302:	3208      	adds	r2, #8
 8004304:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004306:	9a01      	ldr	r2, [sp, #4]
 8004308:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 800430a:	2000      	movs	r0, #0
 800430c:	b003      	add	sp, #12
 800430e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004312:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004314:	9901      	ldr	r1, [sp, #4]
 8004316:	440a      	add	r2, r1
 8004318:	3214      	adds	r2, #20
 800431a:	9201      	str	r2, [sp, #4]
 800431c:	e7f3      	b.n	8004306 <HAL_DAC_SetValue+0x18>
	...

08004320 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004320:	7943      	ldrb	r3, [r0, #5]
 8004322:	2b01      	cmp	r3, #1
 8004324:	f000 80f4 	beq.w	8004510 <HAL_DAC_ConfigChannel+0x1f0>
{
 8004328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800432c:	4604      	mov	r4, r0
 800432e:	460e      	mov	r6, r1
 8004330:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8004332:	2301      	movs	r3, #1
 8004334:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800433a:	688b      	ldr	r3, [r1, #8]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d017      	beq.n	8004370 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004340:	69f3      	ldr	r3, [r6, #28]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d05e      	beq.n	8004404 <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800434a:	f005 0510 	and.w	r5, r5, #16
 800434e:	2307      	movs	r3, #7
 8004350:	40ab      	lsls	r3, r5
 8004352:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004356:	69b3      	ldr	r3, [r6, #24]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d060      	beq.n	800441e <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800435c:	2b02      	cmp	r3, #2
 800435e:	f000 80bd 	beq.w	80044dc <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004362:	6973      	ldr	r3, [r6, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 80bc 	bne.w	80044e2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800436a:	f04f 0801 	mov.w	r8, #1
 800436e:	e058      	b.n	8004422 <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8004370:	f7fe fb6a 	bl	8002a48 <HAL_GetTick>
 8004374:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8004376:	b17d      	cbz	r5, 8004398 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	2b00      	cmp	r3, #0
 800437e:	da3a      	bge.n	80043f6 <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004380:	f7fe fb62 	bl	8002a48 <HAL_GetTick>
 8004384:	1bc0      	subs	r0, r0, r7
 8004386:	2801      	cmp	r0, #1
 8004388:	d9f6      	bls.n	8004378 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	f043 0308 	orr.w	r3, r3, #8
 8004390:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004392:	2003      	movs	r0, #3
 8004394:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8004396:	e09f      	b.n	80044d8 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80043a0:	d00b      	beq.n	80043ba <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043a2:	f7fe fb51 	bl	8002a48 <HAL_GetTick>
 80043a6:	1bc0      	subs	r0, r0, r7
 80043a8:	2801      	cmp	r0, #1
 80043aa:	d9f5      	bls.n	8004398 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	f043 0308 	orr.w	r3, r3, #8
 80043b2:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043b4:	2003      	movs	r0, #3
 80043b6:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80043b8:	e08e      	b.n	80044d8 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 80043ba:	2001      	movs	r0, #1
 80043bc:	f7fe fb4a 	bl	8002a54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80043ca:	f005 0110 	and.w	r1, r5, #16
 80043ce:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80043d2:	408b      	lsls	r3, r1
 80043d4:	ea22 0203 	bic.w	r2, r2, r3
 80043d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80043da:	408b      	lsls	r3, r1
 80043dc:	431a      	orrs	r2, r3
 80043de:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80043e4:	22ff      	movs	r2, #255	; 0xff
 80043e6:	408a      	lsls	r2, r1
 80043e8:	ea23 0302 	bic.w	r3, r3, r2
 80043ec:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80043ee:	408a      	lsls	r2, r1
 80043f0:	4313      	orrs	r3, r2
 80043f2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80043f4:	e7a4      	b.n	8004340 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f7fe fb2c 	bl	8002a54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
 8004402:	e7e0      	b.n	80043c6 <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 8004404:	6821      	ldr	r1, [r4, #0]
 8004406:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004408:	f005 0010 	and.w	r0, r5, #16
 800440c:	231f      	movs	r3, #31
 800440e:	4083      	lsls	r3, r0
 8004410:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004414:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004416:	4083      	lsls	r3, r0
 8004418:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 800441a:	638b      	str	r3, [r1, #56]	; 0x38
 800441c:	e793      	b.n	8004346 <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 800441e:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004422:	68b3      	ldr	r3, [r6, #8]
 8004424:	6972      	ldr	r2, [r6, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800442c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004430:	40aa      	lsls	r2, r5
 8004432:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004436:	7932      	ldrb	r2, [r6, #4]
 8004438:	2a01      	cmp	r2, #1
 800443a:	d055      	beq.n	80044e8 <HAL_DAC_ConfigChannel+0x1c8>
 800443c:	f04f 0800 	mov.w	r8, #0
 8004440:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	40aa      	lsls	r2, r5
 800444a:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800444e:	7972      	ldrb	r2, [r6, #5]
 8004450:	2a01      	cmp	r2, #1
 8004452:	d04c      	beq.n	80044ee <HAL_DAC_ConfigChannel+0x1ce>
 8004454:	f04f 0800 	mov.w	r8, #0
 8004458:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800445c:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d046      	beq.n	80044f4 <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004466:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004468:	fa08 f805 	lsl.w	r8, r8, r5
 800446c:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004474:	6821      	ldr	r1, [r4, #0]
 8004476:	680b      	ldr	r3, [r1, #0]
 8004478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800447c:	40aa      	lsls	r2, r5
 800447e:	ea23 0302 	bic.w	r3, r3, r2
 8004482:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004484:	6821      	ldr	r1, [r4, #0]
 8004486:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004488:	f640 72fe 	movw	r2, #4094	; 0xffe
 800448c:	40aa      	lsls	r2, r5
 800448e:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004492:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004494:	40ab      	lsls	r3, r5
 8004496:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004498:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800449a:	6821      	ldr	r1, [r4, #0]
 800449c:	680b      	ldr	r3, [r1, #0]
 800449e:	22c0      	movs	r2, #192	; 0xc0
 80044a0:	40aa      	lsls	r2, r5
 80044a2:	ea23 0302 	bic.w	r3, r3, r2
 80044a6:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80044a8:	68f2      	ldr	r2, [r6, #12]
 80044aa:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80044ae:	6932      	ldr	r2, [r6, #16]
 80044b0:	0892      	lsrs	r2, r2, #2
 80044b2:	0212      	lsls	r2, r2, #8
 80044b4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80044b8:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80044be:	f640 710f 	movw	r1, #3855	; 0xf0f
 80044c2:	40a9      	lsls	r1, r5
 80044c4:	ea23 0301 	bic.w	r3, r3, r1
 80044c8:	fa02 f505 	lsl.w	r5, r2, r5
 80044cc:	431d      	orrs	r5, r3
 80044ce:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044d0:	2301      	movs	r3, #1
 80044d2:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044d4:	2000      	movs	r0, #0
 80044d6:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80044d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 80044dc:	f04f 0801 	mov.w	r8, #1
 80044e0:	e79f      	b.n	8004422 <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 80044e2:	f04f 0800 	mov.w	r8, #0
 80044e6:	e79c      	b.n	8004422 <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80044e8:	f44f 7880 	mov.w	r8, #256	; 0x100
 80044ec:	e7a8      	b.n	8004440 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80044ee:	f44f 7800 	mov.w	r8, #512	; 0x200
 80044f2:	e7b1      	b.n	8004458 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80044f4:	f000 ff00 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_DAC_ConfigChannel+0x1f4>)
 80044fa:	4298      	cmp	r0, r3
 80044fc:	d902      	bls.n	8004504 <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80044fe:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8004502:	e7b1      	b.n	8004468 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_DAC_ConfigChannel+0x1f8>)
 8004506:	4298      	cmp	r0, r3
 8004508:	d9ae      	bls.n	8004468 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800450a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800450e:	e7ab      	b.n	8004468 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 8004510:	2002      	movs	r0, #2
}
 8004512:	4770      	bx	lr
 8004514:	09896800 	.word	0x09896800
 8004518:	04c4b400 	.word	0x04c4b400

0800451c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800451c:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800451e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004520:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004522:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004524:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004526:	b114      	cbz	r4, 800452e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004528:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800452a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800452c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800452e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004530:	f004 0c1f 	and.w	ip, r4, #31
 8004534:	2401      	movs	r4, #1
 8004536:	fa04 f40c 	lsl.w	r4, r4, ip
 800453a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800453c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800453e:	6804      	ldr	r4, [r0, #0]
 8004540:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004542:	6883      	ldr	r3, [r0, #8]
 8004544:	2b10      	cmp	r3, #16
 8004546:	d005      	beq.n	8004554 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004548:	6803      	ldr	r3, [r0, #0]
 800454a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800454c:	6803      	ldr	r3, [r0, #0]
 800454e:	60da      	str	r2, [r3, #12]
  }
}
 8004550:	bc30      	pop	{r4, r5}
 8004552:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004554:	6803      	ldr	r3, [r0, #0]
 8004556:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004558:	6803      	ldr	r3, [r0, #0]
 800455a:	60d9      	str	r1, [r3, #12]
 800455c:	e7f8      	b.n	8004550 <DMA_SetConfig+0x34>
	...

08004560 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004560:	6803      	ldr	r3, [r0, #0]
 8004562:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d813      	bhi.n	8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004568:	490b      	ldr	r1, [pc, #44]	; (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3b08      	subs	r3, #8
 800456e:	4a0b      	ldr	r2, [pc, #44]	; (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004574:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004576:	f022 0203 	bic.w	r2, r2, #3
 800457a:	440a      	add	r2, r1
 800457c:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800457e:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8004580:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004582:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8004586:	2201      	movs	r2, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800458e:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004590:	4904      	ldr	r1, [pc, #16]	; (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8004592:	e7ea      	b.n	800456a <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8004594:	40020407 	.word	0x40020407
 8004598:	40020800 	.word	0x40020800
 800459c:	cccccccd 	.word	0xcccccccd
 80045a0:	40020880 	.word	0x40020880
 80045a4:	40020820 	.word	0x40020820

080045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045a8:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045aa:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80045ac:	441a      	add	r2, r3
 80045ae:	0092      	lsls	r2, r2, #2
 80045b0:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045b2:	4a06      	ldr	r2, [pc, #24]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80045b4:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80045b6:	3b01      	subs	r3, #1
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	2201      	movs	r2, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	1000823f 	.word	0x1000823f
 80045cc:	40020940 	.word	0x40020940

080045d0 <HAL_DMA_Init>:
  if (hdma == NULL)
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d05b      	beq.n	800468c <HAL_DMA_Init+0xbc>
{
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045d8:	6801      	ldr	r1, [r0, #0]
 80045da:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_DMA_Init+0xc0>)
 80045dc:	4299      	cmp	r1, r3
 80045de:	d83d      	bhi.n	800465c <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045e0:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <HAL_DMA_Init+0xc4>)
 80045e2:	440b      	add	r3, r1
 80045e4:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <HAL_DMA_Init+0xc8>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045f0:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_DMA_Init+0xcc>)
 80045f2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	2302      	movs	r3, #2
 80045f6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80045fa:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045fc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004600:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8004604:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004606:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8004608:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800460a:	6920      	ldr	r0, [r4, #16]
 800460c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800460e:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004610:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004612:	69a0      	ldr	r0, [r4, #24]
 8004614:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004616:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004618:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800461a:	6a20      	ldr	r0, [r4, #32]
 800461c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800461e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004620:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff ff9c 	bl	8004560 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004628:	68a3      	ldr	r3, [r4, #8]
 800462a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800462e:	d020      	beq.n	8004672 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004630:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004632:	7922      	ldrb	r2, [r4, #4]
 8004634:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004636:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004638:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800463a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	2b03      	cmp	r3, #3
 8004642:	d919      	bls.n	8004678 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004648:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800464a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800464c:	2000      	movs	r0, #0
 800464e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8004650:	2301      	movs	r3, #1
 8004652:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8004656:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800465a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_DMA_Init+0xd0>)
 800465e:	440b      	add	r3, r1
 8004660:	4a0d      	ldr	r2, [pc, #52]	; (8004698 <HAL_DMA_Init+0xc8>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_DMA_Init+0xd4>)
 800466e:	6403      	str	r3, [r0, #64]	; 0x40
 8004670:	e7c0      	b.n	80045f4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004672:	2300      	movs	r3, #0
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	e7db      	b.n	8004630 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff ff95 	bl	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800467e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004686:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	e7df      	b.n	800464c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
}
 800468e:	4770      	bx	lr
 8004690:	40020407 	.word	0x40020407
 8004694:	bffdfff8 	.word	0xbffdfff8
 8004698:	cccccccd 	.word	0xcccccccd
 800469c:	40020000 	.word	0x40020000
 80046a0:	bffdfbf8 	.word	0xbffdfbf8
 80046a4:	40020400 	.word	0x40020400

080046a8 <HAL_DMA_Start_IT>:
{
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80046ac:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80046b0:	2801      	cmp	r0, #1
 80046b2:	d041      	beq.n	8004738 <HAL_DMA_Start_IT+0x90>
 80046b4:	2001      	movs	r0, #1
 80046b6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80046ba:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80046be:	b2c0      	uxtb	r0, r0
 80046c0:	2801      	cmp	r0, #1
 80046c2:	d004      	beq.n	80046ce <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 80046c4:	2300      	movs	r3, #0
 80046c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 80046ca:	2002      	movs	r0, #2
}
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ce:	2002      	movs	r0, #2
 80046d0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d4:	2000      	movs	r0, #0
 80046d6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80046d8:	6825      	ldr	r5, [r4, #0]
 80046da:	6828      	ldr	r0, [r5, #0]
 80046dc:	f020 0001 	bic.w	r0, r0, #1
 80046e0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e2:	4620      	mov	r0, r4
 80046e4:	f7ff ff1a 	bl	800451c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80046e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046ea:	b1d3      	cbz	r3, 8004722 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	f043 030e 	orr.w	r3, r3, #14
 80046f4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80046fe:	d003      	beq.n	8004708 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004706:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004708:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800470a:	b11b      	cbz	r3, 8004714 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004712:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2000      	movs	r0, #0
 8004720:	e7d4      	b.n	80046cc <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	6813      	ldr	r3, [r2, #0]
 8004726:	f023 0304 	bic.w	r3, r3, #4
 800472a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	f043 030a 	orr.w	r3, r3, #10
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e7de      	b.n	80046f6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8004738:	2002      	movs	r0, #2
 800473a:	e7c7      	b.n	80046cc <HAL_DMA_Start_IT+0x24>

0800473c <HAL_DMA_IRQHandler>:
{
 800473c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800473e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004740:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004742:	6804      	ldr	r4, [r0, #0]
 8004744:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004746:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2204      	movs	r2, #4
 800474e:	409a      	lsls	r2, r3
 8004750:	420a      	tst	r2, r1
 8004752:	d015      	beq.n	8004780 <HAL_DMA_IRQHandler+0x44>
 8004754:	f015 0f04 	tst.w	r5, #4
 8004758:	d012      	beq.n	8004780 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f013 0f20 	tst.w	r3, #32
 8004760:	d103      	bne.n	800476a <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800476a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800476c:	f003 021f 	and.w	r2, r3, #31
 8004770:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004772:	2304      	movs	r3, #4
 8004774:	4093      	lsls	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004778:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800477a:	b103      	cbz	r3, 800477e <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800477c:	4798      	blx	r3
}
 800477e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004780:	2202      	movs	r2, #2
 8004782:	409a      	lsls	r2, r3
 8004784:	420a      	tst	r2, r1
 8004786:	d01c      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8004788:	f015 0f02 	tst.w	r5, #2
 800478c:	d019      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	f013 0f20 	tst.w	r3, #32
 8004794:	d106      	bne.n	80047a4 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	f023 030a 	bic.w	r3, r3, #10
 800479c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800479e:	2301      	movs	r3, #1
 80047a0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80047a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80047a6:	f003 021f 	and.w	r2, r3, #31
 80047aa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80047ac:	2302      	movs	r3, #2
 80047ae:	4093      	lsls	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80047b2:	2300      	movs	r3, #0
 80047b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80047b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0df      	beq.n	800477e <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80047be:	4798      	blx	r3
 80047c0:	e7dd      	b.n	800477e <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80047c2:	2208      	movs	r2, #8
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	420b      	tst	r3, r1
 80047ca:	d0d8      	beq.n	800477e <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 80047cc:	f015 0f08 	tst.w	r5, #8
 80047d0:	d0d5      	beq.n	800477e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f023 030e 	bic.w	r3, r3, #14
 80047d8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80047e2:	2201      	movs	r2, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047ea:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80047ec:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80047f0:	2300      	movs	r3, #0
 80047f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80047f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0c0      	beq.n	800477e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80047fc:	4798      	blx	r3
  return;
 80047fe:	e7be      	b.n	800477e <HAL_DMA_IRQHandler+0x42>

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004804:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004806:	e062      	b.n	80048ce <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004808:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800480a:	005e      	lsls	r6, r3, #1
 800480c:	2403      	movs	r4, #3
 800480e:	40b4      	lsls	r4, r6
 8004810:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004814:	68cc      	ldr	r4, [r1, #12]
 8004816:	40b4      	lsls	r4, r6
 8004818:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800481a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800481c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800481e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004822:	684c      	ldr	r4, [r1, #4]
 8004824:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004828:	409c      	lsls	r4, r3
 800482a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800482e:	6044      	str	r4, [r0, #4]
 8004830:	e05e      	b.n	80048f0 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004832:	08dd      	lsrs	r5, r3, #3
 8004834:	3508      	adds	r5, #8
 8004836:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800483a:	f003 0407 	and.w	r4, r3, #7
 800483e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004842:	240f      	movs	r4, #15
 8004844:	fa04 f40c 	lsl.w	r4, r4, ip
 8004848:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800484c:	690c      	ldr	r4, [r1, #16]
 800484e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004852:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004856:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800485a:	e060      	b.n	800491e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800485c:	2405      	movs	r4, #5
 800485e:	e000      	b.n	8004862 <HAL_GPIO_Init+0x62>
 8004860:	2400      	movs	r4, #0
 8004862:	fa04 f40e 	lsl.w	r4, r4, lr
 8004866:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004868:	f10c 0c02 	add.w	ip, ip, #2
 800486c:	4d55      	ldr	r5, [pc, #340]	; (80049c4 <HAL_GPIO_Init+0x1c4>)
 800486e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004872:	4c55      	ldr	r4, [pc, #340]	; (80049c8 <HAL_GPIO_Init+0x1c8>)
 8004874:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004876:	43d4      	mvns	r4, r2
 8004878:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800487c:	684f      	ldr	r7, [r1, #4]
 800487e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004882:	d001      	beq.n	8004888 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004884:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004888:	4d4f      	ldr	r5, [pc, #316]	; (80049c8 <HAL_GPIO_Init+0x1c8>)
 800488a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800488c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800488e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004892:	684f      	ldr	r7, [r1, #4]
 8004894:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004898:	d001      	beq.n	800489e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800489a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800489e:	4d4a      	ldr	r5, [pc, #296]	; (80049c8 <HAL_GPIO_Init+0x1c8>)
 80048a0:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 80048a2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80048a4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048a8:	684f      	ldr	r7, [r1, #4]
 80048aa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80048ae:	d001      	beq.n	80048b4 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80048b0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80048b4:	4d44      	ldr	r5, [pc, #272]	; (80049c8 <HAL_GPIO_Init+0x1c8>)
 80048b6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048b8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80048ba:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048bc:	684e      	ldr	r6, [r1, #4]
 80048be:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80048c2:	d001      	beq.n	80048c8 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80048c4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80048c8:	4a3f      	ldr	r2, [pc, #252]	; (80049c8 <HAL_GPIO_Init+0x1c8>)
 80048ca:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80048cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048ce:	680a      	ldr	r2, [r1, #0]
 80048d0:	fa32 f403 	lsrs.w	r4, r2, r3
 80048d4:	d074      	beq.n	80049c0 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048d6:	f04f 0c01 	mov.w	ip, #1
 80048da:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80048de:	ea1c 0202 	ands.w	r2, ip, r2
 80048e2:	d0f3      	beq.n	80048cc <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048e4:	684c      	ldr	r4, [r1, #4]
 80048e6:	f004 0403 	and.w	r4, r4, #3
 80048ea:	3c01      	subs	r4, #1
 80048ec:	2c01      	cmp	r4, #1
 80048ee:	d98b      	bls.n	8004808 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f0:	684c      	ldr	r4, [r1, #4]
 80048f2:	f004 0403 	and.w	r4, r4, #3
 80048f6:	2c03      	cmp	r4, #3
 80048f8:	d00c      	beq.n	8004914 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80048fa:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048fc:	005d      	lsls	r5, r3, #1
 80048fe:	f04f 0c03 	mov.w	ip, #3
 8004902:	fa0c fc05 	lsl.w	ip, ip, r5
 8004906:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490a:	688c      	ldr	r4, [r1, #8]
 800490c:	40ac      	lsls	r4, r5
 800490e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004912:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004914:	684c      	ldr	r4, [r1, #4]
 8004916:	f004 0403 	and.w	r4, r4, #3
 800491a:	2c02      	cmp	r4, #2
 800491c:	d089      	beq.n	8004832 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800491e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004920:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004924:	f04f 0c03 	mov.w	ip, #3
 8004928:	fa0c fc0e 	lsl.w	ip, ip, lr
 800492c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004930:	684c      	ldr	r4, [r1, #4]
 8004932:	f004 0403 	and.w	r4, r4, #3
 8004936:	fa04 f40e 	lsl.w	r4, r4, lr
 800493a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800493e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004940:	684c      	ldr	r4, [r1, #4]
 8004942:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004946:	d0c1      	beq.n	80048cc <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004948:	4c20      	ldr	r4, [pc, #128]	; (80049cc <HAL_GPIO_Init+0x1cc>)
 800494a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800494c:	f045 0501 	orr.w	r5, r5, #1
 8004950:	6625      	str	r5, [r4, #96]	; 0x60
 8004952:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8004954:	f004 0401 	and.w	r4, r4, #1
 8004958:	9401      	str	r4, [sp, #4]
 800495a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800495c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004960:	f10c 0502 	add.w	r5, ip, #2
 8004964:	4c17      	ldr	r4, [pc, #92]	; (80049c4 <HAL_GPIO_Init+0x1c4>)
 8004966:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800496a:	f003 0403 	and.w	r4, r3, #3
 800496e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004972:	240f      	movs	r4, #15
 8004974:	fa04 f40e 	lsl.w	r4, r4, lr
 8004978:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800497c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004980:	f43f af6e 	beq.w	8004860 <HAL_GPIO_Init+0x60>
 8004984:	4c12      	ldr	r4, [pc, #72]	; (80049d0 <HAL_GPIO_Init+0x1d0>)
 8004986:	42a0      	cmp	r0, r4
 8004988:	d012      	beq.n	80049b0 <HAL_GPIO_Init+0x1b0>
 800498a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800498e:	42a0      	cmp	r0, r4
 8004990:	d010      	beq.n	80049b4 <HAL_GPIO_Init+0x1b4>
 8004992:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004996:	42a0      	cmp	r0, r4
 8004998:	d00e      	beq.n	80049b8 <HAL_GPIO_Init+0x1b8>
 800499a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800499e:	42a0      	cmp	r0, r4
 80049a0:	d00c      	beq.n	80049bc <HAL_GPIO_Init+0x1bc>
 80049a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049a6:	42a0      	cmp	r0, r4
 80049a8:	f43f af58 	beq.w	800485c <HAL_GPIO_Init+0x5c>
 80049ac:	2406      	movs	r4, #6
 80049ae:	e758      	b.n	8004862 <HAL_GPIO_Init+0x62>
 80049b0:	2401      	movs	r4, #1
 80049b2:	e756      	b.n	8004862 <HAL_GPIO_Init+0x62>
 80049b4:	2402      	movs	r4, #2
 80049b6:	e754      	b.n	8004862 <HAL_GPIO_Init+0x62>
 80049b8:	2403      	movs	r4, #3
 80049ba:	e752      	b.n	8004862 <HAL_GPIO_Init+0x62>
 80049bc:	2404      	movs	r4, #4
 80049be:	e750      	b.n	8004862 <HAL_GPIO_Init+0x62>
  }
}
 80049c0:	b003      	add	sp, #12
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40021000 	.word	0x40021000
 80049d0:	48000400 	.word	0x48000400

080049d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80049d4:	6903      	ldr	r3, [r0, #16]
 80049d6:	4219      	tst	r1, r3
 80049d8:	d001      	beq.n	80049de <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80049da:	2001      	movs	r0, #1
 80049dc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049de:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80049e0:	4770      	bx	lr

080049e2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049e2:	b10a      	cbz	r2, 80049e8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049e4:	6181      	str	r1, [r0, #24]
 80049e6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049e8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80049ea:	4770      	bx	lr

080049ec <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ec:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049ee:	ea01 0203 	and.w	r2, r1, r3
 80049f2:	ea21 0103 	bic.w	r1, r1, r3
 80049f6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049fa:	6181      	str	r1, [r0, #24]
}
 80049fc:	4770      	bx	lr

080049fe <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80049fe:	4770      	bx	lr

08004a00 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004a00:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4203      	tst	r3, r0
 8004a08:	d100      	bne.n	8004a0c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8004a0a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a0c:	4b02      	ldr	r3, [pc, #8]	; (8004a18 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004a0e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a10:	f7ff fff5 	bl	80049fe <HAL_GPIO_EXTI_Callback>
}
 8004a14:	e7f9      	b.n	8004a0a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004a16:	bf00      	nop
 8004a18:	40010400 	.word	0x40010400

08004a1c <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d136      	bne.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a20:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d008      	beq.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a2e:	4a3b      	ldr	r2, [pc, #236]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a30:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a40:	4a36      	ldr	r2, [pc, #216]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a58:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a5a:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2232      	movs	r2, #50	; 0x32
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	0c9b      	lsrs	r3, r3, #18
 8004a6c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6e:	e000      	b.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8004a70:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a74:	6952      	ldr	r2, [r2, #20]
 8004a76:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004a7a:	d001      	beq.n	8004a80 <HAL_PWREx_ControlVoltageScaling+0x64>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f7      	bne.n	8004a70 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a80:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a88:	d144      	bne.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a8e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004a92:	d008      	beq.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab2:	d008      	beq.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ab4:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004ab6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ac6:	4a15      	ldr	r2, [pc, #84]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004ac8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ad4:	6813      	ldr	r3, [r2, #0]
 8004ad6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ade:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2232      	movs	r2, #50	; 0x32
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	0c9b      	lsrs	r3, r3, #18
 8004af2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af4:	e000      	b.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8004af6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af8:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004afa:	6952      	ldr	r2, [r2, #20]
 8004afc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b00:	d001      	beq.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0xea>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f7      	bne.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b0e:	d103      	bne.n	8004b18 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8004b10:	2000      	movs	r0, #0
 8004b12:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004b14:	2003      	movs	r0, #3
 8004b16:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004b18:	2003      	movs	r0, #3
}
 8004b1a:	4770      	bx	lr
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	20000000 	.word	0x20000000
 8004b24:	431bde83 	.word	0x431bde83

08004b28 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b28:	4a02      	ldr	r2, [pc, #8]	; (8004b34 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004b2a:	6893      	ldr	r3, [r2, #8]
 8004b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b30:	6093      	str	r3, [r2, #8]
}
 8004b32:	4770      	bx	lr
 8004b34:	40007000 	.word	0x40007000

08004b38 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b40:	68d8      	ldr	r0, [r3, #12]
 8004b42:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004b46:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8004b48:	2a03      	cmp	r2, #3
 8004b4a:	d011      	beq.n	8004b70 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b4c:	480e      	ldr	r0, [pc, #56]	; (8004b88 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8004b5a:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8004b6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b6e:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b70:	4806      	ldr	r0, [pc, #24]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8004b72:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b76:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8004b7e:	fb03 f000 	mul.w	r0, r3, r0
    break;
 8004b82:	e7ec      	b.n	8004b5e <RCC_GetSysClockFreqFromPLLSource+0x26>
 8004b84:	40021000 	.word	0x40021000
 8004b88:	00f42400 	.word	0x00f42400
 8004b8c:	016e3600 	.word	0x016e3600

08004b90 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004b90:	2800      	cmp	r0, #0
 8004b92:	f000 8254 	beq.w	800503e <HAL_RCC_OscConfig+0x4ae>
{
 8004b96:	b570      	push	{r4, r5, r6, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9c:	6803      	ldr	r3, [r0, #0]
 8004b9e:	f013 0f01 	tst.w	r3, #1
 8004ba2:	d037      	beq.n	8004c14 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba4:	4aa4      	ldr	r2, [pc, #656]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004ba6:	6893      	ldr	r3, [r2, #8]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bac:	68d2      	ldr	r2, [r2, #12]
 8004bae:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d023      	beq.n	8004bfe <HAL_RCC_OscConfig+0x6e>
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d023      	beq.n	8004c02 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bba:	6863      	ldr	r3, [r4, #4]
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc0:	d04e      	beq.n	8004c60 <HAL_RCC_OscConfig+0xd0>
 8004bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc6:	d051      	beq.n	8004c6c <HAL_RCC_OscConfig+0xdc>
 8004bc8:	4b9b      	ldr	r3, [pc, #620]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bd8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bda:	6863      	ldr	r3, [r4, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d052      	beq.n	8004c86 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8004be0:	f7fd ff32 	bl	8002a48 <HAL_GetTick>
 8004be4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be6:	4b94      	ldr	r3, [pc, #592]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004bee:	d111      	bne.n	8004c14 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf0:	f7fd ff2a 	bl	8002a48 <HAL_GetTick>
 8004bf4:	1b40      	subs	r0, r0, r5
 8004bf6:	2864      	cmp	r0, #100	; 0x64
 8004bf8:	d9f5      	bls.n	8004be6 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8004bfa:	2003      	movs	r0, #3
 8004bfc:	e228      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bfe:	2a03      	cmp	r2, #3
 8004c00:	d1d9      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c02:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c0a:	d003      	beq.n	8004c14 <HAL_RCC_OscConfig+0x84>
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8217 	beq.w	8005042 <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	f013 0f02 	tst.w	r3, #2
 8004c1a:	d05d      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1c:	4a86      	ldr	r2, [pc, #536]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004c1e:	6893      	ldr	r3, [r2, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c24:	68d2      	ldr	r2, [r2, #12]
 8004c26:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d03a      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x114>
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d03a      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d075      	beq.n	8004d24 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4a7f      	ldr	r2, [pc, #508]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004c3a:	6813      	ldr	r3, [r2, #0]
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c42:	f7fd ff01 	bl	8002a48 <HAL_GetTick>
 8004c46:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c48:	4b7b      	ldr	r3, [pc, #492]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c50:	d15f      	bne.n	8004d12 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c52:	f7fd fef9 	bl	8002a48 <HAL_GetTick>
 8004c56:	1b40      	subs	r0, r0, r5
 8004c58:	2802      	cmp	r0, #2
 8004c5a:	d9f5      	bls.n	8004c48 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8004c5c:	2003      	movs	r0, #3
 8004c5e:	e1f7      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	4a75      	ldr	r2, [pc, #468]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e7b6      	b.n	8004bda <HAL_RCC_OscConfig+0x4a>
 8004c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e7a9      	b.n	8004bda <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8004c86:	f7fd fedf 	bl	8002a48 <HAL_GetTick>
 8004c8a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c8c:	4b6a      	ldr	r3, [pc, #424]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c94:	d0be      	beq.n	8004c14 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c96:	f7fd fed7 	bl	8002a48 <HAL_GetTick>
 8004c9a:	1b40      	subs	r0, r0, r5
 8004c9c:	2864      	cmp	r0, #100	; 0x64
 8004c9e:	d9f5      	bls.n	8004c8c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8004ca0:	2003      	movs	r0, #3
 8004ca2:	e1d5      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ca4:	2a02      	cmp	r2, #2
 8004ca6:	d1c2      	bne.n	8004c2e <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca8:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004cb0:	d003      	beq.n	8004cba <HAL_RCC_OscConfig+0x12a>
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 81c6 	beq.w	8005046 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4a5f      	ldr	r2, [pc, #380]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004cbc:	6853      	ldr	r3, [r2, #4]
 8004cbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cc2:	6921      	ldr	r1, [r4, #16]
 8004cc4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004cc8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cca:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	f7fd fe77 	bl	80029c0 <HAL_InitTick>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f040 81b9 	bne.w	800504a <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	f013 0f08 	tst.w	r3, #8
 8004cde:	d04c      	beq.n	8004d7a <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ce0:	6963      	ldr	r3, [r4, #20]
 8004ce2:	b39b      	cbz	r3, 8004d4c <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8004ce4:	4a54      	ldr	r2, [pc, #336]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004ce6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004cf2:	f7fd fea9 	bl	8002a48 <HAL_GetTick>
 8004cf6:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf8:	4b4f      	ldr	r3, [pc, #316]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfe:	f013 0f02 	tst.w	r3, #2
 8004d02:	d13a      	bne.n	8004d7a <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fd fea0 	bl	8002a48 <HAL_GetTick>
 8004d08:	1b40      	subs	r0, r0, r5
 8004d0a:	2802      	cmp	r0, #2
 8004d0c:	d9f4      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8004d0e:	2003      	movs	r0, #3
 8004d10:	e19e      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	4a49      	ldr	r2, [pc, #292]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004d14:	6853      	ldr	r3, [r2, #4]
 8004d16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d1a:	6921      	ldr	r1, [r4, #16]
 8004d1c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d20:	6053      	str	r3, [r2, #4]
 8004d22:	e7d9      	b.n	8004cd8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8004d24:	4a44      	ldr	r2, [pc, #272]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004d26:	6813      	ldr	r3, [r2, #0]
 8004d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d2e:	f7fd fe8b 	bl	8002a48 <HAL_GetTick>
 8004d32:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d34:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d3c:	d0cc      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7fd fe83 	bl	8002a48 <HAL_GetTick>
 8004d42:	1b40      	subs	r0, r0, r5
 8004d44:	2802      	cmp	r0, #2
 8004d46:	d9f5      	bls.n	8004d34 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8004d48:	2003      	movs	r0, #3
 8004d4a:	e181      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8004d4c:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004d4e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d5a:	f7fd fe75 	bl	8002a48 <HAL_GetTick>
 8004d5e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d60:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d66:	f013 0f02 	tst.w	r3, #2
 8004d6a:	d006      	beq.n	8004d7a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fd fe6c 	bl	8002a48 <HAL_GetTick>
 8004d70:	1b40      	subs	r0, r0, r5
 8004d72:	2802      	cmp	r0, #2
 8004d74:	d9f4      	bls.n	8004d60 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8004d76:	2003      	movs	r0, #3
 8004d78:	e16a      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	f013 0f04 	tst.w	r3, #4
 8004d80:	f000 8081 	beq.w	8004e86 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d84:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004d8c:	d136      	bne.n	8004dfc <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004da2:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da4:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_RCC_OscConfig+0x2b0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004dac:	d028      	beq.n	8004e00 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d039      	beq.n	8004e28 <HAL_RCC_OscConfig+0x298>
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	d045      	beq.n	8004e44 <HAL_RCC_OscConfig+0x2b4>
 8004db8:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004dba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004dc6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd2:	68a3      	ldr	r3, [r4, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d043      	beq.n	8004e60 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8004dd8:	f7fd fe36 	bl	8002a48 <HAL_GetTick>
 8004ddc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dde:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f013 0f02 	tst.w	r3, #2
 8004de8:	d14c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f7fd fe2d 	bl	8002a48 <HAL_GetTick>
 8004dee:	1b80      	subs	r0, r0, r6
 8004df0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004df4:	4298      	cmp	r0, r3
 8004df6:	d9f2      	bls.n	8004dde <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8004df8:	2003      	movs	r0, #3
 8004dfa:	e129      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	e7d1      	b.n	8004da4 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e00:	4a0f      	ldr	r2, [pc, #60]	; (8004e40 <HAL_RCC_OscConfig+0x2b0>)
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004e0a:	f7fd fe1d 	bl	8002a48 <HAL_GetTick>
 8004e0e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_OscConfig+0x2b0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e18:	d1c9      	bne.n	8004dae <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7fd fe15 	bl	8002a48 <HAL_GetTick>
 8004e1e:	1b80      	subs	r0, r0, r6
 8004e20:	2802      	cmp	r0, #2
 8004e22:	d9f5      	bls.n	8004e10 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8004e24:	2003      	movs	r0, #3
 8004e26:	e113      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e28:	4a03      	ldr	r2, [pc, #12]	; (8004e38 <HAL_RCC_OscConfig+0x2a8>)
 8004e2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e36:	e7cc      	b.n	8004dd2 <HAL_RCC_OscConfig+0x242>
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	20000008 	.word	0x20000008
 8004e40:	40007000 	.word	0x40007000
 8004e44:	4b8a      	ldr	r3, [pc, #552]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004e46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004e4a:	f042 0204 	orr.w	r2, r2, #4
 8004e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004e52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004e5e:	e7b8      	b.n	8004dd2 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8004e60:	f7fd fdf2 	bl	8002a48 <HAL_GetTick>
 8004e64:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e66:	4b82      	ldr	r3, [pc, #520]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f013 0f02 	tst.w	r3, #2
 8004e70:	d008      	beq.n	8004e84 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fd fde9 	bl	8002a48 <HAL_GetTick>
 8004e76:	1b80      	subs	r0, r0, r6
 8004e78:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e7c:	4298      	cmp	r0, r3
 8004e7e:	d9f2      	bls.n	8004e66 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8004e80:	2003      	movs	r0, #3
 8004e82:	e0e5      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8004e84:	b9e5      	cbnz	r5, 8004ec0 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	f013 0f20 	tst.w	r3, #32
 8004e8c:	d035      	beq.n	8004efa <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e8e:	69a3      	ldr	r3, [r4, #24]
 8004e90:	b1e3      	cbz	r3, 8004ecc <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8004e92:	4a77      	ldr	r2, [pc, #476]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004e94:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004ea0:	f7fd fdd2 	bl	8002a48 <HAL_GetTick>
 8004ea4:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ea6:	4b72      	ldr	r3, [pc, #456]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eac:	f013 0f02 	tst.w	r3, #2
 8004eb0:	d123      	bne.n	8004efa <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb2:	f7fd fdc9 	bl	8002a48 <HAL_GetTick>
 8004eb6:	1b40      	subs	r0, r0, r5
 8004eb8:	2802      	cmp	r0, #2
 8004eba:	d9f4      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8004ebc:	2003      	movs	r0, #3
 8004ebe:	e0c7      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec0:	4a6b      	ldr	r2, [pc, #428]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004ec2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eca:	e7dc      	b.n	8004e86 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8004ecc:	4a68      	ldr	r2, [pc, #416]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004ece:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004eda:	f7fd fdb5 	bl	8002a48 <HAL_GetTick>
 8004ede:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ee0:	4b63      	ldr	r3, [pc, #396]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ee6:	f013 0f02 	tst.w	r3, #2
 8004eea:	d006      	beq.n	8004efa <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eec:	f7fd fdac 	bl	8002a48 <HAL_GetTick>
 8004ef0:	1b40      	subs	r0, r0, r5
 8004ef2:	2802      	cmp	r0, #2
 8004ef4:	d9f4      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8004ef6:	2003      	movs	r0, #3
 8004ef8:	e0aa      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004efa:	69e3      	ldr	r3, [r4, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80a6 	beq.w	800504e <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f02:	4a5b      	ldr	r2, [pc, #364]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004f04:	6892      	ldr	r2, [r2, #8]
 8004f06:	f002 020c 	and.w	r2, r2, #12
 8004f0a:	2a0c      	cmp	r2, #12
 8004f0c:	d069      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d01d      	beq.n	8004f4e <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8004f12:	4b57      	ldr	r3, [pc, #348]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f1a:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	f022 0203 	bic.w	r2, r2, #3
 8004f22:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8004f2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f2e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004f30:	f7fd fd8a 	bl	8002a48 <HAL_GetTick>
 8004f34:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f36:	4b4e      	ldr	r3, [pc, #312]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f3e:	d04e      	beq.n	8004fde <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fd fd82 	bl	8002a48 <HAL_GetTick>
 8004f44:	1b00      	subs	r0, r0, r4
 8004f46:	2802      	cmp	r0, #2
 8004f48:	d9f5      	bls.n	8004f36 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8004f4a:	2003      	movs	r0, #3
 8004f4c:	e080      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4a48      	ldr	r2, [pc, #288]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f58:	f7fd fd76 	bl	8002a48 <HAL_GetTick>
 8004f5c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	4b44      	ldr	r3, [pc, #272]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f66:	d006      	beq.n	8004f76 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f68:	f7fd fd6e 	bl	8002a48 <HAL_GetTick>
 8004f6c:	1b40      	subs	r0, r0, r5
 8004f6e:	2802      	cmp	r0, #2
 8004f70:	d9f5      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8004f72:	2003      	movs	r0, #3
 8004f74:	e06c      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f76:	4a3e      	ldr	r2, [pc, #248]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004f78:	68d3      	ldr	r3, [r2, #12]
 8004f7a:	493e      	ldr	r1, [pc, #248]	; (8005074 <HAL_RCC_OscConfig+0x4e4>)
 8004f7c:	4019      	ands	r1, r3
 8004f7e:	6a23      	ldr	r3, [r4, #32]
 8004f80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004f82:	3801      	subs	r0, #1
 8004f84:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004f88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004f8a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004f8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004f90:	0840      	lsrs	r0, r0, #1
 8004f92:	3801      	subs	r0, #1
 8004f94:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004f98:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004f9a:	0840      	lsrs	r0, r0, #1
 8004f9c:	3801      	subs	r0, #1
 8004f9e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004fa2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004fa4:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004fac:	6813      	ldr	r3, [r2, #0]
 8004fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fb4:	68d3      	ldr	r3, [r2, #12]
 8004fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fba:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fd44 	bl	8002a48 <HAL_GetTick>
 8004fc0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc2:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fca:	d106      	bne.n	8004fda <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd fd3c 	bl	8002a48 <HAL_GetTick>
 8004fd0:	1b00      	subs	r0, r0, r4
 8004fd2:	2802      	cmp	r0, #2
 8004fd4:	d9f5      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8004fd6:	2003      	movs	r0, #3
 8004fd8:	e03a      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e038      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e036      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d036      	beq.n	8005054 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8004fe6:	4b22      	ldr	r3, [pc, #136]	; (8005070 <HAL_RCC_OscConfig+0x4e0>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	f003 0103 	and.w	r1, r3, #3
 8004fee:	6a22      	ldr	r2, [r4, #32]
 8004ff0:	4291      	cmp	r1, r2
 8004ff2:	d131      	bne.n	8005058 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ff4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ff8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ffa:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005000:	d12c      	bne.n	800505c <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005002:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005006:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005008:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800500c:	d128      	bne.n	8005060 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800500e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005012:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005014:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005018:	d124      	bne.n	8005064 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800501a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800501e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005020:	0852      	lsrs	r2, r2, #1
 8005022:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005024:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005028:	d11e      	bne.n	8005068 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800502a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800502e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005030:	0852      	lsrs	r2, r2, #1
 8005032:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005034:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005038:	d118      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 800503a:	2000      	movs	r0, #0
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 800503e:	2001      	movs	r0, #1
}
 8005040:	4770      	bx	lr
        return HAL_ERROR;
 8005042:	2001      	movs	r0, #1
 8005044:	e004      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
 8005048:	e002      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 800504a:	2001      	movs	r0, #1
 800504c:	e000      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800504e:	2000      	movs	r0, #0
}
 8005050:	b002      	add	sp, #8
 8005052:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
 8005056:	e7fb      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
 800505a:	e7f9      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
 800505c:	2001      	movs	r0, #1
 800505e:	e7f7      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
 8005060:	2001      	movs	r0, #1
 8005062:	e7f5      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
 8005064:	2001      	movs	r0, #1
 8005066:	e7f3      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
 8005068:	2001      	movs	r0, #1
 800506a:	e7f1      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
 800506c:	2001      	movs	r0, #1
 800506e:	e7ef      	b.n	8005050 <HAL_RCC_OscConfig+0x4c0>
 8005070:	40021000 	.word	0x40021000
 8005074:	019f800c 	.word	0x019f800c

08005078 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005078:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 030c 	and.w	r3, r3, #12
 8005080:	2b04      	cmp	r3, #4
 8005082:	d033      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005084:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b08      	cmp	r3, #8
 800508e:	d02f      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005090:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 800509c:	2000      	movs	r0, #0
}
 800509e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a8:	68d8      	ldr	r0, [r3, #12]
 80050aa:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80050ae:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 80050b0:	2a03      	cmp	r2, #3
 80050b2:	d011      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b4:	4810      	ldr	r0, [pc, #64]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x80>)
 80050b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80050c2:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80050ce:	3301      	adds	r3, #1
 80050d0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80050d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80050d6:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d8:	4808      	ldr	r0, [pc, #32]	; (80050fc <HAL_RCC_GetSysClockFreq+0x84>)
 80050da:	fbb0 f0f3 	udiv	r0, r0, r3
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80050e6:	fb03 f000 	mul.w	r0, r3, r0
      break;
 80050ea:	e7ec      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80050ec:	4802      	ldr	r0, [pc, #8]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x80>)
 80050ee:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80050f0:	4802      	ldr	r0, [pc, #8]	; (80050fc <HAL_RCC_GetSysClockFreq+0x84>)
 80050f2:	4770      	bx	lr
 80050f4:	40021000 	.word	0x40021000
 80050f8:	00f42400 	.word	0x00f42400
 80050fc:	016e3600 	.word	0x016e3600

08005100 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005100:	2800      	cmp	r0, #0
 8005102:	f000 80e6 	beq.w	80052d2 <HAL_RCC_ClockConfig+0x1d2>
{
 8005106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005108:	460c      	mov	r4, r1
 800510a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800510c:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <HAL_RCC_ClockConfig+0x1e0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	428b      	cmp	r3, r1
 8005116:	d20b      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005118:	4a71      	ldr	r2, [pc, #452]	; (80052e0 <HAL_RCC_ClockConfig+0x1e0>)
 800511a:	6813      	ldr	r3, [r2, #0]
 800511c:	f023 030f 	bic.w	r3, r3, #15
 8005120:	430b      	orrs	r3, r1
 8005122:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005124:	6813      	ldr	r3, [r2, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	428b      	cmp	r3, r1
 800512c:	f040 80d3 	bne.w	80052d6 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005130:	682e      	ldr	r6, [r5, #0]
 8005132:	f016 0601 	ands.w	r6, r6, #1
 8005136:	d05f      	beq.n	80051f8 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005138:	686b      	ldr	r3, [r5, #4]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d02f      	beq.n	800519e <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513e:	2b02      	cmp	r3, #2
 8005140:	d04d      	beq.n	80051de <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005142:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800514a:	f000 80c6 	beq.w	80052da <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800514e:	f7ff ff93 	bl	8005078 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005152:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <HAL_RCC_ClockConfig+0x1e8>)
 8005154:	4298      	cmp	r0, r3
 8005156:	d94d      	bls.n	80051f4 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005158:	4a62      	ldr	r2, [pc, #392]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 800515a:	6893      	ldr	r3, [r2, #8]
 800515c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005164:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005166:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005168:	4a5e      	ldr	r2, [pc, #376]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 800516a:	6893      	ldr	r3, [r2, #8]
 800516c:	f023 0303 	bic.w	r3, r3, #3
 8005170:	6869      	ldr	r1, [r5, #4]
 8005172:	430b      	orrs	r3, r1
 8005174:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005176:	f7fd fc67 	bl	8002a48 <HAL_GetTick>
 800517a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517c:	4b59      	ldr	r3, [pc, #356]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 030c 	and.w	r3, r3, #12
 8005184:	686a      	ldr	r2, [r5, #4]
 8005186:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800518a:	d035      	beq.n	80051f8 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518c:	f7fd fc5c 	bl	8002a48 <HAL_GetTick>
 8005190:	1bc0      	subs	r0, r0, r7
 8005192:	f241 3388 	movw	r3, #5000	; 0x1388
 8005196:	4298      	cmp	r0, r3
 8005198:	d9f0      	bls.n	800517c <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 800519a:	2003      	movs	r0, #3
 800519c:	e078      	b.n	8005290 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519e:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 80051a8:	2001      	movs	r0, #1
 80051aa:	e071      	b.n	8005290 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051ac:	f7ff fcc4 	bl	8004b38 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 80051b0:	4b4d      	ldr	r3, [pc, #308]	; (80052e8 <HAL_RCC_ClockConfig+0x1e8>)
 80051b2:	4298      	cmp	r0, r3
 80051b4:	d91a      	bls.n	80051ec <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051b6:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80051be:	d005      	beq.n	80051cc <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051c0:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051c2:	f016 0602 	ands.w	r6, r6, #2
 80051c6:	d0cf      	beq.n	8005168 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051c8:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051ca:	b98b      	cbnz	r3, 80051f0 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051cc:	4a45      	ldr	r2, [pc, #276]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 80051ce:	6893      	ldr	r3, [r2, #8]
 80051d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051da:	2680      	movs	r6, #128	; 0x80
 80051dc:	e7c4      	b.n	8005168 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051de:	4b41      	ldr	r3, [pc, #260]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80051e6:	d1b2      	bne.n	800514e <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 80051e8:	2001      	movs	r0, #1
 80051ea:	e051      	b.n	8005290 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051ec:	2600      	movs	r6, #0
 80051ee:	e7bb      	b.n	8005168 <HAL_RCC_ClockConfig+0x68>
 80051f0:	2600      	movs	r6, #0
 80051f2:	e7b9      	b.n	8005168 <HAL_RCC_ClockConfig+0x68>
 80051f4:	2600      	movs	r6, #0
 80051f6:	e7b7      	b.n	8005168 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	f013 0f02 	tst.w	r3, #2
 80051fe:	d048      	beq.n	8005292 <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005200:	f013 0f04 	tst.w	r3, #4
 8005204:	d004      	beq.n	8005210 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005206:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 8005208:	6893      	ldr	r3, [r2, #8]
 800520a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800520e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	f013 0f08 	tst.w	r3, #8
 8005216:	d006      	beq.n	8005226 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005218:	4a32      	ldr	r2, [pc, #200]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 800521a:	6893      	ldr	r3, [r2, #8]
 800521c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005220:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005224:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005226:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 8005228:	6893      	ldr	r3, [r2, #8]
 800522a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522e:	68a9      	ldr	r1, [r5, #8]
 8005230:	430b      	orrs	r3, r1
 8005232:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005234:	4b2a      	ldr	r3, [pc, #168]	; (80052e0 <HAL_RCC_ClockConfig+0x1e0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	42a3      	cmp	r3, r4
 800523e:	d830      	bhi.n	80052a2 <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	f013 0f04 	tst.w	r3, #4
 8005246:	d006      	beq.n	8005256 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 800524a:	6893      	ldr	r3, [r2, #8]
 800524c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005250:	68e9      	ldr	r1, [r5, #12]
 8005252:	430b      	orrs	r3, r1
 8005254:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005256:	682b      	ldr	r3, [r5, #0]
 8005258:	f013 0f08 	tst.w	r3, #8
 800525c:	d007      	beq.n	800526e <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 8005260:	6893      	ldr	r3, [r2, #8]
 8005262:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005266:	6929      	ldr	r1, [r5, #16]
 8005268:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800526c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800526e:	f7ff ff03 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_RCC_ClockConfig+0x1ec>)
 800527c:	5cd3      	ldrb	r3, [r2, r3]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	40d8      	lsrs	r0, r3
 8005284:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005286:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005288:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <HAL_RCC_ClockConfig+0x1f4>)
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	f7fd fb98 	bl	80029c0 <HAL_InitTick>
}
 8005290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8005292:	2e80      	cmp	r6, #128	; 0x80
 8005294:	d1ce      	bne.n	8005234 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005296:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <HAL_RCC_ClockConfig+0x1e4>)
 8005298:	6893      	ldr	r3, [r2, #8]
 800529a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800529e:	6093      	str	r3, [r2, #8]
 80052a0:	e7c8      	b.n	8005234 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	4a0f      	ldr	r2, [pc, #60]	; (80052e0 <HAL_RCC_ClockConfig+0x1e0>)
 80052a4:	6813      	ldr	r3, [r2, #0]
 80052a6:	f023 030f 	bic.w	r3, r3, #15
 80052aa:	4323      	orrs	r3, r4
 80052ac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80052ae:	f7fd fbcb 	bl	8002a48 <HAL_GetTick>
 80052b2:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_RCC_ClockConfig+0x1e0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	42a3      	cmp	r3, r4
 80052be:	d0bf      	beq.n	8005240 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c0:	f7fd fbc2 	bl	8002a48 <HAL_GetTick>
 80052c4:	1b80      	subs	r0, r0, r6
 80052c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80052ca:	4298      	cmp	r0, r3
 80052cc:	d9f2      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 80052ce:	2003      	movs	r0, #3
 80052d0:	e7de      	b.n	8005290 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 80052d2:	2001      	movs	r0, #1
}
 80052d4:	4770      	bx	lr
      return HAL_ERROR;
 80052d6:	2001      	movs	r0, #1
 80052d8:	e7da      	b.n	8005290 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 80052da:	2001      	movs	r0, #1
 80052dc:	e7d8      	b.n	8005290 <HAL_RCC_ClockConfig+0x190>
 80052de:	bf00      	nop
 80052e0:	40022000 	.word	0x40022000
 80052e4:	40021000 	.word	0x40021000
 80052e8:	04c4b400 	.word	0x04c4b400
 80052ec:	08007ddc 	.word	0x08007ddc
 80052f0:	20000000 	.word	0x20000000
 80052f4:	20000008 	.word	0x20000008

080052f8 <HAL_RCC_GetHCLKFreq>:
}
 80052f8:	4b01      	ldr	r3, [pc, #4]	; (8005300 <HAL_RCC_GetHCLKFreq+0x8>)
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000000 	.word	0x20000000

08005304 <HAL_RCC_GetPCLK1Freq>:
{
 8005304:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005306:	f7ff fff7 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005312:	4a04      	ldr	r2, [pc, #16]	; (8005324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005314:	5cd3      	ldrb	r3, [r2, r3]
 8005316:	f003 031f 	and.w	r3, r3, #31
}
 800531a:	40d8      	lsrs	r0, r3
 800531c:	bd08      	pop	{r3, pc}
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	08007dec 	.word	0x08007dec

08005328 <HAL_RCC_GetPCLK2Freq>:
{
 8005328:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800532a:	f7ff ffe5 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005336:	4a04      	ldr	r2, [pc, #16]	; (8005348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005338:	5cd3      	ldrb	r3, [r2, r3]
 800533a:	f003 031f 	and.w	r3, r3, #31
}
 800533e:	40d8      	lsrs	r0, r3
 8005340:	bd08      	pop	{r3, pc}
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	08007dec 	.word	0x08007dec

0800534c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	b083      	sub	sp, #12
 8005350:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005352:	6803      	ldr	r3, [r0, #0]
 8005354:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005358:	d06e      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535a:	4b35      	ldr	r3, [pc, #212]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005362:	d11e      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005366:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005368:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800536c:	659a      	str	r2, [r3, #88]	; 0x58
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005378:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800537a:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800537c:	6813      	ldr	r3, [r2, #0]
 800537e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005384:	f7fd fb60 	bl	8002a48 <HAL_GetTick>
 8005388:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005392:	d108      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005394:	f7fd fb58 	bl	8002a48 <HAL_GetTick>
 8005398:	1b40      	subs	r0, r0, r5
 800539a:	2802      	cmp	r0, #2
 800539c:	d9f5      	bls.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800539e:	2503      	movs	r5, #3
 80053a0:	e002      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80053a2:	2600      	movs	r6, #0
 80053a4:	e7e9      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053a6:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80053a8:	bb45      	cbnz	r5, 80053fc <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053aa:	4b21      	ldr	r3, [pc, #132]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80053b4:	d015      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80053b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d012      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053bc:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80053be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80053ca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80053ce:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80053d6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80053da:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053e2:	f013 0f01 	tst.w	r3, #1
 80053e6:	d110      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80053e8:	b945      	cbnz	r5, 80053fc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ea:	4a11      	ldr	r2, [pc, #68]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80053ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80053f6:	430b      	orrs	r3, r1
 80053f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053fc:	b1ee      	cbz	r6, 800543a <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fe:	4a0c      	ldr	r2, [pc, #48]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005400:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005406:	6593      	str	r3, [r2, #88]	; 0x58
 8005408:	e017      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 800540a:	f7fd fb1d 	bl	8002a48 <HAL_GetTick>
 800540e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f013 0f02 	tst.w	r3, #2
 800541a:	d1e5      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541c:	f7fd fb14 	bl	8002a48 <HAL_GetTick>
 8005420:	1bc0      	subs	r0, r0, r7
 8005422:	f241 3388 	movw	r3, #5000	; 0x1388
 8005426:	4298      	cmp	r0, r3
 8005428:	d9f2      	bls.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800542a:	2503      	movs	r5, #3
 800542c:	e7dc      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000
 8005434:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005438:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f013 0f01 	tst.w	r3, #1
 8005440:	d008      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005442:	4a9f      	ldr	r2, [pc, #636]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005444:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005448:	f023 0303 	bic.w	r3, r3, #3
 800544c:	6861      	ldr	r1, [r4, #4]
 800544e:	430b      	orrs	r3, r1
 8005450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	f013 0f02 	tst.w	r3, #2
 800545a:	d008      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800545c:	4a98      	ldr	r2, [pc, #608]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800545e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005462:	f023 030c 	bic.w	r3, r3, #12
 8005466:	68a1      	ldr	r1, [r4, #8]
 8005468:	430b      	orrs	r3, r1
 800546a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	f013 0f04 	tst.w	r3, #4
 8005474:	d008      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005476:	4a92      	ldr	r2, [pc, #584]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005478:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800547c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005480:	68e1      	ldr	r1, [r4, #12]
 8005482:	430b      	orrs	r3, r1
 8005484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	f013 0f08 	tst.w	r3, #8
 800548e:	d008      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005490:	4a8b      	ldr	r2, [pc, #556]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005492:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005496:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800549a:	6921      	ldr	r1, [r4, #16]
 800549c:	430b      	orrs	r3, r1
 800549e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f013 0f10 	tst.w	r3, #16
 80054a8:	d008      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054aa:	4a85      	ldr	r2, [pc, #532]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b4:	6961      	ldr	r1, [r4, #20]
 80054b6:	430b      	orrs	r3, r1
 80054b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	f013 0f20 	tst.w	r3, #32
 80054c2:	d008      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054c4:	4a7e      	ldr	r2, [pc, #504]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054ce:	69a1      	ldr	r1, [r4, #24]
 80054d0:	430b      	orrs	r3, r1
 80054d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054dc:	d008      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054de:	4a78      	ldr	r2, [pc, #480]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054e8:	69e1      	ldr	r1, [r4, #28]
 80054ea:	430b      	orrs	r3, r1
 80054ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054f6:	d008      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054f8:	4a71      	ldr	r2, [pc, #452]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005502:	6a21      	ldr	r1, [r4, #32]
 8005504:	430b      	orrs	r3, r1
 8005506:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005510:	d008      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005512:	4a6b      	ldr	r2, [pc, #428]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005514:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005518:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800551c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800551e:	430b      	orrs	r3, r1
 8005520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800552a:	d008      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800552c:	4a64      	ldr	r2, [pc, #400]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800552e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005532:	f023 0303 	bic.w	r3, r3, #3
 8005536:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005538:	430b      	orrs	r3, r1
 800553a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005544:	d008      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005546:	4a5e      	ldr	r2, [pc, #376]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800554c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005550:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005552:	430b      	orrs	r3, r1
 8005554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800555e:	d00c      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005560:	4a57      	ldr	r2, [pc, #348]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005562:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005566:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800556a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800556c:	430b      	orrs	r3, r1
 800556e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005578:	d079      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005580:	d00c      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005582:	4a4f      	ldr	r2, [pc, #316]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005584:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005588:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800558c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800558e:	430b      	orrs	r3, r1
 8005590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559a:	d06d      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80055a2:	d00c      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055a4:	4a46      	ldr	r2, [pc, #280]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055aa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80055ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055b0:	430b      	orrs	r3, r1
 80055b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055bc:	d061      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80055c4:	d00c      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c6:	4a3e      	ldr	r2, [pc, #248]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055cc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80055d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80055d2:	430b      	orrs	r3, r1
 80055d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055de:	d055      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80055e6:	d00c      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e8:	4a35      	ldr	r2, [pc, #212]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055ee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80055f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80055f4:	430b      	orrs	r3, r1
 80055f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005600:	d049      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005608:	d00c      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800560a:	4a2d      	ldr	r2, [pc, #180]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800560c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005610:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005614:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005616:	430b      	orrs	r3, r1
 8005618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800561c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800561e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005622:	d03d      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800562a:	d00c      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800562e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005632:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005636:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005638:	430b      	orrs	r3, r1
 800563a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800563e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005644:	d031      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800564c:	d00c      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800564e:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005650:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005654:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005658:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800565a:	430b      	orrs	r3, r1
 800565c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005660:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005666:	d025      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8005668:	4628      	mov	r0, r5
 800566a:	b003      	add	sp, #12
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800566e:	68d3      	ldr	r3, [r2, #12]
 8005670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005674:	60d3      	str	r3, [r2, #12]
 8005676:	e780      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	68d3      	ldr	r3, [r2, #12]
 800567a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567e:	60d3      	str	r3, [r2, #12]
 8005680:	e78c      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005682:	68d3      	ldr	r3, [r2, #12]
 8005684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005688:	60d3      	str	r3, [r2, #12]
 800568a:	e798      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568c:	68d3      	ldr	r3, [r2, #12]
 800568e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005692:	60d3      	str	r3, [r2, #12]
 8005694:	e7a4      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005696:	68d3      	ldr	r3, [r2, #12]
 8005698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800569c:	60d3      	str	r3, [r2, #12]
 800569e:	e7b0      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056a0:	68d3      	ldr	r3, [r2, #12]
 80056a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a6:	60d3      	str	r3, [r2, #12]
 80056a8:	e7bc      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056aa:	68d3      	ldr	r3, [r2, #12]
 80056ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b0:	60d3      	str	r3, [r2, #12]
 80056b2:	e7c8      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b4:	68d3      	ldr	r3, [r2, #12]
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
 80056bc:	e7d4      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000

080056c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c6:	6a03      	ldr	r3, [r0, #32]
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056d8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056dc:	680c      	ldr	r4, [r1, #0]
 80056de:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056e0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056e4:	688c      	ldr	r4, [r1, #8]
 80056e6:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056e8:	4c21      	ldr	r4, [pc, #132]	; (8005770 <TIM_OC1_SetConfig+0xac>)
 80056ea:	42a0      	cmp	r0, r4
 80056ec:	d013      	beq.n	8005716 <TIM_OC1_SetConfig+0x52>
 80056ee:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80056f2:	42a0      	cmp	r0, r4
 80056f4:	d00f      	beq.n	8005716 <TIM_OC1_SetConfig+0x52>
 80056f6:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80056fa:	42a0      	cmp	r0, r4
 80056fc:	d00b      	beq.n	8005716 <TIM_OC1_SetConfig+0x52>
 80056fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005702:	42a0      	cmp	r0, r4
 8005704:	d007      	beq.n	8005716 <TIM_OC1_SetConfig+0x52>
 8005706:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800570a:	42a0      	cmp	r0, r4
 800570c:	d003      	beq.n	8005716 <TIM_OC1_SetConfig+0x52>
 800570e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005712:	42a0      	cmp	r0, r4
 8005714:	d105      	bne.n	8005722 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005716:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800571a:	68cc      	ldr	r4, [r1, #12]
 800571c:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800571e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005722:	4c13      	ldr	r4, [pc, #76]	; (8005770 <TIM_OC1_SetConfig+0xac>)
 8005724:	42a0      	cmp	r0, r4
 8005726:	d013      	beq.n	8005750 <TIM_OC1_SetConfig+0x8c>
 8005728:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800572c:	42a0      	cmp	r0, r4
 800572e:	d00f      	beq.n	8005750 <TIM_OC1_SetConfig+0x8c>
 8005730:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005734:	42a0      	cmp	r0, r4
 8005736:	d00b      	beq.n	8005750 <TIM_OC1_SetConfig+0x8c>
 8005738:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800573c:	42a0      	cmp	r0, r4
 800573e:	d007      	beq.n	8005750 <TIM_OC1_SetConfig+0x8c>
 8005740:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005744:	42a0      	cmp	r0, r4
 8005746:	d003      	beq.n	8005750 <TIM_OC1_SetConfig+0x8c>
 8005748:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800574c:	42a0      	cmp	r0, r4
 800574e:	d107      	bne.n	8005760 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005750:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005754:	694c      	ldr	r4, [r1, #20]
 8005756:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800575a:	698d      	ldr	r5, [r1, #24]
 800575c:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005760:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005762:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005764:	684a      	ldr	r2, [r1, #4]
 8005766:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	6203      	str	r3, [r0, #32]
}
 800576a:	bc30      	pop	{r4, r5}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00

08005774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005776:	6a03      	ldr	r3, [r0, #32]
 8005778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800577c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005784:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005788:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800578c:	680d      	ldr	r5, [r1, #0]
 800578e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005794:	688d      	ldr	r5, [r1, #8]
 8005796:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800579a:	4d1c      	ldr	r5, [pc, #112]	; (800580c <TIM_OC3_SetConfig+0x98>)
 800579c:	42a8      	cmp	r0, r5
 800579e:	d007      	beq.n	80057b0 <TIM_OC3_SetConfig+0x3c>
 80057a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80057a4:	42a8      	cmp	r0, r5
 80057a6:	d003      	beq.n	80057b0 <TIM_OC3_SetConfig+0x3c>
 80057a8:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80057ac:	42a8      	cmp	r0, r5
 80057ae:	d106      	bne.n	80057be <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057b4:	68cd      	ldr	r5, [r1, #12]
 80057b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057be:	4d13      	ldr	r5, [pc, #76]	; (800580c <TIM_OC3_SetConfig+0x98>)
 80057c0:	42a8      	cmp	r0, r5
 80057c2:	d013      	beq.n	80057ec <TIM_OC3_SetConfig+0x78>
 80057c4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80057c8:	42a8      	cmp	r0, r5
 80057ca:	d00f      	beq.n	80057ec <TIM_OC3_SetConfig+0x78>
 80057cc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80057d0:	42a8      	cmp	r0, r5
 80057d2:	d00b      	beq.n	80057ec <TIM_OC3_SetConfig+0x78>
 80057d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057d8:	42a8      	cmp	r0, r5
 80057da:	d007      	beq.n	80057ec <TIM_OC3_SetConfig+0x78>
 80057dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057e0:	42a8      	cmp	r0, r5
 80057e2:	d003      	beq.n	80057ec <TIM_OC3_SetConfig+0x78>
 80057e4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80057e8:	42a8      	cmp	r0, r5
 80057ea:	d107      	bne.n	80057fc <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ec:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057f0:	694c      	ldr	r4, [r1, #20]
 80057f2:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057f6:	698c      	ldr	r4, [r1, #24]
 80057f8:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057fe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005800:	684a      	ldr	r2, [r1, #4]
 8005802:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	6203      	str	r3, [r0, #32]
}
 8005806:	bc30      	pop	{r4, r5}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00

08005810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005812:	6a03      	ldr	r3, [r0, #32]
 8005814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005818:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005820:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005824:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	680d      	ldr	r5, [r1, #0]
 800582a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800582e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005832:	688d      	ldr	r5, [r1, #8]
 8005834:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005838:	4d1b      	ldr	r5, [pc, #108]	; (80058a8 <TIM_OC4_SetConfig+0x98>)
 800583a:	42a8      	cmp	r0, r5
 800583c:	d007      	beq.n	800584e <TIM_OC4_SetConfig+0x3e>
 800583e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005842:	42a8      	cmp	r0, r5
 8005844:	d003      	beq.n	800584e <TIM_OC4_SetConfig+0x3e>
 8005846:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800584a:	42a8      	cmp	r0, r5
 800584c:	d106      	bne.n	800585c <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800584e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005852:	68cd      	ldr	r5, [r1, #12]
 8005854:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585c:	4d12      	ldr	r5, [pc, #72]	; (80058a8 <TIM_OC4_SetConfig+0x98>)
 800585e:	42a8      	cmp	r0, r5
 8005860:	d013      	beq.n	800588a <TIM_OC4_SetConfig+0x7a>
 8005862:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005866:	42a8      	cmp	r0, r5
 8005868:	d00f      	beq.n	800588a <TIM_OC4_SetConfig+0x7a>
 800586a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800586e:	42a8      	cmp	r0, r5
 8005870:	d00b      	beq.n	800588a <TIM_OC4_SetConfig+0x7a>
 8005872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005876:	42a8      	cmp	r0, r5
 8005878:	d007      	beq.n	800588a <TIM_OC4_SetConfig+0x7a>
 800587a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800587e:	42a8      	cmp	r0, r5
 8005880:	d003      	beq.n	800588a <TIM_OC4_SetConfig+0x7a>
 8005882:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005886:	42a8      	cmp	r0, r5
 8005888:	d107      	bne.n	800589a <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800588a:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800588e:	694c      	ldr	r4, [r1, #20]
 8005890:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005894:	698c      	ldr	r4, [r1, #24]
 8005896:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800589c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800589e:	684a      	ldr	r2, [r1, #4]
 80058a0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a2:	6203      	str	r3, [r0, #32]
}
 80058a4:	bc30      	pop	{r4, r5}
 80058a6:	4770      	bx	lr
 80058a8:	40012c00 	.word	0x40012c00

080058ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058ae:	6a03      	ldr	r3, [r0, #32]
 80058b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ba:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c4:	680d      	ldr	r5, [r1, #0]
 80058c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058cc:	688d      	ldr	r5, [r1, #8]
 80058ce:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	4d11      	ldr	r5, [pc, #68]	; (8005918 <TIM_OC5_SetConfig+0x6c>)
 80058d4:	42a8      	cmp	r0, r5
 80058d6:	d013      	beq.n	8005900 <TIM_OC5_SetConfig+0x54>
 80058d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058dc:	42a8      	cmp	r0, r5
 80058de:	d00f      	beq.n	8005900 <TIM_OC5_SetConfig+0x54>
 80058e0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80058e4:	42a8      	cmp	r0, r5
 80058e6:	d00b      	beq.n	8005900 <TIM_OC5_SetConfig+0x54>
 80058e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058ec:	42a8      	cmp	r0, r5
 80058ee:	d007      	beq.n	8005900 <TIM_OC5_SetConfig+0x54>
 80058f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058f4:	42a8      	cmp	r0, r5
 80058f6:	d003      	beq.n	8005900 <TIM_OC5_SetConfig+0x54>
 80058f8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058fc:	42a8      	cmp	r0, r5
 80058fe:	d104      	bne.n	800590a <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005900:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005904:	694d      	ldr	r5, [r1, #20]
 8005906:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800590c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800590e:	684a      	ldr	r2, [r1, #4]
 8005910:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	6203      	str	r3, [r0, #32]
}
 8005914:	bc30      	pop	{r4, r5}
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00

0800591c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800591e:	6a03      	ldr	r3, [r0, #32]
 8005920:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005924:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800592a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800592c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005930:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	680d      	ldr	r5, [r1, #0]
 8005936:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800593a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800593e:	688d      	ldr	r5, [r1, #8]
 8005940:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005944:	4d11      	ldr	r5, [pc, #68]	; (800598c <TIM_OC6_SetConfig+0x70>)
 8005946:	42a8      	cmp	r0, r5
 8005948:	d013      	beq.n	8005972 <TIM_OC6_SetConfig+0x56>
 800594a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800594e:	42a8      	cmp	r0, r5
 8005950:	d00f      	beq.n	8005972 <TIM_OC6_SetConfig+0x56>
 8005952:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005956:	42a8      	cmp	r0, r5
 8005958:	d00b      	beq.n	8005972 <TIM_OC6_SetConfig+0x56>
 800595a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800595e:	42a8      	cmp	r0, r5
 8005960:	d007      	beq.n	8005972 <TIM_OC6_SetConfig+0x56>
 8005962:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005966:	42a8      	cmp	r0, r5
 8005968:	d003      	beq.n	8005972 <TIM_OC6_SetConfig+0x56>
 800596a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800596e:	42a8      	cmp	r0, r5
 8005970:	d104      	bne.n	800597c <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005972:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005976:	694d      	ldr	r5, [r1, #20]
 8005978:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800597e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005980:	684a      	ldr	r2, [r1, #4]
 8005982:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005984:	6203      	str	r3, [r0, #32]
}
 8005986:	bc30      	pop	{r4, r5}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00

08005990 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005990:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005992:	6a04      	ldr	r4, [r0, #32]
 8005994:	f024 0410 	bic.w	r4, r4, #16
 8005998:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800599c:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800599e:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80059a2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a6:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80059aa:	031b      	lsls	r3, r3, #12
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b2:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80059b6:	0109      	lsls	r1, r1, #4
 80059b8:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 80059bc:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059be:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80059c0:	6201      	str	r1, [r0, #32]
}
 80059c2:	bc30      	pop	{r4, r5}
 80059c4:	4770      	bx	lr

080059c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059c6:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c8:	6a04      	ldr	r4, [r0, #32]
 80059ca:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80059ce:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059d0:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80059d2:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059d4:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80059d8:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059dc:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059e8:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059ec:	0209      	lsls	r1, r1, #8
 80059ee:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 80059f2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059f4:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80059f6:	6201      	str	r1, [r0, #32]
}
 80059f8:	bc30      	pop	{r4, r5}
 80059fa:	4770      	bx	lr

080059fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059fc:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059fe:	6a04      	ldr	r4, [r0, #32]
 8005a00:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8005a04:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a06:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8005a08:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a0a:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a0e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a12:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a16:	031b      	lsls	r3, r3, #12
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a1e:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a22:	0309      	lsls	r1, r1, #12
 8005a24:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8005a28:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a2a:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8005a2c:	6201      	str	r1, [r0, #32]
}
 8005a2e:	bc30      	pop	{r4, r5}
 8005a30:	4770      	bx	lr
	...

08005a34 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005a34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d135      	bne.n	8005aaa <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a44:	6803      	ldr	r3, [r0, #0]
 8005a46:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_TIM_Base_Start+0x84>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d020      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d01d      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
 8005a52:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d019      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
 8005a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d015      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
 8005a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d011      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
 8005a6a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00d      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
 8005a72:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d009      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
 8005a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d005      	beq.n	8005a8e <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a8e:	6899      	ldr	r1, [r3, #8]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <HAL_TIM_Base_Start+0x88>)
 8005a92:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a94:	2a06      	cmp	r2, #6
 8005a96:	d00a      	beq.n	8005aae <HAL_TIM_Base_Start+0x7a>
 8005a98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	4770      	bx	lr
    return HAL_ERROR;
 8005aaa:	2001      	movs	r0, #1
 8005aac:	4770      	bx	lr
  return HAL_OK;
 8005aae:	2000      	movs	r0, #0
 8005ab0:	4770      	bx	lr
 8005ab2:	2000      	movs	r0, #0
}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	00010007 	.word	0x00010007

08005ac0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d13a      	bne.n	8005b40 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8005aca:	2302      	movs	r3, #2
 8005acc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad0:	6802      	ldr	r2, [r0, #0]
 8005ad2:	68d3      	ldr	r3, [r2, #12]
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ada:	6803      	ldr	r3, [r0, #0]
 8005adc:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <HAL_TIM_Base_Start_IT+0x8c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d020      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
 8005ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae6:	d01d      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
 8005ae8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d019      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
 8005af0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d015      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
 8005af8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d011      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
 8005b00:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00d      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
 8005b08:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d009      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
 8005b10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d005      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005b20:	2000      	movs	r0, #0
 8005b22:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b24:	6899      	ldr	r1, [r3, #8]
 8005b26:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <HAL_TIM_Base_Start_IT+0x90>)
 8005b28:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2a:	2a06      	cmp	r2, #6
 8005b2c:	d00a      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x84>
 8005b2e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005b32:	d009      	beq.n	8005b48 <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	4770      	bx	lr
    return HAL_ERROR;
 8005b40:	2001      	movs	r0, #1
 8005b42:	4770      	bx	lr
  return HAL_OK;
 8005b44:	2000      	movs	r0, #0
 8005b46:	4770      	bx	lr
 8005b48:	2000      	movs	r0, #0
}
 8005b4a:	4770      	bx	lr
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	00010007 	.word	0x00010007

08005b54 <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 8005b54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d00e      	beq.n	8005b7a <HAL_TIM_GenerateEvent+0x26>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b62:	2202      	movs	r2, #2
 8005b64:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 8005b68:	6802      	ldr	r2, [r0, #0]
 8005b6a:	6151      	str	r1, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b70:	2300      	movs	r3, #0
 8005b72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005b76:	4618      	mov	r0, r3
 8005b78:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005b7a:	2002      	movs	r0, #2
}
 8005b7c:	4770      	bx	lr
	...

08005b80 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005b80:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b82:	4a36      	ldr	r2, [pc, #216]	; (8005c5c <TIM_Base_SetConfig+0xdc>)
 8005b84:	4290      	cmp	r0, r2
 8005b86:	d016      	beq.n	8005bb6 <TIM_Base_SetConfig+0x36>
 8005b88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b8c:	d013      	beq.n	8005bb6 <TIM_Base_SetConfig+0x36>
 8005b8e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005b92:	4290      	cmp	r0, r2
 8005b94:	d00f      	beq.n	8005bb6 <TIM_Base_SetConfig+0x36>
 8005b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b9a:	4290      	cmp	r0, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_Base_SetConfig+0x36>
 8005b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ba2:	4290      	cmp	r0, r2
 8005ba4:	d007      	beq.n	8005bb6 <TIM_Base_SetConfig+0x36>
 8005ba6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005baa:	4290      	cmp	r0, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_Base_SetConfig+0x36>
 8005bae:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005bb2:	4290      	cmp	r0, r2
 8005bb4:	d103      	bne.n	8005bbe <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005bba:	684a      	ldr	r2, [r1, #4]
 8005bbc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bbe:	4a27      	ldr	r2, [pc, #156]	; (8005c5c <TIM_Base_SetConfig+0xdc>)
 8005bc0:	4290      	cmp	r0, r2
 8005bc2:	d022      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005bc8:	d01f      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005bce:	4290      	cmp	r0, r2
 8005bd0:	d01b      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bd6:	4290      	cmp	r0, r2
 8005bd8:	d017      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bde:	4290      	cmp	r0, r2
 8005be0:	d013      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005be2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005be6:	4290      	cmp	r0, r2
 8005be8:	d00f      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005bee:	4290      	cmp	r0, r2
 8005bf0:	d00b      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf6:	4290      	cmp	r0, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bfe:	4290      	cmp	r0, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c06:	4290      	cmp	r0, r2
 8005c08:	d103      	bne.n	8005c12 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0e:	68ca      	ldr	r2, [r1, #12]
 8005c10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c16:	694a      	ldr	r2, [r1, #20]
 8005c18:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c1a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	688b      	ldr	r3, [r1, #8]
 8005c1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c20:	680b      	ldr	r3, [r1, #0]
 8005c22:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <TIM_Base_SetConfig+0xdc>)
 8005c26:	4298      	cmp	r0, r3
 8005c28:	d013      	beq.n	8005c52 <TIM_Base_SetConfig+0xd2>
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	4298      	cmp	r0, r3
 8005c30:	d00f      	beq.n	8005c52 <TIM_Base_SetConfig+0xd2>
 8005c32:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005c36:	4298      	cmp	r0, r3
 8005c38:	d00b      	beq.n	8005c52 <TIM_Base_SetConfig+0xd2>
 8005c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3e:	4298      	cmp	r0, r3
 8005c40:	d007      	beq.n	8005c52 <TIM_Base_SetConfig+0xd2>
 8005c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c46:	4298      	cmp	r0, r3
 8005c48:	d003      	beq.n	8005c52 <TIM_Base_SetConfig+0xd2>
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	4298      	cmp	r0, r3
 8005c50:	d101      	bne.n	8005c56 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005c56:	2301      	movs	r3, #1
 8005c58:	6143      	str	r3, [r0, #20]
}
 8005c5a:	4770      	bx	lr
 8005c5c:	40012c00 	.word	0x40012c00

08005c60 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005c60:	b360      	cbz	r0, 8005cbc <HAL_TIM_Base_Init+0x5c>
{
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c6a:	b313      	cbz	r3, 8005cb2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c72:	4621      	mov	r1, r4
 8005c74:	f851 0b04 	ldr.w	r0, [r1], #4
 8005c78:	f7ff ff82 	bl	8005b80 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005c86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005c92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ca2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005ca6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005caa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005cae:	2000      	movs	r0, #0
}
 8005cb0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005cb6:	f7fc fda1 	bl	80027fc <HAL_TIM_Base_MspInit>
 8005cba:	e7d7      	b.n	8005c6c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005cbc:	2001      	movs	r0, #1
}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005cc0:	b360      	cbz	r0, 8005d1c <HAL_TIM_PWM_Init+0x5c>
{
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cca:	b313      	cbz	r3, 8005d12 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	f851 0b04 	ldr.w	r0, [r1], #4
 8005cd8:	f7ff ff52 	bl	8005b80 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005ce6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d02:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005d06:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d0e:	2000      	movs	r0, #0
}
 8005d10:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005d16:	f7fc fd15 	bl	8002744 <HAL_TIM_PWM_MspInit>
 8005d1a:	e7d7      	b.n	8005ccc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005d1c:	2001      	movs	r0, #1
}
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005d20:	b360      	cbz	r0, 8005d7c <HAL_TIM_IC_Init+0x5c>
{
 8005d22:	b510      	push	{r4, lr}
 8005d24:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d2a:	b313      	cbz	r3, 8005d72 <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d32:	4621      	mov	r1, r4
 8005d34:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d38:	f7ff ff22 	bl	8005b80 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d46:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005d52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d62:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005d66:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d6e:	2000      	movs	r0, #0
}
 8005d70:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8005d76:	f7fc fcfb 	bl	8002770 <HAL_TIM_IC_MspInit>
 8005d7a:	e7d7      	b.n	8005d2c <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8005d7c:	2001      	movs	r0, #1
}
 8005d7e:	4770      	bx	lr

08005d80 <TIM_OC2_SetConfig>:
{
 8005d80:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d82:	6a03      	ldr	r3, [r0, #32]
 8005d84:	f023 0310 	bic.w	r3, r3, #16
 8005d88:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005d8a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005d8c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d8e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d90:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d94:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d98:	680d      	ldr	r5, [r1, #0]
 8005d9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005d9e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da2:	688d      	ldr	r5, [r1, #8]
 8005da4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da8:	4d1b      	ldr	r5, [pc, #108]	; (8005e18 <TIM_OC2_SetConfig+0x98>)
 8005daa:	42a8      	cmp	r0, r5
 8005dac:	d007      	beq.n	8005dbe <TIM_OC2_SetConfig+0x3e>
 8005dae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005db2:	42a8      	cmp	r0, r5
 8005db4:	d003      	beq.n	8005dbe <TIM_OC2_SetConfig+0x3e>
 8005db6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8005dba:	42a8      	cmp	r0, r5
 8005dbc:	d106      	bne.n	8005dcc <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc2:	68cd      	ldr	r5, [r1, #12]
 8005dc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	4d12      	ldr	r5, [pc, #72]	; (8005e18 <TIM_OC2_SetConfig+0x98>)
 8005dce:	42a8      	cmp	r0, r5
 8005dd0:	d013      	beq.n	8005dfa <TIM_OC2_SetConfig+0x7a>
 8005dd2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005dd6:	42a8      	cmp	r0, r5
 8005dd8:	d00f      	beq.n	8005dfa <TIM_OC2_SetConfig+0x7a>
 8005dda:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005dde:	42a8      	cmp	r0, r5
 8005de0:	d00b      	beq.n	8005dfa <TIM_OC2_SetConfig+0x7a>
 8005de2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005de6:	42a8      	cmp	r0, r5
 8005de8:	d007      	beq.n	8005dfa <TIM_OC2_SetConfig+0x7a>
 8005dea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dee:	42a8      	cmp	r0, r5
 8005df0:	d003      	beq.n	8005dfa <TIM_OC2_SetConfig+0x7a>
 8005df2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005df6:	42a8      	cmp	r0, r5
 8005df8:	d107      	bne.n	8005e0a <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dfa:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dfe:	694c      	ldr	r4, [r1, #20]
 8005e00:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e04:	698c      	ldr	r4, [r1, #24]
 8005e06:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005e0a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e0c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e0e:	684a      	ldr	r2, [r1, #4]
 8005e10:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e12:	6203      	str	r3, [r0, #32]
}
 8005e14:	bc30      	pop	{r4, r5}
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00

08005e1c <HAL_TIM_PWM_ConfigChannel>:
{
 8005e1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005e1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	f000 8095 	beq.w	8005f52 <HAL_TIM_PWM_ConfigChannel+0x136>
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005e32:	2a14      	cmp	r2, #20
 8005e34:	f200 8088 	bhi.w	8005f48 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005e38:	e8df f002 	tbb	[pc, r2]
 8005e3c:	8686860b 	.word	0x8686860b
 8005e40:	8686861f 	.word	0x8686861f
 8005e44:	86868634 	.word	0x86868634
 8005e48:	86868648 	.word	0x86868648
 8005e4c:	8686865d 	.word	0x8686865d
 8005e50:	71          	.byte	0x71
 8005e51:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e52:	6800      	ldr	r0, [r0, #0]
 8005e54:	f7ff fc36 	bl	80056c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	6993      	ldr	r3, [r2, #24]
 8005e5c:	f043 0308 	orr.w	r3, r3, #8
 8005e60:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	6993      	ldr	r3, [r2, #24]
 8005e66:	f023 0304 	bic.w	r3, r3, #4
 8005e6a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	6993      	ldr	r3, [r2, #24]
 8005e70:	6929      	ldr	r1, [r5, #16]
 8005e72:	430b      	orrs	r3, r1
 8005e74:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005e76:	2000      	movs	r0, #0
      break;
 8005e78:	e067      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e7a:	6800      	ldr	r0, [r0, #0]
 8005e7c:	f7ff ff80 	bl	8005d80 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	6993      	ldr	r3, [r2, #24]
 8005e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e88:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	6993      	ldr	r3, [r2, #24]
 8005e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e92:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	6993      	ldr	r3, [r2, #24]
 8005e98:	6929      	ldr	r1, [r5, #16]
 8005e9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005e9e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea0:	2000      	movs	r0, #0
      break;
 8005ea2:	e052      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ea4:	6800      	ldr	r0, [r0, #0]
 8005ea6:	f7ff fc65 	bl	8005774 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	69d3      	ldr	r3, [r2, #28]
 8005eae:	f043 0308 	orr.w	r3, r3, #8
 8005eb2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	69d3      	ldr	r3, [r2, #28]
 8005eb8:	f023 0304 	bic.w	r3, r3, #4
 8005ebc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	69d3      	ldr	r3, [r2, #28]
 8005ec2:	6929      	ldr	r1, [r5, #16]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec8:	2000      	movs	r0, #0
      break;
 8005eca:	e03e      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	f7ff fc9f 	bl	8005810 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	69d3      	ldr	r3, [r2, #28]
 8005ed6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005eda:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	69d3      	ldr	r3, [r2, #28]
 8005ee0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ee4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	69d3      	ldr	r3, [r2, #28]
 8005eea:	6929      	ldr	r1, [r5, #16]
 8005eec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ef0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef2:	2000      	movs	r0, #0
      break;
 8005ef4:	e029      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	f7ff fcd8 	bl	80058ac <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f00:	f043 0308 	orr.w	r3, r3, #8
 8005f04:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f0a:	f023 0304 	bic.w	r3, r3, #4
 8005f0e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f14:	6929      	ldr	r1, [r5, #16]
 8005f16:	430b      	orrs	r3, r1
 8005f18:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2000      	movs	r0, #0
      break;
 8005f1c:	e015      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	f7ff fcfc 	bl	800591c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f2c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f36:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f3c:	6929      	ldr	r1, [r5, #16]
 8005f3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f42:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005f44:	2000      	movs	r0, #0
      break;
 8005f46:	e000      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8005f48:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005f52:	2002      	movs	r0, #2
 8005f54:	e7fc      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

08005f58 <TIM_TI1_SetConfig>:
{
 8005f58:	b470      	push	{r4, r5, r6}
 8005f5a:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5c:	6a04      	ldr	r4, [r0, #32]
 8005f5e:	f024 0401 	bic.w	r4, r4, #1
 8005f62:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f64:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005f66:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f68:	4d18      	ldr	r5, [pc, #96]	; (8005fcc <TIM_TI1_SetConfig+0x74>)
 8005f6a:	42a8      	cmp	r0, r5
 8005f6c:	d01c      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
 8005f6e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f72:	d019      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
 8005f74:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <TIM_TI1_SetConfig+0x78>)
 8005f76:	4290      	cmp	r0, r2
 8005f78:	d016      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
 8005f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f7e:	4290      	cmp	r0, r2
 8005f80:	d012      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
 8005f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f86:	4290      	cmp	r0, r2
 8005f88:	d00e      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
 8005f8a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005f8e:	4290      	cmp	r0, r2
 8005f90:	d00a      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
 8005f92:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005f96:	4290      	cmp	r0, r2
 8005f98:	d006      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
 8005f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f9e:	4290      	cmp	r0, r2
 8005fa0:	d002      	beq.n	8005fa8 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fa2:	f044 0201 	orr.w	r2, r4, #1
 8005fa6:	e003      	b.n	8005fb0 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fa8:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8005fac:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fba:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fbe:	f001 010a 	and.w	r1, r1, #10
 8005fc2:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8005fc4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005fc6:	6201      	str	r1, [r0, #32]
}
 8005fc8:	bc70      	pop	{r4, r5, r6}
 8005fca:	4770      	bx	lr
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40000400 	.word	0x40000400

08005fd4 <HAL_TIM_IC_ConfigChannel>:
{
 8005fd4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005fd6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d05a      	beq.n	8006094 <HAL_TIM_IC_ConfigChannel+0xc0>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005fe8:	b152      	cbz	r2, 8006000 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8005fea:	2a04      	cmp	r2, #4
 8005fec:	d01a      	beq.n	8006024 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8005fee:	2a08      	cmp	r2, #8
 8005ff0:	d02b      	beq.n	800604a <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8005ff2:	2a0c      	cmp	r2, #12
 8005ff4:	d03b      	beq.n	800606e <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8005ff6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8006000:	68cb      	ldr	r3, [r1, #12]
 8006002:	684a      	ldr	r2, [r1, #4]
 8006004:	6809      	ldr	r1, [r1, #0]
 8006006:	6800      	ldr	r0, [r0, #0]
 8006008:	f7ff ffa6 	bl	8005f58 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	6993      	ldr	r3, [r2, #24]
 8006010:	f023 030c 	bic.w	r3, r3, #12
 8006014:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	6993      	ldr	r3, [r2, #24]
 800601a:	68a9      	ldr	r1, [r5, #8]
 800601c:	430b      	orrs	r3, r1
 800601e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006020:	2000      	movs	r0, #0
 8006022:	e7e9      	b.n	8005ff8 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8006024:	68cb      	ldr	r3, [r1, #12]
 8006026:	684a      	ldr	r2, [r1, #4]
 8006028:	6809      	ldr	r1, [r1, #0]
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	f7ff fcb0 	bl	8005990 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006030:	6822      	ldr	r2, [r4, #0]
 8006032:	6993      	ldr	r3, [r2, #24]
 8006034:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006038:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	6993      	ldr	r3, [r2, #24]
 800603e:	68a9      	ldr	r1, [r5, #8]
 8006040:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006044:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006046:	2000      	movs	r0, #0
 8006048:	e7d6      	b.n	8005ff8 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800604a:	68cb      	ldr	r3, [r1, #12]
 800604c:	684a      	ldr	r2, [r1, #4]
 800604e:	6809      	ldr	r1, [r1, #0]
 8006050:	6800      	ldr	r0, [r0, #0]
 8006052:	f7ff fcb8 	bl	80059c6 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	69d3      	ldr	r3, [r2, #28]
 800605a:	f023 030c 	bic.w	r3, r3, #12
 800605e:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	69d3      	ldr	r3, [r2, #28]
 8006064:	68a9      	ldr	r1, [r5, #8]
 8006066:	430b      	orrs	r3, r1
 8006068:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2000      	movs	r0, #0
 800606c:	e7c4      	b.n	8005ff8 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 800606e:	68cb      	ldr	r3, [r1, #12]
 8006070:	684a      	ldr	r2, [r1, #4]
 8006072:	6809      	ldr	r1, [r1, #0]
 8006074:	6800      	ldr	r0, [r0, #0]
 8006076:	f7ff fcc1 	bl	80059fc <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	69d3      	ldr	r3, [r2, #28]
 800607e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006082:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	69d3      	ldr	r3, [r2, #28]
 8006088:	68a9      	ldr	r1, [r5, #8]
 800608a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800608e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006090:	2000      	movs	r0, #0
 8006092:	e7b1      	b.n	8005ff8 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8006094:	2002      	movs	r0, #2
 8006096:	e7b2      	b.n	8005ffe <HAL_TIM_IC_ConfigChannel+0x2a>

08006098 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006098:	f001 011f 	and.w	r1, r1, #31
 800609c:	2301      	movs	r3, #1
 800609e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060a2:	6a03      	ldr	r3, [r0, #32]
 80060a4:	ea23 030c 	bic.w	r3, r3, ip
 80060a8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060aa:	6a03      	ldr	r3, [r0, #32]
 80060ac:	fa02 f101 	lsl.w	r1, r2, r1
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6203      	str	r3, [r0, #32]
}
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_TIM_PWM_Start>:
{
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060bc:	4608      	mov	r0, r1
 80060be:	2900      	cmp	r1, #0
 80060c0:	d153      	bne.n	800616a <HAL_TIM_PWM_Start+0xb2>
 80060c2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	bf18      	it	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 80a0 	bne.w	8006214 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d173      	bne.n	80061c0 <HAL_TIM_PWM_Start+0x108>
 80060d8:	2302      	movs	r3, #2
 80060da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060de:	2201      	movs	r2, #1
 80060e0:	4601      	mov	r1, r0
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	f7ff ffd8 	bl	8006098 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	4a4d      	ldr	r2, [pc, #308]	; (8006220 <HAL_TIM_PWM_Start+0x168>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <HAL_TIM_PWM_Start+0x60>
 80060f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00f      	beq.n	8006118 <HAL_TIM_PWM_Start+0x60>
 80060f8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00b      	beq.n	8006118 <HAL_TIM_PWM_Start+0x60>
 8006100:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006104:	4293      	cmp	r3, r2
 8006106:	d007      	beq.n	8006118 <HAL_TIM_PWM_Start+0x60>
 8006108:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <HAL_TIM_PWM_Start+0x60>
 8006110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006114:	4293      	cmp	r3, r2
 8006116:	d103      	bne.n	8006120 <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 8006118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800611e:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	4a3f      	ldr	r2, [pc, #252]	; (8006220 <HAL_TIM_PWM_Start+0x168>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d067      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612c:	d064      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
 800612e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006132:	4293      	cmp	r3, r2
 8006134:	d060      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
 8006136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800613a:	4293      	cmp	r3, r2
 800613c:	d05c      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
 800613e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006142:	4293      	cmp	r3, r2
 8006144:	d058      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
 8006146:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800614a:	4293      	cmp	r3, r2
 800614c:	d054      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
 800614e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006152:	4293      	cmp	r3, r2
 8006154:	d050      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
 8006156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800615a:	4293      	cmp	r3, r2
 800615c:	d04c      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006166:	2000      	movs	r0, #0
 8006168:	e055      	b.n	8006216 <HAL_TIM_PWM_Start+0x15e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800616a:	2904      	cmp	r1, #4
 800616c:	d00c      	beq.n	8006188 <HAL_TIM_PWM_Start+0xd0>
 800616e:	2908      	cmp	r1, #8
 8006170:	d011      	beq.n	8006196 <HAL_TIM_PWM_Start+0xde>
 8006172:	290c      	cmp	r1, #12
 8006174:	d016      	beq.n	80061a4 <HAL_TIM_PWM_Start+0xec>
 8006176:	2910      	cmp	r1, #16
 8006178:	d01b      	beq.n	80061b2 <HAL_TIM_PWM_Start+0xfa>
 800617a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800617e:	b2db      	uxtb	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	bf18      	it	ne
 8006184:	2301      	movne	r3, #1
 8006186:	e7a2      	b.n	80060ce <HAL_TIM_PWM_Start+0x16>
 8006188:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800618c:	b2db      	uxtb	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	bf18      	it	ne
 8006192:	2301      	movne	r3, #1
 8006194:	e79b      	b.n	80060ce <HAL_TIM_PWM_Start+0x16>
 8006196:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800619a:	b2db      	uxtb	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	bf18      	it	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	e794      	b.n	80060ce <HAL_TIM_PWM_Start+0x16>
 80061a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	bf18      	it	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	e78d      	b.n	80060ce <HAL_TIM_PWM_Start+0x16>
 80061b2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	bf18      	it	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	e786      	b.n	80060ce <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c0:	2804      	cmp	r0, #4
 80061c2:	d009      	beq.n	80061d8 <HAL_TIM_PWM_Start+0x120>
 80061c4:	2808      	cmp	r0, #8
 80061c6:	d00b      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x128>
 80061c8:	280c      	cmp	r0, #12
 80061ca:	d00d      	beq.n	80061e8 <HAL_TIM_PWM_Start+0x130>
 80061cc:	2810      	cmp	r0, #16
 80061ce:	d00f      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x138>
 80061d0:	2302      	movs	r3, #2
 80061d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d6:	e782      	b.n	80060de <HAL_TIM_PWM_Start+0x26>
 80061d8:	2302      	movs	r3, #2
 80061da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80061de:	e77e      	b.n	80060de <HAL_TIM_PWM_Start+0x26>
 80061e0:	2302      	movs	r3, #2
 80061e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80061e6:	e77a      	b.n	80060de <HAL_TIM_PWM_Start+0x26>
 80061e8:	2302      	movs	r3, #2
 80061ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80061ee:	e776      	b.n	80060de <HAL_TIM_PWM_Start+0x26>
 80061f0:	2302      	movs	r3, #2
 80061f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061f6:	e772      	b.n	80060de <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f8:	6899      	ldr	r1, [r3, #8]
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <HAL_TIM_PWM_Start+0x16c>)
 80061fc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fe:	2a06      	cmp	r2, #6
 8006200:	d00a      	beq.n	8006218 <HAL_TIM_PWM_Start+0x160>
 8006202:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006206:	d009      	beq.n	800621c <HAL_TIM_PWM_Start+0x164>
      __HAL_TIM_ENABLE(htim);
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006210:	2000      	movs	r0, #0
 8006212:	e000      	b.n	8006216 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 8006214:	2001      	movs	r0, #1
}
 8006216:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8006218:	2000      	movs	r0, #0
 800621a:	e7fc      	b.n	8006216 <HAL_TIM_PWM_Start+0x15e>
 800621c:	2000      	movs	r0, #0
 800621e:	e7fa      	b.n	8006216 <HAL_TIM_PWM_Start+0x15e>
 8006220:	40012c00 	.word	0x40012c00
 8006224:	00010007 	.word	0x00010007

08006228 <HAL_TIM_IC_Start_IT>:
{
 8006228:	b510      	push	{r4, lr}
 800622a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800622c:	460b      	mov	r3, r1
 800622e:	bb19      	cbnz	r1, 8006278 <HAL_TIM_IC_Start_IT+0x50>
 8006230:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8006234:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006236:	2b00      	cmp	r3, #0
 8006238:	d13a      	bne.n	80062b0 <HAL_TIM_IC_Start_IT+0x88>
 800623a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800623e:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006240:	2801      	cmp	r0, #1
 8006242:	f040 80c0 	bne.w	80063c6 <HAL_TIM_IC_Start_IT+0x19e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006246:	2a01      	cmp	r2, #1
 8006248:	f040 80be 	bne.w	80063c8 <HAL_TIM_IC_Start_IT+0x1a0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800624c:	2b00      	cmp	r3, #0
 800624e:	d13f      	bne.n	80062d0 <HAL_TIM_IC_Start_IT+0xa8>
 8006250:	2102      	movs	r1, #2
 8006252:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006256:	2b00      	cmp	r3, #0
 8006258:	d156      	bne.n	8006308 <HAL_TIM_IC_Start_IT+0xe0>
 800625a:	2102      	movs	r1, #2
 800625c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 8006260:	2b0c      	cmp	r3, #12
 8006262:	f200 80b2 	bhi.w	80063ca <HAL_TIM_IC_Start_IT+0x1a2>
 8006266:	e8df f003 	tbb	[pc, r3]
 800626a:	b05f      	.short	0xb05f
 800626c:	b08eb0b0 	.word	0xb08eb0b0
 8006270:	b094b0b0 	.word	0xb094b0b0
 8006274:	b0b0      	.short	0xb0b0
 8006276:	9a          	.byte	0x9a
 8006277:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006278:	2904      	cmp	r1, #4
 800627a:	d009      	beq.n	8006290 <HAL_TIM_IC_Start_IT+0x68>
 800627c:	2908      	cmp	r1, #8
 800627e:	d00b      	beq.n	8006298 <HAL_TIM_IC_Start_IT+0x70>
 8006280:	290c      	cmp	r1, #12
 8006282:	d00d      	beq.n	80062a0 <HAL_TIM_IC_Start_IT+0x78>
 8006284:	2910      	cmp	r1, #16
 8006286:	d00f      	beq.n	80062a8 <HAL_TIM_IC_Start_IT+0x80>
 8006288:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800628c:	b2c0      	uxtb	r0, r0
 800628e:	e7d2      	b.n	8006236 <HAL_TIM_IC_Start_IT+0xe>
 8006290:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8006294:	b2c0      	uxtb	r0, r0
 8006296:	e7ce      	b.n	8006236 <HAL_TIM_IC_Start_IT+0xe>
 8006298:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800629c:	b2c0      	uxtb	r0, r0
 800629e:	e7ca      	b.n	8006236 <HAL_TIM_IC_Start_IT+0xe>
 80062a0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80062a4:	b2c0      	uxtb	r0, r0
 80062a6:	e7c6      	b.n	8006236 <HAL_TIM_IC_Start_IT+0xe>
 80062a8:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 80062ac:	b2c0      	uxtb	r0, r0
 80062ae:	e7c2      	b.n	8006236 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d005      	beq.n	80062c0 <HAL_TIM_IC_Start_IT+0x98>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_IC_Start_IT+0xa0>
 80062b8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	e7bf      	b.n	8006240 <HAL_TIM_IC_Start_IT+0x18>
 80062c0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	e7bb      	b.n	8006240 <HAL_TIM_IC_Start_IT+0x18>
 80062c8:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	e7b7      	b.n	8006240 <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d009      	beq.n	80062e8 <HAL_TIM_IC_Start_IT+0xc0>
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d00b      	beq.n	80062f0 <HAL_TIM_IC_Start_IT+0xc8>
 80062d8:	2b0c      	cmp	r3, #12
 80062da:	d00d      	beq.n	80062f8 <HAL_TIM_IC_Start_IT+0xd0>
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d00f      	beq.n	8006300 <HAL_TIM_IC_Start_IT+0xd8>
 80062e0:	2102      	movs	r1, #2
 80062e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062e6:	e7b6      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x2e>
 80062e8:	2102      	movs	r1, #2
 80062ea:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 80062ee:	e7b2      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x2e>
 80062f0:	2102      	movs	r1, #2
 80062f2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 80062f6:	e7ae      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x2e>
 80062f8:	2102      	movs	r1, #2
 80062fa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 80062fe:	e7aa      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x2e>
 8006300:	2102      	movs	r1, #2
 8006302:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006306:	e7a6      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006308:	2b04      	cmp	r3, #4
 800630a:	d005      	beq.n	8006318 <HAL_TIM_IC_Start_IT+0xf0>
 800630c:	2b08      	cmp	r3, #8
 800630e:	d007      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0xf8>
 8006310:	2102      	movs	r1, #2
 8006312:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 8006316:	e7a3      	b.n	8006260 <HAL_TIM_IC_Start_IT+0x38>
 8006318:	2102      	movs	r1, #2
 800631a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800631e:	e79f      	b.n	8006260 <HAL_TIM_IC_Start_IT+0x38>
 8006320:	2102      	movs	r1, #2
 8006322:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 8006326:	e79b      	b.n	8006260 <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006328:	6821      	ldr	r1, [r4, #0]
 800632a:	68ca      	ldr	r2, [r1, #12]
 800632c:	f042 0202 	orr.w	r2, r2, #2
 8006330:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006332:	2201      	movs	r2, #1
 8006334:	4619      	mov	r1, r3
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	f7ff feae 	bl	8006098 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	4a26      	ldr	r2, [pc, #152]	; (80063d8 <HAL_TIM_IC_Start_IT+0x1b0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d032      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d02f      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
 800634a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800634e:	4293      	cmp	r3, r2
 8006350:	d02b      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
 8006352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006356:	4293      	cmp	r3, r2
 8006358:	d027      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
 800635a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800635e:	4293      	cmp	r3, r2
 8006360:	d023      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
 8006362:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006366:	4293      	cmp	r3, r2
 8006368:	d01f      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
 800636a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800636e:	4293      	cmp	r3, r2
 8006370:	d01b      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
 8006372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006376:	4293      	cmp	r3, r2
 8006378:	d017      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x182>
      __HAL_TIM_ENABLE(htim);
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f042 0201 	orr.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	2000      	movs	r0, #0
 8006384:	e020      	b.n	80063c8 <HAL_TIM_IC_Start_IT+0x1a0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006386:	6821      	ldr	r1, [r4, #0]
 8006388:	68ca      	ldr	r2, [r1, #12]
 800638a:	f042 0204 	orr.w	r2, r2, #4
 800638e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8006390:	e7cf      	b.n	8006332 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006392:	6821      	ldr	r1, [r4, #0]
 8006394:	68ca      	ldr	r2, [r1, #12]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800639c:	e7c9      	b.n	8006332 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	68ca      	ldr	r2, [r1, #12]
 80063a2:	f042 0210 	orr.w	r2, r2, #16
 80063a6:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80063a8:	e7c3      	b.n	8006332 <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063aa:	6899      	ldr	r1, [r3, #8]
 80063ac:	4a0b      	ldr	r2, [pc, #44]	; (80063dc <HAL_TIM_IC_Start_IT+0x1b4>)
 80063ae:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b0:	2a06      	cmp	r2, #6
 80063b2:	d00c      	beq.n	80063ce <HAL_TIM_IC_Start_IT+0x1a6>
 80063b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80063b8:	d00b      	beq.n	80063d2 <HAL_TIM_IC_Start_IT+0x1aa>
        __HAL_TIM_ENABLE(htim);
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	2000      	movs	r0, #0
 80063c4:	e000      	b.n	80063c8 <HAL_TIM_IC_Start_IT+0x1a0>
    return HAL_ERROR;
 80063c6:	2001      	movs	r0, #1
}
 80063c8:	bd10      	pop	{r4, pc}
  switch (Channel)
 80063ca:	4610      	mov	r0, r2
 80063cc:	e7fc      	b.n	80063c8 <HAL_TIM_IC_Start_IT+0x1a0>
 80063ce:	2000      	movs	r0, #0
 80063d0:	e7fa      	b.n	80063c8 <HAL_TIM_IC_Start_IT+0x1a0>
 80063d2:	2000      	movs	r0, #0
 80063d4:	e7f8      	b.n	80063c8 <HAL_TIM_IC_Start_IT+0x1a0>
 80063d6:	bf00      	nop
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	00010007 	.word	0x00010007

080063e0 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e0:	f001 011f 	and.w	r1, r1, #31
 80063e4:	2304      	movs	r3, #4
 80063e6:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80063ea:	6a03      	ldr	r3, [r0, #32]
 80063ec:	ea23 030c 	bic.w	r3, r3, ip
 80063f0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f2:	6a03      	ldr	r3, [r0, #32]
 80063f4:	fa02 f101 	lsl.w	r1, r2, r1
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6203      	str	r3, [r0, #32]
}
 80063fc:	4770      	bx	lr
	...

08006400 <HAL_TIMEx_PWMN_Start>:
{
 8006400:	b510      	push	{r4, lr}
 8006402:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006404:	4608      	mov	r0, r1
 8006406:	2900      	cmp	r1, #0
 8006408:	d13b      	bne.n	8006482 <HAL_TIMEx_PWMN_Start+0x82>
 800640a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800640e:	b2db      	uxtb	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	bf18      	it	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d16a      	bne.n	80064f0 <HAL_TIMEx_PWMN_Start+0xf0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641a:	2800      	cmp	r0, #0
 800641c:	d14a      	bne.n	80064b4 <HAL_TIMEx_PWMN_Start+0xb4>
 800641e:	2302      	movs	r3, #2
 8006420:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006424:	2204      	movs	r2, #4
 8006426:	4601      	mov	r1, r0
 8006428:	6820      	ldr	r0, [r4, #0]
 800642a:	f7ff ffd9 	bl	80063e0 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006436:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	4a30      	ldr	r2, [pc, #192]	; (80064fc <HAL_TIMEx_PWMN_Start+0xfc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d049      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006444:	d046      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
 8006446:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800644a:	4293      	cmp	r3, r2
 800644c:	d042      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
 800644e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006452:	4293      	cmp	r3, r2
 8006454:	d03e      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
 8006456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800645a:	4293      	cmp	r3, r2
 800645c:	d03a      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
 800645e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006462:	4293      	cmp	r3, r2
 8006464:	d036      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
 8006466:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800646a:	4293      	cmp	r3, r2
 800646c:	d032      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
 800646e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006472:	4293      	cmp	r3, r2
 8006474:	d02e      	beq.n	80064d4 <HAL_TIMEx_PWMN_Start+0xd4>
    __HAL_TIM_ENABLE(htim);
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800647e:	2000      	movs	r0, #0
 8006480:	e037      	b.n	80064f2 <HAL_TIMEx_PWMN_Start+0xf2>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006482:	2904      	cmp	r1, #4
 8006484:	d008      	beq.n	8006498 <HAL_TIMEx_PWMN_Start+0x98>
 8006486:	2908      	cmp	r1, #8
 8006488:	d00d      	beq.n	80064a6 <HAL_TIMEx_PWMN_Start+0xa6>
 800648a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800648e:	b2db      	uxtb	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	bf18      	it	ne
 8006494:	2301      	movne	r3, #1
 8006496:	e7be      	b.n	8006416 <HAL_TIMEx_PWMN_Start+0x16>
 8006498:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800649c:	b2db      	uxtb	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	bf18      	it	ne
 80064a2:	2301      	movne	r3, #1
 80064a4:	e7b7      	b.n	8006416 <HAL_TIMEx_PWMN_Start+0x16>
 80064a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	bf18      	it	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	e7b0      	b.n	8006416 <HAL_TIMEx_PWMN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b4:	2804      	cmp	r0, #4
 80064b6:	d005      	beq.n	80064c4 <HAL_TIMEx_PWMN_Start+0xc4>
 80064b8:	2808      	cmp	r0, #8
 80064ba:	d007      	beq.n	80064cc <HAL_TIMEx_PWMN_Start+0xcc>
 80064bc:	2302      	movs	r3, #2
 80064be:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80064c2:	e7af      	b.n	8006424 <HAL_TIMEx_PWMN_Start+0x24>
 80064c4:	2302      	movs	r3, #2
 80064c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064ca:	e7ab      	b.n	8006424 <HAL_TIMEx_PWMN_Start+0x24>
 80064cc:	2302      	movs	r3, #2
 80064ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80064d2:	e7a7      	b.n	8006424 <HAL_TIMEx_PWMN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <HAL_TIMEx_PWMN_Start+0x100>)
 80064d8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064da:	2a06      	cmp	r2, #6
 80064dc:	d00a      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0xf4>
 80064de:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80064e2:	d009      	beq.n	80064f8 <HAL_TIMEx_PWMN_Start+0xf8>
      __HAL_TIM_ENABLE(htim);
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80064ec:	2000      	movs	r0, #0
 80064ee:	e000      	b.n	80064f2 <HAL_TIMEx_PWMN_Start+0xf2>
    return HAL_ERROR;
 80064f0:	2001      	movs	r0, #1
}
 80064f2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80064f4:	2000      	movs	r0, #0
 80064f6:	e7fc      	b.n	80064f2 <HAL_TIMEx_PWMN_Start+0xf2>
 80064f8:	2000      	movs	r0, #0
 80064fa:	e7fa      	b.n	80064f2 <HAL_TIMEx_PWMN_Start+0xf2>
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	00010007 	.word	0x00010007

08006504 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8006504:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d04c      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 800650c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800650e:	2301      	movs	r3, #1
 8006510:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	2302      	movs	r3, #2
 8006516:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800651a:	6802      	ldr	r2, [r0, #0]
 800651c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800651e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006520:	4d22      	ldr	r5, [pc, #136]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006522:	42aa      	cmp	r2, r5
 8006524:	d007      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8006526:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800652a:	42aa      	cmp	r2, r5
 800652c:	d003      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800652e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8006532:	42aa      	cmp	r2, r5
 8006534:	d103      	bne.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006536:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800653a:	684d      	ldr	r5, [r1, #4]
 800653c:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800653e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006546:	680d      	ldr	r5, [r1, #0]
 8006548:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800654a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654c:	6803      	ldr	r3, [r0, #0]
 800654e:	4a17      	ldr	r2, [pc, #92]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01a      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d017      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800655a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006566:	4293      	cmp	r3, r2
 8006568:	d00f      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800656a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006572:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800657a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006586:	4293      	cmp	r3, r2
 8006588:	d104      	bne.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
    tmpsmcr &= ~TIM_SMCR_MSM;
 800658a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800658e:	688a      	ldr	r2, [r1, #8]
 8006590:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8006592:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006594:	2301      	movs	r3, #1
 8006596:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800659a:	2300      	movs	r3, #0
 800659c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80065a0:	4618      	mov	r0, r3
}
 80065a2:	bc30      	pop	{r4, r5}
 80065a4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80065a6:	2002      	movs	r0, #2
}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00

080065b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80065b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d060      	beq.n	800667a <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 80065b8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80065ba:	2301      	movs	r3, #1
 80065bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c6:	688a      	ldr	r2, [r1, #8]
 80065c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ce:	684a      	ldr	r2, [r1, #4]
 80065d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065d6:	680a      	ldr	r2, [r1, #0]
 80065d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065de:	690a      	ldr	r2, [r1, #16]
 80065e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065e6:	694a      	ldr	r2, [r1, #20]
 80065e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ee:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80065f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80065f6:	698a      	ldr	r2, [r1, #24]
 80065f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065fc:	6802      	ldr	r2, [r0, #0]
 80065fe:	4c20      	ldr	r4, [pc, #128]	; (8006680 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8006600:	42a2      	cmp	r2, r4
 8006602:	d007      	beq.n	8006614 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006604:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006608:	42a2      	cmp	r2, r4
 800660a:	d003      	beq.n	8006614 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800660c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8006610:	42a2      	cmp	r2, r4
 8006612:	d103      	bne.n	800661c <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006618:	69cc      	ldr	r4, [r1, #28]
 800661a:	4323      	orrs	r3, r4
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800661c:	4c18      	ldr	r4, [pc, #96]	; (8006680 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800661e:	42a2      	cmp	r2, r4
 8006620:	d007      	beq.n	8006632 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8006622:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006626:	42a2      	cmp	r2, r4
 8006628:	d003      	beq.n	8006632 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800662a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800662e:	42a2      	cmp	r2, r4
 8006630:	d11b      	bne.n	800666a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006632:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006636:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006638:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800663c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006640:	6a0c      	ldr	r4, [r1, #32]
 8006642:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006644:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006648:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800664a:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800664c:	4c0c      	ldr	r4, [pc, #48]	; (8006680 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800664e:	42a2      	cmp	r2, r4
 8006650:	d007      	beq.n	8006662 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006652:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006656:	42a2      	cmp	r2, r4
 8006658:	d003      	beq.n	8006662 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800665a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800665e:	42a2      	cmp	r2, r4
 8006660:	d103      	bne.n	800666a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006662:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006666:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006668:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800666a:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800666c:	2300      	movs	r3, #0
 800666e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006672:	4618      	mov	r0, r3
}
 8006674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006678:	4770      	bx	lr
  __HAL_LOCK(htim);
 800667a:	2002      	movs	r0, #2
}
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40012c00 	.word	0x40012c00

08006684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006688:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800668a:	6883      	ldr	r3, [r0, #8]
 800668c:	6902      	ldr	r2, [r0, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	6942      	ldr	r2, [r0, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	69c2      	ldr	r2, [r0, #28]
 8006696:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006698:	6808      	ldr	r0, [r1, #0]
 800669a:	4a96      	ldr	r2, [pc, #600]	; (80068f4 <UART_SetConfig+0x270>)
 800669c:	4002      	ands	r2, r0
 800669e:	4313      	orrs	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	6853      	ldr	r3, [r2, #4]
 80066a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066aa:	68e1      	ldr	r1, [r4, #12]
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066b0:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	4b90      	ldr	r3, [pc, #576]	; (80068f8 <UART_SetConfig+0x274>)
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d001      	beq.n	80066be <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066ba:	6a23      	ldr	r3, [r4, #32]
 80066bc:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066be:	6893      	ldr	r3, [r2, #8]
 80066c0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80066c4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80066d0:	f023 030f 	bic.w	r3, r3, #15
 80066d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80066d6:	430b      	orrs	r3, r1
 80066d8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	4a87      	ldr	r2, [pc, #540]	; (80068fc <UART_SetConfig+0x278>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d010      	beq.n	8006704 <UART_SetConfig+0x80>
 80066e2:	4a87      	ldr	r2, [pc, #540]	; (8006900 <UART_SetConfig+0x27c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d021      	beq.n	800672c <UART_SetConfig+0xa8>
 80066e8:	4a86      	ldr	r2, [pc, #536]	; (8006904 <UART_SetConfig+0x280>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d037      	beq.n	800675e <UART_SetConfig+0xda>
 80066ee:	4a86      	ldr	r2, [pc, #536]	; (8006908 <UART_SetConfig+0x284>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d05c      	beq.n	80067ae <UART_SetConfig+0x12a>
 80066f4:	4a85      	ldr	r2, [pc, #532]	; (800690c <UART_SetConfig+0x288>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d06b      	beq.n	80067d2 <UART_SetConfig+0x14e>
 80066fa:	4a7f      	ldr	r2, [pc, #508]	; (80068f8 <UART_SetConfig+0x274>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d07d      	beq.n	80067fc <UART_SetConfig+0x178>
 8006700:	2210      	movs	r2, #16
 8006702:	e03a      	b.n	800677a <UART_SetConfig+0xf6>
 8006704:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8006708:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800670c:	f002 0203 	and.w	r2, r2, #3
 8006710:	2a03      	cmp	r2, #3
 8006712:	d809      	bhi.n	8006728 <UART_SetConfig+0xa4>
 8006714:	e8df f002 	tbb	[pc, r2]
 8006718:	06870402 	.word	0x06870402
 800671c:	2201      	movs	r2, #1
 800671e:	e02c      	b.n	800677a <UART_SetConfig+0xf6>
 8006720:	2204      	movs	r2, #4
 8006722:	e02a      	b.n	800677a <UART_SetConfig+0xf6>
 8006724:	2208      	movs	r2, #8
 8006726:	e028      	b.n	800677a <UART_SetConfig+0xf6>
 8006728:	2210      	movs	r2, #16
 800672a:	e026      	b.n	800677a <UART_SetConfig+0xf6>
 800672c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8006730:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006734:	f002 020c 	and.w	r2, r2, #12
 8006738:	2a0c      	cmp	r2, #12
 800673a:	d80e      	bhi.n	800675a <UART_SetConfig+0xd6>
 800673c:	e8df f002 	tbb	[pc, r2]
 8006740:	0d0d0d07 	.word	0x0d0d0d07
 8006744:	0d0d0d09 	.word	0x0d0d0d09
 8006748:	0d0d0d75 	.word	0x0d0d0d75
 800674c:	0b          	.byte	0x0b
 800674d:	00          	.byte	0x00
 800674e:	2200      	movs	r2, #0
 8006750:	e013      	b.n	800677a <UART_SetConfig+0xf6>
 8006752:	2204      	movs	r2, #4
 8006754:	e011      	b.n	800677a <UART_SetConfig+0xf6>
 8006756:	2208      	movs	r2, #8
 8006758:	e00f      	b.n	800677a <UART_SetConfig+0xf6>
 800675a:	2210      	movs	r2, #16
 800675c:	e00d      	b.n	800677a <UART_SetConfig+0xf6>
 800675e:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8006762:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006766:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800676a:	2a20      	cmp	r2, #32
 800676c:	d05f      	beq.n	800682e <UART_SetConfig+0x1aa>
 800676e:	d81a      	bhi.n	80067a6 <UART_SetConfig+0x122>
 8006770:	2a00      	cmp	r2, #0
 8006772:	d05e      	beq.n	8006832 <UART_SetConfig+0x1ae>
 8006774:	2a10      	cmp	r2, #16
 8006776:	d15e      	bne.n	8006836 <UART_SetConfig+0x1b2>
 8006778:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800677a:	495f      	ldr	r1, [pc, #380]	; (80068f8 <UART_SetConfig+0x274>)
 800677c:	428b      	cmp	r3, r1
 800677e:	d076      	beq.n	800686e <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006780:	69e0      	ldr	r0, [r4, #28]
 8006782:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006786:	f000 80c9 	beq.w	800691c <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 800678a:	2a08      	cmp	r2, #8
 800678c:	f200 8134 	bhi.w	80069f8 <UART_SetConfig+0x374>
 8006790:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006794:	011900f7 	.word	0x011900f7
 8006798:	013200f5 	.word	0x013200f5
 800679c:	0132011c 	.word	0x0132011c
 80067a0:	01320132 	.word	0x01320132
 80067a4:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067a6:	2a30      	cmp	r2, #48	; 0x30
 80067a8:	d147      	bne.n	800683a <UART_SetConfig+0x1b6>
 80067aa:	2208      	movs	r2, #8
 80067ac:	e7e5      	b.n	800677a <UART_SetConfig+0xf6>
 80067ae:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80067b2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80067b6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80067ba:	2a80      	cmp	r2, #128	; 0x80
 80067bc:	d03f      	beq.n	800683e <UART_SetConfig+0x1ba>
 80067be:	d804      	bhi.n	80067ca <UART_SetConfig+0x146>
 80067c0:	b3fa      	cbz	r2, 8006842 <UART_SetConfig+0x1be>
 80067c2:	2a40      	cmp	r2, #64	; 0x40
 80067c4:	d13f      	bne.n	8006846 <UART_SetConfig+0x1c2>
 80067c6:	2204      	movs	r2, #4
 80067c8:	e7d7      	b.n	800677a <UART_SetConfig+0xf6>
 80067ca:	2ac0      	cmp	r2, #192	; 0xc0
 80067cc:	d13d      	bne.n	800684a <UART_SetConfig+0x1c6>
 80067ce:	2208      	movs	r2, #8
 80067d0:	e7d3      	b.n	800677a <UART_SetConfig+0xf6>
 80067d2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80067d6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80067da:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80067de:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80067e2:	d034      	beq.n	800684e <UART_SetConfig+0x1ca>
 80067e4:	d805      	bhi.n	80067f2 <UART_SetConfig+0x16e>
 80067e6:	b3a2      	cbz	r2, 8006852 <UART_SetConfig+0x1ce>
 80067e8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80067ec:	d133      	bne.n	8006856 <UART_SetConfig+0x1d2>
 80067ee:	2204      	movs	r2, #4
 80067f0:	e7c3      	b.n	800677a <UART_SetConfig+0xf6>
 80067f2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80067f6:	d130      	bne.n	800685a <UART_SetConfig+0x1d6>
 80067f8:	2208      	movs	r2, #8
 80067fa:	e7be      	b.n	800677a <UART_SetConfig+0xf6>
 80067fc:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8006800:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006804:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006808:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800680c:	d027      	beq.n	800685e <UART_SetConfig+0x1da>
 800680e:	d805      	bhi.n	800681c <UART_SetConfig+0x198>
 8006810:	b33a      	cbz	r2, 8006862 <UART_SetConfig+0x1de>
 8006812:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006816:	d126      	bne.n	8006866 <UART_SetConfig+0x1e2>
 8006818:	2204      	movs	r2, #4
 800681a:	e7ae      	b.n	800677a <UART_SetConfig+0xf6>
 800681c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8006820:	d123      	bne.n	800686a <UART_SetConfig+0x1e6>
 8006822:	2208      	movs	r2, #8
 8006824:	e7a9      	b.n	800677a <UART_SetConfig+0xf6>
 8006826:	2202      	movs	r2, #2
 8006828:	e7a7      	b.n	800677a <UART_SetConfig+0xf6>
 800682a:	2202      	movs	r2, #2
 800682c:	e7a5      	b.n	800677a <UART_SetConfig+0xf6>
 800682e:	2202      	movs	r2, #2
 8006830:	e7a3      	b.n	800677a <UART_SetConfig+0xf6>
 8006832:	2200      	movs	r2, #0
 8006834:	e7a1      	b.n	800677a <UART_SetConfig+0xf6>
 8006836:	2210      	movs	r2, #16
 8006838:	e79f      	b.n	800677a <UART_SetConfig+0xf6>
 800683a:	2210      	movs	r2, #16
 800683c:	e79d      	b.n	800677a <UART_SetConfig+0xf6>
 800683e:	2202      	movs	r2, #2
 8006840:	e79b      	b.n	800677a <UART_SetConfig+0xf6>
 8006842:	2200      	movs	r2, #0
 8006844:	e799      	b.n	800677a <UART_SetConfig+0xf6>
 8006846:	2210      	movs	r2, #16
 8006848:	e797      	b.n	800677a <UART_SetConfig+0xf6>
 800684a:	2210      	movs	r2, #16
 800684c:	e795      	b.n	800677a <UART_SetConfig+0xf6>
 800684e:	2202      	movs	r2, #2
 8006850:	e793      	b.n	800677a <UART_SetConfig+0xf6>
 8006852:	2200      	movs	r2, #0
 8006854:	e791      	b.n	800677a <UART_SetConfig+0xf6>
 8006856:	2210      	movs	r2, #16
 8006858:	e78f      	b.n	800677a <UART_SetConfig+0xf6>
 800685a:	2210      	movs	r2, #16
 800685c:	e78d      	b.n	800677a <UART_SetConfig+0xf6>
 800685e:	2202      	movs	r2, #2
 8006860:	e78b      	b.n	800677a <UART_SetConfig+0xf6>
 8006862:	2200      	movs	r2, #0
 8006864:	e789      	b.n	800677a <UART_SetConfig+0xf6>
 8006866:	2210      	movs	r2, #16
 8006868:	e787      	b.n	800677a <UART_SetConfig+0xf6>
 800686a:	2210      	movs	r2, #16
 800686c:	e785      	b.n	800677a <UART_SetConfig+0xf6>
    switch (clocksource)
 800686e:	2a08      	cmp	r2, #8
 8006870:	f200 80b2 	bhi.w	80069d8 <UART_SetConfig+0x354>
 8006874:	e8df f002 	tbb	[pc, r2]
 8006878:	b03bb008 	.word	0xb03bb008
 800687c:	b0b0b038 	.word	0xb0b0b038
 8006880:	05          	.byte	0x05
 8006881:	00          	.byte	0x00
 8006882:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006886:	e004      	b.n	8006892 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006888:	f7fe fd3c 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800688c:	2800      	cmp	r0, #0
 800688e:	f000 80a5 	beq.w	80069dc <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006892:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006894:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <UART_SetConfig+0x28c>)
 8006896:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800689a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800689e:	6865      	ldr	r5, [r4, #4]
 80068a0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80068a4:	4299      	cmp	r1, r3
 80068a6:	f200 809b 	bhi.w	80069e0 <UART_SetConfig+0x35c>
 80068aa:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80068ae:	f200 8099 	bhi.w	80069e4 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b2:	2600      	movs	r6, #0
 80068b4:	4633      	mov	r3, r6
 80068b6:	4631      	mov	r1, r6
 80068b8:	f7f9 ffe4 	bl	8000884 <__aeabi_uldivmod>
 80068bc:	0209      	lsls	r1, r1, #8
 80068be:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80068c2:	0200      	lsls	r0, r0, #8
 80068c4:	086b      	lsrs	r3, r5, #1
 80068c6:	18c0      	adds	r0, r0, r3
 80068c8:	462a      	mov	r2, r5
 80068ca:	4633      	mov	r3, r6
 80068cc:	f141 0100 	adc.w	r1, r1, #0
 80068d0:	f7f9 ffd8 	bl	8000884 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80068d8:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <UART_SetConfig+0x290>)
 80068da:	429a      	cmp	r2, r3
 80068dc:	f200 8084 	bhi.w	80069e8 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	60d8      	str	r0, [r3, #12]
 80068e4:	4630      	mov	r0, r6
 80068e6:	e065      	b.n	80069b4 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 80068e8:	f7fe fbc6 	bl	8005078 <HAL_RCC_GetSysClockFreq>
        break;
 80068ec:	e7ce      	b.n	800688c <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 80068ee:	480a      	ldr	r0, [pc, #40]	; (8006918 <UART_SetConfig+0x294>)
 80068f0:	e7cf      	b.n	8006892 <UART_SetConfig+0x20e>
 80068f2:	bf00      	nop
 80068f4:	cfff69f3 	.word	0xcfff69f3
 80068f8:	40008000 	.word	0x40008000
 80068fc:	40013800 	.word	0x40013800
 8006900:	40004400 	.word	0x40004400
 8006904:	40004800 	.word	0x40004800
 8006908:	40004c00 	.word	0x40004c00
 800690c:	40005000 	.word	0x40005000
 8006910:	08007df4 	.word	0x08007df4
 8006914:	000ffcff 	.word	0x000ffcff
 8006918:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800691c:	2a08      	cmp	r2, #8
 800691e:	d865      	bhi.n	80069ec <UART_SetConfig+0x368>
 8006920:	e8df f002 	tbb	[pc, r2]
 8006924:	64052707 	.word	0x64052707
 8006928:	6464642a 	.word	0x6464642a
 800692c:	0b          	.byte	0x0b
 800692d:	00          	.byte	0x00
 800692e:	4835      	ldr	r0, [pc, #212]	; (8006a04 <UART_SetConfig+0x380>)
 8006930:	e003      	b.n	800693a <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006932:	f7fe fce7 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006936:	2800      	cmp	r0, #0
 8006938:	d05a      	beq.n	80069f0 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800693a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800693c:	4b32      	ldr	r3, [pc, #200]	; (8006a08 <UART_SetConfig+0x384>)
 800693e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006942:	fbb0 f0f3 	udiv	r0, r0, r3
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	0853      	lsrs	r3, r2, #1
 800694a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800694e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006952:	f1a0 0210 	sub.w	r2, r0, #16
 8006956:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800695a:	429a      	cmp	r2, r3
 800695c:	d84a      	bhi.n	80069f4 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800695e:	b283      	uxth	r3, r0
 8006960:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006964:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006968:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	60d8      	str	r0, [r3, #12]
 800696e:	2000      	movs	r0, #0
 8006970:	e020      	b.n	80069b4 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006972:	f7fe fcd9 	bl	8005328 <HAL_RCC_GetPCLK2Freq>
        break;
 8006976:	e7de      	b.n	8006936 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8006978:	f7fe fb7e 	bl	8005078 <HAL_RCC_GetSysClockFreq>
        break;
 800697c:	e7db      	b.n	8006936 <UART_SetConfig+0x2b2>
    switch (clocksource)
 800697e:	4821      	ldr	r0, [pc, #132]	; (8006a04 <UART_SetConfig+0x380>)
 8006980:	e003      	b.n	800698a <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006982:	f7fe fcbf 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8006986:	2800      	cmp	r0, #0
 8006988:	d038      	beq.n	80069fc <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800698c:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <UART_SetConfig+0x384>)
 800698e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006992:	fbb0 f0f3 	udiv	r0, r0, r3
 8006996:	6863      	ldr	r3, [r4, #4]
 8006998:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800699c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a0:	f1a0 0210 	sub.w	r2, r0, #16
 80069a4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d829      	bhi.n	8006a00 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	b280      	uxth	r0, r0
 80069b0:	60d8      	str	r0, [r3, #12]
 80069b2:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069ba:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80069c2:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c6:	f7fe fcaf 	bl	8005328 <HAL_RCC_GetPCLK2Freq>
        break;
 80069ca:	e7dc      	b.n	8006986 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 80069cc:	f7fe fb54 	bl	8005078 <HAL_RCC_GetSysClockFreq>
        break;
 80069d0:	e7d9      	b.n	8006986 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 80069d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80069d6:	e7d8      	b.n	800698a <UART_SetConfig+0x306>
    switch (clocksource)
 80069d8:	2001      	movs	r0, #1
 80069da:	e7eb      	b.n	80069b4 <UART_SetConfig+0x330>
 80069dc:	2000      	movs	r0, #0
 80069de:	e7e9      	b.n	80069b4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80069e0:	2001      	movs	r0, #1
 80069e2:	e7e7      	b.n	80069b4 <UART_SetConfig+0x330>
 80069e4:	2001      	movs	r0, #1
 80069e6:	e7e5      	b.n	80069b4 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 80069e8:	2001      	movs	r0, #1
 80069ea:	e7e3      	b.n	80069b4 <UART_SetConfig+0x330>
    switch (clocksource)
 80069ec:	2001      	movs	r0, #1
 80069ee:	e7e1      	b.n	80069b4 <UART_SetConfig+0x330>
 80069f0:	2000      	movs	r0, #0
 80069f2:	e7df      	b.n	80069b4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80069f4:	2001      	movs	r0, #1
 80069f6:	e7dd      	b.n	80069b4 <UART_SetConfig+0x330>
    switch (clocksource)
 80069f8:	2001      	movs	r0, #1
 80069fa:	e7db      	b.n	80069b4 <UART_SetConfig+0x330>
 80069fc:	2000      	movs	r0, #0
 80069fe:	e7d9      	b.n	80069b4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7d7      	b.n	80069b4 <UART_SetConfig+0x330>
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	08007df4 	.word	0x08007df4

08006a0c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a0e:	f013 0f01 	tst.w	r3, #1
 8006a12:	d006      	beq.n	8006a22 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a14:	6802      	ldr	r2, [r0, #0]
 8006a16:	6853      	ldr	r3, [r2, #4]
 8006a18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a1c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a24:	f013 0f02 	tst.w	r3, #2
 8006a28:	d006      	beq.n	8006a38 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a2a:	6802      	ldr	r2, [r0, #0]
 8006a2c:	6853      	ldr	r3, [r2, #4]
 8006a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a32:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a3a:	f013 0f04 	tst.w	r3, #4
 8006a3e:	d006      	beq.n	8006a4e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a40:	6802      	ldr	r2, [r0, #0]
 8006a42:	6853      	ldr	r3, [r2, #4]
 8006a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a48:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a50:	f013 0f08 	tst.w	r3, #8
 8006a54:	d006      	beq.n	8006a64 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a56:	6802      	ldr	r2, [r0, #0]
 8006a58:	6853      	ldr	r3, [r2, #4]
 8006a5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a5e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a66:	f013 0f10 	tst.w	r3, #16
 8006a6a:	d006      	beq.n	8006a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a6c:	6802      	ldr	r2, [r0, #0]
 8006a6e:	6893      	ldr	r3, [r2, #8]
 8006a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a74:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006a76:	430b      	orrs	r3, r1
 8006a78:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a7c:	f013 0f20 	tst.w	r3, #32
 8006a80:	d006      	beq.n	8006a90 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a82:	6802      	ldr	r2, [r0, #0]
 8006a84:	6893      	ldr	r3, [r2, #8]
 8006a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a8a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a96:	d00a      	beq.n	8006aae <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a98:	6802      	ldr	r2, [r0, #0]
 8006a9a:	6853      	ldr	r3, [r2, #4]
 8006a9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006aa0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aac:	d00b      	beq.n	8006ac6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ab4:	d006      	beq.n	8006ac4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab6:	6802      	ldr	r2, [r0, #0]
 8006ab8:	6853      	ldr	r3, [r2, #4]
 8006aba:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006abe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6053      	str	r3, [r2, #4]
  }
}
 8006ac4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac6:	6802      	ldr	r2, [r0, #0]
 8006ac8:	6853      	ldr	r3, [r2, #4]
 8006aca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006ace:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	6053      	str	r3, [r2, #4]
 8006ad4:	e7eb      	b.n	8006aae <UART_AdvFeatureConfig+0xa2>

08006ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ad6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ada:	4605      	mov	r5, r0
 8006adc:	460f      	mov	r7, r1
 8006ade:	4616      	mov	r6, r2
 8006ae0:	4699      	mov	r9, r3
 8006ae2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae6:	682c      	ldr	r4, [r5, #0]
 8006ae8:	69e4      	ldr	r4, [r4, #28]
 8006aea:	ea37 0304 	bics.w	r3, r7, r4
 8006aee:	bf0c      	ite	eq
 8006af0:	f04f 0c01 	moveq.w	ip, #1
 8006af4:	f04f 0c00 	movne.w	ip, #0
 8006af8:	45b4      	cmp	ip, r6
 8006afa:	d157      	bne.n	8006bac <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006b00:	d0f1      	beq.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b02:	f7fb ffa1 	bl	8002a48 <HAL_GetTick>
 8006b06:	eba0 0009 	sub.w	r0, r0, r9
 8006b0a:	4540      	cmp	r0, r8
 8006b0c:	d82f      	bhi.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x98>
 8006b0e:	f1b8 0f00 	cmp.w	r8, #0
 8006b12:	d02c      	beq.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	f012 0f04 	tst.w	r2, #4
 8006b1c:	d0e3      	beq.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006b24:	d0df      	beq.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b2c:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	e852 3f00 	ldrex	r3, [r2]
 8006b32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	e842 3100 	strex	r1, r3, [r2]
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d1f6      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	f102 0308 	add.w	r3, r2, #8
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	3208      	adds	r2, #8
 8006b4e:	e842 3100 	strex	r1, r3, [r2]
 8006b52:	2900      	cmp	r1, #0
 8006b54:	d1f3      	bne.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8006b56:	2320      	movs	r3, #32
 8006b58:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b60:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b64:	2300      	movs	r3, #0
 8006b66:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b6a:	2003      	movs	r0, #3
 8006b6c:	e01f      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b6e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	e852 3f00 	ldrex	r3, [r2]
 8006b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	e842 3100 	strex	r1, r3, [r2]
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	d1f6      	bne.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b80:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	f102 0308 	add.w	r3, r2, #8
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	3208      	adds	r2, #8
 8006b90:	e842 3100 	strex	r1, r3, [r2]
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d1f3      	bne.n	8006b80 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006b98:	2320      	movs	r3, #32
 8006b9a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006ba8:	2003      	movs	r0, #3
 8006baa:	e000      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8006bac:	2000      	movs	r0, #0
}
 8006bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006bb2 <UART_CheckIdleState>:
{
 8006bb2:	b530      	push	{r4, r5, lr}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006bbe:	f7fb ff43 	bl	8002a48 <HAL_GetTick>
 8006bc2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	f012 0f08 	tst.w	r2, #8
 8006bcc:	d10f      	bne.n	8006bee <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f013 0f04 	tst.w	r3, #4
 8006bd6:	d118      	bne.n	8006c0a <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	2320      	movs	r3, #32
 8006bda:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bde:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	2000      	movs	r0, #0
 8006be4:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006be6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006bea:	b003      	add	sp, #12
 8006bec:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7ff ff6a 	bl	8006ad6 <UART_WaitOnFlagUntilTimeout>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d0e3      	beq.n	8006bce <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006c06:	2003      	movs	r0, #3
 8006c08:	e7ef      	b.n	8006bea <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	462b      	mov	r3, r5
 8006c12:	2200      	movs	r2, #0
 8006c14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f7ff ff5c 	bl	8006ad6 <UART_WaitOnFlagUntilTimeout>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d0da      	beq.n	8006bd8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006c22:	2003      	movs	r0, #3
 8006c24:	e7e1      	b.n	8006bea <UART_CheckIdleState+0x38>

08006c26 <HAL_UART_Init>:
  if (huart == NULL)
 8006c26:	b378      	cbz	r0, 8006c88 <HAL_UART_Init+0x62>
{
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006c2c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006c30:	b30b      	cbz	r3, 8006c76 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006c32:	2324      	movs	r3, #36	; 0x24
 8006c34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006c38:	6822      	ldr	r2, [r4, #0]
 8006c3a:	6813      	ldr	r3, [r2, #0]
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff fd1e 	bl	8006684 <UART_SetConfig>
 8006c48:	2801      	cmp	r0, #1
 8006c4a:	d013      	beq.n	8006c74 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c4e:	b9bb      	cbnz	r3, 8006c80 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c50:	6822      	ldr	r2, [r4, #0]
 8006c52:	6853      	ldr	r3, [r2, #4]
 8006c54:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006c58:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	6893      	ldr	r3, [r2, #8]
 8006c5e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006c62:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	6813      	ldr	r3, [r2, #0]
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f7ff ff9f 	bl	8006bb2 <UART_CheckIdleState>
}
 8006c74:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c76:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006c7a:	f7fb fd21 	bl	80026c0 <HAL_UART_MspInit>
 8006c7e:	e7d8      	b.n	8006c32 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff fec3 	bl	8006a0c <UART_AdvFeatureConfig>
 8006c86:	e7e3      	b.n	8006c50 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006c88:	2001      	movs	r0, #1
}
 8006c8a:	4770      	bx	lr

08006c8c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c8c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006c8e:	b92b      	cbnz	r3, 8006c9c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c96:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006c9a:	4770      	bx	lr
{
 8006c9c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c9e:	6803      	ldr	r3, [r0, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ca6:	6899      	ldr	r1, [r3, #8]
 8006ca8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006caa:	4d09      	ldr	r5, [pc, #36]	; (8006cd0 <UARTEx_SetNbDataToProcess+0x44>)
 8006cac:	5c6b      	ldrb	r3, [r5, r1]
 8006cae:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cb0:	4c08      	ldr	r4, [pc, #32]	; (8006cd4 <UARTEx_SetNbDataToProcess+0x48>)
 8006cb2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cb4:	fb93 f3f1 	sdiv	r3, r3, r1
 8006cb8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cbc:	5cab      	ldrb	r3, [r5, r2]
 8006cbe:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cc0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cc6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006cca:	bc30      	pop	{r4, r5}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	08007e14 	.word	0x08007e14
 8006cd4:	08007e0c 	.word	0x08007e0c

08006cd8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006cd8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d018      	beq.n	8006d12 <HAL_UARTEx_DisableFifoMode+0x3a>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006ce6:	2324      	movs	r3, #36	; 0x24
 8006ce8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cec:	6803      	ldr	r3, [r0, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006cf0:	6819      	ldr	r1, [r3, #0]
 8006cf2:	f021 0101 	bic.w	r1, r1, #1
 8006cf6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cf8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d00:	6801      	ldr	r1, [r0, #0]
 8006d02:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d0a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006d0e:	4618      	mov	r0, r3
 8006d10:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006d12:	2002      	movs	r0, #2
}
 8006d14:	4770      	bx	lr

08006d16 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006d16:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d18:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d01d      	beq.n	8006d5c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006d20:	4604      	mov	r4, r0
 8006d22:	2301      	movs	r3, #1
 8006d24:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	2324      	movs	r3, #36	; 0x24
 8006d2a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d2e:	6803      	ldr	r3, [r0, #0]
 8006d30:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d3a:	6802      	ldr	r2, [r0, #0]
 8006d3c:	6893      	ldr	r3, [r2, #8]
 8006d3e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006d42:	4319      	orrs	r1, r3
 8006d44:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d46:	f7ff ffa1 	bl	8006c8c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d4e:	2320      	movs	r3, #32
 8006d50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d54:	2000      	movs	r0, #0
 8006d56:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d5c:	2002      	movs	r0, #2
 8006d5e:	e7fc      	b.n	8006d5a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006d60 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006d60:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d62:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d01d      	beq.n	8006da6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d72:	2324      	movs	r3, #36	; 0x24
 8006d74:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d78:	6803      	ldr	r3, [r0, #0]
 8006d7a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d84:	6802      	ldr	r2, [r0, #0]
 8006d86:	6893      	ldr	r3, [r2, #8]
 8006d88:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006d8c:	4319      	orrs	r1, r3
 8006d8e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d90:	f7ff ff7c 	bl	8006c8c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d98:	2320      	movs	r3, #32
 8006d9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006da4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006da6:	2002      	movs	r0, #2
 8006da8:	e7fc      	b.n	8006da4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006dac <__errno>:
 8006dac:	4b01      	ldr	r3, [pc, #4]	; (8006db4 <__errno+0x8>)
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	2000000c 	.word	0x2000000c

08006db8 <__libc_init_array>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4d0d      	ldr	r5, [pc, #52]	; (8006df0 <__libc_init_array+0x38>)
 8006dbc:	4c0d      	ldr	r4, [pc, #52]	; (8006df4 <__libc_init_array+0x3c>)
 8006dbe:	1b64      	subs	r4, r4, r5
 8006dc0:	10a4      	asrs	r4, r4, #2
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	42a6      	cmp	r6, r4
 8006dc6:	d109      	bne.n	8006ddc <__libc_init_array+0x24>
 8006dc8:	4d0b      	ldr	r5, [pc, #44]	; (8006df8 <__libc_init_array+0x40>)
 8006dca:	4c0c      	ldr	r4, [pc, #48]	; (8006dfc <__libc_init_array+0x44>)
 8006dcc:	f000 fffa 	bl	8007dc4 <_init>
 8006dd0:	1b64      	subs	r4, r4, r5
 8006dd2:	10a4      	asrs	r4, r4, #2
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	d105      	bne.n	8006de6 <__libc_init_array+0x2e>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de0:	4798      	blx	r3
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7ee      	b.n	8006dc4 <__libc_init_array+0xc>
 8006de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dea:	4798      	blx	r3
 8006dec:	3601      	adds	r6, #1
 8006dee:	e7f2      	b.n	8006dd6 <__libc_init_array+0x1e>
 8006df0:	08008234 	.word	0x08008234
 8006df4:	08008234 	.word	0x08008234
 8006df8:	08008234 	.word	0x08008234
 8006dfc:	08008238 	.word	0x08008238

08006e00 <memset>:
 8006e00:	4402      	add	r2, r0
 8006e02:	4603      	mov	r3, r0
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d100      	bne.n	8006e0a <memset+0xa>
 8006e08:	4770      	bx	lr
 8006e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0e:	e7f9      	b.n	8006e04 <memset+0x4>

08006e10 <cosf>:
 8006e10:	ee10 3a10 	vmov	r3, s0
 8006e14:	b507      	push	{r0, r1, r2, lr}
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <cosf+0x80>)
 8006e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	dc06      	bgt.n	8006e2e <cosf+0x1e>
 8006e20:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8006e94 <cosf+0x84>
 8006e24:	b003      	add	sp, #12
 8006e26:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e2a:	f000 bb1d 	b.w	8007468 <__kernel_cosf>
 8006e2e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e32:	db04      	blt.n	8006e3e <cosf+0x2e>
 8006e34:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006e38:	b003      	add	sp, #12
 8006e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e3e:	4668      	mov	r0, sp
 8006e40:	f000 f9d2 	bl	80071e8 <__ieee754_rem_pio2f>
 8006e44:	f000 0003 	and.w	r0, r0, #3
 8006e48:	2801      	cmp	r0, #1
 8006e4a:	d009      	beq.n	8006e60 <cosf+0x50>
 8006e4c:	2802      	cmp	r0, #2
 8006e4e:	d010      	beq.n	8006e72 <cosf+0x62>
 8006e50:	b9b0      	cbnz	r0, 8006e80 <cosf+0x70>
 8006e52:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e56:	ed9d 0a00 	vldr	s0, [sp]
 8006e5a:	f000 fb05 	bl	8007468 <__kernel_cosf>
 8006e5e:	e7eb      	b.n	8006e38 <cosf+0x28>
 8006e60:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e64:	ed9d 0a00 	vldr	s0, [sp]
 8006e68:	f000 fdd4 	bl	8007a14 <__kernel_sinf>
 8006e6c:	eeb1 0a40 	vneg.f32	s0, s0
 8006e70:	e7e2      	b.n	8006e38 <cosf+0x28>
 8006e72:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e76:	ed9d 0a00 	vldr	s0, [sp]
 8006e7a:	f000 faf5 	bl	8007468 <__kernel_cosf>
 8006e7e:	e7f5      	b.n	8006e6c <cosf+0x5c>
 8006e80:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e84:	ed9d 0a00 	vldr	s0, [sp]
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f000 fdc3 	bl	8007a14 <__kernel_sinf>
 8006e8e:	e7d3      	b.n	8006e38 <cosf+0x28>
 8006e90:	3f490fd8 	.word	0x3f490fd8
 8006e94:	00000000 	.word	0x00000000

08006e98 <sinf>:
 8006e98:	ee10 3a10 	vmov	r3, s0
 8006e9c:	b507      	push	{r0, r1, r2, lr}
 8006e9e:	4a1f      	ldr	r2, [pc, #124]	; (8006f1c <sinf+0x84>)
 8006ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	dc07      	bgt.n	8006eb8 <sinf+0x20>
 8006ea8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006f20 <sinf+0x88>
 8006eac:	2000      	movs	r0, #0
 8006eae:	b003      	add	sp, #12
 8006eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb4:	f000 bdae 	b.w	8007a14 <__kernel_sinf>
 8006eb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006ebc:	db04      	blt.n	8006ec8 <sinf+0x30>
 8006ebe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006ec2:	b003      	add	sp, #12
 8006ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ec8:	4668      	mov	r0, sp
 8006eca:	f000 f98d 	bl	80071e8 <__ieee754_rem_pio2f>
 8006ece:	f000 0003 	and.w	r0, r0, #3
 8006ed2:	2801      	cmp	r0, #1
 8006ed4:	d00a      	beq.n	8006eec <sinf+0x54>
 8006ed6:	2802      	cmp	r0, #2
 8006ed8:	d00f      	beq.n	8006efa <sinf+0x62>
 8006eda:	b9c0      	cbnz	r0, 8006f0e <sinf+0x76>
 8006edc:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ee0:	ed9d 0a00 	vldr	s0, [sp]
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	f000 fd95 	bl	8007a14 <__kernel_sinf>
 8006eea:	e7ea      	b.n	8006ec2 <sinf+0x2a>
 8006eec:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ef0:	ed9d 0a00 	vldr	s0, [sp]
 8006ef4:	f000 fab8 	bl	8007468 <__kernel_cosf>
 8006ef8:	e7e3      	b.n	8006ec2 <sinf+0x2a>
 8006efa:	eddd 0a01 	vldr	s1, [sp, #4]
 8006efe:	ed9d 0a00 	vldr	s0, [sp]
 8006f02:	2001      	movs	r0, #1
 8006f04:	f000 fd86 	bl	8007a14 <__kernel_sinf>
 8006f08:	eeb1 0a40 	vneg.f32	s0, s0
 8006f0c:	e7d9      	b.n	8006ec2 <sinf+0x2a>
 8006f0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f12:	ed9d 0a00 	vldr	s0, [sp]
 8006f16:	f000 faa7 	bl	8007468 <__kernel_cosf>
 8006f1a:	e7f5      	b.n	8006f08 <sinf+0x70>
 8006f1c:	3f490fd8 	.word	0x3f490fd8
 8006f20:	00000000 	.word	0x00000000

08006f24 <atan2f>:
 8006f24:	f000 b83e 	b.w	8006fa4 <__ieee754_atan2f>

08006f28 <fmodf>:
 8006f28:	b508      	push	{r3, lr}
 8006f2a:	ed2d 8b02 	vpush	{d8}
 8006f2e:	eef0 8a40 	vmov.f32	s17, s0
 8006f32:	eeb0 8a60 	vmov.f32	s16, s1
 8006f36:	f000 f8d5 	bl	80070e4 <__ieee754_fmodf>
 8006f3a:	eef4 8a48 	vcmp.f32	s17, s16
 8006f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f42:	d60c      	bvs.n	8006f5e <fmodf+0x36>
 8006f44:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006f64 <fmodf+0x3c>
 8006f48:	eeb4 8a68 	vcmp.f32	s16, s17
 8006f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f50:	d105      	bne.n	8006f5e <fmodf+0x36>
 8006f52:	f7ff ff2b 	bl	8006dac <__errno>
 8006f56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006f5a:	2321      	movs	r3, #33	; 0x21
 8006f5c:	6003      	str	r3, [r0, #0]
 8006f5e:	ecbd 8b02 	vpop	{d8}
 8006f62:	bd08      	pop	{r3, pc}
 8006f64:	00000000 	.word	0x00000000

08006f68 <sqrtf>:
 8006f68:	b508      	push	{r3, lr}
 8006f6a:	ed2d 8b02 	vpush	{d8}
 8006f6e:	eeb0 8a40 	vmov.f32	s16, s0
 8006f72:	f000 fa75 	bl	8007460 <__ieee754_sqrtf>
 8006f76:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7e:	d60c      	bvs.n	8006f9a <sqrtf+0x32>
 8006f80:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006fa0 <sqrtf+0x38>
 8006f84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8c:	d505      	bpl.n	8006f9a <sqrtf+0x32>
 8006f8e:	f7ff ff0d 	bl	8006dac <__errno>
 8006f92:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006f96:	2321      	movs	r3, #33	; 0x21
 8006f98:	6003      	str	r3, [r0, #0]
 8006f9a:	ecbd 8b02 	vpop	{d8}
 8006f9e:	bd08      	pop	{r3, pc}
 8006fa0:	00000000 	.word	0x00000000

08006fa4 <__ieee754_atan2f>:
 8006fa4:	ee10 2a90 	vmov	r2, s1
 8006fa8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006fac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	eef0 7a40 	vmov.f32	s15, s0
 8006fb6:	dc06      	bgt.n	8006fc6 <__ieee754_atan2f+0x22>
 8006fb8:	ee10 0a10 	vmov	r0, s0
 8006fbc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006fc0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fc4:	dd04      	ble.n	8006fd0 <__ieee754_atan2f+0x2c>
 8006fc6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006fca:	eeb0 0a67 	vmov.f32	s0, s15
 8006fce:	bd10      	pop	{r4, pc}
 8006fd0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006fd4:	d103      	bne.n	8006fde <__ieee754_atan2f+0x3a>
 8006fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fda:	f000 bd63 	b.w	8007aa4 <atanf>
 8006fde:	1794      	asrs	r4, r2, #30
 8006fe0:	f004 0402 	and.w	r4, r4, #2
 8006fe4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006fe8:	b943      	cbnz	r3, 8006ffc <__ieee754_atan2f+0x58>
 8006fea:	2c02      	cmp	r4, #2
 8006fec:	d05e      	beq.n	80070ac <__ieee754_atan2f+0x108>
 8006fee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80070c0 <__ieee754_atan2f+0x11c>
 8006ff2:	2c03      	cmp	r4, #3
 8006ff4:	bf08      	it	eq
 8006ff6:	eef0 7a47 	vmoveq.f32	s15, s14
 8006ffa:	e7e6      	b.n	8006fca <__ieee754_atan2f+0x26>
 8006ffc:	b941      	cbnz	r1, 8007010 <__ieee754_atan2f+0x6c>
 8006ffe:	eddf 7a31 	vldr	s15, [pc, #196]	; 80070c4 <__ieee754_atan2f+0x120>
 8007002:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80070c8 <__ieee754_atan2f+0x124>
 8007006:	2800      	cmp	r0, #0
 8007008:	bfb8      	it	lt
 800700a:	eef0 7a40 	vmovlt.f32	s15, s0
 800700e:	e7dc      	b.n	8006fca <__ieee754_atan2f+0x26>
 8007010:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007014:	d110      	bne.n	8007038 <__ieee754_atan2f+0x94>
 8007016:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800701a:	f104 34ff 	add.w	r4, r4, #4294967295
 800701e:	d107      	bne.n	8007030 <__ieee754_atan2f+0x8c>
 8007020:	2c02      	cmp	r4, #2
 8007022:	d846      	bhi.n	80070b2 <__ieee754_atan2f+0x10e>
 8007024:	4b29      	ldr	r3, [pc, #164]	; (80070cc <__ieee754_atan2f+0x128>)
 8007026:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800702a:	edd4 7a00 	vldr	s15, [r4]
 800702e:	e7cc      	b.n	8006fca <__ieee754_atan2f+0x26>
 8007030:	2c02      	cmp	r4, #2
 8007032:	d841      	bhi.n	80070b8 <__ieee754_atan2f+0x114>
 8007034:	4b26      	ldr	r3, [pc, #152]	; (80070d0 <__ieee754_atan2f+0x12c>)
 8007036:	e7f6      	b.n	8007026 <__ieee754_atan2f+0x82>
 8007038:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800703c:	d0df      	beq.n	8006ffe <__ieee754_atan2f+0x5a>
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8007044:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007048:	da1a      	bge.n	8007080 <__ieee754_atan2f+0xdc>
 800704a:	2a00      	cmp	r2, #0
 800704c:	da01      	bge.n	8007052 <__ieee754_atan2f+0xae>
 800704e:	313c      	adds	r1, #60	; 0x3c
 8007050:	db19      	blt.n	8007086 <__ieee754_atan2f+0xe2>
 8007052:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007056:	f000 fdf9 	bl	8007c4c <fabsf>
 800705a:	f000 fd23 	bl	8007aa4 <atanf>
 800705e:	eef0 7a40 	vmov.f32	s15, s0
 8007062:	2c01      	cmp	r4, #1
 8007064:	d012      	beq.n	800708c <__ieee754_atan2f+0xe8>
 8007066:	2c02      	cmp	r4, #2
 8007068:	d017      	beq.n	800709a <__ieee754_atan2f+0xf6>
 800706a:	2c00      	cmp	r4, #0
 800706c:	d0ad      	beq.n	8006fca <__ieee754_atan2f+0x26>
 800706e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80070d4 <__ieee754_atan2f+0x130>
 8007072:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007076:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80070d8 <__ieee754_atan2f+0x134>
 800707a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800707e:	e7a4      	b.n	8006fca <__ieee754_atan2f+0x26>
 8007080:	eddf 7a10 	vldr	s15, [pc, #64]	; 80070c4 <__ieee754_atan2f+0x120>
 8007084:	e7ed      	b.n	8007062 <__ieee754_atan2f+0xbe>
 8007086:	eddf 7a15 	vldr	s15, [pc, #84]	; 80070dc <__ieee754_atan2f+0x138>
 800708a:	e7ea      	b.n	8007062 <__ieee754_atan2f+0xbe>
 800708c:	ee17 3a90 	vmov	r3, s15
 8007090:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	e797      	b.n	8006fca <__ieee754_atan2f+0x26>
 800709a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80070d4 <__ieee754_atan2f+0x130>
 800709e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80070a2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80070d8 <__ieee754_atan2f+0x134>
 80070a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80070aa:	e78e      	b.n	8006fca <__ieee754_atan2f+0x26>
 80070ac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80070d8 <__ieee754_atan2f+0x134>
 80070b0:	e78b      	b.n	8006fca <__ieee754_atan2f+0x26>
 80070b2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80070e0 <__ieee754_atan2f+0x13c>
 80070b6:	e788      	b.n	8006fca <__ieee754_atan2f+0x26>
 80070b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80070dc <__ieee754_atan2f+0x138>
 80070bc:	e785      	b.n	8006fca <__ieee754_atan2f+0x26>
 80070be:	bf00      	nop
 80070c0:	c0490fdb 	.word	0xc0490fdb
 80070c4:	3fc90fdb 	.word	0x3fc90fdb
 80070c8:	bfc90fdb 	.word	0xbfc90fdb
 80070cc:	08007e1c 	.word	0x08007e1c
 80070d0:	08007e28 	.word	0x08007e28
 80070d4:	33bbbd2e 	.word	0x33bbbd2e
 80070d8:	40490fdb 	.word	0x40490fdb
 80070dc:	00000000 	.word	0x00000000
 80070e0:	3f490fdb 	.word	0x3f490fdb

080070e4 <__ieee754_fmodf>:
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	ee10 5a90 	vmov	r5, s1
 80070ea:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80070ee:	d009      	beq.n	8007104 <__ieee754_fmodf+0x20>
 80070f0:	ee10 2a10 	vmov	r2, s0
 80070f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80070f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070fc:	da02      	bge.n	8007104 <__ieee754_fmodf+0x20>
 80070fe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007102:	dd04      	ble.n	800710e <__ieee754_fmodf+0x2a>
 8007104:	ee60 0a20 	vmul.f32	s1, s0, s1
 8007108:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800710c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710e:	42a3      	cmp	r3, r4
 8007110:	dbfc      	blt.n	800710c <__ieee754_fmodf+0x28>
 8007112:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8007116:	d105      	bne.n	8007124 <__ieee754_fmodf+0x40>
 8007118:	4b32      	ldr	r3, [pc, #200]	; (80071e4 <__ieee754_fmodf+0x100>)
 800711a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800711e:	ed93 0a00 	vldr	s0, [r3]
 8007122:	e7f3      	b.n	800710c <__ieee754_fmodf+0x28>
 8007124:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8007128:	d13f      	bne.n	80071aa <__ieee754_fmodf+0xc6>
 800712a:	0219      	lsls	r1, r3, #8
 800712c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8007130:	2900      	cmp	r1, #0
 8007132:	dc37      	bgt.n	80071a4 <__ieee754_fmodf+0xc0>
 8007134:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8007138:	d13d      	bne.n	80071b6 <__ieee754_fmodf+0xd2>
 800713a:	0227      	lsls	r7, r4, #8
 800713c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8007140:	2f00      	cmp	r7, #0
 8007142:	da35      	bge.n	80071b0 <__ieee754_fmodf+0xcc>
 8007144:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8007148:	bfbb      	ittet	lt
 800714a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800714e:	1a12      	sublt	r2, r2, r0
 8007150:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8007154:	4093      	lsllt	r3, r2
 8007156:	bfa8      	it	ge
 8007158:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800715c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007160:	bfb5      	itete	lt
 8007162:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8007166:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800716a:	1a52      	sublt	r2, r2, r1
 800716c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8007170:	bfb8      	it	lt
 8007172:	4094      	lsllt	r4, r2
 8007174:	1a40      	subs	r0, r0, r1
 8007176:	1b1a      	subs	r2, r3, r4
 8007178:	bb00      	cbnz	r0, 80071bc <__ieee754_fmodf+0xd8>
 800717a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800717e:	bf38      	it	cc
 8007180:	4613      	movcc	r3, r2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0c8      	beq.n	8007118 <__ieee754_fmodf+0x34>
 8007186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800718a:	db1f      	blt.n	80071cc <__ieee754_fmodf+0xe8>
 800718c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007190:	db1f      	blt.n	80071d2 <__ieee754_fmodf+0xee>
 8007192:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007196:	317f      	adds	r1, #127	; 0x7f
 8007198:	4333      	orrs	r3, r6
 800719a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800719e:	ee00 3a10 	vmov	s0, r3
 80071a2:	e7b3      	b.n	800710c <__ieee754_fmodf+0x28>
 80071a4:	3801      	subs	r0, #1
 80071a6:	0049      	lsls	r1, r1, #1
 80071a8:	e7c2      	b.n	8007130 <__ieee754_fmodf+0x4c>
 80071aa:	15d8      	asrs	r0, r3, #23
 80071ac:	387f      	subs	r0, #127	; 0x7f
 80071ae:	e7c1      	b.n	8007134 <__ieee754_fmodf+0x50>
 80071b0:	3901      	subs	r1, #1
 80071b2:	007f      	lsls	r7, r7, #1
 80071b4:	e7c4      	b.n	8007140 <__ieee754_fmodf+0x5c>
 80071b6:	15e1      	asrs	r1, r4, #23
 80071b8:	397f      	subs	r1, #127	; 0x7f
 80071ba:	e7c3      	b.n	8007144 <__ieee754_fmodf+0x60>
 80071bc:	2a00      	cmp	r2, #0
 80071be:	da02      	bge.n	80071c6 <__ieee754_fmodf+0xe2>
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	3801      	subs	r0, #1
 80071c4:	e7d7      	b.n	8007176 <__ieee754_fmodf+0x92>
 80071c6:	d0a7      	beq.n	8007118 <__ieee754_fmodf+0x34>
 80071c8:	0053      	lsls	r3, r2, #1
 80071ca:	e7fa      	b.n	80071c2 <__ieee754_fmodf+0xde>
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	3901      	subs	r1, #1
 80071d0:	e7d9      	b.n	8007186 <__ieee754_fmodf+0xa2>
 80071d2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80071d6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80071da:	3182      	adds	r1, #130	; 0x82
 80071dc:	410b      	asrs	r3, r1
 80071de:	4333      	orrs	r3, r6
 80071e0:	e7dd      	b.n	800719e <__ieee754_fmodf+0xba>
 80071e2:	bf00      	nop
 80071e4:	08007e34 	.word	0x08007e34

080071e8 <__ieee754_rem_pio2f>:
 80071e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ea:	ee10 6a10 	vmov	r6, s0
 80071ee:	4b8e      	ldr	r3, [pc, #568]	; (8007428 <__ieee754_rem_pio2f+0x240>)
 80071f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80071f4:	429d      	cmp	r5, r3
 80071f6:	b087      	sub	sp, #28
 80071f8:	eef0 7a40 	vmov.f32	s15, s0
 80071fc:	4604      	mov	r4, r0
 80071fe:	dc05      	bgt.n	800720c <__ieee754_rem_pio2f+0x24>
 8007200:	2300      	movs	r3, #0
 8007202:	ed80 0a00 	vstr	s0, [r0]
 8007206:	6043      	str	r3, [r0, #4]
 8007208:	2000      	movs	r0, #0
 800720a:	e01a      	b.n	8007242 <__ieee754_rem_pio2f+0x5a>
 800720c:	4b87      	ldr	r3, [pc, #540]	; (800742c <__ieee754_rem_pio2f+0x244>)
 800720e:	429d      	cmp	r5, r3
 8007210:	dc46      	bgt.n	80072a0 <__ieee754_rem_pio2f+0xb8>
 8007212:	2e00      	cmp	r6, #0
 8007214:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007430 <__ieee754_rem_pio2f+0x248>
 8007218:	4b86      	ldr	r3, [pc, #536]	; (8007434 <__ieee754_rem_pio2f+0x24c>)
 800721a:	f025 050f 	bic.w	r5, r5, #15
 800721e:	dd1f      	ble.n	8007260 <__ieee754_rem_pio2f+0x78>
 8007220:	429d      	cmp	r5, r3
 8007222:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007226:	d00e      	beq.n	8007246 <__ieee754_rem_pio2f+0x5e>
 8007228:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007438 <__ieee754_rem_pio2f+0x250>
 800722c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007230:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007234:	ed80 0a00 	vstr	s0, [r0]
 8007238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800723c:	2001      	movs	r0, #1
 800723e:	edc4 7a01 	vstr	s15, [r4, #4]
 8007242:	b007      	add	sp, #28
 8007244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007246:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800743c <__ieee754_rem_pio2f+0x254>
 800724a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007440 <__ieee754_rem_pio2f+0x258>
 800724e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007252:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007256:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800725a:	edc0 6a00 	vstr	s13, [r0]
 800725e:	e7eb      	b.n	8007238 <__ieee754_rem_pio2f+0x50>
 8007260:	429d      	cmp	r5, r3
 8007262:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007266:	d00e      	beq.n	8007286 <__ieee754_rem_pio2f+0x9e>
 8007268:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007438 <__ieee754_rem_pio2f+0x250>
 800726c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007270:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007274:	ed80 0a00 	vstr	s0, [r0]
 8007278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	edc4 7a01 	vstr	s15, [r4, #4]
 8007284:	e7dd      	b.n	8007242 <__ieee754_rem_pio2f+0x5a>
 8007286:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800743c <__ieee754_rem_pio2f+0x254>
 800728a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007440 <__ieee754_rem_pio2f+0x258>
 800728e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007292:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007296:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800729a:	edc0 6a00 	vstr	s13, [r0]
 800729e:	e7eb      	b.n	8007278 <__ieee754_rem_pio2f+0x90>
 80072a0:	4b68      	ldr	r3, [pc, #416]	; (8007444 <__ieee754_rem_pio2f+0x25c>)
 80072a2:	429d      	cmp	r5, r3
 80072a4:	dc72      	bgt.n	800738c <__ieee754_rem_pio2f+0x1a4>
 80072a6:	f000 fcd1 	bl	8007c4c <fabsf>
 80072aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007448 <__ieee754_rem_pio2f+0x260>
 80072ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80072b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80072b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072be:	ee17 0a90 	vmov	r0, s15
 80072c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007430 <__ieee754_rem_pio2f+0x248>
 80072c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80072ca:	281f      	cmp	r0, #31
 80072cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007438 <__ieee754_rem_pio2f+0x250>
 80072d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d4:	eeb1 6a47 	vneg.f32	s12, s14
 80072d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80072dc:	ee16 2a90 	vmov	r2, s13
 80072e0:	dc1c      	bgt.n	800731c <__ieee754_rem_pio2f+0x134>
 80072e2:	495a      	ldr	r1, [pc, #360]	; (800744c <__ieee754_rem_pio2f+0x264>)
 80072e4:	1e47      	subs	r7, r0, #1
 80072e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80072ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80072ee:	428b      	cmp	r3, r1
 80072f0:	d014      	beq.n	800731c <__ieee754_rem_pio2f+0x134>
 80072f2:	6022      	str	r2, [r4, #0]
 80072f4:	ed94 7a00 	vldr	s14, [r4]
 80072f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007302:	ed84 0a01 	vstr	s0, [r4, #4]
 8007306:	da9c      	bge.n	8007242 <__ieee754_rem_pio2f+0x5a>
 8007308:	eeb1 7a47 	vneg.f32	s14, s14
 800730c:	eeb1 0a40 	vneg.f32	s0, s0
 8007310:	ed84 7a00 	vstr	s14, [r4]
 8007314:	ed84 0a01 	vstr	s0, [r4, #4]
 8007318:	4240      	negs	r0, r0
 800731a:	e792      	b.n	8007242 <__ieee754_rem_pio2f+0x5a>
 800731c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007320:	15eb      	asrs	r3, r5, #23
 8007322:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007326:	2d08      	cmp	r5, #8
 8007328:	dde3      	ble.n	80072f2 <__ieee754_rem_pio2f+0x10a>
 800732a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800743c <__ieee754_rem_pio2f+0x254>
 800732e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007440 <__ieee754_rem_pio2f+0x258>
 8007332:	eef0 6a40 	vmov.f32	s13, s0
 8007336:	eee6 6a27 	vfma.f32	s13, s12, s15
 800733a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800733e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007342:	eef0 7a40 	vmov.f32	s15, s0
 8007346:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800734a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800734e:	ee15 2a90 	vmov	r2, s11
 8007352:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007356:	1a5b      	subs	r3, r3, r1
 8007358:	2b19      	cmp	r3, #25
 800735a:	dc04      	bgt.n	8007366 <__ieee754_rem_pio2f+0x17e>
 800735c:	edc4 5a00 	vstr	s11, [r4]
 8007360:	eeb0 0a66 	vmov.f32	s0, s13
 8007364:	e7c6      	b.n	80072f4 <__ieee754_rem_pio2f+0x10c>
 8007366:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007450 <__ieee754_rem_pio2f+0x268>
 800736a:	eeb0 0a66 	vmov.f32	s0, s13
 800736e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007372:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007376:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007454 <__ieee754_rem_pio2f+0x26c>
 800737a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800737e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007382:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007386:	ed84 7a00 	vstr	s14, [r4]
 800738a:	e7b3      	b.n	80072f4 <__ieee754_rem_pio2f+0x10c>
 800738c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007390:	db06      	blt.n	80073a0 <__ieee754_rem_pio2f+0x1b8>
 8007392:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007396:	edc0 7a01 	vstr	s15, [r0, #4]
 800739a:	edc0 7a00 	vstr	s15, [r0]
 800739e:	e733      	b.n	8007208 <__ieee754_rem_pio2f+0x20>
 80073a0:	15ea      	asrs	r2, r5, #23
 80073a2:	3a86      	subs	r2, #134	; 0x86
 80073a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80073a8:	ee07 3a90 	vmov	s15, r3
 80073ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007458 <__ieee754_rem_pio2f+0x270>
 80073b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 80073c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80073d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	edcd 7a05 	vstr	s15, [sp, #20]
 80073e4:	d11e      	bne.n	8007424 <__ieee754_rem_pio2f+0x23c>
 80073e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80073ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ee:	bf14      	ite	ne
 80073f0:	2302      	movne	r3, #2
 80073f2:	2301      	moveq	r3, #1
 80073f4:	4919      	ldr	r1, [pc, #100]	; (800745c <__ieee754_rem_pio2f+0x274>)
 80073f6:	9101      	str	r1, [sp, #4]
 80073f8:	2102      	movs	r1, #2
 80073fa:	9100      	str	r1, [sp, #0]
 80073fc:	a803      	add	r0, sp, #12
 80073fe:	4621      	mov	r1, r4
 8007400:	f000 f892 	bl	8007528 <__kernel_rem_pio2f>
 8007404:	2e00      	cmp	r6, #0
 8007406:	f6bf af1c 	bge.w	8007242 <__ieee754_rem_pio2f+0x5a>
 800740a:	edd4 7a00 	vldr	s15, [r4]
 800740e:	eef1 7a67 	vneg.f32	s15, s15
 8007412:	edc4 7a00 	vstr	s15, [r4]
 8007416:	edd4 7a01 	vldr	s15, [r4, #4]
 800741a:	eef1 7a67 	vneg.f32	s15, s15
 800741e:	edc4 7a01 	vstr	s15, [r4, #4]
 8007422:	e779      	b.n	8007318 <__ieee754_rem_pio2f+0x130>
 8007424:	2303      	movs	r3, #3
 8007426:	e7e5      	b.n	80073f4 <__ieee754_rem_pio2f+0x20c>
 8007428:	3f490fd8 	.word	0x3f490fd8
 800742c:	4016cbe3 	.word	0x4016cbe3
 8007430:	3fc90f80 	.word	0x3fc90f80
 8007434:	3fc90fd0 	.word	0x3fc90fd0
 8007438:	37354443 	.word	0x37354443
 800743c:	37354400 	.word	0x37354400
 8007440:	2e85a308 	.word	0x2e85a308
 8007444:	43490f80 	.word	0x43490f80
 8007448:	3f22f984 	.word	0x3f22f984
 800744c:	08007e3c 	.word	0x08007e3c
 8007450:	2e85a300 	.word	0x2e85a300
 8007454:	248d3132 	.word	0x248d3132
 8007458:	43800000 	.word	0x43800000
 800745c:	08007ebc 	.word	0x08007ebc

08007460 <__ieee754_sqrtf>:
 8007460:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007464:	4770      	bx	lr
	...

08007468 <__kernel_cosf>:
 8007468:	ee10 3a10 	vmov	r3, s0
 800746c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007470:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007474:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007478:	da05      	bge.n	8007486 <__kernel_cosf+0x1e>
 800747a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800747e:	ee17 2a90 	vmov	r2, s15
 8007482:	2a00      	cmp	r2, #0
 8007484:	d03d      	beq.n	8007502 <__kernel_cosf+0x9a>
 8007486:	ee60 5a00 	vmul.f32	s11, s0, s0
 800748a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007508 <__kernel_cosf+0xa0>
 800748e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800750c <__kernel_cosf+0xa4>
 8007492:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007510 <__kernel_cosf+0xa8>
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <__kernel_cosf+0xac>)
 8007498:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800749c:	4293      	cmp	r3, r2
 800749e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007518 <__kernel_cosf+0xb0>
 80074a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80074a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800751c <__kernel_cosf+0xb4>
 80074aa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80074ae:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007520 <__kernel_cosf+0xb8>
 80074b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80074b6:	eeb0 7a66 	vmov.f32	s14, s13
 80074ba:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80074be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80074c2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80074c6:	ee67 6a25 	vmul.f32	s13, s14, s11
 80074ca:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80074ce:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80074d2:	dc04      	bgt.n	80074de <__kernel_cosf+0x76>
 80074d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80074d8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80074dc:	4770      	bx	lr
 80074de:	4a11      	ldr	r2, [pc, #68]	; (8007524 <__kernel_cosf+0xbc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	bfda      	itte	le
 80074e4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80074e8:	ee06 3a90 	vmovle	s13, r3
 80074ec:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80074f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074f4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80074f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007500:	4770      	bx	lr
 8007502:	eeb0 0a46 	vmov.f32	s0, s12
 8007506:	4770      	bx	lr
 8007508:	ad47d74e 	.word	0xad47d74e
 800750c:	310f74f6 	.word	0x310f74f6
 8007510:	3d2aaaab 	.word	0x3d2aaaab
 8007514:	3e999999 	.word	0x3e999999
 8007518:	b493f27c 	.word	0xb493f27c
 800751c:	37d00d01 	.word	0x37d00d01
 8007520:	bab60b61 	.word	0xbab60b61
 8007524:	3f480000 	.word	0x3f480000

08007528 <__kernel_rem_pio2f>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	ed2d 8b04 	vpush	{d8-d9}
 8007530:	b0d9      	sub	sp, #356	; 0x164
 8007532:	4688      	mov	r8, r1
 8007534:	9002      	str	r0, [sp, #8]
 8007536:	49bb      	ldr	r1, [pc, #748]	; (8007824 <__kernel_rem_pio2f+0x2fc>)
 8007538:	9866      	ldr	r0, [sp, #408]	; 0x198
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007540:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8007544:	1e59      	subs	r1, r3, #1
 8007546:	1d13      	adds	r3, r2, #4
 8007548:	db27      	blt.n	800759a <__kernel_rem_pio2f+0x72>
 800754a:	f1b2 0b03 	subs.w	fp, r2, #3
 800754e:	bf48      	it	mi
 8007550:	f102 0b04 	addmi.w	fp, r2, #4
 8007554:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007558:	1c45      	adds	r5, r0, #1
 800755a:	00ec      	lsls	r4, r5, #3
 800755c:	1a47      	subs	r7, r0, r1
 800755e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8007834 <__kernel_rem_pio2f+0x30c>
 8007562:	9403      	str	r4, [sp, #12]
 8007564:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007568:	eb0a 0c01 	add.w	ip, sl, r1
 800756c:	ae1c      	add	r6, sp, #112	; 0x70
 800756e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8007572:	2400      	movs	r4, #0
 8007574:	4564      	cmp	r4, ip
 8007576:	dd12      	ble.n	800759e <__kernel_rem_pio2f+0x76>
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	ac1c      	add	r4, sp, #112	; 0x70
 800757c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007580:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8007584:	f04f 0c00 	mov.w	ip, #0
 8007588:	45d4      	cmp	ip, sl
 800758a:	dc27      	bgt.n	80075dc <__kernel_rem_pio2f+0xb4>
 800758c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007590:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007834 <__kernel_rem_pio2f+0x30c>
 8007594:	4627      	mov	r7, r4
 8007596:	2600      	movs	r6, #0
 8007598:	e016      	b.n	80075c8 <__kernel_rem_pio2f+0xa0>
 800759a:	2000      	movs	r0, #0
 800759c:	e7dc      	b.n	8007558 <__kernel_rem_pio2f+0x30>
 800759e:	42e7      	cmn	r7, r4
 80075a0:	bf5d      	ittte	pl
 80075a2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80075a6:	ee07 3a90 	vmovpl	s15, r3
 80075aa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80075ae:	eef0 7a47 	vmovmi.f32	s15, s14
 80075b2:	ece6 7a01 	vstmia	r6!, {s15}
 80075b6:	3401      	adds	r4, #1
 80075b8:	e7dc      	b.n	8007574 <__kernel_rem_pio2f+0x4c>
 80075ba:	ecf9 6a01 	vldmia	r9!, {s13}
 80075be:	ed97 7a00 	vldr	s14, [r7]
 80075c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80075c6:	3601      	adds	r6, #1
 80075c8:	428e      	cmp	r6, r1
 80075ca:	f1a7 0704 	sub.w	r7, r7, #4
 80075ce:	ddf4      	ble.n	80075ba <__kernel_rem_pio2f+0x92>
 80075d0:	eceb 7a01 	vstmia	fp!, {s15}
 80075d4:	f10c 0c01 	add.w	ip, ip, #1
 80075d8:	3404      	adds	r4, #4
 80075da:	e7d5      	b.n	8007588 <__kernel_rem_pio2f+0x60>
 80075dc:	ab08      	add	r3, sp, #32
 80075de:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80075e2:	eddf 8a93 	vldr	s17, [pc, #588]	; 8007830 <__kernel_rem_pio2f+0x308>
 80075e6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800782c <__kernel_rem_pio2f+0x304>
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80075f0:	4656      	mov	r6, sl
 80075f2:	00b3      	lsls	r3, r6, #2
 80075f4:	9305      	str	r3, [sp, #20]
 80075f6:	ab58      	add	r3, sp, #352	; 0x160
 80075f8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80075fc:	ac08      	add	r4, sp, #32
 80075fe:	ab44      	add	r3, sp, #272	; 0x110
 8007600:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007604:	46a4      	mov	ip, r4
 8007606:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800760a:	4637      	mov	r7, r6
 800760c:	2f00      	cmp	r7, #0
 800760e:	f1a0 0004 	sub.w	r0, r0, #4
 8007612:	dc4f      	bgt.n	80076b4 <__kernel_rem_pio2f+0x18c>
 8007614:	4628      	mov	r0, r5
 8007616:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800761a:	f000 fb61 	bl	8007ce0 <scalbnf>
 800761e:	eeb0 8a40 	vmov.f32	s16, s0
 8007622:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007626:	ee28 0a00 	vmul.f32	s0, s16, s0
 800762a:	f000 fb17 	bl	8007c5c <floorf>
 800762e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007632:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007636:	2d00      	cmp	r5, #0
 8007638:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800763c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007640:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007644:	ee17 9a90 	vmov	r9, s15
 8007648:	ee38 8a40 	vsub.f32	s16, s16, s0
 800764c:	dd44      	ble.n	80076d8 <__kernel_rem_pio2f+0x1b0>
 800764e:	f106 3cff 	add.w	ip, r6, #4294967295
 8007652:	ab08      	add	r3, sp, #32
 8007654:	f1c5 0e08 	rsb	lr, r5, #8
 8007658:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800765c:	fa47 f00e 	asr.w	r0, r7, lr
 8007660:	4481      	add	r9, r0
 8007662:	fa00 f00e 	lsl.w	r0, r0, lr
 8007666:	1a3f      	subs	r7, r7, r0
 8007668:	f1c5 0007 	rsb	r0, r5, #7
 800766c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007670:	4107      	asrs	r7, r0
 8007672:	2f00      	cmp	r7, #0
 8007674:	dd3f      	ble.n	80076f6 <__kernel_rem_pio2f+0x1ce>
 8007676:	f04f 0e00 	mov.w	lr, #0
 800767a:	f109 0901 	add.w	r9, r9, #1
 800767e:	4673      	mov	r3, lr
 8007680:	4576      	cmp	r6, lr
 8007682:	dc6b      	bgt.n	800775c <__kernel_rem_pio2f+0x234>
 8007684:	2d00      	cmp	r5, #0
 8007686:	dd04      	ble.n	8007692 <__kernel_rem_pio2f+0x16a>
 8007688:	2d01      	cmp	r5, #1
 800768a:	d078      	beq.n	800777e <__kernel_rem_pio2f+0x256>
 800768c:	2d02      	cmp	r5, #2
 800768e:	f000 8081 	beq.w	8007794 <__kernel_rem_pio2f+0x26c>
 8007692:	2f02      	cmp	r7, #2
 8007694:	d12f      	bne.n	80076f6 <__kernel_rem_pio2f+0x1ce>
 8007696:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800769a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800769e:	b353      	cbz	r3, 80076f6 <__kernel_rem_pio2f+0x1ce>
 80076a0:	4628      	mov	r0, r5
 80076a2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80076a6:	f000 fb1b 	bl	8007ce0 <scalbnf>
 80076aa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80076ae:	ee38 8a40 	vsub.f32	s16, s16, s0
 80076b2:	e020      	b.n	80076f6 <__kernel_rem_pio2f+0x1ce>
 80076b4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80076b8:	3f01      	subs	r7, #1
 80076ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076c2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80076c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80076ca:	ecac 0a01 	vstmia	ip!, {s0}
 80076ce:	ed90 0a00 	vldr	s0, [r0]
 80076d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80076d6:	e799      	b.n	800760c <__kernel_rem_pio2f+0xe4>
 80076d8:	d105      	bne.n	80076e6 <__kernel_rem_pio2f+0x1be>
 80076da:	1e70      	subs	r0, r6, #1
 80076dc:	ab08      	add	r3, sp, #32
 80076de:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80076e2:	11ff      	asrs	r7, r7, #7
 80076e4:	e7c5      	b.n	8007672 <__kernel_rem_pio2f+0x14a>
 80076e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f2:	da31      	bge.n	8007758 <__kernel_rem_pio2f+0x230>
 80076f4:	2700      	movs	r7, #0
 80076f6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80076fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fe:	f040 809b 	bne.w	8007838 <__kernel_rem_pio2f+0x310>
 8007702:	1e74      	subs	r4, r6, #1
 8007704:	46a4      	mov	ip, r4
 8007706:	2000      	movs	r0, #0
 8007708:	45d4      	cmp	ip, sl
 800770a:	da4a      	bge.n	80077a2 <__kernel_rem_pio2f+0x27a>
 800770c:	2800      	cmp	r0, #0
 800770e:	d07a      	beq.n	8007806 <__kernel_rem_pio2f+0x2de>
 8007710:	ab08      	add	r3, sp, #32
 8007712:	3d08      	subs	r5, #8
 8007714:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 8081 	beq.w	8007820 <__kernel_rem_pio2f+0x2f8>
 800771e:	4628      	mov	r0, r5
 8007720:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007724:	00a5      	lsls	r5, r4, #2
 8007726:	f000 fadb 	bl	8007ce0 <scalbnf>
 800772a:	aa44      	add	r2, sp, #272	; 0x110
 800772c:	1d2b      	adds	r3, r5, #4
 800772e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007830 <__kernel_rem_pio2f+0x308>
 8007732:	18d1      	adds	r1, r2, r3
 8007734:	4622      	mov	r2, r4
 8007736:	2a00      	cmp	r2, #0
 8007738:	f280 80ae 	bge.w	8007898 <__kernel_rem_pio2f+0x370>
 800773c:	4622      	mov	r2, r4
 800773e:	2a00      	cmp	r2, #0
 8007740:	f2c0 80cc 	blt.w	80078dc <__kernel_rem_pio2f+0x3b4>
 8007744:	a944      	add	r1, sp, #272	; 0x110
 8007746:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800774a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007828 <__kernel_rem_pio2f+0x300>
 800774e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007834 <__kernel_rem_pio2f+0x30c>
 8007752:	2000      	movs	r0, #0
 8007754:	1aa1      	subs	r1, r4, r2
 8007756:	e0b6      	b.n	80078c6 <__kernel_rem_pio2f+0x39e>
 8007758:	2702      	movs	r7, #2
 800775a:	e78c      	b.n	8007676 <__kernel_rem_pio2f+0x14e>
 800775c:	6820      	ldr	r0, [r4, #0]
 800775e:	b94b      	cbnz	r3, 8007774 <__kernel_rem_pio2f+0x24c>
 8007760:	b118      	cbz	r0, 800776a <__kernel_rem_pio2f+0x242>
 8007762:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8007766:	6020      	str	r0, [r4, #0]
 8007768:	2001      	movs	r0, #1
 800776a:	f10e 0e01 	add.w	lr, lr, #1
 800776e:	3404      	adds	r4, #4
 8007770:	4603      	mov	r3, r0
 8007772:	e785      	b.n	8007680 <__kernel_rem_pio2f+0x158>
 8007774:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007778:	6020      	str	r0, [r4, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	e7f5      	b.n	800776a <__kernel_rem_pio2f+0x242>
 800777e:	1e74      	subs	r4, r6, #1
 8007780:	a808      	add	r0, sp, #32
 8007782:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007786:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800778a:	f10d 0c20 	add.w	ip, sp, #32
 800778e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8007792:	e77e      	b.n	8007692 <__kernel_rem_pio2f+0x16a>
 8007794:	1e74      	subs	r4, r6, #1
 8007796:	a808      	add	r0, sp, #32
 8007798:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800779c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80077a0:	e7f3      	b.n	800778a <__kernel_rem_pio2f+0x262>
 80077a2:	ab08      	add	r3, sp, #32
 80077a4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80077a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077ac:	4318      	orrs	r0, r3
 80077ae:	e7ab      	b.n	8007708 <__kernel_rem_pio2f+0x1e0>
 80077b0:	f10c 0c01 	add.w	ip, ip, #1
 80077b4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80077b8:	2c00      	cmp	r4, #0
 80077ba:	d0f9      	beq.n	80077b0 <__kernel_rem_pio2f+0x288>
 80077bc:	9b05      	ldr	r3, [sp, #20]
 80077be:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80077c2:	eb0d 0003 	add.w	r0, sp, r3
 80077c6:	9b01      	ldr	r3, [sp, #4]
 80077c8:	18f4      	adds	r4, r6, r3
 80077ca:	ab1c      	add	r3, sp, #112	; 0x70
 80077cc:	1c77      	adds	r7, r6, #1
 80077ce:	384c      	subs	r0, #76	; 0x4c
 80077d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077d4:	4466      	add	r6, ip
 80077d6:	42be      	cmp	r6, r7
 80077d8:	f6ff af0b 	blt.w	80075f2 <__kernel_rem_pio2f+0xca>
 80077dc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80077e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077ec:	f04f 0c00 	mov.w	ip, #0
 80077f0:	ece4 7a01 	vstmia	r4!, {s15}
 80077f4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007834 <__kernel_rem_pio2f+0x30c>
 80077f8:	46a1      	mov	r9, r4
 80077fa:	458c      	cmp	ip, r1
 80077fc:	dd07      	ble.n	800780e <__kernel_rem_pio2f+0x2e6>
 80077fe:	ece0 7a01 	vstmia	r0!, {s15}
 8007802:	3701      	adds	r7, #1
 8007804:	e7e7      	b.n	80077d6 <__kernel_rem_pio2f+0x2ae>
 8007806:	9804      	ldr	r0, [sp, #16]
 8007808:	f04f 0c01 	mov.w	ip, #1
 800780c:	e7d2      	b.n	80077b4 <__kernel_rem_pio2f+0x28c>
 800780e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007812:	ed39 7a01 	vldmdb	r9!, {s14}
 8007816:	f10c 0c01 	add.w	ip, ip, #1
 800781a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800781e:	e7ec      	b.n	80077fa <__kernel_rem_pio2f+0x2d2>
 8007820:	3c01      	subs	r4, #1
 8007822:	e775      	b.n	8007710 <__kernel_rem_pio2f+0x1e8>
 8007824:	08008200 	.word	0x08008200
 8007828:	080081d4 	.word	0x080081d4
 800782c:	43800000 	.word	0x43800000
 8007830:	3b800000 	.word	0x3b800000
 8007834:	00000000 	.word	0x00000000
 8007838:	9b03      	ldr	r3, [sp, #12]
 800783a:	eeb0 0a48 	vmov.f32	s0, s16
 800783e:	1a98      	subs	r0, r3, r2
 8007840:	f000 fa4e 	bl	8007ce0 <scalbnf>
 8007844:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800782c <__kernel_rem_pio2f+0x304>
 8007848:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007850:	db19      	blt.n	8007886 <__kernel_rem_pio2f+0x35e>
 8007852:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007830 <__kernel_rem_pio2f+0x308>
 8007856:	ee60 7a27 	vmul.f32	s15, s0, s15
 800785a:	aa08      	add	r2, sp, #32
 800785c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007860:	1c74      	adds	r4, r6, #1
 8007862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007866:	3508      	adds	r5, #8
 8007868:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800786c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007870:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007874:	ee10 3a10 	vmov	r3, s0
 8007878:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800787c:	ee17 3a90 	vmov	r3, s15
 8007880:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007884:	e74b      	b.n	800771e <__kernel_rem_pio2f+0x1f6>
 8007886:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800788a:	aa08      	add	r2, sp, #32
 800788c:	ee10 3a10 	vmov	r3, s0
 8007890:	4634      	mov	r4, r6
 8007892:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007896:	e742      	b.n	800771e <__kernel_rem_pio2f+0x1f6>
 8007898:	a808      	add	r0, sp, #32
 800789a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800789e:	9001      	str	r0, [sp, #4]
 80078a0:	ee07 0a90 	vmov	s15, r0
 80078a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078a8:	3a01      	subs	r2, #1
 80078aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80078ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 80078b2:	ed61 7a01 	vstmdb	r1!, {s15}
 80078b6:	e73e      	b.n	8007736 <__kernel_rem_pio2f+0x20e>
 80078b8:	ecfc 6a01 	vldmia	ip!, {s13}
 80078bc:	ecb6 7a01 	vldmia	r6!, {s14}
 80078c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078c4:	3001      	adds	r0, #1
 80078c6:	4550      	cmp	r0, sl
 80078c8:	dc01      	bgt.n	80078ce <__kernel_rem_pio2f+0x3a6>
 80078ca:	4288      	cmp	r0, r1
 80078cc:	ddf4      	ble.n	80078b8 <__kernel_rem_pio2f+0x390>
 80078ce:	a858      	add	r0, sp, #352	; 0x160
 80078d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078d4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80078d8:	3a01      	subs	r2, #1
 80078da:	e730      	b.n	800773e <__kernel_rem_pio2f+0x216>
 80078dc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80078de:	2a02      	cmp	r2, #2
 80078e0:	dc09      	bgt.n	80078f6 <__kernel_rem_pio2f+0x3ce>
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	dc2a      	bgt.n	800793c <__kernel_rem_pio2f+0x414>
 80078e6:	d043      	beq.n	8007970 <__kernel_rem_pio2f+0x448>
 80078e8:	f009 0007 	and.w	r0, r9, #7
 80078ec:	b059      	add	sp, #356	; 0x164
 80078ee:	ecbd 8b04 	vpop	{d8-d9}
 80078f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d1f5      	bne.n	80078e8 <__kernel_rem_pio2f+0x3c0>
 80078fc:	ab30      	add	r3, sp, #192	; 0xc0
 80078fe:	442b      	add	r3, r5
 8007900:	461a      	mov	r2, r3
 8007902:	4619      	mov	r1, r3
 8007904:	4620      	mov	r0, r4
 8007906:	2800      	cmp	r0, #0
 8007908:	f1a1 0104 	sub.w	r1, r1, #4
 800790c:	dc51      	bgt.n	80079b2 <__kernel_rem_pio2f+0x48a>
 800790e:	4621      	mov	r1, r4
 8007910:	2901      	cmp	r1, #1
 8007912:	f1a2 0204 	sub.w	r2, r2, #4
 8007916:	dc5c      	bgt.n	80079d2 <__kernel_rem_pio2f+0x4aa>
 8007918:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8007834 <__kernel_rem_pio2f+0x30c>
 800791c:	3304      	adds	r3, #4
 800791e:	2c01      	cmp	r4, #1
 8007920:	dc67      	bgt.n	80079f2 <__kernel_rem_pio2f+0x4ca>
 8007922:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8007926:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800792a:	2f00      	cmp	r7, #0
 800792c:	d167      	bne.n	80079fe <__kernel_rem_pio2f+0x4d6>
 800792e:	edc8 6a00 	vstr	s13, [r8]
 8007932:	ed88 7a01 	vstr	s14, [r8, #4]
 8007936:	edc8 7a02 	vstr	s15, [r8, #8]
 800793a:	e7d5      	b.n	80078e8 <__kernel_rem_pio2f+0x3c0>
 800793c:	aa30      	add	r2, sp, #192	; 0xc0
 800793e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8007834 <__kernel_rem_pio2f+0x30c>
 8007942:	4413      	add	r3, r2
 8007944:	4622      	mov	r2, r4
 8007946:	2a00      	cmp	r2, #0
 8007948:	da24      	bge.n	8007994 <__kernel_rem_pio2f+0x46c>
 800794a:	b34f      	cbz	r7, 80079a0 <__kernel_rem_pio2f+0x478>
 800794c:	eef1 7a47 	vneg.f32	s15, s14
 8007950:	edc8 7a00 	vstr	s15, [r8]
 8007954:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800795c:	aa31      	add	r2, sp, #196	; 0xc4
 800795e:	2301      	movs	r3, #1
 8007960:	429c      	cmp	r4, r3
 8007962:	da20      	bge.n	80079a6 <__kernel_rem_pio2f+0x47e>
 8007964:	b10f      	cbz	r7, 800796a <__kernel_rem_pio2f+0x442>
 8007966:	eef1 7a67 	vneg.f32	s15, s15
 800796a:	edc8 7a01 	vstr	s15, [r8, #4]
 800796e:	e7bb      	b.n	80078e8 <__kernel_rem_pio2f+0x3c0>
 8007970:	aa30      	add	r2, sp, #192	; 0xc0
 8007972:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8007834 <__kernel_rem_pio2f+0x30c>
 8007976:	4413      	add	r3, r2
 8007978:	2c00      	cmp	r4, #0
 800797a:	da05      	bge.n	8007988 <__kernel_rem_pio2f+0x460>
 800797c:	b10f      	cbz	r7, 8007982 <__kernel_rem_pio2f+0x45a>
 800797e:	eef1 7a67 	vneg.f32	s15, s15
 8007982:	edc8 7a00 	vstr	s15, [r8]
 8007986:	e7af      	b.n	80078e8 <__kernel_rem_pio2f+0x3c0>
 8007988:	ed33 7a01 	vldmdb	r3!, {s14}
 800798c:	3c01      	subs	r4, #1
 800798e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007992:	e7f1      	b.n	8007978 <__kernel_rem_pio2f+0x450>
 8007994:	ed73 7a01 	vldmdb	r3!, {s15}
 8007998:	3a01      	subs	r2, #1
 800799a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800799e:	e7d2      	b.n	8007946 <__kernel_rem_pio2f+0x41e>
 80079a0:	eef0 7a47 	vmov.f32	s15, s14
 80079a4:	e7d4      	b.n	8007950 <__kernel_rem_pio2f+0x428>
 80079a6:	ecb2 7a01 	vldmia	r2!, {s14}
 80079aa:	3301      	adds	r3, #1
 80079ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079b0:	e7d6      	b.n	8007960 <__kernel_rem_pio2f+0x438>
 80079b2:	edd1 7a00 	vldr	s15, [r1]
 80079b6:	edd1 6a01 	vldr	s13, [r1, #4]
 80079ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80079be:	3801      	subs	r0, #1
 80079c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079c4:	ed81 7a00 	vstr	s14, [r1]
 80079c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079cc:	edc1 7a01 	vstr	s15, [r1, #4]
 80079d0:	e799      	b.n	8007906 <__kernel_rem_pio2f+0x3de>
 80079d2:	edd2 7a00 	vldr	s15, [r2]
 80079d6:	edd2 6a01 	vldr	s13, [r2, #4]
 80079da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80079de:	3901      	subs	r1, #1
 80079e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079e4:	ed82 7a00 	vstr	s14, [r2]
 80079e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80079f0:	e78e      	b.n	8007910 <__kernel_rem_pio2f+0x3e8>
 80079f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80079f6:	3c01      	subs	r4, #1
 80079f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079fc:	e78f      	b.n	800791e <__kernel_rem_pio2f+0x3f6>
 80079fe:	eef1 6a66 	vneg.f32	s13, s13
 8007a02:	eeb1 7a47 	vneg.f32	s14, s14
 8007a06:	edc8 6a00 	vstr	s13, [r8]
 8007a0a:	ed88 7a01 	vstr	s14, [r8, #4]
 8007a0e:	eef1 7a67 	vneg.f32	s15, s15
 8007a12:	e790      	b.n	8007936 <__kernel_rem_pio2f+0x40e>

08007a14 <__kernel_sinf>:
 8007a14:	ee10 3a10 	vmov	r3, s0
 8007a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007a20:	da04      	bge.n	8007a2c <__kernel_sinf+0x18>
 8007a22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007a26:	ee17 3a90 	vmov	r3, s15
 8007a2a:	b35b      	cbz	r3, 8007a84 <__kernel_sinf+0x70>
 8007a2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007a30:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007a88 <__kernel_sinf+0x74>
 8007a34:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007a8c <__kernel_sinf+0x78>
 8007a38:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a3c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007a90 <__kernel_sinf+0x7c>
 8007a40:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a44:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007a94 <__kernel_sinf+0x80>
 8007a48:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007a4c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007a98 <__kernel_sinf+0x84>
 8007a50:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007a54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a58:	b930      	cbnz	r0, 8007a68 <__kernel_sinf+0x54>
 8007a5a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007a9c <__kernel_sinf+0x88>
 8007a5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a62:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007a66:	4770      	bx	lr
 8007a68:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007a6c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007a70:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007a74:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007a78:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007aa0 <__kernel_sinf+0x8c>
 8007a7c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007a80:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	2f2ec9d3 	.word	0x2f2ec9d3
 8007a8c:	b2d72f34 	.word	0xb2d72f34
 8007a90:	3638ef1b 	.word	0x3638ef1b
 8007a94:	b9500d01 	.word	0xb9500d01
 8007a98:	3c088889 	.word	0x3c088889
 8007a9c:	be2aaaab 	.word	0xbe2aaaab
 8007aa0:	3e2aaaab 	.word	0x3e2aaaab

08007aa4 <atanf>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	ee10 5a10 	vmov	r5, s0
 8007aaa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007aae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007ab2:	eef0 7a40 	vmov.f32	s15, s0
 8007ab6:	db10      	blt.n	8007ada <atanf+0x36>
 8007ab8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007abc:	dd04      	ble.n	8007ac8 <atanf+0x24>
 8007abe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007c00 <atanf+0x15c>
 8007acc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007c04 <atanf+0x160>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	bfd8      	it	le
 8007ad4:	eef0 7a40 	vmovle.f32	s15, s0
 8007ad8:	e7f3      	b.n	8007ac2 <atanf+0x1e>
 8007ada:	4b4b      	ldr	r3, [pc, #300]	; (8007c08 <atanf+0x164>)
 8007adc:	429c      	cmp	r4, r3
 8007ade:	dc10      	bgt.n	8007b02 <atanf+0x5e>
 8007ae0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007ae4:	da0a      	bge.n	8007afc <atanf+0x58>
 8007ae6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007c0c <atanf+0x168>
 8007aea:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afa:	dce2      	bgt.n	8007ac2 <atanf+0x1e>
 8007afc:	f04f 33ff 	mov.w	r3, #4294967295
 8007b00:	e013      	b.n	8007b2a <atanf+0x86>
 8007b02:	f000 f8a3 	bl	8007c4c <fabsf>
 8007b06:	4b42      	ldr	r3, [pc, #264]	; (8007c10 <atanf+0x16c>)
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	dc4f      	bgt.n	8007bac <atanf+0x108>
 8007b0c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007b10:	429c      	cmp	r4, r3
 8007b12:	dc41      	bgt.n	8007b98 <atanf+0xf4>
 8007b14:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007b18:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007b1c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007b20:	2300      	movs	r3, #0
 8007b22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007b30:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007c14 <atanf+0x170>
 8007b34:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007c18 <atanf+0x174>
 8007b38:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007c1c <atanf+0x178>
 8007b3c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007b40:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007b44:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007c20 <atanf+0x17c>
 8007b48:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007b4c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007c24 <atanf+0x180>
 8007b50:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b54:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007c28 <atanf+0x184>
 8007b58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007b5c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c2c <atanf+0x188>
 8007b60:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b64:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007c30 <atanf+0x18c>
 8007b68:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007b6c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007c34 <atanf+0x190>
 8007b70:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007b74:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007c38 <atanf+0x194>
 8007b78:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007b7c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007c3c <atanf+0x198>
 8007b80:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007b84:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b88:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b90:	d121      	bne.n	8007bd6 <atanf+0x132>
 8007b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b96:	e794      	b.n	8007ac2 <atanf+0x1e>
 8007b98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007ba0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007baa:	e7be      	b.n	8007b2a <atanf+0x86>
 8007bac:	4b24      	ldr	r3, [pc, #144]	; (8007c40 <atanf+0x19c>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	dc0b      	bgt.n	8007bca <atanf+0x126>
 8007bb2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bba:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc8:	e7af      	b.n	8007b2a <atanf+0x86>
 8007bca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007bce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e7a9      	b.n	8007b2a <atanf+0x86>
 8007bd6:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <atanf+0x1a0>)
 8007bd8:	491b      	ldr	r1, [pc, #108]	; (8007c48 <atanf+0x1a4>)
 8007bda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007bde:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007be2:	ed93 0a00 	vldr	s0, [r3]
 8007be6:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007bea:	ed92 0a00 	vldr	s0, [r2]
 8007bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007bf8:	bfb8      	it	lt
 8007bfa:	eef1 7a67 	vneglt.f32	s15, s15
 8007bfe:	e760      	b.n	8007ac2 <atanf+0x1e>
 8007c00:	3fc90fdb 	.word	0x3fc90fdb
 8007c04:	bfc90fdb 	.word	0xbfc90fdb
 8007c08:	3edfffff 	.word	0x3edfffff
 8007c0c:	7149f2ca 	.word	0x7149f2ca
 8007c10:	3f97ffff 	.word	0x3f97ffff
 8007c14:	3c8569d7 	.word	0x3c8569d7
 8007c18:	3d4bda59 	.word	0x3d4bda59
 8007c1c:	bd6ef16b 	.word	0xbd6ef16b
 8007c20:	3d886b35 	.word	0x3d886b35
 8007c24:	3dba2e6e 	.word	0x3dba2e6e
 8007c28:	3e124925 	.word	0x3e124925
 8007c2c:	3eaaaaab 	.word	0x3eaaaaab
 8007c30:	bd15a221 	.word	0xbd15a221
 8007c34:	bd9d8795 	.word	0xbd9d8795
 8007c38:	bde38e38 	.word	0xbde38e38
 8007c3c:	be4ccccd 	.word	0xbe4ccccd
 8007c40:	401bffff 	.word	0x401bffff
 8007c44:	0800820c 	.word	0x0800820c
 8007c48:	0800821c 	.word	0x0800821c

08007c4c <fabsf>:
 8007c4c:	ee10 3a10 	vmov	r3, s0
 8007c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c54:	ee00 3a10 	vmov	s0, r3
 8007c58:	4770      	bx	lr
	...

08007c5c <floorf>:
 8007c5c:	ee10 3a10 	vmov	r3, s0
 8007c60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c64:	3a7f      	subs	r2, #127	; 0x7f
 8007c66:	2a16      	cmp	r2, #22
 8007c68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c6c:	dc2a      	bgt.n	8007cc4 <floorf+0x68>
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	da11      	bge.n	8007c96 <floorf+0x3a>
 8007c72:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007cd4 <floorf+0x78>
 8007c76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c82:	dd05      	ble.n	8007c90 <floorf+0x34>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da23      	bge.n	8007cd0 <floorf+0x74>
 8007c88:	4a13      	ldr	r2, [pc, #76]	; (8007cd8 <floorf+0x7c>)
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	bf18      	it	ne
 8007c8e:	4613      	movne	r3, r2
 8007c90:	ee00 3a10 	vmov	s0, r3
 8007c94:	4770      	bx	lr
 8007c96:	4911      	ldr	r1, [pc, #68]	; (8007cdc <floorf+0x80>)
 8007c98:	4111      	asrs	r1, r2
 8007c9a:	420b      	tst	r3, r1
 8007c9c:	d0fa      	beq.n	8007c94 <floorf+0x38>
 8007c9e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007cd4 <floorf+0x78>
 8007ca2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ca6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cae:	ddef      	ble.n	8007c90 <floorf+0x34>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bfbe      	ittt	lt
 8007cb4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007cb8:	fa40 f202 	asrlt.w	r2, r0, r2
 8007cbc:	189b      	addlt	r3, r3, r2
 8007cbe:	ea23 0301 	bic.w	r3, r3, r1
 8007cc2:	e7e5      	b.n	8007c90 <floorf+0x34>
 8007cc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007cc8:	d3e4      	bcc.n	8007c94 <floorf+0x38>
 8007cca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007cce:	4770      	bx	lr
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e7dd      	b.n	8007c90 <floorf+0x34>
 8007cd4:	7149f2ca 	.word	0x7149f2ca
 8007cd8:	bf800000 	.word	0xbf800000
 8007cdc:	007fffff 	.word	0x007fffff

08007ce0 <scalbnf>:
 8007ce0:	ee10 3a10 	vmov	r3, s0
 8007ce4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007ce8:	d025      	beq.n	8007d36 <scalbnf+0x56>
 8007cea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007cee:	d302      	bcc.n	8007cf6 <scalbnf+0x16>
 8007cf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007cf4:	4770      	bx	lr
 8007cf6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007cfa:	d122      	bne.n	8007d42 <scalbnf+0x62>
 8007cfc:	4b2a      	ldr	r3, [pc, #168]	; (8007da8 <scalbnf+0xc8>)
 8007cfe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007dac <scalbnf+0xcc>
 8007d02:	4298      	cmp	r0, r3
 8007d04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d08:	db16      	blt.n	8007d38 <scalbnf+0x58>
 8007d0a:	ee10 3a10 	vmov	r3, s0
 8007d0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d12:	3a19      	subs	r2, #25
 8007d14:	4402      	add	r2, r0
 8007d16:	2afe      	cmp	r2, #254	; 0xfe
 8007d18:	dd15      	ble.n	8007d46 <scalbnf+0x66>
 8007d1a:	ee10 3a10 	vmov	r3, s0
 8007d1e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007db0 <scalbnf+0xd0>
 8007d22:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007db4 <scalbnf+0xd4>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	eeb0 7a67 	vmov.f32	s14, s15
 8007d2c:	bfb8      	it	lt
 8007d2e:	eef0 7a66 	vmovlt.f32	s15, s13
 8007d32:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007d36:	4770      	bx	lr
 8007d38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007db8 <scalbnf+0xd8>
 8007d3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d40:	4770      	bx	lr
 8007d42:	0dd2      	lsrs	r2, r2, #23
 8007d44:	e7e6      	b.n	8007d14 <scalbnf+0x34>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	dd06      	ble.n	8007d58 <scalbnf+0x78>
 8007d4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007d52:	ee00 3a10 	vmov	s0, r3
 8007d56:	4770      	bx	lr
 8007d58:	f112 0f16 	cmn.w	r2, #22
 8007d5c:	da1a      	bge.n	8007d94 <scalbnf+0xb4>
 8007d5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d62:	4298      	cmp	r0, r3
 8007d64:	ee10 3a10 	vmov	r3, s0
 8007d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6c:	dd0a      	ble.n	8007d84 <scalbnf+0xa4>
 8007d6e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007db0 <scalbnf+0xd0>
 8007d72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007db4 <scalbnf+0xd4>
 8007d76:	eef0 7a40 	vmov.f32	s15, s0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bf18      	it	ne
 8007d7e:	eeb0 0a47 	vmovne.f32	s0, s14
 8007d82:	e7db      	b.n	8007d3c <scalbnf+0x5c>
 8007d84:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007db8 <scalbnf+0xd8>
 8007d88:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007dbc <scalbnf+0xdc>
 8007d8c:	eef0 7a40 	vmov.f32	s15, s0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	e7f3      	b.n	8007d7c <scalbnf+0x9c>
 8007d94:	3219      	adds	r2, #25
 8007d96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007d9e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007dc0 <scalbnf+0xe0>
 8007da2:	ee07 3a10 	vmov	s14, r3
 8007da6:	e7c4      	b.n	8007d32 <scalbnf+0x52>
 8007da8:	ffff3cb0 	.word	0xffff3cb0
 8007dac:	4c000000 	.word	0x4c000000
 8007db0:	7149f2ca 	.word	0x7149f2ca
 8007db4:	f149f2ca 	.word	0xf149f2ca
 8007db8:	0da24260 	.word	0x0da24260
 8007dbc:	8da24260 	.word	0x8da24260
 8007dc0:	33000000 	.word	0x33000000

08007dc4 <_init>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	bf00      	nop
 8007dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dca:	bc08      	pop	{r3}
 8007dcc:	469e      	mov	lr, r3
 8007dce:	4770      	bx	lr

08007dd0 <_fini>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr
